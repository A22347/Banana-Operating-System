
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 85 02 00       	call   c0028618 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 91 02 c0       	mov    ebx,0xc00291c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 91 02 c0    	cmp    ebx,0xc00291d0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 d9 02 c0       	mov    eax,0xc002d978
c0000049:	3d 78 d9 02 c0       	cmp    eax,0xc002d978
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 d9 02 c0       	push   0xc002d978
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 d9 02 c0       	mov    eax,0xc002d978
c0000075:	2d 78 d9 02 c0       	sub    eax,0xc002d978
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 d9 02 c0       	push   0xc002d978
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 df 02 c0 00 	cmp    BYTE PTR ds:0xc002dfa8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 91 02 c0       	mov    ebx,0xc00291d8
c00000bb:	81 eb d4 91 02 c0    	sub    ebx,0xc00291d4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 91 02 c0       	mov    esi,0xc00291d4
c00000ca:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac df 02 c0       	mov    ds:0xc002dfac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 d9 02 c0       	push   0xc002d978
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfa8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 df 02 c0       	push   0xc002dfb0
c000012c:	68 78 d9 02 c0       	push   0xc002d978
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 c5 d5 01 00       	call   c001d960 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 ff 28 01 00       	call   c0012cb2 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 a3 d5 01 00       	call   c001d960 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 f1 d9 01 00       	call   c001ddcd <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 9f df 01 00       	call   c001e384 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 f0 e3 02 c0 	lgdtd  ds:0xc002e3f0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 dc 45 01 00       	call   c0014bb5 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 c8 df 02 c0       	mov    ds:0xc002dfc8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 c8 df 02 c0    	mov    DWORD PTR ds:0xc002dfc8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d c8 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfc8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6e20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6e20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6e20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d e0 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfe0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d e0 df 02 c0    	mov    DWORD PTR ds:0xc002dfe0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 e4 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd201c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 e4 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd201c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d e0 df 02 c0    	mov    DWORD PTR ds:0xc002dfe0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 0c e0 02 c0    	cmp    DWORD PTR ds:0xc002e00c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 1c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e01c
c0000e60:	c7 42 0c 14 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e014
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 1c e0 02 c0    	mov    DWORD PTR ds:0xc002e01c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 0c e0 02 c0    	mov    DWORD PTR ds:0xc002e00c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 e0 df 02 c0 02 	test   BYTE PTR ds:0xc002dfe0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d e0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfe0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 e4 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd201c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 e4 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd201c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 14 e0 02 c0 	lea    edx,[eax*8-0x3ffd1fec]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 20 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e020
c00011e2:	81 fb 14 e0 02 c0    	cmp    ebx,0xc002e014
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 14 e0 02 c0       	cmp    eax,0xc002e014
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 10 e0 02 c0    	cmp    DWORD PTR ds:0xc002e010,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 1c e0 02 c0       	mov    ds:0xc002e01c,eax
c000121e:	a3 20 e0 02 c0       	mov    ds:0xc002e020,eax
c0001223:	a3 10 e0 02 c0       	mov    ds:0xc002e010,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 14 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e014
c0001231:	c7 40 0c 14 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e014
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 20 e0 02 c0       	mov    ds:0xc002e020,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 14 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e014
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 d8 df 02 c0 	lea    ebp,[edx*4-0x3ffd2028]
c0001282:	8b 14 95 e0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2020]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 e0 df 02 c0 	lea    ecx,[edx*4-0x3ffd2020]
c000129d:	8b 14 95 e0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2020]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 14 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1cec],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 14 e0 02 c0 	lea    eax,[eax*8-0x3ffd1fec]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 1c e0 02 c0    	mov    DWORD PTR ds:0xc002e01c,ecx
c0001357:	89 0d 20 e0 02 c0    	mov    DWORD PTR ds:0xc002e020,ecx
c000135d:	c7 41 08 14 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e014
c0001364:	c7 41 0c 14 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e014
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 0c e0 02 c0 	lea    edx,[ecx*8-0x3ffd1ff4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 14 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1cec]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 14 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1cec]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 0c e0 02 c0 	lea    edx,[eax*4-0x3ffd1ff4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 14 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1cec],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 1c e0 02 c0    	mov    DWORD PTR ds:0xc002e01c,edi
c000142a:	89 3d 20 e0 02 c0    	mov    DWORD PTR ds:0xc002e020,edi
c0001430:	c7 47 08 14 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e014
c0001437:	c7 47 0c 14 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e014
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 10 e0 02 c0    	mov    DWORD PTR ds:0xc002e010,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 0c e0 02 c0       	mov    eax,ds:0xc002e00c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 0c e0 02 c0    	mov    DWORD PTR ds:0xc002e00c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba e0 df 02 c0       	mov    edx,0xc002dfe0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d e0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfe0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 34 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e334
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 34 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e334,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 34 e3 02 c0    	mov    DWORD PTR ds:0xc002e334,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 0c e0 02 c0    	cmp    DWORD PTR ds:0xc002e00c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 0c e0 02 c0    	mov    DWORD PTR ds:0xc002e00c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d e0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfe0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 3c e3 02 c0    	push   DWORD PTR ds:0xc002e33c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d e0 df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfe0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 3c e3 02 c0       	mov    eax,ds:0xc002e33c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 0c e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e00c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 0c e0 02 c0       	mov    eax,ds:0xc002e00c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 e4 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd201c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 14 e0 02 c0       	mov    eax,0xc002e014
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 0c e3 02 c0       	cmp    eax,0xc002e30c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 48 e3 02 c0       	mov    eax,ds:0xc002e348
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 30 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e330
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 44 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e344
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 54 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e354
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6d1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 e0 df 02 c0       	mov    eax,ds:0xc002dfe0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 e0 df 02 c0       	mov    ds:0xc002dfe0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 24 e3 02 c0    	mov    DWORD PTR ds:0xc002e324,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 28 e3 02 c0    	mov    DWORD PTR ds:0xc002e328,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 2c e3 02 c0    	mov    DWORD PTR ds:0xc002e32c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 34 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e334,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 c0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce540]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 50 f1 01 00       	jmp    c0020d7c <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 c0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce540]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 81 f1 01 00       	jmp    c0020dc3 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 c0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce540]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 a9 f1 01 00       	jmp    c0020e0a <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 38 4a 02 00       	call   c002697c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6c00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6c00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba ec c7 02 c0       	mov    edx,0xc002c7ec
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 94 02 c0       	mov    edx,0xc002942c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 80 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1c80]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 60 e3 02 c0    	mov    ax,ds:0xc002e360
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 60 e3 02 c0    	mov    ds:0xc002e360,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 35 38 02 00       	call   c002697c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 94 02 c0       	mov    eax,0xc0029432
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 94 02 c0       	mov    eax,0xc002943b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6c00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 00 22 02 00       	call   c002697c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 94 02 c0       	mov    edx,0xc0029410
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 93 02 c0       	mov    edx,0xc0029310
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 80 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c80]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 80 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c80],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 c7 0b 02 00       	call   c002697c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ad 0b 02 00       	call   c002697c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 93 02 c0       	mov    eax,0xc0029357
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 93 02 c0       	mov    eax,0xc0029350
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 80 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c80]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 93 02 c0       	mov    esi,0xc0029340
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 f0 f2 01 00       	call   c002697c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 94 02 c0       	mov    edx,0xc0029420
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 93 02 c0       	mov    edx,0xc0029320
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 94 02 c0       	mov    edx,0xc0029442
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 94 02 c0       	mov    edx,0xc002944e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 94 02 c0       	mov    edx,0xc0029462
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029780
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029780
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 95 02 c0       	mov    eax,0xc0029580
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 94 02 c0       	mov    eax,0xc00294c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 44 fc 01 00       	call   c002844f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 07 fc 01 00       	call   c0028431 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 db fb 01 00       	call   c002844f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 8e f2 01 00       	call   c0027b54 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 08 fd 01 00       	call   c00285e0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 55 fb 01 00       	call   c002844f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 97 fa 01 00       	call   c002844f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 64 fa 01 00       	call   c0028431 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 51 f9 01 00       	call   c002844f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 19 f9 01 00       	call   c0028431 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 25 f7 01 00       	call   c002844f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ea f6 01 00       	call   c0028431 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6320]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 fa f3 01 00       	call   c00281e3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 78 ed 01 00       	call   c0027b80 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 34 f6 01 00       	call   c0028453 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 22 f7 01 00       	call   c0028577 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 0c ed 01 00       	call   c0027b80 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 b7 f5 01 00       	call   c002844d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 98 f5 01 00       	call   c0028451 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 26 f7 01 00       	call   c0028600 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 d8 f2 01 00       	call   c00281e3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 56 ec 01 00       	call   c0027b80 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 12 f5 01 00       	call   c0028453 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 00 f6 01 00       	call   c0028577 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ea eb 01 00       	call   c0027b80 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 95 f4 01 00       	call   c002844d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 75 f4 01 00       	call   c0028451 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 02 f6 01 00       	call   c0028600 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 b0 f3 01 00       	call   c002844f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 6e f3 01 00       	call   c0028431 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 56 f3 01 00       	call   c002844f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 c8 f0 01 00       	call   c00281e3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ca e3 01 00       	call   c0027503 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 2d ea 01 00       	call   c0027b80 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 7f f0 01 00       	call   c00281e3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 85 e3 01 00       	call   c0027503 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 54 f0 01 00       	call   c00281e3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 a4 f2 01 00       	call   c002844d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 81 e9 01 00       	call   c0027b54 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 fb f3 01 00       	call   c00285e0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 2a f2 01 00       	call   c0028431 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 25 e9 01 00       	call   c0027b54 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 a3 ef 01 00       	call   c00281e3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 26 e9 01 00       	call   c0027b80 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 78 ef 01 00       	call   c00281e3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 df eb 01 00       	call   c0027e64 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 5e e2 01 00       	call   c0027503 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 be db 01 00       	call   c0026e98 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 95 f2 01 00       	call   c0028577 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 7e e8 01 00       	call   c0027b80 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 65 f2 01 00       	call   c0028577 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 d7 e1 01 00       	call   c0027503 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 10 f1 01 00       	call   c0028453 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 f8 ea 01 00       	call   c0027e64 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 7e e1 01 00       	call   c0027503 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 64 f2 01 00       	call   c0028600 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 3e ee 01 00       	call   c00281e3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 95 e7 01 00       	call   c0027b54 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 74 f0 01 00       	call   c002844f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 0d e1 01 00       	call   c0027503 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 39 e7 01 00       	call   c0027b54 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 d3 f1 01 00       	call   c0028600 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 8c ed 01 00       	call   c00281e3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 09 e7 01 00       	call   c0027b80 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 5c ed 01 00       	call   c00281e3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 62 e0 01 00       	call   c0027503 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 32 ed 01 00       	call   c00281e3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 84 ef 01 00       	call   c002844f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 5b e6 01 00       	call   c0027b54 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 d5 f0 01 00       	call   c00285e0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 04 ef 01 00       	call   c0028431 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 fe e5 01 00       	call   c0027b54 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 7c ec 01 00       	call   c00281e3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ff e5 01 00       	call   c0027b80 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 51 ec 01 00       	call   c00281e3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 b8 e8 01 00       	call   c0027e64 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 37 df 01 00       	call   c0027503 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 87 d8 01 00       	call   c0026e98 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 5e ef 01 00       	call   c0028577 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 47 e5 01 00       	call   c0027b80 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 2e ef 01 00       	call   c0028577 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 a0 de 01 00       	call   c0027503 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 d9 ed 01 00       	call   c0028453 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 c0 e7 01 00       	call   c0027e64 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 3f de 01 00       	call   c0027503 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 25 ef 01 00       	call   c0028600 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ff ea 01 00       	call   c00281e3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 56 e4 01 00       	call   c0027b54 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 35 ed 01 00       	call   c002844f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ce dd 01 00       	call   c0027503 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 fa e3 01 00       	call   c0027b54 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 6f ea 01 00       	call   c00281e3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 75 dd 01 00       	call   c0027503 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9d 02 c0       	mov    eax,0xc0029d40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9d 02 c0       	mov    eax,0xc0029d54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ea e8 01 00       	call   c00281e3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 68 e2 01 00       	call   c0027b80 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 fa d4 01 00       	call   c0026e98 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 d1 eb 01 00       	call   c0028577 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ba e1 01 00       	call   c0027b80 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 9d eb 01 00       	call   c0028577 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 0f db 01 00       	call   c0027503 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 6f eb 01 00       	call   c0028577 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 5e e1 01 00       	call   c0027b80 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 c7 da 01 00       	call   c0027503 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 e8 d3 01 00       	call   c0026e98 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 bf ea 01 00       	call   c0028577 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 a8 e0 01 00       	call   c0027b80 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 8b ea 01 00       	call   c0028577 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 fd d9 01 00       	call   c0027503 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 5d ea 01 00       	call   c0028577 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 4c e0 01 00       	call   c0027b80 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 b5 d9 01 00       	call   c0027503 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 93 d9 01 00       	call   c0027503 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 6f d2 01 00       	call   c0026e98 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 46 e9 01 00       	call   c0028577 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 2f df 01 00       	call   c0027b80 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 12 e9 01 00       	call   c0028577 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 84 d8 01 00       	call   c0027503 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 e4 e8 01 00       	call   c0028577 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 cd de 01 00       	call   c0027b80 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 36 d8 01 00       	call   c0027503 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 96 e8 01 00       	call   c0028577 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 7f de 01 00       	call   c0027b80 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 e8 d7 01 00       	call   c0027503 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 fd d0 01 00       	call   c0026e98 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 d4 e7 01 00       	call   c0028577 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 bd dd 01 00       	call   c0027b80 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 a4 e7 01 00       	call   c0028577 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 16 d7 01 00       	call   c0027503 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 76 e7 01 00       	call   c0028577 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 5f dd 01 00       	call   c0027b80 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 c8 d6 01 00       	call   c0027503 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 28 e7 01 00       	call   c0028577 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 11 dd 01 00       	call   c0027b80 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 7a d6 01 00       	call   c0027503 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 4e d6 01 00       	call   c0027503 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 ab dc 01 00       	call   c0027b80 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 67 e5 01 00       	call   c0028453 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 f6 d5 01 00       	call   c0027503 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 53 dc 01 00       	call   c0027b80 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 0f e5 01 00       	call   c0028453 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 89 ce 01 00       	call   c0026e98 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 60 e5 01 00       	call   c0028577 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 49 db 01 00       	call   c0027b80 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 2c e5 01 00       	call   c0028577 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 9e d4 01 00       	call   c0027503 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 fe e4 01 00       	call   c0028577 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 e7 da 01 00       	call   c0027b80 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 50 d4 01 00       	call   c0027503 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 b0 e4 01 00       	call   c0028577 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 99 da 01 00       	call   c0027b80 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 02 d4 01 00       	call   c0027503 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 62 e4 01 00       	call   c0028577 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 4b da 01 00       	call   c0027b80 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 b4 d3 01 00       	call   c0027503 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 14 e4 01 00       	call   c0028577 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 fd d9 01 00       	call   c0027b80 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 66 d3 01 00       	call   c0027503 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 68 cc 01 00       	call   c0026e98 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 3f e3 01 00       	call   c0028577 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 28 d9 01 00       	call   c0027b80 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 0f e3 01 00       	call   c0028577 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 81 d2 01 00       	call   c0027503 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 e1 e2 01 00       	call   c0028577 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ca d8 01 00       	call   c0027b80 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 33 d2 01 00       	call   c0027503 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 93 e2 01 00       	call   c0028577 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 7c d8 01 00       	call   c0027b80 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 e5 d1 01 00       	call   c0027503 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 45 e2 01 00       	call   c0028577 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 2e d8 01 00       	call   c0027b80 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 97 d1 01 00       	call   c0027503 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 f7 e1 01 00       	call   c0028577 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 e0 d7 01 00       	call   c0027b80 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 49 d1 01 00       	call   c0027503 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 1d d1 01 00       	call   c0027503 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 7a d7 01 00       	call   c0027b80 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 36 e0 01 00       	call   c0028453 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 c5 d0 01 00       	call   c0027503 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 22 d7 01 00       	call   c0027b80 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 de df 01 00       	call   c0028453 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 6c d0 01 00       	call   c0027503 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 c9 d6 01 00       	call   c0027b80 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 85 df 01 00       	call   c0028453 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 13 d0 01 00       	call   c0027503 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 70 d6 01 00       	call   c0027b80 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 2c df 01 00       	call   c0028453 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 8a c8 01 00       	call   c0026e98 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 61 df 01 00       	call   c0028577 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 4a d5 01 00       	call   c0027b80 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 2d df 01 00       	call   c0028577 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 9f ce 01 00       	call   c0027503 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ff de 01 00       	call   c0028577 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 e8 d4 01 00       	call   c0027b80 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 51 ce 01 00       	call   c0027503 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 b1 de 01 00       	call   c0028577 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 9a d4 01 00       	call   c0027b80 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 03 ce 01 00       	call   c0027503 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 63 de 01 00       	call   c0028577 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 4c d4 01 00       	call   c0027b80 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 b5 cd 01 00       	call   c0027503 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 15 de 01 00       	call   c0028577 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 fe d3 01 00       	call   c0027b80 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 67 cd 01 00       	call   c0027503 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 c7 dd 01 00       	call   c0028577 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 b0 d3 01 00       	call   c0027b80 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 16 cd 01 00       	call   c0027503 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 76 dd 01 00       	call   c0028577 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 5f d3 01 00       	call   c0027b80 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 c8 cc 01 00       	call   c0027503 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 c2 c5 01 00       	call   c0026e98 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 99 dc 01 00       	call   c0028577 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 82 d2 01 00       	call   c0027b80 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 62 dc 01 00       	call   c0028577 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 d4 cb 01 00       	call   c0027503 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 34 dc 01 00       	call   c0028577 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 1d d2 01 00       	call   c0027b80 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 86 cb 01 00       	call   c0027503 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 e6 db 01 00       	call   c0028577 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 cf d1 01 00       	call   c0027b80 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 38 cb 01 00       	call   c0027503 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 98 db 01 00       	call   c0028577 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 81 d1 01 00       	call   c0027b80 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ea ca 01 00       	call   c0027503 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 4a db 01 00       	call   c0028577 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 33 d1 01 00       	call   c0027b80 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 9c ca 01 00       	call   c0027503 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 fc da 01 00       	call   c0028577 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 e5 d0 01 00       	call   c0027b80 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 4b ca 01 00       	call   c0027503 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 ab da 01 00       	call   c0028577 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 94 d0 01 00       	call   c0027b80 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 03 ca 01 00       	call   c0027503 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 dc c9 01 00       	call   c0027503 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 3a d0 01 00       	call   c0027b80 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 f6 d8 01 00       	call   c0028453 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 85 c9 01 00       	call   c0027503 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 e3 cf 01 00       	call   c0027b80 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 9f d8 01 00       	call   c0028453 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 2d c9 01 00       	call   c0027503 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 8b cf 01 00       	call   c0027b80 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 47 d8 01 00       	call   c0028453 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 d5 c8 01 00       	call   c0027503 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 33 cf 01 00       	call   c0027b80 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 ef d7 01 00       	call   c0028453 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 7d c8 01 00       	call   c0027503 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 db ce 01 00       	call   c0027b80 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 97 d7 01 00       	call   c0028453 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 2b c8 01 00       	call   c0027503 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 89 ce 01 00       	call   c0027b80 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 45 d7 01 00       	call   c0028453 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 59 c0 01 00       	call   c0026e98 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 30 d7 01 00       	call   c0028577 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 19 cd 01 00       	call   c0027b80 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 00 d7 01 00       	call   c0028577 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 72 c6 01 00       	call   c0027503 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd627c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 a6 d6 01 00       	call   c0028577 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 8f cc 01 00       	call   c0027b80 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 fa c5 01 00       	call   c0027503 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 47 d6 01 00       	call   c0028577 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 30 cc 01 00       	call   c0027b80 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 9b c5 01 00       	call   c0027503 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 e8 d5 01 00       	call   c0028577 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 d1 cb 01 00       	call   c0027b80 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 3c c5 01 00       	call   c0027503 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 89 d5 01 00       	call   c0028577 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 72 cb 01 00       	call   c0027b80 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 dd c4 01 00       	call   c0027503 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 2a d5 01 00       	call   c0028577 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 13 cb 01 00       	call   c0027b80 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 7e c4 01 00       	call   c0027503 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 cb d4 01 00       	call   c0028577 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 b4 ca 01 00       	call   c0027b80 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 1f c4 01 00       	call   c0027503 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 6c d4 01 00       	call   c0028577 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 55 ca 01 00       	call   c0027b80 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 c0 c3 01 00       	call   c0027503 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 0d d4 01 00       	call   c0028577 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 f6 c9 01 00       	call   c0027b80 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 61 c3 01 00       	call   c0027503 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 6b bc 01 00       	call   c0026e98 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 42 d3 01 00       	call   c0028577 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 2b c9 01 00       	call   c0027b80 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 12 d3 01 00       	call   c0028577 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 84 c2 01 00       	call   c0027503 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6260]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 b7 d2 01 00       	call   c0028577 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 a0 c8 01 00       	call   c0027b80 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 0b c2 01 00       	call   c0027503 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 57 d2 01 00       	call   c0028577 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 40 c8 01 00       	call   c0027b80 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 ab c1 01 00       	call   c0027503 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 f7 d1 01 00       	call   c0028577 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 e0 c7 01 00       	call   c0027b80 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 4b c1 01 00       	call   c0027503 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 97 d1 01 00       	call   c0028577 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 80 c7 01 00       	call   c0027b80 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 eb c0 01 00       	call   c0027503 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 37 d1 01 00       	call   c0028577 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 20 c7 01 00       	call   c0027b80 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 8b c0 01 00       	call   c0027503 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 d7 d0 01 00       	call   c0028577 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 c0 c6 01 00       	call   c0027b80 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 2b c0 01 00       	call   c0027503 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 77 d0 01 00       	call   c0028577 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 60 c6 01 00       	call   c0027b80 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 cb bf 01 00       	call   c0027503 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 17 d0 01 00       	call   c0028577 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 00 c6 01 00       	call   c0027b80 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 6b bf 01 00       	call   c0027503 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6244]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 10 bf 01 00       	call   c0027503 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 6d c5 01 00       	call   c0027b80 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 29 ce 01 00       	call   c0028453 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 b3 be 01 00       	call   c0027503 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 10 c5 01 00       	call   c0027b80 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 cc cd 01 00       	call   c0028453 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 56 be 01 00       	call   c0027503 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 b3 c4 01 00       	call   c0027b80 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 6f cd 01 00       	call   c0028453 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 f9 bd 01 00       	call   c0027503 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 56 c4 01 00       	call   c0027b80 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 12 cd 01 00       	call   c0028453 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 9c bd 01 00       	call   c0027503 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 f9 c3 01 00       	call   c0027b80 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 b5 cc 01 00       	call   c0028453 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 3f bd 01 00       	call   c0027503 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 9c c3 01 00       	call   c0027b80 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 58 cc 01 00       	call   c0028453 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 e2 bc 01 00       	call   c0027503 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 3f c3 01 00       	call   c0027b80 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 fb cb 01 00       	call   c0028453 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 85 bc 01 00       	call   c0027503 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 e2 c2 01 00       	call   c0027b80 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 9e cb 01 00       	call   c0028453 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 9a c2 01 00       	call   c0027b80 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 0a cd 01 00       	jmp    c0028600 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 7c c9 01 00       	call   c002844f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 3a c9 01 00       	call   c0028431 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 d1 c6 01 00       	call   c00281e3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 d2 b9 01 00       	call   c0027503 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 a1 c6 01 00       	call   c00281e3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 08 c3 01 00       	call   c0027e64 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 a7 c8 01 00       	call   c0028431 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 aa c8 01 00       	call   c002844f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 7d c8 01 00       	call   c002844f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 76 c2 01 00       	call   c0027e64 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 f8 c9 01 00       	call   c0028600 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 d3 c9 01 00       	call   c0028600 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ad c5 01 00       	call   c00281e3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 04 bf 01 00       	call   c0027b54 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 e3 c7 01 00       	call   c002844f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 7c b8 01 00       	call   c0027503 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 a0 be 01 00       	call   c0027b54 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 3a c9 01 00       	call   c0028600 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 7a c1 01 00       	call   c0027e64 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 f7 b7 01 00       	call   c0027503 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 23 c4 01 00       	call   c00281e3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 23 b7 01 00       	call   c0027503 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 03 b7 01 00       	call   c0027503 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 d3 c3 01 00       	call   c00281e3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 23 c6 01 00       	call   c002844d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 02 bd 01 00       	call   c0027b54 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 7c c7 01 00       	call   c00285e0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 ab c5 01 00       	call   c0028431 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 a9 bc 01 00       	call   c0027b54 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 27 c3 01 00       	call   c00281e3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 aa bc 01 00       	call   c0027b80 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 fc c2 01 00       	call   c00281e3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 63 bf 01 00       	call   c0027e64 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 e2 b5 01 00       	call   c0027503 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ac c2 01 00       	call   c00281e3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 f8 c4 01 00       	call   c002844f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ed bb 01 00       	call   c0027b80 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 bf bb 01 00       	call   c0027b80 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 f8 c1 01 00       	call   c00281e3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 5c be 01 00       	call   c0027e64 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 24 be 01 00       	call   c0027e64 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 a3 b4 01 00       	call   c0027503 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 88 c5 01 00       	call   c0028600 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 62 c1 01 00       	call   c00281e3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 b9 ba 01 00       	call   c0027b54 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 98 c3 01 00       	call   c002844f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 30 b4 01 00       	call   c0027503 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 54 ba 01 00       	call   c0027b54 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ee c4 01 00       	call   c0028600 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 b7 c2 01 00       	call   c002844f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 75 c2 01 00       	call   c0028431 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 0c c0 01 00       	call   c00281e3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 0d b3 01 00       	call   c0027503 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 dc bf 01 00       	call   c00281e3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 43 bc 01 00       	call   c0027e64 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 e2 c1 01 00       	call   c0028431 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 e5 c1 01 00       	call   c002844f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 b8 c1 01 00       	call   c002844f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 b1 bb 01 00       	call   c0027e64 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 33 c3 01 00       	call   c0028600 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 0e c3 01 00       	call   c0028600 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 e8 be 01 00       	call   c00281e3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 3f b8 01 00       	call   c0027b54 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 1e c1 01 00       	call   c002844f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 b7 b1 01 00       	call   c0027503 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 db b7 01 00       	call   c0027b54 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 75 c2 01 00       	call   c0028600 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 b5 ba 01 00       	call   c0027e64 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 32 b1 01 00       	call   c0027503 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 5d bd 01 00       	call   c00281e3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 5d b0 01 00       	call   c0027503 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 3d b0 01 00       	call   c0027503 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 0d bd 01 00       	call   c00281e3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 5d bf 01 00       	call   c002844d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 3b b6 01 00       	call   c0027b54 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 b5 c0 01 00       	call   c00285e0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 e4 be 01 00       	call   c0028431 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 e1 b5 01 00       	call   c0027b54 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 5f bc 01 00       	call   c00281e3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 e2 b5 01 00       	call   c0027b80 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 34 bc 01 00       	call   c00281e3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 9b b8 01 00       	call   c0027e64 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 1a af 01 00       	call   c0027503 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 e4 bb 01 00       	call   c00281e3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 30 be 01 00       	call   c002844f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 25 b5 01 00       	call   c0027b80 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 f7 b4 01 00       	call   c0027b80 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 2e bb 01 00       	call   c00281e3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 92 b7 01 00       	call   c0027e64 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 5f b7 01 00       	call   c0027e64 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 de ad 01 00       	call   c0027503 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 c3 be 01 00       	call   c0028600 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 9d ba 01 00       	call   c00281e3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 f4 b3 01 00       	call   c0027b54 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 d3 bc 01 00       	call   c002844f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 6b ad 01 00       	call   c0027503 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 8f b3 01 00       	call   c0027b54 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 29 be 01 00       	call   c0028600 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 f2 bb 01 00       	call   c002844f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 b0 bb 01 00       	call   c0028431 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 47 b9 01 00       	call   c00281e3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 48 ac 01 00       	call   c0027503 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 17 b9 01 00       	call   c00281e3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 7e b5 01 00       	call   c0027e64 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 1d bb 01 00       	call   c0028431 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 20 bb 01 00       	call   c002844f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 f3 ba 01 00       	call   c002844f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ec b4 01 00       	call   c0027e64 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 6e bc 01 00       	call   c0028600 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 49 bc 01 00       	call   c0028600 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 23 b8 01 00       	call   c00281e3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 7a b1 01 00       	call   c0027b54 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 59 ba 01 00       	call   c002844f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 f2 aa 01 00       	call   c0027503 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 16 b1 01 00       	call   c0027b54 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 b0 bb 01 00       	call   c0028600 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 f0 b3 01 00       	call   c0027e64 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 6d aa 01 00       	call   c0027503 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 98 b6 01 00       	call   c00281e3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 98 a9 01 00       	call   c0027503 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 78 a9 01 00       	call   c0027503 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 48 b6 01 00       	call   c00281e3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 98 b8 01 00       	call   c002844d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 76 af 01 00       	call   c0027b54 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 f0 b9 01 00       	call   c00285e0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 1f b8 01 00       	call   c0028431 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 1c af 01 00       	call   c0027b54 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 9a b5 01 00       	call   c00281e3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 1d af 01 00       	call   c0027b80 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 6f b5 01 00       	call   c00281e3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 d6 b1 01 00       	call   c0027e64 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 55 a8 01 00       	call   c0027503 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 1f b5 01 00       	call   c00281e3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 6b b7 01 00       	call   c002844f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 60 ae 01 00       	call   c0027b80 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 32 ae 01 00       	call   c0027b80 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 69 b4 01 00       	call   c00281e3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 cd b0 01 00       	call   c0027e64 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 9a b0 01 00       	call   c0027e64 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 19 a7 01 00       	call   c0027503 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 fe b7 01 00       	call   c0028600 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 d8 b3 01 00       	call   c00281e3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 2f ad 01 00       	call   c0027b54 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 0e b6 01 00       	call   c002844f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 a6 a6 01 00       	call   c0027503 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ca ac 01 00       	call   c0027b54 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 64 b7 01 00       	call   c0028600 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 2d b5 01 00       	call   c002844f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 eb b4 01 00       	call   c0028431 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 82 b2 01 00       	call   c00281e3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 83 a5 01 00       	call   c0027503 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 52 b2 01 00       	call   c00281e3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 b9 ae 01 00       	call   c0027e64 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 58 b4 01 00       	call   c0028431 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 5b b4 01 00       	call   c002844f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 2e b4 01 00       	call   c002844f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 27 ae 01 00       	call   c0027e64 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 a9 b5 01 00       	call   c0028600 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 84 b5 01 00       	call   c0028600 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 5e b1 01 00       	call   c00281e3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 b5 aa 01 00       	call   c0027b54 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 94 b3 01 00       	call   c002844f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 2d a4 01 00       	call   c0027503 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 51 aa 01 00       	call   c0027b54 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 eb b4 01 00       	call   c0028600 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 2b ad 01 00       	call   c0027e64 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 a8 a3 01 00       	call   c0027503 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 d3 af 01 00       	call   c00281e3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 d3 a2 01 00       	call   c0027503 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 b3 a2 01 00       	call   c0027503 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 83 af 01 00       	call   c00281e3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 d3 b1 01 00       	call   c002844d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 b1 a8 01 00       	call   c0027b54 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 2b b3 01 00       	call   c00285e0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 5a b1 01 00       	call   c0028431 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 57 a8 01 00       	call   c0027b54 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 d5 ae 01 00       	call   c00281e3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 58 a8 01 00       	call   c0027b80 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 aa ae 01 00       	call   c00281e3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 11 ab 01 00       	call   c0027e64 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 90 a1 01 00       	call   c0027503 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 5a ae 01 00       	call   c00281e3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 a6 b0 01 00       	call   c002844f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 9b a7 01 00       	call   c0027b80 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 6d a7 01 00       	call   c0027b80 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 a4 ad 01 00       	call   c00281e3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 08 aa 01 00       	call   c0027e64 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 d5 a9 01 00       	call   c0027e64 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 54 a0 01 00       	call   c0027503 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 39 b1 01 00       	call   c0028600 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 13 ad 01 00       	call   c00281e3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 6a a6 01 00       	call   c0027b54 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 49 af 01 00       	call   c002844f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 e1 9f 01 00       	call   c0027503 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 05 a6 01 00       	call   c0027b54 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 9f b0 01 00       	call   c0028600 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 65 ae 01 00       	call   c002844f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 23 ae 01 00       	call   c0028431 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ba ab 01 00       	call   c00281e3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 bb 9e 01 00       	call   c0027503 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 8a ab 01 00       	call   c00281e3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 f1 a7 01 00       	call   c0027e64 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 90 ad 01 00       	call   c0028431 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 93 ad 01 00       	call   c002844f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 66 ad 01 00       	call   c002844f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 5f a7 01 00       	call   c0027e64 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 e1 ae 01 00       	call   c0028600 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 b8 ae 01 00       	call   c0028600 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 92 aa 01 00       	call   c00281e3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 e9 a3 01 00       	call   c0027b54 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 c8 ac 01 00       	call   c002844f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 61 9d 01 00       	call   c0027503 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 89 a3 01 00       	call   c0027b54 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 23 ae 01 00       	call   c0028600 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 64 a6 01 00       	call   c0027e64 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 e1 9c 01 00       	call   c0027503 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 0d a9 01 00       	call   c00281e3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 0d 9c 01 00       	call   c0027503 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ed 9b 01 00       	call   c0027503 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 bd a8 01 00       	call   c00281e3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 f1 aa 01 00       	call   c0028431 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 e8 a1 01 00       	call   c0027b54 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 62 ac 01 00       	call   c00285e0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 91 aa 01 00       	call   c0028431 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 8b a1 01 00       	call   c0027b54 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 09 a8 01 00       	call   c00281e3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 8c a1 01 00       	call   c0027b80 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 de a7 01 00       	call   c00281e3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 45 a4 01 00       	call   c0027e64 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 c4 9a 01 00       	call   c0027503 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 8e a7 01 00       	call   c00281e3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 da a9 01 00       	call   c002844f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 cf a0 01 00       	call   c0027b80 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 a1 a0 01 00       	call   c0027b80 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 e5 a6 01 00       	call   c00281e3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 4c a3 01 00       	call   c0027e64 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 35 a0 01 00       	call   c0027b80 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 f1 a8 01 00       	call   c0028453 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 e4 a2 01 00       	call   c0027e64 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 63 99 01 00       	call   c0027503 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 48 aa 01 00       	call   c0028600 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 22 a6 01 00       	call   c00281e3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 79 9f 01 00       	call   c0027b54 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 58 a8 01 00       	call   c002844f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 f0 98 01 00       	call   c0027503 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 18 9f 01 00       	call   c0027b54 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 b2 a9 01 00       	call   c0028600 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd621c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6228]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 6d a6 01 00       	call   c002844f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 2b a6 01 00       	call   c0028431 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 17 a6 01 00       	call   c002844f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 89 a3 01 00       	call   c00281e3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 07 9d 01 00       	call   c0027b80 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 59 a3 01 00       	call   c00281e3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 5f 96 01 00       	call   c0027503 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 2e a3 01 00       	call   c00281e3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 7e a5 01 00       	call   c002844d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 5f 9c 01 00       	call   c0027b54 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 d9 a6 01 00       	call   c00285e0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 08 a5 01 00       	call   c0028431 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 07 9c 01 00       	call   c0027b54 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 85 a2 01 00       	call   c00281e3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 08 9c 01 00       	call   c0027b80 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 5a a2 01 00       	call   c00281e3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 c1 9e 01 00       	call   c0027e64 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 40 95 01 00       	call   c0027503 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 68 9e 01 00       	call   c0027e64 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ee 94 01 00       	call   c0027503 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 d4 a5 01 00       	call   c0028600 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ae a1 01 00       	call   c00281e3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 05 9b 01 00       	call   c0027b54 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 e4 a3 01 00       	call   c002844f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 7d 94 01 00       	call   c0027503 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 a9 9a 01 00       	call   c0027b54 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 43 a5 01 00       	call   c0028600 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 f8 a0 01 00       	call   c00281e3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 75 9a 01 00       	call   c0027b80 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 c6 a0 01 00       	call   c00281e3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 cc 93 01 00       	call   c0027503 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 9c a0 01 00       	call   c00281e3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 f0 a2 01 00       	call   c0028451 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 c9 99 01 00       	call   c0027b54 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 43 a4 01 00       	call   c00285e0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 72 a2 01 00       	call   c0028431 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 70 99 01 00       	call   c0027b54 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ee 9f 01 00       	call   c00281e3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 71 99 01 00       	call   c0027b80 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 c3 9f 01 00       	call   c00281e3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 2a 9c 01 00       	call   c0027e64 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 a9 92 01 00       	call   c0027503 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 c5 9b 01 00       	call   c0027e64 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 44 92 01 00       	call   c0027503 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 2a a3 01 00       	call   c0028600 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 04 9f 01 00       	call   c00281e3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 5b 98 01 00       	call   c0027b54 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 3a a1 01 00       	call   c002844f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 d3 91 01 00       	call   c0027503 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ff 97 01 00       	call   c0027b54 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 70 9e 01 00       	call   c00281e3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 76 91 01 00       	call   c0027503 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9e 02 c0       	mov    eax,0xc0029efe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f 9f 02 c0       	mov    eax,0xc0029f0f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 9f 02 c0       	push   0xc0029f46
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 e8 e3 02 c0       	mov    eax,0xc002e3e8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f 9f 02 c0       	push   0xc0029f4f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 9f 02 c0       	push   0xc0029f59
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 b0 66 02 c0       	mov    eax,0xc00266b0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 9f 02 c0       	push   0xc0029f62
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 7c 6a 02 c0       	mov    eax,0xc0026a7c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c 9f 02 c0       	push   0xc0029f6c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 fc 67 02 c0       	mov    eax,0xc00267fc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 9f 02 c0       	push   0xc0029f75
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ec e3 02 c0       	mov    eax,0xc002e3ec
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 9f 02 c0       	push   0xc0029f82
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ed e3 02 c0       	mov    eax,0xc002e3ed
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 4d 5e 00 00       	call   c0014470 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c000e668:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 59 f5 00 00       	call   c001dbce <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 42 f8 00 00       	call   c001decc <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 2a e7 01 c0       	push   0xc001e72a
c000e693:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c000e699:	e8 2e f8 00 00       	call   c001decc <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 08 19 03 c0       	mov    ds:0xc0031908,eax
c000e6a6:	c6 05 ed e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3ed,0x1
c000e6ad:	e8 f9 03 01 00       	call   c001eaab <Vm::initialise8086()>
c000e6b2:	e8 a1 4b 00 00       	call   c0013258 <Fs::initVFS()>
c000e6b7:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 8b de 00 00       	call   c001c55e <Sys::loadSyscalls()>
c000e6d3:	e8 64 bd 00 00       	call   c001a43c <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c 9f 02 c0       	push   0xc0029f9c
c000e6e2:	68 a5 9f 02 c0       	push   0xc0029fa5
c000e6e7:	e8 76 ca 00 00       	call   c001b162 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 4c 56 00 00       	call   c0013d40 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 3f 5d 00 00       	call   c0014444 <Device::loadDriversForAll()>
c000e705:	e8 78 b8 00 00       	call   c0019f82 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d e8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad 9f 02 c0       	push   0xc0029fad
c000e719:	e8 d4 ef 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 ff f1 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 fc fa 00 00       	call   c001e230 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 9f 02 c0       	push   0xc0029fc9
c000e749:	50                   	push   eax
c000e74a:	e8 9b 5d 00 00       	call   c00144ea <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 01 e4 02 c0 04 	test   BYTE PTR ds:0xc002e401,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 63 7d 01 00       	call   c0026646 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 76 a3 00 00       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 4f a3 00 00       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 2d a3 00 00       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 0b a3 00 00       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 00 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e400,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 19 a2 00 00       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 f4 a1 00 00       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 cd 7b 01 00       	call   c0026600 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 8a 7b 01 00       	call   c00265e0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 10 a2 00 00       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 9f 02 c0       	push   0xc0029fd9
c000eaaf:	e8 20 44 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec 9f 02 c0       	push   0xc0029fec
c000ead2:	e8 fd 43 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd 9f 02 c0       	push   0xc0029ffd
c000eaf5:	e8 da 43 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e a0 02 c0       	push   0xc002a00e
c000eb18:	e8 b7 43 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f a0 02 c0       	push   0xc002a01f
c000eb3b:	e8 94 43 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 a0 02 c0       	push   0xc002a030
c000eb5e:	e8 71 43 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 a0 02 c0       	push   0xc002a041
c000eb81:	e8 4e 43 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 a0 02 c0       	push   0xc002a052
c000eba4:	e8 2b 43 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 a0 02 c0       	push   0xc002a063
c000ebc7:	e8 08 43 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 a0 02 c0       	push   0xc002a074
c000ebea:	e8 e5 42 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 a0 02 c0       	push   0xc002a085
c000ec0d:	e8 c2 42 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 a0 02 c0       	push   0xc002a096
c000ec30:	e8 9f 42 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 a0 02 c0       	push   0xc002a0a7
c000ec53:	e8 7c 42 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 a0 02 c0       	push   0xc002a0b8
c000ec76:	e8 59 42 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 a0 02 c0       	push   0xc002a0c9
c000ec99:	e8 36 42 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da a0 02 c0       	push   0xc002a0da
c000ecbc:	e8 13 42 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb a0 02 c0       	push   0xc002a0eb
c000ecdf:	e8 f0 41 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc a0 02 c0       	push   0xc002a0fc
c000ed02:	e8 cd 41 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a1 02 c0       	push   0xc002a10d
c000ed21:	e8 ae 41 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 50 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba50
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 9d 41 00 00       	jmp    c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a1 02 c0       	push   0xc002a11e
c000ee0a:	e8 66 b7 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a1 02 c0       	push   0xc002a124
c000ee42:	e8 2e b7 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 00 e4 02 c0 04 	test   BYTE PTR ds:0xc002e400,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 24 d3 02 c0 	sete   BYTE PTR ds:0xc002d324
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 af 92 00 00       	call   c0018164 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 36 54 00 00       	call   c00142fa <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 58 9e 00 00       	call   c0018d4c <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 f7 53 00 00       	call   c00142fa <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 61 59 00 00       	call   c0014880 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 c7 53 00 00       	call   c00142fa <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 77 f0 00 00       	call   c001dfcc <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a1 02 c0       	push   0xc002a12a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 31 3f 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a1 02 c0       	push   0xc002a13b
c000efc0:	e8 b0 b5 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a1 02 c0       	push   0xc002a148
c000efd5:	e8 9b b5 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a152
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 84 b5 00 00       	jmp    c001a575 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a1 02 c0       	push   0xc002a18c
c000f086:	e8 49 3e 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 f2 e3 02 c0       	mov    ds:0xc002e3f2,eax
c000f0c7:	66 89 15 f0 e3 02 c0 	mov    WORD PTR ds:0xc002e3f0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 be eb 00 00       	call   c001dd9c <unlockScheduler()>
c000f1de:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 e8 e3 02 c0    	push   DWORD PTR ds:0xc002e3e8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 54 94 01 00       	call   c0028680 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 4b 94 01 00       	call   c0028680 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 f8 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e3f8,0x7ff
c000f323:	a3 fa e3 02 c0       	mov    ds:0xc002e3fa,eax
c000f328:	0f 01 1d f8 e3 02 c0 	lidtd  ds:0xc002e3f8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 25 28 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 56 2e 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 92 1e 00 00       	call   c00114d0 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c3 1e 00 00       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 e8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3e8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 00 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d300
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 00 d3 02 c0       	mov    eax,ds:0xc002d300
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a1 02 c0       	push   0xc002a1a8
c000f6f4:	e8 db 37 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 00 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d300,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 1b 27 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 00 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d300
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 3d 2c 00 00       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 00 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d300
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a1 02 c0       	push   0xc002a1d8
c000f7ad:	e8 c3 ad 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a1 02 c0       	push   0xc002a1dd
c000f7c3:	e8 ad ad 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 c1 e5 00 00       	call   c001dd9a <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 b2 e5 00 00       	call   c001dd9c <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 3f 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 6c 2c 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 24 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 0f 29 00 00       	call   c0012132 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 80 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e480,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 20 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d320
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 80 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e480,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 80 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e480,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 80 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e480,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 80 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e480,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 b2 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 80 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e480,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 74 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 0b 0d 00 00       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 20 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d320
c000fb46:	80 3d 80 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e480,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 20 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d320,0x8000
c000fba0:	c6 05 80 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e480,0x1
c000fba7:	c7 05 b8 e4 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e4b8,0xc000fa13
c000fbb1:	c7 05 a4 e4 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e4a4,0xc000f89a
c000fbbb:	c7 05 a0 e4 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e4a0,0xc000f8e5
c000fbc5:	c7 05 ac e4 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e4ac,0xc000fa59
c000fbcf:	c7 05 b4 e4 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e4b4,0xc000f963
c000fbd9:	c7 05 a8 e4 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e4a8,0xc000f9c1
c000fbe3:	c7 05 b0 e4 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e4b0,0xc000f9c2
c000fbed:	c7 05 bc e4 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e4bc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 f2 09 00 00       	call   c00105fc <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 e4 a1 02 c0       	push   0xc002a1e4
c000fc4a:	e8 85 32 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 51 04 00 00       	call   c00100b7 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 f3 20 00 00       	call   c0011d5e <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 51 ba 02 c0       	push   0xc002ba51
c000fc92:	e8 de a8 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 00 e4 02 c0    	mov    DWORD PTR ds:0xc002e400,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 c3 22 00 00       	call   c0011f70 <VAS::VAS()>
c000fcad:	89 1d 68 e5 02 c0    	mov    DWORD PTR ds:0xc002e568,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 fb a1 02 c0 	mov    DWORD PTR [esp],0xc002a1fb
c000fcbf:	e8 10 32 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 14 21 00 00       	call   c0011ddd <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 e8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e8,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 18 a2 02 c0       	push   0xc002a218
c000fced:	e8 e2 31 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 fe 24 00 00       	call   c001220a <VAS::~VAS()>
c000fd0c:	c7 04 24 2b a2 02 c0 	mov    DWORD PTR [esp],0xc002a22b
c000fd13:	e8 5d a8 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 40 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1bc0],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 40 e4 02 c0       	mov    esi,0xc002e440
c000fd89:	8d 90 40 e4 02 c0    	lea    edx,[eax-0x3ffd1bc0]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 40 e4 02 c0    	lea    eax,[edx-0x3ffd1bc0]
c000fdef:	8d 94 11 40 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1bc0]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 04 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d304
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 04 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d304
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 04 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d304
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 30 e4 02 c0       	mov    eax,ds:0xc002e430
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 30 e4 02 c0       	mov    ds:0xc002e430,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 34 e4 02 c0    	idiv   DWORD PTR ds:0xc002e434
c000fe91:	39 05 2c e4 02 c0    	cmp    DWORD PTR ds:0xc002e42c,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 2c e4 02 c0       	mov    ds:0xc002e42c,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 d6 0a 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 46 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a246
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 93 a6 00 00       	jmp    c001a575 <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 24 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e424
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d 24 e4 02 c0    	mov    DWORD PTR ds:0xc002e424,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 24 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e424,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 5c a2 02 c0       	push   0xc002a25c
c000ff27:	e8 a8 2f 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a9 00 00 00    	jne    c000ffec <Phys::allocatePage()+0x10a>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 6d a2 02 c0       	push   0xc002a26d
c000ff4b:	e8 25 a6 00 00       	call   c001a575 <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d 24 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e424
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 30 e4 02 c0       	mov    eax,ds:0xc002e430
c000ff71:	59                   	pop    ecx
c000ff72:	40                   	inc    eax
c000ff73:	5b                   	pop    ebx
c000ff74:	a3 30 e4 02 c0       	mov    ds:0xc002e430,eax
c000ff79:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	c1 e0 02             	shl    eax,0x2
c000ff82:	99                   	cdq    
c000ff83:	f7 3d 34 e4 02 c0    	idiv   DWORD PTR ds:0xc002e434
c000ff89:	39 05 2c e4 02 c0    	cmp    DWORD PTR ds:0xc002e42c,eax
c000ff8f:	75 61                	jne    c000fff2 <Phys::allocatePage()+0x110>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4e                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c000ff96:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000ff9d:	75 45                	jne    c000ffe4 <Phys::allocatePage()+0x102>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 1f                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 18                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 0e                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffb9:	52                   	push   edx
c000ffba:	6a 04                	push   0x4
c000ffbc:	6a 08                	push   0x8
c000ffbe:	50                   	push   eax
c000ffbf:	e8 38 2c 00 00       	call   c0012bfc <VAS::scanForEviction(int, int)>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	a1 30 e4 02 c0       	mov    eax,ds:0xc002e430
c000ffcc:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffcf:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd2:	c1 e0 02             	shl    eax,0x2
c000ffd5:	99                   	cdq    
c000ffd6:	f7 3d 34 e4 02 c0    	idiv   DWORD PTR ds:0xc002e434
c000ffdc:	39 05 2c e4 02 c0    	cmp    DWORD PTR ds:0xc002e42c,eax
c000ffe2:	75 2e                	jne    c0010012 <Phys::allocatePage()+0x130>
c000ffe4:	a1 24 e4 02 c0       	mov    eax,ds:0xc002e424
c000ffe9:	c1 e0 0c             	shl    eax,0xc
c000ffec:	83 c4 14             	add    esp,0x14
c000ffef:	5b                   	pop    ebx
c000fff0:	5e                   	pop    esi
c000fff1:	c3                   	ret    
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	a3 2c e4 02 c0       	mov    ds:0xc002e42c,eax
c000fffa:	50                   	push   eax
c000fffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ffff:	e8 8c 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000b:	83 f8 32             	cmp    eax,0x32
c001000e:	7e d4                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c0010010:	eb 84                	jmp    c000ff96 <Phys::allocatePage()+0xb4>
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	a3 2c e4 02 c0       	mov    ds:0xc002e42c,eax
c001001a:	50                   	push   eax
c001001b:	e8 70 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	eb bf                	jmp    c000ffe4 <Phys::allocatePage()+0x102>

c0010025 <Phys::allocateContiguousPages(int)>:
c0010025:	57                   	push   edi
c0010026:	56                   	push   esi
c0010027:	53                   	push   ebx
c0010028:	31 db                	xor    ebx,ebx
c001002a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001002e:	e8 67 dd 00 00       	call   c001dd9a <lockScheduler()>
c0010033:	85 db                	test   ebx,ebx
c0010035:	75 11                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010037:	e8 a6 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001003c:	83 ff 01             	cmp    edi,0x1
c001003f:	89 c6                	mov    esi,eax
c0010041:	74 21                	je     c0010064 <Phys::allocateContiguousPages(int)+0x3f>
c0010043:	bb 01 00 00 00       	mov    ebx,0x1
c0010048:	e8 95 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001004d:	89 da                	mov    edx,ebx
c001004f:	c1 e2 0c             	shl    edx,0xc
c0010052:	01 f2                	add    edx,esi
c0010054:	39 c2                	cmp    edx,eax
c0010056:	74 17                	je     c001006f <Phys::allocateContiguousPages(int)+0x4a>
c0010058:	bb 01 00 00 00       	mov    ebx,0x1
c001005d:	89 c6                	mov    esi,eax
c001005f:	83 ff 01             	cmp    edi,0x1
c0010062:	75 e4                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010064:	e8 33 dd 00 00       	call   c001dd9c <unlockScheduler()>
c0010069:	89 f0                	mov    eax,esi
c001006b:	5b                   	pop    ebx
c001006c:	5e                   	pop    esi
c001006d:	5f                   	pop    edi
c001006e:	c3                   	ret    
c001006f:	43                   	inc    ebx
c0010070:	39 fb                	cmp    ebx,edi
c0010072:	75 bf                	jne    c0010033 <Phys::allocateContiguousPages(int)+0xe>
c0010074:	e8 23 dd 00 00       	call   c001dd9c <unlockScheduler()>
c0010079:	89 f0                	mov    eax,esi
c001007b:	5b                   	pop    ebx
c001007c:	5e                   	pop    esi
c001007d:	5f                   	pop    edi
c001007e:	c3                   	ret    

c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001007f:	56                   	push   esi
c0010080:	53                   	push   ebx
c0010081:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010085:	39 1d 28 e4 02 c0    	cmp    DWORD PTR ds:0xc002e428,ebx
c001008b:	73 06                	jae    c0010093 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001008d:	89 1d 28 e4 02 c0    	mov    DWORD PTR ds:0xc002e428,ebx
c0010093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010097:	c1 eb 0c             	shr    ebx,0xc
c001009a:	c1 e8 0c             	shr    eax,0xc
c001009d:	39 d8                	cmp    eax,ebx
c001009f:	73 13                	jae    c00100b4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a1:	6a 00                	push   0x0
c00100a3:	8d 70 01             	lea    esi,[eax+0x1]
c00100a6:	50                   	push   eax
c00100a7:	e8 5e fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ac:	5a                   	pop    edx
c00100ad:	89 f0                	mov    eax,esi
c00100af:	59                   	pop    ecx
c00100b0:	39 f3                	cmp    ebx,esi
c00100b2:	75 ed                	jne    c00100a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100b4:	5b                   	pop    ebx
c00100b5:	5e                   	pop    esi
c00100b6:	c3                   	ret    

c00100b7 <Phys::physicalMemorySetup(unsigned int)>:
c00100b7:	55                   	push   ebp
c00100b8:	57                   	push   edi
c00100b9:	56                   	push   esi
c00100ba:	53                   	push   ebx
c00100bb:	31 db                	xor    ebx,ebx
c00100bd:	83 ec 40             	sub    esp,0x40
c00100c0:	6a 30                	push   0x30
c00100c2:	6a 00                	push   0x0
c00100c4:	68 40 e4 02 c0       	push   0xc002e440
c00100c9:	e8 aa 06 ff ff       	call   c0000778 <memset>
c00100ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100d7:	05 00 10 00 00       	add    eax,0x1000
c00100dc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	83 ec 08             	sub    esp,0x8
c00100e6:	6a 01                	push   0x1
c00100e8:	53                   	push   ebx
c00100e9:	43                   	inc    ebx
c00100ea:	e8 1b fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100f8:	75 e9                	jne    c00100e3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100fa:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010101:	66 85 c0             	test   ax,ax
c0010104:	0f 84 8e 01 00 00    	je     c0010298 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001010a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001010e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010116:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001011a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001011f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010123:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001012b:	eb 15                	jmp    c0010142 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001012d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010131:	83 c3 18             	add    ebx,0x18
c0010134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010138:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001013c:	0f 84 66 01 00 00    	je     c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010142:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010145:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010148:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001014b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001014f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010153:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010155:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010158:	01 f0                	add    eax,esi
c001015a:	55                   	push   ebp
c001015b:	11 fa                	adc    edx,edi
c001015d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010161:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010165:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010169:	56                   	push   esi
c001016a:	68 a8 a2 02 c0       	push   0xc002a2a8
c001016f:	e8 60 2d 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0010174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010178:	83 c4 10             	add    esp,0x10
c001017b:	09 f8                	or     eax,edi
c001017d:	0f 85 25 01 00 00    	jne    c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010183:	4d                   	dec    ebp
c0010184:	75 a7                	jne    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010186:	ba 00 00 08 00       	mov    edx,0x80000
c001018b:	89 c1                	mov    ecx,eax
c001018d:	39 f2                	cmp    edx,esi
c001018f:	19 f9                	sbb    ecx,edi
c0010191:	0f 82 a7 00 00 00    	jb     c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010197:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001019b:	89 c1                	mov    ecx,eax
c001019d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a1:	0f 83 97 00 00 00    	jae    c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101a7:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b4:	39 fa                	cmp    edx,edi
c00101b6:	19 e8                	sbb    eax,ebp
c00101b8:	0f 82 14 01 00 00    	jb     c00102d2 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101c6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101cc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d1:	83 d5 ff             	adc    ebp,0xffffffff
c00101d4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101d8:	31 c0                	xor    eax,eax
c00101da:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101de:	39 fa                	cmp    edx,edi
c00101e0:	89 c1                	mov    ecx,eax
c00101e2:	19 e9                	sbb    ecx,ebp
c00101e4:	0f 83 43 ff ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ea:	be 00 00 08 00       	mov    esi,0x80000
c00101ef:	50                   	push   eax
c00101f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101f4:	57                   	push   edi
c00101f5:	56                   	push   esi
c00101f6:	68 cc a2 02 c0       	push   0xc002a2cc
c00101fb:	e8 d4 2c 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0010200:	5a                   	pop    edx
c0010201:	59                   	pop    ecx
c0010202:	57                   	push   edi
c0010203:	56                   	push   esi
c0010204:	e8 76 fe ff ff       	call   c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010209:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001020d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010211:	83 c4 0c             	add    esp,0xc
c0010214:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010218:	03 05 34 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e434
c001021e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010225:	a3 34 e4 02 c0       	mov    ds:0xc002e434,eax
c001022a:	52                   	push   edx
c001022b:	50                   	push   eax
c001022c:	68 89 a2 02 c0       	push   0xc002a289
c0010231:	e8 9e 2c 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	e9 ef fe ff ff       	jmp    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024a:	39 ea                	cmp    edx,ebp
c001024c:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010250:	0f 82 d7 fe ff ff    	jb     c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010256:	ba ff 1f 00 00       	mov    edx,0x1fff
c001025b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001025f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010263:	0f 83 c4 fe ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010269:	39 ee                	cmp    esi,ebp
c001026b:	89 f8                	mov    eax,edi
c001026d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010271:	0f 83 78 ff ff ff    	jae    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001027b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001027f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010283:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010287:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001028b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001028f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010293:	e9 57 ff ff ff       	jmp    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	68 7b a2 02 c0       	push   0xc002a27b
c00102a0:	e8 d0 a2 00 00       	call   c001a575 <Krnl::panic(char const*)>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	bb 40 01 00 00       	mov    ebx,0x140
c00102ad:	83 ec 08             	sub    esp,0x8
c00102b0:	6a 00                	push   0x0
c00102b2:	53                   	push   ebx
c00102b3:	43                   	inc    ebx
c00102b4:	e8 51 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102b9:	ff 05 34 e4 02 c0    	inc    DWORD PTR ds:0xc002e434
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102c8:	75 e3                	jne    c00102ad <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ca:	83 c4 3c             	add    esp,0x3c
c00102cd:	5b                   	pop    ebx
c00102ce:	5e                   	pop    esi
c00102cf:	5f                   	pop    edi
c00102d0:	5d                   	pop    ebp
c00102d1:	c3                   	ret    
c00102d2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e2:	e9 d7 fe ff ff       	jmp    c00101be <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102e7:	90                   	nop

c00102e8 <Pipe::isAtty()>:
c00102e8:	31 c0                	xor    eax,eax
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::~Pipe()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	ba 38 a3 02 c0       	mov    edx,0xc002a338
c00102f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f8:	89 10                	mov    DWORD PTR [eax],edx
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	50                   	push   eax
c0010302:	e8 37 16 00 00       	call   c001193e <UnixFile::~UnixFile()>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	90                   	nop
c001030b:	83 c4 0c             	add    esp,0xc
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <Pipe::~Pipe()>:
c0010310:	83 ec 0c             	sub    esp,0xc
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031a:	e8 cd ff ff ff       	call   c00102ec <Pipe::~Pipe()>
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	83 ec 08             	sub    esp,0x8
c0010325:	6a 20                	push   0x20
c0010327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032b:	e8 c4 2a 00 00       	call   c0012df4 <operator delete(void*, unsigned long)>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	83 c4 0c             	add    esp,0xc
c0010336:	c3                   	ret    
c0010337:	90                   	nop

c0010338 <Pipe::read(unsigned long long, void*, int*)>:
c0010338:	55                   	push   ebp
c0010339:	57                   	push   edi
c001033a:	56                   	push   esi
c001033b:	53                   	push   ebx
c001033c:	83 ec 1c             	sub    esp,0x1c
c001033f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010343:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010347:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001034b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001034e:	89 c8                	mov    eax,ecx
c0010350:	99                   	cdq    
c0010351:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010355:	74 19                	je     c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010357:	39 f9                	cmp    ecx,edi
c0010359:	89 d1                	mov    ecx,edx
c001035b:	19 f1                	sbb    ecx,esi
c001035d:	73 11                	jae    c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035f:	e8 36 da 00 00       	call   c001dd9a <lockScheduler()>
c0010364:	e8 6d dd 00 00       	call   c001e0d6 <schedule()>
c0010369:	e8 2e da 00 00       	call   c001dd9c <unlockScheduler()>
c001036e:	eb db                	jmp    c001034b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010370:	39 f8                	cmp    eax,edi
c0010372:	89 d1                	mov    ecx,edx
c0010374:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010378:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001037c:	19 f1                	sbb    ecx,esi
c001037e:	73 08                	jae    c0010388 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010380:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010384:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010388:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001038e:	29 c6                	sub    esi,eax
c0010390:	89 f1                	mov    ecx,esi
c0010392:	c1 f9 1f             	sar    ecx,0x1f
c0010395:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010399:	89 ca                	mov    edx,ecx
c001039b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001039f:	19 d1                	sbb    ecx,edx
c00103a1:	73 04                	jae    c00103a7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103a7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103ab:	89 fd                	mov    ebp,edi
c00103ad:	29 f5                	sub    ebp,esi
c00103af:	85 f6                	test   esi,esi
c00103b1:	74 12                	je     c00103c5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b3:	52                   	push   edx
c00103b4:	56                   	push   esi
c00103b5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103b8:	50                   	push   eax
c00103b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103bd:	e8 82 03 ff ff       	call   c0000744 <memcpy>
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	85 ed                	test   ebp,ebp
c00103c7:	74 12                	je     c00103db <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103c9:	50                   	push   eax
c00103ca:	55                   	push   ebp
c00103cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ce:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d2:	56                   	push   esi
c00103d3:	e8 6c 03 ff ff       	call   c0000744 <memcpy>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103e4:	99                   	cdq    
c00103e5:	89 f7                	mov    edi,esi
c00103e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103ef:	c1 ff 1f             	sar    edi,0x1f
c00103f2:	57                   	push   edi
c00103f3:	56                   	push   esi
c00103f4:	52                   	push   edx
c00103f5:	50                   	push   eax
c00103f6:	e8 81 66 01 00       	call   c0026a7c <__umoddi3>
c00103fb:	83 c4 10             	add    esp,0x10
c00103fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010401:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010406:	75 10                	jne    c0010418 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010408:	83 ec 0c             	sub    esp,0xc
c001040b:	68 f5 a2 02 c0       	push   0xc002a2f5
c0010410:	e8 60 a1 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001041c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010420:	89 10                	mov    DWORD PTR [eax],edx
c0010422:	83 c4 1c             	add    esp,0x1c
c0010425:	31 c0                	xor    eax,eax
c0010427:	5b                   	pop    ebx
c0010428:	5e                   	pop    esi
c0010429:	5f                   	pop    edi
c001042a:	5d                   	pop    ebp
c001042b:	c3                   	ret    

c001042c <Pipe::write(unsigned long long, void*, int*)>:
c001042c:	55                   	push   ebp
c001042d:	57                   	push   edi
c001042e:	56                   	push   esi
c001042f:	53                   	push   ebx
c0010430:	83 ec 1c             	sub    esp,0x1c
c0010433:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010437:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001043b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001043f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010442:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010445:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010448:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001044c:	89 de                	mov    esi,ebx
c001044e:	89 df                	mov    edi,ebx
c0010450:	c1 ff 1f             	sar    edi,0x1f
c0010453:	01 c6                	add    esi,eax
c0010455:	89 c8                	mov    eax,ecx
c0010457:	11 d7                	adc    edi,edx
c0010459:	99                   	cdq    
c001045a:	39 f1                	cmp    ecx,esi
c001045c:	89 d0                	mov    eax,edx
c001045e:	19 f8                	sbb    eax,edi
c0010460:	b8 01 00 00 00       	mov    eax,0x1
c0010465:	0f 82 80 00 00 00    	jb     c00104eb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001046b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001046e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010471:	01 d8                	add    eax,ebx
c0010473:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010477:	99                   	cdq    
c0010478:	f7 f9                	idiv   ecx
c001047a:	29 d1                	sub    ecx,edx
c001047c:	89 d7                	mov    edi,edx
c001047e:	89 c8                	mov    eax,ecx
c0010480:	99                   	cdq    
c0010481:	39 ce                	cmp    esi,ecx
c0010483:	19 d3                	sbb    ebx,edx
c0010485:	bb 00 00 00 00       	mov    ebx,0x0
c001048a:	72 04                	jb     c0010490 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001048c:	89 f3                	mov    ebx,esi
c001048e:	29 cb                	sub    ebx,ecx
c0010490:	89 f1                	mov    ecx,esi
c0010492:	29 d9                	sub    ecx,ebx
c0010494:	74 1a                	je     c00104b0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010496:	52                   	push   edx
c0010497:	51                   	push   ecx
c0010498:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001049c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a3:	57                   	push   edi
c00104a4:	e8 9b 02 ff ff       	call   c0000744 <memcpy>
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b0:	85 db                	test   ebx,ebx
c00104b2:	74 12                	je     c00104c6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104b4:	50                   	push   eax
c00104b5:	53                   	push   ebx
c00104b6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104ba:	51                   	push   ecx
c00104bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104be:	e8 81 02 ff ff       	call   c0000744 <memcpy>
c00104c3:	83 c4 10             	add    esp,0x10
c00104c6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104c9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ce:	75 10                	jne    c00104e0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	68 11 a3 02 c0       	push   0xc002a311
c00104d8:	e8 98 a0 00 00       	call   c001a575 <Krnl::panic(char const*)>
c00104dd:	83 c4 10             	add    esp,0x10
c00104e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104e7:	89 38                	mov    DWORD PTR [eax],edi
c00104e9:	31 c0                	xor    eax,eax
c00104eb:	83 c4 1c             	add    esp,0x1c
c00104ee:	5b                   	pop    ebx
c00104ef:	5e                   	pop    esi
c00104f0:	5f                   	pop    edi
c00104f1:	5d                   	pop    ebp
c00104f2:	c3                   	ret    
c00104f3:	90                   	nop

c00104f4 <Pipe::Pipe(int)>:
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fb:	83 ec 08             	sub    esp,0x8
c00104fe:	6a 00                	push   0x0
c0010500:	50                   	push   eax
c0010501:	e8 56 12 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c0010506:	83 c4 10             	add    esp,0x10
c0010509:	ba 38 a3 02 c0       	mov    edx,0xc002a338
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	89 10                	mov    DWORD PTR [eax],edx
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001051c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010539:	83 ec 0c             	sub    esp,0xc
c001053c:	50                   	push   eax
c001053d:	e8 fe f2 ff ff       	call   c000f840 <malloc>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	89 c2                	mov    edx,eax
c0010547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010556:	90                   	nop
c0010557:	83 c4 0c             	add    esp,0xc
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <VgaText::isAtty()>:
c001055c:	b0 01                	mov    al,0x1
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::~VgaText()>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ba f4 a3 02 c0       	mov    edx,0xc002a3f4
c0010568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056c:	89 10                	mov    DWORD PTR [eax],edx
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	50                   	push   eax
c0010576:	e8 c3 13 00 00       	call   c001193e <UnixFile::~UnixFile()>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	90                   	nop
c001057f:	83 c4 0c             	add    esp,0xc
c0010582:	c3                   	ret    
c0010583:	90                   	nop

c0010584 <VgaText::~VgaText()>:
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 cd ff ff ff       	call   c0010560 <VgaText::~VgaText()>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 ec 08             	sub    esp,0x8
c0010599:	68 60 12 00 00       	push   0x1260
c001059e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a2:	e8 4d 28 00 00       	call   c0012df4 <operator delete(void*, unsigned long)>
c00105a7:	83 c4 10             	add    esp,0x10
c00105aa:	83 c4 0c             	add    esp,0xc
c00105ad:	c3                   	ret    

c00105ae <VgaText::read(unsigned long long, void*, int*)>:
c00105ae:	83 ec 10             	sub    esp,0x10
c00105b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105bd:	e8 b4 5c 00 00       	call   c0016276 <readKeyboard(VgaText*, char*, unsigned long)>
c00105c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105c6:	89 02                	mov    DWORD PTR [edx],eax
c00105c8:	31 c0                	xor    eax,eax
c00105ca:	83 c4 1c             	add    esp,0x1c
c00105cd:	c3                   	ret    

c00105ce <setTerminalScrollLock(bool)>:
c00105ce:	c3                   	ret    

c00105cf <addToTerminalCycle(VgaText*)>:
c00105cf:	8b 15 c0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c0
c00105d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d9:	85 d2                	test   edx,edx
c00105db:	75 0c                	jne    c00105e9 <addToTerminalCycle(VgaText*)+0x1a>
c00105dd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e3:	a3 c0 e4 02 c0       	mov    ds:0xc002e4c0,eax
c00105e8:	c3                   	ret    
c00105e9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105ef:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105f5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105fb:	c3                   	ret    

c00105fc <installVgaTextImplementation()>:
c00105fc:	83 ec 10             	sub    esp,0x10
c00105ff:	6a 20                	push   0x20
c0010601:	6a 00                	push   0x0
c0010603:	68 a0 e4 02 c0       	push   0xc002e4a0
c0010608:	e8 6b 01 ff ff       	call   c0000778 <memset>
c001060d:	83 c4 1c             	add    esp,0x1c
c0010610:	c3                   	ret    

c0010611 <scrollTerminalScrollLock(int)>:
c0010611:	c3                   	ret    

c0010612 <VgaText::load()>:
c0010612:	53                   	push   ebx
c0010613:	31 c0                	xor    eax,eax
c0010615:	83 ec 58             	sub    esp,0x58
c0010618:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001061c:	89 e2                	mov    edx,esp
c001061e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010622:	40                   	inc    eax
c0010623:	83 f8 50             	cmp    eax,0x50
c0010626:	75 f6                	jne    c001061e <VgaText::load()+0xc>
c0010628:	31 c0                	xor    eax,eax
c001062a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010631:	84 c9                	test   cl,cl
c0010633:	74 06                	je     c001063b <VgaText::load()+0x29>
c0010635:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010638:	40                   	inc    eax
c0010639:	eb ef                	jmp    c001062a <VgaText::load()+0x18>
c001063b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010641:	85 c0                	test   eax,eax
c0010643:	74 09                	je     c001064e <VgaText::load()+0x3c>
c0010645:	51                   	push   ecx
c0010646:	51                   	push   ecx
c0010647:	52                   	push   edx
c0010648:	53                   	push   ebx
c0010649:	ff d0                	call   eax
c001064b:	83 c4 10             	add    esp,0x10
c001064e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 09                	je     c0010661 <VgaText::load()+0x4f>
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	53                   	push   ebx
c001065c:	ff d0                	call   eax
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	83 c4 58             	add    esp,0x58
c0010664:	5b                   	pop    ebx
c0010665:	c3                   	ret    

c0010666 <VgaText::updateCursor()>:
c0010666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066a:	39 05 c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,eax
c0010670:	75 0c                	jne    c001067e <VgaText::updateCursor()+0x18>
c0010672:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010678:	85 c0                	test   eax,eax
c001067a:	74 02                	je     c001067e <VgaText::updateCursor()+0x18>
c001067c:	ff e0                	jmp    eax
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <VgaText::showCursor(bool)>:
c0010680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010688:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001068e:	c3                   	ret    
c001068f:	90                   	nop

c0010690 <VgaText::disableBlink(bool)>:
c0010690:	56                   	push   esi
c0010691:	53                   	push   ebx
c0010692:	51                   	push   ecx
c0010693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010697:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001069b:	39 1d c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,ebx
c00106a1:	75 18                	jne    c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106a3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106a9:	85 c0                	test   eax,eax
c00106ab:	74 0e                	je     c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106ad:	89 f1                	mov    ecx,esi
c00106af:	52                   	push   edx
c00106b0:	52                   	push   edx
c00106b1:	0f b6 d1             	movzx  edx,cl
c00106b4:	52                   	push   edx
c00106b5:	53                   	push   ebx
c00106b6:	ff d0                	call   eax
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	89 f0                	mov    eax,esi
c00106bd:	83 f0 01             	xor    eax,0x1
c00106c0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106c6:	58                   	pop    eax
c00106c7:	5b                   	pop    ebx
c00106c8:	5e                   	pop    esi
c00106c9:	c3                   	ret    

c00106ca <VgaText::doANSI_SGR(int)>:
c00106ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d2:	85 d2                	test   edx,edx
c00106d4:	75 14                	jne    c00106ea <VgaText::doANSI_SGR(int)+0x20>
c00106d6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106dc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106e8:	eb 65                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c00106ea:	83 fa 07             	cmp    edx,0x7
c00106ed:	75 14                	jne    c0010703 <VgaText::doANSI_SGR(int)+0x39>
c00106ef:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106f5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106fb:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010701:	eb 4c                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c0010703:	83 fa 1b             	cmp    edx,0x1b
c0010706:	74 ce                	je     c00106d6 <VgaText::doANSI_SGR(int)+0xc>
c0010708:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001070b:	83 f9 07             	cmp    ecx,0x7
c001070e:	77 09                	ja     c0010719 <VgaText::doANSI_SGR(int)+0x4f>
c0010710:	8b 14 8d 40 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2cc0]
c0010717:	eb 20                	jmp    c0010739 <VgaText::doANSI_SGR(int)+0x6f>
c0010719:	8d 4a d8             	lea    ecx,[edx-0x28]
c001071c:	83 f9 07             	cmp    ecx,0x7
c001071f:	77 09                	ja     c001072a <VgaText::doANSI_SGR(int)+0x60>
c0010721:	8b 14 8d 40 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2cc0]
c0010728:	eb 25                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c001072a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001072d:	83 f9 07             	cmp    ecx,0x7
c0010730:	77 0e                	ja     c0010740 <VgaText::doANSI_SGR(int)+0x76>
c0010732:	8b 14 95 f8 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e08]
c0010739:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001073f:	c3                   	ret    
c0010740:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010743:	83 f9 07             	cmp    ecx,0x7
c0010746:	77 0d                	ja     c0010755 <VgaText::doANSI_SGR(int)+0x8b>
c0010748:	8b 14 95 d0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e30]
c001074f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010755:	c3                   	ret    

c0010756 <VgaText::setDefaultBgColour(VgaColour)>:
c0010756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010764:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001076a:	c3                   	ret    
c001076b:	90                   	nop

c001076c <VgaText::setDefaultFgColour(VgaColour)>:
c001076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010774:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001077a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010780:	c3                   	ret    
c0010781:	90                   	nop

c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010782:	53                   	push   ebx
c0010783:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010787:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001078b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001078f:	51                   	push   ecx
c0010790:	e8 c1 ff ff ff       	call   c0010756 <VgaText::setDefaultBgColour(VgaColour)>
c0010795:	58                   	pop    eax
c0010796:	5a                   	pop    edx
c0010797:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001079b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001079f:	5b                   	pop    ebx
c00107a0:	eb ca                	jmp    c001076c <VgaText::setDefaultFgColour(VgaColour)>

c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107ab:	83 e0 0f             	and    eax,0xf
c00107ae:	c1 e2 04             	shl    edx,0x4
c00107b1:	09 d0                	or     eax,edx
c00107b3:	c3                   	ret    

c00107b4 <VgaText::scrollScreen()>:
c00107b4:	57                   	push   edi
c00107b5:	56                   	push   esi
c00107b6:	be 01 00 00 00       	mov    esi,0x1
c00107bb:	53                   	push   ebx
c00107bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107c6:	31 ff                	xor    edi,edi
c00107c8:	01 d9                	add    ecx,ebx
c00107ca:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107cd:	83 fe 17             	cmp    esi,0x17
c00107d0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107d6:	75 28                	jne    c0010800 <VgaText::scrollScreen()+0x4c>
c00107d8:	f7 c7 01 00 00 00    	test   edi,0x1
c00107de:	74 1c                	je     c00107fc <VgaText::scrollScreen()+0x48>
c00107e0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107e7:	50                   	push   eax
c00107e8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107ef:	50                   	push   eax
c00107f0:	e8 ad ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f5:	5a                   	pop    edx
c00107f6:	5a                   	pop    edx
c00107f7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107fa:	eb 04                	jmp    c0010800 <VgaText::scrollScreen()+0x4c>
c00107fc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010800:	47                   	inc    edi
c0010801:	41                   	inc    ecx
c0010802:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010808:	75 c0                	jne    c00107ca <VgaText::scrollScreen()+0x16>
c001080a:	46                   	inc    esi
c001080b:	83 fe 18             	cmp    esi,0x18
c001080e:	75 b0                	jne    c00107c0 <VgaText::scrollScreen()+0xc>
c0010810:	39 1d c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,ebx
c0010816:	75 24                	jne    c001083c <VgaText::scrollScreen()+0x88>
c0010818:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001081f:	74 08                	je     c0010829 <VgaText::scrollScreen()+0x75>
c0010821:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010827:	eb 13                	jmp    c001083c <VgaText::scrollScreen()+0x88>
c0010829:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001082f:	85 c0                	test   eax,eax
c0010831:	74 09                	je     c001083c <VgaText::scrollScreen()+0x88>
c0010833:	83 ec 0c             	sub    esp,0xc
c0010836:	53                   	push   ebx
c0010837:	ff d0                	call   eax
c0010839:	83 c4 10             	add    esp,0x10
c001083c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010840:	5b                   	pop    ebx
c0010841:	5e                   	pop    esi
c0010842:	5f                   	pop    edi
c0010843:	e9 1e fe ff ff       	jmp    c0010666 <VgaText::updateCursor()>

c0010848 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010848:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001084d:	c1 e0 08             	shl    eax,0x8
c0010850:	89 c2                	mov    edx,eax
c0010852:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010857:	09 d0                	or     eax,edx
c0010859:	c3                   	ret    

c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001085a:	53                   	push   ebx
c001085b:	83 ec 08             	sub    esp,0x8
c001085e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010862:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010867:	50                   	push   eax
c0010868:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086d:	50                   	push   eax
c001086e:	e8 2f ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010873:	5a                   	pop    edx
c0010874:	0f b6 c0             	movzx  eax,al
c0010877:	5b                   	pop    ebx
c0010878:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001087d:	50                   	push   eax
c001087e:	53                   	push   ebx
c001087f:	e8 c4 ff ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010884:	5a                   	pop    edx
c0010885:	5a                   	pop    edx
c0010886:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001088c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010890:	0f b7 d2             	movzx  edx,dx
c0010893:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010898:	39 0d c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,ecx
c001089e:	75 14                	jne    c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108a6:	85 c0                	test   eax,eax
c00108a8:	74 0a                	je     c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108ae:	83 c4 08             	add    esp,0x8
c00108b1:	5b                   	pop    ebx
c00108b2:	ff e0                	jmp    eax
c00108b4:	83 c4 08             	add    esp,0x8
c00108b7:	5b                   	pop    ebx
c00108b8:	c3                   	ret    
c00108b9:	90                   	nop

c00108ba <VgaText::getCursorX()>:
c00108ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108be:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108c4:	c3                   	ret    
c00108c5:	90                   	nop

c00108c6 <VgaText::getCursorY()>:
c00108c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ca:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d0:	c3                   	ret    
c00108d1:	90                   	nop

c00108d2 <VgaText::setCursor(int, int)>:
c00108d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108da:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ea:	e9 77 fd ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c00108ef:	90                   	nop

c00108f0 <VgaText::setCursorX(int)>:
c00108f0:	83 ec 10             	sub    esp,0x10
c00108f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010901:	50                   	push   eax
c0010902:	e8 cb ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010907:	83 c4 1c             	add    esp,0x1c
c001090a:	c3                   	ret    
c001090b:	90                   	nop

c001090c <VgaText::setCursorY(int)>:
c001090c:	83 ec 10             	sub    esp,0x10
c001090f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010917:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001091d:	50                   	push   eax
c001091e:	e8 af ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010923:	83 c4 1c             	add    esp,0x1c
c0010926:	c3                   	ret    
c0010927:	90                   	nop

c0010928 <VgaText::incrementCursor(bool)>:
c0010928:	56                   	push   esi
c0010929:	53                   	push   ebx
c001092a:	51                   	push   ecx
c001092b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001092f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010933:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010939:	40                   	inc    eax
c001093a:	83 f8 50             	cmp    eax,0x50
c001093d:	74 08                	je     c0010947 <VgaText::incrementCursor(bool)+0x1f>
c001093f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010945:	eb 33                	jmp    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010947:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001094d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010957:	8d 50 01             	lea    edx,[eax+0x1]
c001095a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010960:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010966:	75 12                	jne    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010971:	53                   	push   ebx
c0010972:	e8 3d fe ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	89 f0                	mov    eax,esi
c001097c:	84 c0                	test   al,al
c001097e:	74 0c                	je     c001098c <VgaText::incrementCursor(bool)+0x64>
c0010980:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010984:	5a                   	pop    edx
c0010985:	5b                   	pop    ebx
c0010986:	5e                   	pop    esi
c0010987:	e9 da fc ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c001098c:	58                   	pop    eax
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::updateRAMUsageDisplay(int)>:
c0010990:	56                   	push   esi
c0010991:	8b 35 20 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d320
c0010997:	53                   	push   ebx
c0010998:	bb 0a 00 00 00       	mov    ebx,0xa
c001099d:	6a 0f                	push   0xf
c001099f:	6a 00                	push   0x0
c00109a1:	e8 fc fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00109a6:	5a                   	pop    edx
c00109a7:	59                   	pop    ecx
c00109a8:	0f b6 c8             	movzx  ecx,al
c00109ab:	51                   	push   ecx
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	99                   	cdq    
c00109b1:	f7 fb                	idiv   ebx
c00109b3:	89 d3                	mov    ebx,edx
c00109b5:	83 c0 30             	add    eax,0x30
c00109b8:	83 c3 30             	add    ebx,0x30
c00109bb:	0f be c0             	movsx  eax,al
c00109be:	0f b6 db             	movzx  ebx,bl
c00109c1:	50                   	push   eax
c00109c2:	e8 81 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c7:	5a                   	pop    edx
c00109c8:	5a                   	pop    edx
c00109c9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d0:	51                   	push   ecx
c00109d1:	53                   	push   ebx
c00109d2:	e8 71 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5b                   	pop    ebx
c00109d8:	5a                   	pop    edx
c00109d9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e0:	51                   	push   ecx
c00109e1:	6a 25                	push   0x25
c00109e3:	e8 60 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e8:	59                   	pop    ecx
c00109e9:	5b                   	pop    ebx
c00109ea:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f1:	5b                   	pop    ebx
c00109f2:	5e                   	pop    esi
c00109f3:	c3                   	ret    

c00109f4 <VgaText::updateDiskUsage()>:
c00109f4:	55                   	push   ebp
c00109f5:	bd 10 27 00 00       	mov    ebp,0x2710
c00109fa:	57                   	push   edi
c00109fb:	8b 3d 20 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d320
c0010a01:	56                   	push   esi
c0010a02:	53                   	push   ebx
c0010a03:	6a 0f                	push   0xf
c0010a05:	6a 00                	push   0x0
c0010a07:	e8 96 fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a0c:	5a                   	pop    edx
c0010a0d:	0f b6 d8             	movzx  ebx,al
c0010a10:	59                   	pop    ecx
c0010a11:	8b 35 48 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032748
c0010a17:	53                   	push   ebx
c0010a18:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a1d:	89 f0                	mov    eax,esi
c0010a1f:	99                   	cdq    
c0010a20:	f7 fd                	idiv   ebp
c0010a22:	99                   	cdq    
c0010a23:	f7 f9                	idiv   ecx
c0010a25:	8d 42 30             	lea    eax,[edx+0x30]
c0010a28:	0f b6 c0             	movzx  eax,al
c0010a2b:	50                   	push   eax
c0010a2c:	e8 17 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a31:	5d                   	pop    ebp
c0010a32:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a37:	5a                   	pop    edx
c0010a38:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a3c:	53                   	push   ebx
c0010a3d:	89 f0                	mov    eax,esi
c0010a3f:	99                   	cdq    
c0010a40:	f7 fd                	idiv   ebp
c0010a42:	99                   	cdq    
c0010a43:	f7 f9                	idiv   ecx
c0010a45:	8d 42 30             	lea    eax,[edx+0x30]
c0010a48:	0f b6 c0             	movzx  eax,al
c0010a4b:	50                   	push   eax
c0010a4c:	e8 f7 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a51:	5d                   	pop    ebp
c0010a52:	bd 64 00 00 00       	mov    ebp,0x64
c0010a57:	5a                   	pop    edx
c0010a58:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a5f:	53                   	push   ebx
c0010a60:	89 f0                	mov    eax,esi
c0010a62:	99                   	cdq    
c0010a63:	f7 fd                	idiv   ebp
c0010a65:	99                   	cdq    
c0010a66:	f7 f9                	idiv   ecx
c0010a68:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6b:	0f b6 c0             	movzx  eax,al
c0010a6e:	50                   	push   eax
c0010a6f:	e8 d4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a74:	5d                   	pop    ebp
c0010a75:	5a                   	pop    edx
c0010a76:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 f9                	idiv   ecx
c0010a83:	89 d6                	mov    esi,edx
c0010a85:	99                   	cdq    
c0010a86:	f7 f9                	idiv   ecx
c0010a88:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8b:	0f b6 c0             	movzx  eax,al
c0010a8e:	50                   	push   eax
c0010a8f:	e8 b4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a94:	5d                   	pop    ebp
c0010a95:	5a                   	pop    edx
c0010a96:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a9d:	53                   	push   ebx
c0010a9e:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa1:	0f b6 f0             	movzx  esi,al
c0010aa4:	56                   	push   esi
c0010aa5:	e8 9e fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaa:	5e                   	pop    esi
c0010aab:	8b 35 44 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032744
c0010ab1:	5d                   	pop    ebp
c0010ab2:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ab9:	bd 10 27 00 00       	mov    ebp,0x2710
c0010abe:	53                   	push   ebx
c0010abf:	89 f0                	mov    eax,esi
c0010ac1:	99                   	cdq    
c0010ac2:	f7 fd                	idiv   ebp
c0010ac4:	99                   	cdq    
c0010ac5:	f7 f9                	idiv   ecx
c0010ac7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aca:	0f b6 c0             	movzx  eax,al
c0010acd:	50                   	push   eax
c0010ace:	e8 75 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad3:	5a                   	pop    edx
c0010ad4:	5d                   	pop    ebp
c0010ad5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010adc:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae1:	53                   	push   ebx
c0010ae2:	89 f0                	mov    eax,esi
c0010ae4:	99                   	cdq    
c0010ae5:	f7 fd                	idiv   ebp
c0010ae7:	99                   	cdq    
c0010ae8:	f7 f9                	idiv   ecx
c0010aea:	8d 42 30             	lea    eax,[edx+0x30]
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	50                   	push   eax
c0010af1:	e8 52 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af6:	5a                   	pop    edx
c0010af7:	5d                   	pop    ebp
c0010af8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aff:	bd 64 00 00 00       	mov    ebp,0x64
c0010b04:	53                   	push   ebx
c0010b05:	89 f0                	mov    eax,esi
c0010b07:	99                   	cdq    
c0010b08:	f7 fd                	idiv   ebp
c0010b0a:	99                   	cdq    
c0010b0b:	f7 f9                	idiv   ecx
c0010b0d:	83 c2 30             	add    edx,0x30
c0010b10:	0f b6 d2             	movzx  edx,dl
c0010b13:	52                   	push   edx
c0010b14:	e8 2f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b19:	5a                   	pop    edx
c0010b1a:	5d                   	pop    ebp
c0010b1b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b22:	53                   	push   ebx
c0010b23:	89 f0                	mov    eax,esi
c0010b25:	99                   	cdq    
c0010b26:	f7 f9                	idiv   ecx
c0010b28:	89 d6                	mov    esi,edx
c0010b2a:	99                   	cdq    
c0010b2b:	f7 f9                	idiv   ecx
c0010b2d:	8d 42 30             	lea    eax,[edx+0x30]
c0010b30:	0f b6 c0             	movzx  eax,al
c0010b33:	50                   	push   eax
c0010b34:	e8 0f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b39:	5a                   	pop    edx
c0010b3a:	59                   	pop    ecx
c0010b3b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b42:	53                   	push   ebx
c0010b43:	8d 46 30             	lea    eax,[esi+0x30]
c0010b46:	0f b6 f0             	movzx  esi,al
c0010b49:	56                   	push   esi
c0010b4a:	e8 f9 fc ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b4f:	5b                   	pop    ebx
c0010b50:	5e                   	pop    esi
c0010b51:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b58:	5b                   	pop    ebx
c0010b59:	5e                   	pop    esi
c0010b5a:	5f                   	pop    edi
c0010b5b:	5d                   	pop    ebp
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <VgaText::updateTitle()>:
c0010b5e:	53                   	push   ebx
c0010b5f:	31 c0                	xor    eax,eax
c0010b61:	83 ec 58             	sub    esp,0x58
c0010b64:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b68:	89 e1                	mov    ecx,esp
c0010b6a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b6e:	40                   	inc    eax
c0010b6f:	83 f8 50             	cmp    eax,0x50
c0010b72:	75 f6                	jne    c0010b6a <VgaText::updateTitle()+0xc>
c0010b74:	31 c0                	xor    eax,eax
c0010b76:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b7d:	84 db                	test   bl,bl
c0010b7f:	74 06                	je     c0010b87 <VgaText::updateTitle()+0x29>
c0010b81:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b84:	40                   	inc    eax
c0010b85:	eb ef                	jmp    c0010b76 <VgaText::updateTitle()+0x18>
c0010b87:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b8d:	85 c0                	test   eax,eax
c0010b8f:	74 09                	je     c0010b9a <VgaText::updateTitle()+0x3c>
c0010b91:	53                   	push   ebx
c0010b92:	53                   	push   ebx
c0010b93:	51                   	push   ecx
c0010b94:	52                   	push   edx
c0010b95:	ff d0                	call   eax
c0010b97:	83 c4 10             	add    esp,0x10
c0010b9a:	e8 55 fe ff ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0010b9f:	83 c4 58             	add    esp,0x58
c0010ba2:	5b                   	pop    ebx
c0010ba3:	c3                   	ret    

c0010ba4 <VgaText::setTitleTextColour(VgaColour)>:
c0010ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bac:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb2:	eb aa                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bb4 <VgaText::setTitleColour(VgaColour)>:
c0010bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bbc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc2:	eb 9a                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bc4 <VgaText::setTitle(char*)>:
c0010bc4:	53                   	push   ebx
c0010bc5:	83 ec 10             	sub    esp,0x10
c0010bc8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bd6:	50                   	push   eax
c0010bd7:	e8 58 fc fe ff       	call   c0000834 <strcpy>
c0010bdc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be0:	83 c4 18             	add    esp,0x18
c0010be3:	5b                   	pop    ebx
c0010be4:	e9 75 ff ff ff       	jmp    c0010b5e <VgaText::updateTitle()>
c0010be9:	90                   	nop

c0010bea <VgaText::decrementCursor(bool)>:
c0010bea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	74 07                	je     c0010c03 <VgaText::decrementCursor(bool)+0x19>
c0010bfc:	48                   	dec    eax
c0010bfd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c03:	84 c9                	test   cl,cl
c0010c05:	74 09                	je     c0010c10 <VgaText::decrementCursor(bool)+0x26>
c0010c07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c0b:	e9 56 fa ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010c10:	c3                   	ret    
c0010c11:	90                   	nop

c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c12:	53                   	push   ebx
c0010c13:	83 ec 08             	sub    esp,0x8
c0010c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c26:	3c 07                	cmp    al,0x7
c0010c28:	75 2a                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c2a:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c0010c2f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c37:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c3f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 7e 30 00 00       	jmp    c0013cd2 <Buzzer::beep(int, int, bool)>
c0010c54:	3c 0d                	cmp    al,0xd
c0010c56:	75 0c                	jne    c0010c64 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c58:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c62:	eb 3b                	jmp    c0010c9f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c64:	3c 0a                	cmp    al,0xa
c0010c66:	75 40                	jne    c0010ca8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c68:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c6e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c78:	8d 50 01             	lea    edx,[eax+0x1]
c0010c7b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c81:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c87:	75 12                	jne    c0010c9b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c89:	83 ec 0c             	sub    esp,0xc
c0010c8c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c92:	53                   	push   ebx
c0010c93:	e8 1c fb ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c9f:	83 c4 08             	add    esp,0x8
c0010ca2:	5b                   	pop    ebx
c0010ca3:	e9 be f9 ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010ca8:	3c 08                	cmp    al,0x8
c0010caa:	75 31                	jne    c0010cdd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cac:	50                   	push   eax
c0010cad:	50                   	push   eax
c0010cae:	6a 01                	push   0x1
c0010cb0:	53                   	push   ebx
c0010cb1:	e8 34 ff ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010cb6:	5a                   	pop    edx
c0010cb7:	59                   	pop    ecx
c0010cb8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cbe:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cca:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd0:	6a 20                	push   0x20
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 82 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd8:	83 c4 28             	add    esp,0x28
c0010cdb:	5b                   	pop    ebx
c0010cdc:	c3                   	ret    
c0010cdd:	83 ec 08             	sub    esp,0x8
c0010ce0:	0f be c0             	movsx  eax,al
c0010ce3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ce9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cef:	51                   	push   ecx
c0010cf0:	52                   	push   edx
c0010cf1:	50                   	push   eax
c0010cf2:	53                   	push   ebx
c0010cf3:	e8 62 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cf8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cfc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d04:	83 c4 28             	add    esp,0x28
c0010d07:	5b                   	pop    ebx
c0010d08:	e9 1b fc ff ff       	jmp    c0010928 <VgaText::incrementCursor(bool)>
c0010d0d:	90                   	nop

c0010d0e <VgaText::isShowingCursor()>:
c0010d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d12:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d18:	c3                   	ret    
c0010d19:	90                   	nop

c0010d1a <VgaText::isBlinkDisabled()>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d24:	83 f0 01             	xor    eax,0x1
c0010d27:	c3                   	ret    

c0010d28 <VgaText::setCursorHeight(int)>:
c0010d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d30:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d36:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d41:	e9 3a f9 ff ff       	jmp    c0010680 <VgaText::showCursor(bool)>

c0010d46 <VgaText::getCursorHeight()>:
c0010d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d4a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d50:	c3                   	ret    

c0010d51 <setActiveTerminal(VgaText*)>:
c0010d51:	53                   	push   ebx
c0010d52:	83 ec 08             	sub    esp,0x8
c0010d55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d59:	85 db                	test   ebx,ebx
c0010d5b:	75 11                	jne    c0010d6e <setActiveTerminal(VgaText*)+0x1d>
c0010d5d:	c7 44 24 10 4c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a34c
c0010d65:	83 c4 08             	add    esp,0x8
c0010d68:	5b                   	pop    ebx
c0010d69:	e9 07 98 00 00       	jmp    c001a575 <Krnl::panic(char const*)>
c0010d6e:	50                   	push   eax
c0010d6f:	50                   	push   eax
c0010d70:	53                   	push   ebx
c0010d71:	68 5a a3 02 c0       	push   0xc002a35a
c0010d76:	e8 59 21 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0010d7b:	a1 c4 e4 02 c0       	mov    eax,ds:0xc002e4c4
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	85 c0                	test   eax,eax
c0010d85:	74 0c                	je     c0010d93 <setActiveTerminal(VgaText*)+0x42>
c0010d87:	83 ec 0c             	sub    esp,0xc
c0010d8a:	50                   	push   eax
c0010d8b:	e8 d6 f8 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010d90:	83 c4 10             	add    esp,0x10
c0010d93:	89 1d c4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c4,ebx
c0010d99:	51                   	push   ecx
c0010d9a:	51                   	push   ecx
c0010d9b:	53                   	push   ebx
c0010d9c:	68 72 a3 02 c0       	push   0xc002a372
c0010da1:	e8 2e 21 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0010da6:	83 c4 0c             	add    esp,0xc
c0010da9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010daf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010db5:	53                   	push   ebx
c0010db6:	e8 17 fb ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 57 ff ff ff       	call   c0010d1a <VgaText::isBlinkDisabled()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	0f b6 c0             	movzx  eax,al
c0010dc7:	59                   	pop    ecx
c0010dc8:	50                   	push   eax
c0010dc9:	53                   	push   ebx
c0010dca:	e8 c1 f8 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0010dcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd2:	e8 6f ff ff ff       	call   c0010d46 <VgaText::getCursorHeight()>
c0010dd7:	5a                   	pop    edx
c0010dd8:	59                   	pop    ecx
c0010dd9:	50                   	push   eax
c0010dda:	53                   	push   ebx
c0010ddb:	e8 48 ff ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dea:	75 0a                	jne    c0010df6 <setActiveTerminal(VgaText*)+0xa5>
c0010dec:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010df6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dfa:	83 c4 08             	add    esp,0x8
c0010dfd:	5b                   	pop    ebx
c0010dfe:	e9 0f f8 ff ff       	jmp    c0010612 <VgaText::load()>

c0010e03 <doTerminalCycle()>:
c0010e03:	83 ec 18             	sub    esp,0x18
c0010e06:	a1 c0 e4 02 c0       	mov    eax,ds:0xc002e4c0
c0010e0b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e11:	50                   	push   eax
c0010e12:	a3 c0 e4 02 c0       	mov    ds:0xc002e4c0,eax
c0010e17:	e8 35 ff ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0010e1c:	83 c4 1c             	add    esp,0x1c
c0010e1f:	c3                   	ret    

c0010e20 <VgaText::doUpdate()>:
c0010e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e24:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e2a:	85 c0                	test   eax,eax
c0010e2c:	74 02                	je     c0010e30 <VgaText::doUpdate()+0x10>
c0010e2e:	ff e0                	jmp    eax
c0010e30:	c3                   	ret    
c0010e31:	90                   	nop

c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e32:	55                   	push   ebp
c0010e33:	57                   	push   edi
c0010e34:	56                   	push   esi
c0010e35:	53                   	push   ebx
c0010e36:	83 ec 1c             	sub    esp,0x1c
c0010e39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e3d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e42:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e49:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e4c:	50                   	push   eax
c0010e4d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e52:	50                   	push   eax
c0010e53:	e8 4a f9 ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e58:	59                   	pop    ecx
c0010e59:	0f b6 c0             	movzx  eax,al
c0010e5c:	5b                   	pop    ebx
c0010e5d:	31 c9                	xor    ecx,ecx
c0010e5f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e6b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e75:	0f b7 db             	movzx  ebx,bx
c0010e78:	01 db                	add    ebx,ebx
c0010e7a:	01 fb                	add    ebx,edi
c0010e7c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e7f:	84 c0                	test   al,al
c0010e81:	0f 84 38 01 00 00    	je     c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e87:	3c 0d                	cmp    al,0xd
c0010e89:	75 0f                	jne    c0010e9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e8b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e95:	e9 1f 01 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9a:	3c 0a                	cmp    al,0xa
c0010e9c:	75 5b                	jne    c0010ef9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e9e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ea4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eae:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eb7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ebd:	75 12                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ebf:	83 ec 0c             	sub    esp,0xc
c0010ec2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ec8:	55                   	push   ebp
c0010ec9:	e8 e6 f8 ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	55                   	push   ebp
c0010ed5:	e8 8c f7 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010eda:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eeb:	31 c9                	xor    ecx,ecx
c0010eed:	0f b7 db             	movzx  ebx,bx
c0010ef0:	01 db                	add    ebx,ebx
c0010ef2:	01 fb                	add    ebx,edi
c0010ef4:	e9 c0 00 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef9:	3c 08                	cmp    al,0x8
c0010efb:	75 4e                	jne    c0010f4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010efd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f01:	53                   	push   ebx
c0010f02:	53                   	push   ebx
c0010f03:	6a 01                	push   0x1
c0010f05:	55                   	push   ebp
c0010f06:	e8 df fc ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010f0b:	58                   	pop    eax
c0010f0c:	5a                   	pop    edx
c0010f0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f19:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f1f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f25:	6a 20                	push   0x20
c0010f27:	55                   	push   ebp
c0010f28:	e8 2d f9 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f2d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f35:	83 c4 20             	add    esp,0x20
c0010f38:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f3e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f42:	0f b7 db             	movzx  ebx,bx
c0010f45:	01 db                	add    ebx,ebx
c0010f47:	01 fb                	add    ebx,edi
c0010f49:	eb 6e                	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f4b:	51                   	push   ecx
c0010f4c:	51                   	push   ecx
c0010f4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f51:	50                   	push   eax
c0010f52:	e8 f1 f8 ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f5d:	39 2d c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,ebp
c0010f63:	75 2a                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f65:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f6b:	85 c0                	test   eax,eax
c0010f6d:	74 20                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f6f:	52                   	push   edx
c0010f70:	52                   	push   edx
c0010f71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f85:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f88:	51                   	push   ecx
c0010f89:	55                   	push   ebp
c0010f8a:	ff d0                	call   eax
c0010f8c:	83 c4 20             	add    esp,0x20
c0010f8f:	83 c3 02             	add    ebx,0x2
c0010f92:	50                   	push   eax
c0010f93:	50                   	push   eax
c0010f94:	6a 00                	push   0x0
c0010f96:	55                   	push   ebp
c0010f97:	e8 8c f9 ff ff       	call   c0010928 <VgaText::incrementCursor(bool)>
c0010f9c:	83 c4 10             	add    esp,0x10
c0010f9f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fa6:	75 0f                	jne    c0010fb7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fa8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb0:	0f b7 db             	movzx  ebx,bx
c0010fb3:	01 db                	add    ebx,ebx
c0010fb5:	01 fb                	add    ebx,edi
c0010fb7:	b1 01                	mov    cl,0x1
c0010fb9:	46                   	inc    esi
c0010fba:	e9 bd fe ff ff       	jmp    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 9a f6 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd3:	84 c9                	test   cl,cl
c0010fd5:	74 0c                	je     c0010fe3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	55                   	push   ebp
c0010fdb:	e8 40 fe ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fea:	83 c4 1c             	add    esp,0x1c
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	5d                   	pop    ebp
c0010ff1:	c3                   	ret    

c0010ff2 <VgaText::clearScreen()>:
c0010ff2:	57                   	push   edi
c0010ff3:	56                   	push   esi
c0010ff4:	31 f6                	xor    esi,esi
c0010ff6:	53                   	push   ebx
c0010ff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ffb:	52                   	push   edx
c0010ffc:	6a 00                	push   0x0
c0010ffe:	6a 00                	push   0x0
c0011000:	53                   	push   ebx
c0011001:	e8 cc f8 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011006:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011016:	7e 26                	jle    c001103e <VgaText::clearScreen()+0x4c>
c0011018:	31 ff                	xor    edi,edi
c001101a:	50                   	push   eax
c001101b:	50                   	push   eax
c001101c:	56                   	push   esi
c001101d:	57                   	push   edi
c001101e:	47                   	inc    edi
c001101f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011025:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001102b:	6a 20                	push   0x20
c001102d:	53                   	push   ebx
c001102e:	e8 27 f8 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011033:	83 c4 20             	add    esp,0x20
c0011036:	83 ff 50             	cmp    edi,0x50
c0011039:	75 df                	jne    c001101a <VgaText::clearScreen()+0x28>
c001103b:	46                   	inc    esi
c001103c:	eb d2                	jmp    c0011010 <VgaText::clearScreen()+0x1e>
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	53                   	push   ebx
c0011042:	e8 d9 fd ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0011047:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	5b                   	pop    ebx
c0011052:	5e                   	pop    esi
c0011053:	5f                   	pop    edi
c0011054:	c3                   	ret    
c0011055:	90                   	nop

c0011056 <VgaText::putchar(char)>:
c0011056:	56                   	push   esi
c0011057:	53                   	push   ebx
c0011058:	83 ec 14             	sub    esp,0x14
c001105b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001105f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011063:	3c 5b                	cmp    al,0x5b
c0011065:	75 21                	jne    c0011088 <VgaText::putchar(char)+0x32>
c0011067:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001106e:	74 28                	je     c0011098 <VgaText::putchar(char)+0x42>
c0011070:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011079:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011083:	e9 e2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011088:	3c 1b                	cmp    al,0x1b
c001108a:	75 0c                	jne    c0011098 <VgaText::putchar(char)+0x42>
c001108c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011093:	e9 d2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011098:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001109e:	84 c9                	test   cl,cl
c00110a0:	0f 84 ab 00 00 00    	je     c0011151 <VgaText::putchar(char)+0xfb>
c00110a6:	8d 50 c0             	lea    edx,[eax-0x40]
c00110a9:	80 fa 3e             	cmp    dl,0x3e
c00110ac:	0f 87 82 00 00 00    	ja     c0011134 <VgaText::putchar(char)+0xde>
c00110b2:	3c 6d                	cmp    al,0x6d
c00110b4:	75 4d                	jne    c0011103 <VgaText::putchar(char)+0xad>
c00110b6:	31 f6                	xor    esi,esi
c00110b8:	31 d2                	xor    edx,edx
c00110ba:	31 c0                	xor    eax,eax
c00110bc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c2:	7e 30                	jle    c00110f4 <VgaText::putchar(char)+0x9e>
c00110c4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110cc:	80 fa 3b             	cmp    dl,0x3b
c00110cf:	75 17                	jne    c00110e8 <VgaText::putchar(char)+0x92>
c00110d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110d5:	50                   	push   eax
c00110d6:	53                   	push   ebx
c00110d7:	e8 ee f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110dc:	59                   	pop    ecx
c00110dd:	31 d2                	xor    edx,edx
c00110df:	58                   	pop    eax
c00110e0:	31 c0                	xor    eax,eax
c00110e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110e6:	eb 09                	jmp    c00110f1 <VgaText::putchar(char)+0x9b>
c00110e8:	6b c0 0a             	imul   eax,eax,0xa
c00110eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110ef:	88 ca                	mov    dl,cl
c00110f1:	46                   	inc    esi
c00110f2:	eb c8                	jmp    c00110bc <VgaText::putchar(char)+0x66>
c00110f4:	84 d2                	test   dl,dl
c00110f6:	74 31                	je     c0011129 <VgaText::putchar(char)+0xd3>
c00110f8:	50                   	push   eax
c00110f9:	53                   	push   ebx
c00110fa:	e8 cb f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110ff:	58                   	pop    eax
c0011100:	5a                   	pop    edx
c0011101:	eb 26                	jmp    c0011129 <VgaText::putchar(char)+0xd3>
c0011103:	3c 4a                	cmp    al,0x4a
c0011105:	75 22                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011107:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001110e:	75 19                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	53                   	push   ebx
c0011114:	e8 d9 fe ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011119:	83 c4 0c             	add    esp,0xc
c001111c:	6a 00                	push   0x0
c001111e:	6a 00                	push   0x0
c0011120:	53                   	push   ebx
c0011121:	e8 ac f7 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011132:	eb 36                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011134:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001113a:	83 fa 0e             	cmp    edx,0xe
c001113d:	7f 2b                	jg     c001116a <VgaText::putchar(char)+0x114>
c001113f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011142:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011148:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001114f:	eb 19                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011151:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011157:	0f be c0             	movsx  eax,al
c001115a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011160:	50                   	push   eax
c0011161:	53                   	push   ebx
c0011162:	e8 ab fa ff ff       	call   c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011167:	83 c4 10             	add    esp,0x10
c001116a:	83 c4 14             	add    esp,0x14
c001116d:	5b                   	pop    ebx
c001116e:	5e                   	pop    esi
c001116f:	c3                   	ret    

c0011170 <VgaText::puts(char const*)>:
c0011170:	53                   	push   ebx
c0011171:	83 ec 08             	sub    esp,0x8
c0011174:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011178:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001117b:	84 c0                	test   al,al
c001117d:	74 12                	je     c0011191 <VgaText::puts(char const*)+0x21>
c001117f:	43                   	inc    ebx
c0011180:	51                   	push   ecx
c0011181:	51                   	push   ecx
c0011182:	50                   	push   eax
c0011183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011187:	e8 ca fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c001118c:	83 c4 10             	add    esp,0x10
c001118f:	eb e7                	jmp    c0011178 <VgaText::puts(char const*)+0x8>
c0011191:	83 c4 08             	add    esp,0x8
c0011194:	5b                   	pop    ebx
c0011195:	c3                   	ret    

c0011196 <VgaText::putx(unsigned int)>:
c0011196:	57                   	push   edi
c0011197:	b9 11 00 00 00       	mov    ecx,0x11
c001119c:	56                   	push   esi
c001119d:	be 8e a3 02 c0       	mov    esi,0xc002a38e
c00111a2:	53                   	push   ebx
c00111a3:	83 ec 20             	sub    esp,0x20
c00111a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111ae:	fc                   	cld    
c00111af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b1:	be 08 00 00 00       	mov    esi,0x8
c00111b6:	50                   	push   eax
c00111b7:	50                   	push   eax
c00111b8:	89 d8                	mov    eax,ebx
c00111ba:	c1 e3 04             	shl    ebx,0x4
c00111bd:	c1 e8 1c             	shr    eax,0x1c
c00111c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111c5:	50                   	push   eax
c00111c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111ca:	e8 87 fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c00111cf:	83 c4 10             	add    esp,0x10
c00111d2:	4e                   	dec    esi
c00111d3:	75 e1                	jne    c00111b6 <VgaText::putx(unsigned int)+0x20>
c00111d5:	83 c4 20             	add    esp,0x20
c00111d8:	5b                   	pop    ebx
c00111d9:	5e                   	pop    esi
c00111da:	5f                   	pop    edi
c00111db:	c3                   	ret    

c00111dc <VgaText::VgaText(char const*)>:
c00111dc:	57                   	push   edi
c00111dd:	56                   	push   esi
c00111de:	53                   	push   ebx
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	83 ec 08             	sub    esp,0x8
c00111e6:	6a 00                	push   0x0
c00111e8:	50                   	push   eax
c00111e9:	e8 6e 05 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	ba f4 a3 02 c0       	mov    edx,0xc002a3f4
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	89 10                	mov    DWORD PTR [eax],edx
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011227:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011232:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001124a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011264:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001126a:	bb a0 e4 02 c0       	mov    ebx,0xc002e4a0
c001126f:	b8 08 00 00 00       	mov    eax,0x8
c0011274:	fc                   	cld    
c0011275:	89 d7                	mov    edi,edx
c0011277:	89 de                	mov    esi,ebx
c0011279:	89 c1                	mov    ecx,eax
c001127b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001127d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011281:	05 1e 10 00 00       	add    eax,0x101e
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128d:	50                   	push   eax
c001128e:	e8 a1 f5 fe ff       	call   c0000834 <strcpy>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	83 c0 0c             	add    eax,0xc
c00112ab:	83 ec 04             	sub    esp,0x4
c00112ae:	68 00 0f 00 00       	push   0xf00
c00112b3:	6a 00                	push   0x0
c00112b5:	50                   	push   eax
c00112b6:	e8 bd f4 fe ff       	call   c0000778 <memset>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 04             	sub    esp,0x4
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 07                	push   0x7
c00112c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c9:	e8 b4 f4 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	6a 02                	push   0x2
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 49 fa ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 04             	sub    esp,0x4
c00112e5:	6a 00                	push   0x0
c00112e7:	6a 00                	push   0x0
c00112e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ed:	e8 e0 f5 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	83 ec 08             	sub    esp,0x8
c00112f8:	6a 01                	push   0x1
c00112fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fe:	e8 7d f3 ff ff       	call   c0010680 <VgaText::showCursor(bool)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	6a 01                	push   0x1
c001130b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130f:	e8 7c f3 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0011314:	83 c4 10             	add    esp,0x10
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131e:	e8 cf fc ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011335:	05 9e 10 00 00       	add    eax,0x109e
c001133a:	83 ec 04             	sub    esp,0x4
c001133d:	68 96 00 00 00       	push   0x96
c0011342:	6a 00                	push   0x0
c0011344:	50                   	push   eax
c0011345:	e8 2e f4 fe ff       	call   c0000778 <memset>
c001134a:	83 c4 10             	add    esp,0x10
c001134d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011351:	05 34 11 00 00       	add    eax,0x1134
c0011356:	83 ec 04             	sub    esp,0x4
c0011359:	68 2c 01 00 00       	push   0x12c
c001135e:	6a 00                	push   0x0
c0011360:	50                   	push   eax
c0011361:	e8 12 f4 fe ff       	call   c0000778 <memset>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	90                   	nop
c001136a:	5b                   	pop    ebx
c001136b:	5e                   	pop    esi
c001136c:	5f                   	pop    edi
c001136d:	c3                   	ret    

c001136e <VgaText::receiveKey(unsigned char)>:
c001136e:	55                   	push   ebp
c001136f:	57                   	push   edi
c0011370:	56                   	push   esi
c0011371:	53                   	push   ebx
c0011372:	83 ec 1c             	sub    esp,0x1c
c0011375:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011379:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001137d:	84 db                	test   bl,bl
c001137f:	0f 84 c9 00 00 00    	je     c001144e <VgaText::receiveKey(unsigned char)+0xe0>
c0011385:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001138b:	80 fb 08             	cmp    bl,0x8
c001138e:	75 2c                	jne    c00113bc <VgaText::receiveKey(unsigned char)+0x4e>
c0011390:	83 ec 0c             	sub    esp,0xc
c0011393:	57                   	push   edi
c0011394:	e8 fb f3 fe ff       	call   c0000794 <strlen>
c0011399:	83 c4 10             	add    esp,0x10
c001139c:	85 c0                	test   eax,eax
c001139e:	74 41                	je     c00113e1 <VgaText::receiveKey(unsigned char)+0x73>
c00113a0:	50                   	push   eax
c00113a1:	50                   	push   eax
c00113a2:	6a 08                	push   0x8
c00113a4:	56                   	push   esi
c00113a5:	e8 ac fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	e8 e2 f3 fe ff       	call   c0000794 <strlen>
c00113b2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113ba:	eb 22                	jmp    c00113de <VgaText::receiveKey(unsigned char)+0x70>
c00113bc:	0f be c3             	movsx  eax,bl
c00113bf:	52                   	push   edx
c00113c0:	52                   	push   edx
c00113c1:	50                   	push   eax
c00113c2:	56                   	push   esi
c00113c3:	e8 8e fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d1:	59                   	pop    ecx
c00113d2:	5d                   	pop    ebp
c00113d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113d7:	50                   	push   eax
c00113d8:	57                   	push   edi
c00113d9:	e8 96 f5 fe ff       	call   c0000974 <strcat>
c00113de:	83 c4 10             	add    esp,0x10
c00113e1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113e8:	75 05                	jne    c00113ef <VgaText::receiveKey(unsigned char)+0x81>
c00113ea:	80 fb 0a             	cmp    bl,0xa
c00113ed:	75 53                	jne    c0011442 <VgaText::receiveKey(unsigned char)+0xd4>
c00113ef:	83 ec 0c             	sub    esp,0xc
c00113f2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113f8:	53                   	push   ebx
c00113f9:	e8 96 f3 fe ff       	call   c0000794 <strlen>
c00113fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011401:	89 c5                	mov    ebp,eax
c0011403:	e8 8c f3 fe ff       	call   c0000794 <strlen>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001140f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011414:	76 10                	jbe    c0011426 <VgaText::receiveKey(unsigned char)+0xb8>
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	68 9f a3 02 c0       	push   0xc002a39f
c001141e:	e8 52 91 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0011423:	83 c4 10             	add    esp,0x10
c0011426:	50                   	push   eax
c0011427:	50                   	push   eax
c0011428:	57                   	push   edi
c0011429:	53                   	push   ebx
c001142a:	e8 45 f5 fe ff       	call   c0000974 <strcat>
c001142f:	83 c4 0c             	add    esp,0xc
c0011432:	68 96 00 00 00       	push   0x96
c0011437:	6a 00                	push   0x0
c0011439:	57                   	push   edi
c001143a:	e8 39 f3 fe ff       	call   c0000778 <memset>
c001143f:	83 c4 10             	add    esp,0x10
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	56                   	push   esi
c0011446:	e8 d5 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	83 c4 1c             	add    esp,0x1c
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <VgaText::write(unsigned long long, void*, int*)>:
c0011456:	55                   	push   ebp
c0011457:	57                   	push   edi
c0011458:	56                   	push   esi
c0011459:	53                   	push   ebx
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011461:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011465:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011469:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011470:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011473:	39 eb                	cmp    ebx,ebp
c0011475:	74 13                	je     c001148a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011477:	43                   	inc    ebx
c0011478:	50                   	push   eax
c0011479:	50                   	push   eax
c001147a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001147e:	50                   	push   eax
c001147f:	56                   	push   esi
c0011480:	e8 d1 fb ff ff       	call   c0011056 <VgaText::putchar(char)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	eb e9                	jmp    c0011473 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011494:	56                   	push   esi
c0011495:	e8 86 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001149a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001149e:	89 38                	mov    DWORD PTR [eax],edi
c00114a0:	83 c4 1c             	add    esp,0x1c
c00114a3:	31 c0                	xor    eax,eax
c00114a5:	5b                   	pop    ebx
c00114a6:	5e                   	pop    esi
c00114a7:	5f                   	pop    edi
c00114a8:	5d                   	pop    ebp
c00114a9:	c3                   	ret    

c00114aa <newTerminal(char*)>:
c00114aa:	83 ec 28             	sub    esp,0x28
c00114ad:	68 60 12 00 00       	push   0x1260
c00114b2:	e8 89 e3 ff ff       	call   c000f840 <malloc>
c00114b7:	5a                   	pop    edx
c00114b8:	59                   	pop    ecx
c00114b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114bd:	50                   	push   eax
c00114be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c2:	e8 15 fd ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c00114c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114cb:	83 c4 2c             	add    esp,0x2c
c00114ce:	c3                   	ret    
c00114cf:	90                   	nop

c00114d0 <TSS::TSS()>:
c00114d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114db:	90                   	nop
c00114dc:	c3                   	ret    
c00114dd:	90                   	nop

c00114de <TSS::setESP(unsigned long)>:
c00114de:	55                   	push   ebp
c00114df:	89 e5                	mov    ebp,esp
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ed:	90                   	nop
c00114ee:	5d                   	pop    ebp
c00114ef:	c3                   	ret    

c00114f0 <TSS::flush()>:
c00114f0:	55                   	push   ebp
c00114f1:	89 e5                	mov    ebp,esp
c00114f3:	83 ec 10             	sub    esp,0x10
c00114f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fb:	83 c8 03             	or     eax,0x3
c00114fe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011502:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011506:	66 89 d0             	mov    ax,dx
c0011509:	0f 00 d8             	ltr    ax
c001150c:	90                   	nop
c001150d:	c9                   	leave  
c001150e:	c3                   	ret    
c001150f:	90                   	nop

c0011510 <TSS::setup(unsigned long, unsigned long)>:
c0011510:	55                   	push   ebp
c0011511:	89 e5                	mov    ebp,esp
c0011513:	83 ec 18             	sub    esp,0x18
c0011516:	83 ec 0c             	sub    esp,0xc
c0011519:	6a 68                	push   0x68
c001151b:	e8 20 e3 ff ff       	call   c000f840 <malloc>
c0011520:	83 c4 10             	add    esp,0x10
c0011523:	89 c2                	mov    edx,eax
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001152b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011531:	83 ec 04             	sub    esp,0x4
c0011534:	6a 68                	push   0x68
c0011536:	6a 00                	push   0x0
c0011538:	50                   	push   eax
c0011539:	e8 3a f2 fe ff       	call   c0000778 <memset>
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011562:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011583:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115b6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d8:	0f 20 da             	mov    edx,cr3
c00115db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ea:	83 ec 08             	sub    esp,0x8
c00115ed:	50                   	push   eax
c00115ee:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f1:	50                   	push   eax
c00115f2:	e8 27 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115f7:	83 c4 10             	add    esp,0x10
c00115fa:	83 ec 08             	sub    esp,0x8
c00115fd:	6a 68                	push   0x68
c00115ff:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011602:	50                   	push   eax
c0011603:	e8 32 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011608:	83 c4 10             	add    esp,0x10
c001160b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001160f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011612:	83 e0 0f             	and    eax,0xf
c0011615:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011618:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001161b:	83 c8 40             	or     eax,0x40
c001161e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011621:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0011626:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001162c:	05 78 01 00 00       	add    eax,0x178
c0011631:	83 ec 04             	sub    esp,0x4
c0011634:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011637:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001163a:	50                   	push   eax
c001163b:	e8 2e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 c2                	mov    edx,eax
c0011645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011648:	89 10                	mov    DWORD PTR [eax],edx
c001164a:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001164f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011655:	05 78 01 00 00       	add    eax,0x178
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	50                   	push   eax
c001165e:	e8 4f da ff ff       	call   c000f0b2 <GDT::flush()>
c0011663:	83 c4 10             	add    esp,0x10
c0011666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011669:	8b 00                	mov    eax,DWORD PTR [eax]
c001166b:	83 ec 08             	sub    esp,0x8
c001166e:	50                   	push   eax
c001166f:	68 08 a4 02 c0       	push   0xc002a408
c0011674:	e8 5b 18 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011681:	c9                   	leave  
c0011682:	c3                   	ret    
c0011683:	90                   	nop

c0011684 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001168f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011694:	75 08                	jne    c001169e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011696:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001169c:	eb 38                	jmp    c00116d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001169e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a3:	75 17                	jne    c00116bc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116bc:	89 c1                	mov    ecx,eax
c00116be:	83 e1 fd             	and    ecx,0xfffffffd
c00116c1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116c7:	74 cd                	je     c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ce:	83 e0 ef             	and    eax,0xffffffef
c00116d1:	83 f8 08             	cmp    eax,0x8
c00116d4:	76 c0                	jbe    c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116d6:	31 c0                	xor    eax,eax
c00116d8:	c3                   	ret    
c00116d9:	90                   	nop

c00116da <ReservedFilename::isAtty()>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e1:	31 c0                	xor    eax,eax
c00116e3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116e9:	74 09                	je     c00116f4 <ReservedFilename::isAtty()+0x1a>
c00116eb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f1:	0f 94 c0             	sete   al
c00116f4:	c3                   	ret    
c00116f5:	90                   	nop

c00116f6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011705:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001170a:	75 08                	jne    c0011714 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001170c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011712:	eb 3d                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011714:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011719:	75 17                	jne    c0011732 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001171b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011720:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011723:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011729:	8b 10                	mov    edx,DWORD PTR [eax]
c001172b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001172f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011732:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011737:	75 04                	jne    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011739:	89 0a                	mov    DWORD PTR [edx],ecx
c001173b:	eb 14                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001173d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011742:	74 c8                	je     c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011744:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011749:	83 e0 ef             	and    eax,0xffffffef
c001174c:	83 f8 08             	cmp    eax,0x8
c001174f:	76 bb                	jbe    c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011751:	31 c0                	xor    eax,eax
c0011753:	c3                   	ret    

c0011754 <UnixFile::getFileDescriptor()>:
c0011754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001175b:	c3                   	ret    

c001175c <UnixFile::UnixFile(int)>:
c001175c:	53                   	push   ebx
c001175d:	83 ec 28             	sub    esp,0x28
c0011760:	ba f4 a4 02 c0       	mov    edx,0xc002a4f4
c0011765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011769:	89 10                	mov    DWORD PTR [eax],edx
c001176b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011773:	0f 8f 8c 01 00 00    	jg     c0011905 <UnixFile::UnixFile(int)+0x1a9>
c0011779:	a1 80 d3 02 c0       	mov    eax,ds:0xc002d380
c001177e:	8d 50 01             	lea    edx,[eax+0x1]
c0011781:	89 15 80 d3 02 c0    	mov    DWORD PTR ds:0xc002d380,edx
c0011787:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001178b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001178e:	83 ec 08             	sub    esp,0x8
c0011791:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011795:	68 58 e5 02 c0       	push   0xc002e558
c001179a:	e8 51 6f 01 00       	call   c00286f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	a0 54 e5 02 c0       	mov    al,ds:0xc002e554
c00117a7:	83 f0 01             	xor    eax,0x1
c00117aa:	84 c0                	test   al,al
c00117ac:	0f 84 54 01 00 00    	je     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c00117b2:	c6 05 54 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e554,0x1
c00117b9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117c8:	e8 73 e0 ff ff       	call   c000f840 <malloc>
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	68 03 ff ff 0f       	push   0xfffff03
c00117da:	53                   	push   ebx
c00117db:	e8 2c 01 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	89 1d 4c e5 02 c0    	mov    DWORD PTR ds:0xc002e54c,ebx
c00117e9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f8:	e8 43 e0 ff ff       	call   c000f840 <malloc>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 c3                	mov    ebx,eax
c0011802:	83 ec 08             	sub    esp,0x8
c0011805:	68 01 ff ff 0f       	push   0xfffff01
c001180a:	53                   	push   ebx
c001180b:	e8 fc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	89 1d 50 e5 02 c0    	mov    DWORD PTR ds:0xc002e550,ebx
c0011819:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011821:	83 ec 0c             	sub    esp,0xc
c0011824:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011828:	e8 13 e0 ff ff       	call   c000f840 <malloc>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	89 c3                	mov    ebx,eax
c0011832:	83 ec 08             	sub    esp,0x8
c0011835:	68 00 ff ff 0f       	push   0xfffff00
c001183a:	53                   	push   ebx
c001183b:	e8 cc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c0011849:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011858:	e8 e3 df ff ff       	call   c000f840 <malloc>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	89 c3                	mov    ebx,eax
c0011862:	83 ec 08             	sub    esp,0x8
c0011865:	68 02 ff ff 0f       	push   0xfffff02
c001186a:	53                   	push   ebx
c001186b:	e8 9c 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	89 1d 48 e5 02 c0    	mov    DWORD PTR ds:0xc002e548,ebx
c0011879:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011881:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011886:	7f 7e                	jg     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c0011888:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011897:	e8 a4 df ff ff       	call   c000f840 <malloc>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	89 c3                	mov    ebx,eax
c00118a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118aa:	83 ec 08             	sub    esp,0x8
c00118ad:	50                   	push   eax
c00118ae:	53                   	push   ebx
c00118af:	e8 58 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118b4:	83 c4 10             	add    esp,0x10
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	89 1c 85 20 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ae0],ebx
c00118c2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d1:	e8 6a df ff ff       	call   c000f840 <malloc>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	89 c3                	mov    ebx,eax
c00118db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118df:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118e4:	83 ec 08             	sub    esp,0x8
c00118e7:	50                   	push   eax
c00118e8:	53                   	push   ebx
c00118e9:	e8 1e 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f5:	89 1c 85 e0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b20],ebx
c00118fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011900:	e9 7c ff ff ff       	jmp    c0011881 <UnixFile::UnixFile(int)+0x125>
c0011905:	90                   	nop
c0011906:	83 c4 28             	add    esp,0x28
c0011909:	5b                   	pop    ebx
c001190a:	c3                   	ret    
c001190b:	90                   	nop

c001190c <ReservedFilename::ReservedFilename(int)>:
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011913:	83 ec 08             	sub    esp,0x8
c0011916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191a:	50                   	push   eax
c001191b:	e8 3c fe ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	ba 10 a5 02 c0       	mov    edx,0xc002a510
c0011928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192c:	89 10                	mov    DWORD PTR [eax],edx
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011936:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011939:	90                   	nop
c001193a:	83 c4 0c             	add    esp,0xc
c001193d:	c3                   	ret    

c001193e <UnixFile::~UnixFile()>:
c001193e:	83 ec 1c             	sub    esp,0x1c
c0011941:	ba f4 a4 02 c0       	mov    edx,0xc002a4f4
c0011946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001194a:	89 10                	mov    DWORD PTR [eax],edx
c001194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011953:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011958:	7f 73                	jg     c00119cd <UnixFile::~UnixFile()+0x8f>
c001195a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 58 e5 02 c0       	push   0xc002e558
c001196a:	e8 55 6e 01 00       	call   c00287c4 <LinkedList<UnixFile>::getFirstElement()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	68 58 e5 02 c0       	push   0xc002e558
c001197e:	e8 49 6e 01 00       	call   c00287cc <LinkedList<UnixFile>::removeFirst()>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001198a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001198e:	74 40                	je     c00119d0 <UnixFile::~UnixFile()+0x92>
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011997:	68 58 e5 02 c0       	push   0xc002e558
c001199c:	e8 4f 6d 01 00       	call   c00286f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a8:	8d 50 01             	lea    edx,[eax+0x1]
c00119ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119af:	3d 88 13 00 00       	cmp    eax,0x1388
c00119b4:	0f 94 c0             	sete   al
c00119b7:	84 c0                	test   al,al
c00119b9:	74 a7                	je     c0011962 <UnixFile::~UnixFile()+0x24>
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	68 cc a4 02 c0       	push   0xc002a4cc
c00119c3:	e8 ad 8b 00 00       	call   c001a575 <Krnl::panic(char const*)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	eb 95                	jmp    c0011962 <UnixFile::~UnixFile()+0x24>
c00119cd:	90                   	nop
c00119ce:	eb 01                	jmp    c00119d1 <UnixFile::~UnixFile()+0x93>
c00119d0:	90                   	nop
c00119d1:	90                   	nop
c00119d2:	83 c4 1c             	add    esp,0x1c
c00119d5:	c3                   	ret    

c00119d6 <UnixFile::~UnixFile()>:
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e0:	e8 59 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	83 ec 08             	sub    esp,0x8
c00119eb:	6a 0c                	push   0xc
c00119ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f1:	e8 fe 13 00 00       	call   c0012df4 <operator delete(void*, unsigned long)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	83 c4 0c             	add    esp,0xc
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <ReservedFilename::~ReservedFilename()>:
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	ba 10 a5 02 c0       	mov    edx,0xc002a510
c0011a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0a:	89 10                	mov    DWORD PTR [eax],edx
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	83 ec 0c             	sub    esp,0xc
c0011a13:	50                   	push   eax
c0011a14:	e8 25 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	90                   	nop
c0011a1d:	83 c4 0c             	add    esp,0xc
c0011a20:	c3                   	ret    
c0011a21:	90                   	nop

c0011a22 <ReservedFilename::~ReservedFilename()>:
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a2c:	e8 cd ff ff ff       	call   c00119fe <ReservedFilename::~ReservedFilename()>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	83 ec 08             	sub    esp,0x8
c0011a37:	6a 0c                	push   0xc
c0011a39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a3d:	e8 b2 13 00 00       	call   c0012df4 <operator delete(void*, unsigned long)>
c0011a42:	83 c4 10             	add    esp,0x10
c0011a45:	83 c4 0c             	add    esp,0xc
c0011a48:	c3                   	ret    

c0011a49 <getFromFileDescriptor(int)>:
c0011a49:	53                   	push   ebx
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a51:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a57:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a5d:	7f 2c                	jg     c0011a8b <getFromFileDescriptor(int)+0x42>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	68 58 e5 02 c0       	push   0xc002e558
c0011a67:	e8 58 6d 01 00       	call   c00287c4 <LinkedList<UnixFile>::getFirstElement()>
c0011a6c:	83 c4 10             	add    esp,0x10
c0011a6f:	85 c0                	test   eax,eax
c0011a71:	75 04                	jne    c0011a77 <getFromFileDescriptor(int)+0x2e>
c0011a73:	31 c0                	xor    eax,eax
c0011a75:	eb 6e                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a77:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a7a:	74 69                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a7c:	52                   	push   edx
c0011a7d:	52                   	push   edx
c0011a7e:	50                   	push   eax
c0011a7f:	68 58 e5 02 c0       	push   0xc002e558
c0011a84:	e8 e5 6d 01 00       	call   c002886e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a89:	eb e1                	jmp    c0011a6c <getFromFileDescriptor(int)+0x23>
c0011a8b:	a1 4c e5 02 c0       	mov    eax,ds:0xc002e54c
c0011a90:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a96:	74 4d                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a98:	a1 50 e5 02 c0       	mov    eax,ds:0xc002e550
c0011a9d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa3:	74 40                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011aa5:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0011aaa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab0:	74 33                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ab2:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0011ab7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011abd:	74 26                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011abf:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ac5:	83 f8 08             	cmp    eax,0x8
c0011ac8:	77 09                	ja     c0011ad3 <getFromFileDescriptor(int)+0x8a>
c0011aca:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c0011ad1:	eb 12                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ad3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ad9:	83 fb 08             	cmp    ebx,0x8
c0011adc:	77 95                	ja     c0011a73 <getFromFileDescriptor(int)+0x2a>
c0011ade:	8b 04 9d e0 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b20]
c0011ae5:	83 c4 08             	add    esp,0x8
c0011ae8:	5b                   	pop    ebx
c0011ae9:	c3                   	ret    

c0011aea <__static_initialization_and_destruction_0(int, int)>:
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af2:	75 34                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011afc:	75 2a                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	68 58 e5 02 c0       	push   0xc002e558
c0011b06:	e8 8d 6b 01 00       	call   c0028698 <LinkedList<UnixFile>::LinkedList()>
c0011b0b:	83 c4 10             	add    esp,0x10
c0011b0e:	83 ec 04             	sub    esp,0x4
c0011b11:	68 fc d2 02 c0       	push   0xc002d2fc
c0011b16:	68 58 e5 02 c0       	push   0xc002e558
c0011b1b:	68 96 86 02 c0       	push   0xc0028696
c0011b20:	e8 49 12 00 00       	call   c0012d6e <__cxa_atexit>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	90                   	nop
c0011b29:	83 c4 0c             	add    esp,0xc
c0011b2c:	c3                   	ret    

c0011b2d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b2d:	83 ec 0c             	sub    esp,0xc
c0011b30:	83 ec 08             	sub    esp,0x8
c0011b33:	68 ff ff 00 00       	push   0xffff
c0011b38:	6a 01                	push   0x1
c0011b3a:	e8 ab ff ff ff       	call   c0011aea <__static_initialization_and_destruction_0(int, int)>
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	83 c4 0c             	add    esp,0xc
c0011b45:	c3                   	ret    

c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b46:	53                   	push   ebx
c0011b47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b4f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b55:	89 c8                	mov    eax,ecx
c0011b57:	d1 e8                	shr    eax,1
c0011b59:	03 05 88 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d388
c0011b5f:	83 e1 01             	and    ecx,0x1
c0011b62:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b64:	75 09                	jne    c0011b6f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b66:	83 e2 f0             	and    edx,0xfffffff0
c0011b69:	09 da                	or     edx,ebx
c0011b6b:	88 10                	mov    BYTE PTR [eax],dl
c0011b6d:	5b                   	pop    ebx
c0011b6e:	c3                   	ret    
c0011b6f:	c1 e3 04             	shl    ebx,0x4
c0011b72:	83 e2 0f             	and    edx,0xf
c0011b75:	09 da                	or     edx,ebx
c0011b77:	88 10                	mov    BYTE PTR [eax],dl
c0011b79:	5b                   	pop    ebx
c0011b7a:	c3                   	ret    

c0011b7b <Virt::getPageState(unsigned long)>:
c0011b7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7f:	8b 0d 88 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d388
c0011b85:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b8b:	89 d0                	mov    eax,edx
c0011b8d:	d1 e8                	shr    eax,1
c0011b8f:	83 e2 01             	and    edx,0x1
c0011b92:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b95:	75 04                	jne    c0011b9b <Virt::getPageState(unsigned long)+0x20>
c0011b97:	83 e0 0f             	and    eax,0xf
c0011b9a:	c3                   	ret    
c0011b9b:	c0 e8 04             	shr    al,0x4
c0011b9e:	c3                   	ret    

c0011b9f <Virt::allocateKernelVirtualPages(int)>:
c0011b9f:	55                   	push   ebp
c0011ba0:	31 ed                	xor    ebp,ebp
c0011ba2:	57                   	push   edi
c0011ba3:	56                   	push   esi
c0011ba4:	53                   	push   ebx
c0011ba5:	31 db                	xor    ebx,ebx
c0011ba7:	83 ec 1c             	sub    esp,0x1c
c0011baa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bae:	8b 3d 84 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d384
c0011bb4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bb9:	57                   	push   edi
c0011bba:	e8 bc ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bbf:	5a                   	pop    edx
c0011bc0:	84 c0                	test   al,al
c0011bc2:	75 3a                	jne    c0011bfe <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bc4:	85 db                	test   ebx,ebx
c0011bc6:	75 02                	jne    c0011bca <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bc8:	89 fd                	mov    ebp,edi
c0011bca:	43                   	inc    ebx
c0011bcb:	39 f3                	cmp    ebx,esi
c0011bcd:	74 5a                	je     c0011c29 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bcf:	47                   	inc    edi
c0011bd0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bd6:	76 31                	jbe    c0011c09 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bd8:	c7 05 84 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d384,0xc8000
c0011be2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011be7:	75 28                	jne    c0011c11 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011be9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bee:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf3:	57                   	push   edi
c0011bf4:	e8 82 ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bf9:	5a                   	pop    edx
c0011bfa:	84 c0                	test   al,al
c0011bfc:	74 c6                	je     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bfe:	31 db                	xor    ebx,ebx
c0011c00:	47                   	inc    edi
c0011c01:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c07:	77 cf                	ja     c0011bd8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c09:	89 3d 84 d3 02 c0    	mov    DWORD PTR ds:0xc002d384,edi
c0011c0f:	eb a8                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	68 24 a5 02 c0       	push   0xc002a524
c0011c19:	e8 57 89 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0011c1e:	8b 3d 84 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d384
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	eb 90                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c29:	89 2d 84 d3 02 c0    	mov    DWORD PTR ds:0xc002d384,ebp
c0011c2f:	4b                   	dec    ebx
c0011c30:	74 5f                	je     c0011c91 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c32:	85 f6                	test   esi,esi
c0011c34:	74 3d                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c36:	89 e8                	mov    eax,ebp
c0011c38:	31 db                	xor    ebx,ebx
c0011c3a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c3d:	eb 14                	jmp    c0011c53 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c3f:	6a 01                	push   0x1
c0011c41:	43                   	inc    ebx
c0011c42:	50                   	push   eax
c0011c43:	e8 fe fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c48:	58                   	pop    eax
c0011c49:	39 f3                	cmp    ebx,esi
c0011c4b:	5a                   	pop    edx
c0011c4c:	74 25                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c4e:	a1 84 d3 02 c0       	mov    eax,ds:0xc002d384
c0011c53:	8d 50 01             	lea    edx,[eax+0x1]
c0011c56:	85 db                	test   ebx,ebx
c0011c58:	89 15 84 d3 02 c0    	mov    DWORD PTR ds:0xc002d384,edx
c0011c5e:	74 20                	je     c0011c80 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c60:	39 df                	cmp    edi,ebx
c0011c62:	75 db                	jne    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c64:	6a 03                	push   0x3
c0011c66:	43                   	inc    ebx
c0011c67:	50                   	push   eax
c0011c68:	e8 d9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6d:	59                   	pop    ecx
c0011c6e:	39 f3                	cmp    ebx,esi
c0011c70:	58                   	pop    eax
c0011c71:	75 db                	jne    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c73:	83 c4 1c             	add    esp,0x1c
c0011c76:	89 e8                	mov    eax,ebp
c0011c78:	5b                   	pop    ebx
c0011c79:	c1 e0 0c             	shl    eax,0xc
c0011c7c:	5e                   	pop    esi
c0011c7d:	5f                   	pop    edi
c0011c7e:	5d                   	pop    ebp
c0011c7f:	c3                   	ret    
c0011c80:	6a 02                	push   0x2
c0011c82:	bb 01 00 00 00       	mov    ebx,0x1
c0011c87:	50                   	push   eax
c0011c88:	e8 b9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	58                   	pop    eax
c0011c8e:	5a                   	pop    edx
c0011c8f:	eb bd                	jmp    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c91:	6a 04                	push   0x4
c0011c93:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c96:	55                   	push   ebp
c0011c97:	a3 84 d3 02 c0       	mov    ds:0xc002d384,eax
c0011c9c:	e8 a5 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca1:	59                   	pop    ecx
c0011ca2:	89 e8                	mov    eax,ebp
c0011ca4:	5b                   	pop    ebx
c0011ca5:	c1 e0 0c             	shl    eax,0xc
c0011ca8:	83 c4 1c             	add    esp,0x1c
c0011cab:	5b                   	pop    ebx
c0011cac:	5e                   	pop    esi
c0011cad:	5f                   	pop    edi
c0011cae:	5d                   	pop    ebp
c0011caf:	c3                   	ret    

c0011cb0 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb0:	53                   	push   ebx
c0011cb1:	8b 15 64 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e564
c0011cb7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cbb:	b8 01 00 00 00       	mov    eax,0x1
c0011cc0:	89 cb                	mov    ebx,ecx
c0011cc2:	d3 e0                	shl    eax,cl
c0011cc4:	c1 eb 05             	shr    ebx,0x5
c0011cc7:	f7 d0                	not    eax
c0011cc9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ccc:	5b                   	pop    ebx
c0011ccd:	c3                   	ret    

c0011cce <Virt::swapIDToSector(unsigned long)>:
c0011cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd2:	0f af 05 8c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d38c
c0011cd9:	03 05 94 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d394
c0011cdf:	c3                   	ret    

c0011ce0 <Virt::allocateSwapfilePage()>:
c0011ce0:	55                   	push   ebp
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	57                   	push   edi
c0011ce4:	56                   	push   esi
c0011ce5:	53                   	push   ebx
c0011ce6:	83 ec 0c             	sub    esp,0xc
c0011ce9:	8b 0d 8c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d38c
c0011cef:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0011cf4:	f7 f1                	div    ecx
c0011cf6:	39 0d 90 d3 02 c0    	cmp    DWORD PTR ds:0xc002d390,ecx
c0011cfc:	72 2d                	jb     c0011d2b <Virt::allocateSwapfilePage()+0x4b>
c0011cfe:	8b 35 64 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e564
c0011d04:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d06:	f6 c2 01             	test   dl,0x1
c0011d09:	74 3c                	je     c0011d47 <Virt::allocateSwapfilePage()+0x67>
c0011d0b:	31 c9                	xor    ecx,ecx
c0011d0d:	bf 01 00 00 00       	mov    edi,0x1
c0011d12:	eb 12                	jmp    c0011d26 <Virt::allocateSwapfilePage()+0x46>
c0011d14:	89 fd                	mov    ebp,edi
c0011d16:	89 ca                	mov    edx,ecx
c0011d18:	d3 e5                	shl    ebp,cl
c0011d1a:	c1 ea 05             	shr    edx,0x5
c0011d1d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d20:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d22:	85 ea                	test   edx,ebp
c0011d24:	74 2a                	je     c0011d50 <Virt::allocateSwapfilePage()+0x70>
c0011d26:	41                   	inc    ecx
c0011d27:	39 c8                	cmp    eax,ecx
c0011d29:	77 e9                	ja     c0011d14 <Virt::allocateSwapfilePage()+0x34>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	68 cb a6 02 c0       	push   0xc002a6cb
c0011d33:	e8 3d 88 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	31 c9                	xor    ecx,ecx
c0011d3d:	83 c4 0c             	add    esp,0xc
c0011d40:	89 c8                	mov    eax,ecx
c0011d42:	5b                   	pop    ebx
c0011d43:	5e                   	pop    esi
c0011d44:	5f                   	pop    edi
c0011d45:	5d                   	pop    ebp
c0011d46:	c3                   	ret    
c0011d47:	89 f3                	mov    ebx,esi
c0011d49:	bd 01 00 00 00       	mov    ebp,0x1
c0011d4e:	31 c9                	xor    ecx,ecx
c0011d50:	09 ea                	or     edx,ebp
c0011d52:	89 c8                	mov    eax,ecx
c0011d54:	89 13                	mov    DWORD PTR [ebx],edx
c0011d56:	83 c4 0c             	add    esp,0xc
c0011d59:	5b                   	pop    ebx
c0011d5a:	5e                   	pop    esi
c0011d5b:	5f                   	pop    edi
c0011d5c:	5d                   	pop    ebp
c0011d5d:	c3                   	ret    

c0011d5e <Virt::virtualMemorySetup()>:
c0011d5e:	53                   	push   ebx
c0011d5f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d64:	83 ec 08             	sub    esp,0x8
c0011d67:	6a 0f                	push   0xf
c0011d69:	53                   	push   ebx
c0011d6a:	43                   	inc    ebx
c0011d6b:	e8 d6 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d70:	59                   	pop    ecx
c0011d71:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d77:	58                   	pop    eax
c0011d78:	75 ed                	jne    c0011d67 <Virt::virtualMemorySetup()+0x9>
c0011d7a:	83 ec 08             	sub    esp,0x8
c0011d7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d82:	68 00 00 00 c8       	push   0xc8000000
c0011d87:	68 e2 a6 02 c0       	push   0xc002a6e2
c0011d8c:	e8 43 11 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0011d91:	58                   	pop    eax
c0011d92:	5a                   	pop    edx
c0011d93:	68 00 f0 ff ef       	push   0xeffff000
c0011d98:	68 f6 a6 02 c0       	push   0xc002a6f6
c0011d9d:	e8 32 11 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	83 ec 08             	sub    esp,0x8
c0011da8:	6a 00                	push   0x0
c0011daa:	53                   	push   ebx
c0011dab:	43                   	inc    ebx
c0011dac:	e8 95 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db1:	83 c4 10             	add    esp,0x10
c0011db4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dba:	75 e9                	jne    c0011da5 <Virt::virtualMemorySetup()+0x47>
c0011dbc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc1:	83 ec 08             	sub    esp,0x8
c0011dc4:	6a 0f                	push   0xf
c0011dc6:	53                   	push   ebx
c0011dc7:	43                   	inc    ebx
c0011dc8:	e8 79 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dd6:	75 e9                	jne    c0011dc1 <Virt::virtualMemorySetup()+0x63>
c0011dd8:	83 c4 08             	add    esp,0x8
c0011ddb:	5b                   	pop    ebx
c0011ddc:	c3                   	ret    

c0011ddd <Virt::swappingSetup()>:
c0011ddd:	83 ec 14             	sub    esp,0x14
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0011de7:	f7 35 8c d3 02 c0    	div    DWORD PTR ds:0xc002d38c
c0011ded:	c1 e8 05             	shr    eax,0x5
c0011df0:	50                   	push   eax
c0011df1:	68 0a a7 02 c0       	push   0xc002a70a
c0011df6:	e8 d9 10 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0011dfb:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0011e00:	31 d2                	xor    edx,edx
c0011e02:	f7 35 8c d3 02 c0    	div    DWORD PTR ds:0xc002d38c
c0011e08:	c1 e8 05             	shr    eax,0x5
c0011e0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e0e:	e8 2d da ff ff       	call   c000f840 <malloc>
c0011e13:	83 c4 0c             	add    esp,0xc
c0011e16:	89 c1                	mov    ecx,eax
c0011e18:	a3 64 e5 02 c0       	mov    ds:0xc002e564,eax
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0011e24:	f7 35 8c d3 02 c0    	div    DWORD PTR ds:0xc002d38c
c0011e2a:	c1 e8 05             	shr    eax,0x5
c0011e2d:	50                   	push   eax
c0011e2e:	6a 00                	push   0x0
c0011e30:	51                   	push   ecx
c0011e31:	e8 42 e9 fe ff       	call   c0000778 <memset>
c0011e36:	83 c4 1c             	add    esp,0x1c
c0011e39:	c3                   	ret    

c0011e3a <Virt::getAKernelVAS()>:
c0011e3a:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0011e3f:	c3                   	ret    

c0011e40 <Virt::setupPageSwapping(int)>:
c0011e40:	57                   	push   edi
c0011e41:	56                   	push   esi
c0011e42:	53                   	push   ebx
c0011e43:	83 ec 1c             	sub    esp,0x1c
c0011e46:	68 14 01 00 00       	push   0x114
c0011e4b:	e8 f0 d9 ff ff       	call   c000f840 <malloc>
c0011e50:	83 c4 0c             	add    esp,0xc
c0011e53:	89 c6                	mov    esi,eax
c0011e55:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c0011e5b:	68 25 a7 02 c0       	push   0xc002a725
c0011e60:	50                   	push   eax
c0011e61:	e8 c6 15 00 00       	call   c001342c <File::File(char const*, Process*)>
c0011e66:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e69:	e8 9a 17 00 00       	call   c0013608 <File::unlink()>
c0011e6e:	58                   	pop    eax
c0011e6f:	5a                   	pop    edx
c0011e70:	6a 12                	push   0x12
c0011e72:	56                   	push   esi
c0011e73:	e8 18 16 00 00       	call   c0013490 <File::open(FileOpenMode)>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	85 c0                	test   eax,eax
c0011e7d:	0f 85 ca 00 00 00    	jne    c0011f4d <Virt::setupPageSwapping(int)+0x10d>
c0011e83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e8f:	c1 e3 08             	shl    ebx,0x8
c0011e92:	83 ec 0c             	sub    esp,0xc
c0011e95:	68 00 00 01 00       	push   0x10000
c0011e9a:	e8 a1 d9 ff ff       	call   c000f840 <malloc>
c0011e9f:	83 c4 0c             	add    esp,0xc
c0011ea2:	89 c7                	mov    edi,eax
c0011ea4:	68 00 00 01 00       	push   0x10000
c0011ea9:	6a 00                	push   0x0
c0011eab:	50                   	push   eax
c0011eac:	e8 c7 e8 fe ff       	call   c0000778 <memset>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	85 db                	test   ebx,ebx
c0011eb6:	79 03                	jns    c0011ebb <Virt::setupPageSwapping(int)+0x7b>
c0011eb8:	83 c3 0f             	add    ebx,0xf
c0011ebb:	c1 fb 04             	sar    ebx,0x4
c0011ebe:	4b                   	dec    ebx
c0011ebf:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec2:	74 4b                	je     c0011f0f <Virt::setupPageSwapping(int)+0xcf>
c0011ec4:	83 ec 0c             	sub    esp,0xc
c0011ec7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ec9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ecd:	52                   	push   edx
c0011ece:	57                   	push   edi
c0011ecf:	6a 00                	push   0x0
c0011ed1:	68 00 00 01 00       	push   0x10000
c0011ed6:	56                   	push   esi
c0011ed7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011eda:	83 c4 20             	add    esp,0x20
c0011edd:	85 c0                	test   eax,eax
c0011edf:	75 59                	jne    c0011f3a <Virt::setupPageSwapping(int)+0xfa>
c0011ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee5:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eea:	74 d2                	je     c0011ebe <Virt::setupPageSwapping(int)+0x7e>
c0011eec:	83 ec 08             	sub    esp,0x8
c0011eef:	4b                   	dec    ebx
c0011ef0:	50                   	push   eax
c0011ef1:	68 78 a7 02 c0       	push   0xc002a778
c0011ef6:	e8 d9 0f 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0011efb:	c7 04 24 81 a7 02 c0 	mov    DWORD PTR [esp],0xc002a781
c0011f02:	e8 6e 86 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	83 fb ff             	cmp    ebx,0xffffffff
c0011f0d:	75 b5                	jne    c0011ec4 <Virt::setupPageSwapping(int)+0x84>
c0011f0f:	83 ec 0c             	sub    esp,0xc
c0011f12:	56                   	push   esi
c0011f13:	e8 d6 15 00 00       	call   c00134ee <File::close()>
c0011f18:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f1b:	e8 40 d9 ff ff       	call   c000f860 <rfree>
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	85 f6                	test   esi,esi
c0011f25:	74 0c                	je     c0011f33 <Virt::setupPageSwapping(int)+0xf3>
c0011f27:	83 ec 0c             	sub    esp,0xc
c0011f2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f2c:	56                   	push   esi
c0011f2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f30:	83 c4 10             	add    esp,0x10
c0011f33:	83 c4 10             	add    esp,0x10
c0011f36:	5b                   	pop    ebx
c0011f37:	5e                   	pop    esi
c0011f38:	5f                   	pop    edi
c0011f39:	c3                   	ret    
c0011f3a:	83 ec 08             	sub    esp,0x8
c0011f3d:	50                   	push   eax
c0011f3e:	68 60 a7 02 c0       	push   0xc002a760
c0011f43:	e8 8c 0f 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0011f48:	83 c4 10             	add    esp,0x10
c0011f4b:	eb 94                	jmp    c0011ee1 <Virt::setupPageSwapping(int)+0xa1>
c0011f4d:	83 ec 08             	sub    esp,0x8
c0011f50:	50                   	push   eax
c0011f51:	68 3c a7 02 c0       	push   0xc002a73c
c0011f56:	e8 79 0f 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0011f5b:	c7 04 24 45 a7 02 c0 	mov    DWORD PTR [esp],0xc002a745
c0011f62:	e8 0e 86 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	e9 14 ff ff ff       	jmp    c0011e83 <Virt::setupPageSwapping(int)+0x43>
c0011f6f:	90                   	nop

c0011f70 <VAS::VAS()>:
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7f:	a3 68 e5 02 c0       	mov    ds:0xc002e568,eax
c0011f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f88:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f90:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f97:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f9e:	90                   	nop
c0011f9f:	c3                   	ret    

c0011fa0 <VAS::VAS(VAS*)>:
c0011fa0:	83 ec 0c             	sub    esp,0xc
c0011fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	68 44 a5 02 c0       	push   0xc002a544
c0011fb6:	e8 ba 85 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	90                   	nop
c0011fbf:	83 c4 0c             	add    esp,0xc
c0011fc2:	c3                   	ret    
c0011fc3:	90                   	nop

c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc8:	89 c2                	mov    edx,eax
c0011fca:	c1 e8 0a             	shr    eax,0xa
c0011fcd:	c1 ea 16             	shr    edx,0x16
c0011fd0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fd5:	19 c9                	sbb    ecx,ecx
c0011fd7:	c1 e2 0c             	shl    edx,0xc
c0011fda:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe0:	25 fc 0f 00 00       	and    eax,0xffc
c0011fe5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fec:	01 d0                	add    eax,edx
c0011fee:	c3                   	ret    
c0011fef:	90                   	nop

c0011ff0 <VAS::getPageTableEntry(unsigned long)>:
c0011ff0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff4:	89 ca                	mov    edx,ecx
c0011ff6:	c1 e9 0a             	shr    ecx,0xa
c0011ff9:	c1 ea 16             	shr    edx,0x16
c0011ffc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012002:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012008:	c1 e0 0c             	shl    eax,0xc
c001200b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001200e:	c3                   	ret    

c001200f <Virt::freeKernelVirtualPages(unsigned long)>:
c001200f:	57                   	push   edi
c0012010:	56                   	push   esi
c0012011:	be 01 00 00 00       	mov    esi,0x1
c0012016:	53                   	push   ebx
c0012017:	83 ec 10             	sub    esp,0x10
c001201a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001201e:	c1 eb 0c             	shr    ebx,0xc
c0012021:	eb 3f                	jmp    c0012062 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012023:	e8 12 fe ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012028:	83 ec 08             	sub    esp,0x8
c001202b:	57                   	push   edi
c001202c:	50                   	push   eax
c001202d:	e8 be ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	8b 00                	mov    eax,DWORD PTR [eax]
c0012037:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203b:	f6 c4 04             	test   ah,0x4
c001203e:	75 5f                	jne    c001209f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012040:	80 fa 04             	cmp    dl,0x4
c0012043:	74 78                	je     c00120bd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012045:	80 fa 02             	cmp    dl,0x2
c0012048:	0f 84 88 00 00 00    	je     c00120d6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001204e:	80 fa 03             	cmp    dl,0x3
c0012051:	0f 84 ad 00 00 00    	je     c0012104 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012057:	fe ca                	dec    dl
c0012059:	0f 84 92 00 00 00    	je     c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001205f:	43                   	inc    ebx
c0012060:	31 f6                	xor    esi,esi
c0012062:	53                   	push   ebx
c0012063:	e8 13 fb ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0012068:	5f                   	pop    edi
c0012069:	89 df                	mov    edi,ebx
c001206b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001206f:	c1 e7 0c             	shl    edi,0xc
c0012072:	84 c0                	test   al,al
c0012074:	75 ad                	jne    c0012023 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012076:	83 ec 0c             	sub    esp,0xc
c0012079:	68 87 a7 02 c0       	push   0xc002a787
c001207e:	e8 f2 84 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0012083:	e8 b2 fd ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012088:	5a                   	pop    edx
c0012089:	59                   	pop    ecx
c001208a:	57                   	push   edi
c001208b:	50                   	push   eax
c001208c:	e8 5f ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	8b 00                	mov    eax,DWORD PTR [eax]
c0012096:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209a:	f6 c4 04             	test   ah,0x4
c001209d:	74 c0                	je     c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001209f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	50                   	push   eax
c00120ac:	e8 a7 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120b8:	80 fa 04             	cmp    dl,0x4
c00120bb:	75 88                	jne    c0012045 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120bd:	89 f0                	mov    eax,esi
c00120bf:	84 c0                	test   al,al
c00120c1:	75 47                	jne    c001210a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c3:	c7 44 24 20 68 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a568
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	5b                   	pop    ebx
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	e9 9f 84 00 00       	jmp    c001a575 <Krnl::panic(char const*)>
c00120d6:	89 f0                	mov    eax,esi
c00120d8:	84 c0                	test   al,al
c00120da:	75 15                	jne    c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120dc:	83 ec 0c             	sub    esp,0xc
c00120df:	68 a3 a7 02 c0       	push   0xc002a7a3
c00120e4:	e8 8c 84 00 00       	call   c001a575 <Krnl::panic(char const*)>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	e9 6e ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	6a 00                	push   0x0
c00120f6:	53                   	push   ebx
c00120f7:	e8 4a fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120fc:	83 c4 10             	add    esp,0x10
c00120ff:	e9 5b ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012104:	89 f0                	mov    eax,esi
c0012106:	84 c0                	test   al,al
c0012108:	75 15                	jne    c001211f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001210a:	83 ec 08             	sub    esp,0x8
c001210d:	6a 00                	push   0x0
c001210f:	53                   	push   ebx
c0012110:	e8 31 fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	5b                   	pop    ebx
c001211c:	5e                   	pop    esi
c001211d:	5f                   	pop    edi
c001211e:	c3                   	ret    
c001211f:	c7 44 24 20 bf a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7bf
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	5b                   	pop    ebx
c001212b:	5e                   	pop    esi
c001212c:	5f                   	pop    edi
c001212d:	e9 43 84 00 00       	jmp    c001a575 <Krnl::panic(char const*)>

c0012132 <VAS::freeAllocatedPages(unsigned long)>:
c0012132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012136:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001213e:	74 09                	je     c0012149 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012140:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012144:	e9 c6 fe ff ff       	jmp    c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012149:	c7 44 24 04 8c a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a58c
c0012151:	e9 7e 0d 00 00       	jmp    c0012ed4 <Dbg::kprintf(char const*, ...)>

c0012156 <VAS::virtualToPhysical(unsigned long)>:
c0012156:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215e:	e8 8d fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012163:	5a                   	pop    edx
c0012164:	8b 00                	mov    eax,DWORD PTR [eax]
c0012166:	59                   	pop    ecx
c0012167:	25 00 f0 ff ff       	and    eax,0xfffff000
c001216c:	c3                   	ret    
c001216d:	90                   	nop

c001216e <VAS::reflagRange(unsigned long, int, int, int)>:
c001216e:	55                   	push   ebp
c001216f:	57                   	push   edi
c0012170:	56                   	push   esi
c0012171:	53                   	push   ebx
c0012172:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012176:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001217a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001217e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012182:	85 db                	test   ebx,ebx
c0012184:	7e 22                	jle    c00121a8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012186:	c1 e3 0c             	shl    ebx,0xc
c0012189:	01 f3                	add    ebx,esi
c001218b:	56                   	push   esi
c001218c:	81 c6 00 10 00 00    	add    esi,0x1000
c0012192:	55                   	push   ebp
c0012193:	e8 58 fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012198:	5a                   	pop    edx
c0012199:	59                   	pop    ecx
c001219a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001219c:	21 f9                	and    ecx,edi
c001219e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a2:	39 f3                	cmp    ebx,esi
c00121a4:	89 08                	mov    DWORD PTR [eax],ecx
c00121a6:	75 e3                	jne    c001218b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121a8:	5b                   	pop    ebx
c00121a9:	5e                   	pop    esi
c00121aa:	5f                   	pop    edi
c00121ab:	5d                   	pop    ebp
c00121ac:	c3                   	ret    
c00121ad:	90                   	nop

c00121ae <VAS::setToWriteCombining(unsigned long, int)>:
c00121ae:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00121b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c0:	75 01                	jne    c00121c3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c2:	c3                   	ret    
c00121c3:	68 80 00 00 00       	push   0x80
c00121c8:	6a ff                	push   0xffffffff
c00121ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d6:	e8 93 ff ff ff       	call   c001216e <VAS::reflagRange(unsigned long, int, int, int)>
c00121db:	83 c4 14             	add    esp,0x14
c00121de:	c3                   	ret    
c00121df:	90                   	nop

c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f3:	19 c0                	sbb    eax,eax
c00121f5:	83 ca 03             	or     edx,0x3
c00121f8:	83 e0 fc             	and    eax,0xfffffffc
c00121fb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012202:	0f 20 d8             	mov    eax,cr3
c0012205:	0f 22 d8             	mov    cr3,eax
c0012208:	c3                   	ret    
c0012209:	90                   	nop

c001220a <VAS::~VAS()>:
c001220a:	83 ec 2c             	sub    esp,0x2c
c001220d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012215:	e8 80 bb 00 00       	call   c001dd9a <lockScheduler()>
c001221a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001221f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012221:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012224:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222a:	83 ec 04             	sub    esp,0x4
c001222d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012231:	6a 01                	push   0x1
c0012233:	50                   	push   eax
c0012234:	e8 a7 ff ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012244:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001224c:	0f 8f d7 00 00 00    	jg     c0012329 <VAS::~VAS()+0x11f>
c0012252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012259:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001225d:	c1 e2 02             	shl    edx,0x2
c0012260:	01 d0                	add    eax,edx
c0012262:	8b 00                	mov    eax,DWORD PTR [eax]
c0012264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226c:	83 e0 01             	and    eax,0x1
c001226f:	0f 84 ab 00 00 00    	je     c0012320 <VAS::~VAS()+0x116>
c0012275:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001227d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012285:	7f 75                	jg     c00122fc <VAS::~VAS()+0xf2>
c0012287:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228b:	c1 e0 0a             	shl    eax,0xa
c001228e:	89 c2                	mov    edx,eax
c0012290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012294:	01 d0                	add    eax,edx
c0012296:	c1 e0 0c             	shl    eax,0xc
c0012299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001229d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122a7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122ad:	83 ec 04             	sub    esp,0x4
c00122b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b4:	6a 01                	push   0x1
c00122b6:	50                   	push   eax
c00122b7:	e8 08 fd ff ff       	call   c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d1:	25 01 04 00 00       	and    eax,0x401
c00122d6:	3d 01 04 00 00       	cmp    eax,0x401
c00122db:	75 19                	jne    c00122f6 <VAS::~VAS()+0xec>
c00122dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 69 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122f6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122fa:	eb 81                	jmp    c001227d <VAS::~VAS()+0x73>
c00122fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012300:	25 00 04 00 00       	and    eax,0x400
c0012305:	74 19                	je     c0012320 <VAS::~VAS()+0x116>
c0012307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	50                   	push   eax
c0012314:	e8 3f db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012320:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012324:	e9 1b ff ff ff       	jmp    c0012244 <VAS::~VAS()+0x3a>
c0012329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012330:	83 ec 0c             	sub    esp,0xc
c0012333:	50                   	push   eax
c0012334:	e8 d6 fc ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012340:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	50                   	push   eax
c0012347:	e8 0c db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012357:	c1 e0 02             	shl    eax,0x2
c001235a:	83 ec 08             	sub    esp,0x8
c001235d:	50                   	push   eax
c001235e:	68 b0 a5 02 c0       	push   0xc002a5b0
c0012363:	e8 6c 0b 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	e8 2c ba 00 00       	call   c001dd9c <unlockScheduler()>
c0012370:	90                   	nop
c0012371:	83 c4 2c             	add    esp,0x2c
c0012374:	c3                   	ret    
c0012375:	90                   	nop

c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012376:	55                   	push   ebp
c0012377:	57                   	push   edi
c0012378:	56                   	push   esi
c0012379:	53                   	push   ebx
c001237a:	83 ec 1c             	sub    esp,0x1c
c001237d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012381:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012385:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001238b:	77 08                	ja     c0012395 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001238d:	0f 20 d8             	mov    eax,cr3
c0012390:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012393:	75 47                	jne    c00123dc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012399:	09 d8                	or     eax,ebx
c001239b:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a0:	75 57                	jne    c00123f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a2:	89 de                	mov    esi,ebx
c00123a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a7:	c1 ee 16             	shr    esi,0x16
c00123aa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123b5:	74 54                	je     c001240b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123c5:	c1 e6 0c             	shl    esi,0xc
c00123c8:	c1 eb 0a             	shr    ebx,0xa
c00123cb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123d4:	83 c4 1c             	add    esp,0x1c
c00123d7:	5b                   	pop    ebx
c00123d8:	5e                   	pop    esi
c00123d9:	5f                   	pop    edi
c00123da:	5d                   	pop    ebp
c00123db:	c3                   	ret    
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	68 d0 a5 02 c0       	push   0xc002a5d0
c00123e4:	e8 eb 0a 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f0:	09 d8                	or     eax,ebx
c00123f2:	a9 ff 0f 00 00       	test   eax,0xfff
c00123f7:	74 a9                	je     c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	68 38 a6 02 c0       	push   0xc002a638
c0012401:	e8 6f 81 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	eb 97                	jmp    c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001240b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240f:	e8 ce da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012414:	89 c5                	mov    ebp,eax
c0012416:	e8 1f fa ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001241b:	83 ec 0c             	sub    esp,0xc
c001241e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012422:	6a 01                	push   0x1
c0012424:	e8 76 f7 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0012429:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012430:	6a 01                	push   0x1
c0012432:	50                   	push   eax
c0012433:	55                   	push   ebp
c0012434:	81 cd 07 04 00 00    	or     ebp,0x407
c001243a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243e:	51                   	push   ecx
c001243f:	e8 26 02 00 00       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012444:	83 c4 1c             	add    esp,0x1c
c0012447:	68 00 10 00 00       	push   0x1000
c001244c:	6a 00                	push   0x0
c001244e:	50                   	push   eax
c001244f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012453:	e8 20 e3 fe ff       	call   c0000778 <memset>
c0012458:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245f:	e8 ab fb ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012468:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012471:	e9 41 ff ff ff       	jmp    c00123b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012476 <VAS::allocatePages(int, int)>:
c0012476:	55                   	push   ebp
c0012477:	57                   	push   edi
c0012478:	56                   	push   esi
c0012479:	53                   	push   ebx
c001247a:	83 ec 1c             	sub    esp,0x1c
c001247d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012481:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0012486:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001248c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012492:	83 e0 01             	and    eax,0x1
c0012495:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012499:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001249d:	0f 85 cc 00 00 00    	jne    c001256f <VAS::allocatePages(int, int)+0xf9>
c00124a3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124aa:	85 c0                	test   eax,eax
c00124ac:	0f 84 a1 00 00 00    	je     c0012553 <VAS::allocatePages(int, int)+0xdd>
c00124b2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ba:	c1 e6 0c             	shl    esi,0xc
c00124bd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c1:	85 c0                	test   eax,eax
c00124c3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124c6:	7e 33                	jle    c00124fb <VAS::allocatePages(int, int)+0x85>
c00124c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d0:	81 cd 00 04 00 00    	or     ebp,0x400
c00124d6:	e8 07 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124db:	55                   	push   ebp
c00124dc:	53                   	push   ebx
c00124dd:	50                   	push   eax
c00124de:	57                   	push   edi
c00124df:	e8 92 fe ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	74 03                	je     c00124f1 <VAS::allocatePages(int, int)+0x7b>
c00124ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124f7:	39 de                	cmp    esi,ebx
c00124f9:	75 db                	jne    c00124d6 <VAS::allocatePages(int, int)+0x60>
c00124fb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012500:	75 12                	jne    c0012514 <VAS::allocatePages(int, int)+0x9e>
c0012502:	0f 20 d8             	mov    eax,cr3
c0012505:	0f 22 d8             	mov    cr3,eax
c0012508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001250c:	83 c4 1c             	add    esp,0x1c
c001250f:	5b                   	pop    ebx
c0012510:	5e                   	pop    esi
c0012511:	5f                   	pop    edi
c0012512:	5d                   	pop    ebp
c0012513:	c3                   	ret    
c0012514:	c1 ee 0a             	shr    esi,0xa
c0012517:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012521:	c1 eb 0a             	shr    ebx,0xa
c0012524:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001252a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012530:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012536:	39 c3                	cmp    ebx,eax
c0012538:	77 ce                	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001253a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012543:	39 d8                	cmp    eax,ebx
c0012545:	73 f3                	jae    c001253a <VAS::allocatePages(int, int)+0xc4>
c0012547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254b:	83 c4 1c             	add    esp,0x1c
c001254e:	5b                   	pop    ebx
c001254f:	5e                   	pop    esi
c0012550:	5f                   	pop    edi
c0012551:	5d                   	pop    ebp
c0012552:	c3                   	ret    
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	68 5c a6 02 c0       	push   0xc002a65c
c001255b:	e8 15 80 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0012560:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	e9 43 ff ff ff       	jmp    c00124b2 <VAS::allocatePages(int, int)+0x3c>
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012576:	e8 24 f6 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001257b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012587:	0f 87 9b 00 00 00    	ja     c0012628 <VAS::allocatePages(int, int)+0x1b2>
c001258d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012591:	85 d2                	test   edx,edx
c0012593:	7e 3c                	jle    c00125d1 <VAS::allocatePages(int, int)+0x15b>
c0012595:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012599:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001259d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a1:	c1 e5 0c             	shl    ebp,0xc
c00125a4:	81 ce 00 04 00 00    	or     esi,0x400
c00125aa:	01 dd                	add    ebp,ebx
c00125ac:	e8 31 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125b1:	56                   	push   esi
c00125b2:	53                   	push   ebx
c00125b3:	50                   	push   eax
c00125b4:	57                   	push   edi
c00125b5:	e8 bc fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	74 03                	je     c00125c7 <VAS::allocatePages(int, int)+0x151>
c00125c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125cd:	39 dd                	cmp    ebp,ebx
c00125cf:	75 db                	jne    c00125ac <VAS::allocatePages(int, int)+0x136>
c00125d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125d6:	0f 84 26 ff ff ff    	je     c0012502 <VAS::allocatePages(int, int)+0x8c>
c00125dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125e4:	89 d3                	mov    ebx,edx
c00125e6:	c1 e0 0c             	shl    eax,0xc
c00125e9:	c1 eb 0a             	shr    ebx,0xa
c00125ec:	01 d0                	add    eax,edx
c00125ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f4:	c1 e8 0a             	shr    eax,0xa
c00125f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012602:	2d 00 00 40 00       	sub    eax,0x400000
c0012607:	39 c3                	cmp    ebx,eax
c0012609:	0f 87 f9 fe ff ff    	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001260f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012612:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012618:	39 d8                	cmp    eax,ebx
c001261a:	73 f3                	jae    c001260f <VAS::allocatePages(int, int)+0x199>
c001261c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012620:	83 c4 1c             	add    esp,0x1c
c0012623:	5b                   	pop    ebx
c0012624:	5e                   	pop    esi
c0012625:	5f                   	pop    edi
c0012626:	5d                   	pop    ebp
c0012627:	c3                   	ret    
c0012628:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001262d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012633:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001263a:	0f 84 4d ff ff ff    	je     c001258d <VAS::allocatePages(int, int)+0x117>
c0012640:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012648:	e9 40 ff ff ff       	jmp    c001258d <VAS::allocatePages(int, int)+0x117>
c001264d:	90                   	nop

c001264e <VAS::setCPUSpecific(unsigned long)>:
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	6a 05                	push   0x5
c0012653:	68 00 00 40 c2       	push   0xc2400000
c0012658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012660:	e8 11 fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012665:	83 c4 1c             	add    esp,0x1c
c0012668:	c3                   	ret    
c0012669:	90                   	nop

c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001266a:	55                   	push   ebp
c001266b:	57                   	push   edi
c001266c:	56                   	push   esi
c001266d:	53                   	push   ebx
c001266e:	83 ec 1c             	sub    esp,0x1c
c0012671:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0012676:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001267a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012680:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012684:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001268a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001268e:	83 e0 01             	and    eax,0x1
c0012691:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012699:	85 c0                	test   eax,eax
c001269b:	7e 39                	jle    c00126d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001269d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a1:	89 f3                	mov    ebx,esi
c00126a3:	c1 e0 0c             	shl    eax,0xc
c00126a6:	01 f0                	add    eax,esi
c00126a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ac:	55                   	push   ebp
c00126ad:	53                   	push   ebx
c00126ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b2:	29 f0                	sub    eax,esi
c00126b4:	01 d8                	add    eax,ebx
c00126b6:	50                   	push   eax
c00126b7:	57                   	push   edi
c00126b8:	e8 b9 fc ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c5:	74 03                	je     c00126ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126c7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126d4:	75 d6                	jne    c00126ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126db:	75 10                	jne    c00126ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126dd:	0f 20 d8             	mov    eax,cr3
c00126e0:	0f 22 d8             	mov    cr3,eax
c00126e3:	83 c4 1c             	add    esp,0x1c
c00126e6:	89 f0                	mov    eax,esi
c00126e8:	5b                   	pop    ebx
c00126e9:	5e                   	pop    esi
c00126ea:	5f                   	pop    edi
c00126eb:	5d                   	pop    ebp
c00126ec:	c3                   	ret    
c00126ed:	89 f3                	mov    ebx,esi
c00126ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f3:	c1 eb 0a             	shr    ebx,0xa
c00126f6:	c1 e0 0c             	shl    eax,0xc
c00126f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126ff:	01 f0                	add    eax,esi
c0012701:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012707:	c1 e8 0a             	shr    eax,0xa
c001270a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001270f:	2d 00 00 40 00       	sub    eax,0x400000
c0012714:	39 c3                	cmp    ebx,eax
c0012716:	77 cb                	ja     c00126e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012718:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001271b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012721:	39 d8                	cmp    eax,ebx
c0012723:	73 f3                	jae    c0012718 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012725:	83 c4 1c             	add    esp,0x1c
c0012728:	89 f0                	mov    eax,esi
c001272a:	5b                   	pop    ebx
c001272b:	5e                   	pop    esi
c001272c:	5f                   	pop    edi
c001272d:	5d                   	pop    ebp
c001272e:	c3                   	ret    
c001272f:	90                   	nop

c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012730:	55                   	push   ebp
c0012731:	57                   	push   edi
c0012732:	56                   	push   esi
c0012733:	53                   	push   ebx
c0012734:	83 ec 1c             	sub    esp,0x1c
c0012737:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001273b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001273f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012743:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012747:	a9 ff 0f 00 00       	test   eax,0xfff
c001274c:	75 4a                	jne    c0012798 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001274e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012752:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012755:	c1 eb 16             	shr    ebx,0x16
c0012758:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001275f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012763:	74 4d                	je     c00127b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012765:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012769:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001276d:	c1 e8 0a             	shr    eax,0xa
c0012770:	80 fa 01             	cmp    dl,0x1
c0012773:	19 d2                	sbb    edx,edx
c0012775:	c1 e3 0c             	shl    ebx,0xc
c0012778:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001277c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012782:	25 fc 0f 00 00       	and    eax,0xffc
c0012787:	01 d8                	add    eax,ebx
c0012789:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012790:	83 c4 1c             	add    esp,0x1c
c0012793:	5b                   	pop    ebx
c0012794:	5e                   	pop    esi
c0012795:	5f                   	pop    edi
c0012796:	5d                   	pop    ebp
c0012797:	c3                   	ret    
c0012798:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	68 88 a6 02 c0       	push   0xc002a688
c00127a4:	e8 cc 7d 00 00       	call   c001a575 <Krnl::panic(char const*)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b0:	eb 9c                	jmp    c001274e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127b6:	e8 27 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127bb:	89 c5                	mov    ebp,eax
c00127bd:	e8 78 f6 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c00127c2:	83 ec 0c             	sub    esp,0xc
c00127c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127c9:	6a 01                	push   0x1
c00127cb:	e8 cf f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00127d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127d7:	6a 01                	push   0x1
c00127d9:	50                   	push   eax
c00127da:	55                   	push   ebp
c00127db:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127e5:	51                   	push   ecx
c00127e6:	e8 7f fe ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127eb:	83 c4 1c             	add    esp,0x1c
c00127ee:	68 00 10 00 00       	push   0x1000
c00127f3:	6a 00                	push   0x0
c00127f5:	50                   	push   eax
c00127f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127fa:	e8 79 df fe ff       	call   c0000778 <memset>
c00127ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012803:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012806:	e8 04 f8 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001280b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001280e:	83 c4 10             	add    esp,0x10
c0012811:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012814:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012818:	e9 48 ff ff ff       	jmp    c0012765 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001281d:	90                   	nop

c001281e <VAS::VAS(bool)>:
c001281e:	53                   	push   ebx
c001281f:	83 ec 28             	sub    esp,0x28
c0012822:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012826:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001282a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012839:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012840:	e8 9d d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012845:	89 c2                	mov    edx,eax
c0012847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284e:	e8 e7 f5 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012853:	89 c3                	mov    ebx,eax
c0012855:	83 ec 0c             	sub    esp,0xc
c0012858:	6a 01                	push   0x1
c001285a:	e8 40 f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	89 c2                	mov    edx,eax
c0012864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012868:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286b:	83 ec 0c             	sub    esp,0xc
c001286e:	6a 03                	push   0x3
c0012870:	6a 01                	push   0x1
c0012872:	52                   	push   edx
c0012873:	50                   	push   eax
c0012874:	53                   	push   ebx
c0012875:	e8 f0 fd ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287a:	83 c4 20             	add    esp,0x20
c001287d:	89 c2                	mov    edx,eax
c001287f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012883:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012886:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012896:	7f 1c                	jg     c00128b4 <VAS::VAS(bool)+0x96>
c0012898:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a3:	c1 e2 02             	shl    edx,0x2
c00128a6:	01 d0                	add    eax,edx
c00128a8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b2:	eb da                	jmp    c001288e <VAS::VAS(bool)+0x70>
c00128b4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128bc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c4:	7f 7a                	jg     c0012940 <VAS::VAS(bool)+0x122>
c00128c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ca:	2d 00 02 00 00       	sub    eax,0x200
c00128cf:	c1 e0 0c             	shl    eax,0xc
c00128d2:	83 c8 03             	or     eax,0x3
c00128d5:	89 c2                	mov    edx,eax
c00128d7:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00128dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e8:	83 e0 10             	and    eax,0x10
c00128eb:	84 c0                	test   al,al
c00128ed:	74 07                	je     c00128f6 <VAS::VAS(bool)+0xd8>
c00128ef:	b8 00 01 00 00       	mov    eax,0x100
c00128f4:	eb 05                	jmp    c00128fb <VAS::VAS(bool)+0xdd>
c00128f6:	b8 00 00 00 00       	mov    eax,0x0
c00128fb:	09 d0                	or     eax,edx
c00128fd:	89 c1                	mov    ecx,eax
c00128ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012903:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012906:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290a:	c1 e2 02             	shl    edx,0x2
c001290d:	01 d0                	add    eax,edx
c001290f:	89 ca                	mov    edx,ecx
c0012911:	89 10                	mov    DWORD PTR [eax],edx
c0012913:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012917:	2d 40 03 00 00       	sub    eax,0x340
c001291c:	83 f8 7f             	cmp    eax,0x7f
c001291f:	77 16                	ja     c0012937 <VAS::VAS(bool)+0x119>
c0012921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012925:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001292c:	c1 e2 02             	shl    edx,0x2
c001292f:	01 d0                	add    eax,edx
c0012931:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012937:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293b:	e9 7c ff ff ff       	jmp    c00128bc <VAS::VAS(bool)+0x9e>
c0012940:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0012945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012951:	83 e0 10             	and    eax,0x10
c0012954:	84 c0                	test   al,al
c0012956:	74 07                	je     c001295f <VAS::VAS(bool)+0x141>
c0012958:	b8 03 41 00 00       	mov    eax,0x4103
c001295d:	eb 05                	jmp    c0012964 <VAS::VAS(bool)+0x146>
c001295f:	b8 03 40 00 00       	mov    eax,0x4003
c0012964:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012968:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012971:	89 02                	mov    DWORD PTR [edx],eax
c0012973:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0012978:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012984:	83 ec 08             	sub    esp,0x8
c0012987:	50                   	push   eax
c0012988:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298c:	e8 bd fc ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012998:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299b:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00129a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ac:	83 e0 10             	and    eax,0x10
c00129af:	84 c0                	test   al,al
c00129b1:	74 07                	je     c00129ba <VAS::VAS(bool)+0x19c>
c00129b3:	b8 00 01 00 00       	mov    eax,0x100
c00129b8:	eb 05                	jmp    c00129bf <VAS::VAS(bool)+0x1a1>
c00129ba:	b8 00 00 00 00       	mov    eax,0x0
c00129bf:	09 c2                	or     edx,eax
c00129c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c8:	05 fc 0f 00 00       	add    eax,0xffc
c00129cd:	83 ca 03             	or     edx,0x3
c00129d0:	89 10                	mov    DWORD PTR [eax],edx
c00129d2:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00129d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	50                   	push   eax
c00129e1:	e8 00 1c 00 00       	call   c00145e6 <Device::getName()>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	83 ec 08             	sub    esp,0x8
c00129ec:	68 d9 a7 02 c0       	push   0xc002a7d9
c00129f1:	50                   	push   eax
c00129f2:	e8 c9 de fe ff       	call   c00008c0 <strcmp>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	85 c0                	test   eax,eax
c00129fc:	0f 94 c0             	sete   al
c00129ff:	84 c0                	test   al,al
c0012a01:	74 70                	je     c0012a73 <VAS::VAS(bool)+0x255>
c0012a03:	e8 75 b3 00 00       	call   c001dd7d <disableIRQs()>
c0012a08:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0012a0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a13:	05 7c 09 00 00       	add    eax,0x97c
c0012a18:	83 ec 0c             	sub    esp,0xc
c0012a1b:	50                   	push   eax
c0012a1c:	e8 9b c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a29:	89 c3                	mov    ebx,eax
c0012a2b:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0012a30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a36:	05 7c 09 00 00       	add    eax,0x97c
c0012a3b:	83 ec 0c             	sub    esp,0xc
c0012a3e:	50                   	push   eax
c0012a3f:	e8 78 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	83 ec 08             	sub    esp,0x8
c0012a4a:	50                   	push   eax
c0012a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a4f:	e8 9c f5 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a5e:	6a 11                	push   0x11
c0012a60:	53                   	push   ebx
c0012a61:	50                   	push   eax
c0012a62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a66:	e8 0b f9 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	e8 18 b3 00 00       	call   c001dd8b <enableIRQs()>
c0012a73:	90                   	nop
c0012a74:	83 c4 28             	add    esp,0x28
c0012a77:	5b                   	pop    ebx
c0012a78:	c3                   	ret    
c0012a79:	90                   	nop

c0012a7a <VAS::evict(unsigned long)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 1c             	sub    esp,0x1c
c0012a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a85:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8d:	e8 08 b3 00 00       	call   c001dd9a <lockScheduler()>
c0012a92:	83 ec 08             	sub    esp,0x8
c0012a95:	55                   	push   ebp
c0012a96:	68 ac a6 02 c0       	push   0xc002a6ac
c0012a9b:	e8 34 04 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012aa0:	e8 3b f2 ff ff       	call   c0011ce0 <Virt::allocateSwapfilePage()>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	89 c7                	mov    edi,eax
c0012aaa:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c0012aaf:	85 c0                	test   eax,eax
c0012ab1:	7e 3d                	jle    c0012af0 <VAS::evict(unsigned long)+0x76>
c0012ab3:	89 ee                	mov    esi,ebp
c0012ab5:	31 db                	xor    ebx,ebx
c0012ab7:	83 ec 0c             	sub    esp,0xc
c0012aba:	57                   	push   edi
c0012abb:	e8 0e f2 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012ac0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ac3:	01 d8                	add    eax,ebx
c0012ac5:	6a 01                	push   0x1
c0012ac7:	31 d2                	xor    edx,edx
c0012ac9:	43                   	inc    ebx
c0012aca:	52                   	push   edx
c0012acb:	81 c6 00 02 00 00    	add    esi,0x200
c0012ad1:	50                   	push   eax
c0012ad2:	0f be 05 98 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d398
c0012ad9:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c0012ae0:	e8 6b 3c 00 00       	call   c0016750 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ae5:	83 c4 20             	add    esp,0x20
c0012ae8:	39 1d 8c d3 02 c0    	cmp    DWORD PTR ds:0xc002d38c,ebx
c0012aee:	7f c7                	jg     c0012ab7 <VAS::evict(unsigned long)+0x3d>
c0012af0:	83 ec 08             	sub    esp,0x8
c0012af3:	c1 e7 0b             	shl    edi,0xb
c0012af6:	55                   	push   ebp
c0012af7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012afb:	e8 f0 f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012b00:	89 c3                	mov    ebx,eax
c0012b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b04:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b09:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b0c:	e8 47 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b11:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b13:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b19:	09 d7                	or     edi,edx
c0012b1b:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b1d:	83 c4 2c             	add    esp,0x2c
c0012b20:	5b                   	pop    ebx
c0012b21:	5e                   	pop    esi
c0012b22:	5f                   	pop    edi
c0012b23:	5d                   	pop    ebp
c0012b24:	e9 73 b2 00 00       	jmp    c001dd9c <unlockScheduler()>
c0012b29:	90                   	nop

c0012b2a <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b2a:	57                   	push   edi
c0012b2b:	56                   	push   esi
c0012b2c:	53                   	push   ebx
c0012b2d:	e8 68 b2 00 00       	call   c001dd9a <lockScheduler()>
c0012b32:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b36:	83 ec 08             	sub    esp,0x8
c0012b39:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012b3f:	53                   	push   ebx
c0012b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b44:	e8 a7 f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012b49:	83 c4 10             	add    esp,0x10
c0012b4c:	85 c0                	test   eax,eax
c0012b4e:	74 0a                	je     c0012b5a <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c0012b50:	89 c6                	mov    esi,eax
c0012b52:	f7 00 00 04 00 00    	test   DWORD PTR [eax],0x400
c0012b58:	75 0b                	jne    c0012b65 <VAS::tryLoadBackOffDisk(unsigned long)+0x3b>
c0012b5a:	e8 3d b2 00 00       	call   c001dd9c <unlockScheduler()>
c0012b5f:	5b                   	pop    ebx
c0012b60:	31 c0                	xor    eax,eax
c0012b62:	5e                   	pop    esi
c0012b63:	5f                   	pop    edi
c0012b64:	c3                   	ret    
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	53                   	push   ebx
c0012b69:	68 e7 a7 02 c0       	push   0xc002a7e7
c0012b6e:	e8 61 03 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012b73:	c6 05 20 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e420,0x1
c0012b7a:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012b7c:	e8 61 d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012b81:	c1 ef 0b             	shr    edi,0xb
c0012b84:	c6 05 20 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e420,0x0
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b90:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b96:	09 c2                	or     edx,eax
c0012b98:	81 ca 01 08 00 00    	or     edx,0x801
c0012b9e:	89 16                	mov    DWORD PTR [esi],edx
c0012ba0:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c0012ba5:	85 c0                	test   eax,eax
c0012ba7:	7e 3b                	jle    c0012be4 <VAS::tryLoadBackOffDisk(unsigned long)+0xba>
c0012ba9:	31 f6                	xor    esi,esi
c0012bab:	83 ec 0c             	sub    esp,0xc
c0012bae:	57                   	push   edi
c0012baf:	e8 1a f1 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012bb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012bb7:	01 f0                	add    eax,esi
c0012bb9:	6a 01                	push   0x1
c0012bbb:	31 d2                	xor    edx,edx
c0012bbd:	46                   	inc    esi
c0012bbe:	52                   	push   edx
c0012bbf:	81 c3 00 02 00 00    	add    ebx,0x200
c0012bc5:	50                   	push   eax
c0012bc6:	0f be 05 98 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d398
c0012bcd:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c0012bd4:	e8 0b 3b 00 00       	call   c00166e4 <LogicalDisk::read(unsigned long long, int, void*)>
c0012bd9:	83 c4 20             	add    esp,0x20
c0012bdc:	39 35 8c d3 02 c0    	cmp    DWORD PTR ds:0xc002d38c,esi
c0012be2:	7f c7                	jg     c0012bab <VAS::tryLoadBackOffDisk(unsigned long)+0x81>
c0012be4:	83 ec 0c             	sub    esp,0xc
c0012be7:	57                   	push   edi
c0012be8:	e8 c3 f0 ff ff       	call   c0011cb0 <Virt::freeSwapfilePage(unsigned long)>
c0012bed:	e8 aa b1 00 00       	call   c001dd9c <unlockScheduler()>
c0012bf2:	83 c4 10             	add    esp,0x10
c0012bf5:	b0 01                	mov    al,0x1
c0012bf7:	5b                   	pop    ebx
c0012bf8:	5e                   	pop    esi
c0012bf9:	5f                   	pop    edi
c0012bfa:	c3                   	ret    
c0012bfb:	90                   	nop

c0012bfc <VAS::scanForEviction(int, int)>:
c0012bfc:	55                   	push   ebp
c0012bfd:	57                   	push   edi
c0012bfe:	56                   	push   esi
c0012bff:	53                   	push   ebx
c0012c00:	83 ec 1c             	sub    esp,0x1c
c0012c03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012c07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c0b:	85 db                	test   ebx,ebx
c0012c0d:	75 08                	jne    c0012c17 <VAS::scanForEviction(int, int)+0x1b>
c0012c0f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012c17:	bb 00 00 40 00       	mov    ebx,0x400000
c0012c1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c24:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c2c:	31 ff                	xor    edi,edi
c0012c2e:	eb 13                	jmp    c0012c43 <VAS::scanForEviction(int, int)+0x47>
c0012c30:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012c35:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c3b:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012c41:	74 67                	je     c0012caa <VAS::scanForEviction(int, int)+0xae>
c0012c43:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012c46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012c4a:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012c4e:	74 e0                	je     c0012c30 <VAS::scanForEviction(int, int)+0x34>
c0012c50:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012c56:	eb 0a                	jmp    c0012c62 <VAS::scanForEviction(int, int)+0x66>
c0012c58:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012c5e:	39 eb                	cmp    ebx,ebp
c0012c60:	74 ce                	je     c0012c30 <VAS::scanForEviction(int, int)+0x34>
c0012c62:	55                   	push   ebp
c0012c63:	56                   	push   esi
c0012c64:	e8 87 f3 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012c69:	5a                   	pop    edx
c0012c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c6c:	59                   	pop    ecx
c0012c6d:	89 c2                	mov    edx,eax
c0012c6f:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c75:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c7b:	75 db                	jne    c0012c58 <VAS::scanForEviction(int, int)+0x5c>
c0012c7d:	a8 01                	test   al,0x1
c0012c7f:	74 d7                	je     c0012c58 <VAS::scanForEviction(int, int)+0x5c>
c0012c81:	89 f8                	mov    eax,edi
c0012c83:	99                   	cdq    
c0012c84:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012c88:	85 d2                	test   edx,edx
c0012c8a:	74 03                	je     c0012c8f <VAS::scanForEviction(int, int)+0x93>
c0012c8c:	47                   	inc    edi
c0012c8d:	eb c9                	jmp    c0012c58 <VAS::scanForEviction(int, int)+0x5c>
c0012c8f:	83 ec 08             	sub    esp,0x8
c0012c92:	55                   	push   ebp
c0012c93:	56                   	push   esi
c0012c94:	e8 e1 fd ff ff       	call   c0012a7a <VAS::evict(unsigned long)>
c0012c99:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012c9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012ca8:	75 e2                	jne    c0012c8c <VAS::scanForEviction(int, int)+0x90>
c0012caa:	83 c4 1c             	add    esp,0x1c
c0012cad:	5b                   	pop    ebx
c0012cae:	5e                   	pop    esi
c0012caf:	5f                   	pop    edi
c0012cb0:	5d                   	pop    ebp
c0012cb1:	c3                   	ret    

c0012cb2 <mapVASFirstTime>:
c0012cb2:	55                   	push   ebp
c0012cb3:	57                   	push   edi
c0012cb4:	56                   	push   esi
c0012cb5:	53                   	push   ebx
c0012cb6:	83 ec 0c             	sub    esp,0xc
c0012cb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cbe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cc1:	4a                   	dec    edx
c0012cc2:	0f 84 8e 00 00 00    	je     c0012d56 <mapVASFirstTime+0xa4>
c0012cc8:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012ccb:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012cce:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012cd3:	c1 e5 15             	shl    ebp,0x15
c0012cd6:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012cdb:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012ce1:	29 eb                	sub    ebx,ebp
c0012ce3:	29 ee                	sub    esi,ebp
c0012ce5:	e8 f8 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012cea:	83 ec 0c             	sub    esp,0xc
c0012ced:	68 03 04 00 00       	push   0x403
c0012cf2:	6a 01                	push   0x1
c0012cf4:	53                   	push   ebx
c0012cf5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cfb:	50                   	push   eax
c0012cfc:	57                   	push   edi
c0012cfd:	e8 68 f9 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d02:	83 c4 20             	add    esp,0x20
c0012d05:	39 f3                	cmp    ebx,esi
c0012d07:	75 dc                	jne    c0012ce5 <mapVASFirstTime+0x33>
c0012d09:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d0e:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d13:	29 ee                	sub    esi,ebp
c0012d15:	29 e8                	sub    eax,ebp
c0012d17:	89 c5                	mov    ebp,eax
c0012d19:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d1d:	19 db                	sbb    ebx,ebx
c0012d1f:	e8 be d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d24:	83 e3 04             	and    ebx,0x4
c0012d27:	83 ec 0c             	sub    esp,0xc
c0012d2a:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d30:	53                   	push   ebx
c0012d31:	6a 01                	push   0x1
c0012d33:	56                   	push   esi
c0012d34:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d3a:	50                   	push   eax
c0012d3b:	57                   	push   edi
c0012d3c:	e8 29 f9 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d41:	83 c4 20             	add    esp,0x20
c0012d44:	39 f5                	cmp    ebp,esi
c0012d46:	75 d1                	jne    c0012d19 <mapVASFirstTime+0x67>
c0012d48:	0f 20 d8             	mov    eax,cr3
c0012d4b:	0f 22 d8             	mov    cr3,eax
c0012d4e:	83 c4 0c             	add    esp,0xc
c0012d51:	5b                   	pop    ebx
c0012d52:	5e                   	pop    esi
c0012d53:	5f                   	pop    edi
c0012d54:	5d                   	pop    ebp
c0012d55:	c3                   	ret    
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	68 fd a7 02 c0       	push   0xc002a7fd
c0012d5e:	e8 71 01 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012d63:	83 c4 10             	add    esp,0x10
c0012d66:	83 c4 0c             	add    esp,0xc
c0012d69:	5b                   	pop    ebx
c0012d6a:	5e                   	pop    esi
c0012d6b:	5f                   	pop    edi
c0012d6c:	5d                   	pop    ebp
c0012d6d:	c3                   	ret    

c0012d6e <__cxa_atexit>:
c0012d6e:	31 c0                	xor    eax,eax
c0012d70:	c3                   	ret    

c0012d71 <__cxa_finalize>:
c0012d71:	c3                   	ret    

c0012d72 <__stack_chk_fail>:
c0012d72:	55                   	push   ebp
c0012d73:	89 e5                	mov    ebp,esp
c0012d75:	83 ec 14             	sub    esp,0x14
c0012d78:	68 16 a8 02 c0       	push   0xc002a816
c0012d7d:	e8 52 01 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012d82:	58                   	pop    eax
c0012d83:	5a                   	pop    edx
c0012d84:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d87:	68 66 a8 02 c0       	push   0xc002a866
c0012d8c:	e8 43 01 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012d91:	59                   	pop    ecx
c0012d92:	58                   	pop    eax
c0012d93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d96:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d99:	68 66 a8 02 c0       	push   0xc002a866
c0012d9e:	e8 31 01 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012da3:	5a                   	pop    edx
c0012da4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012da7:	59                   	pop    ecx
c0012da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012daa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dad:	68 66 a8 02 c0       	push   0xc002a866
c0012db2:	e8 1d 01 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012db7:	5a                   	pop    edx
c0012db8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dbb:	59                   	pop    ecx
c0012dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dc0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dc3:	68 66 a8 02 c0       	push   0xc002a866
c0012dc8:	e8 07 01 00 00       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0012dcd:	c7 04 24 6e a8 02 c0 	mov    DWORD PTR [esp],0xc002a86e
c0012dd4:	e8 9c 77 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0012dd9:	83 c4 10             	add    esp,0x10
c0012ddc:	c9                   	leave  
c0012ddd:	c3                   	ret    

c0012dde <__cxa_pure_virtual>:
c0012dde:	83 ec 18             	sub    esp,0x18
c0012de1:	68 86 a8 02 c0       	push   0xc002a886
c0012de6:	e8 8a 77 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0012deb:	83 c4 1c             	add    esp,0x1c
c0012dee:	c3                   	ret    

c0012def <operator new[](unsigned long)>:
c0012def:	e9 4c ca ff ff       	jmp    c000f840 <malloc>

c0012df4 <operator delete(void*, unsigned long)>:
c0012df4:	e9 67 ca ff ff       	jmp    c000f860 <rfree>

c0012df9 <operator delete[](void*)>:
c0012df9:	e9 62 ca ff ff       	jmp    c000f860 <rfree>

c0012dfe <operator delete[](void*, unsigned long)>:
c0012dfe:	e9 5d ca ff ff       	jmp    c000f860 <rfree>

c0012e03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e03:	57                   	push   edi
c0012e04:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e09:	56                   	push   esi
c0012e0a:	be 9c a8 02 c0       	mov    esi,0xc002a89c
c0012e0f:	53                   	push   ebx
c0012e10:	83 ec 40             	sub    esp,0x40
c0012e13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e17:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e1b:	fc                   	cld    
c0012e1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e1e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e22:	83 f9 3e             	cmp    ecx,0x3e
c0012e25:	7e 05                	jle    c0012e2c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e27:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e2c:	89 df                	mov    edi,ebx
c0012e2e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e32:	eb 02                	jmp    c0012e36 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e34:	89 c7                	mov    edi,eax
c0012e36:	31 d2                	xor    edx,edx
c0012e38:	46                   	inc    esi
c0012e39:	89 f8                	mov    eax,edi
c0012e3b:	f7 f1                	div    ecx
c0012e3d:	39 cf                	cmp    edi,ecx
c0012e3f:	73 f3                	jae    c0012e34 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e41:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e44:	eb 02                	jmp    c0012e48 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e46:	89 c3                	mov    ebx,eax
c0012e48:	31 d2                	xor    edx,edx
c0012e4a:	4e                   	dec    esi
c0012e4b:	89 d8                	mov    eax,ebx
c0012e4d:	f7 f1                	div    ecx
c0012e4f:	39 cb                	cmp    ebx,ecx
c0012e51:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e55:	88 16                	mov    BYTE PTR [esi],dl
c0012e57:	73 ed                	jae    c0012e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e5d:	83 c4 40             	add    esp,0x40
c0012e60:	5b                   	pop    ebx
c0012e61:	5e                   	pop    esi
c0012e62:	5f                   	pop    edi
c0012e63:	c3                   	ret    

c0012e64 <Dbg::logc(char)>:
c0012e64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e68:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e6d:	ec                   	in     al,dx
c0012e6e:	a8 20                	test   al,0x20
c0012e70:	74 fb                	je     c0012e6d <Dbg::logc(char)+0x9>
c0012e72:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e77:	88 c8                	mov    al,cl
c0012e79:	ee                   	out    dx,al
c0012e7a:	c3                   	ret    

c0012e7b <Dbg::logs(char*)>:
c0012e7b:	53                   	push   ebx
c0012e7c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e80:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e83:	84 c0                	test   al,al
c0012e85:	74 0f                	je     c0012e96 <Dbg::logs(char*)+0x1b>
c0012e87:	50                   	push   eax
c0012e88:	43                   	inc    ebx
c0012e89:	e8 d6 ff ff ff       	call   c0012e64 <Dbg::logc(char)>
c0012e8e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e91:	5a                   	pop    edx
c0012e92:	84 c0                	test   al,al
c0012e94:	75 f1                	jne    c0012e87 <Dbg::logs(char*)+0xc>
c0012e96:	5b                   	pop    ebx
c0012e97:	c3                   	ret    

c0012e98 <Dbg::logWriteInt(unsigned int)>:
c0012e98:	83 ec 10             	sub    esp,0x10
c0012e9b:	6a 0a                	push   0xa
c0012e9d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ea1:	50                   	push   eax
c0012ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ea6:	e8 58 ff ff ff       	call   c0012e03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012eab:	50                   	push   eax
c0012eac:	e8 ca ff ff ff       	call   c0012e7b <Dbg::logs(char*)>
c0012eb1:	83 c4 20             	add    esp,0x20
c0012eb4:	c3                   	ret    

c0012eb5 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012eb5:	83 ec 10             	sub    esp,0x10
c0012eb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ebc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ec0:	50                   	push   eax
c0012ec1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec5:	e8 39 ff ff ff       	call   c0012e03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012eca:	50                   	push   eax
c0012ecb:	e8 ab ff ff ff       	call   c0012e7b <Dbg::logs(char*)>
c0012ed0:	83 c4 20             	add    esp,0x20
c0012ed3:	c3                   	ret    

c0012ed4 <Dbg::kprintf(char const*, ...)>:
c0012ed4:	55                   	push   ebp
c0012ed5:	57                   	push   edi
c0012ed6:	56                   	push   esi
c0012ed7:	53                   	push   ebx
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012edf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ee3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ee7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012eea:	84 c0                	test   al,al
c0012eec:	74 4a                	je     c0012f38 <Dbg::kprintf(char const*, ...)+0x64>
c0012eee:	31 db                	xor    ebx,ebx
c0012ef0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ef3:	3c 25                	cmp    al,0x25
c0012ef5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ef8:	0f 85 e4 00 00 00    	jne    c0012fe2 <Dbg::kprintf(char const*, ...)+0x10e>
c0012efe:	83 c3 02             	add    ebx,0x2
c0012f01:	8a 07                	mov    al,BYTE PTR [edi]
c0012f03:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f06:	83 e8 25             	sub    eax,0x25
c0012f09:	3c 53                	cmp    al,0x53
c0012f0b:	0f 87 ba 00 00 00    	ja     c0012fcb <Dbg::kprintf(char const*, ...)+0xf7>
c0012f11:	0f b6 c0             	movzx  eax,al
c0012f14:	ff 24 85 dc a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5724]
c0012f1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f1f:	89 c8                	mov    eax,ecx
c0012f21:	83 c1 04             	add    ecx,0x4
c0012f24:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f28:	ff 30                	push   DWORD PTR [eax]
c0012f2a:	e8 4c ff ff ff       	call   c0012e7b <Dbg::logs(char*)>
c0012f2f:	58                   	pop    eax
c0012f30:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f34:	84 c0                	test   al,al
c0012f36:	75 b8                	jne    c0012ef0 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f38:	83 c4 0c             	add    esp,0xc
c0012f3b:	5b                   	pop    ebx
c0012f3c:	5e                   	pop    esi
c0012f3d:	5f                   	pop    edi
c0012f3e:	5d                   	pop    ebp
c0012f3f:	c3                   	ret    
c0012f40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f44:	89 d0                	mov    eax,edx
c0012f46:	83 c2 04             	add    edx,0x4
c0012f49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f4d:	ff 30                	push   DWORD PTR [eax]
c0012f4f:	e8 44 ff ff ff       	call   c0012e98 <Dbg::logWriteInt(unsigned int)>
c0012f54:	58                   	pop    eax
c0012f55:	eb d9                	jmp    c0012f30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f5b:	89 d0                	mov    eax,edx
c0012f5d:	83 c2 04             	add    edx,0x4
c0012f60:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f67:	50                   	push   eax
c0012f68:	e8 f7 fe ff ff       	call   c0012e64 <Dbg::logc(char)>
c0012f6d:	58                   	pop    eax
c0012f6e:	eb c0                	jmp    c0012f30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f70:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f74:	89 c8                	mov    eax,ecx
c0012f76:	83 c1 04             	add    ecx,0x4
c0012f79:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f7d:	ff 30                	push   DWORD PTR [eax]
c0012f7f:	e8 14 ff ff ff       	call   c0012e98 <Dbg::logWriteInt(unsigned int)>
c0012f84:	5f                   	pop    edi
c0012f85:	eb a9                	jmp    c0012f30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f8b:	89 c8                	mov    eax,ecx
c0012f8d:	83 c1 04             	add    ecx,0x4
c0012f90:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f94:	6a 10                	push   0x10
c0012f96:	ff 30                	push   DWORD PTR [eax]
c0012f98:	e8 18 ff ff ff       	call   c0012eb5 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f9d:	59                   	pop    ecx
c0012f9e:	5f                   	pop    edi
c0012f9f:	eb 8f                	jmp    c0012f30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fa1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fa5:	89 d0                	mov    eax,edx
c0012fa7:	83 c2 08             	add    edx,0x8
c0012faa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fae:	6a 10                	push   0x10
c0012fb0:	ff 30                	push   DWORD PTR [eax]
c0012fb2:	e8 fe fe ff ff       	call   c0012eb5 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fb7:	58                   	pop    eax
c0012fb8:	5a                   	pop    edx
c0012fb9:	e9 72 ff ff ff       	jmp    c0012f30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fbe:	6a 25                	push   0x25
c0012fc0:	e8 9f fe ff ff       	call   c0012e64 <Dbg::logc(char)>
c0012fc5:	58                   	pop    eax
c0012fc6:	e9 65 ff ff ff       	jmp    c0012f30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fcb:	6a 25                	push   0x25
c0012fcd:	e8 92 fe ff ff       	call   c0012e64 <Dbg::logc(char)>
c0012fd2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fd5:	50                   	push   eax
c0012fd6:	e8 89 fe ff ff       	call   c0012e64 <Dbg::logc(char)>
c0012fdb:	5a                   	pop    edx
c0012fdc:	59                   	pop    ecx
c0012fdd:	e9 4e ff ff ff       	jmp    c0012f30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe2:	50                   	push   eax
c0012fe3:	89 eb                	mov    ebx,ebp
c0012fe5:	e8 7a fe ff ff       	call   c0012e64 <Dbg::logc(char)>
c0012fea:	89 fd                	mov    ebp,edi
c0012fec:	58                   	pop    eax
c0012fed:	e9 3e ff ff ff       	jmp    c0012f30 <Dbg::kprintf(char const*, ...)+0x5c>

c0012ff2 <File::read(unsigned long long, void*, int*)>:
c0012ff2:	53                   	push   ebx
c0012ff3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ff7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ffb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013002:	3c 19                	cmp    al,0x19
c0013004:	77 35                	ja     c001303b <File::read(unsigned long long, void*, int*)+0x49>
c0013006:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c001300d:	85 c0                	test   eax,eax
c001300f:	74 2a                	je     c001303b <File::read(unsigned long long, void*, int*)+0x49>
c0013011:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013017:	85 c0                	test   eax,eax
c0013019:	74 20                	je     c001303b <File::read(unsigned long long, void*, int*)+0x49>
c001301b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001301f:	74 21                	je     c0013042 <File::read(unsigned long long, void*, int*)+0x50>
c0013021:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013023:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013027:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001302d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013031:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013035:	5b                   	pop    ebx
c0013036:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013039:	ff e0                	jmp    eax
c001303b:	b8 0b 00 00 00       	mov    eax,0xb
c0013040:	eb 05                	jmp    c0013047 <File::read(unsigned long long, void*, int*)+0x55>
c0013042:	b8 05 00 00 00       	mov    eax,0x5
c0013047:	5b                   	pop    ebx
c0013048:	c3                   	ret    
c0013049:	90                   	nop

c001304a <File::write(unsigned long long, void*, int*)>:
c001304a:	53                   	push   ebx
c001304b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001304f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013053:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001305a:	3c 19                	cmp    al,0x19
c001305c:	77 35                	ja     c0013093 <File::write(unsigned long long, void*, int*)+0x49>
c001305e:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0013065:	85 c0                	test   eax,eax
c0013067:	74 2a                	je     c0013093 <File::write(unsigned long long, void*, int*)+0x49>
c0013069:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001306f:	85 c0                	test   eax,eax
c0013071:	74 20                	je     c0013093 <File::write(unsigned long long, void*, int*)+0x49>
c0013073:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013077:	74 21                	je     c001309a <File::write(unsigned long long, void*, int*)+0x50>
c0013079:	8b 08                	mov    ecx,DWORD PTR [eax]
c001307b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001307f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001308d:	5b                   	pop    ebx
c001308e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013091:	ff e0                	jmp    eax
c0013093:	b8 0b 00 00 00       	mov    eax,0xb
c0013098:	eb 05                	jmp    c001309f <File::write(unsigned long long, void*, int*)+0x55>
c001309a:	b8 05 00 00 00       	mov    eax,0x5
c001309f:	5b                   	pop    ebx
c00130a0:	c3                   	ret    
c00130a1:	90                   	nop

c00130a2 <Directory::read(unsigned long long, void*, int*)>:
c00130a2:	53                   	push   ebx
c00130a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130ab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130b2:	3c 19                	cmp    al,0x19
c00130b4:	77 35                	ja     c00130eb <Directory::read(unsigned long long, void*, int*)+0x49>
c00130b6:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c00130bd:	85 c0                	test   eax,eax
c00130bf:	74 2a                	je     c00130eb <Directory::read(unsigned long long, void*, int*)+0x49>
c00130c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130c7:	85 c0                	test   eax,eax
c00130c9:	74 20                	je     c00130eb <Directory::read(unsigned long long, void*, int*)+0x49>
c00130cb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130cf:	74 21                	je     c00130f2 <Directory::read(unsigned long long, void*, int*)+0x50>
c00130d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130d7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130e5:	5b                   	pop    ebx
c00130e6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130e9:	ff e0                	jmp    eax
c00130eb:	b8 0b 00 00 00       	mov    eax,0xb
c00130f0:	eb 05                	jmp    c00130f7 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130f2:	b8 05 00 00 00       	mov    eax,0x5
c00130f7:	5b                   	pop    ebx
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <Directory::write(unsigned long long, void*, int*)>:
c00130fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130fe:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013105:	b8 0b 00 00 00       	mov    eax,0xb
c001310a:	80 fa 19             	cmp    dl,0x19
c001310d:	77 18                	ja     c0013127 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001310f:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0013116:	85 d2                	test   edx,edx
c0013118:	74 0d                	je     c0013127 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001311a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013121:	19 c0                	sbb    eax,eax
c0013123:	83 e0 0a             	and    eax,0xa
c0013126:	40                   	inc    eax
c0013127:	c3                   	ret    

c0013128 <File::isAtty()>:
c0013128:	31 c0                	xor    eax,eax
c001312a:	c3                   	ret    
c001312b:	90                   	nop

c001312c <Directory::isAtty()>:
c001312c:	31 c0                	xor    eax,eax
c001312e:	c3                   	ret    
c001312f:	90                   	nop

c0013130 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013130:	b8 0a 00 00 00       	mov    eax,0xa
c0013135:	c3                   	ret    

c0013136 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013136:	b8 0a 00 00 00       	mov    eax,0xa
c001313b:	c3                   	ret    

c001313c <File::~File()>:
c001313c:	83 ec 0c             	sub    esp,0xc
c001313f:	ba 98 aa 02 c0       	mov    edx,0xc002aa98
c0013144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013148:	89 10                	mov    DWORD PTR [eax],edx
c001314a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314e:	83 ec 0c             	sub    esp,0xc
c0013151:	50                   	push   eax
c0013152:	e8 e7 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	90                   	nop
c001315b:	83 c4 0c             	add    esp,0xc
c001315e:	c3                   	ret    
c001315f:	90                   	nop

c0013160 <File::~File()>:
c0013160:	83 ec 0c             	sub    esp,0xc
c0013163:	83 ec 0c             	sub    esp,0xc
c0013166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316a:	e8 cd ff ff ff       	call   c001313c <File::~File()>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	83 ec 08             	sub    esp,0x8
c0013175:	68 14 01 00 00       	push   0x114
c001317a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317e:	e8 71 fc ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	83 c4 0c             	add    esp,0xc
c0013189:	c3                   	ret    

c001318a <Directory::~Directory()>:
c001318a:	83 ec 0c             	sub    esp,0xc
c001318d:	ba b4 aa 02 c0       	mov    edx,0xc002aab4
c0013192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013196:	89 10                	mov    DWORD PTR [eax],edx
c0013198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	50                   	push   eax
c00131a0:	e8 99 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00131a5:	83 c4 10             	add    esp,0x10
c00131a8:	90                   	nop
c00131a9:	83 c4 0c             	add    esp,0xc
c00131ac:	c3                   	ret    
c00131ad:	90                   	nop

c00131ae <Directory::~Directory()>:
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	83 ec 0c             	sub    esp,0xc
c00131b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b8:	e8 cd ff ff ff       	call   c001318a <Directory::~Directory()>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	83 ec 08             	sub    esp,0x8
c00131c3:	68 14 01 00 00       	push   0x114
c00131c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131cc:	e8 23 fc ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00131d1:	83 c4 10             	add    esp,0x10
c00131d4:	83 c4 0c             	add    esp,0xc
c00131d7:	c3                   	ret    

c00131d8 <Filesystem::Filesystem()>:
c00131d8:	ba 34 aa 02 c0       	mov    edx,0xc002aa34
c00131dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131e1:	89 10                	mov    DWORD PTR [eax],edx
c00131e3:	8b 15 6c e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e56c
c00131e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f4:	a3 6c e5 02 c0       	mov    ds:0xc002e56c,eax
c00131f9:	90                   	nop
c00131fa:	c3                   	ret    
c00131fb:	90                   	nop

c00131fc <Filesystem::~Filesystem()>:
c00131fc:	ba 34 aa 02 c0       	mov    edx,0xc002aa34
c0013201:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013205:	89 10                	mov    DWORD PTR [eax],edx
c0013207:	90                   	nop
c0013208:	c3                   	ret    
c0013209:	90                   	nop

c001320a <Filesystem::~Filesystem()>:
c001320a:	83 ec 0c             	sub    esp,0xc
c001320d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013211:	e8 e6 ff ff ff       	call   c00131fc <Filesystem::~Filesystem()>
c0013216:	83 c4 04             	add    esp,0x4
c0013219:	83 ec 08             	sub    esp,0x8
c001321c:	6a 08                	push   0x8
c001321e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013222:	e8 cd fb ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0013227:	83 c4 10             	add    esp,0x10
c001322a:	83 c4 0c             	add    esp,0xc
c001322d:	c3                   	ret    

c001322e <Fs::getcwd(Process*, char*, int)>:
c001322e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013232:	31 c0                	xor    eax,eax
c0013234:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013237:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001323b:	7d 15                	jge    c0013252 <Fs::getcwd(Process*, char*, int)+0x24>
c001323d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013241:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013248:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001324b:	84 c9                	test   cl,cl
c001324d:	74 06                	je     c0013255 <Fs::getcwd(Process*, char*, int)+0x27>
c001324f:	40                   	inc    eax
c0013250:	eb e2                	jmp    c0013234 <Fs::getcwd(Process*, char*, int)+0x6>
c0013252:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013255:	31 c0                	xor    eax,eax
c0013257:	c3                   	ret    

c0013258 <Fs::initVFS()>:
c0013258:	83 ec 18             	sub    esp,0x18
c001325b:	6a 08                	push   0x8
c001325d:	e8 de c5 ff ff       	call   c000f840 <malloc>
c0013262:	89 04 24             	mov    DWORD PTR [esp],eax
c0013265:	e8 a4 dc 00 00       	call   c0020f0e <FAT::FAT()>
c001326a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013271:	e8 ca c5 ff ff       	call   c000f840 <malloc>
c0013276:	89 04 24             	mov    DWORD PTR [esp],eax
c0013279:	e8 e8 ee 00 00       	call   c0022166 <ISO9660::ISO9660()>
c001327e:	83 c4 1c             	add    esp,0x1c
c0013281:	c3                   	ret    

c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013282:	55                   	push   ebp
c0013283:	57                   	push   edi
c0013284:	56                   	push   esi
c0013285:	53                   	push   ebx
c0013286:	81 ec 10 04 00 00    	sub    esp,0x410
c001328c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013293:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001329a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132a1:	68 00 04 00 00       	push   0x400
c00132a6:	6a 00                	push   0x0
c00132a8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132ac:	56                   	push   esi
c00132ad:	e8 c6 d4 fe ff       	call   c0000778 <memset>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132b9:	75 0b                	jne    c00132c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132bb:	50                   	push   eax
c00132bc:	50                   	push   eax
c00132bd:	57                   	push   edi
c00132be:	56                   	push   esi
c00132bf:	e8 70 d5 fe ff       	call   c0000834 <strcpy>
c00132c4:	eb 41                	jmp    c0013307 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132c6:	8a 07                	mov    al,BYTE PTR [edi]
c00132c8:	3c 5c                	cmp    al,0x5c
c00132ca:	74 04                	je     c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132cc:	3c 2f                	cmp    al,0x2f
c00132ce:	75 18                	jne    c00132e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132d0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132d3:	3c 60                	cmp    al,0x60
c00132d5:	7e 03                	jle    c00132da <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132d7:	83 e8 20             	sub    eax,0x20
c00132da:	88 04 24             	mov    BYTE PTR [esp],al
c00132dd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132e4:	50                   	push   eax
c00132e5:	50                   	push   eax
c00132e6:	eb 18                	jmp    c0013300 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132e8:	50                   	push   eax
c00132e9:	50                   	push   eax
c00132ea:	55                   	push   ebp
c00132eb:	56                   	push   esi
c00132ec:	e8 43 d5 fe ff       	call   c0000834 <strcpy>
c00132f1:	5a                   	pop    edx
c00132f2:	59                   	pop    ecx
c00132f3:	68 c1 c1 02 c0       	push   0xc002c1c1
c00132f8:	56                   	push   esi
c00132f9:	e8 76 d6 fe ff       	call   c0000974 <strcat>
c00132fe:	5d                   	pop    ebp
c00132ff:	58                   	pop    eax
c0013300:	57                   	push   edi
c0013301:	56                   	push   esi
c0013302:	e8 6d d6 fe ff       	call   c0000974 <strcat>
c0013307:	83 c4 10             	add    esp,0x10
c001330a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001330d:	3c 60                	cmp    al,0x60
c001330f:	7e 03                	jle    c0013314 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013311:	83 e8 20             	sub    eax,0x20
c0013314:	88 04 24             	mov    BYTE PTR [esp],al
c0013317:	88 03                	mov    BYTE PTR [ebx],al
c0013319:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013320:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013326:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001332a:	bf 03 00 00 00       	mov    edi,0x3
c001332f:	b8 03 00 00 00       	mov    eax,0x3
c0013334:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013337:	84 d2                	test   dl,dl
c0013339:	0f 84 91 00 00 00    	je     c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001333f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013342:	80 fa 5c             	cmp    dl,0x5c
c0013345:	74 05                	je     c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013347:	80 fa 2f             	cmp    dl,0x2f
c001334a:	75 12                	jne    c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001334c:	89 c5                	mov    ebp,eax
c001334e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013353:	74 09                	je     c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013355:	40                   	inc    eax
c0013356:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001335a:	89 cf                	mov    edi,ecx
c001335c:	eb d6                	jmp    c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001335e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013363:	75 5b                	jne    c00133c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013365:	80 fa 2e             	cmp    dl,0x2e
c0013368:	75 56                	jne    c00133c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001336a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001336e:	74 19                	je     c0013389 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013370:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013375:	74 53                	je     c00133ca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013377:	89 f9                	mov    ecx,edi
c0013379:	41                   	inc    ecx
c001337a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001337d:	80 fa 2f             	cmp    dl,0x2f
c0013380:	74 f7                	je     c0013379 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013382:	80 fa 5c             	cmp    dl,0x5c
c0013385:	74 f2                	je     c0013379 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013387:	eb d1                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013389:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001338e:	74 3a                	je     c00133ca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013390:	83 f8 03             	cmp    eax,0x3
c0013393:	74 c5                	je     c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013395:	41                   	inc    ecx
c0013396:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013399:	80 fa 2f             	cmp    dl,0x2f
c001339c:	74 f7                	je     c0013395 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001339e:	80 fa 5c             	cmp    dl,0x5c
c00133a1:	74 f2                	je     c0013395 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133a3:	48                   	dec    eax
c00133a4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133a8:	75 06                	jne    c00133b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133aa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ae:	eb f3                	jmp    c00133a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133b0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133b4:	74 07                	je     c00133bd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133b6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ba:	48                   	dec    eax
c00133bb:	eb f3                	jmp    c00133b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133bd:	40                   	inc    eax
c00133be:	eb 9a                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c0:	80 fa 2f             	cmp    dl,0x2f
c00133c3:	74 95                	je     c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c5:	80 fa 5c             	cmp    dl,0x5c
c00133c8:	74 90                	je     c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ca:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133cd:	40                   	inc    eax
c00133ce:	eb 8a                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133d4:	83 ec 0c             	sub    esp,0xc
c00133d7:	53                   	push   ebx
c00133d8:	e8 b7 d3 fe ff       	call   c0000794 <strlen>
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133e5:	75 26                	jne    c001340d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133e7:	83 ec 0c             	sub    esp,0xc
c00133ea:	53                   	push   ebx
c00133eb:	e8 a4 d3 fe ff       	call   c0000794 <strlen>
c00133f0:	83 c4 10             	add    esp,0x10
c00133f3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133f8:	74 26                	je     c0013420 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	53                   	push   ebx
c00133fe:	e8 91 d3 fe ff       	call   c0000794 <strlen>
c0013403:	83 c4 10             	add    esp,0x10
c0013406:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001340b:	eb c7                	jmp    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001340d:	83 ec 0c             	sub    esp,0xc
c0013410:	53                   	push   ebx
c0013411:	e8 7e d3 fe ff       	call   c0000794 <strlen>
c0013416:	83 c4 10             	add    esp,0x10
c0013419:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001341e:	74 c7                	je     c00133e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013420:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013426:	5b                   	pop    ebx
c0013427:	5e                   	pop    esi
c0013428:	5f                   	pop    edi
c0013429:	5d                   	pop    ebp
c001342a:	c3                   	ret    
c001342b:	90                   	nop

c001342c <File::File(char const*, Process*)>:
c001342c:	83 ec 0c             	sub    esp,0xc
c001342f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013433:	83 ec 08             	sub    esp,0x8
c0013436:	6a 00                	push   0x0
c0013438:	50                   	push   eax
c0013439:	e8 1e e3 ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c001343e:	83 c4 10             	add    esp,0x10
c0013441:	ba 98 aa 02 c0       	mov    edx,0xc002aa98
c0013446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344a:	89 10                	mov    DWORD PTR [eax],edx
c001344c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013450:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345a:	83 c0 0d             	add    eax,0xd
c001345d:	83 ec 04             	sub    esp,0x4
c0013460:	52                   	push   edx
c0013461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013465:	50                   	push   eax
c0013466:	e8 17 fe ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013472:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013475:	8d 50 bf             	lea    edx,[eax-0x41]
c0013478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013486:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001348a:	90                   	nop
c001348b:	83 c4 0c             	add    esp,0xc
c001348e:	c3                   	ret    
c001348f:	90                   	nop

c0013490 <File::open(FileOpenMode)>:
c0013490:	53                   	push   ebx
c0013491:	b8 0b 00 00 00       	mov    eax,0xb
c0013496:	83 ec 08             	sub    esp,0x8
c0013499:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001349d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134a4:	80 fa 19             	cmp    dl,0x19
c00134a7:	77 40                	ja     c00134e9 <File::open(FileOpenMode)+0x59>
c00134a9:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c00134b0:	85 d2                	test   edx,edx
c00134b2:	74 35                	je     c00134e9 <File::open(FileOpenMode)+0x59>
c00134b4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134ba:	85 d2                	test   edx,edx
c00134bc:	74 2b                	je     c00134e9 <File::open(FileOpenMode)+0x59>
c00134be:	b8 06 00 00 00       	mov    eax,0x6
c00134c3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134c7:	75 20                	jne    c00134e9 <File::open(FileOpenMode)+0x59>
c00134c9:	8b 02                	mov    eax,DWORD PTR [edx]
c00134cb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134d5:	51                   	push   ecx
c00134d6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134d9:	51                   	push   ecx
c00134da:	52                   	push   edx
c00134db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	85 c0                	test   eax,eax
c00134e3:	75 04                	jne    c00134e9 <File::open(FileOpenMode)+0x59>
c00134e5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134e9:	83 c4 08             	add    esp,0x8
c00134ec:	5b                   	pop    ebx
c00134ed:	c3                   	ret    

c00134ee <File::close()>:
c00134ee:	53                   	push   ebx
c00134ef:	b8 0b 00 00 00       	mov    eax,0xb
c00134f4:	83 ec 08             	sub    esp,0x8
c00134f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134fb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013502:	80 fa 19             	cmp    dl,0x19
c0013505:	77 41                	ja     c0013548 <File::close()+0x5a>
c0013507:	8b 1c 95 00 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1600]
c001350e:	85 db                	test   ebx,ebx
c0013510:	74 36                	je     c0013548 <File::close()+0x5a>
c0013512:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013519:	74 2d                	je     c0013548 <File::close()+0x5a>
c001351b:	b8 05 00 00 00       	mov    eax,0x5
c0013520:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013524:	74 22                	je     c0013548 <File::close()+0x5a>
c0013526:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001352a:	8b 04 95 00 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1600]
c0013531:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013537:	53                   	push   ebx
c0013538:	53                   	push   ebx
c0013539:	8b 10                	mov    edx,DWORD PTR [eax]
c001353b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013541:	50                   	push   eax
c0013542:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013545:	83 c4 10             	add    esp,0x10
c0013548:	83 c4 08             	add    esp,0x8
c001354b:	5b                   	pop    ebx
c001354c:	c3                   	ret    
c001354d:	90                   	nop

c001354e <File::seek(unsigned long long)>:
c001354e:	56                   	push   esi
c001354f:	53                   	push   ebx
c0013550:	b8 0b 00 00 00       	mov    eax,0xb
c0013555:	51                   	push   ecx
c0013556:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001355a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001355e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013565:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013569:	80 fa 19             	cmp    dl,0x19
c001356c:	77 31                	ja     c001359f <File::seek(unsigned long long)+0x51>
c001356e:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0013575:	85 d2                	test   edx,edx
c0013577:	74 26                	je     c001359f <File::seek(unsigned long long)+0x51>
c0013579:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001357f:	85 d2                	test   edx,edx
c0013581:	74 1c                	je     c001359f <File::seek(unsigned long long)+0x51>
c0013583:	b8 05 00 00 00       	mov    eax,0x5
c0013588:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001358c:	74 11                	je     c001359f <File::seek(unsigned long long)+0x51>
c001358e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013590:	53                   	push   ebx
c0013591:	51                   	push   ecx
c0013592:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013598:	52                   	push   edx
c0013599:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001359c:	83 c4 10             	add    esp,0x10
c001359f:	5a                   	pop    edx
c00135a0:	5b                   	pop    ebx
c00135a1:	5e                   	pop    esi
c00135a2:	c3                   	ret    
c00135a3:	90                   	nop

c00135a4 <File::tell(unsigned long long*)>:
c00135a4:	83 ec 0c             	sub    esp,0xc
c00135a7:	b8 0b 00 00 00       	mov    eax,0xb
c00135ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135b0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135b7:	80 fa 19             	cmp    dl,0x19
c00135ba:	77 34                	ja     c00135f0 <File::tell(unsigned long long*)+0x4c>
c00135bc:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c00135c3:	85 d2                	test   edx,edx
c00135c5:	74 29                	je     c00135f0 <File::tell(unsigned long long*)+0x4c>
c00135c7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135cd:	85 d2                	test   edx,edx
c00135cf:	74 1f                	je     c00135f0 <File::tell(unsigned long long*)+0x4c>
c00135d1:	b8 05 00 00 00       	mov    eax,0x5
c00135d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135da:	74 14                	je     c00135f0 <File::tell(unsigned long long*)+0x4c>
c00135dc:	50                   	push   eax
c00135dd:	8b 02                	mov    eax,DWORD PTR [edx]
c00135df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135e9:	52                   	push   edx
c00135ea:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	83 c4 0c             	add    esp,0xc
c00135f3:	c3                   	ret    

c00135f4 <File::rewind()>:
c00135f4:	83 ec 10             	sub    esp,0x10
c00135f7:	6a 00                	push   0x0
c00135f9:	6a 00                	push   0x0
c00135fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ff:	e8 4a ff ff ff       	call   c001354e <File::seek(unsigned long long)>
c0013604:	83 c4 1c             	add    esp,0x1c
c0013607:	c3                   	ret    

c0013608 <File::unlink()>:
c0013608:	83 ec 0c             	sub    esp,0xc
c001360b:	b8 0b 00 00 00       	mov    eax,0xb
c0013610:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013614:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001361b:	80 f9 19             	cmp    cl,0x19
c001361e:	77 2f                	ja     c001364f <File::unlink()+0x47>
c0013620:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013627:	85 c9                	test   ecx,ecx
c0013629:	74 24                	je     c001364f <File::unlink()+0x47>
c001362b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013631:	85 c9                	test   ecx,ecx
c0013633:	74 1a                	je     c001364f <File::unlink()+0x47>
c0013635:	b8 06 00 00 00       	mov    eax,0x6
c001363a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001363e:	75 0f                	jne    c001364f <File::unlink()+0x47>
c0013640:	83 c2 0d             	add    edx,0xd
c0013643:	50                   	push   eax
c0013644:	50                   	push   eax
c0013645:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013647:	52                   	push   edx
c0013648:	51                   	push   ecx
c0013649:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	83 c4 0c             	add    esp,0xc
c0013652:	c3                   	ret    
c0013653:	90                   	nop

c0013654 <File::rename(char const*)>:
c0013654:	83 ec 0c             	sub    esp,0xc
c0013657:	b8 0b 00 00 00       	mov    eax,0xb
c001365c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013660:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013667:	80 f9 19             	cmp    cl,0x19
c001366a:	77 32                	ja     c001369e <File::rename(char const*)+0x4a>
c001366c:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013673:	85 c9                	test   ecx,ecx
c0013675:	74 27                	je     c001369e <File::rename(char const*)+0x4a>
c0013677:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001367d:	85 c9                	test   ecx,ecx
c001367f:	74 1d                	je     c001369e <File::rename(char const*)+0x4a>
c0013681:	b8 06 00 00 00       	mov    eax,0x6
c0013686:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001368a:	75 12                	jne    c001369e <File::rename(char const*)+0x4a>
c001368c:	83 c2 0d             	add    edx,0xd
c001368f:	50                   	push   eax
c0013690:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013692:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013696:	52                   	push   edx
c0013697:	51                   	push   ecx
c0013698:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001369b:	83 c4 10             	add    esp,0x10
c001369e:	83 c4 0c             	add    esp,0xc
c00136a1:	c3                   	ret    

c00136a2 <File::chfatattr(unsigned char, unsigned char)>:
c00136a2:	57                   	push   edi
c00136a3:	b8 0b 00 00 00       	mov    eax,0xb
c00136a8:	56                   	push   esi
c00136a9:	53                   	push   ebx
c00136aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136bd:	80 f9 19             	cmp    cl,0x19
c00136c0:	77 37                	ja     c00136f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136c2:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c00136c9:	85 c9                	test   ecx,ecx
c00136cb:	74 2c                	je     c00136f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d3:	85 c9                	test   ecx,ecx
c00136d5:	74 22                	je     c00136f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136d7:	b8 06 00 00 00       	mov    eax,0x6
c00136dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e0:	75 17                	jne    c00136f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e2:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136e4:	89 f0                	mov    eax,esi
c00136e6:	83 c2 0d             	add    edx,0xd
c00136e9:	0f b6 f0             	movzx  esi,al
c00136ec:	0f b6 db             	movzx  ebx,bl
c00136ef:	56                   	push   esi
c00136f0:	53                   	push   ebx
c00136f1:	52                   	push   edx
c00136f2:	51                   	push   ecx
c00136f3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	5b                   	pop    ebx
c00136fa:	5e                   	pop    esi
c00136fb:	5f                   	pop    edi
c00136fc:	c3                   	ret    
c00136fd:	90                   	nop

c00136fe <File::exists()>:
c00136fe:	83 ec 0c             	sub    esp,0xc
c0013701:	31 c0                	xor    eax,eax
c0013703:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013707:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001370e:	80 f9 19             	cmp    cl,0x19
c0013711:	77 24                	ja     c0013737 <File::exists()+0x39>
c0013713:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c001371a:	85 c9                	test   ecx,ecx
c001371c:	74 19                	je     c0013737 <File::exists()+0x39>
c001371e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013724:	85 c9                	test   ecx,ecx
c0013726:	74 0f                	je     c0013737 <File::exists()+0x39>
c0013728:	83 c2 0d             	add    edx,0xd
c001372b:	50                   	push   eax
c001372c:	50                   	push   eax
c001372d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001372f:	52                   	push   edx
c0013730:	51                   	push   ecx
c0013731:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013734:	83 c4 10             	add    esp,0x10
c0013737:	83 c4 0c             	add    esp,0xc
c001373a:	c3                   	ret    
c001373b:	90                   	nop

c001373c <File::stat(unsigned long long*, bool*)>:
c001373c:	56                   	push   esi
c001373d:	53                   	push   ebx
c001373e:	50                   	push   eax
c001373f:	b8 0b 00 00 00       	mov    eax,0xb
c0013744:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013748:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001374c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013757:	80 f9 19             	cmp    cl,0x19
c001375a:	77 3d                	ja     c0013799 <File::stat(unsigned long long*, bool*)+0x5d>
c001375c:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013763:	85 c9                	test   ecx,ecx
c0013765:	74 32                	je     c0013799 <File::stat(unsigned long long*, bool*)+0x5d>
c0013767:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001376d:	85 c9                	test   ecx,ecx
c001376f:	74 28                	je     c0013799 <File::stat(unsigned long long*, bool*)+0x5d>
c0013771:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013773:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013777:	74 13                	je     c001378c <File::stat(unsigned long long*, bool*)+0x50>
c0013779:	83 ec 04             	sub    esp,0x4
c001377c:	56                   	push   esi
c001377d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013783:	51                   	push   ecx
c0013784:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013787:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001378a:	eb 0a                	jmp    c0013796 <File::stat(unsigned long long*, bool*)+0x5a>
c001378c:	53                   	push   ebx
c001378d:	83 c2 0d             	add    edx,0xd
c0013790:	56                   	push   esi
c0013791:	52                   	push   edx
c0013792:	51                   	push   ecx
c0013793:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	5a                   	pop    edx
c001379a:	5b                   	pop    ebx
c001379b:	5e                   	pop    esi
c001379c:	c3                   	ret    

c001379d <Fs::setcwd(Process*, char*)>:
c001379d:	55                   	push   ebp
c001379e:	57                   	push   edi
c001379f:	56                   	push   esi
c00137a0:	53                   	push   ebx
c00137a1:	81 ec 20 02 00 00    	sub    esp,0x220
c00137a7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137ae:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137b4:	57                   	push   edi
c00137b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137bc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137c0:	56                   	push   esi
c00137c1:	e8 bc fa ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00137c9:	e8 c6 cf fe ff       	call   c0000794 <strlen>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	83 f8 02             	cmp    eax,0x2
c00137d4:	77 17                	ja     c00137ed <Fs::setcwd(Process*, char*)+0x50>
c00137d6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137db:	83 e8 41             	sub    eax,0x41
c00137de:	83 f8 19             	cmp    eax,0x19
c00137e1:	76 24                	jbe    c0013807 <Fs::setcwd(Process*, char*)+0x6a>
c00137e3:	b8 03 00 00 00       	mov    eax,0x3
c00137e8:	e9 e0 00 00 00       	jmp    c00138cd <Fs::setcwd(Process*, char*)+0x130>
c00137ed:	83 ec 0c             	sub    esp,0xc
c00137f0:	56                   	push   esi
c00137f1:	e8 9e cf fe ff       	call   c0000794 <strlen>
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	83 f8 03             	cmp    eax,0x3
c00137fc:	75 34                	jne    c0013832 <Fs::setcwd(Process*, char*)+0x95>
c00137fe:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013803:	75 2d                	jne    c0013832 <Fs::setcwd(Process*, char*)+0x95>
c0013805:	eb cf                	jmp    c00137d6 <Fs::setcwd(Process*, char*)+0x39>
c0013807:	8b 14 85 00 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1600]
c001380e:	b8 05 00 00 00       	mov    eax,0x5
c0013813:	85 d2                	test   edx,edx
c0013815:	0f 84 b2 00 00 00    	je     c00138cd <Fs::setcwd(Process*, char*)+0x130>
c001381b:	b8 06 00 00 00       	mov    eax,0x6
c0013820:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013827:	0f 85 92 00 00 00    	jne    c00138bf <Fs::setcwd(Process*, char*)+0x122>
c001382d:	e9 9b 00 00 00       	jmp    c00138cd <Fs::setcwd(Process*, char*)+0x130>
c0013832:	83 ec 0c             	sub    esp,0xc
c0013835:	68 14 01 00 00       	push   0x114
c001383a:	e8 01 c0 ff ff       	call   c000f840 <malloc>
c001383f:	83 c4 0c             	add    esp,0xc
c0013842:	89 c3                	mov    ebx,eax
c0013844:	55                   	push   ebp
c0013845:	56                   	push   esi
c0013846:	50                   	push   eax
c0013847:	e8 e0 fb ff ff       	call   c001342c <File::File(char const*, Process*)>
c001384c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013851:	83 c4 0c             	add    esp,0xc
c0013854:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013858:	50                   	push   eax
c0013859:	8d 44 24 10          	lea    eax,[esp+0x10]
c001385d:	50                   	push   eax
c001385e:	53                   	push   ebx
c001385f:	e8 d8 fe ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c0013864:	83 c4 10             	add    esp,0x10
c0013867:	83 f8 02             	cmp    eax,0x2
c001386a:	74 04                	je     c0013870 <Fs::setcwd(Process*, char*)+0xd3>
c001386c:	85 c0                	test   eax,eax
c001386e:	74 1c                	je     c001388c <Fs::setcwd(Process*, char*)+0xef>
c0013870:	b8 01 00 00 00       	mov    eax,0x1
c0013875:	85 db                	test   ebx,ebx
c0013877:	74 54                	je     c00138cd <Fs::setcwd(Process*, char*)+0x130>
c0013879:	83 ec 0c             	sub    esp,0xc
c001387c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001387e:	53                   	push   ebx
c001387f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	b8 01 00 00 00       	mov    eax,0x1
c001388a:	eb 41                	jmp    c00138cd <Fs::setcwd(Process*, char*)+0x130>
c001388c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013891:	75 1c                	jne    c00138af <Fs::setcwd(Process*, char*)+0x112>
c0013893:	b8 02 00 00 00       	mov    eax,0x2
c0013898:	85 db                	test   ebx,ebx
c001389a:	74 31                	je     c00138cd <Fs::setcwd(Process*, char*)+0x130>
c001389c:	83 ec 0c             	sub    esp,0xc
c001389f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138a1:	53                   	push   ebx
c00138a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138a5:	83 c4 10             	add    esp,0x10
c00138a8:	b8 02 00 00 00       	mov    eax,0x2
c00138ad:	eb 1e                	jmp    c00138cd <Fs::setcwd(Process*, char*)+0x130>
c00138af:	85 db                	test   ebx,ebx
c00138b1:	74 0c                	je     c00138bf <Fs::setcwd(Process*, char*)+0x122>
c00138b3:	83 ec 0c             	sub    esp,0xc
c00138b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b8:	53                   	push   ebx
c00138b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	50                   	push   eax
c00138c0:	50                   	push   eax
c00138c1:	56                   	push   esi
c00138c2:	57                   	push   edi
c00138c3:	e8 6c cf fe ff       	call   c0000834 <strcpy>
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	31 c0                	xor    eax,eax
c00138cd:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138d3:	5b                   	pop    ebx
c00138d4:	5e                   	pop    esi
c00138d5:	5f                   	pop    edi
c00138d6:	5d                   	pop    ebp
c00138d7:	c3                   	ret    

c00138d8 <Directory::Directory(char const*, Process*)>:
c00138d8:	83 ec 0c             	sub    esp,0xc
c00138db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138df:	83 ec 08             	sub    esp,0x8
c00138e2:	6a 00                	push   0x0
c00138e4:	50                   	push   eax
c00138e5:	e8 72 de ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	ba b4 aa 02 c0       	mov    edx,0xc002aab4
c00138f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f6:	89 10                	mov    DWORD PTR [eax],edx
c00138f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138fc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013906:	83 c0 0d             	add    eax,0xd
c0013909:	83 ec 04             	sub    esp,0x4
c001390c:	52                   	push   edx
c001390d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013911:	50                   	push   eax
c0013912:	e8 6b f9 ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013917:	83 c4 10             	add    esp,0x10
c001391a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013921:	8d 50 bf             	lea    edx,[eax-0x41]
c0013924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013928:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001392e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013932:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013936:	90                   	nop
c0013937:	83 c4 0c             	add    esp,0xc
c001393a:	c3                   	ret    
c001393b:	90                   	nop

c001393c <Directory::open()>:
c001393c:	53                   	push   ebx
c001393d:	b8 0b 00 00 00       	mov    eax,0xb
c0013942:	83 ec 08             	sub    esp,0x8
c0013945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013949:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013950:	80 fa 19             	cmp    dl,0x19
c0013953:	77 3d                	ja     c0013992 <Directory::open()+0x56>
c0013955:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c001395c:	85 d2                	test   edx,edx
c001395e:	74 32                	je     c0013992 <Directory::open()+0x56>
c0013960:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013966:	85 d2                	test   edx,edx
c0013968:	74 28                	je     c0013992 <Directory::open()+0x56>
c001396a:	b8 06 00 00 00       	mov    eax,0x6
c001396f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013973:	75 1d                	jne    c0013992 <Directory::open()+0x56>
c0013975:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001397b:	50                   	push   eax
c001397c:	8b 02                	mov    eax,DWORD PTR [edx]
c001397e:	51                   	push   ecx
c001397f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013982:	51                   	push   ecx
c0013983:	52                   	push   edx
c0013984:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013987:	83 c4 10             	add    esp,0x10
c001398a:	85 c0                	test   eax,eax
c001398c:	75 04                	jne    c0013992 <Directory::open()+0x56>
c001398e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013992:	83 c4 08             	add    esp,0x8
c0013995:	5b                   	pop    ebx
c0013996:	c3                   	ret    
c0013997:	90                   	nop

c0013998 <Directory::close()>:
c0013998:	53                   	push   ebx
c0013999:	b8 0b 00 00 00       	mov    eax,0xb
c001399e:	83 ec 08             	sub    esp,0x8
c00139a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139ac:	80 fa 19             	cmp    dl,0x19
c00139af:	77 41                	ja     c00139f2 <Directory::close()+0x5a>
c00139b1:	8b 1c 95 00 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1600]
c00139b8:	85 db                	test   ebx,ebx
c00139ba:	74 36                	je     c00139f2 <Directory::close()+0x5a>
c00139bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139c3:	74 2d                	je     c00139f2 <Directory::close()+0x5a>
c00139c5:	b8 05 00 00 00       	mov    eax,0x5
c00139ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139ce:	74 22                	je     c00139f2 <Directory::close()+0x5a>
c00139d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139d4:	8b 04 95 00 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1600]
c00139db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139e1:	53                   	push   ebx
c00139e2:	53                   	push   ebx
c00139e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00139e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139eb:	50                   	push   eax
c00139ec:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139ef:	83 c4 10             	add    esp,0x10
c00139f2:	83 c4 08             	add    esp,0x8
c00139f5:	5b                   	pop    ebx
c00139f6:	c3                   	ret    
c00139f7:	90                   	nop

c00139f8 <Directory::unlink()>:
c00139f8:	83 ec 0c             	sub    esp,0xc
c00139fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013a00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a0b:	80 f9 19             	cmp    cl,0x19
c0013a0e:	77 2f                	ja     c0013a3f <Directory::unlink()+0x47>
c0013a10:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013a17:	85 c9                	test   ecx,ecx
c0013a19:	74 24                	je     c0013a3f <Directory::unlink()+0x47>
c0013a1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a21:	85 c9                	test   ecx,ecx
c0013a23:	74 1a                	je     c0013a3f <Directory::unlink()+0x47>
c0013a25:	b8 06 00 00 00       	mov    eax,0x6
c0013a2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a2e:	75 0f                	jne    c0013a3f <Directory::unlink()+0x47>
c0013a30:	83 c2 0d             	add    edx,0xd
c0013a33:	50                   	push   eax
c0013a34:	50                   	push   eax
c0013a35:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a37:	52                   	push   edx
c0013a38:	51                   	push   ecx
c0013a39:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	83 c4 0c             	add    esp,0xc
c0013a42:	c3                   	ret    
c0013a43:	90                   	nop

c0013a44 <Directory::rename(char const*)>:
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	b8 0b 00 00 00       	mov    eax,0xb
c0013a4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a57:	80 f9 19             	cmp    cl,0x19
c0013a5a:	77 32                	ja     c0013a8e <Directory::rename(char const*)+0x4a>
c0013a5c:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013a63:	85 c9                	test   ecx,ecx
c0013a65:	74 27                	je     c0013a8e <Directory::rename(char const*)+0x4a>
c0013a67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a6d:	85 c9                	test   ecx,ecx
c0013a6f:	74 1d                	je     c0013a8e <Directory::rename(char const*)+0x4a>
c0013a71:	b8 06 00 00 00       	mov    eax,0x6
c0013a76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a7a:	75 12                	jne    c0013a8e <Directory::rename(char const*)+0x4a>
c0013a7c:	83 c2 0d             	add    edx,0xd
c0013a7f:	50                   	push   eax
c0013a80:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a86:	52                   	push   edx
c0013a87:	51                   	push   ecx
c0013a88:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a8b:	83 c4 10             	add    esp,0x10
c0013a8e:	83 c4 0c             	add    esp,0xc
c0013a91:	c3                   	ret    

c0013a92 <Directory::exists()>:
c0013a92:	83 ec 0c             	sub    esp,0xc
c0013a95:	31 c0                	xor    eax,eax
c0013a97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a9b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa2:	80 f9 19             	cmp    cl,0x19
c0013aa5:	77 24                	ja     c0013acb <Directory::exists()+0x39>
c0013aa7:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013aae:	85 c9                	test   ecx,ecx
c0013ab0:	74 19                	je     c0013acb <Directory::exists()+0x39>
c0013ab2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ab8:	85 c9                	test   ecx,ecx
c0013aba:	74 0f                	je     c0013acb <Directory::exists()+0x39>
c0013abc:	83 c2 0d             	add    edx,0xd
c0013abf:	50                   	push   eax
c0013ac0:	50                   	push   eax
c0013ac1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac3:	52                   	push   edx
c0013ac4:	51                   	push   ecx
c0013ac5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013ac8:	83 c4 10             	add    esp,0x10
c0013acb:	83 c4 0c             	add    esp,0xc
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <Directory::read(dirent*)>:
c0013ad0:	83 ec 1c             	sub    esp,0x1c
c0013ad3:	b8 0b 00 00 00       	mov    eax,0xb
c0013ad8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013adc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ae3:	80 fa 19             	cmp    dl,0x19
c0013ae6:	77 30                	ja     c0013b18 <Directory::read(dirent*)+0x48>
c0013ae8:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0013aef:	85 d2                	test   edx,edx
c0013af1:	74 25                	je     c0013b18 <Directory::read(dirent*)+0x48>
c0013af3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013afa:	74 1c                	je     c0013b18 <Directory::read(dirent*)+0x48>
c0013afc:	83 ec 0c             	sub    esp,0xc
c0013aff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b01:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b05:	52                   	push   edx
c0013b06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b0a:	6a 00                	push   0x0
c0013b0c:	68 10 01 00 00       	push   0x110
c0013b11:	51                   	push   ecx
c0013b12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b15:	83 c4 20             	add    esp,0x20
c0013b18:	83 c4 1c             	add    esp,0x1c
c0013b1b:	c3                   	ret    

c0013b1c <Directory::create()>:
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	b8 0b 00 00 00       	mov    eax,0xb
c0013b24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b28:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b2f:	80 f9 19             	cmp    cl,0x19
c0013b32:	77 2f                	ja     c0013b63 <Directory::create()+0x47>
c0013b34:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013b3b:	85 c9                	test   ecx,ecx
c0013b3d:	74 24                	je     c0013b63 <Directory::create()+0x47>
c0013b3f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b45:	85 c9                	test   ecx,ecx
c0013b47:	74 1a                	je     c0013b63 <Directory::create()+0x47>
c0013b49:	b8 06 00 00 00       	mov    eax,0x6
c0013b4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b52:	75 0f                	jne    c0013b63 <Directory::create()+0x47>
c0013b54:	83 c2 0d             	add    edx,0xd
c0013b57:	50                   	push   eax
c0013b58:	50                   	push   eax
c0013b59:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b5b:	52                   	push   edx
c0013b5c:	51                   	push   ecx
c0013b5d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	83 c4 0c             	add    esp,0xc
c0013b66:	c3                   	ret    
c0013b67:	90                   	nop

c0013b68 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b68:	b8 0a 00 00 00       	mov    eax,0xa
c0013b6d:	c3                   	ret    

c0013b6e <Bus::Bus(char const*)>:
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b75:	83 ec 08             	sub    esp,0x8
c0013b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7c:	50                   	push   eax
c0013b7d:	e8 68 09 00 00       	call   c00144ea <Device::Device(char const*)>
c0013b82:	83 c4 10             	add    esp,0x10
c0013b85:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c0013b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8e:	89 10                	mov    DWORD PTR [eax],edx
c0013b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b94:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b9e:	90                   	nop
c0013b9f:	83 c4 0c             	add    esp,0xc
c0013ba2:	c3                   	ret    
c0013ba3:	90                   	nop

c0013ba4 <Bus::~Bus()>:
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c0013bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb0:	89 10                	mov    DWORD PTR [eax],edx
c0013bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb6:	83 ec 0c             	sub    esp,0xc
c0013bb9:	50                   	push   eax
c0013bba:	e8 0d 06 00 00       	call   c00141cc <Device::~Device()>
c0013bbf:	83 c4 10             	add    esp,0x10
c0013bc2:	90                   	nop
c0013bc3:	83 c4 0c             	add    esp,0xc
c0013bc6:	c3                   	ret    
c0013bc7:	90                   	nop

c0013bc8 <Bus::~Bus()>:
c0013bc8:	83 ec 0c             	sub    esp,0xc
c0013bcb:	83 ec 0c             	sub    esp,0xc
c0013bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd2:	e8 cd ff ff ff       	call   c0013ba4 <Bus::~Bus()>
c0013bd7:	83 c4 10             	add    esp,0x10
c0013bda:	83 ec 08             	sub    esp,0x8
c0013bdd:	68 58 01 00 00       	push   0x158
c0013be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be6:	e8 09 f2 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	83 c4 0c             	add    esp,0xc
c0013bf1:	c3                   	ret    

c0013bf2 <Buzzer::Buzzer(char const*)>:
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf9:	83 ec 08             	sub    esp,0x8
c0013bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c00:	50                   	push   eax
c0013c01:	e8 e4 08 00 00       	call   c00144ea <Device::Device(char const*)>
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	ba fc aa 02 c0       	mov    edx,0xc002aafc
c0013c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c12:	89 10                	mov    DWORD PTR [eax],edx
c0013c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c18:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c26:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c30:	90                   	nop
c0013c31:	83 c4 0c             	add    esp,0xc
c0013c34:	c3                   	ret    
c0013c35:	90                   	nop

c0013c36 <Buzzer::~Buzzer()>:
c0013c36:	83 ec 0c             	sub    esp,0xc
c0013c39:	ba fc aa 02 c0       	mov    edx,0xc002aafc
c0013c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c42:	89 10                	mov    DWORD PTR [eax],edx
c0013c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	50                   	push   eax
c0013c4c:	e8 7b 05 00 00       	call   c00141cc <Device::~Device()>
c0013c51:	83 c4 10             	add    esp,0x10
c0013c54:	90                   	nop
c0013c55:	83 c4 0c             	add    esp,0xc
c0013c58:	c3                   	ret    
c0013c59:	90                   	nop

c0013c5a <Buzzer::~Buzzer()>:
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	83 ec 0c             	sub    esp,0xc
c0013c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c64:	e8 cd ff ff ff       	call   c0013c36 <Buzzer::~Buzzer()>
c0013c69:	83 c4 10             	add    esp,0x10
c0013c6c:	83 ec 08             	sub    esp,0x8
c0013c6f:	68 5c 01 00 00       	push   0x15c
c0013c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c78:	e8 77 f1 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0013c7d:	83 c4 10             	add    esp,0x10
c0013c80:	83 c4 0c             	add    esp,0xc
c0013c83:	c3                   	ret    

c0013c84 <Buzzer::stop()>:
c0013c84:	83 ec 14             	sub    esp,0x14
c0013c87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c8d:	6a 00                	push   0x0
c0013c8f:	50                   	push   eax
c0013c90:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c93:	83 c4 1c             	add    esp,0x1c
c0013c96:	c3                   	ret    

c0013c97 <beepThread(void*)>:
c0013c97:	53                   	push   ebx
c0013c98:	83 ec 08             	sub    esp,0x8
c0013c9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c9f:	e8 f8 a0 00 00       	call   c001dd9c <unlockScheduler()>
c0013ca4:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013ca9:	52                   	push   edx
c0013caa:	52                   	push   edx
c0013cab:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cb1:	52                   	push   edx
c0013cb2:	50                   	push   eax
c0013cb3:	e8 32 a6 00 00       	call   c001e2ea <nanoSleep(unsigned long long)>
c0013cb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cbb:	e8 c4 ff ff ff       	call   c0013c84 <Buzzer::stop()>
c0013cc0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013cc8:	83 c4 18             	add    esp,0x18
c0013ccb:	5b                   	pop    ebx
c0013ccc:	e9 5f a5 00 00       	jmp    c001e230 <blockTask(TaskState)>
c0013cd1:	90                   	nop

c0013cd2 <Buzzer::beep(int, int, bool)>:
c0013cd2:	57                   	push   edi
c0013cd3:	56                   	push   esi
c0013cd4:	53                   	push   ebx
c0013cd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cd9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cdd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ce1:	52                   	push   edx
c0013ce2:	52                   	push   edx
c0013ce3:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce9:	56                   	push   esi
c0013cea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013ced:	83 c4 10             	add    esp,0x10
c0013cf0:	89 f8                	mov    eax,edi
c0013cf2:	84 c0                	test   al,al
c0013cf4:	74 1f                	je     c0013d15 <Buzzer::beep(int, int, bool)+0x43>
c0013cf6:	50                   	push   eax
c0013cf7:	50                   	push   eax
c0013cf8:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cfe:	99                   	cdq    
c0013cff:	52                   	push   edx
c0013d00:	50                   	push   eax
c0013d01:	e8 e4 a5 00 00       	call   c001e2ea <nanoSleep(unsigned long long)>
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d0d:	5b                   	pop    ebx
c0013d0e:	5e                   	pop    esi
c0013d0f:	5f                   	pop    edi
c0013d10:	e9 6f ff ff ff       	jmp    c0013c84 <Buzzer::stop()>
c0013d15:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d1b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0013d20:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d28:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d2c:	c7 44 24 14 97 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c97
c0013d34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d38:	5b                   	pop    ebx
c0013d39:	5e                   	pop    esi
c0013d3a:	5f                   	pop    edi
c0013d3b:	e9 8c a1 00 00       	jmp    c001decc <Process::createThread(void (*)(void*), void*, int)>

c0013d40 <User::loadClockSettings(int)>:
c0013d40:	53                   	push   ebx
c0013d41:	83 ec 14             	sub    esp,0x14
c0013d44:	68 14 01 00 00       	push   0x114
c0013d49:	e8 f2 ba ff ff       	call   c000f840 <malloc>
c0013d4e:	83 c4 0c             	add    esp,0xc
c0013d51:	89 c3                	mov    ebx,eax
c0013d53:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c0013d59:	68 24 ab 02 c0       	push   0xc002ab24
c0013d5e:	50                   	push   eax
c0013d5f:	e8 c8 f6 ff ff       	call   c001342c <File::File(char const*, Process*)>
c0013d64:	58                   	pop    eax
c0013d65:	5a                   	pop    edx
c0013d66:	6a 01                	push   0x1
c0013d68:	53                   	push   ebx
c0013d69:	e8 22 f7 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c0013d6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d71:	e8 78 f7 ff ff       	call   c00134ee <File::close()>
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	85 db                	test   ebx,ebx
c0013d7b:	74 0f                	je     c0013d8c <User::loadClockSettings(int)+0x4c>
c0013d7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d86:	83 c4 08             	add    esp,0x8
c0013d89:	5b                   	pop    ebx
c0013d8a:	ff e0                	jmp    eax
c0013d8c:	83 c4 08             	add    esp,0x8
c0013d8f:	5b                   	pop    ebx
c0013d90:	c3                   	ret    
c0013d91:	90                   	nop

c0013d92 <Clock::Clock(char const*)>:
c0013d92:	83 ec 0c             	sub    esp,0xc
c0013d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d99:	83 ec 08             	sub    esp,0x8
c0013d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da0:	50                   	push   eax
c0013da1:	e8 44 07 00 00       	call   c00144ea <Device::Device(char const*)>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	ba 4c ab 02 c0       	mov    edx,0xc002ab4c
c0013dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db2:	89 10                	mov    DWORD PTR [eax],edx
c0013db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dc2:	90                   	nop
c0013dc3:	83 c4 0c             	add    esp,0xc
c0013dc6:	c3                   	ret    
c0013dc7:	90                   	nop

c0013dc8 <Clock::~Clock()>:
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	ba 4c ab 02 c0       	mov    edx,0xc002ab4c
c0013dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd4:	89 10                	mov    DWORD PTR [eax],edx
c0013dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dda:	83 ec 0c             	sub    esp,0xc
c0013ddd:	50                   	push   eax
c0013dde:	e8 e9 03 00 00       	call   c00141cc <Device::~Device()>
c0013de3:	83 c4 10             	add    esp,0x10
c0013de6:	90                   	nop
c0013de7:	83 c4 0c             	add    esp,0xc
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <Clock::~Clock()>:
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	83 ec 0c             	sub    esp,0xc
c0013df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df6:	e8 cd ff ff ff       	call   c0013dc8 <Clock::~Clock()>
c0013dfb:	83 c4 10             	add    esp,0x10
c0013dfe:	83 ec 08             	sub    esp,0x8
c0013e01:	68 58 01 00 00       	push   0x158
c0013e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e0a:	e8 e5 ef ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0013e0f:	83 c4 10             	add    esp,0x10
c0013e12:	83 c4 0c             	add    esp,0xc
c0013e15:	c3                   	ret    

c0013e16 <Clock::timeInSecondsLocal()>:
c0013e16:	53                   	push   ebx
c0013e17:	83 ec 14             	sub    esp,0x14
c0013e1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e20:	50                   	push   eax
c0013e21:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e24:	0f b6 0d 74 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e574
c0013e2b:	03 0d 78 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e578
c0013e31:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e37:	89 cb                	mov    ebx,ecx
c0013e39:	c1 fb 1f             	sar    ebx,0x1f
c0013e3c:	01 c8                	add    eax,ecx
c0013e3e:	11 da                	adc    edx,ebx
c0013e40:	83 c4 10             	add    esp,0x10
c0013e43:	31 c9                	xor    ecx,ecx
c0013e45:	80 3d 75 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e575,0x0
c0013e4c:	74 05                	je     c0013e53 <Clock::timeInSecondsLocal()+0x3d>
c0013e4e:	b9 08 07 00 00       	mov    ecx,0x708
c0013e53:	31 db                	xor    ebx,ebx
c0013e55:	01 c8                	add    eax,ecx
c0013e57:	11 da                	adc    edx,ebx
c0013e59:	83 c4 08             	add    esp,0x8
c0013e5c:	5b                   	pop    ebx
c0013e5d:	c3                   	ret    

c0013e5e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e5e:	57                   	push   edi
c0013e5f:	56                   	push   esi
c0013e60:	53                   	push   ebx
c0013e61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e6f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e72:	0f b6 05 74 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e574
c0013e79:	03 05 78 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e578
c0013e7f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e85:	99                   	cdq    
c0013e86:	29 c6                	sub    esi,eax
c0013e88:	19 d7                	sbb    edi,edx
c0013e8a:	89 f0                	mov    eax,esi
c0013e8c:	89 fa                	mov    edx,edi
c0013e8e:	31 f6                	xor    esi,esi
c0013e90:	80 3d 75 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e575,0x0
c0013e97:	74 05                	je     c0013e9e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e99:	be 08 07 00 00       	mov    esi,0x708
c0013e9e:	31 ff                	xor    edi,edi
c0013ea0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ea4:	29 f0                	sub    eax,esi
c0013ea6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eaa:	19 fa                	sbb    edx,edi
c0013eac:	89 d8                	mov    eax,ebx
c0013eae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013eb2:	5b                   	pop    ebx
c0013eb3:	5e                   	pop    esi
c0013eb4:	5f                   	pop    edi
c0013eb5:	ff e0                	jmp    eax

c0013eb7 <datetimeToSeconds(datetime_t)>:
c0013eb7:	55                   	push   ebp
c0013eb8:	57                   	push   edi
c0013eb9:	56                   	push   esi
c0013eba:	53                   	push   ebx
c0013ebb:	83 ec 14             	sub    esp,0x14
c0013ebe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ec2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ec6:	89 d3                	mov    ebx,edx
c0013ec8:	0f b6 c6             	movzx  eax,dh
c0013ecb:	c1 eb 10             	shr    ebx,0x10
c0013ece:	48                   	dec    eax
c0013ecf:	66 81 eb 6c 07       	sub    bx,0x76c
c0013ed4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ed8:	0f b6 f5             	movzx  esi,ch
c0013edb:	89 cf                	mov    edi,ecx
c0013edd:	6b f6 3c             	imul   esi,esi,0x3c
c0013ee0:	c1 ef 10             	shr    edi,0x10
c0013ee3:	0f b6 c9             	movzx  ecx,cl
c0013ee6:	89 f8                	mov    eax,edi
c0013ee8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013eee:	0f b6 f8             	movzx  edi,al
c0013ef1:	0f b6 d2             	movzx  edx,dl
c0013ef4:	01 fe                	add    esi,edi
c0013ef6:	01 f1                	add    ecx,esi
c0013ef8:	0f b7 f3             	movzx  esi,bx
c0013efb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013eff:	c1 f9 1f             	sar    ecx,0x1f
c0013f02:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f07:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f0b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f10:	8b 0c 8d 80 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5480]
c0013f17:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f1b:	76 29                	jbe    c0013f46 <datetimeToSeconds(datetime_t)+0x8f>
c0013f1d:	f6 c3 03             	test   bl,0x3
c0013f20:	75 24                	jne    c0013f46 <datetimeToSeconds(datetime_t)+0x8f>
c0013f22:	31 d2                	xor    edx,edx
c0013f24:	bf 64 00 00 00       	mov    edi,0x64
c0013f29:	89 d8                	mov    eax,ebx
c0013f2b:	66 f7 f7             	div    di
c0013f2e:	66 85 d2             	test   dx,dx
c0013f31:	75 12                	jne    c0013f45 <datetimeToSeconds(datetime_t)+0x8e>
c0013f33:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f39:	bf 90 01 00 00       	mov    edi,0x190
c0013f3e:	99                   	cdq    
c0013f3f:	f7 ff                	idiv   edi
c0013f41:	85 d2                	test   edx,edx
c0013f43:	75 01                	jne    c0013f46 <datetimeToSeconds(datetime_t)+0x8f>
c0013f45:	41                   	inc    ecx
c0013f46:	66 83 fb 46          	cmp    bx,0x46
c0013f4a:	76 45                	jbe    c0013f91 <datetimeToSeconds(datetime_t)+0xda>
c0013f4c:	bb 46 00 00 00       	mov    ebx,0x46
c0013f51:	bf 64 00 00 00       	mov    edi,0x64
c0013f56:	bd 90 01 00 00       	mov    ebp,0x190
c0013f5b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f60:	f6 c3 03             	test   bl,0x3
c0013f63:	75 23                	jne    c0013f88 <datetimeToSeconds(datetime_t)+0xd1>
c0013f65:	89 d8                	mov    eax,ebx
c0013f67:	99                   	cdq    
c0013f68:	f7 ff                	idiv   edi
c0013f6a:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f6f:	85 d2                	test   edx,edx
c0013f71:	75 15                	jne    c0013f88 <datetimeToSeconds(datetime_t)+0xd1>
c0013f73:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f79:	99                   	cdq    
c0013f7a:	f7 fd                	idiv   ebp
c0013f7c:	83 fa 01             	cmp    edx,0x1
c0013f7f:	19 c0                	sbb    eax,eax
c0013f81:	f7 d0                	not    eax
c0013f83:	05 6e 01 00 00       	add    eax,0x16e
c0013f88:	01 c1                	add    ecx,eax
c0013f8a:	43                   	inc    ebx
c0013f8b:	39 f3                	cmp    ebx,esi
c0013f8d:	7c cc                	jl     c0013f5b <datetimeToSeconds(datetime_t)+0xa4>
c0013f8f:	eb 35                	jmp    c0013fc6 <datetimeToSeconds(datetime_t)+0x10f>
c0013f91:	74 33                	je     c0013fc6 <datetimeToSeconds(datetime_t)+0x10f>
c0013f93:	b8 45 00 00 00       	mov    eax,0x45
c0013f98:	89 c2                	mov    edx,eax
c0013f9a:	83 e2 03             	and    edx,0x3
c0013f9d:	39 f0                	cmp    eax,esi
c0013f9f:	7e 0f                	jle    c0013fb0 <datetimeToSeconds(datetime_t)+0xf9>
c0013fa1:	83 fa 01             	cmp    edx,0x1
c0013fa4:	19 d2                	sbb    edx,edx
c0013fa6:	48                   	dec    eax
c0013fa7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fae:	eb e8                	jmp    c0013f98 <datetimeToSeconds(datetime_t)+0xe1>
c0013fb0:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fb5:	85 d2                	test   edx,edx
c0013fb7:	75 0b                	jne    c0013fc4 <datetimeToSeconds(datetime_t)+0x10d>
c0013fb9:	66 83 fb 01          	cmp    bx,0x1
c0013fbd:	19 c0                	sbb    eax,eax
c0013fbf:	05 6e 01 00 00       	add    eax,0x16e
c0013fc4:	29 c1                	sub    ecx,eax
c0013fc6:	b8 80 51 01 00       	mov    eax,0x15180
c0013fcb:	f7 e9                	imul   ecx
c0013fcd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fd1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013fd5:	83 c4 14             	add    esp,0x14
c0013fd8:	5b                   	pop    ebx
c0013fd9:	5e                   	pop    esi
c0013fda:	5f                   	pop    edi
c0013fdb:	5d                   	pop    ebp
c0013fdc:	c3                   	ret    
c0013fdd:	90                   	nop

c0013fde <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fde:	57                   	push   edi
c0013fdf:	56                   	push   esi
c0013fe0:	53                   	push   ebx
c0013fe1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fe5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fe7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013fea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ff2:	e8 c0 fe ff ff       	call   c0013eb7 <datetimeToSeconds(datetime_t)>
c0013ff7:	59                   	pop    ecx
c0013ff8:	0f b6 0d 74 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e574
c0013fff:	5b                   	pop    ebx
c0014000:	03 0d 78 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e578
c0014006:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001400c:	89 cb                	mov    ebx,ecx
c001400e:	c1 fb 1f             	sar    ebx,0x1f
c0014011:	29 c8                	sub    eax,ecx
c0014013:	19 da                	sbb    edx,ebx
c0014015:	31 c9                	xor    ecx,ecx
c0014017:	80 3d 75 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e575,0x0
c001401e:	74 05                	je     c0014025 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014020:	b9 08 07 00 00       	mov    ecx,0x708
c0014025:	31 db                	xor    ebx,ebx
c0014027:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001402b:	29 c8                	sub    eax,ecx
c001402d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014031:	19 da                	sbb    edx,ebx
c0014033:	89 f8                	mov    eax,edi
c0014035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014039:	5b                   	pop    ebx
c001403a:	5e                   	pop    esi
c001403b:	5f                   	pop    edi
c001403c:	ff e0                	jmp    eax

c001403e <secondsToDatetime(unsigned long long)>:
c001403e:	55                   	push   ebp
c001403f:	57                   	push   edi
c0014040:	56                   	push   esi
c0014041:	53                   	push   ebx
c0014042:	83 ec 1c             	sub    esp,0x1c
c0014045:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014049:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001404d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014051:	6a 00                	push   0x0
c0014053:	68 80 51 01 00       	push   0x15180
c0014058:	55                   	push   ebp
c0014059:	57                   	push   edi
c001405a:	e8 1d 29 01 00       	call   c002697c <__udivdi3>
c001405f:	83 c4 10             	add    esp,0x10
c0014062:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001406c:	6a 00                	push   0x0
c001406e:	68 80 51 01 00       	push   0x15180
c0014073:	55                   	push   ebp
c0014074:	57                   	push   edi
c0014075:	bf 10 0e 00 00       	mov    edi,0xe10
c001407a:	e8 fd 29 01 00       	call   c0026a7c <__umoddi3>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	99                   	cdq    
c0014083:	f7 ff                	idiv   edi
c0014085:	bf 3c 00 00 00       	mov    edi,0x3c
c001408a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001408d:	89 d0                	mov    eax,edx
c001408f:	99                   	cdq    
c0014090:	f7 ff                	idiv   edi
c0014092:	85 db                	test   ebx,ebx
c0014094:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014097:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001409a:	79 11                	jns    c00140ad <secondsToDatetime(unsigned long long)+0x6f>
c001409c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140a0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140a6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140ab:	eb 07                	jmp    c00140b4 <secondsToDatetime(unsigned long long)+0x76>
c00140ad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140b2:	89 d8                	mov    eax,ebx
c00140b4:	bf b4 05 00 00       	mov    edi,0x5b4
c00140b9:	99                   	cdq    
c00140ba:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140bf:	f7 f9                	idiv   ecx
c00140c1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140ca:	31 d2                	xor    edx,edx
c00140cc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140d4:	01 c3                	add    ebx,eax
c00140d6:	89 d8                	mov    eax,ebx
c00140d8:	f7 f1                	div    ecx
c00140da:	31 d2                	xor    edx,edx
c00140dc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140df:	89 d8                	mov    eax,ebx
c00140e1:	f7 f7                	div    edi
c00140e3:	31 d2                	xor    edx,edx
c00140e5:	29 c1                	sub    ecx,eax
c00140e7:	89 d8                	mov    eax,ebx
c00140e9:	f7 f5                	div    ebp
c00140eb:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140f0:	29 c1                	sub    ecx,eax
c00140f2:	31 d2                	xor    edx,edx
c00140f4:	89 c8                	mov    eax,ecx
c00140f6:	f7 f5                	div    ebp
c00140f8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014101:	31 d2                	xor    edx,edx
c0014103:	89 c8                	mov    eax,ecx
c0014105:	f7 f5                	div    ebp
c0014107:	31 d2                	xor    edx,edx
c0014109:	01 c3                	add    ebx,eax
c001410b:	89 c8                	mov    eax,ecx
c001410d:	f7 f7                	div    edi
c001410f:	bf 99 00 00 00       	mov    edi,0x99
c0014114:	29 c3                	sub    ebx,eax
c0014116:	31 d2                	xor    edx,edx
c0014118:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014120:	29 c3                	sub    ebx,eax
c0014122:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014125:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014128:	bb 05 00 00 00       	mov    ebx,0x5
c001412d:	83 c1 02             	add    ecx,0x2
c0014130:	89 c8                	mov    eax,ecx
c0014132:	f7 f7                	div    edi
c0014134:	31 d2                	xor    edx,edx
c0014136:	89 c7                	mov    edi,eax
c0014138:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001413e:	83 c0 02             	add    eax,0x2
c0014141:	f7 f3                	div    ebx
c0014143:	89 eb                	mov    ebx,ebp
c0014145:	29 c3                	sub    ebx,eax
c0014147:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001414d:	88 1e                	mov    BYTE PTR [esi],bl
c001414f:	19 c0                	sbb    eax,eax
c0014151:	31 d2                	xor    edx,edx
c0014153:	83 e0 0c             	and    eax,0xc
c0014156:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001415a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014162:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014166:	83 f9 01             	cmp    ecx,0x1
c0014169:	0f 96 c2             	setbe  dl
c001416c:	41                   	inc    ecx
c001416d:	01 d0                	add    eax,edx
c001416f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014172:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014176:	83 c4 1c             	add    esp,0x1c
c0014179:	89 f0                	mov    eax,esi
c001417b:	5b                   	pop    ebx
c001417c:	5e                   	pop    esi
c001417d:	5f                   	pop    edi
c001417e:	5d                   	pop    ebp
c001417f:	c2 04 00             	ret    0x4

c0014182 <Clock::timeInDatetimeLocal()>:
c0014182:	53                   	push   ebx
c0014183:	83 ec 14             	sub    esp,0x14
c0014186:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001418a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001418e:	e8 83 fc ff ff       	call   c0013e16 <Clock::timeInSecondsLocal()>
c0014193:	83 c4 0c             	add    esp,0xc
c0014196:	52                   	push   edx
c0014197:	50                   	push   eax
c0014198:	53                   	push   ebx
c0014199:	e8 a0 fe ff ff       	call   c001403e <secondsToDatetime(unsigned long long)>
c001419e:	89 d8                	mov    eax,ebx
c00141a0:	83 c4 14             	add    esp,0x14
c00141a3:	5b                   	pop    ebx
c00141a4:	c2 04 00             	ret    0x4
c00141a7:	90                   	nop

c00141a8 <Device::hibernate()>:
c00141a8:	c3                   	ret    
c00141a9:	90                   	nop

c00141aa <Device::wake()>:
c00141aa:	c3                   	ret    
c00141ab:	90                   	nop

c00141ac <Device::detect()>:
c00141ac:	c3                   	ret    
c00141ad:	90                   	nop

c00141ae <Device::disableLegacy()>:
c00141ae:	c3                   	ret    
c00141af:	90                   	nop

c00141b0 <Device::powerSaving(PowerSavingLevel)>:
c00141b0:	c3                   	ret    
c00141b1:	90                   	nop

c00141b2 <DriverlessDevice::close(int, int, void*)>:
c00141b2:	31 c0                	xor    eax,eax
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <DriverlessDevice::detect()>:
c00141b6:	c3                   	ret    
c00141b7:	90                   	nop

c00141b8 <DriverlessDevice::open(int, int, void*)>:
c00141b8:	83 ec 18             	sub    esp,0x18
c00141bb:	68 b0 ab 02 c0       	push   0xc002abb0
c00141c0:	e8 b0 63 00 00       	call   c001a575 <Krnl::panic(char const*)>
c00141c5:	83 c8 ff             	or     eax,0xffffffff
c00141c8:	83 c4 1c             	add    esp,0x1c
c00141cb:	c3                   	ret    

c00141cc <Device::~Device()>:
c00141cc:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00141d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d5:	89 10                	mov    DWORD PTR [eax],edx
c00141d7:	90                   	nop
c00141d8:	c3                   	ret    
c00141d9:	90                   	nop

c00141da <Device::~Device()>:
c00141da:	83 ec 0c             	sub    esp,0xc
c00141dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141e1:	e8 e6 ff ff ff       	call   c00141cc <Device::~Device()>
c00141e6:	83 c4 04             	add    esp,0x4
c00141e9:	83 ec 08             	sub    esp,0x8
c00141ec:	68 58 01 00 00       	push   0x158
c00141f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f5:	e8 fa eb ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00141fa:	83 c4 10             	add    esp,0x10
c00141fd:	83 c4 0c             	add    esp,0xc
c0014200:	c3                   	ret    
c0014201:	90                   	nop

c0014202 <Device::findAndLoadDriver()>:
c0014202:	c3                   	ret    
c0014203:	90                   	nop

c0014204 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014204:	57                   	push   edi
c0014205:	b9 09 00 00 00       	mov    ecx,0x9
c001420a:	56                   	push   esi
c001420b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001420f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014213:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001421d:	81 c7 18 01 00 00    	add    edi,0x118
c0014223:	fc                   	cld    
c0014224:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014226:	5e                   	pop    esi
c0014227:	5f                   	pop    edi
c0014228:	c3                   	ret    
c0014229:	90                   	nop

c001422a <Device::preOpenACPI(void*, char*, char*)>:
c001422a:	56                   	push   esi
c001422b:	53                   	push   ebx
c001422c:	83 ec 08             	sub    esp,0x8
c001422f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014233:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014237:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014241:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014245:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001424b:	6a 1e                	push   0x1e
c001424d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014253:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014257:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001425d:	50                   	push   eax
c001425e:	e8 e1 c4 fe ff       	call   c0000744 <memcpy>
c0014263:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014267:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001426b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014273:	83 c4 14             	add    esp,0x14
c0014276:	5b                   	pop    ebx
c0014277:	5e                   	pop    esi
c0014278:	e9 c7 c4 fe ff       	jmp    c0000744 <memcpy>
c001427d:	90                   	nop

c001427e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001427e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014282:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014287:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001428e:	75 0b                	jne    c001429b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014290:	8b 00                	mov    eax,DWORD PTR [eax]
c0014292:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014296:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014299:	eb 1e                	jmp    c00142b9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001429b:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00142a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142a6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142b6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142b9:	ff e0                	jmp    eax
c00142bb:	90                   	nop

c00142bc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142c0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142c5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142cc:	75 0b                	jne    c00142d9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00142d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142d4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142d7:	eb 1e                	jmp    c00142f7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142d9:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00142de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142f4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142f7:	ff e0                	jmp    eax
c00142f9:	90                   	nop

c00142fa <Device::addChild(Device*)>:
c00142fa:	53                   	push   ebx
c00142fb:	83 ec 08             	sub    esp,0x8
c00142fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014302:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014306:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001430c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014312:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014314:	85 d2                	test   edx,edx
c0014316:	74 04                	je     c001431c <Device::addChild(Device*)+0x22>
c0014318:	89 d3                	mov    ebx,edx
c001431a:	eb f6                	jmp    c0014312 <Device::addChild(Device*)+0x18>
c001431c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001431f:	83 ec 0c             	sub    esp,0xc
c0014322:	6a 08                	push   0x8
c0014324:	e8 17 b5 ff ff       	call   c000f840 <malloc>
c0014329:	89 03                	mov    DWORD PTR [ebx],eax
c001432b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014331:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014338:	83 c4 18             	add    esp,0x18
c001433b:	5b                   	pop    ebx
c001433c:	c3                   	ret    
c001433d:	90                   	nop

c001433e <Device::removeAllChildren()>:
c001433e:	56                   	push   esi
c001433f:	53                   	push   ebx
c0014340:	52                   	push   edx
c0014341:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014345:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001434b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001434e:	74 17                	je     c0014367 <Device::removeAllChildren()+0x29>
c0014350:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014353:	85 c0                	test   eax,eax
c0014355:	74 0c                	je     c0014363 <Device::removeAllChildren()+0x25>
c0014357:	83 ec 0c             	sub    esp,0xc
c001435a:	8b 10                	mov    edx,DWORD PTR [eax]
c001435c:	50                   	push   eax
c001435d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014360:	83 c4 10             	add    esp,0x10
c0014363:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014365:	eb e4                	jmp    c001434b <Device::removeAllChildren()+0xd>
c0014367:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001436d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014373:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014379:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014380:	58                   	pop    eax
c0014381:	5b                   	pop    ebx
c0014382:	5e                   	pop    esi
c0014383:	c3                   	ret    

c0014384 <Device::hibernateAll()>:
c0014384:	53                   	push   ebx
c0014385:	83 ec 14             	sub    esp,0x14
c0014388:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001438c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001438e:	53                   	push   ebx
c001438f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014392:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014398:	83 c4 10             	add    esp,0x10
c001439b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001439e:	74 0f                	je     c00143af <Device::hibernateAll()+0x2b>
c00143a0:	83 ec 0c             	sub    esp,0xc
c00143a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143a6:	e8 d9 ff ff ff       	call   c0014384 <Device::hibernateAll()>
c00143ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ad:	eb e9                	jmp    c0014398 <Device::hibernateAll()+0x14>
c00143af:	83 c4 08             	add    esp,0x8
c00143b2:	5b                   	pop    ebx
c00143b3:	c3                   	ret    

c00143b4 <Device::wakeAll()>:
c00143b4:	53                   	push   ebx
c00143b5:	83 ec 14             	sub    esp,0x14
c00143b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143be:	53                   	push   ebx
c00143bf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143c8:	83 c4 10             	add    esp,0x10
c00143cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ce:	74 0f                	je     c00143df <Device::wakeAll()+0x2b>
c00143d0:	83 ec 0c             	sub    esp,0xc
c00143d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143d6:	e8 d9 ff ff ff       	call   c00143b4 <Device::wakeAll()>
c00143db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143dd:	eb e9                	jmp    c00143c8 <Device::wakeAll()+0x14>
c00143df:	83 c4 08             	add    esp,0x8
c00143e2:	5b                   	pop    ebx
c00143e3:	c3                   	ret    

c00143e4 <Device::detectAll()>:
c00143e4:	53                   	push   ebx
c00143e5:	83 ec 14             	sub    esp,0x14
c00143e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ee:	53                   	push   ebx
c00143ef:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f8:	83 c4 10             	add    esp,0x10
c00143fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143fe:	74 0f                	je     c001440f <Device::detectAll()+0x2b>
c0014400:	83 ec 0c             	sub    esp,0xc
c0014403:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014406:	e8 d9 ff ff ff       	call   c00143e4 <Device::detectAll()>
c001440b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001440d:	eb e9                	jmp    c00143f8 <Device::detectAll()+0x14>
c001440f:	83 c4 08             	add    esp,0x8
c0014412:	5b                   	pop    ebx
c0014413:	c3                   	ret    

c0014414 <Device::disableLegacyAll()>:
c0014414:	53                   	push   ebx
c0014415:	83 ec 14             	sub    esp,0x14
c0014418:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001441c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001441e:	53                   	push   ebx
c001441f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014422:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014428:	83 c4 10             	add    esp,0x10
c001442b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001442e:	74 0f                	je     c001443f <Device::disableLegacyAll()+0x2b>
c0014430:	83 ec 0c             	sub    esp,0xc
c0014433:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014436:	e8 d9 ff ff ff       	call   c0014414 <Device::disableLegacyAll()>
c001443b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001443d:	eb e9                	jmp    c0014428 <Device::disableLegacyAll()+0x14>
c001443f:	83 c4 08             	add    esp,0x8
c0014442:	5b                   	pop    ebx
c0014443:	c3                   	ret    

c0014444 <Device::loadDriversForAll()>:
c0014444:	53                   	push   ebx
c0014445:	83 ec 08             	sub    esp,0x8
c0014448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001444c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014452:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014454:	85 db                	test   ebx,ebx
c0014456:	74 12                	je     c001446a <Device::loadDriversForAll()+0x26>
c0014458:	83 ec 0c             	sub    esp,0xc
c001445b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001445e:	e8 e1 ff ff ff       	call   c0014444 <Device::loadDriversForAll()>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	89 d8                	mov    eax,ebx
c0014468:	eb e8                	jmp    c0014452 <Device::loadDriversForAll()+0xe>
c001446a:	83 c4 08             	add    esp,0x8
c001446d:	5b                   	pop    ebx
c001446e:	c3                   	ret    
c001446f:	90                   	nop

c0014470 <Device::closeAll()>:
c0014470:	53                   	push   ebx
c0014471:	83 ec 08             	sub    esp,0x8
c0014474:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014478:	8b 03                	mov    eax,DWORD PTR [ebx]
c001447a:	6a 00                	push   0x0
c001447c:	6a 00                	push   0x0
c001447e:	6a 00                	push   0x0
c0014480:	53                   	push   ebx
c0014481:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014484:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001448a:	83 c4 10             	add    esp,0x10
c001448d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014490:	74 0f                	je     c00144a1 <Device::closeAll()+0x31>
c0014492:	83 ec 0c             	sub    esp,0xc
c0014495:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014498:	e8 d3 ff ff ff       	call   c0014470 <Device::closeAll()>
c001449d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001449f:	eb e9                	jmp    c001448a <Device::closeAll()+0x1a>
c00144a1:	83 c4 08             	add    esp,0x8
c00144a4:	5b                   	pop    ebx
c00144a5:	c3                   	ret    

c00144a6 <Device::powerSavingAll(PowerSavingLevel)>:
c00144a6:	56                   	push   esi
c00144a7:	53                   	push   ebx
c00144a8:	83 ec 0c             	sub    esp,0xc
c00144ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b5:	56                   	push   esi
c00144b6:	53                   	push   ebx
c00144b7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c0:	83 c4 10             	add    esp,0x10
c00144c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144c6:	74 0f                	je     c00144d7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144c8:	52                   	push   edx
c00144c9:	52                   	push   edx
c00144ca:	56                   	push   esi
c00144cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144ce:	e8 d3 ff ff ff       	call   c00144a6 <Device::powerSavingAll(PowerSavingLevel)>
c00144d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144d5:	eb e9                	jmp    c00144c0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144d7:	58                   	pop    eax
c00144d8:	5b                   	pop    ebx
c00144d9:	5e                   	pop    esi
c00144da:	c3                   	ret    
c00144db:	90                   	nop

c00144dc <Device::setName(char const*)>:
c00144dc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144e4:	e9 4b c3 fe ff       	jmp    c0000834 <strcpy>
c00144e9:	90                   	nop

c00144ea <Device::Device(char const*)>:
c00144ea:	83 ec 1c             	sub    esp,0x1c
c00144ed:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00144f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f6:	89 10                	mov    DWORD PTR [eax],edx
c00144f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014518:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014526:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014530:	83 ec 08             	sub    esp,0x8
c0014533:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001453b:	e8 9c ff ff ff       	call   c00144dc <Device::setName(char const*)>
c0014540:	83 c4 10             	add    esp,0x10
c0014543:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001454b:	83 ec 0c             	sub    esp,0xc
c001454e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014552:	e8 e9 b2 ff ff       	call   c000f840 <malloc>
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014560:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014567:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001456b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014575:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001457b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014585:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001458b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014596:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001459d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ac:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ba:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145e0:	90                   	nop
c00145e1:	83 c4 1c             	add    esp,0x1c
c00145e4:	c3                   	ret    
c00145e5:	90                   	nop

c00145e6 <Device::getName()>:
c00145e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145ea:	05 d0 00 00 00       	add    eax,0xd0
c00145ef:	c3                   	ret    

c00145f0 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145f0:	83 ec 0c             	sub    esp,0xc
c00145f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f7:	83 ec 08             	sub    esp,0x8
c00145fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145fe:	50                   	push   eax
c00145ff:	e8 e6 fe ff ff       	call   c00144ea <Device::Device(char const*)>
c0014604:	83 c4 10             	add    esp,0x10
c0014607:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c001460c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014610:	89 10                	mov    DWORD PTR [eax],edx
c0014612:	90                   	nop
c0014613:	83 c4 0c             	add    esp,0xc
c0014616:	c3                   	ret    
c0014617:	90                   	nop

c0014618 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014618:	57                   	push   edi
c0014619:	56                   	push   esi
c001461a:	53                   	push   ebx
c001461b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001461f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014623:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014627:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001462d:	75 0c                	jne    c001463b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001462f:	52                   	push   edx
c0014630:	52                   	push   edx
c0014631:	53                   	push   ebx
c0014632:	56                   	push   esi
c0014633:	e8 82 42 01 00       	call   c00288ba <LinkedList<Device>::addElement(Device*)>
c0014638:	83 c4 10             	add    esp,0x10
c001463b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014641:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014644:	74 12                	je     c0014658 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014646:	50                   	push   eax
c0014647:	57                   	push   edi
c0014648:	56                   	push   esi
c0014649:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001464c:	e8 c7 ff ff ff       	call   c0014618 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014651:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014653:	83 c4 10             	add    esp,0x10
c0014656:	eb e9                	jmp    c0014641 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014658:	5b                   	pop    ebx
c0014659:	5e                   	pop    esi
c001465a:	5f                   	pop    edi
c001465b:	c3                   	ret    

c001465c <getDevicesOfType(DeviceType)>:
c001465c:	53                   	push   ebx
c001465d:	83 ec 14             	sub    esp,0x14
c0014660:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014664:	53                   	push   ebx
c0014665:	e8 2c 43 01 00       	call   c0028996 <LinkedList<Device>::LinkedList()>
c001466a:	83 c4 0c             	add    esp,0xc
c001466d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014671:	53                   	push   ebx
c0014672:	ff 35 e8 e3 02 c0    	push   DWORD PTR ds:0xc002e3e8
c0014678:	e8 9b ff ff ff       	call   c0014618 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001467d:	89 d8                	mov    eax,ebx
c001467f:	83 c4 18             	add    esp,0x18
c0014682:	5b                   	pop    ebx
c0014683:	c2 04 00             	ret    0x4

c0014686 <HardDiskController::HardDiskController(char const*)>:
c0014686:	83 ec 0c             	sub    esp,0xc
c0014689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001468d:	83 ec 08             	sub    esp,0x8
c0014690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014694:	50                   	push   eax
c0014695:	e8 50 fe ff ff       	call   c00144ea <Device::Device(char const*)>
c001469a:	83 c4 10             	add    esp,0x10
c001469d:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c00146a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a6:	89 10                	mov    DWORD PTR [eax],edx
c00146a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ac:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146b6:	90                   	nop
c00146b7:	83 c4 0c             	add    esp,0xc
c00146ba:	c3                   	ret    
c00146bb:	90                   	nop

c00146bc <HardDiskController::~HardDiskController()>:
c00146bc:	83 ec 0c             	sub    esp,0xc
c00146bf:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c00146c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c8:	89 10                	mov    DWORD PTR [eax],edx
c00146ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ce:	83 ec 0c             	sub    esp,0xc
c00146d1:	50                   	push   eax
c00146d2:	e8 f5 fa ff ff       	call   c00141cc <Device::~Device()>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	90                   	nop
c00146db:	83 c4 0c             	add    esp,0xc
c00146de:	c3                   	ret    
c00146df:	90                   	nop

c00146e0 <HardDiskController::~HardDiskController()>:
c00146e0:	83 ec 0c             	sub    esp,0xc
c00146e3:	83 ec 0c             	sub    esp,0xc
c00146e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ea:	e8 cd ff ff ff       	call   c00146bc <HardDiskController::~HardDiskController()>
c00146ef:	83 c4 10             	add    esp,0x10
c00146f2:	83 ec 08             	sub    esp,0x8
c00146f5:	68 58 01 00 00       	push   0x158
c00146fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146fe:	e8 f1 e6 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0014703:	83 c4 10             	add    esp,0x10
c0014706:	83 c4 0c             	add    esp,0xc
c0014709:	c3                   	ret    

c001470a <PhysicalDisk::eject()>:
c001470a:	83 ec 18             	sub    esp,0x18
c001470d:	68 54 ac 02 c0       	push   0xc002ac54
c0014712:	e8 bd e7 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014717:	83 c8 ff             	or     eax,0xffffffff
c001471a:	83 c4 1c             	add    esp,0x1c
c001471d:	c3                   	ret    

c001471e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001471e:	83 ec 0c             	sub    esp,0xc
c0014721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014725:	83 ec 08             	sub    esp,0x8
c0014728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001472c:	50                   	push   eax
c001472d:	e8 b8 fd ff ff       	call   c00144ea <Device::Device(char const*)>
c0014732:	83 c4 10             	add    esp,0x10
c0014735:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c001473a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473e:	89 10                	mov    DWORD PTR [eax],edx
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001474b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014768:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001476c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014776:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014780:	90                   	nop
c0014781:	83 c4 0c             	add    esp,0xc
c0014784:	c3                   	ret    
c0014785:	90                   	nop

c0014786 <PhysicalDisk::startCache()>:
c0014786:	56                   	push   esi
c0014787:	53                   	push   ebx
c0014788:	83 ec 10             	sub    esp,0x10
c001478b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001478f:	6a 44                	push   0x44
c0014791:	e8 aa b0 ff ff       	call   c000f840 <malloc>
c0014796:	89 c6                	mov    esi,eax
c0014798:	58                   	pop    eax
c0014799:	5a                   	pop    edx
c001479a:	53                   	push   ebx
c001479b:	56                   	push   esi
c001479c:	e8 29 27 00 00       	call   c0016eca <VCache::VCache(PhysicalDisk*)>
c00147a1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147a7:	83 c4 14             	add    esp,0x14
c00147aa:	5b                   	pop    ebx
c00147ab:	5e                   	pop    esi
c00147ac:	c3                   	ret    
c00147ad:	90                   	nop

c00147ae <PhysicalDisk::~PhysicalDisk()>:
c00147ae:	83 ec 0c             	sub    esp,0xc
c00147b1:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c00147b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ba:	89 10                	mov    DWORD PTR [eax],edx
c00147bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c0:	83 ec 0c             	sub    esp,0xc
c00147c3:	50                   	push   eax
c00147c4:	e8 03 fa ff ff       	call   c00141cc <Device::~Device()>
c00147c9:	83 c4 10             	add    esp,0x10
c00147cc:	90                   	nop
c00147cd:	83 c4 0c             	add    esp,0xc
c00147d0:	c3                   	ret    
c00147d1:	90                   	nop

c00147d2 <PhysicalDisk::~PhysicalDisk()>:
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	83 ec 0c             	sub    esp,0xc
c00147d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147dc:	e8 cd ff ff ff       	call   c00147ae <PhysicalDisk::~PhysicalDisk()>
c00147e1:	83 c4 10             	add    esp,0x10
c00147e4:	83 ec 08             	sub    esp,0x8
c00147e7:	68 6c 01 00 00       	push   0x16c
c00147ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f0:	e8 ff e5 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00147f5:	83 c4 10             	add    esp,0x10
c00147f8:	83 c4 0c             	add    esp,0xc
c00147fb:	c3                   	ret    

c00147fc <FPU::FPU(char const*)>:
c00147fc:	83 ec 0c             	sub    esp,0xc
c00147ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014803:	83 ec 08             	sub    esp,0x8
c0014806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001480a:	50                   	push   eax
c001480b:	e8 da fc ff ff       	call   c00144ea <Device::Device(char const*)>
c0014810:	83 c4 10             	add    esp,0x10
c0014813:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0014818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481c:	89 10                	mov    DWORD PTR [eax],edx
c001481e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014822:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001482c:	90                   	nop
c001482d:	83 c4 0c             	add    esp,0xc
c0014830:	c3                   	ret    
c0014831:	90                   	nop

c0014832 <FPU::~FPU()>:
c0014832:	83 ec 0c             	sub    esp,0xc
c0014835:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c001483a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483e:	89 10                	mov    DWORD PTR [eax],edx
c0014840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014844:	83 ec 0c             	sub    esp,0xc
c0014847:	50                   	push   eax
c0014848:	e8 7f f9 ff ff       	call   c00141cc <Device::~Device()>
c001484d:	83 c4 10             	add    esp,0x10
c0014850:	90                   	nop
c0014851:	83 c4 0c             	add    esp,0xc
c0014854:	c3                   	ret    
c0014855:	90                   	nop

c0014856 <FPU::~FPU()>:
c0014856:	83 ec 0c             	sub    esp,0xc
c0014859:	83 ec 0c             	sub    esp,0xc
c001485c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014860:	e8 cd ff ff ff       	call   c0014832 <FPU::~FPU()>
c0014865:	83 c4 10             	add    esp,0x10
c0014868:	83 ec 08             	sub    esp,0x8
c001486b:	68 58 01 00 00       	push   0x158
c0014870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014874:	e8 7b e5 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0014879:	83 c4 10             	add    esp,0x10
c001487c:	83 c4 0c             	add    esp,0xc
c001487f:	c3                   	ret    

c0014880 <setupFPU()>:
c0014880:	53                   	push   ebx
c0014881:	83 ec 08             	sub    esp,0x8
c0014884:	8b 15 e8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3e8
c001488a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014891:	74 19                	je     c00148ac <setupFPU()+0x2c>
c0014893:	83 ec 0c             	sub    esp,0xc
c0014896:	68 58 01 00 00       	push   0x158
c001489b:	e8 a0 af ff ff       	call   c000f840 <malloc>
c00148a0:	89 c3                	mov    ebx,eax
c00148a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00148a5:	e8 56 0c 01 00       	call   c0025500 <AVX::AVX()>
c00148aa:	eb 5b                	jmp    c0014907 <setupFPU()+0x87>
c00148ac:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148b2:	84 c0                	test   al,al
c00148b4:	79 19                	jns    c00148cf <setupFPU()+0x4f>
c00148b6:	83 ec 0c             	sub    esp,0xc
c00148b9:	68 58 01 00 00       	push   0x158
c00148be:	e8 7d af ff ff       	call   c000f840 <malloc>
c00148c3:	89 c3                	mov    ebx,eax
c00148c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00148c8:	e8 59 0d 01 00       	call   c0025626 <SSE::SSE()>
c00148cd:	eb 38                	jmp    c0014907 <setupFPU()+0x87>
c00148cf:	a8 20                	test   al,0x20
c00148d1:	74 19                	je     c00148ec <setupFPU()+0x6c>
c00148d3:	83 ec 0c             	sub    esp,0xc
c00148d6:	68 58 01 00 00       	push   0x158
c00148db:	e8 60 af ff ff       	call   c000f840 <malloc>
c00148e0:	89 c3                	mov    ebx,eax
c00148e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e5:	e8 a6 0c 01 00       	call   c0025590 <MMX::MMX()>
c00148ea:	eb 1b                	jmp    c0014907 <setupFPU()+0x87>
c00148ec:	a8 10                	test   al,0x10
c00148ee:	74 1c                	je     c001490c <setupFPU()+0x8c>
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	68 58 01 00 00       	push   0x158
c00148f8:	e8 43 af ff ff       	call   c000f840 <malloc>
c00148fd:	89 c3                	mov    ebx,eax
c00148ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0014902:	e8 ad 0d 01 00       	call   c00256b4 <x87::x87()>
c0014907:	83 c4 10             	add    esp,0x10
c001490a:	eb 24                	jmp    c0014930 <setupFPU()+0xb0>
c001490c:	83 e0 ef             	and    eax,0xffffffef
c001490f:	83 ec 0c             	sub    esp,0xc
c0014912:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014918:	68 b4 ac 02 c0       	push   0xc002acb4
c001491d:	e8 b2 e5 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014922:	0f 20 c0             	mov    eax,cr0
c0014925:	83 c8 04             	or     eax,0x4
c0014928:	0f 22 c0             	mov    cr0,eax
c001492b:	31 db                	xor    ebx,ebx
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	89 d8                	mov    eax,ebx
c0014932:	83 c4 08             	add    esp,0x8
c0014935:	5b                   	pop    ebx
c0014936:	c3                   	ret    
c0014937:	90                   	nop

c0014938 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014938:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001493c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014940:	c1 e0 04             	shl    eax,0x4
c0014943:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014947:	8d 50 10             	lea    edx,[eax+0x10]
c001494a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014950:	74 08                	je     c001495a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014952:	83 c0 04             	add    eax,0x4
c0014955:	39 d0                	cmp    eax,edx
c0014957:	75 f1                	jne    c001494a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014959:	c3                   	ret    
c001495a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014964:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001496e:	eb e2                	jmp    c0014952 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014970 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014970:	57                   	push   edi
c0014971:	31 c0                	xor    eax,eax
c0014973:	56                   	push   esi
c0014974:	53                   	push   ebx
c0014975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014979:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001497d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014981:	89 da                	mov    edx,ebx
c0014983:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014987:	c1 e2 04             	shl    edx,0x4
c001498a:	01 ca                	add    edx,ecx
c001498c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014994:	74 16                	je     c00149ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014996:	40                   	inc    eax
c0014997:	83 f8 04             	cmp    eax,0x4
c001499a:	75 f0                	jne    c001498c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001499c:	c7 44 24 10 f8 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002acf8
c00149a4:	5b                   	pop    ebx
c00149a5:	5e                   	pop    esi
c00149a6:	5f                   	pop    edi
c00149a7:	e9 c9 5b 00 00       	jmp    c001a575 <Krnl::panic(char const*)>
c00149ac:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149af:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149b2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149b8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149be:	5b                   	pop    ebx
c00149bf:	5e                   	pop    esi
c00149c0:	5f                   	pop    edi
c00149c1:	c3                   	ret    

c00149c2 <doubleFault(regs*, void*)>:
c00149c2:	55                   	push   ebp
c00149c3:	89 e5                	mov    ebp,esp
c00149c5:	83 ec 08             	sub    esp,0x8
c00149c8:	83 ec 0c             	sub    esp,0xc
c00149cb:	68 33 ad 02 c0       	push   0xc002ad33
c00149d0:	e8 a0 5b 00 00       	call   c001a575 <Krnl::panic(char const*)>
c00149d5:	83 c4 10             	add    esp,0x10
c00149d8:	90                   	nop
c00149d9:	c9                   	leave  
c00149da:	c3                   	ret    
c00149db:	90                   	nop

c00149dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149dc:	56                   	push   esi
c00149dd:	53                   	push   ebx
c00149de:	50                   	push   eax
c00149df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149e7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149ec:	75 35                	jne    c0014a23 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149ee:	8d 43 20             	lea    eax,[ebx+0x20]
c00149f1:	31 d2                	xor    edx,edx
c00149f3:	89 c1                	mov    ecx,eax
c00149f5:	c1 e1 04             	shl    ecx,0x4
c00149f8:	01 f1                	add    ecx,esi
c00149fa:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a02:	74 3e                	je     c0014a42 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a04:	42                   	inc    edx
c0014a05:	83 fa 04             	cmp    edx,0x4
c0014a08:	75 f0                	jne    c00149fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a0a:	83 ec 0c             	sub    esp,0xc
c0014a0d:	68 78 ad 02 c0       	push   0xc002ad78
c0014a12:	e8 5e 5b 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0014a17:	83 c4 10             	add    esp,0x10
c0014a1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a1f:	5a                   	pop    edx
c0014a20:	5b                   	pop    ebx
c0014a21:	5e                   	pop    esi
c0014a22:	c3                   	ret    
c0014a23:	83 ec 0c             	sub    esp,0xc
c0014a26:	56                   	push   esi
c0014a27:	e8 ba fb ff ff       	call   c00145e6 <Device::getName()>
c0014a2c:	83 c4 10             	add    esp,0x10
c0014a2f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a32:	75 ba                	jne    c00149ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a34:	83 fb 0f             	cmp    ebx,0xf
c0014a37:	7f 29                	jg     c0014a62 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a39:	0f b6 9b 40 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd29c0]
c0014a40:	eb ac                	jmp    c00149ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a42:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a49:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a4c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a52:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a56:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a5c:	89 d8                	mov    eax,ebx
c0014a5e:	5a                   	pop    edx
c0014a5f:	5b                   	pop    ebx
c0014a60:	5e                   	pop    esi
c0014a61:	c3                   	ret    
c0014a62:	83 ec 0c             	sub    esp,0xc
c0014a65:	68 40 ad 02 c0       	push   0xc002ad40
c0014a6a:	e8 06 5b 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0014a6f:	83 c4 10             	add    esp,0x10
c0014a72:	e9 77 ff ff ff       	jmp    c00149ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a77:	90                   	nop

c0014a78 <InterruptController::clearAllHandlers(int, bool)>:
c0014a78:	56                   	push   esi
c0014a79:	53                   	push   ebx
c0014a7a:	52                   	push   edx
c0014a7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a7f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a83:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a88:	75 61                	jne    c0014aeb <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a8a:	8d 46 20             	lea    eax,[esi+0x20]
c0014a8d:	c1 e6 04             	shl    esi,0x4
c0014a90:	c1 e0 04             	shl    eax,0x4
c0014a93:	01 de                	add    esi,ebx
c0014a95:	01 d8                	add    eax,ebx
c0014a97:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014aa1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014aab:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014ab5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014abf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014ac9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014ad3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014add:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014ae7:	58                   	pop    eax
c0014ae8:	5b                   	pop    ebx
c0014ae9:	5e                   	pop    esi
c0014aea:	c3                   	ret    
c0014aeb:	83 ec 0c             	sub    esp,0xc
c0014aee:	53                   	push   ebx
c0014aef:	e8 f2 fa ff ff       	call   c00145e6 <Device::getName()>
c0014af4:	83 c4 10             	add    esp,0x10
c0014af7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014afa:	75 8e                	jne    c0014a8a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014afc:	83 fe 0f             	cmp    esi,0xf
c0014aff:	7f 09                	jg     c0014b0a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b01:	0f b6 b6 40 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd29c0]
c0014b08:	eb 80                	jmp    c0014a8a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b0a:	83 ec 0c             	sub    esp,0xc
c0014b0d:	68 b4 ad 02 c0       	push   0xc002adb4
c0014b12:	e8 5e 5a 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0014b17:	83 c4 10             	add    esp,0x10
c0014b1a:	e9 6b ff ff ff       	jmp    c0014a8a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b1f:	90                   	nop

c0014b20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b20:	56                   	push   esi
c0014b21:	53                   	push   ebx
c0014b22:	52                   	push   edx
c0014b23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b2b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b30:	75 3a                	jne    c0014b6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b36:	8d 50 20             	lea    edx,[eax+0x20]
c0014b39:	c1 e2 04             	shl    edx,0x4
c0014b3c:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b3f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b43:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b49:	74 0b                	je     c0014b56 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b4b:	83 c0 04             	add    eax,0x4
c0014b4e:	39 d0                	cmp    eax,edx
c0014b50:	75 f1                	jne    c0014b43 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b52:	58                   	pop    eax
c0014b53:	5b                   	pop    ebx
c0014b54:	5e                   	pop    esi
c0014b55:	c3                   	ret    
c0014b56:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b60:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b6a:	eb df                	jmp    c0014b4b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b6c:	83 ec 0c             	sub    esp,0xc
c0014b6f:	56                   	push   esi
c0014b70:	e8 71 fa ff ff       	call   c00145e6 <Device::getName()>
c0014b75:	83 c4 10             	add    esp,0x10
c0014b78:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b7b:	75 b5                	jne    c0014b32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b7d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b82:	7f 11                	jg     c0014b95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b88:	0f b6 80 40 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd29c0]
c0014b8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b93:	eb 9d                	jmp    c0014b32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b95:	83 ec 0c             	sub    esp,0xc
c0014b98:	68 b4 ad 02 c0       	push   0xc002adb4
c0014b9d:	e8 d3 59 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0014ba2:	83 c4 10             	add    esp,0x10
c0014ba5:	eb 8b                	jmp    c0014b32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014ba7 <nmiHandler(regs*, void*)>:
c0014ba7:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0014bac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bb0:	e9 d7 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014bb5 <int_handler>:
c0014bb5:	55                   	push   ebp
c0014bb6:	57                   	push   edi
c0014bb7:	56                   	push   esi
c0014bb8:	53                   	push   ebx
c0014bb9:	83 ec 0c             	sub    esp,0xc
c0014bbc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bc0:	80 3d 44 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f44,0x0
c0014bc7:	74 0b                	je     c0014bd4 <int_handler+0x1f>
c0014bc9:	fa                   	cli    
c0014bca:	f4                   	hlt    
c0014bcb:	80 3d 44 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f44,0x0
c0014bd2:	75 f5                	jne    c0014bc9 <int_handler+0x14>
c0014bd4:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0014bd9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014bdc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014be2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014be8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014beb:	83 f8 17             	cmp    eax,0x17
c0014bee:	77 13                	ja     c0014c03 <int_handler+0x4e>
c0014bf0:	83 ec 08             	sub    esp,0x8
c0014bf3:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bf5:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bf8:	0f b6 c0             	movzx  eax,al
c0014bfb:	50                   	push   eax
c0014bfc:	57                   	push   edi
c0014bfd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c00:	83 c4 10             	add    esp,0x10
c0014c03:	83 c3 15             	add    ebx,0x15
c0014c06:	c1 e3 04             	shl    ebx,0x4
c0014c09:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c0d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c14:	31 db                	xor    ebx,ebx
c0014c16:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c1a:	85 c0                	test   eax,eax
c0014c1c:	74 13                	je     c0014c31 <int_handler+0x7c>
c0014c1e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c21:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c25:	74 1c                	je     c0014c43 <int_handler+0x8e>
c0014c27:	83 ec 08             	sub    esp,0x8
c0014c2a:	52                   	push   edx
c0014c2b:	56                   	push   esi
c0014c2c:	ff d0                	call   eax
c0014c2e:	83 c4 10             	add    esp,0x10
c0014c31:	43                   	inc    ebx
c0014c32:	83 fb 04             	cmp    ebx,0x4
c0014c35:	75 df                	jne    c0014c16 <int_handler+0x61>
c0014c37:	83 c4 0c             	add    esp,0xc
c0014c3a:	31 c0                	xor    eax,eax
c0014c3c:	5b                   	pop    ebx
c0014c3d:	31 d2                	xor    edx,edx
c0014c3f:	5e                   	pop    esi
c0014c40:	5f                   	pop    edi
c0014c41:	5d                   	pop    ebp
c0014c42:	c3                   	ret    
c0014c43:	83 ec 08             	sub    esp,0x8
c0014c46:	52                   	push   edx
c0014c47:	56                   	push   esi
c0014c48:	ff d0                	call   eax
c0014c4a:	83 c4 10             	add    esp,0x10
c0014c4d:	83 c4 0c             	add    esp,0xc
c0014c50:	5b                   	pop    ebx
c0014c51:	5e                   	pop    esi
c0014c52:	5f                   	pop    edi
c0014c53:	5d                   	pop    ebp
c0014c54:	c3                   	ret    
c0014c55:	90                   	nop

c0014c56 <InterruptController::InterruptController(char const*)>:
c0014c56:	83 ec 1c             	sub    esp,0x1c
c0014c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c5d:	83 ec 08             	sub    esp,0x8
c0014c60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c64:	50                   	push   eax
c0014c65:	e8 80 f8 ff ff       	call   c00144ea <Device::Device(char const*)>
c0014c6a:	83 c4 10             	add    esp,0x10
c0014c6d:	ba 50 b0 02 c0       	mov    edx,0xc002b050
c0014c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c76:	89 10                	mov    DWORD PTR [eax],edx
c0014c78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c7c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c8e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c96:	7f 5e                	jg     c0014cf6 <InterruptController::InterruptController(char const*)+0xa0>
c0014c98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ca0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ca5:	7f 49                	jg     c0014cf0 <InterruptController::InterruptController(char const*)+0x9a>
c0014ca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014caf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cba:	01 ca                	add    edx,ecx
c0014cbc:	83 c2 54             	add    edx,0x54
c0014cbf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ccb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ccf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cda:	01 ca                	add    edx,ecx
c0014cdc:	81 c2 54 04 00 00    	add    edx,0x454
c0014ce2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cee:	eb b0                	jmp    c0014ca0 <InterruptController::InterruptController(char const*)+0x4a>
c0014cf0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cf4:	eb 98                	jmp    c0014c8e <InterruptController::InterruptController(char const*)+0x38>
c0014cf6:	90                   	nop
c0014cf7:	83 c4 1c             	add    esp,0x1c
c0014cfa:	c3                   	ret    
c0014cfb:	90                   	nop

c0014cfc <InterruptController::~InterruptController()>:
c0014cfc:	83 ec 0c             	sub    esp,0xc
c0014cff:	ba 50 b0 02 c0       	mov    edx,0xc002b050
c0014d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d08:	89 10                	mov    DWORD PTR [eax],edx
c0014d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d0e:	83 ec 0c             	sub    esp,0xc
c0014d11:	50                   	push   eax
c0014d12:	e8 b5 f4 ff ff       	call   c00141cc <Device::~Device()>
c0014d17:	83 c4 10             	add    esp,0x10
c0014d1a:	90                   	nop
c0014d1b:	83 c4 0c             	add    esp,0xc
c0014d1e:	c3                   	ret    
c0014d1f:	90                   	nop

c0014d20 <InterruptController::~InterruptController()>:
c0014d20:	83 ec 0c             	sub    esp,0xc
c0014d23:	83 ec 0c             	sub    esp,0xc
c0014d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d2a:	e8 cd ff ff ff       	call   c0014cfc <InterruptController::~InterruptController()>
c0014d2f:	83 c4 10             	add    esp,0x10
c0014d32:	83 ec 08             	sub    esp,0x8
c0014d35:	68 58 21 00 00       	push   0x2158
c0014d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d3e:	e8 b1 e0 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	83 c4 0c             	add    esp,0xc
c0014d49:	c3                   	ret    

c0014d4a <displayDebugInfo(regs*)>:
c0014d4a:	55                   	push   ebp
c0014d4b:	57                   	push   edi
c0014d4c:	56                   	push   esi
c0014d4d:	53                   	push   ebx
c0014d4e:	83 ec 24             	sub    esp,0x24
c0014d51:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d55:	0f 20 c2             	mov    edx,cr0
c0014d58:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d5c:	0f 20 d7             	mov    edi,cr2
c0014d5f:	0f 20 de             	mov    esi,cr3
c0014d62:	0f 20 e5             	mov    ebp,cr4
c0014d65:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d68:	68 ee ad 02 c0       	push   0xc002adee
c0014d6d:	e8 62 e1 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014d72:	59                   	pop    ecx
c0014d73:	58                   	pop    eax
c0014d74:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d77:	68 f9 ad 02 c0       	push   0xc002adf9
c0014d7c:	e8 53 e1 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014d81:	58                   	pop    eax
c0014d82:	5a                   	pop    edx
c0014d83:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d86:	68 04 ae 02 c0       	push   0xc002ae04
c0014d8b:	e8 44 e1 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014d90:	59                   	pop    ecx
c0014d91:	58                   	pop    eax
c0014d92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d95:	68 0f ae 02 c0       	push   0xc002ae0f
c0014d9a:	e8 35 e1 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014d9f:	58                   	pop    eax
c0014da0:	5a                   	pop    edx
c0014da1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014da4:	68 1a ae 02 c0       	push   0xc002ae1a
c0014da9:	e8 26 e1 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014dae:	59                   	pop    ecx
c0014daf:	58                   	pop    eax
c0014db0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014db3:	68 25 ae 02 c0       	push   0xc002ae25
c0014db8:	e8 17 e1 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014dbd:	58                   	pop    eax
c0014dbe:	5a                   	pop    edx
c0014dbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dc2:	68 30 ae 02 c0       	push   0xc002ae30
c0014dc7:	e8 08 e1 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014dcc:	59                   	pop    ecx
c0014dcd:	58                   	pop    eax
c0014dce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014dd1:	68 3b ae 02 c0       	push   0xc002ae3b
c0014dd6:	e8 f9 e0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014ddb:	58                   	pop    eax
c0014ddc:	5a                   	pop    edx
c0014ddd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014de0:	68 46 ae 02 c0       	push   0xc002ae46
c0014de5:	e8 ea e0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014dea:	59                   	pop    ecx
c0014deb:	58                   	pop    eax
c0014dec:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014def:	68 55 ae 02 c0       	push   0xc002ae55
c0014df4:	e8 db e0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014df9:	58                   	pop    eax
c0014dfa:	5a                   	pop    edx
c0014dfb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014dfe:	68 60 ae 02 c0       	push   0xc002ae60
c0014e03:	e8 cc e0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014e08:	59                   	pop    ecx
c0014e09:	58                   	pop    eax
c0014e0a:	57                   	push   edi
c0014e0b:	68 6b ae 02 c0       	push   0xc002ae6b
c0014e10:	e8 bf e0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014e15:	58                   	pop    eax
c0014e16:	5a                   	pop    edx
c0014e17:	56                   	push   esi
c0014e18:	68 76 ae 02 c0       	push   0xc002ae76
c0014e1d:	e8 b2 e0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0014e22:	59                   	pop    ecx
c0014e23:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014e28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e2e:	e8 1e bf ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0014e33:	58                   	pop    eax
c0014e34:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e37:	5a                   	pop    edx
c0014e38:	c1 e0 05             	shl    eax,0x5
c0014e3b:	05 a0 d3 02 c0       	add    eax,0xc002d3a0
c0014e40:	50                   	push   eax
c0014e41:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014e46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4c:	e8 1f c3 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014e51:	59                   	pop    ecx
c0014e52:	58                   	pop    eax
c0014e53:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014e58:	68 81 ae 02 c0       	push   0xc002ae81
c0014e5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e63:	e8 08 c3 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014e68:	58                   	pop    eax
c0014e69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e6e:	5a                   	pop    edx
c0014e6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e72:	83 c0 0c             	add    eax,0xc
c0014e75:	50                   	push   eax
c0014e76:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014e7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e81:	e8 ea c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014e86:	59                   	pop    ecx
c0014e87:	58                   	pop    eax
c0014e88:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014e8d:	68 8a ae 02 c0       	push   0xc002ae8a
c0014e92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e98:	e8 d3 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014e9d:	58                   	pop    eax
c0014e9e:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014ea3:	5a                   	pop    edx
c0014ea4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ea7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ead:	e8 e4 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014eb2:	59                   	pop    ecx
c0014eb3:	58                   	pop    eax
c0014eb4:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014eb9:	68 92 ae 02 c0       	push   0xc002ae92
c0014ebe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec4:	e8 a7 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ec9:	58                   	pop    eax
c0014eca:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014ecf:	5a                   	pop    edx
c0014ed0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ed3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed9:	e8 b8 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014ede:	59                   	pop    ecx
c0014edf:	58                   	pop    eax
c0014ee0:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014ee5:	68 9a ae 02 c0       	push   0xc002ae9a
c0014eea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef0:	e8 7b c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ef5:	58                   	pop    eax
c0014ef6:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014efb:	5a                   	pop    edx
c0014efc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014eff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f05:	e8 8c c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f0a:	59                   	pop    ecx
c0014f0b:	58                   	pop    eax
c0014f0c:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f11:	68 a2 ae 02 c0       	push   0xc002aea2
c0014f16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1c:	e8 4f c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f21:	58                   	pop    eax
c0014f22:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f27:	5a                   	pop    edx
c0014f28:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f31:	e8 60 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f36:	59                   	pop    ecx
c0014f37:	58                   	pop    eax
c0014f38:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f3d:	68 aa ae 02 c0       	push   0xc002aeaa
c0014f42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f48:	e8 23 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f4d:	58                   	pop    eax
c0014f4e:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f53:	5a                   	pop    edx
c0014f54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5d:	e8 34 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f62:	59                   	pop    ecx
c0014f63:	58                   	pop    eax
c0014f64:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f69:	68 b2 ae 02 c0       	push   0xc002aeb2
c0014f6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f74:	e8 f7 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f79:	58                   	pop    eax
c0014f7a:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f7f:	5a                   	pop    edx
c0014f80:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f89:	e8 08 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f8e:	59                   	pop    ecx
c0014f8f:	58                   	pop    eax
c0014f90:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014f95:	68 ba ae 02 c0       	push   0xc002aeba
c0014f9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa0:	e8 cb c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014fa5:	58                   	pop    eax
c0014fa6:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014fab:	5a                   	pop    edx
c0014fac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fb0:	52                   	push   edx
c0014fb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb7:	e8 da c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fbc:	59                   	pop    ecx
c0014fbd:	58                   	pop    eax
c0014fbe:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014fc3:	68 c3 ae 02 c0       	push   0xc002aec3
c0014fc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fce:	e8 9d c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014fd3:	58                   	pop    eax
c0014fd4:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014fd9:	5a                   	pop    edx
c0014fda:	57                   	push   edi
c0014fdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe1:	e8 b0 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fe6:	59                   	pop    ecx
c0014fe7:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0014fec:	5f                   	pop    edi
c0014fed:	68 cb ae 02 c0       	push   0xc002aecb
c0014ff2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff8:	e8 73 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ffd:	58                   	pop    eax
c0014ffe:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015003:	5a                   	pop    edx
c0015004:	56                   	push   esi
c0015005:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500b:	e8 86 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015010:	59                   	pop    ecx
c0015011:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015016:	5e                   	pop    esi
c0015017:	68 d3 ae 02 c0       	push   0xc002aed3
c001501c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015022:	e8 49 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015027:	5f                   	pop    edi
c0015028:	58                   	pop    eax
c0015029:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001502e:	55                   	push   ebp
c001502f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015035:	e8 5c c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001503a:	58                   	pop    eax
c001503b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015040:	5a                   	pop    edx
c0015041:	68 db ae 02 c0       	push   0xc002aedb
c0015046:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504c:	e8 1f c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015051:	0f 21 c0             	mov    eax,db0
c0015054:	59                   	pop    ecx
c0015055:	5e                   	pop    esi
c0015056:	50                   	push   eax
c0015057:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001505c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015062:	e8 2f c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015067:	5f                   	pop    edi
c0015068:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001506d:	5d                   	pop    ebp
c001506e:	68 e4 ae 02 c0       	push   0xc002aee4
c0015073:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015079:	e8 f2 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001507e:	0f 21 c8             	mov    eax,db1
c0015081:	5a                   	pop    edx
c0015082:	59                   	pop    ecx
c0015083:	50                   	push   eax
c0015084:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015089:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508f:	e8 02 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015094:	5e                   	pop    esi
c0015095:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001509a:	5f                   	pop    edi
c001509b:	68 ec ae 02 c0       	push   0xc002aeec
c00150a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a6:	e8 c5 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150ab:	0f 21 d0             	mov    eax,db2
c00150ae:	5d                   	pop    ebp
c00150af:	5a                   	pop    edx
c00150b0:	50                   	push   eax
c00150b1:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bc:	e8 d5 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150c1:	59                   	pop    ecx
c00150c2:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150c7:	5e                   	pop    esi
c00150c8:	68 f4 ae 02 c0       	push   0xc002aef4
c00150cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d3:	e8 98 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150d8:	0f 21 d8             	mov    eax,db3
c00150db:	5f                   	pop    edi
c00150dc:	5d                   	pop    ebp
c00150dd:	50                   	push   eax
c00150de:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e9:	e8 a8 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150ee:	58                   	pop    eax
c00150ef:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00150f4:	5a                   	pop    edx
c00150f5:	68 fc ae 02 c0       	push   0xc002aefc
c00150fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015100:	e8 6b c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015105:	0f 21 f0             	mov    eax,db6
c0015108:	59                   	pop    ecx
c0015109:	5e                   	pop    esi
c001510a:	50                   	push   eax
c001510b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015110:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015116:	e8 7b c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001511b:	5f                   	pop    edi
c001511c:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015121:	5d                   	pop    ebp
c0015122:	68 04 af 02 c0       	push   0xc002af04
c0015127:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512d:	e8 3e c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015132:	0f 21 f8             	mov    eax,db7
c0015135:	5a                   	pop    edx
c0015136:	59                   	pop    ecx
c0015137:	50                   	push   eax
c0015138:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001513d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015143:	e8 4e c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015148:	5e                   	pop    esi
c0015149:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001514c:	e8 50 85 00 00       	call   c001d6a1 <Thr::getDriverNameFromAddress(unsigned long)>
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	85 c0                	test   eax,eax
c0015156:	74 7d                	je     c00151d5 <displayDebugInfo(regs*)+0x48b>
c0015158:	89 c6                	mov    esi,eax
c001515a:	50                   	push   eax
c001515b:	50                   	push   eax
c001515c:	56                   	push   esi
c001515d:	68 0c af 02 c0       	push   0xc002af0c
c0015162:	e8 6d dd ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0015167:	5a                   	pop    edx
c0015168:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001516d:	59                   	pop    ecx
c001516e:	68 1a af 02 c0       	push   0xc002af1a
c0015173:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015179:	e8 f2 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001517e:	5f                   	pop    edi
c001517f:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015184:	5d                   	pop    ebp
c0015185:	56                   	push   esi
c0015186:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518c:	e8 df bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015191:	58                   	pop    eax
c0015192:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0015197:	5a                   	pop    edx
c0015198:	68 26 af 02 c0       	push   0xc002af26
c001519d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a3:	e8 c8 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151a8:	59                   	pop    ecx
c00151a9:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c00151ae:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151b4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151b7:	e8 1c 85 00 00       	call   c001d6d8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151bc:	5b                   	pop    ebx
c00151bd:	5d                   	pop    ebp
c00151be:	50                   	push   eax
c00151bf:	57                   	push   edi
c00151c0:	e8 d1 bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00151c5:	58                   	pop    eax
c00151c6:	5a                   	pop    edx
c00151c7:	56                   	push   esi
c00151c8:	68 32 af 02 c0       	push   0xc002af32
c00151cd:	e8 02 dd ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00151d2:	83 c4 10             	add    esp,0x10
c00151d5:	fa                   	cli    
c00151d6:	f4                   	hlt    
c00151d7:	eb fe                	jmp    c00151d7 <displayDebugInfo(regs*)+0x48d>

c00151d9 <x87EmulHandler(regs*, void*)>:
c00151d9:	53                   	push   ebx
c00151da:	83 ec 14             	sub    esp,0x14
c00151dd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151e1:	53                   	push   ebx
c00151e2:	e8 47 a8 00 00       	call   c001fa2e <Vm::x87Handler(regs*)>
c00151e7:	83 c4 10             	add    esp,0x10
c00151ea:	84 c0                	test   al,al
c00151ec:	74 05                	je     c00151f3 <x87EmulHandler(regs*, void*)+0x1a>
c00151ee:	83 c4 08             	add    esp,0x8
c00151f1:	5b                   	pop    ebx
c00151f2:	c3                   	ret    
c00151f3:	83 ec 0c             	sub    esp,0xc
c00151f6:	68 42 af 02 c0       	push   0xc002af42
c00151fb:	e8 d4 dc ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0015200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015203:	e8 42 fb ff ff       	call   c0014d4a <displayDebugInfo(regs*)>

c0015208 <gpFault(regs*, void*)>:
c0015208:	53                   	push   ebx
c0015209:	83 ec 14             	sub    esp,0x14
c001520c:	c7 05 94 e5 02 c0 ab ed 01 c0 	mov    DWORD PTR ds:0xc002e594,0xc001edab
c0015216:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001521a:	53                   	push   ebx
c001521b:	e8 8b 9b 00 00       	call   c001edab <Vm::faultHandler(regs*)>
c0015220:	83 c4 10             	add    esp,0x10
c0015223:	84 c0                	test   al,al
c0015225:	74 05                	je     c001522c <gpFault(regs*, void*)+0x24>
c0015227:	83 c4 08             	add    esp,0x8
c001522a:	5b                   	pop    ebx
c001522b:	c3                   	ret    
c001522c:	83 ec 0c             	sub    esp,0xc
c001522f:	68 58 af 02 c0       	push   0xc002af58
c0015234:	e8 9b dc ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0015239:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001523c:	e8 09 fb ff ff       	call   c0014d4a <displayDebugInfo(regs*)>

c0015241 <pgFault(regs*, void*)>:
c0015241:	83 ec 18             	sub    esp,0x18
c0015244:	68 73 af 02 c0       	push   0xc002af73
c0015249:	e8 86 dc ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001524e:	0f 20 d0             	mov    eax,cr2
c0015251:	5a                   	pop    edx
c0015252:	59                   	pop    ecx
c0015253:	50                   	push   eax
c0015254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015259:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001525c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015262:	e8 c3 d8 ff ff       	call   c0012b2a <VAS::tryLoadBackOffDisk(unsigned long)>
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	84 c0                	test   al,al
c001526c:	74 04                	je     c0015272 <pgFault(regs*, void*)+0x31>
c001526e:	83 c4 0c             	add    esp,0xc
c0015271:	c3                   	ret    
c0015272:	83 ec 0c             	sub    esp,0xc
c0015275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015279:	e8 cc fa ff ff       	call   c0014d4a <displayDebugInfo(regs*)>

c001527e <otherISRHandler(regs*, void*)>:
c001527e:	53                   	push   ebx
c001527f:	83 ec 0c             	sub    esp,0xc
c0015282:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015286:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015289:	50                   	push   eax
c001528a:	50                   	push   eax
c001528b:	68 80 af 02 c0       	push   0xc002af80
c0015290:	e8 3f dc ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0015295:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015298:	e8 ad fa ff ff       	call   c0014d4a <displayDebugInfo(regs*)>

c001529d <opcodeFault(regs*, void*)>:
c001529d:	55                   	push   ebp
c001529e:	89 e5                	mov    ebp,esp
c00152a0:	56                   	push   esi
c00152a1:	53                   	push   ebx
c00152a2:	83 ec 40             	sub    esp,0x40
c00152a5:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00152aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152b0:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152b6:	84 c0                	test   al,al
c00152b8:	74 24                	je     c00152de <opcodeFault(regs*, void*)+0x41>
c00152ba:	83 ec 0c             	sub    esp,0xc
c00152bd:	68 a0 af 02 c0       	push   0xc002afa0
c00152c2:	e8 0d dc ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d0:	8d 50 19             	lea    edx,[eax+0x19]
c00152d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152d9:	e9 be 05 00 00       	jmp    c001589c <opcodeFault(regs*, void*)+0x5ff>
c00152de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152e7:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152eb:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fb:	8a 00                	mov    al,BYTE PTR [eax]
c00152fd:	3c f0                	cmp    al,0xf0
c00152ff:	75 17                	jne    c0015318 <opcodeFault(regs*, void*)+0x7b>
c0015301:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015307:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530a:	8d 50 01             	lea    edx,[eax+0x1]
c001530d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015310:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015313:	e9 da 00 00 00       	jmp    c00153f2 <opcodeFault(regs*, void*)+0x155>
c0015318:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531b:	8a 00                	mov    al,BYTE PTR [eax]
c001531d:	3c f2                	cmp    al,0xf2
c001531f:	74 09                	je     c001532a <opcodeFault(regs*, void*)+0x8d>
c0015321:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015324:	8a 00                	mov    al,BYTE PTR [eax]
c0015326:	3c f3                	cmp    al,0xf3
c0015328:	75 1b                	jne    c0015345 <opcodeFault(regs*, void*)+0xa8>
c001532a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001532e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015334:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015337:	8d 50 01             	lea    edx,[eax+0x1]
c001533a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015340:	e9 ad 00 00 00       	jmp    c00153f2 <opcodeFault(regs*, void*)+0x155>
c0015345:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015348:	8a 00                	mov    al,BYTE PTR [eax]
c001534a:	3c 66                	cmp    al,0x66
c001534c:	75 1f                	jne    c001536d <opcodeFault(regs*, void*)+0xd0>
c001534e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015352:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015356:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535f:	8d 50 01             	lea    edx,[eax+0x1]
c0015362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015365:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015368:	e9 85 00 00 00       	jmp    c00153f2 <opcodeFault(regs*, void*)+0x155>
c001536d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015370:	8a 00                	mov    al,BYTE PTR [eax]
c0015372:	3c 67                	cmp    al,0x67
c0015374:	75 18                	jne    c001538e <opcodeFault(regs*, void*)+0xf1>
c0015376:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001537a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001537d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015380:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015383:	8d 50 01             	lea    edx,[eax+0x1]
c0015386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015389:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001538c:	eb 64                	jmp    c00153f2 <opcodeFault(regs*, void*)+0x155>
c001538e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015391:	8a 00                	mov    al,BYTE PTR [eax]
c0015393:	3c 2e                	cmp    al,0x2e
c0015395:	74 09                	je     c00153a0 <opcodeFault(regs*, void*)+0x103>
c0015397:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539a:	8a 00                	mov    al,BYTE PTR [eax]
c001539c:	3c 3e                	cmp    al,0x3e
c001539e:	75 18                	jne    c00153b8 <opcodeFault(regs*, void*)+0x11b>
c00153a0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153a4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ad:	8d 50 01             	lea    edx,[eax+0x1]
c00153b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153b6:	eb 3a                	jmp    c00153f2 <opcodeFault(regs*, void*)+0x155>
c00153b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bb:	8a 00                	mov    al,BYTE PTR [eax]
c00153bd:	3c 36                	cmp    al,0x36
c00153bf:	74 1b                	je     c00153dc <opcodeFault(regs*, void*)+0x13f>
c00153c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c4:	8a 00                	mov    al,BYTE PTR [eax]
c00153c6:	3c 26                	cmp    al,0x26
c00153c8:	74 12                	je     c00153dc <opcodeFault(regs*, void*)+0x13f>
c00153ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cd:	8a 00                	mov    al,BYTE PTR [eax]
c00153cf:	3c 64                	cmp    al,0x64
c00153d1:	74 09                	je     c00153dc <opcodeFault(regs*, void*)+0x13f>
c00153d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d6:	8a 00                	mov    al,BYTE PTR [eax]
c00153d8:	3c 65                	cmp    al,0x65
c00153da:	75 16                	jne    c00153f2 <opcodeFault(regs*, void*)+0x155>
c00153dc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e9:	8d 50 01             	lea    edx,[eax+0x1]
c00153ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	8a 00                	mov    al,BYTE PTR [eax]
c00153f7:	3c 0f                	cmp    al,0xf
c00153f9:	0f 85 ad 00 00 00    	jne    c00154ac <opcodeFault(regs*, void*)+0x20f>
c00153ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015402:	40                   	inc    eax
c0015403:	8a 00                	mov    al,BYTE PTR [eax]
c0015405:	3c c2                	cmp    al,0xc2
c0015407:	74 0e                	je     c0015417 <opcodeFault(regs*, void*)+0x17a>
c0015409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540c:	40                   	inc    eax
c001540d:	8a 00                	mov    al,BYTE PTR [eax]
c001540f:	3c c3                	cmp    al,0xc3
c0015411:	0f 85 95 00 00 00    	jne    c00154ac <opcodeFault(regs*, void*)+0x20f>
c0015417:	83 ec 0c             	sub    esp,0xc
c001541a:	68 c3 af 02 c0       	push   0xc002afc3
c001541f:	e8 b0 da ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542d:	8d 50 01             	lea    edx,[eax+0x1]
c0015430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015433:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015436:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015439:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543c:	8a 00                	mov    al,BYTE PTR [eax]
c001543e:	8d 50 fe             	lea    edx,[eax-0x2]
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	88 10                	mov    BYTE PTR [eax],dl
c0015446:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015449:	50                   	push   eax
c001544a:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001544d:	50                   	push   eax
c001544e:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015451:	50                   	push   eax
c0015452:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015455:	e8 e2 47 00 00       	call   c0019c3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015460:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015463:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015466:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015469:	01 d0                	add    eax,edx
c001546b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015474:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015477:	48                   	dec    eax
c0015478:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001547b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015481:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015487:	83 ec 04             	sub    esp,0x4
c001548a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001548d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015490:	50                   	push   eax
c0015491:	e8 1e ad fe ff       	call   c00001b4 <voodooXADD>
c0015496:	83 c4 10             	add    esp,0x10
c0015499:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001549c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001549f:	01 c2                	add    edx,eax
c00154a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154a7:	e9 f0 03 00 00       	jmp    c001589c <opcodeFault(regs*, void*)+0x5ff>
c00154ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154af:	8a 00                	mov    al,BYTE PTR [eax]
c00154b1:	3c 0f                	cmp    al,0xf
c00154b3:	0f 85 8b 01 00 00    	jne    c0015644 <opcodeFault(regs*, void*)+0x3a7>
c00154b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bc:	40                   	inc    eax
c00154bd:	8a 00                	mov    al,BYTE PTR [eax]
c00154bf:	3c c7                	cmp    al,0xc7
c00154c1:	0f 86 7d 01 00 00    	jbe    c0015644 <opcodeFault(regs*, void*)+0x3a7>
c00154c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ca:	40                   	inc    eax
c00154cb:	8a 00                	mov    al,BYTE PTR [eax]
c00154cd:	3c cf                	cmp    al,0xcf
c00154cf:	0f 87 6f 01 00 00    	ja     c0015644 <opcodeFault(regs*, void*)+0x3a7>
c00154d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d8:	40                   	inc    eax
c00154d9:	8a 00                	mov    al,BYTE PTR [eax]
c00154db:	83 c0 38             	add    eax,0x38
c00154de:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154e1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154e5:	75 0b                	jne    c00154f2 <opcodeFault(regs*, void*)+0x255>
c00154e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ea:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f0:	eb 75                	jmp    c0015567 <opcodeFault(regs*, void*)+0x2ca>
c00154f2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154f6:	75 0b                	jne    c0015503 <opcodeFault(regs*, void*)+0x266>
c00154f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015501:	eb 64                	jmp    c0015567 <opcodeFault(regs*, void*)+0x2ca>
c0015503:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015507:	75 0b                	jne    c0015514 <opcodeFault(regs*, void*)+0x277>
c0015509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001550f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015512:	eb 53                	jmp    c0015567 <opcodeFault(regs*, void*)+0x2ca>
c0015514:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015518:	75 0b                	jne    c0015525 <opcodeFault(regs*, void*)+0x288>
c001551a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015520:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015523:	eb 42                	jmp    c0015567 <opcodeFault(regs*, void*)+0x2ca>
c0015525:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015529:	75 0b                	jne    c0015536 <opcodeFault(regs*, void*)+0x299>
c001552b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015531:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015534:	eb 31                	jmp    c0015567 <opcodeFault(regs*, void*)+0x2ca>
c0015536:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001553a:	75 0b                	jne    c0015547 <opcodeFault(regs*, void*)+0x2aa>
c001553c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015542:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015545:	eb 20                	jmp    c0015567 <opcodeFault(regs*, void*)+0x2ca>
c0015547:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001554b:	75 0b                	jne    c0015558 <opcodeFault(regs*, void*)+0x2bb>
c001554d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015550:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015553:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015556:	eb 0f                	jmp    c0015567 <opcodeFault(regs*, void*)+0x2ca>
c0015558:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001555c:	75 09                	jne    c0015567 <opcodeFault(regs*, void*)+0x2ca>
c001555e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015561:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015564:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015567:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001556b:	74 10                	je     c001557d <opcodeFault(regs*, void*)+0x2e0>
c001556d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015574:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001557b:	eb 2d                	jmp    c00155aa <opcodeFault(regs*, void*)+0x30d>
c001557d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015580:	c1 e0 18             	shl    eax,0x18
c0015583:	89 c2                	mov    edx,eax
c0015585:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015588:	c1 e0 08             	shl    eax,0x8
c001558b:	25 00 00 ff 00       	and    eax,0xff0000
c0015590:	09 c2                	or     edx,eax
c0015592:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015595:	c1 e8 08             	shr    eax,0x8
c0015598:	25 00 ff 00 00       	and    eax,0xff00
c001559d:	09 c2                	or     edx,eax
c001559f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155a2:	c1 e8 18             	shr    eax,0x18
c00155a5:	09 d0                	or     eax,edx
c00155a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155aa:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155ae:	75 0b                	jne    c00155bb <opcodeFault(regs*, void*)+0x31e>
c00155b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155b9:	eb 75                	jmp    c0015630 <opcodeFault(regs*, void*)+0x393>
c00155bb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155bf:	75 0b                	jne    c00155cc <opcodeFault(regs*, void*)+0x32f>
c00155c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155ca:	eb 64                	jmp    c0015630 <opcodeFault(regs*, void*)+0x393>
c00155cc:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155d0:	75 0b                	jne    c00155dd <opcodeFault(regs*, void*)+0x340>
c00155d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155db:	eb 53                	jmp    c0015630 <opcodeFault(regs*, void*)+0x393>
c00155dd:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155e1:	75 0b                	jne    c00155ee <opcodeFault(regs*, void*)+0x351>
c00155e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155ec:	eb 42                	jmp    c0015630 <opcodeFault(regs*, void*)+0x393>
c00155ee:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155f2:	75 0b                	jne    c00155ff <opcodeFault(regs*, void*)+0x362>
c00155f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fa:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155fd:	eb 31                	jmp    c0015630 <opcodeFault(regs*, void*)+0x393>
c00155ff:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015603:	75 0b                	jne    c0015610 <opcodeFault(regs*, void*)+0x373>
c0015605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015608:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001560e:	eb 20                	jmp    c0015630 <opcodeFault(regs*, void*)+0x393>
c0015610:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015614:	75 0b                	jne    c0015621 <opcodeFault(regs*, void*)+0x384>
c0015616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015619:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001561f:	eb 0f                	jmp    c0015630 <opcodeFault(regs*, void*)+0x393>
c0015621:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015625:	75 09                	jne    c0015630 <opcodeFault(regs*, void*)+0x393>
c0015627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001562d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015633:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015636:	8d 50 02             	lea    edx,[eax+0x2]
c0015639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001563f:	e9 58 02 00 00       	jmp    c001589c <opcodeFault(regs*, void*)+0x5ff>
c0015644:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015647:	8a 00                	mov    al,BYTE PTR [eax]
c0015649:	3c 0f                	cmp    al,0xf
c001564b:	0f 85 76 01 00 00    	jne    c00157c7 <opcodeFault(regs*, void*)+0x52a>
c0015651:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015654:	40                   	inc    eax
c0015655:	8a 00                	mov    al,BYTE PTR [eax]
c0015657:	3c c7                	cmp    al,0xc7
c0015659:	0f 85 68 01 00 00    	jne    c00157c7 <opcodeFault(regs*, void*)+0x52a>
c001565f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015665:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015668:	8d 50 01             	lea    edx,[eax+0x1]
c001566b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015671:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015674:	50                   	push   eax
c0015675:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015678:	50                   	push   eax
c0015679:	8d 45 bc             	lea    eax,[ebp-0x44]
c001567c:	50                   	push   eax
c001567d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015680:	e8 b7 45 00 00       	call   c0019c3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015685:	83 c4 10             	add    esp,0x10
c0015688:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001568b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001568e:	83 f0 01             	xor    eax,0x1
c0015691:	84 c0                	test   al,al
c0015693:	0f 84 2e 01 00 00    	je     c00157c7 <opcodeFault(regs*, void*)+0x52a>
c0015699:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001569c:	3c 01                	cmp    al,0x1
c001569e:	0f 85 23 01 00 00    	jne    c00157c7 <opcodeFault(regs*, void*)+0x52a>
c00156a4:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156a7:	83 f0 01             	xor    eax,0x1
c00156aa:	84 c0                	test   al,al
c00156ac:	0f 84 15 01 00 00    	je     c00157c7 <opcodeFault(regs*, void*)+0x52a>
c00156b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156b8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156bb:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00156c2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156c5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156c8:	89 c2                	mov    edx,eax
c00156ca:	b8 00 00 00 00       	mov    eax,0x0
c00156cf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156d2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156db:	ba 00 00 00 00       	mov    edx,0x0
c00156e0:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156e3:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156ec:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156ef:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156f6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156f9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156fc:	89 c2                	mov    edx,eax
c00156fe:	b8 00 00 00 00       	mov    eax,0x0
c0015703:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015706:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001570f:	ba 00 00 00 00       	mov    edx,0x0
c0015714:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015717:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001571a:	e8 7b 86 00 00       	call   c001dd9a <lockScheduler()>
c001571f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015722:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015725:	8b 00                	mov    eax,DWORD PTR [eax]
c0015727:	89 c1                	mov    ecx,eax
c0015729:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001572c:	89 cb                	mov    ebx,ecx
c001572e:	89 d0                	mov    eax,edx
c0015730:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015733:	89 c6                	mov    esi,eax
c0015735:	89 f0                	mov    eax,esi
c0015737:	09 d8                	or     eax,ebx
c0015739:	85 c0                	test   eax,eax
c001573b:	75 21                	jne    c001575e <opcodeFault(regs*, void*)+0x4c1>
c001573d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015740:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015743:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015746:	89 01                	mov    DWORD PTR [ecx],eax
c0015748:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001574b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015751:	83 c8 40             	or     eax,0x40
c0015754:	89 c2                	mov    edx,eax
c0015756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015759:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001575c:	eb 3e                	jmp    c001579c <opcodeFault(regs*, void*)+0x4ff>
c001575e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015761:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015764:	8b 00                	mov    eax,DWORD PTR [eax]
c0015766:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015769:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001576c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001576f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015772:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015775:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015778:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001577b:	89 d0                	mov    eax,edx
c001577d:	31 d2                	xor    edx,edx
c001577f:	89 c3                	mov    ebx,eax
c0015781:	89 d6                	mov    esi,edx
c0015783:	89 da                	mov    edx,ebx
c0015785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015788:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001578b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015791:	83 e0 bf             	and    eax,0xffffffbf
c0015794:	89 c2                	mov    edx,eax
c0015796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015799:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001579c:	e8 fb 85 00 00       	call   c001dd9c <unlockScheduler()>
c00157a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157a7:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157aa:	01 c2                	add    edx,eax
c00157ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157af:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157b2:	83 ec 0c             	sub    esp,0xc
c00157b5:	68 d2 af 02 c0       	push   0xc002afd2
c00157ba:	e8 15 d7 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	e9 d5 00 00 00       	jmp    c001589c <opcodeFault(regs*, void*)+0x5ff>
c00157c7:	83 ec 0c             	sub    esp,0xc
c00157ca:	68 e5 af 02 c0       	push   0xc002afe5
c00157cf:	e8 00 d7 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e3:	c1 e0 04             	shl    eax,0x4
c00157e6:	01 d0                	add    eax,edx
c00157e8:	83 c0 03             	add    eax,0x3
c00157eb:	8a 00                	mov    al,BYTE PTR [eax]
c00157ed:	0f b6 d8             	movzx  ebx,al
c00157f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157fc:	c1 e0 04             	shl    eax,0x4
c00157ff:	01 d0                	add    eax,edx
c0015801:	83 c0 02             	add    eax,0x2
c0015804:	8a 00                	mov    al,BYTE PTR [eax]
c0015806:	0f b6 c8             	movzx  ecx,al
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001580f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015812:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015815:	c1 e0 04             	shl    eax,0x4
c0015818:	01 d0                	add    eax,edx
c001581a:	40                   	inc    eax
c001581b:	8a 00                	mov    al,BYTE PTR [eax]
c001581d:	0f b6 d0             	movzx  edx,al
c0015820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015823:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015829:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001582c:	c1 e0 04             	shl    eax,0x4
c001582f:	01 f0                	add    eax,esi
c0015831:	8a 00                	mov    al,BYTE PTR [eax]
c0015833:	0f b6 c0             	movzx  eax,al
c0015836:	83 ec 0c             	sub    esp,0xc
c0015839:	53                   	push   ebx
c001583a:	51                   	push   ecx
c001583b:	52                   	push   edx
c001583c:	50                   	push   eax
c001583d:	68 f8 af 02 c0       	push   0xc002aff8
c0015842:	e8 8d d6 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0015847:	83 c4 20             	add    esp,0x20
c001584a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015850:	83 c0 03             	add    eax,0x3
c0015853:	8a 00                	mov    al,BYTE PTR [eax]
c0015855:	0f b6 d8             	movzx  ebx,al
c0015858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001585e:	83 c0 02             	add    eax,0x2
c0015861:	8a 00                	mov    al,BYTE PTR [eax]
c0015863:	0f b6 c8             	movzx  ecx,al
c0015866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015869:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001586c:	40                   	inc    eax
c001586d:	8a 00                	mov    al,BYTE PTR [eax]
c001586f:	0f b6 d0             	movzx  edx,al
c0015872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015875:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015878:	8a 00                	mov    al,BYTE PTR [eax]
c001587a:	0f b6 c0             	movzx  eax,al
c001587d:	83 ec 0c             	sub    esp,0xc
c0015880:	53                   	push   ebx
c0015881:	51                   	push   ecx
c0015882:	52                   	push   edx
c0015883:	50                   	push   eax
c0015884:	68 20 b0 02 c0       	push   0xc002b020
c0015889:	e8 46 d6 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001588e:	83 c4 20             	add    esp,0x20
c0015891:	83 ec 0c             	sub    esp,0xc
c0015894:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015897:	e8 ae f4 ff ff       	call   c0014d4a <displayDebugInfo(regs*)>
c001589c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001589f:	5b                   	pop    ebx
c00158a0:	5e                   	pop    esi
c00158a1:	5d                   	pop    ebp
c00158a2:	c3                   	ret    

c00158a3 <displayProgramFault(char const*)>:
c00158a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158b1:	85 c0                	test   eax,eax
c00158b3:	74 15                	je     c00158ca <displayProgramFault(char const*)+0x27>
c00158b5:	83 ec 0c             	sub    esp,0xc
c00158b8:	6a 04                	push   0x4
c00158ba:	6a 0f                	push   0xf
c00158bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158c0:	50                   	push   eax
c00158c1:	e8 6c b5 ff ff       	call   c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158c6:	83 c4 1c             	add    esp,0x1c
c00158c9:	c3                   	ret    
c00158ca:	c3                   	ret    

c00158cb <setupInterruptController()>:
c00158cb:	55                   	push   ebp
c00158cc:	89 e5                	mov    ebp,esp
c00158ce:	53                   	push   ebx
c00158cf:	83 ec 24             	sub    esp,0x24
c00158d2:	b8 00 00 00 00       	mov    eax,0x0
c00158d7:	85 c0                	test   eax,eax
c00158d9:	0f 95 c0             	setne  al
c00158dc:	84 c0                	test   al,al
c00158de:	74 5b                	je     c001593b <setupInterruptController()+0x70>
c00158e0:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158e7:	83 ec 0c             	sub    esp,0xc
c00158ea:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158ed:	e8 4e 9f ff ff       	call   c000f840 <malloc>
c00158f2:	83 c4 10             	add    esp,0x10
c00158f5:	89 c3                	mov    ebx,eax
c00158f7:	83 ec 0c             	sub    esp,0xc
c00158fa:	53                   	push   ebx
c00158fb:	e8 f2 ff 00 00       	call   c00258f2 <APIC::APIC()>
c0015900:	83 c4 10             	add    esp,0x10
c0015903:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015906:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015909:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001590c:	8b 00                	mov    eax,DWORD PTR [eax]
c001590e:	83 c0 08             	add    eax,0x8
c0015911:	8b 00                	mov    eax,DWORD PTR [eax]
c0015913:	6a 00                	push   0x0
c0015915:	6a 00                	push   0x0
c0015917:	6a 00                	push   0x0
c0015919:	52                   	push   edx
c001591a:	ff d0                	call   eax
c001591c:	83 c4 10             	add    esp,0x10
c001591f:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0015924:	83 ec 08             	sub    esp,0x8
c0015927:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001592a:	50                   	push   eax
c001592b:	e8 ca e9 ff ff       	call   c00142fa <Device::addChild(Device*)>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015936:	e9 52 03 00 00       	jmp    c0015c8d <setupInterruptController()+0x3c2>
c001593b:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0015940:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015946:	83 e0 01             	and    eax,0x1
c0015949:	84 c0                	test   al,al
c001594b:	0f 95 c0             	setne  al
c001594e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015951:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015958:	83 ec 0c             	sub    esp,0xc
c001595b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001595e:	e8 dd 9e ff ff       	call   c000f840 <malloc>
c0015963:	83 c4 10             	add    esp,0x10
c0015966:	89 c3                	mov    ebx,eax
c0015968:	83 ec 0c             	sub    esp,0xc
c001596b:	53                   	push   ebx
c001596c:	e8 d9 04 01 00       	call   c0025e4a <PIC::PIC()>
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015977:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001597a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001597d:	8b 00                	mov    eax,DWORD PTR [eax]
c001597f:	83 c0 08             	add    eax,0x8
c0015982:	8b 00                	mov    eax,DWORD PTR [eax]
c0015984:	6a 00                	push   0x0
c0015986:	6a 00                	push   0x0
c0015988:	6a 00                	push   0x0
c001598a:	52                   	push   edx
c001598b:	ff d0                	call   eax
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015994:	74 73                	je     c0015a09 <setupInterruptController()+0x13e>
c0015996:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015999:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001599c:	8b 00                	mov    eax,DWORD PTR [eax]
c001599e:	83 c0 0c             	add    eax,0xc
c00159a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a3:	6a 00                	push   0x0
c00159a5:	6a 00                	push   0x0
c00159a7:	6a 00                	push   0x0
c00159a9:	52                   	push   edx
c00159aa:	ff d0                	call   eax
c00159ac:	83 c4 10             	add    esp,0x10
c00159af:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159b3:	74 15                	je     c00159ca <setupInterruptController()+0xff>
c00159b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ba:	83 c0 04             	add    eax,0x4
c00159bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bf:	83 ec 0c             	sub    esp,0xc
c00159c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159c5:	ff d0                	call   eax
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159d1:	83 ec 0c             	sub    esp,0xc
c00159d4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159d7:	e8 64 9e ff ff       	call   c000f840 <malloc>
c00159dc:	83 c4 10             	add    esp,0x10
c00159df:	89 c3                	mov    ebx,eax
c00159e1:	83 ec 0c             	sub    esp,0xc
c00159e4:	53                   	push   ebx
c00159e5:	e8 08 ff 00 00       	call   c00258f2 <APIC::APIC()>
c00159ea:	83 c4 10             	add    esp,0x10
c00159ed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f8:	83 c0 08             	add    eax,0x8
c00159fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fd:	6a 00                	push   0x0
c00159ff:	6a 00                	push   0x0
c0015a01:	6a 00                	push   0x0
c0015a03:	52                   	push   edx
c0015a04:	ff d0                	call   eax
c0015a06:	83 c4 10             	add    esp,0x10
c0015a09:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0015a0e:	83 ec 08             	sub    esp,0x8
c0015a11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a14:	50                   	push   eax
c0015a15:	e8 e0 e8 ff ff       	call   c00142fa <Device::addChild(Device*)>
c0015a1a:	83 c4 10             	add    esp,0x10
c0015a1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a22:	83 c0 24             	add    eax,0x24
c0015a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a27:	6a 00                	push   0x0
c0015a29:	68 7e 52 01 c0       	push   0xc001527e
c0015a2e:	6a 00                	push   0x0
c0015a30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a33:	ff d0                	call   eax
c0015a35:	83 c4 10             	add    esp,0x10
c0015a38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3d:	83 c0 24             	add    eax,0x24
c0015a40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a42:	6a 00                	push   0x0
c0015a44:	68 7e 52 01 c0       	push   0xc001527e
c0015a49:	6a 01                	push   0x1
c0015a4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a4e:	ff d0                	call   eax
c0015a50:	83 c4 10             	add    esp,0x10
c0015a53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a58:	83 c0 24             	add    eax,0x24
c0015a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5d:	6a 00                	push   0x0
c0015a5f:	68 a7 4b 01 c0       	push   0xc0014ba7
c0015a64:	6a 02                	push   0x2
c0015a66:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a69:	ff d0                	call   eax
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a73:	83 c0 24             	add    eax,0x24
c0015a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a78:	6a 00                	push   0x0
c0015a7a:	68 7e 52 01 c0       	push   0xc001527e
c0015a7f:	6a 03                	push   0x3
c0015a81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a84:	ff d0                	call   eax
c0015a86:	83 c4 10             	add    esp,0x10
c0015a89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8e:	83 c0 24             	add    eax,0x24
c0015a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a93:	6a 00                	push   0x0
c0015a95:	68 7e 52 01 c0       	push   0xc001527e
c0015a9a:	6a 04                	push   0x4
c0015a9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a9f:	ff d0                	call   eax
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa9:	83 c0 24             	add    eax,0x24
c0015aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aae:	6a 00                	push   0x0
c0015ab0:	68 7e 52 01 c0       	push   0xc001527e
c0015ab5:	6a 05                	push   0x5
c0015ab7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aba:	ff d0                	call   eax
c0015abc:	83 c4 10             	add    esp,0x10
c0015abf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac4:	83 c0 24             	add    eax,0x24
c0015ac7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac9:	6a 00                	push   0x0
c0015acb:	68 9d 52 01 c0       	push   0xc001529d
c0015ad0:	6a 06                	push   0x6
c0015ad2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad5:	ff d0                	call   eax
c0015ad7:	83 c4 10             	add    esp,0x10
c0015ada:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015add:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adf:	83 c0 24             	add    eax,0x24
c0015ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae4:	6a 00                	push   0x0
c0015ae6:	68 d9 51 01 c0       	push   0xc00151d9
c0015aeb:	6a 07                	push   0x7
c0015aed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af0:	ff d0                	call   eax
c0015af2:	83 c4 10             	add    esp,0x10
c0015af5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afa:	83 c0 24             	add    eax,0x24
c0015afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aff:	6a 00                	push   0x0
c0015b01:	68 c2 49 01 c0       	push   0xc00149c2
c0015b06:	6a 08                	push   0x8
c0015b08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0b:	ff d0                	call   eax
c0015b0d:	83 c4 10             	add    esp,0x10
c0015b10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b13:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b15:	83 c0 24             	add    eax,0x24
c0015b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1a:	6a 00                	push   0x0
c0015b1c:	68 7e 52 01 c0       	push   0xc001527e
c0015b21:	6a 09                	push   0x9
c0015b23:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b26:	ff d0                	call   eax
c0015b28:	83 c4 10             	add    esp,0x10
c0015b2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b30:	83 c0 24             	add    eax,0x24
c0015b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b35:	6a 00                	push   0x0
c0015b37:	68 7e 52 01 c0       	push   0xc001527e
c0015b3c:	6a 0a                	push   0xa
c0015b3e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b41:	ff d0                	call   eax
c0015b43:	83 c4 10             	add    esp,0x10
c0015b46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4b:	83 c0 24             	add    eax,0x24
c0015b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b50:	6a 00                	push   0x0
c0015b52:	68 7e 52 01 c0       	push   0xc001527e
c0015b57:	6a 0b                	push   0xb
c0015b59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5c:	ff d0                	call   eax
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b66:	83 c0 24             	add    eax,0x24
c0015b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6b:	6a 00                	push   0x0
c0015b6d:	68 7e 52 01 c0       	push   0xc001527e
c0015b72:	6a 0c                	push   0xc
c0015b74:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b77:	ff d0                	call   eax
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b81:	83 c0 24             	add    eax,0x24
c0015b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b86:	6a 00                	push   0x0
c0015b88:	68 08 52 01 c0       	push   0xc0015208
c0015b8d:	6a 0d                	push   0xd
c0015b8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b92:	ff d0                	call   eax
c0015b94:	83 c4 10             	add    esp,0x10
c0015b97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9c:	83 c0 24             	add    eax,0x24
c0015b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba1:	6a 00                	push   0x0
c0015ba3:	68 41 52 01 c0       	push   0xc0015241
c0015ba8:	6a 0e                	push   0xe
c0015baa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bad:	ff d0                	call   eax
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb7:	83 c0 24             	add    eax,0x24
c0015bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbc:	6a 00                	push   0x0
c0015bbe:	68 7e 52 01 c0       	push   0xc001527e
c0015bc3:	6a 0f                	push   0xf
c0015bc5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc8:	ff d0                	call   eax
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd2:	83 c0 24             	add    eax,0x24
c0015bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd7:	6a 00                	push   0x0
c0015bd9:	68 7e 52 01 c0       	push   0xc001527e
c0015bde:	6a 10                	push   0x10
c0015be0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be3:	ff d0                	call   eax
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bed:	83 c0 24             	add    eax,0x24
c0015bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf2:	6a 00                	push   0x0
c0015bf4:	68 7e 52 01 c0       	push   0xc001527e
c0015bf9:	6a 11                	push   0x11
c0015bfb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfe:	ff d0                	call   eax
c0015c00:	83 c4 10             	add    esp,0x10
c0015c03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c08:	83 c0 24             	add    eax,0x24
c0015c0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0d:	6a 00                	push   0x0
c0015c0f:	68 7e 52 01 c0       	push   0xc001527e
c0015c14:	6a 12                	push   0x12
c0015c16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c19:	ff d0                	call   eax
c0015c1b:	83 c4 10             	add    esp,0x10
c0015c1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c23:	83 c0 24             	add    eax,0x24
c0015c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c28:	6a 00                	push   0x0
c0015c2a:	68 7e 52 01 c0       	push   0xc001527e
c0015c2f:	6a 13                	push   0x13
c0015c31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c34:	ff d0                	call   eax
c0015c36:	83 c4 10             	add    esp,0x10
c0015c39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3e:	83 c0 24             	add    eax,0x24
c0015c41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c43:	6a 00                	push   0x0
c0015c45:	68 7e 52 01 c0       	push   0xc001527e
c0015c4a:	6a 14                	push   0x14
c0015c4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4f:	ff d0                	call   eax
c0015c51:	83 c4 10             	add    esp,0x10
c0015c54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c59:	83 c0 24             	add    eax,0x24
c0015c5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5e:	6a 00                	push   0x0
c0015c60:	68 7e 52 01 c0       	push   0xc001527e
c0015c65:	6a 1e                	push   0x1e
c0015c67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6a:	ff d0                	call   eax
c0015c6c:	83 c4 10             	add    esp,0x10
c0015c6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c74:	83 c0 24             	add    eax,0x24
c0015c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c79:	6a 00                	push   0x0
c0015c7b:	68 49 c7 01 c0       	push   0xc001c749
c0015c80:	6a 60                	push   0x60
c0015c82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c85:	ff d0                	call   eax
c0015c87:	83 c4 10             	add    esp,0x10
c0015c8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c90:	c9                   	leave  
c0015c91:	c3                   	ret    

c0015c92 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c92:	55                   	push   ebp
c0015c93:	89 e5                	mov    ebp,esp
c0015c95:	83 ec 08             	sub    esp,0x8
c0015c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9b:	83 ec 0c             	sub    esp,0xc
c0015c9e:	50                   	push   eax
c0015c9f:	e8 42 e9 ff ff       	call   c00145e6 <Device::getName()>
c0015ca4:	83 c4 10             	add    esp,0x10
c0015ca7:	8a 00                	mov    al,BYTE PTR [eax]
c0015ca9:	3c 41                	cmp    al,0x41
c0015cab:	0f 94 c0             	sete   al
c0015cae:	84 c0                	test   al,al
c0015cb0:	74 28                	je     c0015cda <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cb2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cb6:	7f 12                	jg     c0015cca <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cbb:	05 40 d6 02 c0       	add    eax,0xc002d640
c0015cc0:	8a 00                	mov    al,BYTE PTR [eax]
c0015cc2:	0f b6 c0             	movzx  eax,al
c0015cc5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cc8:	eb 10                	jmp    c0015cda <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cca:	83 ec 0c             	sub    esp,0xc
c0015ccd:	68 40 ad 02 c0       	push   0xc002ad40
c0015cd2:	e8 9e 48 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cdd:	c9                   	leave  
c0015cde:	c3                   	ret    
c0015cdf:	90                   	nop

c0015ce0 <startGUI(void*)>:
c0015ce0:	55                   	push   ebp
c0015ce1:	89 e5                	mov    ebp,esp
c0015ce3:	53                   	push   ebx
c0015ce4:	83 ec 04             	sub    esp,0x4
c0015ce7:	e8 b0 80 00 00       	call   c001dd9c <unlockScheduler()>
c0015cec:	8b 1d e8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e8
c0015cf2:	83 ec 08             	sub    esp,0x8
c0015cf5:	6a 01                	push   0x1
c0015cf7:	68 90 b0 02 c0       	push   0xc002b090
c0015cfc:	e8 f1 79 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	83 ec 08             	sub    esp,0x8
c0015d07:	53                   	push   ebx
c0015d08:	50                   	push   eax
c0015d09:	e8 18 7c 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	8b 1d e8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e8
c0015d17:	83 ec 08             	sub    esp,0x8
c0015d1a:	6a 01                	push   0x1
c0015d1c:	68 aa b0 02 c0       	push   0xc002b0aa
c0015d21:	e8 cc 79 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c0015d26:	83 c4 10             	add    esp,0x10
c0015d29:	83 ec 08             	sub    esp,0x8
c0015d2c:	53                   	push   ebx
c0015d2d:	50                   	push   eax
c0015d2e:	e8 f3 7b 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c0015d33:	83 c4 10             	add    esp,0x10
c0015d36:	90                   	nop
c0015d37:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d3a:	c9                   	leave  
c0015d3b:	c3                   	ret    

c0015d3c <startGUIVESA(void*)>:
c0015d3c:	55                   	push   ebp
c0015d3d:	89 e5                	mov    ebp,esp
c0015d3f:	53                   	push   ebx
c0015d40:	83 ec 04             	sub    esp,0x4
c0015d43:	e8 54 80 00 00       	call   c001dd9c <unlockScheduler()>
c0015d48:	8b 1d e8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e8
c0015d4e:	83 ec 08             	sub    esp,0x8
c0015d51:	6a 01                	push   0x1
c0015d53:	68 c4 b0 02 c0       	push   0xc002b0c4
c0015d58:	e8 95 79 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	83 ec 08             	sub    esp,0x8
c0015d63:	53                   	push   ebx
c0015d64:	50                   	push   eax
c0015d65:	e8 bc 7b 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c0015d6a:	83 c4 10             	add    esp,0x10
c0015d6d:	8b 1d e8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e8
c0015d73:	83 ec 08             	sub    esp,0x8
c0015d76:	6a 01                	push   0x1
c0015d78:	68 aa b0 02 c0       	push   0xc002b0aa
c0015d7d:	e8 70 79 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c0015d82:	83 c4 10             	add    esp,0x10
c0015d85:	83 ec 08             	sub    esp,0x8
c0015d88:	53                   	push   ebx
c0015d89:	50                   	push   eax
c0015d8a:	e8 97 7b 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c0015d8f:	83 c4 10             	add    esp,0x10
c0015d92:	90                   	nop
c0015d93:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d96:	c9                   	leave  
c0015d97:	c3                   	ret    

c0015d98 <sendKeyToTerminal(unsigned char)>:
c0015d98:	55                   	push   ebp
c0015d99:	89 e5                	mov    ebp,esp
c0015d9b:	83 ec 28             	sub    esp,0x28
c0015d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015da4:	a1 c4 e4 02 c0       	mov    eax,ds:0xc002e4c4
c0015da9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015dad:	83 ec 08             	sub    esp,0x8
c0015db0:	52                   	push   edx
c0015db1:	50                   	push   eax
c0015db2:	e8 b7 b5 ff ff       	call   c001136e <VgaText::receiveKey(unsigned char)>
c0015db7:	83 c4 10             	add    esp,0x10
c0015dba:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015dbe:	75 41                	jne    c0015e01 <sendKeyToTerminal(unsigned char)+0x69>
c0015dc0:	e8 fc 7f 00 00       	call   c001ddc1 <lockStuff()>
c0015dc5:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c0015dca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015dcd:	c7 05 a0 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5a0,0x0
c0015dd7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ddb:	74 1f                	je     c0015dfc <sendKeyToTerminal(unsigned char)+0x64>
c0015ddd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015de0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015de3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015de6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015de9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015dec:	83 ec 0c             	sub    esp,0xc
c0015def:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015df2:	e8 bb 85 00 00       	call   c001e3b2 <unblockTask(ThreadControlBlock*)>
c0015df7:	83 c4 10             	add    esp,0x10
c0015dfa:	eb db                	jmp    c0015dd7 <sendKeyToTerminal(unsigned char)+0x3f>
c0015dfc:	e8 5a 83 00 00       	call   c001e15b <unlockStuff()>
c0015e01:	90                   	nop
c0015e02:	c9                   	leave  
c0015e03:	c3                   	ret    

c0015e04 <sendKeyboardToken(KeyboardToken)>:
c0015e04:	55                   	push   ebp
c0015e05:	89 e5                	mov    ebp,esp
c0015e07:	83 ec 18             	sub    esp,0x18
c0015e0a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e10:	0f b7 c0             	movzx  eax,ax
c0015e13:	83 f2 01             	xor    edx,0x1
c0015e16:	88 90 c0 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1a40],dl
c0015e1c:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0015e21:	85 c0                	test   eax,eax
c0015e23:	74 24                	je     c0015e49 <sendKeyboardToken(KeyboardToken)+0x45>
c0015e25:	8b 0d a8 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5a8
c0015e2b:	83 ec 04             	sub    esp,0x4
c0015e2e:	68 c0 e5 02 c0       	push   0xc002e5c0
c0015e33:	83 ec 08             	sub    esp,0x8
c0015e36:	89 e2                	mov    edx,esp
c0015e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3b:	89 02                	mov    DWORD PTR [edx],eax
c0015e3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e40:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e44:	ff d1                	call   ecx
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4c:	66 3d 03 02          	cmp    ax,0x203
c0015e50:	75 07                	jne    c0015e59 <sendKeyboardToken(KeyboardToken)+0x55>
c0015e52:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c0015e57:	84 c0                	test   al,al
c0015e59:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e5d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e60:	a0 c8 e9 02 c0       	mov    al,ds:0xc002e9c8
c0015e65:	38 c2                	cmp    dl,al
c0015e67:	74 1c                	je     c0015e85 <sendKeyboardToken(KeyboardToken)+0x81>
c0015e69:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015e6c:	a2 c8 e9 02 c0       	mov    ds:0xc002e9c8,al
c0015e71:	a0 c8 e9 02 c0       	mov    al,ds:0xc002e9c8
c0015e76:	0f b6 c0             	movzx  eax,al
c0015e79:	83 ec 0c             	sub    esp,0xc
c0015e7c:	50                   	push   eax
c0015e7d:	e8 4c a7 ff ff       	call   c00105ce <setTerminalScrollLock(bool)>
c0015e82:	83 c4 10             	add    esp,0x10
c0015e85:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015e88:	84 c0                	test   al,al
c0015e8a:	0f 84 ae 00 00 00    	je     c0015f3e <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e93:	66 3d 10 03          	cmp    ax,0x310
c0015e97:	75 06                	jne    c0015e9f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e99:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea2:	66 3d 11 03          	cmp    ax,0x311
c0015ea6:	75 06                	jne    c0015eae <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ea8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb1:	66 3d 12 03          	cmp    ax,0x312
c0015eb5:	75 06                	jne    c0015ebd <sendKeyboardToken(KeyboardToken)+0xb9>
c0015eb7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec0:	66 3d 13 03          	cmp    ax,0x313
c0015ec4:	75 06                	jne    c0015ecc <sendKeyboardToken(KeyboardToken)+0xc8>
c0015ec6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ecf:	66 3d 14 03          	cmp    ax,0x314
c0015ed3:	75 06                	jne    c0015edb <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ed5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ede:	66 3d 15 03          	cmp    ax,0x315
c0015ee2:	75 06                	jne    c0015eea <sendKeyboardToken(KeyboardToken)+0xe6>
c0015ee4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eed:	66 3d 16 03          	cmp    ax,0x316
c0015ef1:	75 06                	jne    c0015ef9 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ef3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efc:	66 3d 17 03          	cmp    ax,0x317
c0015f00:	75 06                	jne    c0015f08 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f02:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0b:	66 3d 18 03          	cmp    ax,0x318
c0015f0f:	75 06                	jne    c0015f17 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f11:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1a:	66 3d 19 03          	cmp    ax,0x319
c0015f1e:	75 06                	jne    c0015f26 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f20:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f29:	66 3d 1a 03          	cmp    ax,0x31a
c0015f2d:	0f 85 c9 00 00 00    	jne    c0015ffc <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f33:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f39:	e9 be 00 00 00       	jmp    c0015ffc <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f41:	66 3d 10 03          	cmp    ax,0x310
c0015f45:	75 0a                	jne    c0015f51 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f47:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f4d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f54:	66 3d 11 03          	cmp    ax,0x311
c0015f58:	75 0a                	jne    c0015f64 <sendKeyboardToken(KeyboardToken)+0x160>
c0015f5a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f60:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f67:	66 3d 12 03          	cmp    ax,0x312
c0015f6b:	75 0a                	jne    c0015f77 <sendKeyboardToken(KeyboardToken)+0x173>
c0015f6d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015f73:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7a:	66 3d 13 03          	cmp    ax,0x313
c0015f7e:	75 0a                	jne    c0015f8a <sendKeyboardToken(KeyboardToken)+0x186>
c0015f80:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015f86:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8d:	66 3d 14 03          	cmp    ax,0x314
c0015f91:	75 0a                	jne    c0015f9d <sendKeyboardToken(KeyboardToken)+0x199>
c0015f93:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f99:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa0:	66 3d 15 03          	cmp    ax,0x315
c0015fa4:	75 0a                	jne    c0015fb0 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015fa6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb3:	66 3d 16 03          	cmp    ax,0x316
c0015fb7:	75 0a                	jne    c0015fc3 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015fb9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015fbf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc6:	66 3d 17 03          	cmp    ax,0x317
c0015fca:	75 0a                	jne    c0015fd6 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015fcc:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015fd2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd9:	66 3d 18 03          	cmp    ax,0x318
c0015fdd:	75 0a                	jne    c0015fe9 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015fdf:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015fe5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fec:	66 3d 19 03          	cmp    ax,0x319
c0015ff0:	75 0a                	jne    c0015ffc <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ff2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ff8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fff:	66 3d 00 02          	cmp    ax,0x200
c0016003:	75 2c                	jne    c0016031 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016005:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c001600a:	83 f0 01             	xor    eax,0x1
c001600d:	84 c0                	test   al,al
c001600f:	74 20                	je     c0016031 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016011:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c0016016:	6a 01                	push   0x1
c0016018:	6a 00                	push   0x0
c001601a:	68 e0 5c 01 c0       	push   0xc0015ce0
c001601f:	50                   	push   eax
c0016020:	e8 a7 7e 00 00       	call   c001decc <Process::createThread(void (*)(void*), void*, int)>
c0016025:	83 c4 10             	add    esp,0x10
c0016028:	c6 05 c0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9c0,0x1
c001602f:	eb 33                	jmp    c0016064 <sendKeyboardToken(KeyboardToken)+0x260>
c0016031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016034:	66 3d 01 02          	cmp    ax,0x201
c0016038:	75 2a                	jne    c0016064 <sendKeyboardToken(KeyboardToken)+0x260>
c001603a:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c001603f:	83 f0 01             	xor    eax,0x1
c0016042:	84 c0                	test   al,al
c0016044:	74 1e                	je     c0016064 <sendKeyboardToken(KeyboardToken)+0x260>
c0016046:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001604b:	6a 01                	push   0x1
c001604d:	6a 00                	push   0x0
c001604f:	68 3c 5d 01 c0       	push   0xc0015d3c
c0016054:	50                   	push   eax
c0016055:	e8 72 7e 00 00       	call   c001decc <Process::createThread(void (*)(void*), void*, int)>
c001605a:	83 c4 10             	add    esp,0x10
c001605d:	c6 05 c0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9c0,0x1
c0016064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016067:	66 3d 1d 03          	cmp    ax,0x31d
c001606b:	75 06                	jne    c0016073 <sendKeyboardToken(KeyboardToken)+0x26f>
c001606d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016076:	66 3d 1c 03          	cmp    ax,0x31c
c001607a:	75 06                	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x27e>
c001607c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016085:	66 3d 1b 03          	cmp    ax,0x31b
c0016089:	75 06                	jne    c0016091 <sendKeyboardToken(KeyboardToken)+0x28d>
c001608b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016094:	66 3d 1e 03          	cmp    ax,0x31e
c0016098:	75 06                	jne    c00160a0 <sendKeyboardToken(KeyboardToken)+0x29c>
c001609a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00160a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a3:	66 3d 1f 03          	cmp    ax,0x31f
c00160a7:	75 06                	jne    c00160af <sendKeyboardToken(KeyboardToken)+0x2ab>
c00160a9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b2:	66 3d 1a 03          	cmp    ax,0x31a
c00160b6:	75 06                	jne    c00160be <sendKeyboardToken(KeyboardToken)+0x2ba>
c00160b8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00160be:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00160c2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160c5:	83 f0 01             	xor    eax,0x1
c00160c8:	84 c0                	test   al,al
c00160ca:	74 77                	je     c0016143 <sendKeyboardToken(KeyboardToken)+0x33f>
c00160cc:	a0 c1 e6 02 c0       	mov    al,ds:0xc002e6c1
c00160d1:	84 c0                	test   al,al
c00160d3:	74 41                	je     c0016116 <sendKeyboardToken(KeyboardToken)+0x312>
c00160d5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160d9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00160dd:	74 2b                	je     c001610a <sendKeyboardToken(KeyboardToken)+0x306>
c00160df:	8b 15 c4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9c4
c00160e5:	89 d0                	mov    eax,edx
c00160e7:	c1 e0 02             	shl    eax,0x2
c00160ea:	01 d0                	add    eax,edx
c00160ec:	01 c0                	add    eax,eax
c00160ee:	a3 c4 e9 02 c0       	mov    ds:0xc002e9c4,eax
c00160f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f6:	0f b7 c0             	movzx  eax,ax
c00160f9:	8d 50 d0             	lea    edx,[eax-0x30]
c00160fc:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c0016101:	01 d0                	add    eax,edx
c0016103:	a3 c4 e9 02 c0       	mov    ds:0xc002e9c4,eax
c0016108:	eb 6d                	jmp    c0016177 <sendKeyboardToken(KeyboardToken)+0x373>
c001610a:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c0016114:	eb 61                	jmp    c0016177 <sendKeyboardToken(KeyboardToken)+0x373>
c0016116:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c001611b:	85 c0                	test   eax,eax
c001611d:	74 18                	je     c0016137 <sendKeyboardToken(KeyboardToken)+0x333>
c001611f:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c0016124:	0f b6 c0             	movzx  eax,al
c0016127:	83 ec 0c             	sub    esp,0xc
c001612a:	50                   	push   eax
c001612b:	e8 68 fc ff ff       	call   c0015d98 <sendKeyToTerminal(unsigned char)>
c0016130:	83 c4 10             	add    esp,0x10
c0016133:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016137:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c0016141:	eb 34                	jmp    c0016177 <sendKeyboardToken(KeyboardToken)+0x373>
c0016143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016146:	66 3d 01 01          	cmp    ax,0x101
c001614a:	75 2b                	jne    c0016177 <sendKeyboardToken(KeyboardToken)+0x373>
c001614c:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c0016151:	85 c0                	test   eax,eax
c0016153:	74 18                	je     c001616d <sendKeyboardToken(KeyboardToken)+0x369>
c0016155:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c001615a:	0f b6 c0             	movzx  eax,al
c001615d:	83 ec 0c             	sub    esp,0xc
c0016160:	50                   	push   eax
c0016161:	e8 32 fc ff ff       	call   c0015d98 <sendKeyToTerminal(unsigned char)>
c0016166:	83 c4 10             	add    esp,0x10
c0016169:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001616d:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c0016177:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001617a:	83 f0 01             	xor    eax,0x1
c001617d:	84 c0                	test   al,al
c001617f:	74 4c                	je     c00161cd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016181:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016184:	83 f0 01             	xor    eax,0x1
c0016187:	84 c0                	test   al,al
c0016189:	74 42                	je     c00161cd <sendKeyboardToken(KeyboardToken)+0x3c9>
c001618b:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c0016190:	83 f0 01             	xor    eax,0x1
c0016193:	84 c0                	test   al,al
c0016195:	74 36                	je     c00161cd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619a:	66 83 f8 1f          	cmp    ax,0x1f
c001619e:	76 09                	jbe    c00161a9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00161a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a3:	66 83 f8 7e          	cmp    ax,0x7e
c00161a7:	76 12                	jbe    c00161bb <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ac:	66 83 f8 0a          	cmp    ax,0xa
c00161b0:	74 09                	je     c00161bb <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b5:	66 83 f8 08          	cmp    ax,0x8
c00161b9:	75 12                	jne    c00161cd <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161be:	0f b6 c0             	movzx  eax,al
c00161c1:	83 ec 0c             	sub    esp,0xc
c00161c4:	50                   	push   eax
c00161c5:	e8 ce fb ff ff       	call   c0015d98 <sendKeyToTerminal(unsigned char)>
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161d0:	83 f0 01             	xor    eax,0x1
c00161d3:	84 c0                	test   al,al
c00161d5:	74 4f                	je     c0016226 <sendKeyboardToken(KeyboardToken)+0x422>
c00161d7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161da:	83 f0 01             	xor    eax,0x1
c00161dd:	84 c0                	test   al,al
c00161df:	74 45                	je     c0016226 <sendKeyboardToken(KeyboardToken)+0x422>
c00161e1:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c00161e6:	84 c0                	test   al,al
c00161e8:	74 3c                	je     c0016226 <sendKeyboardToken(KeyboardToken)+0x422>
c00161ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ed:	66 83 f8 3f          	cmp    ax,0x3f
c00161f1:	76 33                	jbe    c0016226 <sendKeyboardToken(KeyboardToken)+0x422>
c00161f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f6:	66 83 f8 7f          	cmp    ax,0x7f
c00161fa:	77 2a                	ja     c0016226 <sendKeyboardToken(KeyboardToken)+0x422>
c00161fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ff:	88 c2                	mov    dl,al
c0016201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016204:	66 83 f8 5f          	cmp    ax,0x5f
c0016208:	76 04                	jbe    c001620e <sendKeyboardToken(KeyboardToken)+0x40a>
c001620a:	b0 20                	mov    al,0x20
c001620c:	eb 02                	jmp    c0016210 <sendKeyboardToken(KeyboardToken)+0x40c>
c001620e:	b0 00                	mov    al,0x0
c0016210:	29 c2                	sub    edx,eax
c0016212:	88 d0                	mov    al,dl
c0016214:	83 e8 40             	sub    eax,0x40
c0016217:	0f b6 c0             	movzx  eax,al
c001621a:	83 ec 0c             	sub    esp,0xc
c001621d:	50                   	push   eax
c001621e:	e8 75 fb ff ff       	call   c0015d98 <sendKeyToTerminal(unsigned char)>
c0016223:	83 c4 10             	add    esp,0x10
c0016226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016229:	66 3d 00 03          	cmp    ax,0x300
c001622d:	75 0f                	jne    c001623e <sendKeyboardToken(KeyboardToken)+0x43a>
c001622f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016232:	83 f0 01             	xor    eax,0x1
c0016235:	84 c0                	test   al,al
c0016237:	74 05                	je     c001623e <sendKeyboardToken(KeyboardToken)+0x43a>
c0016239:	e8 c5 ab ff ff       	call   c0010e03 <doTerminalCycle()>
c001623e:	90                   	nop
c001623f:	c9                   	leave  
c0016240:	c3                   	ret    

c0016241 <clearInternalKeybuffer(VgaText*)>:
c0016241:	55                   	push   ebp
c0016242:	89 e5                	mov    ebp,esp
c0016244:	83 ec 08             	sub    esp,0x8
c0016247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624a:	05 34 11 00 00       	add    eax,0x1134
c001624f:	83 ec 0c             	sub    esp,0xc
c0016252:	50                   	push   eax
c0016253:	e8 3c a5 fe ff       	call   c0000794 <strlen>
c0016258:	83 c4 10             	add    esp,0x10
c001625b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001625e:	81 c2 34 11 00 00    	add    edx,0x1134
c0016264:	83 ec 04             	sub    esp,0x4
c0016267:	50                   	push   eax
c0016268:	6a 00                	push   0x0
c001626a:	52                   	push   edx
c001626b:	e8 08 a5 fe ff       	call   c0000778 <memset>
c0016270:	83 c4 10             	add    esp,0x10
c0016273:	90                   	nop
c0016274:	c9                   	leave  
c0016275:	c3                   	ret    

c0016276 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016276:	55                   	push   ebp
c0016277:	89 e5                	mov    ebp,esp
c0016279:	83 ec 18             	sub    esp,0x18
c001627c:	fb                   	sti    
c001627d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016284:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016288:	0f 84 8a 00 00 00    	je     c0016318 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001628e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016291:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016297:	84 c0                	test   al,al
c0016299:	75 11                	jne    c00162ac <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001629b:	e8 fa 7a 00 00       	call   c001dd9a <lockScheduler()>
c00162a0:	e8 31 7e 00 00       	call   c001e0d6 <schedule()>
c00162a5:	e8 f2 7a 00 00       	call   c001dd9c <unlockScheduler()>
c00162aa:	eb e2                	jmp    c001628e <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00162ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00162af:	8d 50 01             	lea    edx,[eax+0x1]
c00162b2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00162b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162b8:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00162be:	88 10                	mov    BYTE PTR [eax],dl
c00162c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c3:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162c9:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00162cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162cf:	05 34 11 00 00       	add    eax,0x1134
c00162d4:	83 ec 0c             	sub    esp,0xc
c00162d7:	50                   	push   eax
c00162d8:	e8 b7 a4 fe ff       	call   c0000794 <strlen>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e3:	81 c2 34 11 00 00    	add    edx,0x1134
c00162e9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00162ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162ef:	81 c2 34 11 00 00    	add    edx,0x1134
c00162f5:	83 ec 04             	sub    esp,0x4
c00162f8:	50                   	push   eax
c00162f9:	51                   	push   ecx
c00162fa:	52                   	push   edx
c00162fb:	e8 7c a3 fe ff       	call   c000067c <memmove>
c0016300:	83 c4 10             	add    esp,0x10
c0016303:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016306:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016309:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001630d:	0f 85 71 ff ff ff    	jne    c0016284 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016313:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016316:	eb 03                	jmp    c001631b <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016318:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001631b:	c9                   	leave  
c001631c:	c3                   	ret    
c001631d:	90                   	nop

c001631e <Keyboard::Keyboard(char const*)>:
c001631e:	83 ec 0c             	sub    esp,0xc
c0016321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016325:	83 ec 08             	sub    esp,0x8
c0016328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001632c:	50                   	push   eax
c001632d:	e8 b8 e1 ff ff       	call   c00144ea <Device::Device(char const*)>
c0016332:	83 c4 10             	add    esp,0x10
c0016335:	ba e8 b0 02 c0       	mov    edx,0xc002b0e8
c001633a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001633e:	89 10                	mov    DWORD PTR [eax],edx
c0016340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016344:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001634e:	c6 05 a4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5a4,0x1
c0016355:	90                   	nop
c0016356:	83 c4 0c             	add    esp,0xc
c0016359:	c3                   	ret    

c001635a <Keyboard::~Keyboard()>:
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	ba e8 b0 02 c0       	mov    edx,0xc002b0e8
c0016362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016366:	89 10                	mov    DWORD PTR [eax],edx
c0016368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	50                   	push   eax
c0016370:	e8 57 de ff ff       	call   c00141cc <Device::~Device()>
c0016375:	83 c4 10             	add    esp,0x10
c0016378:	90                   	nop
c0016379:	83 c4 0c             	add    esp,0xc
c001637c:	c3                   	ret    
c001637d:	90                   	nop

c001637e <Keyboard::~Keyboard()>:
c001637e:	83 ec 0c             	sub    esp,0xc
c0016381:	83 ec 0c             	sub    esp,0xc
c0016384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016388:	e8 cd ff ff ff       	call   c001635a <Keyboard::~Keyboard()>
c001638d:	83 c4 10             	add    esp,0x10
c0016390:	83 ec 08             	sub    esp,0x8
c0016393:	68 5c 01 00 00       	push   0x15c
c0016398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001639c:	e8 53 ca ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	83 c4 0c             	add    esp,0xc
c00163a7:	c3                   	ret    

c00163a8 <LogicalDisk::close(int, int, void*)>:
c00163a8:	83 c8 ff             	or     eax,0xffffffff
c00163ab:	c3                   	ret    

c00163ac <LogicalDisk::~LogicalDisk()>:
c00163ac:	83 ec 0c             	sub    esp,0xc
c00163af:	ba 98 b1 02 c0       	mov    edx,0xc002b198
c00163b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b8:	89 10                	mov    DWORD PTR [eax],edx
c00163ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163be:	83 ec 0c             	sub    esp,0xc
c00163c1:	50                   	push   eax
c00163c2:	e8 05 de ff ff       	call   c00141cc <Device::~Device()>
c00163c7:	83 c4 10             	add    esp,0x10
c00163ca:	90                   	nop
c00163cb:	83 c4 0c             	add    esp,0xc
c00163ce:	c3                   	ret    
c00163cf:	90                   	nop

c00163d0 <LogicalDisk::~LogicalDisk()>:
c00163d0:	83 ec 0c             	sub    esp,0xc
c00163d3:	83 ec 0c             	sub    esp,0xc
c00163d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163da:	e8 cd ff ff ff       	call   c00163ac <LogicalDisk::~LogicalDisk()>
c00163df:	83 c4 10             	add    esp,0x10
c00163e2:	83 ec 08             	sub    esp,0x8
c00163e5:	68 74 01 00 00       	push   0x174
c00163ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ee:	e8 01 ca ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00163f3:	83 c4 10             	add    esp,0x10
c00163f6:	83 c4 0c             	add    esp,0xc
c00163f9:	c3                   	ret    

c00163fa <LogicalDisk::open(int, int, void*)>:
c00163fa:	83 ec 18             	sub    esp,0x18
c00163fd:	68 14 b1 02 c0       	push   0xc002b114
c0016402:	e8 6e 41 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0016407:	83 c8 ff             	or     eax,0xffffffff
c001640a:	83 c4 1c             	add    esp,0x1c
c001640d:	c3                   	ret    

c001640e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001640e:	53                   	push   ebx
c001640f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016417:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001641b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016421:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016427:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001642d:	77 10                	ja     c001643f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001642f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016435:	89 d3                	mov    ebx,edx
c0016437:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001643d:	72 05                	jb     c0016444 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001643f:	83 c8 ff             	or     eax,0xffffffff
c0016442:	89 c2                	mov    edx,eax
c0016444:	5b                   	pop    ebx
c0016445:	c3                   	ret    

c0016446 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016446:	56                   	push   esi
c0016447:	83 c8 ff             	or     eax,0xffffffff
c001644a:	53                   	push   ebx
c001644b:	89 c2                	mov    edx,eax
c001644d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016451:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016455:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016459:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001645f:	77 27                	ja     c0016488 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016461:	89 d8                	mov    eax,ebx
c0016463:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016469:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001646f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016474:	89 c2                	mov    edx,eax
c0016476:	73 10                	jae    c0016488 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016478:	89 c8                	mov    eax,ecx
c001647a:	89 da                	mov    edx,ebx
c001647c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016482:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016488:	5b                   	pop    ebx
c0016489:	5e                   	pop    esi
c001648a:	c3                   	ret    
c001648b:	90                   	nop

c001648c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001648c:	83 ec 1c             	sub    esp,0x1c
c001648f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016493:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001649b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001649f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00164a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00164a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00164aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164b2:	83 ec 08             	sub    esp,0x8
c00164b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164b9:	50                   	push   eax
c00164ba:	e8 2b e0 ff ff       	call   c00144ea <Device::Device(char const*)>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	ba 98 b1 02 c0       	mov    edx,0xc002b198
c00164c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164cb:	89 10                	mov    DWORD PTR [eax],edx
c00164cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164d1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164dc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164e7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00164f1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164fd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016503:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016509:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001650d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016510:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016514:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001651a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016524:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016528:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001652e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016532:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001653c:	90                   	nop
c001653d:	83 c4 1c             	add    esp,0x1c
c0016540:	c3                   	ret    
c0016541:	90                   	nop

c0016542 <LogicalDisk::assignDriveLetter()>:
c0016542:	55                   	push   ebp
c0016543:	57                   	push   edi
c0016544:	56                   	push   esi
c0016545:	53                   	push   ebx
c0016546:	83 ec 14             	sub    esp,0x14
c0016549:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001654d:	8b 3d e0 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9e0
c0016553:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016559:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001655d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016563:	8b 3d e4 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9e4
c0016569:	3c 01                	cmp    al,0x1
c001656b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001656f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016573:	19 c0                	sbb    eax,eax
c0016575:	83 e0 02             	and    eax,0x2
c0016578:	83 c0 41             	add    eax,0x41
c001657b:	0f be e8             	movsx  ebp,al
c001657e:	3c 43                	cmp    al,0x43
c0016580:	75 10                	jne    c0016592 <LogicalDisk::assignDriveLetter()+0x50>
c0016582:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016589:	75 5d                	jne    c00165e8 <LogicalDisk::assignDriveLetter()+0xa6>
c001658b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016590:	75 56                	jne    c00165e8 <LogicalDisk::assignDriveLetter()+0xa6>
c0016592:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016595:	ba 01 00 00 00       	mov    edx,0x1
c001659a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001659e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00165a2:	d3 e2                	shl    edx,cl
c00165a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165a8:	89 d7                	mov    edi,edx
c00165aa:	89 d6                	mov    esi,edx
c00165ac:	c1 ff 1f             	sar    edi,0x1f
c00165af:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00165b3:	21 f9                	and    ecx,edi
c00165b5:	09 d1                	or     ecx,edx
c00165b7:	75 2f                	jne    c00165e8 <LogicalDisk::assignDriveLetter()+0xa6>
c00165b9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00165bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165c1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00165c7:	09 f2                	or     edx,esi
c00165c9:	89 15 e0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9e0,edx
c00165cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165d3:	09 fa                	or     edx,edi
c00165d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00165d9:	89 15 e4 e9 02 c0    	mov    DWORD PTR ds:0xc002e9e4,edx
c00165df:	89 1c bd 00 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1600],ebx
c00165e6:	eb 08                	jmp    c00165f0 <LogicalDisk::assignDriveLetter()+0xae>
c00165e8:	45                   	inc    ebp
c00165e9:	40                   	inc    eax
c00165ea:	3c 5b                	cmp    al,0x5b
c00165ec:	75 90                	jne    c001657e <LogicalDisk::assignDriveLetter()+0x3c>
c00165ee:	31 c0                	xor    eax,eax
c00165f0:	83 c4 14             	add    esp,0x14
c00165f3:	5b                   	pop    ebx
c00165f4:	5e                   	pop    esi
c00165f5:	5f                   	pop    edi
c00165f6:	5d                   	pop    ebp
c00165f7:	c3                   	ret    

c00165f8 <LogicalDisk::mount()>:
c00165f8:	56                   	push   esi
c00165f9:	53                   	push   ebx
c00165fa:	51                   	push   ecx
c00165fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165ff:	8b 1d 6c e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e56c
c0016605:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001660f:	85 db                	test   ebx,ebx
c0016611:	74 50                	je     c0016663 <LogicalDisk::mount()+0x6b>
c0016613:	e8 6d 77 00 00       	call   c001dd85 <getIRQNestingLevel()>
c0016618:	52                   	push   edx
c0016619:	52                   	push   edx
c001661a:	50                   	push   eax
c001661b:	68 38 b1 02 c0       	push   0xc002b138
c0016620:	e8 af c8 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0016625:	83 c4 0c             	add    esp,0xc
c0016628:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001662f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016631:	83 e8 41             	sub    eax,0x41
c0016634:	50                   	push   eax
c0016635:	56                   	push   esi
c0016636:	53                   	push   ebx
c0016637:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001663a:	83 c4 10             	add    esp,0x10
c001663d:	84 c0                	test   al,al
c001663f:	74 08                	je     c0016649 <LogicalDisk::mount()+0x51>
c0016641:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016647:	eb 1c                	jmp    c0016665 <LogicalDisk::mount()+0x6d>
c0016649:	e8 37 77 00 00       	call   c001dd85 <getIRQNestingLevel()>
c001664e:	51                   	push   ecx
c001664f:	51                   	push   ecx
c0016650:	50                   	push   eax
c0016651:	68 53 b1 02 c0       	push   0xc002b153
c0016656:	e8 79 c8 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001665b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001665e:	83 c4 10             	add    esp,0x10
c0016661:	eb ac                	jmp    c001660f <LogicalDisk::mount()+0x17>
c0016663:	31 c0                	xor    eax,eax
c0016665:	5a                   	pop    edx
c0016666:	5b                   	pop    ebx
c0016667:	5e                   	pop    esi
c0016668:	c3                   	ret    
c0016669:	90                   	nop

c001666a <LogicalDisk::unmount()>:
c001666a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001666e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016678:	c3                   	ret    
c0016679:	90                   	nop

c001667a <LogicalDisk::eject()>:
c001667a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001667e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016684:	8b 10                	mov    edx,DWORD PTR [eax]
c0016686:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001668a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001668d:	90                   	nop

c001668e <LogicalDisk::unassignDriveLetter()>:
c001668e:	57                   	push   edi
c001668f:	56                   	push   esi
c0016690:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016694:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001669b:	84 c9                	test   cl,cl
c001669d:	75 0f                	jne    c00166ae <LogicalDisk::unassignDriveLetter()+0x20>
c001669f:	c7 44 24 0c 6e b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b16e
c00166a7:	5e                   	pop    esi
c00166a8:	5f                   	pop    edi
c00166a9:	e9 c7 3e 00 00       	jmp    c001a575 <Krnl::panic(char const*)>
c00166ae:	83 e9 41             	sub    ecx,0x41
c00166b1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00166b8:	b8 01 00 00 00       	mov    eax,0x1
c00166bd:	c7 04 8d 00 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1600],0x0
c00166c8:	d3 e0                	shl    eax,cl
c00166ca:	89 c7                	mov    edi,eax
c00166cc:	f7 d0                	not    eax
c00166ce:	c1 ff 1f             	sar    edi,0x1f
c00166d1:	21 05 e0 e9 02 c0    	and    DWORD PTR ds:0xc002e9e0,eax
c00166d7:	89 fe                	mov    esi,edi
c00166d9:	f7 d6                	not    esi
c00166db:	21 35 e4 e9 02 c0    	and    DWORD PTR ds:0xc002e9e4,esi
c00166e1:	5e                   	pop    esi
c00166e2:	5f                   	pop    edi
c00166e3:	c3                   	ret    

c00166e4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00166e4:	57                   	push   edi
c00166e5:	56                   	push   esi
c00166e6:	53                   	push   ebx
c00166e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00166fd:	77 41                	ja     c0016740 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00166ff:	99                   	cdq    
c0016700:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016706:	01 c8                	add    eax,ecx
c0016708:	11 da                	adc    edx,ebx
c001670a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016710:	19 d7                	sbb    edi,edx
c0016712:	72 33                	jb     c0016747 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016714:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001671a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016720:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016724:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016728:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001672e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016738:	5b                   	pop    ebx
c0016739:	5e                   	pop    esi
c001673a:	5f                   	pop    edi
c001673b:	e9 b0 0a 00 00       	jmp    c00171f0 <VCache::read(unsigned long long, int, void*)>
c0016740:	b8 05 00 00 00       	mov    eax,0x5
c0016745:	eb 05                	jmp    c001674c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016747:	b8 07 00 00 00       	mov    eax,0x7
c001674c:	5b                   	pop    ebx
c001674d:	5e                   	pop    esi
c001674e:	5f                   	pop    edi
c001674f:	c3                   	ret    

c0016750 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016750:	57                   	push   edi
c0016751:	56                   	push   esi
c0016752:	53                   	push   ebx
c0016753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001675b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001675f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016763:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016769:	77 41                	ja     c00167ac <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001676b:	99                   	cdq    
c001676c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016772:	01 c8                	add    eax,ecx
c0016774:	11 da                	adc    edx,ebx
c0016776:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001677c:	19 d7                	sbb    edi,edx
c001677e:	72 33                	jb     c00167b3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016780:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016786:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001678c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016790:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016794:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001679a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167a4:	5b                   	pop    ebx
c00167a5:	5e                   	pop    esi
c00167a6:	5f                   	pop    edi
c00167a7:	e9 4e 09 00 00       	jmp    c00170fa <VCache::write(unsigned long long, int, void*)>
c00167ac:	b8 05 00 00 00       	mov    eax,0x5
c00167b1:	eb 05                	jmp    c00167b8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00167b3:	b8 07 00 00 00       	mov    eax,0x7
c00167b8:	5b                   	pop    ebx
c00167b9:	5e                   	pop    esi
c00167ba:	5f                   	pop    edi
c00167bb:	c3                   	ret    

c00167bc <Mouse::Mouse(char const*)>:
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c3:	83 ec 08             	sub    esp,0x8
c00167c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ca:	50                   	push   eax
c00167cb:	e8 1a dd ff ff       	call   c00144ea <Device::Device(char const*)>
c00167d0:	83 c4 10             	add    esp,0x10
c00167d3:	ba c4 b1 02 c0       	mov    edx,0xc002b1c4
c00167d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167dc:	89 10                	mov    DWORD PTR [eax],edx
c00167de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00167ec:	90                   	nop
c00167ed:	83 c4 0c             	add    esp,0xc
c00167f0:	c3                   	ret    
c00167f1:	90                   	nop

c00167f2 <Mouse::~Mouse()>:
c00167f2:	83 ec 0c             	sub    esp,0xc
c00167f5:	ba c4 b1 02 c0       	mov    edx,0xc002b1c4
c00167fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167fe:	89 10                	mov    DWORD PTR [eax],edx
c0016800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016804:	83 ec 0c             	sub    esp,0xc
c0016807:	50                   	push   eax
c0016808:	e8 bf d9 ff ff       	call   c00141cc <Device::~Device()>
c001680d:	83 c4 10             	add    esp,0x10
c0016810:	90                   	nop
c0016811:	83 c4 0c             	add    esp,0xc
c0016814:	c3                   	ret    
c0016815:	90                   	nop

c0016816 <Mouse::~Mouse()>:
c0016816:	83 ec 0c             	sub    esp,0xc
c0016819:	83 ec 0c             	sub    esp,0xc
c001681c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016820:	e8 cd ff ff ff       	call   c00167f2 <Mouse::~Mouse()>
c0016825:	83 c4 10             	add    esp,0x10
c0016828:	83 ec 08             	sub    esp,0x8
c001682b:	68 58 01 00 00       	push   0x158
c0016830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016834:	e8 bb c5 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0016839:	83 c4 10             	add    esp,0x10
c001683c:	83 c4 0c             	add    esp,0xc
c001683f:	c3                   	ret    

c0016840 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016840:	55                   	push   ebp
c0016841:	57                   	push   edi
c0016842:	56                   	push   esi
c0016843:	53                   	push   ebx
c0016844:	81 ec 28 01 00 00    	sub    esp,0x128
c001684a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016851:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016858:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001685f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016866:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001686a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001686e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016875:	e8 6c dd ff ff       	call   c00145e6 <Device::getName()>
c001687a:	5a                   	pop    edx
c001687b:	59                   	pop    ecx
c001687c:	50                   	push   eax
c001687d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016881:	55                   	push   ebp
c0016882:	e8 ad 9f fe ff       	call   c0000834 <strcpy>
c0016887:	5b                   	pop    ebx
c0016888:	58                   	pop    eax
c0016889:	68 e8 b1 02 c0       	push   0xc002b1e8
c001688e:	55                   	push   ebp
c001688f:	e8 e0 a0 fe ff       	call   c0000974 <strcat>
c0016894:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001689b:	e8 a0 8f ff ff       	call   c000f840 <malloc>
c00168a0:	83 c4 0c             	add    esp,0xc
c00168a3:	89 c3                	mov    ebx,eax
c00168a5:	57                   	push   edi
c00168a6:	56                   	push   esi
c00168a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168af:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00168b6:	55                   	push   ebp
c00168b7:	50                   	push   eax
c00168b8:	e8 cf fb ff ff       	call   c001648c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00168bd:	83 c4 14             	add    esp,0x14
c00168c0:	53                   	push   ebx
c00168c1:	e8 7c fc ff ff       	call   c0016542 <LogicalDisk::assignDriveLetter()>
c00168c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168c9:	89 c6                	mov    esi,eax
c00168cb:	e8 28 fd ff ff       	call   c00165f8 <LogicalDisk::mount()>
c00168d0:	58                   	pop    eax
c00168d1:	5a                   	pop    edx
c00168d2:	53                   	push   ebx
c00168d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168da:	e8 1b da ff ff       	call   c00142fa <Device::addChild(Device*)>
c00168df:	59                   	pop    ecx
c00168e0:	89 f0                	mov    eax,esi
c00168e2:	5b                   	pop    ebx
c00168e3:	0f be f0             	movsx  esi,al
c00168e6:	56                   	push   esi
c00168e7:	68 f3 b1 02 c0       	push   0xc002b1f3
c00168ec:	e8 e3 c5 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00168f1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168f7:	5b                   	pop    ebx
c00168f8:	5e                   	pop    esi
c00168f9:	5f                   	pop    edi
c00168fa:	5d                   	pop    ebp
c00168fb:	c3                   	ret    

c00168fc <createPartitionsForDisk(PhysicalDisk*)>:
c00168fc:	55                   	push   ebp
c00168fd:	57                   	push   edi
c00168fe:	56                   	push   esi
c00168ff:	53                   	push   ebx
c0016900:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016906:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001690d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016913:	3d 00 02 00 00       	cmp    eax,0x200
c0016918:	74 27                	je     c0016941 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001691a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016920:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016926:	83 ec 10             	sub    esp,0x10
c0016929:	0f a4 f7 0a          	shld   edi,esi,0xa
c001692d:	99                   	cdq    
c001692e:	c1 e6 0a             	shl    esi,0xa
c0016931:	52                   	push   edx
c0016932:	89 fd                	mov    ebp,edi
c0016934:	50                   	push   eax
c0016935:	55                   	push   ebp
c0016936:	56                   	push   esi
c0016937:	e8 40 00 01 00       	call   c002697c <__udivdi3>
c001693c:	e9 b1 00 00 00       	jmp    c00169f2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016941:	83 ec 0c             	sub    esp,0xc
c0016944:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016946:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001694a:	56                   	push   esi
c001694b:	6a 01                	push   0x1
c001694d:	6a 00                	push   0x0
c001694f:	6a 00                	push   0x0
c0016951:	53                   	push   ebx
c0016952:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016955:	83 c4 20             	add    esp,0x20
c0016958:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016960:	75 0a                	jne    c001696c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016962:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001696a:	74 2c                	je     c0016998 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001696c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016972:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016978:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001697e:	83 ec 10             	sub    esp,0x10
c0016981:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016985:	89 f7                	mov    edi,esi
c0016987:	c1 e0 0a             	shl    eax,0xa
c001698a:	c1 ff 1f             	sar    edi,0x1f
c001698d:	57                   	push   edi
c001698e:	56                   	push   esi
c001698f:	52                   	push   edx
c0016990:	50                   	push   eax
c0016991:	e8 e6 ff 00 00       	call   c002697c <__udivdi3>
c0016996:	eb 5a                	jmp    c00169f2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016998:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001699f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00169a6:	83 e1 7f             	and    ecx,0x7f
c00169a9:	83 e0 7f             	and    eax,0x7f
c00169ac:	01 c1                	add    ecx,eax
c00169ae:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00169b5:	83 e0 7f             	and    eax,0x7f
c00169b8:	01 c1                	add    ecx,eax
c00169ba:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00169c1:	83 e0 7f             	and    eax,0x7f
c00169c4:	00 c1                	add    cl,al
c00169c6:	74 41                	je     c0016a09 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00169c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169ce:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169d4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169da:	83 ec 10             	sub    esp,0x10
c00169dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169e1:	89 f7                	mov    edi,esi
c00169e3:	c1 e0 0a             	shl    eax,0xa
c00169e6:	c1 ff 1f             	sar    edi,0x1f
c00169e9:	57                   	push   edi
c00169ea:	56                   	push   esi
c00169eb:	52                   	push   edx
c00169ec:	50                   	push   eax
c00169ed:	e8 8a ff 00 00       	call   c002697c <__udivdi3>
c00169f2:	83 c4 14             	add    esp,0x14
c00169f5:	52                   	push   edx
c00169f6:	50                   	push   eax
c00169f7:	6a 00                	push   0x0
c00169f9:	6a 00                	push   0x0
c00169fb:	53                   	push   ebx
c00169fc:	e8 3f fe ff ff       	call   c0016840 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a01:	83 c4 20             	add    esp,0x20
c0016a04:	e9 79 01 00 00       	jmp    c0016b82 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a09:	89 f0                	mov    eax,esi
c0016a0b:	31 f6                	xor    esi,esi
c0016a0d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a14:	75 02                	jne    c0016a18 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a16:	89 f1                	mov    ecx,esi
c0016a18:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a1f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a26:	c1 e2 08             	shl    edx,0x8
c0016a29:	c1 e7 10             	shl    edi,0x10
c0016a2c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a34:	09 fa                	or     edx,edi
c0016a36:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a3e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a45:	83 c0 10             	add    eax,0x10
c0016a48:	09 fa                	or     edx,edi
c0016a4a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a51:	c1 e7 18             	shl    edi,0x18
c0016a54:	09 fa                	or     edx,edi
c0016a56:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a5d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a61:	c1 e7 10             	shl    edi,0x10
c0016a64:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016a6b:	c1 e2 08             	shl    edx,0x8
c0016a6e:	09 fa                	or     edx,edi
c0016a70:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016a77:	09 fa                	or     edx,edi
c0016a79:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016a80:	c1 e7 18             	shl    edi,0x18
c0016a83:	09 fa                	or     edx,edi
c0016a85:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016a89:	46                   	inc    esi
c0016a8a:	83 fe 04             	cmp    esi,0x4
c0016a8d:	0f 85 7a ff ff ff    	jne    c0016a0d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a97:	83 f0 01             	xor    eax,0x1
c0016a9a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016a9e:	75 57                	jne    c0016af7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016aa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aa4:	83 f0 01             	xor    eax,0x1
c0016aa7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016aab:	75 4a                	jne    c0016af7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016aad:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016ab1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016ab9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ac1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ac7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016acd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ad7:	89 f7                	mov    edi,esi
c0016ad9:	c1 e0 0a             	shl    eax,0xa
c0016adc:	c1 ff 1f             	sar    edi,0x1f
c0016adf:	57                   	push   edi
c0016ae0:	56                   	push   esi
c0016ae1:	52                   	push   edx
c0016ae2:	50                   	push   eax
c0016ae3:	e8 94 fe 00 00       	call   c002697c <__udivdi3>
c0016ae8:	83 c4 10             	add    esp,0x10
c0016aeb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016aef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016af3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016af7:	84 c9                	test   cl,cl
c0016af9:	74 53                	je     c0016b4e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016afb:	0f b6 c9             	movzx  ecx,cl
c0016afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b06:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b0a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b16:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b1a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b2e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b32:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b36:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b3a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b42:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b46:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b4a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b4e:	31 ed                	xor    ebp,ebp
c0016b50:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b54:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b58:	89 f8                	mov    eax,edi
c0016b5a:	09 f0                	or     eax,esi
c0016b5c:	74 1e                	je     c0016b7c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b5e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016b62:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016b66:	89 d1                	mov    ecx,edx
c0016b68:	09 c1                	or     ecx,eax
c0016b6a:	74 10                	je     c0016b7c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b6c:	83 ec 0c             	sub    esp,0xc
c0016b6f:	57                   	push   edi
c0016b70:	56                   	push   esi
c0016b71:	52                   	push   edx
c0016b72:	50                   	push   eax
c0016b73:	53                   	push   ebx
c0016b74:	e8 c7 fc ff ff       	call   c0016840 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b79:	83 c4 20             	add    esp,0x20
c0016b7c:	45                   	inc    ebp
c0016b7d:	83 fd 04             	cmp    ebp,0x4
c0016b80:	75 ce                	jne    c0016b50 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016b82:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016b88:	5b                   	pop    ebx
c0016b89:	5e                   	pop    esi
c0016b8a:	5f                   	pop    edi
c0016b8b:	5d                   	pop    ebp
c0016b8c:	c3                   	ret    
c0016b8d:	90                   	nop

c0016b8e <Serial::Serial(char const*)>:
c0016b8e:	83 ec 0c             	sub    esp,0xc
c0016b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b95:	83 ec 08             	sub    esp,0x8
c0016b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b9c:	50                   	push   eax
c0016b9d:	e8 48 d9 ff ff       	call   c00144ea <Device::Device(char const*)>
c0016ba2:	83 c4 10             	add    esp,0x10
c0016ba5:	ba 20 b2 02 c0       	mov    edx,0xc002b220
c0016baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bae:	89 10                	mov    DWORD PTR [eax],edx
c0016bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016bbe:	90                   	nop
c0016bbf:	83 c4 0c             	add    esp,0xc
c0016bc2:	c3                   	ret    
c0016bc3:	90                   	nop

c0016bc4 <Serial::~Serial()>:
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	ba 20 b2 02 c0       	mov    edx,0xc002b220
c0016bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd0:	89 10                	mov    DWORD PTR [eax],edx
c0016bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd6:	83 ec 0c             	sub    esp,0xc
c0016bd9:	50                   	push   eax
c0016bda:	e8 ed d5 ff ff       	call   c00141cc <Device::~Device()>
c0016bdf:	83 c4 10             	add    esp,0x10
c0016be2:	90                   	nop
c0016be3:	83 c4 0c             	add    esp,0xc
c0016be6:	c3                   	ret    
c0016be7:	90                   	nop

c0016be8 <Serial::~Serial()>:
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	83 ec 0c             	sub    esp,0xc
c0016bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf2:	e8 cd ff ff ff       	call   c0016bc4 <Serial::~Serial()>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	83 ec 08             	sub    esp,0x8
c0016bfd:	68 58 01 00 00       	push   0x158
c0016c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c06:	e8 e9 c1 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0016c0b:	83 c4 10             	add    esp,0x10
c0016c0e:	83 c4 0c             	add    esp,0xc
c0016c11:	c3                   	ret    

c0016c12 <Timer::Timer(char const*)>:
c0016c12:	83 ec 0c             	sub    esp,0xc
c0016c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c19:	83 ec 08             	sub    esp,0x8
c0016c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c20:	50                   	push   eax
c0016c21:	e8 c4 d8 ff ff       	call   c00144ea <Device::Device(char const*)>
c0016c26:	83 c4 10             	add    esp,0x10
c0016c29:	ba 64 b2 02 c0       	mov    edx,0xc002b264
c0016c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c32:	89 10                	mov    DWORD PTR [eax],edx
c0016c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c38:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c42:	90                   	nop
c0016c43:	83 c4 0c             	add    esp,0xc
c0016c46:	c3                   	ret    
c0016c47:	90                   	nop

c0016c48 <Timer::~Timer()>:
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	ba 64 b2 02 c0       	mov    edx,0xc002b264
c0016c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c54:	89 10                	mov    DWORD PTR [eax],edx
c0016c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5a:	83 ec 0c             	sub    esp,0xc
c0016c5d:	50                   	push   eax
c0016c5e:	e8 69 d5 ff ff       	call   c00141cc <Device::~Device()>
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	90                   	nop
c0016c67:	83 c4 0c             	add    esp,0xc
c0016c6a:	c3                   	ret    
c0016c6b:	90                   	nop

c0016c6c <Timer::~Timer()>:
c0016c6c:	83 ec 0c             	sub    esp,0xc
c0016c6f:	83 ec 0c             	sub    esp,0xc
c0016c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c76:	e8 cd ff ff ff       	call   c0016c48 <Timer::~Timer()>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	83 ec 08             	sub    esp,0x8
c0016c81:	68 5c 01 00 00       	push   0x15c
c0016c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8a:	e8 65 c1 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0016c8f:	83 c4 10             	add    esp,0x10
c0016c92:	83 c4 0c             	add    esp,0xc
c0016c95:	c3                   	ret    

c0016c96 <Timer::read()>:
c0016c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ca0:	c3                   	ret    

c0016ca1 <timerHandler(unsigned long long)>:
c0016ca1:	55                   	push   ebp
c0016ca2:	57                   	push   edi
c0016ca3:	56                   	push   esi
c0016ca4:	53                   	push   ebx
c0016ca5:	83 ec 0c             	sub    esp,0xc
c0016ca8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016cac:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016cb0:	01 35 70 ea 02 c0    	add    DWORD PTR ds:0xc002ea70,esi
c0016cb6:	11 3d 74 ea 02 c0    	adc    DWORD PTR ds:0xc002ea74,edi
c0016cbc:	80 3d ed e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3ed,0x0
c0016cc3:	0f 84 07 01 00 00    	je     c0016dd0 <timerHandler(unsigned long long)+0x12f>
c0016cc9:	e8 f3 70 00 00       	call   c001ddc1 <lockStuff()>
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	68 3c 19 03 c0       	push   0xc003193c
c0016cd6:	e8 13 1d 01 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cdb:	c7 04 24 3c 19 03 c0 	mov    DWORD PTR [esp],0xc003193c
c0016ce2:	89 c3                	mov    ebx,eax
c0016ce4:	e8 0d 1d 01 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	84 c0                	test   al,al
c0016cee:	74 60                	je     c0016d50 <timerHandler(unsigned long long)+0xaf>
c0016cf0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cf6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016cf9:	85 c0                	test   eax,eax
c0016cfb:	0f 85 91 00 00 00    	jne    c0016d92 <timerHandler(unsigned long long)+0xf1>
c0016d01:	e9 be 00 00 00       	jmp    c0016dc4 <timerHandler(unsigned long long)+0x123>
c0016d06:	83 ec 0c             	sub    esp,0xc
c0016d09:	55                   	push   ebp
c0016d0a:	e8 a3 76 00 00       	call   c001e3b2 <unblockTask(ThreadControlBlock*)>
c0016d0f:	83 c4 10             	add    esp,0x10
c0016d12:	39 eb                	cmp    ebx,ebp
c0016d14:	75 12                	jne    c0016d28 <timerHandler(unsigned long long)+0x87>
c0016d16:	83 ec 0c             	sub    esp,0xc
c0016d19:	68 3c 19 03 c0       	push   0xc003193c
c0016d1e:	e8 cb 1c 01 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d23:	89 c3                	mov    ebx,eax
c0016d25:	83 c4 10             	add    esp,0x10
c0016d28:	83 ec 0c             	sub    esp,0xc
c0016d2b:	68 3c 19 03 c0       	push   0xc003193c
c0016d30:	e8 c1 1c 01 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	84 c0                	test   al,al
c0016d3a:	75 b4                	jne    c0016cf0 <timerHandler(unsigned long long)+0x4f>
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	68 3c 19 03 c0       	push   0xc003193c
c0016d44:	e8 a5 1c 01 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	39 d8                	cmp    eax,ebx
c0016d4e:	74 a0                	je     c0016cf0 <timerHandler(unsigned long long)+0x4f>
c0016d50:	83 ec 0c             	sub    esp,0xc
c0016d53:	68 3c 19 03 c0       	push   0xc003193c
c0016d58:	e8 91 1c 01 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d5d:	c7 04 24 3c 19 03 c0 	mov    DWORD PTR [esp],0xc003193c
c0016d64:	89 c5                	mov    ebp,eax
c0016d66:	e8 a7 1c 01 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d6b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016d6e:	83 c4 10             	add    esp,0x10
c0016d71:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016d74:	39 15 70 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea70,edx
c0016d7a:	a1 74 ea 02 c0       	mov    eax,ds:0xc002ea74
c0016d7f:	19 c8                	sbb    eax,ecx
c0016d81:	73 83                	jae    c0016d06 <timerHandler(unsigned long long)+0x65>
c0016d83:	50                   	push   eax
c0016d84:	50                   	push   eax
c0016d85:	55                   	push   ebp
c0016d86:	68 3c 19 03 c0       	push   0xc003193c
c0016d8b:	e8 30 1d 01 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d90:	eb 93                	jmp    c0016d25 <timerHandler(unsigned long long)+0x84>
c0016d92:	80 3d ec e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3ec,0x0
c0016d99:	74 29                	je     c0016dc4 <timerHandler(unsigned long long)+0x123>
c0016d9b:	39 c6                	cmp    esi,eax
c0016d9d:	bb 00 00 00 00       	mov    ebx,0x0
c0016da2:	19 df                	sbb    edi,ebx
c0016da4:	72 19                	jb     c0016dbf <timerHandler(unsigned long long)+0x11e>
c0016da6:	e8 ef 6f 00 00       	call   c001dd9a <lockScheduler()>
c0016dab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016db3:	e8 1e 73 00 00       	call   c001e0d6 <schedule()>
c0016db8:	e8 df 6f 00 00       	call   c001dd9c <unlockScheduler()>
c0016dbd:	eb 05                	jmp    c0016dc4 <timerHandler(unsigned long long)+0x123>
c0016dbf:	29 f0                	sub    eax,esi
c0016dc1:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016dc4:	83 c4 0c             	add    esp,0xc
c0016dc7:	5b                   	pop    ebx
c0016dc8:	5e                   	pop    esi
c0016dc9:	5f                   	pop    edi
c0016dca:	5d                   	pop    ebp
c0016dcb:	e9 8b 73 00 00       	jmp    c001e15b <unlockStuff()>
c0016dd0:	83 c4 0c             	add    esp,0xc
c0016dd3:	5b                   	pop    ebx
c0016dd4:	5e                   	pop    esi
c0016dd5:	5f                   	pop    edi
c0016dd6:	5d                   	pop    ebp
c0016dd7:	c3                   	ret    

c0016dd8 <setupTimer(int)>:
c0016dd8:	57                   	push   edi
c0016dd9:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0016dde:	56                   	push   esi
c0016ddf:	53                   	push   ebx
c0016de0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016de4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016dea:	83 ec 0c             	sub    esp,0xc
c0016ded:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016df3:	e8 ee d7 ff ff       	call   c00145e6 <Device::getName()>
c0016df8:	83 c4 10             	add    esp,0x10
c0016dfb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016dfe:	0f 85 8d 00 00 00    	jne    c0016e91 <setupTimer(int)+0xb9>
c0016e04:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0016e09:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e10:	74 7f                	je     c0016e91 <setupTimer(int)+0xb9>
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	68 5c 01 00 00       	push   0x15c
c0016e1a:	e8 21 8a ff ff       	call   c000f840 <malloc>
c0016e1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e22:	89 c3                	mov    ebx,eax
c0016e24:	e8 2b f7 00 00       	call   c0026554 <PIT::PIT()>
c0016e29:	59                   	pop    ecx
c0016e2a:	5f                   	pop    edi
c0016e2b:	53                   	push   ebx
c0016e2c:	ff 35 e8 e3 02 c0    	push   DWORD PTR ds:0xc002e3e8
c0016e32:	e8 c3 d4 ff ff       	call   c00142fa <Device::addChild(Device*)>
c0016e37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e39:	6a 00                	push   0x0
c0016e3b:	6a 00                	push   0x0
c0016e3d:	56                   	push   esi
c0016e3e:	53                   	push   ebx
c0016e3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e42:	83 c4 14             	add    esp,0x14
c0016e45:	68 60 01 00 00       	push   0x160
c0016e4a:	e8 f1 89 ff ff       	call   c000f840 <malloc>
c0016e4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e52:	89 c7                	mov    edi,eax
c0016e54:	e8 ab f5 00 00       	call   c0026404 <APICTimer::APICTimer()>
c0016e59:	6a 00                	push   0x0
c0016e5b:	6a 00                	push   0x0
c0016e5d:	56                   	push   esi
c0016e5e:	57                   	push   edi
c0016e5f:	e8 a2 f4 00 00       	call   c0026306 <APICTimer::open(int, int, void*)>
c0016e64:	83 c4 20             	add    esp,0x20
c0016e67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e69:	6a 00                	push   0x0
c0016e6b:	6a 00                	push   0x0
c0016e6d:	6a 00                	push   0x0
c0016e6f:	53                   	push   ebx
c0016e70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e73:	58                   	pop    eax
c0016e74:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0016e79:	5a                   	pop    edx
c0016e7a:	57                   	push   edi
c0016e7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e81:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e87:	e8 6e d4 ff ff       	call   c00142fa <Device::addChild(Device*)>
c0016e8c:	83 c4 10             	add    esp,0x10
c0016e8f:	eb 33                	jmp    c0016ec4 <setupTimer(int)+0xec>
c0016e91:	83 ec 0c             	sub    esp,0xc
c0016e94:	68 5c 01 00 00       	push   0x15c
c0016e99:	e8 a2 89 ff ff       	call   c000f840 <malloc>
c0016e9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ea1:	89 c3                	mov    ebx,eax
c0016ea3:	e8 ac f6 00 00       	call   c0026554 <PIT::PIT()>
c0016ea8:	58                   	pop    eax
c0016ea9:	5a                   	pop    edx
c0016eaa:	53                   	push   ebx
c0016eab:	ff 35 e8 e3 02 c0    	push   DWORD PTR ds:0xc002e3e8
c0016eb1:	e8 44 d4 ff ff       	call   c00142fa <Device::addChild(Device*)>
c0016eb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eb8:	6a 00                	push   0x0
c0016eba:	6a 00                	push   0x0
c0016ebc:	56                   	push   esi
c0016ebd:	53                   	push   ebx
c0016ebe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ec1:	83 c4 20             	add    esp,0x20
c0016ec4:	89 d8                	mov    eax,ebx
c0016ec6:	5b                   	pop    ebx
c0016ec7:	5e                   	pop    esi
c0016ec8:	5f                   	pop    edi
c0016ec9:	c3                   	ret    

c0016eca <VCache::VCache(PhysicalDisk*)>:
c0016eca:	53                   	push   ebx
c0016ecb:	83 ec 18             	sub    esp,0x18
c0016ece:	ba 94 b2 02 c0       	mov    edx,0xc002b294
c0016ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed7:	89 10                	mov    DWORD PTR [eax],edx
c0016ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016edd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016eef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef3:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016efa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f05:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f0c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f17:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f22:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f31:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f44:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f54:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f5b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f63:	83 ec 0c             	sub    esp,0xc
c0016f66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f6a:	e8 d1 88 ff ff       	call   c000f840 <malloc>
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	89 c3                	mov    ebx,eax
c0016f74:	83 ec 0c             	sub    esp,0xc
c0016f77:	53                   	push   ebx
c0016f78:	e8 3d 6f 00 00       	call   c001deba <Mutex::Mutex()>
c0016f7d:	83 c4 10             	add    esp,0x10
c0016f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f84:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016f8f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f96:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016f9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fa1:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fab:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fb2:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016fb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fbe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016fc2:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016fc5:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcc:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fd0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fd4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fda:	05 00 01 00 00       	add    eax,0x100
c0016fdf:	c1 e0 04             	shl    eax,0x4
c0016fe2:	83 ec 0c             	sub    esp,0xc
c0016fe5:	50                   	push   eax
c0016fe6:	e8 55 88 ff ff       	call   c000f840 <malloc>
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	89 c2                	mov    edx,eax
c0016ff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffb:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017006:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001700a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001700e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017014:	c1 e0 07             	shl    eax,0x7
c0017017:	83 ec 0c             	sub    esp,0xc
c001701a:	50                   	push   eax
c001701b:	e8 20 88 ff ff       	call   c000f840 <malloc>
c0017020:	83 c4 10             	add    esp,0x10
c0017023:	89 c2                	mov    edx,eax
c0017025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017029:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001702c:	90                   	nop
c001702d:	83 c4 18             	add    esp,0x18
c0017030:	5b                   	pop    ebx
c0017031:	c3                   	ret    

c0017032 <VCache::invalidateReadBuffer()>:
c0017032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017036:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001703c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017040:	c3                   	ret    
c0017041:	90                   	nop

c0017042 <VCache::writeWriteBuffer()>:
c0017042:	53                   	push   ebx
c0017043:	83 ec 14             	sub    esp,0x14
c0017046:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001704a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001704d:	8b 10                	mov    edx,DWORD PTR [eax]
c001704f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017052:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017055:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017058:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001705b:	50                   	push   eax
c001705c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001705f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017066:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001706d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017071:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017078:	83 c4 28             	add    esp,0x28
c001707b:	5b                   	pop    ebx
c001707c:	c3                   	ret    
c001707d:	90                   	nop

c001707e <VCache::~VCache()>:
c001707e:	83 ec 0c             	sub    esp,0xc
c0017081:	ba 94 b2 02 c0       	mov    edx,0xc002b294
c0017086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001708a:	89 10                	mov    DWORD PTR [eax],edx
c001708c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017090:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017093:	84 c0                	test   al,al
c0017095:	74 0f                	je     c00170a6 <VCache::~VCache()+0x28>
c0017097:	83 ec 0c             	sub    esp,0xc
c001709a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001709e:	e8 9f ff ff ff       	call   c0017042 <VCache::writeWriteBuffer()>
c00170a3:	83 c4 10             	add    esp,0x10
c00170a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170aa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00170ad:	83 ec 0c             	sub    esp,0xc
c00170b0:	50                   	push   eax
c00170b1:	e8 9a 87 ff ff       	call   c000f850 <free>
c00170b6:	83 c4 10             	add    esp,0x10
c00170b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170c0:	83 ec 0c             	sub    esp,0xc
c00170c3:	50                   	push   eax
c00170c4:	e8 87 87 ff ff       	call   c000f850 <free>
c00170c9:	83 c4 10             	add    esp,0x10
c00170cc:	90                   	nop
c00170cd:	83 c4 0c             	add    esp,0xc
c00170d0:	c3                   	ret    
c00170d1:	90                   	nop

c00170d2 <VCache::~VCache()>:
c00170d2:	83 ec 0c             	sub    esp,0xc
c00170d5:	83 ec 0c             	sub    esp,0xc
c00170d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170dc:	e8 9d ff ff ff       	call   c001707e <VCache::~VCache()>
c00170e1:	83 c4 10             	add    esp,0x10
c00170e4:	83 ec 08             	sub    esp,0x8
c00170e7:	6a 44                	push   0x44
c00170e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170ed:	e8 02 bd ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00170f2:	83 c4 10             	add    esp,0x10
c00170f5:	83 c4 0c             	add    esp,0xc
c00170f8:	c3                   	ret    
c00170f9:	90                   	nop

c00170fa <VCache::write(unsigned long long, int, void*)>:
c00170fa:	55                   	push   ebp
c00170fb:	57                   	push   edi
c00170fc:	56                   	push   esi
c00170fd:	53                   	push   ebx
c00170fe:	83 ec 28             	sub    esp,0x28
c0017101:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017105:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017109:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001710d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017111:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017114:	e8 03 72 00 00       	call   c001e31c <Semaphore::acquire()>
c0017119:	83 c4 10             	add    esp,0x10
c001711c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017120:	74 0c                	je     c001712e <VCache::write(unsigned long long, int, void*)+0x34>
c0017122:	83 ec 0c             	sub    esp,0xc
c0017125:	53                   	push   ebx
c0017126:	e8 07 ff ff ff       	call   c0017032 <VCache::invalidateReadBuffer()>
c001712b:	83 c4 10             	add    esp,0x10
c001712e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017132:	74 66                	je     c001719a <VCache::write(unsigned long long, int, void*)+0xa0>
c0017134:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017137:	99                   	cdq    
c0017138:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001713c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001713f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017142:	89 c1                	mov    ecx,eax
c0017144:	89 d0                	mov    eax,edx
c0017146:	31 f1                	xor    ecx,esi
c0017148:	31 f8                	xor    eax,edi
c001714a:	89 ca                	mov    edx,ecx
c001714c:	09 c2                	or     edx,eax
c001714e:	75 3e                	jne    c001718e <VCache::write(unsigned long long, int, void*)+0x94>
c0017150:	83 fd 01             	cmp    ebp,0x1
c0017153:	75 39                	jne    c001718e <VCache::write(unsigned long long, int, void*)+0x94>
c0017155:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017158:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001715e:	51                   	push   ecx
c001715f:	50                   	push   eax
c0017160:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017164:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017168:	0f af c8             	imul   ecx,eax
c001716b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001716e:	51                   	push   ecx
c001716f:	e8 d0 95 fe ff       	call   c0000744 <memcpy>
c0017174:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017177:	83 c4 10             	add    esp,0x10
c001717a:	40                   	inc    eax
c001717b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001717e:	83 c0 80             	add    eax,0xffffff80
c0017181:	75 57                	jne    c00171da <VCache::write(unsigned long long, int, void*)+0xe0>
c0017183:	83 ec 0c             	sub    esp,0xc
c0017186:	53                   	push   ebx
c0017187:	e8 b6 fe ff ff       	call   c0017042 <VCache::writeWriteBuffer()>
c001718c:	eb 34                	jmp    c00171c2 <VCache::write(unsigned long long, int, void*)+0xc8>
c001718e:	83 ec 0c             	sub    esp,0xc
c0017191:	53                   	push   ebx
c0017192:	e8 ab fe ff ff       	call   c0017042 <VCache::writeWriteBuffer()>
c0017197:	83 c4 10             	add    esp,0x10
c001719a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001719d:	83 fd 7f             	cmp    ebp,0x7f
c00171a0:	7f 25                	jg     c00171c7 <VCache::write(unsigned long long, int, void*)+0xcd>
c00171a2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00171a5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00171a8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00171ab:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171af:	52                   	push   edx
c00171b0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171bd:	e8 82 95 fe ff       	call   c0000744 <memcpy>
c00171c2:	83 c4 10             	add    esp,0x10
c00171c5:	eb 13                	jmp    c00171da <VCache::write(unsigned long long, int, void*)+0xe0>
c00171c7:	83 ec 0c             	sub    esp,0xc
c00171ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00171cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00171d0:	55                   	push   ebp
c00171d1:	57                   	push   edi
c00171d2:	56                   	push   esi
c00171d3:	50                   	push   eax
c00171d4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171d7:	83 c4 20             	add    esp,0x20
c00171da:	83 ec 0c             	sub    esp,0xc
c00171dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171e0:	e8 e5 76 00 00       	call   c001e8ca <Semaphore::release()>
c00171e5:	83 c4 2c             	add    esp,0x2c
c00171e8:	31 c0                	xor    eax,eax
c00171ea:	5b                   	pop    ebx
c00171eb:	5e                   	pop    esi
c00171ec:	5f                   	pop    edi
c00171ed:	5d                   	pop    ebp
c00171ee:	c3                   	ret    
c00171ef:	90                   	nop

c00171f0 <VCache::read(unsigned long long, int, void*)>:
c00171f0:	55                   	push   ebp
c00171f1:	57                   	push   edi
c00171f2:	56                   	push   esi
c00171f3:	53                   	push   ebx
c00171f4:	83 ec 28             	sub    esp,0x28
c00171f7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171ff:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017203:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017207:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001720b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001720f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017213:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017216:	e8 01 71 00 00       	call   c001e31c <Semaphore::acquire()>
c001721b:	83 c4 10             	add    esp,0x10
c001721e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017222:	74 0c                	je     c0017230 <VCache::read(unsigned long long, int, void*)+0x40>
c0017224:	83 ec 0c             	sub    esp,0xc
c0017227:	53                   	push   ebx
c0017228:	e8 15 fe ff ff       	call   c0017042 <VCache::writeWriteBuffer()>
c001722d:	83 c4 10             	add    esp,0x10
c0017230:	83 fe 01             	cmp    esi,0x1
c0017233:	0f 85 80 00 00 00    	jne    c00172b9 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017239:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001723c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017243:	75 74                	jne    c00172b9 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017245:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017248:	89 d1                	mov    ecx,edx
c001724a:	f7 d9                	neg    ecx
c001724c:	89 cf                	mov    edi,ecx
c001724e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017252:	c1 ff 1f             	sar    edi,0x1f
c0017255:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017258:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001725c:	89 ce                	mov    esi,ecx
c001725e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017262:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017266:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001726a:	89 cf                	mov    edi,ecx
c001726c:	74 0a                	je     c0017278 <VCache::read(unsigned long long, int, void*)+0x88>
c001726e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017271:	75 05                	jne    c0017278 <VCache::read(unsigned long long, int, void*)+0x88>
c0017273:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017276:	74 1c                	je     c0017294 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017278:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001727c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001727f:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017282:	83 ec 0c             	sub    esp,0xc
c0017285:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017287:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001728a:	52                   	push   edx
c001728b:	57                   	push   edi
c001728c:	56                   	push   esi
c001728d:	50                   	push   eax
c001728e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017291:	83 c4 20             	add    esp,0x20
c0017294:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017297:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001729d:	50                   	push   eax
c001729e:	52                   	push   edx
c001729f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172a2:	48                   	dec    eax
c00172a3:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00172a7:	0f af c2             	imul   eax,edx
c00172aa:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00172ad:	50                   	push   eax
c00172ae:	55                   	push   ebp
c00172af:	e8 90 94 fe ff       	call   c0000744 <memcpy>
c00172b4:	83 c4 10             	add    esp,0x10
c00172b7:	eb 21                	jmp    c00172da <VCache::read(unsigned long long, int, void*)+0xea>
c00172b9:	83 ec 0c             	sub    esp,0xc
c00172bc:	53                   	push   ebx
c00172bd:	e8 70 fd ff ff       	call   c0017032 <VCache::invalidateReadBuffer()>
c00172c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00172c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172ca:	56                   	push   esi
c00172cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172d3:	50                   	push   eax
c00172d4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00172d7:	83 c4 20             	add    esp,0x20
c00172da:	83 ec 0c             	sub    esp,0xc
c00172dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172e0:	e8 e5 75 00 00       	call   c001e8ca <Semaphore::release()>
c00172e5:	83 c4 2c             	add    esp,0x2c
c00172e8:	31 c0                	xor    eax,eax
c00172ea:	5b                   	pop    ebx
c00172eb:	5e                   	pop    esi
c00172ec:	5f                   	pop    edi
c00172ed:	5d                   	pop    ebp
c00172ee:	c3                   	ret    
c00172ef:	90                   	nop

c00172f0 <Video::putrect(int, int, int, int, unsigned int)>:
c00172f0:	55                   	push   ebp
c00172f1:	57                   	push   edi
c00172f2:	56                   	push   esi
c00172f3:	53                   	push   ebx
c00172f4:	83 ec 1c             	sub    esp,0x1c
c00172f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172ff:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017303:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017307:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001730b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001730f:	01 df                	add    edi,ebx
c0017311:	39 fb                	cmp    ebx,edi
c0017313:	7d 1f                	jge    c0017334 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017315:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017319:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001731d:	7d 12                	jge    c0017331 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001731f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017321:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017325:	53                   	push   ebx
c0017326:	55                   	push   ebp
c0017327:	45                   	inc    ebp
c0017328:	56                   	push   esi
c0017329:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001732c:	83 c4 10             	add    esp,0x10
c001732f:	eb e8                	jmp    c0017319 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017331:	43                   	inc    ebx
c0017332:	eb dd                	jmp    c0017311 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017334:	83 c4 1c             	add    esp,0x1c
c0017337:	5b                   	pop    ebx
c0017338:	5e                   	pop    esi
c0017339:	5f                   	pop    edi
c001733a:	5d                   	pop    ebp
c001733b:	c3                   	ret    

c001733c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001733c:	55                   	push   ebp
c001733d:	57                   	push   edi
c001733e:	31 ff                	xor    edi,edi
c0017340:	56                   	push   esi
c0017341:	53                   	push   ebx
c0017342:	83 ec 1c             	sub    esp,0x1c
c0017345:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017349:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001734d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017354:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017359:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001735d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017361:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017365:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017368:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001736c:	01 f9                	add    ecx,edi
c001736e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017372:	7d 2f                	jge    c00173a3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017374:	31 f6                	xor    esi,esi
c0017376:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001737a:	01 f2                	add    edx,esi
c001737c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017380:	7d 1a                	jge    c001739c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017382:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017385:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017388:	46                   	inc    esi
c0017389:	51                   	push   ecx
c001738a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001738e:	52                   	push   edx
c001738f:	55                   	push   ebp
c0017390:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017393:	83 c4 10             	add    esp,0x10
c0017396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001739a:	eb da                	jmp    c0017376 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001739c:	47                   	inc    edi
c001739d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00173a1:	eb c5                	jmp    c0017368 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00173a3:	83 c4 1c             	add    esp,0x1c
c00173a6:	5b                   	pop    ebx
c00173a7:	5e                   	pop    esi
c00173a8:	5f                   	pop    edi
c00173a9:	5d                   	pop    ebp
c00173aa:	c3                   	ret    
c00173ab:	90                   	nop

c00173ac <Video::blit(unsigned int*, int, int, int, int)>:
c00173ac:	55                   	push   ebp
c00173ad:	57                   	push   edi
c00173ae:	56                   	push   esi
c00173af:	53                   	push   ebx
c00173b0:	83 ec 1c             	sub    esp,0x1c
c00173b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173bb:	85 c0                	test   eax,eax
c00173bd:	79 02                	jns    c00173c1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00173bf:	31 c0                	xor    eax,eax
c00173c1:	c1 e0 02             	shl    eax,0x2
c00173c4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173d0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00173d4:	39 d8                	cmp    eax,ebx
c00173d6:	7e 49                	jle    c0017421 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173d8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173de:	7c 41                	jl     c0017421 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173e0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00173e4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173e8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173ec:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00173f0:	39 f9                	cmp    ecx,edi
c00173f2:	7e 22                	jle    c0017416 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00173f4:	83 c5 04             	add    ebp,0x4
c00173f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00173fd:	7c 14                	jl     c0017413 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00173ff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017401:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017404:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017408:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001740c:	56                   	push   esi
c001740d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017410:	83 c4 10             	add    esp,0x10
c0017413:	47                   	inc    edi
c0017414:	eb d2                	jmp    c00173e8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001741a:	43                   	inc    ebx
c001741b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001741f:	eb ab                	jmp    c00173cc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017421:	83 c4 1c             	add    esp,0x1c
c0017424:	5b                   	pop    ebx
c0017425:	5e                   	pop    esi
c0017426:	5f                   	pop    edi
c0017427:	5d                   	pop    ebp
c0017428:	c3                   	ret    
c0017429:	90                   	nop

c001742a <Video::clearScreen(unsigned int)>:
c001742a:	57                   	push   edi
c001742b:	56                   	push   esi
c001742c:	53                   	push   ebx
c001742d:	31 db                	xor    ebx,ebx
c001742f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017433:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017439:	7e 1f                	jle    c001745a <Video::clearScreen(unsigned int)+0x30>
c001743b:	31 ff                	xor    edi,edi
c001743d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017443:	7e 12                	jle    c0017457 <Video::clearScreen(unsigned int)+0x2d>
c0017445:	8b 06                	mov    eax,DWORD PTR [esi]
c0017447:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001744b:	53                   	push   ebx
c001744c:	57                   	push   edi
c001744d:	47                   	inc    edi
c001744e:	56                   	push   esi
c001744f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017452:	83 c4 10             	add    esp,0x10
c0017455:	eb e6                	jmp    c001743d <Video::clearScreen(unsigned int)+0x13>
c0017457:	43                   	inc    ebx
c0017458:	eb d9                	jmp    c0017433 <Video::clearScreen(unsigned int)+0x9>
c001745a:	5b                   	pop    ebx
c001745b:	5e                   	pop    esi
c001745c:	5f                   	pop    edi
c001745d:	c3                   	ret    

c001745e <Video::putpixel(int, int, unsigned int)>:
c001745e:	c7 44 24 04 9c b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b29c
c0017466:	e9 0a 31 00 00       	jmp    c001a575 <Krnl::panic(char const*)>
c001746b:	90                   	nop

c001746c <Video::Video(char const*)>:
c001746c:	83 ec 0c             	sub    esp,0xc
c001746f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017473:	83 ec 08             	sub    esp,0x8
c0017476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001747a:	50                   	push   eax
c001747b:	e8 6a d0 ff ff       	call   c00144ea <Device::Device(char const*)>
c0017480:	83 c4 10             	add    esp,0x10
c0017483:	ba 20 b3 02 c0       	mov    edx,0xc002b320
c0017488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001748c:	89 10                	mov    DWORD PTR [eax],edx
c001748e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017492:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001749c:	90                   	nop
c001749d:	83 c4 0c             	add    esp,0xc
c00174a0:	c3                   	ret    
c00174a1:	90                   	nop

c00174a2 <Video::~Video()>:
c00174a2:	83 ec 0c             	sub    esp,0xc
c00174a5:	ba 20 b3 02 c0       	mov    edx,0xc002b320
c00174aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ae:	89 10                	mov    DWORD PTR [eax],edx
c00174b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b4:	83 ec 0c             	sub    esp,0xc
c00174b7:	50                   	push   eax
c00174b8:	e8 0f cd ff ff       	call   c00141cc <Device::~Device()>
c00174bd:	83 c4 10             	add    esp,0x10
c00174c0:	90                   	nop
c00174c1:	83 c4 0c             	add    esp,0xc
c00174c4:	c3                   	ret    
c00174c5:	90                   	nop

c00174c6 <Video::~Video()>:
c00174c6:	83 ec 0c             	sub    esp,0xc
c00174c9:	83 ec 0c             	sub    esp,0xc
c00174cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d0:	e8 cd ff ff ff       	call   c00174a2 <Video::~Video()>
c00174d5:	83 c4 10             	add    esp,0x10
c00174d8:	83 ec 08             	sub    esp,0x8
c00174db:	68 64 01 00 00       	push   0x164
c00174e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174e4:	e8 0b b9 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00174e9:	83 c4 10             	add    esp,0x10
c00174ec:	83 c4 0c             	add    esp,0xc
c00174ef:	c3                   	ret    

c00174f0 <Video::isMonochrome()>:
c00174f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174f4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00174fa:	c3                   	ret    
c00174fb:	90                   	nop

c00174fc <Video::getWidth()>:
c00174fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017500:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017506:	c3                   	ret    
c0017507:	90                   	nop

c0017508 <Video::getHeight()>:
c0017508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001750c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017512:	c3                   	ret    
c0017513:	90                   	nop

c0017514 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017514:	55                   	push   ebp
c0017515:	57                   	push   edi
c0017516:	56                   	push   esi
c0017517:	53                   	push   ebx
c0017518:	83 ec 2c             	sub    esp,0x2c
c001751b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001751f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017523:	83 f8 01             	cmp    eax,0x1
c0017526:	19 c9                	sbb    ecx,ecx
c0017528:	31 db                	xor    ebx,ebx
c001752a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001752e:	89 cd                	mov    ebp,ecx
c0017530:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017538:	f7 d5                	not    ebp
c001753a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017540:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017544:	01 d8                	add    eax,ebx
c0017546:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001754a:	56                   	push   esi
c001754b:	e8 b8 ff ff ff       	call   c0017508 <Video::getHeight()>
c0017550:	59                   	pop    ecx
c0017551:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017555:	7e 70                	jle    c00175c7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017557:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001755b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001755f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017562:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017566:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001756a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017571:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017575:	89 f8                	mov    eax,edi
c0017577:	83 c0 20             	add    eax,0x20
c001757a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001757e:	56                   	push   esi
c001757f:	e8 78 ff ff ff       	call   c00174fc <Video::getWidth()>
c0017584:	5a                   	pop    edx
c0017585:	39 c7                	cmp    edi,eax
c0017587:	7d 34                	jge    c00175bd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017589:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001758e:	74 05                	je     c0017595 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017590:	8b 06                	mov    eax,DWORD PTR [esi]
c0017592:	55                   	push   ebp
c0017593:	eb 0d                	jmp    c00175a2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017595:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001759a:	74 12                	je     c00175ae <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001759c:	8b 06                	mov    eax,DWORD PTR [esi]
c001759e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175a6:	57                   	push   edi
c00175a7:	56                   	push   esi
c00175a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175ab:	83 c4 10             	add    esp,0x10
c00175ae:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175b2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175b6:	47                   	inc    edi
c00175b7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00175bb:	75 c1                	jne    c001757e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00175bd:	43                   	inc    ebx
c00175be:	83 fb 20             	cmp    ebx,0x20
c00175c1:	0f 85 79 ff ff ff    	jne    c0017540 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00175c7:	83 c4 2c             	add    esp,0x2c
c00175ca:	5b                   	pop    ebx
c00175cb:	5e                   	pop    esi
c00175cc:	5f                   	pop    edi
c00175cd:	5d                   	pop    ebp
c00175ce:	c3                   	ret    
c00175cf:	90                   	nop

c00175d0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00175d0:	55                   	push   ebp
c00175d1:	57                   	push   edi
c00175d2:	56                   	push   esi
c00175d3:	53                   	push   ebx
c00175d4:	83 ec 28             	sub    esp,0x28
c00175d7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00175db:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00175df:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00175e3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00175e7:	c1 e7 08             	shl    edi,0x8
c00175ea:	01 c7                	add    edi,eax
c00175ec:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00175f0:	c1 e0 08             	shl    eax,0x8
c00175f3:	01 d0                	add    eax,edx
c00175f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175fd:	0f af c7             	imul   eax,edi
c0017600:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017607:	50                   	push   eax
c0017608:	e8 33 82 ff ff       	call   c000f840 <malloc>
c001760d:	83 c4 10             	add    esp,0x10
c0017610:	89 c5                	mov    ebp,eax
c0017612:	85 c0                	test   eax,eax
c0017614:	75 15                	jne    c001762b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017616:	83 ec 0c             	sub    esp,0xc
c0017619:	68 bd b2 02 c0       	push   0xc002b2bd
c001761e:	e8 b1 b8 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0017623:	83 c4 10             	add    esp,0x10
c0017626:	e9 1c 01 00 00       	jmp    c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001762b:	be 12 00 00 00       	mov    esi,0x12
c0017630:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017634:	74 11                	je     c0017647 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017636:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001763a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001763e:	c1 fe 03             	sar    esi,0x3
c0017641:	0f af f0             	imul   esi,eax
c0017644:	83 c6 12             	add    esi,0x12
c0017647:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001764b:	74 04                	je     c0017651 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001764d:	85 ff                	test   edi,edi
c001764f:	75 12                	jne    c0017663 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017651:	83 ec 0c             	sub    esp,0xc
c0017654:	68 d4 b2 02 c0       	push   0xc002b2d4
c0017659:	e8 76 b8 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001765e:	e9 ce 00 00 00       	jmp    c0017731 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017663:	52                   	push   edx
c0017664:	52                   	push   edx
c0017665:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017669:	50                   	push   eax
c001766a:	68 e9 b2 02 c0       	push   0xc002b2e9
c001766f:	e8 60 b8 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0017674:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017678:	83 c4 10             	add    esp,0x10
c001767b:	80 fa 02             	cmp    dl,0x2
c001767e:	0f 85 98 00 00 00    	jne    c001771c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017684:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017689:	75 10                	jne    c001769b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001768b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001768f:	75 0a                	jne    c001769b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017691:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017694:	83 e8 18             	sub    eax,0x18
c0017697:	a8 f7                	test   al,0xf7
c0017699:	74 0a                	je     c00176a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001769b:	83 ec 0c             	sub    esp,0xc
c001769e:	68 f6 b2 02 c0       	push   0xc002b2f6
c00176a3:	eb 7f                	jmp    c0017724 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00176a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176ad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176b9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176c1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00176c5:	75 0c                	jne    c00176d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00176c7:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00176cc:	c1 e0 18             	shl    eax,0x18
c00176cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176d3:	41                   	inc    ecx
c00176d4:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00176d9:	c1 e2 10             	shl    edx,0x10
c00176dc:	89 d0                	mov    eax,edx
c00176de:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00176e3:	c1 e2 08             	shl    edx,0x8
c00176e6:	09 c2                	or     edx,eax
c00176e8:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00176ec:	09 c2                	or     edx,eax
c00176ee:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00176f2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00176f6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00176fa:	c1 f8 03             	sar    eax,0x3
c00176fd:	01 c6                	add    esi,eax
c00176ff:	89 c8                	mov    eax,ecx
c0017701:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017705:	39 c7                	cmp    edi,eax
c0017707:	7f b0                	jg     c00176b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017709:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001770d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017711:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017714:	7e 22                	jle    c0017738 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017716:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001771a:	eb 99                	jmp    c00176b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001771c:	50                   	push   eax
c001771d:	50                   	push   eax
c001771e:	52                   	push   edx
c001771f:	68 04 b3 02 c0       	push   0xc002b304
c0017724:	e8 ab b7 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0017729:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001772c:	e8 1f 81 ff ff       	call   c000f850 <free>
c0017731:	83 c4 10             	add    esp,0x10
c0017734:	31 ed                	xor    ebp,ebp
c0017736:	eb 0f                	jmp    c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017738:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001773f:	89 38                	mov    DWORD PTR [eax],edi
c0017741:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017745:	89 08                	mov    DWORD PTR [eax],ecx
c0017747:	83 c4 1c             	add    esp,0x1c
c001774a:	89 e8                	mov    eax,ebp
c001774c:	5b                   	pop    ebx
c001774d:	5e                   	pop    esi
c001774e:	5f                   	pop    edi
c001774f:	5d                   	pop    ebp
c0017750:	c3                   	ret    
c0017751:	90                   	nop

c0017752 <Video::putTGA(int, int, unsigned char*, int)>:
c0017752:	55                   	push   ebp
c0017753:	57                   	push   edi
c0017754:	56                   	push   esi
c0017755:	53                   	push   ebx
c0017756:	83 ec 28             	sub    esp,0x28
c0017759:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001775d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017761:	50                   	push   eax
c0017762:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017766:	50                   	push   eax
c0017767:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001776b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001776f:	56                   	push   esi
c0017770:	e8 5b fe ff ff       	call   c00175d0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017775:	83 c4 20             	add    esp,0x20
c0017778:	85 c0                	test   eax,eax
c001777a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001777e:	74 35                	je     c00177b5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017780:	89 c7                	mov    edi,eax
c0017782:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017786:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001778a:	39 d8                	cmp    eax,ebx
c001778c:	7e 27                	jle    c00177b5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001778e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017792:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017796:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001779a:	39 e8                	cmp    eax,ebp
c001779c:	7e 14                	jle    c00177b2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001779e:	8b 06                	mov    eax,DWORD PTR [esi]
c00177a0:	83 c7 04             	add    edi,0x4
c00177a3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00177a6:	53                   	push   ebx
c00177a7:	55                   	push   ebp
c00177a8:	45                   	inc    ebp
c00177a9:	56                   	push   esi
c00177aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00177ad:	83 c4 10             	add    esp,0x10
c00177b0:	eb e0                	jmp    c0017792 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177b2:	43                   	inc    ebx
c00177b3:	eb cd                	jmp    c0017782 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177b5:	83 c4 1c             	add    esp,0x1c
c00177b8:	5b                   	pop    ebx
c00177b9:	5e                   	pop    esi
c00177ba:	5f                   	pop    edi
c00177bb:	5d                   	pop    ebp
c00177bc:	c3                   	ret    
c00177bd:	90                   	nop

c00177be <ACPI::close(int, int, void*)>:
c00177be:	83 ec 1c             	sub    esp,0x1c
c00177c1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00177c9:	74 0a                	je     c00177d5 <ACPI::close(int, int, void*)+0x17>
c00177cb:	b8 00 00 00 00       	mov    eax,0x0
c00177d0:	e9 9a 00 00 00       	jmp    c001786f <ACPI::close(int, int, void*)+0xb1>
c00177d5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00177da:	75 37                	jne    c0017813 <ACPI::close(int, int, void*)+0x55>
c00177dc:	83 ec 0c             	sub    esp,0xc
c00177df:	68 60 b3 02 c0       	push   0xc002b360
c00177e4:	e8 eb b6 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00177e9:	83 c4 10             	add    esp,0x10
c00177ec:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c00177f1:	85 c0                	test   eax,eax
c00177f3:	74 07                	je     c00177fc <ACPI::close(int, int, void*)+0x3e>
c00177f5:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c00177fa:	ff d0                	call   eax
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	68 84 b4 02 c0       	push   0xc002b484
c0017804:	e8 6c 2d 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0017809:	83 c4 10             	add    esp,0x10
c001780c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017811:	eb 5c                	jmp    c001786f <ACPI::close(int, int, void*)+0xb1>
c0017813:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017818:	75 50                	jne    c001786a <ACPI::close(int, int, void*)+0xac>
c001781a:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001781f:	85 c0                	test   eax,eax
c0017821:	74 07                	je     c001782a <ACPI::close(int, int, void*)+0x6c>
c0017823:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c0017828:	ff d0                	call   eax
c001782a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001782f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017834:	83 e0 02             	and    eax,0x2
c0017837:	74 1c                	je     c0017855 <ACPI::close(int, int, void*)+0x97>
c0017839:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017840:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017844:	89 c2                	mov    edx,eax
c0017846:	ec                   	in     al,dx
c0017847:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001784b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001784f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017853:	eb da                	jmp    c001782f <ACPI::close(int, int, void*)+0x71>
c0017855:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001785c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017861:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017865:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017869:	ee                   	out    dx,al
c001786a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001786f:	83 c4 1c             	add    esp,0x1c
c0017872:	c3                   	ret    

c0017873 <findRSDP()>:
c0017873:	83 ec 1c             	sub    esp,0x1c
c0017876:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001787b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017881:	83 e0 04             	and    eax,0x4
c0017884:	84 c0                	test   al,al
c0017886:	75 07                	jne    c001788f <findRSDP()+0x1c>
c0017888:	b8 00 00 00 00       	mov    eax,0x0
c001788d:	eb 6a                	jmp    c00178f9 <findRSDP()+0x86>
c001788f:	a1 34 e4 02 c0       	mov    eax,ds:0xc002e434
c0017894:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017899:	7f 1b                	jg     c00178b6 <findRSDP()+0x43>
c001789b:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00178a0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178a6:	83 e2 fb             	and    edx,0xfffffffb
c00178a9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178af:	b8 00 00 00 00       	mov    eax,0x0
c00178b4:	eb 43                	jmp    c00178f9 <findRSDP()+0x86>
c00178b6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00178be:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00178c6:	77 2c                	ja     c00178f4 <findRSDP()+0x81>
c00178c8:	83 ec 04             	sub    esp,0x4
c00178cb:	6a 08                	push   0x8
c00178cd:	68 6d b3 02 c0       	push   0xc002b36d
c00178d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178d6:	e8 65 8d fe ff       	call   c0000640 <memcmp>
c00178db:	83 c4 10             	add    esp,0x10
c00178de:	85 c0                	test   eax,eax
c00178e0:	0f 94 c0             	sete   al
c00178e3:	84 c0                	test   al,al
c00178e5:	74 06                	je     c00178ed <findRSDP()+0x7a>
c00178e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178eb:	eb 0c                	jmp    c00178f9 <findRSDP()+0x86>
c00178ed:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00178f2:	eb ca                	jmp    c00178be <findRSDP()+0x4b>
c00178f4:	b8 00 00 00 00       	mov    eax,0x0
c00178f9:	83 c4 1c             	add    esp,0x1c
c00178fc:	c3                   	ret    

c00178fd <loadACPITables(unsigned char*)>:
c00178fd:	56                   	push   esi
c00178fe:	53                   	push   ebx
c00178ff:	83 ec 44             	sub    esp,0x44
c0017902:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0017907:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001790d:	83 e0 04             	and    eax,0x4
c0017910:	84 c0                	test   al,al
c0017912:	0f 84 05 02 00 00    	je     c0017b1d <loadACPITables(unsigned char*)+0x220>
c0017918:	a0 c0 0c 03 c0       	mov    al,ds:0xc0030cc0
c001791d:	84 c0                	test   al,al
c001791f:	74 75                	je     c0017996 <loadACPITables(unsigned char*)+0x99>
c0017921:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017925:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001792d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017930:	83 e8 24             	sub    eax,0x24
c0017933:	c1 e8 03             	shr    eax,0x3
c0017936:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001793a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017942:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017946:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001794a:	0f 8d b2 00 00 00    	jge    c0017a02 <loadACPITables(unsigned char*)+0x105>
c0017950:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017954:	83 c0 24             	add    eax,0x24
c0017957:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001795b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001795f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017963:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017967:	c1 e0 03             	shl    eax,0x3
c001796a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001796e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017972:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017975:	8b 00                	mov    eax,DWORD PTR [eax]
c0017977:	89 c1                	mov    ecx,eax
c0017979:	a1 ac 0a 03 c0       	mov    eax,ds:0xc0030aac
c001797e:	8d 50 01             	lea    edx,[eax+0x1]
c0017981:	89 15 ac 0a 03 c0    	mov    DWORD PTR ds:0xc0030aac,edx
c0017987:	89 ca                	mov    edx,ecx
c0017989:	89 14 c5 c4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf53c],edx
c0017990:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017994:	eb ac                	jmp    c0017942 <loadACPITables(unsigned char*)+0x45>
c0017996:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001799a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001799e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179a5:	83 e8 24             	sub    eax,0x24
c00179a8:	c1 e8 02             	shr    eax,0x2
c00179ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179af:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179bb:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00179bf:	7d 41                	jge    c0017a02 <loadACPITables(unsigned char*)+0x105>
c00179c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179c5:	83 c0 24             	add    eax,0x24
c00179c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179d8:	c1 e0 02             	shl    eax,0x2
c00179db:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00179df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00179e5:	a1 ac 0a 03 c0       	mov    eax,ds:0xc0030aac
c00179ea:	8d 50 01             	lea    edx,[eax+0x1]
c00179ed:	89 15 ac 0a 03 c0    	mov    DWORD PTR ds:0xc0030aac,edx
c00179f3:	89 ca                	mov    edx,ecx
c00179f5:	89 14 c5 c4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf53c],edx
c00179fc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a00:	eb b5                	jmp    c00179b7 <loadACPITables(unsigned char*)+0xba>
c0017a02:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a0a:	a1 ac 0a 03 c0       	mov    eax,ds:0xc0030aac
c0017a0f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a13:	0f 8d 05 01 00 00    	jge    c0017b1e <loadACPITables(unsigned char*)+0x221>
c0017a19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a1d:	8b 04 c5 c4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf53c]
c0017a24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a34:	25 ff 0f 00 00       	and    eax,0xfff
c0017a39:	89 c6                	mov    esi,eax
c0017a3b:	e8 fa a3 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017a40:	89 c3                	mov    ebx,eax
c0017a42:	83 ec 0c             	sub    esp,0xc
c0017a45:	6a 01                	push   0x1
c0017a47:	e8 53 a1 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017a4c:	83 c4 10             	add    esp,0x10
c0017a4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a53:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a59:	83 ec 0c             	sub    esp,0xc
c0017a5c:	6a 01                	push   0x1
c0017a5e:	6a 01                	push   0x1
c0017a60:	50                   	push   eax
c0017a61:	52                   	push   edx
c0017a62:	53                   	push   ebx
c0017a63:	e8 02 ac ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a68:	83 c4 20             	add    esp,0x20
c0017a6b:	09 f0                	or     eax,esi
c0017a6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a75:	c1 e0 03             	shl    eax,0x3
c0017a78:	05 c0 0a 03 c0       	add    eax,0xc0030ac0
c0017a7d:	83 ec 04             	sub    esp,0x4
c0017a80:	6a 04                	push   0x4
c0017a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a86:	50                   	push   eax
c0017a87:	e8 b8 8c fe ff       	call   c0000744 <memcpy>
c0017a8c:	83 c4 10             	add    esp,0x10
c0017a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a9e:	05 00 10 00 00       	add    eax,0x1000
c0017aa3:	c1 e8 0c             	shr    eax,0xc
c0017aa6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aae:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab5:	25 ff 0f 00 00       	and    eax,0xfff
c0017aba:	89 c6                	mov    esi,eax
c0017abc:	e8 79 a3 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017ac1:	89 c3                	mov    ebx,eax
c0017ac3:	83 ec 0c             	sub    esp,0xc
c0017ac6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017aca:	e8 d0 a0 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ad6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017adc:	83 ec 0c             	sub    esp,0xc
c0017adf:	6a 01                	push   0x1
c0017ae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ae5:	50                   	push   eax
c0017ae6:	52                   	push   edx
c0017ae7:	53                   	push   ebx
c0017ae8:	e8 7d ab ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017aed:	83 c4 20             	add    esp,0x20
c0017af0:	09 f0                	or     eax,esi
c0017af2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017af6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017af9:	83 ec 0c             	sub    esp,0xc
c0017afc:	50                   	push   eax
c0017afd:	e8 0d a5 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0017b02:	83 c4 10             	add    esp,0x10
c0017b05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b0d:	89 14 c5 c4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf53c],edx
c0017b14:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b18:	e9 ed fe ff ff       	jmp    c0017a0a <loadACPITables(unsigned char*)+0x10d>
c0017b1d:	90                   	nop
c0017b1e:	83 c4 44             	add    esp,0x44
c0017b21:	5b                   	pop    ebx
c0017b22:	5e                   	pop    esi
c0017b23:	c3                   	ret    

c0017b24 <findRSDT(unsigned char*)>:
c0017b24:	56                   	push   esi
c0017b25:	53                   	push   ebx
c0017b26:	83 ec 44             	sub    esp,0x44
c0017b29:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0017b2e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b34:	83 e0 04             	and    eax,0x4
c0017b37:	84 c0                	test   al,al
c0017b39:	75 0a                	jne    c0017b45 <findRSDT(unsigned char*)+0x21>
c0017b3b:	b8 00 00 00 00       	mov    eax,0x0
c0017b40:	e9 f7 00 00 00       	jmp    c0017c3c <findRSDT(unsigned char*)+0x118>
c0017b45:	83 ec 04             	sub    esp,0x4
c0017b48:	6a 24                	push   0x24
c0017b4a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b4e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b52:	50                   	push   eax
c0017b53:	e8 ec 8b fe ff       	call   c0000744 <memcpy>
c0017b58:	83 c4 10             	add    esp,0x10
c0017b5b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b5f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b63:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b73:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b7b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b83:	25 ff 0f 00 00       	and    eax,0xfff
c0017b88:	89 c6                	mov    esi,eax
c0017b8a:	e8 ab a2 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017b8f:	89 c3                	mov    ebx,eax
c0017b91:	83 ec 0c             	sub    esp,0xc
c0017b94:	6a 02                	push   0x2
c0017b96:	e8 04 a0 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017b9b:	83 c4 10             	add    esp,0x10
c0017b9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017ba2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ba8:	83 ec 0c             	sub    esp,0xc
c0017bab:	6a 01                	push   0x1
c0017bad:	6a 02                	push   0x2
c0017baf:	50                   	push   eax
c0017bb0:	52                   	push   edx
c0017bb1:	53                   	push   ebx
c0017bb2:	e8 b3 aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bb7:	83 c4 20             	add    esp,0x20
c0017bba:	09 f0                	or     eax,esi
c0017bbc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc4:	25 ff 0f 00 00       	and    eax,0xfff
c0017bc9:	89 c6                	mov    esi,eax
c0017bcb:	e8 6a a2 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017bd0:	89 c3                	mov    ebx,eax
c0017bd2:	83 ec 0c             	sub    esp,0xc
c0017bd5:	6a 02                	push   0x2
c0017bd7:	e8 c3 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017bdc:	83 c4 10             	add    esp,0x10
c0017bdf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017be3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017be9:	83 ec 0c             	sub    esp,0xc
c0017bec:	6a 01                	push   0x1
c0017bee:	6a 02                	push   0x2
c0017bf0:	50                   	push   eax
c0017bf1:	52                   	push   edx
c0017bf2:	53                   	push   ebx
c0017bf3:	e8 72 aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bf8:	83 c4 20             	add    esp,0x20
c0017bfb:	09 f0                	or     eax,esi
c0017bfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c01:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c06:	75 11                	jne    c0017c19 <findRSDT(unsigned char*)+0xf5>
c0017c08:	c6 05 c0 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030cc0,0x0
c0017c0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c13:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c17:	eb 1f                	jmp    c0017c38 <findRSDT(unsigned char*)+0x114>
c0017c19:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c1e:	75 11                	jne    c0017c31 <findRSDT(unsigned char*)+0x10d>
c0017c20:	c6 05 c0 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030cc0,0x1
c0017c27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c2b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c2f:	eb 07                	jmp    c0017c38 <findRSDT(unsigned char*)+0x114>
c0017c31:	b8 00 00 00 00       	mov    eax,0x0
c0017c36:	eb 04                	jmp    c0017c3c <findRSDT(unsigned char*)+0x118>
c0017c38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c3c:	83 c4 44             	add    esp,0x44
c0017c3f:	5b                   	pop    ebx
c0017c40:	5e                   	pop    esi
c0017c41:	c3                   	ret    

c0017c42 <findDataTable(unsigned char*, char*)>:
c0017c42:	83 ec 1c             	sub    esp,0x1c
c0017c45:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0017c4a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c50:	83 e0 04             	and    eax,0x4
c0017c53:	84 c0                	test   al,al
c0017c55:	75 07                	jne    c0017c5e <findDataTable(unsigned char*, char*)+0x1c>
c0017c57:	b8 00 00 00 00       	mov    eax,0x0
c0017c5c:	eb 7c                	jmp    c0017cda <findDataTable(unsigned char*, char*)+0x98>
c0017c5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c66:	a1 ac 0a 03 c0       	mov    eax,ds:0xc0030aac
c0017c6b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017c6f:	7d 3a                	jge    c0017cab <findDataTable(unsigned char*, char*)+0x69>
c0017c71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c75:	c1 e0 03             	shl    eax,0x3
c0017c78:	05 c0 0a 03 c0       	add    eax,0xc0030ac0
c0017c7d:	83 ec 04             	sub    esp,0x4
c0017c80:	6a 04                	push   0x4
c0017c82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c86:	50                   	push   eax
c0017c87:	e8 b4 89 fe ff       	call   c0000640 <memcmp>
c0017c8c:	83 c4 10             	add    esp,0x10
c0017c8f:	85 c0                	test   eax,eax
c0017c91:	0f 94 c0             	sete   al
c0017c94:	84 c0                	test   al,al
c0017c96:	74 0d                	je     c0017ca5 <findDataTable(unsigned char*, char*)+0x63>
c0017c98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c9c:	8b 04 c5 c4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf53c]
c0017ca3:	eb 35                	jmp    c0017cda <findDataTable(unsigned char*, char*)+0x98>
c0017ca5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ca9:	eb bb                	jmp    c0017c66 <findDataTable(unsigned char*, char*)+0x24>
c0017cab:	a0 c0 0c 03 c0       	mov    al,ds:0xc0030cc0
c0017cb0:	84 c0                	test   al,al
c0017cb2:	74 07                	je     c0017cbb <findDataTable(unsigned char*, char*)+0x79>
c0017cb4:	b8 58 00 00 00       	mov    eax,0x58
c0017cb9:	eb 05                	jmp    c0017cc0 <findDataTable(unsigned char*, char*)+0x7e>
c0017cbb:	b8 52 00 00 00       	mov    eax,0x52
c0017cc0:	83 ec 04             	sub    esp,0x4
c0017cc3:	50                   	push   eax
c0017cc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cc8:	68 a8 b4 02 c0       	push   0xc002b4a8
c0017ccd:	e8 02 b2 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0017cd2:	83 c4 10             	add    esp,0x10
c0017cd5:	b8 00 00 00 00       	mov    eax,0x0
c0017cda:	83 c4 1c             	add    esp,0x1c
c0017cdd:	c3                   	ret    

c0017cde <scanMADT()>:
c0017cde:	53                   	push   ebx
c0017cdf:	83 ec 38             	sub    esp,0x38
c0017ce2:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0017ce7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ced:	83 e0 04             	and    eax,0x4
c0017cf0:	84 c0                	test   al,al
c0017cf2:	0f 84 63 04 00 00    	je     c001815b <scanMADT()+0x47d>
c0017cf8:	e8 76 fb ff ff       	call   c0017873 <findRSDP()>
c0017cfd:	a3 cc 0c 03 c0       	mov    ds:0xc0030ccc,eax
c0017d02:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017d07:	85 c0                	test   eax,eax
c0017d09:	75 19                	jne    c0017d24 <scanMADT()+0x46>
c0017d0b:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0017d10:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d16:	83 e2 fb             	and    edx,0xfffffffb
c0017d19:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d1f:	e9 3b 04 00 00       	jmp    c001815f <scanMADT()+0x481>
c0017d24:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017d29:	83 ec 0c             	sub    esp,0xc
c0017d2c:	50                   	push   eax
c0017d2d:	e8 f2 fd ff ff       	call   c0017b24 <findRSDT(unsigned char*)>
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	a3 c8 0c 03 c0       	mov    ds:0xc0030cc8,eax
c0017d3a:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c0017d3f:	85 c0                	test   eax,eax
c0017d41:	75 19                	jne    c0017d5c <scanMADT()+0x7e>
c0017d43:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0017d48:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d4e:	83 e2 fb             	and    edx,0xfffffffb
c0017d51:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d57:	e9 03 04 00 00       	jmp    c001815f <scanMADT()+0x481>
c0017d5c:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c0017d61:	83 ec 0c             	sub    esp,0xc
c0017d64:	50                   	push   eax
c0017d65:	e8 93 fb ff ff       	call   c00178fd <loadACPITables(unsigned char*)>
c0017d6a:	83 c4 10             	add    esp,0x10
c0017d6d:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c0017d72:	83 ec 08             	sub    esp,0x8
c0017d75:	68 76 b3 02 c0       	push   0xc002b376
c0017d7a:	50                   	push   eax
c0017d7b:	e8 c2 fe ff ff       	call   c0017c42 <findDataTable(unsigned char*, char*)>
c0017d80:	83 c4 10             	add    esp,0x10
c0017d83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d87:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017d8c:	75 19                	jne    c0017da7 <scanMADT()+0xc9>
c0017d8e:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0017d93:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d99:	83 e2 fe             	and    edx,0xfffffffe
c0017d9c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017da2:	e9 b8 03 00 00       	jmp    c001815f <scanMADT()+0x481>
c0017da7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017daf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017db3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017db6:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017dba:	0f 87 9f 03 00 00    	ja     c001815f <scanMADT()+0x481>
c0017dc0:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017dc8:	0f 87 91 03 00 00    	ja     c001815f <scanMADT()+0x481>
c0017dce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017dd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dda:	8d 50 01             	lea    edx,[eax+0x1]
c0017ddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017de1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017de5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017de9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017ded:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017df1:	8d 50 01             	lea    edx,[eax+0x1]
c0017df4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017df8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dfc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e00:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e04:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e09:	0f 86 4f 03 00 00    	jbe    c001815e <scanMADT()+0x480>
c0017e0f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e14:	75 57                	jne    c0017e6d <scanMADT()+0x18f>
c0017e16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e1a:	8d 50 01             	lea    edx,[eax+0x1]
c0017e1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e21:	8a 15 c0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ec0
c0017e27:	0f b6 d2             	movzx  edx,dl
c0017e2a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e2e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e32:	88 82 00 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf100],al
c0017e38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e3c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e43:	8a 15 c0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ec0
c0017e49:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e4c:	88 0d c0 0e 03 c0    	mov    BYTE PTR ds:0xc0030ec0,cl
c0017e52:	0f b6 d2             	movzx  edx,dl
c0017e55:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e59:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e5d:	88 82 e0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf120],al
c0017e63:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e68:	e9 da 02 00 00       	jmp    c0018147 <scanMADT()+0x469>
c0017e6d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017e72:	0f 85 14 01 00 00    	jne    c0017f8c <scanMADT()+0x2ae>
c0017e78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e7c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e83:	8a 15 80 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d80
c0017e89:	0f b6 d2             	movzx  edx,dl
c0017e8c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e90:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e94:	88 82 a0 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf260],al
c0017e9a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017e9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ea2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea6:	01 d0                	add    eax,edx
c0017ea8:	83 c0 2c             	add    eax,0x2c
c0017eab:	8a 00                	mov    al,BYTE PTR [eax]
c0017ead:	0f b6 d0             	movzx  edx,al
c0017eb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb4:	8d 48 01             	lea    ecx,[eax+0x1]
c0017eb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ebb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ebf:	0f b6 c0             	movzx  eax,al
c0017ec2:	c1 e0 08             	shl    eax,0x8
c0017ec5:	89 d1                	mov    ecx,edx
c0017ec7:	09 c1                	or     ecx,eax
c0017ec9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ecd:	8d 50 02             	lea    edx,[eax+0x2]
c0017ed0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ed8:	0f b6 c0             	movzx  eax,al
c0017edb:	c1 e0 10             	shl    eax,0x10
c0017ede:	09 c1                	or     ecx,eax
c0017ee0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee4:	8d 50 03             	lea    edx,[eax+0x3]
c0017ee7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eeb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017eef:	0f b6 c0             	movzx  eax,al
c0017ef2:	c1 e0 18             	shl    eax,0x18
c0017ef5:	09 c1                	or     ecx,eax
c0017ef7:	89 ca                	mov    edx,ecx
c0017ef9:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c0017efe:	0f b6 c0             	movzx  eax,al
c0017f01:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c0017f08:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f15:	01 d0                	add    eax,edx
c0017f17:	83 c0 2c             	add    eax,0x2c
c0017f1a:	8a 00                	mov    al,BYTE PTR [eax]
c0017f1c:	0f b6 d0             	movzx  edx,al
c0017f1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f23:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f2a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f2e:	0f b6 c0             	movzx  eax,al
c0017f31:	c1 e0 08             	shl    eax,0x8
c0017f34:	89 d1                	mov    ecx,edx
c0017f36:	09 c1                	or     ecx,eax
c0017f38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3c:	8d 50 02             	lea    edx,[eax+0x2]
c0017f3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f43:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f47:	0f b6 c0             	movzx  eax,al
c0017f4a:	c1 e0 10             	shl    eax,0x10
c0017f4d:	09 c1                	or     ecx,eax
c0017f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f53:	8d 50 03             	lea    edx,[eax+0x3]
c0017f56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f5e:	0f b6 c0             	movzx  eax,al
c0017f61:	c1 e0 18             	shl    eax,0x18
c0017f64:	09 c1                	or     ecx,eax
c0017f66:	89 ca                	mov    edx,ecx
c0017f68:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c0017f6d:	0f b6 c0             	movzx  eax,al
c0017f70:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c0017f77:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f7c:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c0017f81:	40                   	inc    eax
c0017f82:	a2 80 0d 03 c0       	mov    ds:0xc0030d80,al
c0017f87:	e9 bb 01 00 00       	jmp    c0018147 <scanMADT()+0x469>
c0017f8c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017f91:	0f 85 e9 00 00 00    	jne    c0018080 <scanMADT()+0x3a2>
c0017f97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9b:	8d 50 01             	lea    edx,[eax+0x1]
c0017f9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017faa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb2:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fbd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fc1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017fc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcd:	01 d0                	add    eax,edx
c0017fcf:	83 c0 2c             	add    eax,0x2c
c0017fd2:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd4:	0f b6 d0             	movzx  edx,al
c0017fd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdb:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fe6:	0f b6 c0             	movzx  eax,al
c0017fe9:	c1 e0 08             	shl    eax,0x8
c0017fec:	89 d1                	mov    ecx,edx
c0017fee:	09 c1                	or     ecx,eax
c0017ff0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff4:	8d 50 02             	lea    edx,[eax+0x2]
c0017ff7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ffb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fff:	0f b6 c0             	movzx  eax,al
c0018002:	c1 e0 10             	shl    eax,0x10
c0018005:	09 c1                	or     ecx,eax
c0018007:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800b:	8d 50 03             	lea    edx,[eax+0x3]
c001800e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018012:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018016:	0f b6 c0             	movzx  eax,al
c0018019:	c1 e0 18             	shl    eax,0x18
c001801c:	09 c8                	or     eax,ecx
c001801e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018022:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018027:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001802b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802f:	01 d0                	add    eax,edx
c0018031:	83 c0 2c             	add    eax,0x2c
c0018034:	8a 00                	mov    al,BYTE PTR [eax]
c0018036:	0f b6 c0             	movzx  eax,al
c0018039:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001803d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018040:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018044:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018048:	0f b6 d2             	movzx  edx,dl
c001804b:	c1 e2 08             	shl    edx,0x8
c001804e:	09 d0                	or     eax,edx
c0018050:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018055:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001805a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001805f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018063:	88 90 40 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd29c0],dl
c0018069:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001806e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018073:	66 89 84 12 60 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf2a0],ax
c001807b:	e9 c7 00 00 00       	jmp    c0018147 <scanMADT()+0x469>
c0018080:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018085:	0f 85 b0 00 00 00    	jne    c001813b <scanMADT()+0x45d>
c001808b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808f:	8d 50 01             	lea    edx,[eax+0x1]
c0018092:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018096:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001809e:	0f b6 c0             	movzx  eax,al
c00180a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ad:	01 d0                	add    eax,edx
c00180af:	83 c0 2c             	add    eax,0x2c
c00180b2:	8a 00                	mov    al,BYTE PTR [eax]
c00180b4:	0f b6 d0             	movzx  edx,al
c00180b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00180be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180c6:	0f b6 c0             	movzx  eax,al
c00180c9:	c1 e0 08             	shl    eax,0x8
c00180cc:	09 d0                	or     eax,edx
c00180ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00180d2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180db:	8d 50 01             	lea    edx,[eax+0x1]
c00180de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180ea:	0f b6 c0             	movzx  eax,al
c00180ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f5:	c1 e0 08             	shl    eax,0x8
c00180f8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00180fc:	89 c1                	mov    ecx,eax
c00180fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018102:	c1 e0 18             	shl    eax,0x18
c0018105:	89 c3                	mov    ebx,eax
c0018107:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001810c:	8d 50 01             	lea    edx,[eax+0x1]
c001810f:	89 15 d0 0c 03 c0    	mov    DWORD PTR ds:0xc0030cd0,edx
c0018115:	09 d9                	or     ecx,ebx
c0018117:	89 ca                	mov    edx,ecx
c0018119:	89 14 85 e0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf320],edx
c0018120:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018124:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001812c:	68 d8 b4 02 c0       	push   0xc002b4d8
c0018131:	e8 9e ad ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018136:	83 c4 10             	add    esp,0x10
c0018139:	eb 0c                	jmp    c0018147 <scanMADT()+0x469>
c001813b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018140:	75 05                	jne    c0018147 <scanMADT()+0x469>
c0018142:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018147:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001814c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018150:	01 d0                	add    eax,edx
c0018152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018156:	e9 54 fc ff ff       	jmp    c0017daf <scanMADT()+0xd1>
c001815b:	90                   	nop
c001815c:	eb 01                	jmp    c001815f <scanMADT()+0x481>
c001815e:	90                   	nop
c001815f:	83 c4 38             	add    esp,0x38
c0018162:	5b                   	pop    ebx
c0018163:	c3                   	ret    

c0018164 <ACPI::ACPI()>:
c0018164:	83 ec 0c             	sub    esp,0xc
c0018167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816b:	83 ec 08             	sub    esp,0x8
c001816e:	68 7b b3 02 c0       	push   0xc002b37b
c0018173:	50                   	push   eax
c0018174:	e8 71 c3 ff ff       	call   c00144ea <Device::Device(char const*)>
c0018179:	83 c4 10             	add    esp,0x10
c001817c:	ba 4c b5 02 c0       	mov    edx,0xc002b54c
c0018181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018185:	89 10                	mov    DWORD PTR [eax],edx
c0018187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018196:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00181a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00181b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bd:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00181c4:	e8 15 fb ff ff       	call   c0017cde <scanMADT()>
c00181c9:	90                   	nop
c00181ca:	83 c4 0c             	add    esp,0xc
c00181cd:	c3                   	ret    

c00181ce <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00181ce:	83 ec 2c             	sub    esp,0x2c
c00181d1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00181d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00181d9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00181dd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00181e1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00181e6:	88 d0                	mov    al,dl
c00181e8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181ec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00181f1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00181f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181fd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018203:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018207:	0f 8d 97 00 00 00    	jge    c00182a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001820d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018211:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018215:	83 c2 2a             	add    edx,0x2a
c0018218:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001821c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018221:	75 78                	jne    c001829b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018227:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001822b:	83 c2 2a             	add    edx,0x2a
c001822e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018232:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018236:	75 63                	jne    c001829b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018238:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001823d:	74 3a                	je     c0018279 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001823f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018243:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018247:	83 c2 2a             	add    edx,0x2a
c001824a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001824e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018252:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018255:	39 c2                	cmp    edx,eax
c0018257:	74 10                	je     c0018269 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018259:	83 ec 0c             	sub    esp,0xc
c001825c:	68 14 b5 02 c0       	push   0xc002b514
c0018261:	e8 0f 23 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0018266:	83 c4 10             	add    esp,0x10
c0018269:	83 ec 0c             	sub    esp,0xc
c001826c:	68 80 b3 02 c0       	push   0xc002b380
c0018271:	e8 ff 22 00 00       	call   c001a575 <Krnl::panic(char const*)>
c0018276:	83 c4 10             	add    esp,0x10
c0018279:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001827d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018281:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018285:	83 c2 2a             	add    edx,0x2a
c0018288:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001828c:	8b 02                	mov    eax,DWORD PTR [edx]
c001828e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018291:	89 01                	mov    DWORD PTR [ecx],eax
c0018293:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018296:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001829b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001829f:	e9 55 ff ff ff       	jmp    c00181f9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00182a4:	90                   	nop
c00182a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182a9:	83 c4 2c             	add    esp,0x2c
c00182ac:	c2 04 00             	ret    0x4
c00182af:	90                   	nop

c00182b0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182b0:	83 ec 1c             	sub    esp,0x1c
c00182b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00182bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182c4:	88 c8                	mov    al,cl
c00182c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00182ca:	88 d0                	mov    al,dl
c00182cc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182d4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182de:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182e1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00182e5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00182e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182f7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00182fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182fe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018303:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018307:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001830d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018311:	8d 48 01             	lea    ecx,[eax+0x1]
c0018314:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018318:	83 c2 2a             	add    edx,0x2a
c001831b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001831f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018323:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018329:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001832d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018330:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018334:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018342:	8d 50 01             	lea    edx,[eax+0x1]
c0018345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018349:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001834f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018353:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018359:	3d 00 02 00 00       	cmp    eax,0x200
c001835e:	75 10                	jne    c0018370 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018360:	83 ec 0c             	sub    esp,0xc
c0018363:	68 8f b3 02 c0       	push   0xc002b38f
c0018368:	e8 08 22 00 00       	call   c001a575 <Krnl::panic(char const*)>
c001836d:	83 c4 10             	add    esp,0x10
c0018370:	90                   	nop
c0018371:	83 c4 1c             	add    esp,0x1c
c0018374:	c3                   	ret    
c0018375:	90                   	nop

c0018376 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018376:	b8 00 00 00 00       	mov    eax,0x0
c001837b:	c3                   	ret    

c001837c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001837c:	83 ec 1c             	sub    esp,0x1c
c001837f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018383:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018386:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001838a:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001838f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018394:	83 ec 08             	sub    esp,0x8
c0018397:	52                   	push   edx
c0018398:	50                   	push   eax
c0018399:	e8 ba 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c001839e:	83 c4 10             	add    esp,0x10
c00183a1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183a5:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00183aa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183af:	83 ec 04             	sub    esp,0x4
c00183b2:	6a 01                	push   0x1
c00183b4:	52                   	push   edx
c00183b5:	50                   	push   eax
c00183b6:	e8 b3 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00183bb:	83 c4 10             	add    esp,0x10
c00183be:	90                   	nop
c00183bf:	83 c4 1c             	add    esp,0x1c
c00183c2:	c3                   	ret    
c00183c3:	90                   	nop

c00183c4 <ACPI::open(int, int, void*)>:
c00183c4:	53                   	push   ebx
c00183c5:	83 ec 28             	sub    esp,0x28
c00183c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183cc:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d7:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183de:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c00183e3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183e9:	83 e0 04             	and    eax,0x4
c00183ec:	84 c0                	test   al,al
c00183ee:	74 47                	je     c0018437 <ACPI::open(int, int, void*)+0x73>
c00183f0:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c00183f5:	83 ec 08             	sub    esp,0x8
c00183f8:	68 ac b3 02 c0       	push   0xc002b3ac
c00183fd:	50                   	push   eax
c00183fe:	e8 3f f8 ff ff       	call   c0017c42 <findDataTable(unsigned char*, char*)>
c0018403:	83 c4 10             	add    esp,0x10
c0018406:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001840a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001840f:	74 26                	je     c0018437 <ACPI::open(int, int, void*)+0x73>
c0018411:	83 ec 0c             	sub    esp,0xc
c0018414:	68 b1 b3 02 c0       	push   0xc002b3b1
c0018419:	e8 b6 aa ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018425:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001842c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018430:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018437:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001843f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018443:	8a 00                	mov    al,BYTE PTR [eax]
c0018445:	3c 01                	cmp    al,0x1
c0018447:	75 28                	jne    c0018471 <ACPI::open(int, int, void*)+0xad>
c0018449:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018458:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001845f:	83 ec 0c             	sub    esp,0xc
c0018462:	68 c2 b3 02 c0       	push   0xc002b3c2
c0018467:	e8 68 aa ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001846c:	83 c4 10             	add    esp,0x10
c001846f:	eb 25                	jmp    c0018496 <ACPI::open(int, int, void*)+0xd2>
c0018471:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018475:	8a 00                	mov    al,BYTE PTR [eax]
c0018477:	3c 02                	cmp    al,0x2
c0018479:	75 1b                	jne    c0018496 <ACPI::open(int, int, void*)+0xd2>
c001847b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001847f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018486:	83 ec 0c             	sub    esp,0xc
c0018489:	68 ca b3 02 c0       	push   0xc002b3ca
c001848e:	e8 41 aa ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018493:	83 c4 10             	add    esp,0x10
c0018496:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001849a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184a0:	83 f0 01             	xor    eax,0x1
c00184a3:	84 c0                	test   al,al
c00184a5:	74 6a                	je     c0018511 <ACPI::open(int, int, void*)+0x14d>
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	68 d2 b3 02 c0       	push   0xc002b3d2
c00184af:	e8 20 aa ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	e8 94 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184c0:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00184c5:	75 28                	jne    c00184ef <ACPI::open(int, int, void*)+0x12b>
c00184c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184cb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184dd:	83 ec 0c             	sub    esp,0xc
c00184e0:	68 e0 b3 02 c0       	push   0xc002b3e0
c00184e5:	e8 ea a9 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	eb 22                	jmp    c0018511 <ACPI::open(int, int, void*)+0x14d>
c00184ef:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00184f4:	75 1b                	jne    c0018511 <ACPI::open(int, int, void*)+0x14d>
c00184f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184fa:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018501:	83 ec 0c             	sub    esp,0xc
c0018504:	68 ea b3 02 c0       	push   0xc002b3ea
c0018509:	e8 c6 a9 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018515:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001851b:	84 c0                	test   al,al
c001851d:	74 13                	je     c0018532 <ACPI::open(int, int, void*)+0x16e>
c001851f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018523:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018529:	83 f0 01             	xor    eax,0x1
c001852c:	0f b6 c0             	movzx  eax,al
c001852f:	40                   	inc    eax
c0018530:	eb 05                	jmp    c0018537 <ACPI::open(int, int, void*)+0x173>
c0018532:	b8 00 00 00 00       	mov    eax,0x0
c0018537:	83 ec 08             	sub    esp,0x8
c001853a:	50                   	push   eax
c001853b:	68 f4 b3 02 c0       	push   0xc002b3f4
c0018540:	e8 8f a9 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018545:	83 c4 10             	add    esp,0x10
c0018548:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001854c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018552:	84 c0                	test   al,al
c0018554:	74 67                	je     c00185bd <ACPI::open(int, int, void*)+0x1f9>
c0018556:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001855e:	83 ec 0c             	sub    esp,0xc
c0018561:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018565:	e8 d6 72 ff ff       	call   c000f840 <malloc>
c001856a:	83 c4 10             	add    esp,0x10
c001856d:	89 c3                	mov    ebx,eax
c001856f:	83 ec 0c             	sub    esp,0xc
c0018572:	53                   	push   ebx
c0018573:	e8 26 a3 00 00       	call   c002289e <PCI::PCI()>
c0018578:	83 c4 10             	add    esp,0x10
c001857b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001857f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018583:	83 ec 08             	sub    esp,0x8
c0018586:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001858a:	50                   	push   eax
c001858b:	e8 6a bd ff ff       	call   c00142fa <Device::addChild(Device*)>
c0018590:	83 c4 10             	add    esp,0x10
c0018593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018597:	8b 00                	mov    eax,DWORD PTR [eax]
c0018599:	83 c0 08             	add    eax,0x8
c001859c:	8b 00                	mov    eax,DWORD PTR [eax]
c001859e:	6a 00                	push   0x0
c00185a0:	6a 00                	push   0x0
c00185a2:	6a 00                	push   0x0
c00185a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185a8:	ff d0                	call   eax
c00185aa:	83 c4 10             	add    esp,0x10
c00185ad:	83 ec 0c             	sub    esp,0xc
c00185b0:	68 fd b3 02 c0       	push   0xc002b3fd
c00185b5:	e8 1a a9 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00185ba:	83 c4 10             	add    esp,0x10
c00185bd:	83 ec 0c             	sub    esp,0xc
c00185c0:	68 08 b4 02 c0       	push   0xc002b408
c00185c5:	e8 cb 46 00 00       	call   c001cc95 <Thr::loadKernelSymbolTable(char const*)>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	8b 1d e8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e8
c00185d3:	83 ec 08             	sub    esp,0x8
c00185d6:	6a 01                	push   0x1
c00185d8:	68 26 b4 02 c0       	push   0xc002b426
c00185dd:	e8 10 51 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c00185e2:	83 c4 10             	add    esp,0x10
c00185e5:	83 ec 08             	sub    esp,0x8
c00185e8:	53                   	push   ebx
c00185e9:	50                   	push   eax
c00185ea:	e8 37 53 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c00185ef:	83 c4 10             	add    esp,0x10
c00185f2:	8b 1d e8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3e8
c00185f8:	83 ec 08             	sub    esp,0x8
c00185fb:	6a 01                	push   0x1
c00185fd:	68 43 b4 02 c0       	push   0xc002b443
c0018602:	e8 eb 50 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c0018607:	83 c4 10             	add    esp,0x10
c001860a:	83 ec 08             	sub    esp,0x8
c001860d:	53                   	push   ebx
c001860e:	50                   	push   eax
c001860f:	e8 12 53 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c0018614:	83 c4 10             	add    esp,0x10
c0018617:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001861c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018622:	83 e0 04             	and    eax,0x4
c0018625:	84 c0                	test   al,al
c0018627:	0f 84 d2 00 00 00    	je     c00186ff <ACPI::open(int, int, void*)+0x33b>
c001862d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018634:	83 ec 0c             	sub    esp,0xc
c0018637:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001863b:	e8 00 72 ff ff       	call   c000f840 <malloc>
c0018640:	83 c4 10             	add    esp,0x10
c0018643:	89 c3                	mov    ebx,eax
c0018645:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001864a:	83 ec 04             	sub    esp,0x4
c001864d:	50                   	push   eax
c001864e:	68 60 b4 02 c0       	push   0xc002b460
c0018653:	53                   	push   ebx
c0018654:	e8 d3 ad ff ff       	call   c001342c <File::File(char const*, Process*)>
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018660:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018665:	74 17                	je     c001867e <ACPI::open(int, int, void*)+0x2ba>
c0018667:	83 ec 0c             	sub    esp,0xc
c001866a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001866e:	e8 8b b0 ff ff       	call   c00136fe <File::exists()>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	84 c0                	test   al,al
c0018678:	74 04                	je     c001867e <ACPI::open(int, int, void*)+0x2ba>
c001867a:	b0 01                	mov    al,0x1
c001867c:	eb 02                	jmp    c0018680 <ACPI::open(int, int, void*)+0x2bc>
c001867e:	b0 00                	mov    al,0x0
c0018680:	84 c0                	test   al,al
c0018682:	74 22                	je     c00186a6 <ACPI::open(int, int, void*)+0x2e2>
c0018684:	83 ec 08             	sub    esp,0x8
c0018687:	6a 01                	push   0x1
c0018689:	68 60 b4 02 c0       	push   0xc002b460
c001868e:	e8 5f 50 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c0018693:	83 c4 10             	add    esp,0x10
c0018696:	83 ec 08             	sub    esp,0x8
c0018699:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001869d:	50                   	push   eax
c001869e:	e8 83 52 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c00186a3:	83 c4 10             	add    esp,0x10
c00186a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186ab:	74 1e                	je     c00186cb <ACPI::open(int, int, void*)+0x307>
c00186ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186b2:	74 17                	je     c00186cb <ACPI::open(int, int, void*)+0x307>
c00186b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00186ba:	83 c0 08             	add    eax,0x8
c00186bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00186bf:	83 ec 0c             	sub    esp,0xc
c00186c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186c6:	ff d0                	call   eax
c00186c8:	83 c4 10             	add    esp,0x10
c00186cb:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c00186d0:	83 ec 08             	sub    esp,0x8
c00186d3:	68 7d b4 02 c0       	push   0xc002b47d
c00186d8:	50                   	push   eax
c00186d9:	e8 64 f5 ff ff       	call   c0017c42 <findDataTable(unsigned char*, char*)>
c00186de:	83 c4 10             	add    esp,0x10
c00186e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186e5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00186ea:	74 13                	je     c00186ff <ACPI::open(int, int, void*)+0x33b>
c00186ec:	83 ec 08             	sub    esp,0x8
c00186ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186f7:	e8 80 fc ff ff       	call   c001837c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00186fc:	83 c4 10             	add    esp,0x10
c00186ff:	b8 00 00 00 00       	mov    eax,0x0
c0018704:	83 c4 28             	add    esp,0x28
c0018707:	5b                   	pop    ebx
c0018708:	c3                   	ret    
c0018709:	90                   	nop

c001870a <ACPI::sleep()>:
c001870a:	83 ec 0c             	sub    esp,0xc
c001870d:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c0018712:	85 c0                	test   eax,eax
c0018714:	74 07                	je     c001871d <ACPI::sleep()+0x13>
c0018716:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001871b:	ff d0                	call   eax
c001871d:	90                   	nop
c001871e:	83 c4 0c             	add    esp,0xc
c0018721:	c3                   	ret    

c0018722 <CPU::close(int, int, void*)>:
c0018722:	31 c0                	xor    eax,eax
c0018724:	c3                   	ret    
c0018725:	90                   	nop

c0018726 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018726:	55                   	push   ebp
c0018727:	57                   	push   edi
c0018728:	56                   	push   esi
c0018729:	53                   	push   ebx
c001872a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001872e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018732:	89 ce                	mov    esi,ecx
c0018734:	89 d5                	mov    ebp,edx
c0018736:	80 f9 04             	cmp    cl,0x4
c0018739:	75 28                	jne    c0018763 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001873b:	8d 42 f9             	lea    eax,[edx-0x7]
c001873e:	3c 03                	cmp    al,0x3
c0018740:	0f 86 63 01 00 00    	jbe    c00188a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018746:	80 fa 03             	cmp    dl,0x3
c0018749:	0f 84 5a 01 00 00    	je     c00188a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001874f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018752:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018757:	89 fb                	mov    ebx,edi
c0018759:	80 fb 01             	cmp    bl,0x1
c001875c:	77 4e                	ja     c00187ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001875e:	e9 52 01 00 00       	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018763:	80 f9 05             	cmp    cl,0x5
c0018766:	75 4d                	jne    c00187b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018768:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c001876d:	80 fa 03             	cmp    dl,0x3
c0018770:	0f 86 3f 01 00 00    	jbe    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018776:	8d 7a fa             	lea    edi,[edx-0x6]
c0018779:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c001877e:	89 fb                	mov    ebx,edi
c0018780:	80 fb 01             	cmp    bl,0x1
c0018783:	0f 86 2c 01 00 00    	jbe    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018789:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001878e:	80 fa 08             	cmp    dl,0x8
c0018791:	0f 84 1e 01 00 00    	je     c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018797:	89 d7                	mov    edi,edx
c0018799:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001879e:	83 e7 fb             	and    edi,0xfffffffb
c00187a1:	89 fb                	mov    ebx,edi
c00187a3:	80 fb 09             	cmp    bl,0x9
c00187a6:	0f 84 09 01 00 00    	je     c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ac:	31 c0                	xor    eax,eax
c00187ae:	89 eb                	mov    ebx,ebp
c00187b0:	0f b6 fb             	movzx  edi,bl
c00187b3:	eb 30                	jmp    c00187e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187b5:	31 c0                	xor    eax,eax
c00187b7:	80 f9 06             	cmp    cl,0x6
c00187ba:	75 f2                	jne    c00187ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187bc:	80 fa 0a             	cmp    dl,0xa
c00187bf:	77 ed                	ja     c00187ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187c1:	bf de 05 00 00       	mov    edi,0x5de
c00187c6:	0f a3 d7             	bt     edi,edx
c00187c9:	73 e3                	jae    c00187ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187cb:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00187d0:	e9 e0 00 00 00       	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d5:	39 c7                	cmp    edi,eax
c00187d7:	0f 84 d3 00 00 00    	je     c00188b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187dd:	40                   	inc    eax
c00187de:	3d d0 00 00 00       	cmp    eax,0xd0
c00187e3:	74 09                	je     c00187ee <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00187e5:	89 f3                	mov    ebx,esi
c00187e7:	80 fb 0f             	cmp    bl,0xf
c00187ea:	75 f1                	jne    c00187dd <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00187ec:	eb e7                	jmp    c00187d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00187ee:	80 f9 10             	cmp    cl,0x10
c00187f1:	75 14                	jne    c0018807 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00187f3:	8d 42 fc             	lea    eax,[edx-0x4]
c00187f6:	83 e0 fb             	and    eax,0xfffffffb
c00187f9:	3c 02                	cmp    al,0x2
c00187fb:	76 34                	jbe    c0018831 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00187fd:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018802:	80 fa 02             	cmp    dl,0x2
c0018805:	eb 24                	jmp    c001882b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018807:	80 f9 11             	cmp    cl,0x11
c001880a:	75 13                	jne    c001881f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001880c:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018811:	80 fa 03             	cmp    dl,0x3
c0018814:	0f 85 9b 00 00 00    	jne    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881a:	e9 91 00 00 00       	jmp    c00188b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001881f:	80 f9 12             	cmp    cl,0x12
c0018822:	75 14                	jne    c0018838 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018824:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018829:	fe ca                	dec    dl
c001882b:	0f 85 84 00 00 00    	jne    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018831:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018836:	eb 7d                	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018838:	80 f9 14             	cmp    cl,0x14
c001883b:	75 12                	jne    c001884f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001883d:	4a                   	dec    edx
c001883e:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018843:	80 fa 01             	cmp    dl,0x1
c0018846:	77 6d                	ja     c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018848:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c001884d:	eb 66                	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001884f:	80 f9 15             	cmp    cl,0x15
c0018852:	75 31                	jne    c0018885 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018854:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018859:	80 fa 01             	cmp    dl,0x1
c001885c:	74 57                	je     c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885e:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018863:	80 fa 13             	cmp    dl,0x13
c0018866:	76 0c                	jbe    c0018874 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018868:	80 fa 30             	cmp    dl,0x30
c001886b:	75 48                	jne    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886d:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018872:	eb 41                	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018874:	b9 04 00 09 00       	mov    ecx,0x90004
c0018879:	0f a3 d1             	bt     ecx,edx
c001887c:	73 37                	jae    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887e:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018883:	eb 30                	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018885:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c001888a:	80 f9 16             	cmp    cl,0x16
c001888d:	75 26                	jne    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888f:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018894:	84 d2                	test   dl,dl
c0018896:	74 1d                	je     c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018898:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c001889d:	80 fa 30             	cmp    dl,0x30
c00188a0:	75 13                	jne    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a2:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00188a7:	eb 0c                	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a9:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00188ae:	eb 05                	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b0:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c00188b5:	5b                   	pop    ebx
c00188b6:	5e                   	pop    esi
c00188b7:	5f                   	pop    edi
c00188b8:	5d                   	pop    ebp
c00188b9:	c3                   	ret    

c00188ba <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188c2:	80 f9 04             	cmp    cl,0x4
c00188c5:	75 6b                	jne    c0018932 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188c7:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00188cc:	80 fa 01             	cmp    dl,0x1
c00188cf:	0f 86 92 02 00 00    	jbe    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d5:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c00188da:	80 fa 02             	cmp    dl,0x2
c00188dd:	0f 84 84 02 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e3:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c00188e8:	80 fa 03             	cmp    dl,0x3
c00188eb:	0f 84 76 02 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f1:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00188f6:	80 fa 04             	cmp    dl,0x4
c00188f9:	0f 84 68 02 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ff:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018904:	80 fa 05             	cmp    dl,0x5
c0018907:	0f 84 5a 02 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890d:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018912:	80 fa 07             	cmp    dl,0x7
c0018915:	0f 84 4c 02 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891b:	83 ea 08             	sub    edx,0x8
c001891e:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018923:	80 fa 01             	cmp    dl,0x1
c0018926:	0f 87 3b 02 00 00    	ja     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892c:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c0018931:	c3                   	ret    
c0018932:	80 f9 05             	cmp    cl,0x5
c0018935:	75 45                	jne    c001897c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018937:	8d 4a ff             	lea    ecx,[edx-0x1]
c001893a:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c001893f:	80 f9 02             	cmp    cl,0x2
c0018942:	0f 86 1f 02 00 00    	jbe    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018948:	80 fa 04             	cmp    dl,0x4
c001894b:	0f 84 f3 01 00 00    	je     c0018b44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018951:	80 fa 07             	cmp    dl,0x7
c0018954:	0f 84 0d 02 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895a:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c001895f:	80 fa 08             	cmp    dl,0x8
c0018962:	0f 84 ff 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018968:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c001896d:	80 fa 09             	cmp    dl,0x9
c0018970:	0f 85 f1 01 00 00    	jne    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018976:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c001897b:	c3                   	ret    
c001897c:	80 f9 06             	cmp    cl,0x6
c001897f:	0f 85 85 01 00 00    	jne    c0018b0a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018985:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c001898a:	80 fa 01             	cmp    dl,0x1
c001898d:	0f 84 d4 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018993:	8d 42 fb             	lea    eax,[edx-0x5]
c0018996:	3c 01                	cmp    al,0x1
c0018998:	0f 86 ac 01 00 00    	jbe    c0018b4a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001899e:	80 fa 03             	cmp    dl,0x3
c00189a1:	0f 84 a3 01 00 00    	je     c0018b4a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189a7:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189aa:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c00189af:	80 f9 01             	cmp    cl,0x1
c00189b2:	0f 86 af 01 00 00    	jbe    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b8:	80 fa 09             	cmp    dl,0x9
c00189bb:	0f 84 8f 01 00 00    	je     c0018b50 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189c1:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189c4:	80 f9 01             	cmp    cl,0x1
c00189c7:	0f 86 9a 01 00 00    	jbe    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cd:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c00189d2:	80 fa 0d             	cmp    dl,0xd
c00189d5:	0f 84 8c 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189db:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00189e0:	80 fa 0e             	cmp    dl,0xe
c00189e3:	0f 84 7e 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e9:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00189ee:	80 fa 0f             	cmp    dl,0xf
c00189f1:	0f 84 70 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f7:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c00189fc:	80 fa 15             	cmp    dl,0x15
c00189ff:	0f 84 62 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a05:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a08:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018a0d:	80 f9 01             	cmp    cl,0x1
c0018a10:	0f 86 51 01 00 00    	jbe    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a16:	80 fa 1a             	cmp    dl,0x1a
c0018a19:	0f 84 37 01 00 00    	je     c0018b56 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a1f:	80 fa 1c             	cmp    dl,0x1c
c0018a22:	0f 84 34 01 00 00    	je     c0018b5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a28:	80 fa 1d             	cmp    dl,0x1d
c0018a2b:	0f 84 36 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a31:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a36:	80 fa 25             	cmp    dl,0x25
c0018a39:	0f 84 28 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a42:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a47:	80 f9 01             	cmp    cl,0x1
c0018a4a:	0f 86 17 01 00 00    	jbe    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a50:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018a55:	80 fa 2a             	cmp    dl,0x2a
c0018a58:	0f 84 09 01 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5e:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a63:	80 fa 2c             	cmp    dl,0x2c
c0018a66:	0f 84 fb 00 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6c:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018a71:	80 fa 2d             	cmp    dl,0x2d
c0018a74:	0f 84 ed 00 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7a:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018a7f:	80 fa 2e             	cmp    dl,0x2e
c0018a82:	0f 84 df 00 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a88:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a8d:	80 fa 2f             	cmp    dl,0x2f
c0018a90:	0f 84 d1 00 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a96:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018a99:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a9e:	80 f9 01             	cmp    cl,0x1
c0018aa1:	0f 86 c0 00 00 00    	jbe    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa7:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018aac:	80 fa 37             	cmp    dl,0x37
c0018aaf:	0f 84 b2 00 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab5:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018aba:	80 fa 3a             	cmp    dl,0x3a
c0018abd:	0f 84 a4 00 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac3:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018ac8:	80 fa 3c             	cmp    dl,0x3c
c0018acb:	0f 84 96 00 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad1:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018ad6:	80 fa 3d             	cmp    dl,0x3d
c0018ad9:	0f 84 88 00 00 00    	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018adf:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018ae4:	80 fa 3e             	cmp    dl,0x3e
c0018ae7:	74 7e                	je     c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae9:	8d 42 bb             	lea    eax,[edx-0x45]
c0018aec:	3c 01                	cmp    al,0x1
c0018aee:	76 72                	jbe    c0018b62 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018af0:	80 fa 3f             	cmp    dl,0x3f
c0018af3:	74 6d                	je     c0018b62 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018af5:	80 fa 4a             	cmp    dl,0x4a
c0018af8:	74 0a                	je     c0018b04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018afa:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018aff:	80 fa 4d             	cmp    dl,0x4d
c0018b02:	75 63                	jne    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b04:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018b09:	c3                   	ret    
c0018b0a:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018b0f:	80 f9 0b             	cmp    cl,0xb
c0018b12:	75 0a                	jne    c0018b1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b14:	fe ca                	dec    dl
c0018b16:	75 4f                	jne    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b18:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018b1d:	c3                   	ret    
c0018b1e:	80 f9 0f             	cmp    cl,0xf
c0018b21:	75 44                	jne    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b23:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018b28:	80 fa 02             	cmp    dl,0x2
c0018b2b:	76 3a                	jbe    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b30:	3c 01                	cmp    al,0x1
c0018b32:	76 0a                	jbe    c0018b3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b34:	b8 62 b8 02 c0       	mov    eax,0xc002b862
c0018b39:	80 fa 06             	cmp    dl,0x6
c0018b3c:	75 29                	jne    c0018b67 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3e:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018b43:	c3                   	ret    
c0018b44:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018b49:	c3                   	ret    
c0018b4a:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018b4f:	c3                   	ret    
c0018b50:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018b55:	c3                   	ret    
c0018b56:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b5b:	c3                   	ret    
c0018b5c:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018b61:	c3                   	ret    
c0018b62:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018b67:	c3                   	ret    

c0018b68 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b68:	60                   	pusha  
c0018b69:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b75:	9c                   	pushf  
c0018b76:	fa                   	cli    
c0018b77:	0f 09                	wbinvd 
c0018b79:	0f 30                	wrmsr  
c0018b7b:	9d                   	popf   
c0018b7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b80:	89 02                	mov    DWORD PTR [edx],eax
c0018b82:	61                   	popa   
c0018b83:	c3                   	ret    

c0018b84 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018b84:	60                   	pusha  
c0018b85:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b89:	9c                   	pushf  
c0018b8a:	fa                   	cli    
c0018b8b:	0f 09                	wbinvd 
c0018b8d:	31 c0                	xor    eax,eax
c0018b8f:	31 d2                	xor    edx,edx
c0018b91:	0f 32                	rdmsr  
c0018b93:	9d                   	popf   
c0018b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b98:	89 02                	mov    DWORD PTR [edx],eax
c0018b9a:	61                   	popa   
c0018b9b:	c3                   	ret    

c0018b9c <CPU::AMD_K6_writeback(int, int, int)>:
c0018b9c:	56                   	push   esi
c0018b9d:	53                   	push   ebx
c0018b9e:	83 ec 10             	sub    esp,0x10
c0018ba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ba5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018baa:	75 5d                	jne    c0018c09 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bac:	83 f8 08             	cmp    eax,0x8
c0018baf:	75 09                	jne    c0018bba <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018bb1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bb6:	7e 13                	jle    c0018bcb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bb8:	eb 30                	jmp    c0018bea <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bba:	83 f8 06             	cmp    eax,0x6
c0018bbd:	7c 4a                	jl     c0018c09 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bbf:	83 f8 07             	cmp    eax,0x7
c0018bc2:	7e 07                	jle    c0018bcb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bc4:	83 f8 09             	cmp    eax,0x9
c0018bc7:	74 21                	je     c0018bea <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bc9:	eb 3e                	jmp    c0018c09 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bcb:	89 e6                	mov    esi,esp
c0018bcd:	8b 1d 28 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e428
c0018bd3:	56                   	push   esi
c0018bd4:	c1 eb 15             	shr    ebx,0x15
c0018bd7:	68 82 00 00 c0       	push   0xc0000082
c0018bdc:	83 e3 7e             	and    ebx,0x7e
c0018bdf:	e8 a0 ff ff ff       	call   c0018b84 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018be4:	56                   	push   esi
c0018be5:	6a 00                	push   0x0
c0018be7:	53                   	push   ebx
c0018be8:	eb 12                	jmp    c0018bfc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018bea:	89 e3                	mov    ebx,esp
c0018bec:	53                   	push   ebx
c0018bed:	68 82 00 00 c0       	push   0xc0000082
c0018bf2:	e8 8d ff ff ff       	call   c0018b84 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bf7:	53                   	push   ebx
c0018bf8:	6a 00                	push   0x0
c0018bfa:	6a 00                	push   0x0
c0018bfc:	68 82 00 00 c0       	push   0xc0000082
c0018c01:	e8 62 ff ff ff       	call   c0018b68 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c06:	83 c4 18             	add    esp,0x18
c0018c09:	83 c4 10             	add    esp,0x10
c0018c0c:	5b                   	pop    ebx
c0018c0d:	5e                   	pop    esi
c0018c0e:	c3                   	ret    
c0018c0f:	90                   	nop

c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c10:	55                   	push   ebp
c0018c11:	57                   	push   edi
c0018c12:	56                   	push   esi
c0018c13:	53                   	push   ebx
c0018c14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c18:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c1c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c20:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c24:	39 05 00 d9 02 c0    	cmp    DWORD PTR ds:0xc002d900,eax
c0018c2a:	75 23                	jne    c0018c4f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c2c:	a1 2c 0f 03 c0       	mov    eax,ds:0xc0030f2c
c0018c31:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c35:	89 06                	mov    DWORD PTR [esi],eax
c0018c37:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0018c3c:	89 07                	mov    DWORD PTR [edi],eax
c0018c3e:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c0018c43:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c46:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c0018c4b:	89 02                	mov    DWORD PTR [edx],eax
c0018c4d:	eb 3f                	jmp    c0018c8e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c4f:	31 c9                	xor    ecx,ecx
c0018c51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c55:	0f a2                	cpuid  
c0018c57:	89 06                	mov    DWORD PTR [esi],eax
c0018c59:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c5f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c62:	89 10                	mov    DWORD PTR [eax],edx
c0018c64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c68:	a3 00 d9 02 c0       	mov    ds:0xc002d900,eax
c0018c6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c6f:	a3 2c 0f 03 c0       	mov    ds:0xc0030f2c,eax
c0018c74:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c76:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0018c7b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c7e:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c0018c83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c87:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c89:	a3 20 0f 03 c0       	mov    ds:0xc0030f20,eax
c0018c8e:	5b                   	pop    ebx
c0018c8f:	5e                   	pop    esi
c0018c90:	5f                   	pop    edi
c0018c91:	5d                   	pop    ebp
c0018c92:	c3                   	ret    
c0018c93:	90                   	nop

c0018c94 <CPU::cpuidCheckEDX(unsigned int)>:
c0018c94:	83 ec 10             	sub    esp,0x10
c0018c97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c9b:	50                   	push   eax
c0018c9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ca0:	50                   	push   eax
c0018ca1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ca5:	50                   	push   eax
c0018ca6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018caa:	50                   	push   eax
c0018cab:	6a 01                	push   0x1
c0018cad:	e8 5e ff ff ff       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cb6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cba:	0f 95 c0             	setne  al
c0018cbd:	83 c4 24             	add    esp,0x24
c0018cc0:	c3                   	ret    
c0018cc1:	90                   	nop

c0018cc2 <CPU::cpuidCheckECX(unsigned int)>:
c0018cc2:	83 ec 10             	sub    esp,0x10
c0018cc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc9:	50                   	push   eax
c0018cca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cce:	50                   	push   eax
c0018ccf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd3:	50                   	push   eax
c0018cd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd8:	50                   	push   eax
c0018cd9:	6a 01                	push   0x1
c0018cdb:	e8 30 ff ff ff       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ce0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ce4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ce8:	0f 95 c0             	setne  al
c0018ceb:	83 c4 24             	add    esp,0x24
c0018cee:	c3                   	ret    
c0018cef:	90                   	nop

c0018cf0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018cf0:	83 ec 10             	sub    esp,0x10
c0018cf3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf7:	50                   	push   eax
c0018cf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cfc:	50                   	push   eax
c0018cfd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d01:	50                   	push   eax
c0018d02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d06:	50                   	push   eax
c0018d07:	6a 07                	push   0x7
c0018d09:	e8 02 ff ff ff       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d12:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d16:	0f 95 c0             	setne  al
c0018d19:	83 c4 24             	add    esp,0x24
c0018d1c:	c3                   	ret    
c0018d1d:	90                   	nop

c0018d1e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d1e:	83 ec 10             	sub    esp,0x10
c0018d21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d25:	50                   	push   eax
c0018d26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2a:	50                   	push   eax
c0018d2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2f:	50                   	push   eax
c0018d30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d34:	50                   	push   eax
c0018d35:	6a 07                	push   0x7
c0018d37:	e8 d4 fe ff ff       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d40:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d44:	0f 95 c0             	setne  al
c0018d47:	83 c4 24             	add    esp,0x24
c0018d4a:	c3                   	ret    
c0018d4b:	90                   	nop

c0018d4c <CPU::CPU()>:
c0018d4c:	83 ec 0c             	sub    esp,0xc
c0018d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d53:	83 ec 08             	sub    esp,0x8
c0018d56:	68 62 b8 02 c0       	push   0xc002b862
c0018d5b:	50                   	push   eax
c0018d5c:	e8 89 b7 ff ff       	call   c00144ea <Device::Device(char const*)>
c0018d61:	83 c4 10             	add    esp,0x10
c0018d64:	ba 3c b9 02 c0       	mov    edx,0xc002b93c
c0018d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d6d:	89 10                	mov    DWORD PTR [eax],edx
c0018d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d73:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d81:	05 78 01 00 00       	add    eax,0x178
c0018d86:	83 ec 0c             	sub    esp,0xc
c0018d89:	50                   	push   eax
c0018d8a:	e8 c9 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018d8f:	83 c4 10             	add    esp,0x10
c0018d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d96:	05 7c 09 00 00       	add    eax,0x97c
c0018d9b:	83 ec 0c             	sub    esp,0xc
c0018d9e:	50                   	push   eax
c0018d9f:	e8 16 65 ff ff       	call   c000f2ba <IDT::IDT()>
c0018da4:	83 c4 10             	add    esp,0x10
c0018da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dab:	05 7c 11 00 00       	add    eax,0x117c
c0018db0:	83 ec 0c             	sub    esp,0xc
c0018db3:	50                   	push   eax
c0018db4:	e8 17 87 ff ff       	call   c00114d0 <TSS::TSS()>
c0018db9:	83 c4 10             	add    esp,0x10
c0018dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dcb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018dd5:	90                   	nop
c0018dd6:	83 c4 0c             	add    esp,0xc
c0018dd9:	c3                   	ret    

c0018dda <CPU::displayFeatures()>:
c0018dda:	53                   	push   ebx
c0018ddb:	83 ec 10             	sub    esp,0x10
c0018dde:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018de2:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018de8:	68 70 b5 02 c0       	push   0xc002b570
c0018ded:	e8 e2 a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018df2:	59                   	pop    ecx
c0018df3:	58                   	pop    eax
c0018df4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018dfa:	50                   	push   eax
c0018dfb:	68 81 b5 02 c0       	push   0xc002b581
c0018e00:	e8 cf a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018e05:	58                   	pop    eax
c0018e06:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e0c:	5a                   	pop    edx
c0018e0d:	c1 e8 0e             	shr    eax,0xe
c0018e10:	0f b6 c0             	movzx  eax,al
c0018e13:	50                   	push   eax
c0018e14:	68 92 b5 02 c0       	push   0xc002b592
c0018e19:	e8 b6 a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018e1e:	59                   	pop    ecx
c0018e1f:	58                   	pop    eax
c0018e20:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e26:	66 c1 e8 06          	shr    ax,0x6
c0018e2a:	0f b6 c0             	movzx  eax,al
c0018e2d:	50                   	push   eax
c0018e2e:	68 a3 b5 02 c0       	push   0xc002b5a3
c0018e33:	e8 9c a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018e38:	c7 04 24 50 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba50
c0018e3f:	e8 90 a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018e44:	83 c4 10             	add    esp,0x10
c0018e47:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e4c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e53:	74 05                	je     c0018e5a <CPU::displayFeatures()+0x80>
c0018e55:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e5a:	52                   	push   edx
c0018e5b:	52                   	push   edx
c0018e5c:	50                   	push   eax
c0018e5d:	68 b4 b5 02 c0       	push   0xc002b5b4
c0018e62:	e8 6d a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018e67:	83 c4 10             	add    esp,0x10
c0018e6a:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e6f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018e76:	78 05                	js     c0018e7d <CPU::displayFeatures()+0xa3>
c0018e78:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e7d:	51                   	push   ecx
c0018e7e:	51                   	push   ecx
c0018e7f:	50                   	push   eax
c0018e80:	68 cb b5 02 c0       	push   0xc002b5cb
c0018e85:	e8 4a a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018e8a:	83 c4 10             	add    esp,0x10
c0018e8d:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e92:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018e99:	75 05                	jne    c0018ea0 <CPU::displayFeatures()+0xc6>
c0018e9b:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ea0:	52                   	push   edx
c0018ea1:	52                   	push   edx
c0018ea2:	50                   	push   eax
c0018ea3:	68 e2 b5 02 c0       	push   0xc002b5e2
c0018ea8:	e8 27 a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018ead:	83 c4 10             	add    esp,0x10
c0018eb0:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018eb5:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018ebc:	75 05                	jne    c0018ec3 <CPU::displayFeatures()+0xe9>
c0018ebe:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ec3:	51                   	push   ecx
c0018ec4:	51                   	push   ecx
c0018ec5:	50                   	push   eax
c0018ec6:	68 f9 b5 02 c0       	push   0xc002b5f9
c0018ecb:	e8 04 a0 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018ed0:	83 c4 10             	add    esp,0x10
c0018ed3:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ed8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018edf:	75 05                	jne    c0018ee6 <CPU::displayFeatures()+0x10c>
c0018ee1:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ee6:	52                   	push   edx
c0018ee7:	52                   	push   edx
c0018ee8:	50                   	push   eax
c0018ee9:	68 10 b6 02 c0       	push   0xc002b610
c0018eee:	e8 e1 9f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018ef3:	83 c4 10             	add    esp,0x10
c0018ef6:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018efb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f02:	75 05                	jne    c0018f09 <CPU::displayFeatures()+0x12f>
c0018f04:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f09:	51                   	push   ecx
c0018f0a:	51                   	push   ecx
c0018f0b:	50                   	push   eax
c0018f0c:	68 27 b6 02 c0       	push   0xc002b627
c0018f11:	e8 be 9f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f1e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f25:	75 05                	jne    c0018f2c <CPU::displayFeatures()+0x152>
c0018f27:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f2c:	52                   	push   edx
c0018f2d:	52                   	push   edx
c0018f2e:	50                   	push   eax
c0018f2f:	68 3e b6 02 c0       	push   0xc002b63e
c0018f34:	e8 9b 9f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f41:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f48:	75 05                	jne    c0018f4f <CPU::displayFeatures()+0x175>
c0018f4a:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f4f:	51                   	push   ecx
c0018f50:	51                   	push   ecx
c0018f51:	50                   	push   eax
c0018f52:	68 55 b6 02 c0       	push   0xc002b655
c0018f57:	e8 78 9f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018f5c:	83 c4 10             	add    esp,0x10
c0018f5f:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f64:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018f6b:	75 05                	jne    c0018f72 <CPU::displayFeatures()+0x198>
c0018f6d:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f72:	52                   	push   edx
c0018f73:	52                   	push   edx
c0018f74:	50                   	push   eax
c0018f75:	68 6c b6 02 c0       	push   0xc002b66c
c0018f7a:	e8 55 9f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f87:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018f8e:	75 05                	jne    c0018f95 <CPU::displayFeatures()+0x1bb>
c0018f90:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f95:	51                   	push   ecx
c0018f96:	51                   	push   ecx
c0018f97:	50                   	push   eax
c0018f98:	68 83 b6 02 c0       	push   0xc002b683
c0018f9d:	e8 32 9f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018fa2:	83 c4 10             	add    esp,0x10
c0018fa5:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018faa:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018fb1:	75 05                	jne    c0018fb8 <CPU::displayFeatures()+0x1de>
c0018fb3:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018fb8:	52                   	push   edx
c0018fb9:	52                   	push   edx
c0018fba:	50                   	push   eax
c0018fbb:	68 9a b6 02 c0       	push   0xc002b69a
c0018fc0:	e8 0f 9f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018fc5:	83 c4 10             	add    esp,0x10
c0018fc8:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fcd:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018fd4:	75 05                	jne    c0018fdb <CPU::displayFeatures()+0x201>
c0018fd6:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018fdb:	51                   	push   ecx
c0018fdc:	51                   	push   ecx
c0018fdd:	50                   	push   eax
c0018fde:	68 b1 b6 02 c0       	push   0xc002b6b1
c0018fe3:	e8 ec 9e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0018fe8:	83 c4 10             	add    esp,0x10
c0018feb:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ff0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018ff7:	75 05                	jne    c0018ffe <CPU::displayFeatures()+0x224>
c0018ff9:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ffe:	52                   	push   edx
c0018fff:	52                   	push   edx
c0019000:	50                   	push   eax
c0019001:	68 c8 b6 02 c0       	push   0xc002b6c8
c0019006:	e8 c9 9e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001900b:	83 c4 10             	add    esp,0x10
c001900e:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0019013:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001901a:	78 05                	js     c0019021 <CPU::displayFeatures()+0x247>
c001901c:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0019021:	51                   	push   ecx
c0019022:	51                   	push   ecx
c0019023:	50                   	push   eax
c0019024:	68 df b6 02 c0       	push   0xc002b6df
c0019029:	e8 a6 9e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0019036:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001903d:	75 05                	jne    c0019044 <CPU::displayFeatures()+0x26a>
c001903f:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0019044:	52                   	push   edx
c0019045:	52                   	push   edx
c0019046:	50                   	push   eax
c0019047:	68 f6 b6 02 c0       	push   0xc002b6f6
c001904c:	e8 83 9e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0019051:	83 c4 18             	add    esp,0x18
c0019054:	5b                   	pop    ebx
c0019055:	c3                   	ret    

c0019056 <CPU::detectFeatures()>:
c0019056:	55                   	push   ebp
c0019057:	57                   	push   edi
c0019058:	56                   	push   esi
c0019059:	53                   	push   ebx
c001905a:	83 ec 50             	sub    esp,0x50
c001905d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019061:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001906b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019072:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019078:	6a 0d                	push   0xd
c001907a:	6a 00                	push   0x0
c001907c:	57                   	push   edi
c001907d:	e8 f6 76 fe ff       	call   c0000778 <memset>
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001908a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019091:	0f 84 20 09 00 00    	je     c00199b7 <CPU::detectFeatures()+0x961>
c0019097:	83 ec 0c             	sub    esp,0xc
c001909a:	6a 10                	push   0x10
c001909c:	e8 f3 fb ff ff       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c00190a1:	83 e0 01             	and    eax,0x1
c00190a4:	8d 14 00             	lea    edx,[eax+eax*1]
c00190a7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190ad:	83 e0 fd             	and    eax,0xfffffffd
c00190b0:	09 d0                	or     eax,edx
c00190b2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190b8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00190bf:	e8 d0 fb ff ff       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c00190c4:	83 e0 01             	and    eax,0x1
c00190c7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190ce:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190d4:	83 e0 fb             	and    eax,0xfffffffb
c00190d7:	09 d0                	or     eax,edx
c00190d9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190df:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00190e6:	e8 a9 fb ff ff       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c00190eb:	83 e0 01             	and    eax,0x1
c00190ee:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190f5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190fb:	83 e0 f7             	and    eax,0xfffffff7
c00190fe:	09 d0                	or     eax,edx
c0019100:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019106:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001910d:	e8 82 fb ff ff       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c0019112:	83 e0 01             	and    eax,0x1
c0019115:	c1 e0 04             	shl    eax,0x4
c0019118:	88 c2                	mov    dl,al
c001911a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019120:	83 e0 ef             	and    eax,0xffffffef
c0019123:	09 d0                	or     eax,edx
c0019125:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001912b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019132:	e8 5d fb ff ff       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c0019137:	83 e0 01             	and    eax,0x1
c001913a:	c1 e0 05             	shl    eax,0x5
c001913d:	88 c2                	mov    dl,al
c001913f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019145:	83 e0 df             	and    eax,0xffffffdf
c0019148:	09 d0                	or     eax,edx
c001914a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019150:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019157:	e8 38 fb ff ff       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c001915c:	83 e0 01             	and    eax,0x1
c001915f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019162:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019168:	83 e0 fd             	and    eax,0xfffffffd
c001916b:	09 d0                	or     eax,edx
c001916d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019173:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001917a:	e8 15 fb ff ff       	call   c0018c94 <CPU::cpuidCheckEDX(unsigned int)>
c001917f:	83 e0 01             	and    eax,0x1
c0019182:	c1 e0 06             	shl    eax,0x6
c0019185:	88 c2                	mov    dl,al
c0019187:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001918d:	83 e0 bf             	and    eax,0xffffffbf
c0019190:	09 d0                	or     eax,edx
c0019192:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019198:	58                   	pop    eax
c0019199:	8d 74 24 28          	lea    esi,[esp+0x28]
c001919d:	56                   	push   esi
c001919e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191a2:	55                   	push   ebp
c00191a3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191a7:	50                   	push   eax
c00191a8:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191ac:	52                   	push   edx
c00191ad:	6a 00                	push   0x0
c00191af:	e8 5c fa ff ff       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191b4:	83 c4 1c             	add    esp,0x1c
c00191b7:	6a 04                	push   0x4
c00191b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191bd:	50                   	push   eax
c00191be:	57                   	push   edi
c00191bf:	e8 80 75 fe ff       	call   c0000744 <memcpy>
c00191c4:	83 c4 0c             	add    esp,0xc
c00191c7:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00191cd:	6a 04                	push   0x4
c00191cf:	56                   	push   esi
c00191d0:	50                   	push   eax
c00191d1:	e8 6e 75 fe ff       	call   c0000744 <memcpy>
c00191d6:	83 c4 0c             	add    esp,0xc
c00191d9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00191df:	6a 04                	push   0x4
c00191e1:	55                   	push   ebp
c00191e2:	50                   	push   eax
c00191e3:	e8 5c 75 fe ff       	call   c0000744 <memcpy>
c00191e8:	58                   	pop    eax
c00191e9:	5a                   	pop    edx
c00191ea:	68 0d b7 02 c0       	push   0xc002b70d
c00191ef:	57                   	push   edi
c00191f0:	e8 cb 76 fe ff       	call   c00008c0 <strcmp>
c00191f5:	83 c4 10             	add    esp,0x10
c00191f8:	85 c0                	test   eax,eax
c00191fa:	75 0f                	jne    c001920b <CPU::detectFeatures()+0x1b5>
c00191fc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019206:	e9 22 02 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c001920b:	50                   	push   eax
c001920c:	50                   	push   eax
c001920d:	68 1a b7 02 c0       	push   0xc002b71a
c0019212:	57                   	push   edi
c0019213:	e8 a8 76 fe ff       	call   c00008c0 <strcmp>
c0019218:	83 c4 10             	add    esp,0x10
c001921b:	85 c0                	test   eax,eax
c001921d:	74 dd                	je     c00191fc <CPU::detectFeatures()+0x1a6>
c001921f:	51                   	push   ecx
c0019220:	51                   	push   ecx
c0019221:	68 27 b7 02 c0       	push   0xc002b727
c0019226:	57                   	push   edi
c0019227:	e8 94 76 fe ff       	call   c00008c0 <strcmp>
c001922c:	83 c4 10             	add    esp,0x10
c001922f:	85 c0                	test   eax,eax
c0019231:	74 2a                	je     c001925d <CPU::detectFeatures()+0x207>
c0019233:	52                   	push   edx
c0019234:	52                   	push   edx
c0019235:	68 34 b7 02 c0       	push   0xc002b734
c001923a:	57                   	push   edi
c001923b:	e8 80 76 fe ff       	call   c00008c0 <strcmp>
c0019240:	83 c4 10             	add    esp,0x10
c0019243:	85 c0                	test   eax,eax
c0019245:	74 16                	je     c001925d <CPU::detectFeatures()+0x207>
c0019247:	50                   	push   eax
c0019248:	50                   	push   eax
c0019249:	68 41 b7 02 c0       	push   0xc002b741
c001924e:	57                   	push   edi
c001924f:	e8 6c 76 fe ff       	call   c00008c0 <strcmp>
c0019254:	83 c4 10             	add    esp,0x10
c0019257:	85 c0                	test   eax,eax
c0019259:	74 48                	je     c00192a3 <CPU::detectFeatures()+0x24d>
c001925b:	eb 0f                	jmp    c001926c <CPU::detectFeatures()+0x216>
c001925d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019267:	e9 c1 01 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c001926c:	50                   	push   eax
c001926d:	50                   	push   eax
c001926e:	68 4e b7 02 c0       	push   0xc002b74e
c0019273:	57                   	push   edi
c0019274:	e8 47 76 fe ff       	call   c00008c0 <strcmp>
c0019279:	83 c4 10             	add    esp,0x10
c001927c:	85 c0                	test   eax,eax
c001927e:	74 23                	je     c00192a3 <CPU::detectFeatures()+0x24d>
c0019280:	50                   	push   eax
c0019281:	50                   	push   eax
c0019282:	68 5b b7 02 c0       	push   0xc002b75b
c0019287:	57                   	push   edi
c0019288:	e8 33 76 fe ff       	call   c00008c0 <strcmp>
c001928d:	83 c4 10             	add    esp,0x10
c0019290:	85 c0                	test   eax,eax
c0019292:	75 1e                	jne    c00192b2 <CPU::detectFeatures()+0x25c>
c0019294:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001929e:	e9 8a 01 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c00192a3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192ad:	e9 7b 01 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c00192b2:	50                   	push   eax
c00192b3:	50                   	push   eax
c00192b4:	68 68 b7 02 c0       	push   0xc002b768
c00192b9:	57                   	push   edi
c00192ba:	e8 01 76 fe ff       	call   c00008c0 <strcmp>
c00192bf:	83 c4 10             	add    esp,0x10
c00192c2:	85 c0                	test   eax,eax
c00192c4:	75 0f                	jne    c00192d5 <CPU::detectFeatures()+0x27f>
c00192c6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00192d0:	e9 58 01 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c00192d5:	50                   	push   eax
c00192d6:	50                   	push   eax
c00192d7:	68 27 b7 02 c0       	push   0xc002b727
c00192dc:	57                   	push   edi
c00192dd:	e8 de 75 fe ff       	call   c00008c0 <strcmp>
c00192e2:	83 c4 10             	add    esp,0x10
c00192e5:	85 c0                	test   eax,eax
c00192e7:	75 0f                	jne    c00192f8 <CPU::detectFeatures()+0x2a2>
c00192e9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00192f3:	e9 35 01 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c00192f8:	50                   	push   eax
c00192f9:	50                   	push   eax
c00192fa:	68 75 b7 02 c0       	push   0xc002b775
c00192ff:	57                   	push   edi
c0019300:	e8 bb 75 fe ff       	call   c00008c0 <strcmp>
c0019305:	83 c4 10             	add    esp,0x10
c0019308:	85 c0                	test   eax,eax
c001930a:	75 0f                	jne    c001931b <CPU::detectFeatures()+0x2c5>
c001930c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019316:	e9 12 01 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c001931b:	51                   	push   ecx
c001931c:	51                   	push   ecx
c001931d:	68 82 b7 02 c0       	push   0xc002b782
c0019322:	57                   	push   edi
c0019323:	e8 98 75 fe ff       	call   c00008c0 <strcmp>
c0019328:	83 c4 10             	add    esp,0x10
c001932b:	85 c0                	test   eax,eax
c001932d:	75 0f                	jne    c001933e <CPU::detectFeatures()+0x2e8>
c001932f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019339:	e9 ef 00 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c001933e:	52                   	push   edx
c001933f:	52                   	push   edx
c0019340:	68 8f b7 02 c0       	push   0xc002b78f
c0019345:	57                   	push   edi
c0019346:	e8 75 75 fe ff       	call   c00008c0 <strcmp>
c001934b:	83 c4 10             	add    esp,0x10
c001934e:	85 c0                	test   eax,eax
c0019350:	75 0f                	jne    c0019361 <CPU::detectFeatures()+0x30b>
c0019352:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001935c:	e9 cc 00 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c0019361:	50                   	push   eax
c0019362:	50                   	push   eax
c0019363:	68 9c b7 02 c0       	push   0xc002b79c
c0019368:	57                   	push   edi
c0019369:	e8 52 75 fe ff       	call   c00008c0 <strcmp>
c001936e:	83 c4 10             	add    esp,0x10
c0019371:	85 c0                	test   eax,eax
c0019373:	75 0f                	jne    c0019384 <CPU::detectFeatures()+0x32e>
c0019375:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001937f:	e9 a9 00 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c0019384:	50                   	push   eax
c0019385:	50                   	push   eax
c0019386:	68 a9 b7 02 c0       	push   0xc002b7a9
c001938b:	57                   	push   edi
c001938c:	e8 2f 75 fe ff       	call   c00008c0 <strcmp>
c0019391:	83 c4 10             	add    esp,0x10
c0019394:	85 c0                	test   eax,eax
c0019396:	75 0f                	jne    c00193a7 <CPU::detectFeatures()+0x351>
c0019398:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00193a2:	e9 86 00 00 00       	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c00193a7:	50                   	push   eax
c00193a8:	50                   	push   eax
c00193a9:	68 b6 b7 02 c0       	push   0xc002b7b6
c00193ae:	57                   	push   edi
c00193af:	e8 0c 75 fe ff       	call   c00008c0 <strcmp>
c00193b4:	83 c4 10             	add    esp,0x10
c00193b7:	85 c0                	test   eax,eax
c00193b9:	75 0c                	jne    c00193c7 <CPU::detectFeatures()+0x371>
c00193bb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00193c5:	eb 66                	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c00193c7:	50                   	push   eax
c00193c8:	50                   	push   eax
c00193c9:	68 c3 b7 02 c0       	push   0xc002b7c3
c00193ce:	57                   	push   edi
c00193cf:	e8 ec 74 fe ff       	call   c00008c0 <strcmp>
c00193d4:	83 c4 10             	add    esp,0x10
c00193d7:	85 c0                	test   eax,eax
c00193d9:	75 0c                	jne    c00193e7 <CPU::detectFeatures()+0x391>
c00193db:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00193e5:	eb 46                	jmp    c001942d <CPU::detectFeatures()+0x3d7>
c00193e7:	50                   	push   eax
c00193e8:	50                   	push   eax
c00193e9:	68 d0 b7 02 c0       	push   0xc002b7d0
c00193ee:	57                   	push   edi
c00193ef:	e8 cc 74 fe ff       	call   c00008c0 <strcmp>
c00193f4:	83 c4 10             	add    esp,0x10
c00193f7:	85 c0                	test   eax,eax
c00193f9:	74 e0                	je     c00193db <CPU::detectFeatures()+0x385>
c00193fb:	50                   	push   eax
c00193fc:	50                   	push   eax
c00193fd:	68 dd b7 02 c0       	push   0xc002b7dd
c0019402:	57                   	push   edi
c0019403:	e8 b8 74 fe ff       	call   c00008c0 <strcmp>
c0019408:	83 c4 10             	add    esp,0x10
c001940b:	85 c0                	test   eax,eax
c001940d:	74 cc                	je     c00193db <CPU::detectFeatures()+0x385>
c001940f:	51                   	push   ecx
c0019410:	51                   	push   ecx
c0019411:	68 ea b7 02 c0       	push   0xc002b7ea
c0019416:	57                   	push   edi
c0019417:	e8 a4 74 fe ff       	call   c00008c0 <strcmp>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	85 c0                	test   eax,eax
c0019421:	74 b8                	je     c00193db <CPU::detectFeatures()+0x385>
c0019423:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001942d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019432:	0f 86 be 00 00 00    	jbe    c00194f6 <CPU::detectFeatures()+0x4a0>
c0019438:	83 ec 0c             	sub    esp,0xc
c001943b:	68 80 00 00 00       	push   0x80
c0019440:	e8 ab f8 ff ff       	call   c0018cf0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019445:	83 e0 01             	and    eax,0x1
c0019448:	c1 e0 06             	shl    eax,0x6
c001944b:	88 c2                	mov    dl,al
c001944d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019453:	83 e0 bf             	and    eax,0xffffffbf
c0019456:	09 d0                	or     eax,edx
c0019458:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001945e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019465:	e8 86 f8 ff ff       	call   c0018cf0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001946a:	83 e0 01             	and    eax,0x1
c001946d:	c1 e0 04             	shl    eax,0x4
c0019470:	88 c2                	mov    dl,al
c0019472:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019478:	83 e0 ef             	and    eax,0xffffffef
c001947b:	09 d0                	or     eax,edx
c001947d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019483:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001948a:	e8 61 f8 ff ff       	call   c0018cf0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001948f:	c1 e0 07             	shl    eax,0x7
c0019492:	88 c2                	mov    dl,al
c0019494:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001949a:	83 e0 7f             	and    eax,0x7f
c001949d:	09 d0                	or     eax,edx
c001949f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194a5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194ac:	e8 6d f8 ff ff       	call   c0018d1e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194b1:	83 e0 01             	and    eax,0x1
c00194b4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194bb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194c1:	83 e0 f7             	and    eax,0xfffffff7
c00194c4:	09 d0                	or     eax,edx
c00194c6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194cc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00194d3:	e8 46 f8 ff ff       	call   c0018d1e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194d8:	83 c4 10             	add    esp,0x10
c00194db:	83 e0 01             	and    eax,0x1
c00194de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00194e5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194eb:	83 e0 fb             	and    eax,0xfffffffb
c00194ee:	09 d0                	or     eax,edx
c00194f0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194f6:	83 ec 0c             	sub    esp,0xc
c00194f9:	56                   	push   esi
c00194fa:	55                   	push   ebp
c00194fb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00194ff:	57                   	push   edi
c0019500:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019504:	50                   	push   eax
c0019505:	6a 01                	push   0x1
c0019507:	e8 04 f7 ff ff       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001950c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019510:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019516:	88 ca                	mov    dl,cl
c0019518:	83 e0 f0             	and    eax,0xfffffff0
c001951b:	83 e2 0f             	and    edx,0xf
c001951e:	09 d0                	or     eax,edx
c0019520:	88 ca                	mov    dl,cl
c0019522:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019528:	c0 ea 04             	shr    dl,0x4
c001952b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001952f:	0f b6 c2             	movzx  eax,dl
c0019532:	83 c4 20             	add    esp,0x20
c0019535:	c1 e0 06             	shl    eax,0x6
c0019538:	89 c5                	mov    ebp,eax
c001953a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019540:	66 25 3f c0          	and    ax,0xc03f
c0019544:	09 e8                	or     eax,ebp
c0019546:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001954d:	89 c8                	mov    eax,ecx
c001954f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019555:	c1 e8 08             	shr    eax,0x8
c0019558:	83 e2 3f             	and    edx,0x3f
c001955b:	83 e0 0f             	and    eax,0xf
c001955e:	89 c5                	mov    ebp,eax
c0019560:	c1 e5 06             	shl    ebp,0x6
c0019563:	09 d5                	or     ebp,edx
c0019565:	89 ea                	mov    edx,ebp
c0019567:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001956d:	88 c2                	mov    dl,al
c001956f:	c0 ea 02             	shr    dl,0x2
c0019572:	89 d5                	mov    ebp,edx
c0019574:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001957a:	83 e2 c0             	and    edx,0xffffffc0
c001957d:	09 d5                	or     ebp,edx
c001957f:	89 ea                	mov    edx,ebp
c0019581:	89 cd                	mov    ebp,ecx
c0019583:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019589:	c1 ed 0c             	shr    ebp,0xc
c001958c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019592:	83 e5 03             	and    ebp,0x3
c0019595:	83 e2 cf             	and    edx,0xffffffcf
c0019598:	c1 e5 04             	shl    ebp,0x4
c001959b:	09 d5                	or     ebp,edx
c001959d:	3c 06                	cmp    al,0x6
c001959f:	89 ea                	mov    edx,ebp
c00195a1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00195a7:	74 04                	je     c00195ad <CPU::detectFeatures()+0x557>
c00195a9:	3c 0f                	cmp    al,0xf
c00195ab:	75 5c                	jne    c0019609 <CPU::detectFeatures()+0x5b3>
c00195ad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195b1:	89 cd                	mov    ebp,ecx
c00195b3:	c1 ed 10             	shr    ebp,0x10
c00195b6:	c1 e5 04             	shl    ebp,0x4
c00195b9:	09 ea                	or     edx,ebp
c00195bb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00195c1:	0f b6 d2             	movzx  edx,dl
c00195c4:	66 81 e5 3f c0       	and    bp,0xc03f
c00195c9:	c1 e2 06             	shl    edx,0x6
c00195cc:	09 ea                	or     edx,ebp
c00195ce:	3c 0f                	cmp    al,0xf
c00195d0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00195d7:	75 30                	jne    c0019609 <CPU::detectFeatures()+0x5b3>
c00195d9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00195df:	c1 e9 14             	shr    ecx,0x14
c00195e2:	83 e0 3f             	and    eax,0x3f
c00195e5:	83 c1 0f             	add    ecx,0xf
c00195e8:	88 ca                	mov    dl,cl
c00195ea:	c0 e9 02             	shr    cl,0x2
c00195ed:	c1 e2 06             	shl    edx,0x6
c00195f0:	09 d0                	or     eax,edx
c00195f2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00195f8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00195fe:	83 e0 c0             	and    eax,0xffffffc0
c0019601:	09 c1                	or     ecx,eax
c0019603:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019609:	83 ec 0c             	sub    esp,0xc
c001960c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019613:	56                   	push   esi
c0019614:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019618:	50                   	push   eax
c0019619:	57                   	push   edi
c001961a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001961e:	55                   	push   ebp
c001961f:	68 00 00 00 80       	push   0x80000000
c0019624:	e8 e7 f5 ff ff       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019629:	83 c4 20             	add    esp,0x20
c001962c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019634:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019638:	76 1e                	jbe    c0019658 <CPU::detectFeatures()+0x602>
c001963a:	83 ec 0c             	sub    esp,0xc
c001963d:	56                   	push   esi
c001963e:	50                   	push   eax
c001963f:	57                   	push   edi
c0019640:	55                   	push   ebp
c0019641:	68 01 00 00 80       	push   0x80000001
c0019646:	e8 c5 f5 ff ff       	call   c0018c10 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001964b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019655:	83 c4 20             	add    esp,0x20
c0019658:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001965e:	83 f8 01             	cmp    eax,0x1
c0019661:	75 6f                	jne    c00196d2 <CPU::detectFeatures()+0x67c>
c0019663:	51                   	push   ecx
c0019664:	51                   	push   ecx
c0019665:	68 f6 b7 02 c0       	push   0xc002b7f6
c001966a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001966e:	56                   	push   esi
c001966f:	e8 c0 71 fe ff       	call   c0000834 <strcpy>
c0019674:	5f                   	pop    edi
c0019675:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001967b:	5d                   	pop    ebp
c001967c:	66 c1 e8 06          	shr    ax,0x6
c0019680:	0f b6 c0             	movzx  eax,al
c0019683:	50                   	push   eax
c0019684:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001968a:	c1 e8 0e             	shr    eax,0xe
c001968d:	0f b6 c0             	movzx  eax,al
c0019690:	50                   	push   eax
c0019691:	e8 24 f2 ff ff       	call   c00188ba <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019696:	5a                   	pop    edx
c0019697:	59                   	pop    ecx
c0019698:	50                   	push   eax
c0019699:	56                   	push   esi
c001969a:	e8 d5 72 fe ff       	call   c0000974 <strcat>
c001969f:	5f                   	pop    edi
c00196a0:	5d                   	pop    ebp
c00196a1:	56                   	push   esi
c00196a2:	53                   	push   ebx
c00196a3:	e8 34 ae ff ff       	call   c00144dc <Device::setName(char const*)>
c00196a8:	58                   	pop    eax
c00196a9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196af:	5a                   	pop    edx
c00196b0:	68 fd b7 02 c0       	push   0xc002b7fd
c00196b5:	50                   	push   eax
c00196b6:	e8 05 72 fe ff       	call   c00008c0 <strcmp>
c00196bb:	83 c4 10             	add    esp,0x10
c00196be:	85 c0                	test   eax,eax
c00196c0:	0f 85 71 03 00 00    	jne    c0019a37 <CPU::detectFeatures()+0x9e1>
c00196c6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00196cd:	e9 65 03 00 00       	jmp    c0019a37 <CPU::detectFeatures()+0x9e1>
c00196d2:	83 f8 02             	cmp    eax,0x2
c00196d5:	0f 85 b5 00 00 00    	jne    c0019790 <CPU::detectFeatures()+0x73a>
c00196db:	57                   	push   edi
c00196dc:	57                   	push   edi
c00196dd:	68 0f b8 02 c0       	push   0xc002b80f
c00196e2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196e6:	56                   	push   esi
c00196e7:	e8 48 71 fe ff       	call   c0000834 <strcpy>
c00196ec:	5d                   	pop    ebp
c00196ed:	58                   	pop    eax
c00196ee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196f4:	66 c1 e8 06          	shr    ax,0x6
c00196f8:	0f b6 c0             	movzx  eax,al
c00196fb:	50                   	push   eax
c00196fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019702:	c1 e8 0e             	shr    eax,0xe
c0019705:	0f b6 c0             	movzx  eax,al
c0019708:	50                   	push   eax
c0019709:	e8 18 f0 ff ff       	call   c0018726 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001970e:	5a                   	pop    edx
c001970f:	59                   	pop    ecx
c0019710:	50                   	push   eax
c0019711:	56                   	push   esi
c0019712:	e8 5d 72 fe ff       	call   c0000974 <strcat>
c0019717:	5f                   	pop    edi
c0019718:	5d                   	pop    ebp
c0019719:	56                   	push   esi
c001971a:	53                   	push   ebx
c001971b:	e8 bc ad ff ff       	call   c00144dc <Device::setName(char const*)>
c0019720:	58                   	pop    eax
c0019721:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019727:	5a                   	pop    edx
c0019728:	68 14 b8 02 c0       	push   0xc002b814
c001972d:	50                   	push   eax
c001972e:	e8 8d 71 fe ff       	call   c00008c0 <strcmp>
c0019733:	83 c4 10             	add    esp,0x10
c0019736:	85 c0                	test   eax,eax
c0019738:	75 20                	jne    c001975a <CPU::detectFeatures()+0x704>
c001973a:	8b 15 e8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3e8
c0019740:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019746:	a8 01                	test   al,0x1
c0019748:	74 10                	je     c001975a <CPU::detectFeatures()+0x704>
c001974a:	83 e0 fe             	and    eax,0xfffffffe
c001974d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019753:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001975a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019760:	c1 e8 0e             	shr    eax,0xe
c0019763:	3c 05                	cmp    al,0x5
c0019765:	0f 85 cc 02 00 00    	jne    c0019a37 <CPU::detectFeatures()+0x9e1>
c001976b:	56                   	push   esi
c001976c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019772:	83 e0 0f             	and    eax,0xf
c0019775:	50                   	push   eax
c0019776:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001977c:	66 c1 e8 06          	shr    ax,0x6
c0019780:	0f b6 c0             	movzx  eax,al
c0019783:	50                   	push   eax
c0019784:	6a 05                	push   0x5
c0019786:	e8 11 f4 ff ff       	call   c0018b9c <CPU::AMD_K6_writeback(int, int, int)>
c001978b:	e9 1f 02 00 00       	jmp    c00199af <CPU::detectFeatures()+0x959>
c0019790:	8d 50 fd             	lea    edx,[eax-0x3]
c0019793:	83 fa 01             	cmp    edx,0x1
c0019796:	76 09                	jbe    c00197a1 <CPU::detectFeatures()+0x74b>
c0019798:	83 f8 06             	cmp    eax,0x6
c001979b:	0f 85 91 01 00 00    	jne    c0019932 <CPU::detectFeatures()+0x8dc>
c00197a1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197a7:	c1 ea 0e             	shr    edx,0xe
c00197aa:	80 fa 05             	cmp    dl,0x5
c00197ad:	75 7b                	jne    c001982a <CPU::detectFeatures()+0x7d4>
c00197af:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197b5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197ba:	66 81 fa 00 01       	cmp    dx,0x100
c00197bf:	75 0c                	jne    c00197cd <CPU::detectFeatures()+0x777>
c00197c1:	51                   	push   ecx
c00197c2:	51                   	push   ecx
c00197c3:	68 1b b8 02 c0       	push   0xc002b81b
c00197c8:	e9 dc 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c00197cd:	66 81 fa 00 02       	cmp    dx,0x200
c00197d2:	75 0c                	jne    c00197e0 <CPU::detectFeatures()+0x78a>
c00197d4:	52                   	push   edx
c00197d5:	52                   	push   edx
c00197d6:	68 2e b8 02 c0       	push   0xc002b82e
c00197db:	e9 c9 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c00197e0:	66 81 fa 40 02       	cmp    dx,0x240
c00197e5:	75 0c                	jne    c00197f3 <CPU::detectFeatures()+0x79d>
c00197e7:	50                   	push   eax
c00197e8:	50                   	push   eax
c00197e9:	68 40 b8 02 c0       	push   0xc002b840
c00197ee:	e9 b6 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c00197f3:	83 f8 06             	cmp    eax,0x6
c00197f6:	75 0c                	jne    c0019804 <CPU::detectFeatures()+0x7ae>
c00197f8:	50                   	push   eax
c00197f9:	50                   	push   eax
c00197fa:	68 52 b8 02 c0       	push   0xc002b852
c00197ff:	e9 a5 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019804:	83 f8 04             	cmp    eax,0x4
c0019807:	75 0c                	jne    c0019815 <CPU::detectFeatures()+0x7bf>
c0019809:	50                   	push   eax
c001980a:	50                   	push   eax
c001980b:	68 5e b8 02 c0       	push   0xc002b85e
c0019810:	e9 94 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019815:	83 f8 03             	cmp    eax,0x3
c0019818:	0f 85 19 02 00 00    	jne    c0019a37 <CPU::detectFeatures()+0x9e1>
c001981e:	50                   	push   eax
c001981f:	50                   	push   eax
c0019820:	68 66 b8 02 c0       	push   0xc002b866
c0019825:	e9 7f 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c001982a:	80 fa 06             	cmp    dl,0x6
c001982d:	0f 85 db 00 00 00    	jne    c001990e <CPU::detectFeatures()+0x8b8>
c0019833:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019839:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001983e:	66 81 fa 80 01       	cmp    dx,0x180
c0019843:	75 0c                	jne    c0019851 <CPU::detectFeatures()+0x7fb>
c0019845:	50                   	push   eax
c0019846:	50                   	push   eax
c0019847:	68 71 b8 02 c0       	push   0xc002b871
c001984c:	e9 58 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019851:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019857:	66 f7 c1 80 ff       	test   cx,0xff80
c001985c:	75 0c                	jne    c001986a <CPU::detectFeatures()+0x814>
c001985e:	50                   	push   eax
c001985f:	50                   	push   eax
c0019860:	68 81 b8 02 c0       	push   0xc002b881
c0019865:	e9 3f 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c001986a:	66 81 fa 40 02       	cmp    dx,0x240
c001986f:	75 0c                	jne    c001987d <CPU::detectFeatures()+0x827>
c0019871:	55                   	push   ebp
c0019872:	55                   	push   ebp
c0019873:	68 88 b8 02 c0       	push   0xc002b888
c0019878:	e9 2c 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c001987d:	66 81 fa 80 02       	cmp    dx,0x280
c0019882:	75 0c                	jne    c0019890 <CPU::detectFeatures()+0x83a>
c0019884:	57                   	push   edi
c0019885:	57                   	push   edi
c0019886:	68 91 b8 02 c0       	push   0xc002b891
c001988b:	e9 19 01 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019890:	66 81 fa 40 03       	cmp    dx,0x340
c0019895:	74 ed                	je     c0019884 <CPU::detectFeatures()+0x82e>
c0019897:	66 81 fa c0 03       	cmp    dx,0x3c0
c001989c:	75 0c                	jne    c00198aa <CPU::detectFeatures()+0x854>
c001989e:	56                   	push   esi
c001989f:	56                   	push   esi
c00198a0:	68 98 b8 02 c0       	push   0xc002b898
c00198a5:	e9 ff 00 00 00       	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c00198aa:	83 f8 06             	cmp    eax,0x6
c00198ad:	0f 84 45 ff ff ff    	je     c00197f8 <CPU::detectFeatures()+0x7a2>
c00198b3:	83 f8 04             	cmp    eax,0x4
c00198b6:	0f 84 4d ff ff ff    	je     c0019809 <CPU::detectFeatures()+0x7b3>
c00198bc:	83 f8 03             	cmp    eax,0x3
c00198bf:	0f 85 72 01 00 00    	jne    c0019a37 <CPU::detectFeatures()+0x9e1>
c00198c5:	51                   	push   ecx
c00198c6:	51                   	push   ecx
c00198c7:	68 a1 b8 02 c0       	push   0xc002b8a1
c00198cc:	53                   	push   ebx
c00198cd:	e8 0a ac ff ff       	call   c00144dc <Device::setName(char const*)>
c00198d2:	b1 c1                	mov    cl,0xc1
c00198d4:	88 c8                	mov    al,cl
c00198d6:	e6 22                	out    0x22,al
c00198d8:	e4 23                	in     al,0x23
c00198da:	88 c2                	mov    dl,al
c00198dc:	88 c8                	mov    al,cl
c00198de:	e6 22                	out    0x22,al
c00198e0:	88 d0                	mov    al,dl
c00198e2:	83 c8 10             	or     eax,0x10
c00198e5:	e6 23                	out    0x23,al
c00198e7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00198ee:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00198f1:	89 d0                	mov    eax,edx
c00198f3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00198f9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00198fd:	40                   	inc    eax
c00198fe:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019904:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019909:	e9 a1 00 00 00       	jmp    c00199af <CPU::detectFeatures()+0x959>
c001990e:	83 f8 06             	cmp    eax,0x6
c0019911:	0f 84 e1 fe ff ff    	je     c00197f8 <CPU::detectFeatures()+0x7a2>
c0019917:	83 f8 04             	cmp    eax,0x4
c001991a:	0f 84 e9 fe ff ff    	je     c0019809 <CPU::detectFeatures()+0x7b3>
c0019920:	83 f8 03             	cmp    eax,0x3
c0019923:	0f 85 0e 01 00 00    	jne    c0019a37 <CPU::detectFeatures()+0x9e1>
c0019929:	52                   	push   edx
c001992a:	52                   	push   edx
c001992b:	68 ac b8 02 c0       	push   0xc002b8ac
c0019930:	eb 77                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019932:	83 f8 07             	cmp    eax,0x7
c0019935:	75 09                	jne    c0019940 <CPU::detectFeatures()+0x8ea>
c0019937:	50                   	push   eax
c0019938:	50                   	push   eax
c0019939:	68 b6 b8 02 c0       	push   0xc002b8b6
c001993e:	eb 69                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019940:	83 f8 0a             	cmp    eax,0xa
c0019943:	75 09                	jne    c001994e <CPU::detectFeatures()+0x8f8>
c0019945:	50                   	push   eax
c0019946:	50                   	push   eax
c0019947:	68 c1 b8 02 c0       	push   0xc002b8c1
c001994c:	eb 5b                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c001994e:	83 f8 0b             	cmp    eax,0xb
c0019951:	75 09                	jne    c001995c <CPU::detectFeatures()+0x906>
c0019953:	50                   	push   eax
c0019954:	50                   	push   eax
c0019955:	68 c9 b8 02 c0       	push   0xc002b8c9
c001995a:	eb 4d                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c001995c:	83 f8 08             	cmp    eax,0x8
c001995f:	75 09                	jne    c001996a <CPU::detectFeatures()+0x914>
c0019961:	50                   	push   eax
c0019962:	50                   	push   eax
c0019963:	68 d2 b8 02 c0       	push   0xc002b8d2
c0019968:	eb 3f                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c001996a:	83 f8 09             	cmp    eax,0x9
c001996d:	75 09                	jne    c0019978 <CPU::detectFeatures()+0x922>
c001996f:	50                   	push   eax
c0019970:	50                   	push   eax
c0019971:	68 da b8 02 c0       	push   0xc002b8da
c0019976:	eb 31                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019978:	83 f8 05             	cmp    eax,0x5
c001997b:	75 09                	jne    c0019986 <CPU::detectFeatures()+0x930>
c001997d:	50                   	push   eax
c001997e:	50                   	push   eax
c001997f:	68 e2 b8 02 c0       	push   0xc002b8e2
c0019984:	eb 23                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019986:	83 f8 0c             	cmp    eax,0xc
c0019989:	75 09                	jne    c0019994 <CPU::detectFeatures()+0x93e>
c001998b:	55                   	push   ebp
c001998c:	55                   	push   ebp
c001998d:	68 f0 b8 02 c0       	push   0xc002b8f0
c0019992:	eb 15                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c0019994:	83 f8 0d             	cmp    eax,0xd
c0019997:	75 09                	jne    c00199a2 <CPU::detectFeatures()+0x94c>
c0019999:	57                   	push   edi
c001999a:	57                   	push   edi
c001999b:	68 fb b8 02 c0       	push   0xc002b8fb
c00199a0:	eb 07                	jmp    c00199a9 <CPU::detectFeatures()+0x953>
c00199a2:	56                   	push   esi
c00199a3:	56                   	push   esi
c00199a4:	68 0f b9 02 c0       	push   0xc002b90f
c00199a9:	53                   	push   ebx
c00199aa:	e8 2d ab ff ff       	call   c00144dc <Device::setName(char const*)>
c00199af:	83 c4 10             	add    esp,0x10
c00199b2:	e9 80 00 00 00       	jmp    c0019a37 <CPU::detectFeatures()+0x9e1>
c00199b7:	51                   	push   ecx
c00199b8:	51                   	push   ecx
c00199b9:	68 5b b7 02 c0       	push   0xc002b75b
c00199be:	57                   	push   edi
c00199bf:	e8 70 6e fe ff       	call   c0000834 <strcpy>
c00199c4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00199ce:	e8 db 68 fe ff       	call   c00002ae <is486>
c00199d3:	83 c4 10             	add    esp,0x10
c00199d6:	85 c0                	test   eax,eax
c00199d8:	74 2b                	je     c0019a05 <CPU::detectFeatures()+0x9af>
c00199da:	52                   	push   edx
c00199db:	52                   	push   edx
c00199dc:	68 1b b9 02 c0       	push   0xc002b91b
c00199e1:	53                   	push   ebx
c00199e2:	e8 f5 aa ff ff       	call   c00144dc <Device::setName(char const*)>
c00199e7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00199ee:	0f 20 c0             	mov    eax,cr0
c00199f1:	83 e0 14             	and    eax,0x14
c00199f4:	83 c4 10             	add    esp,0x10
c00199f7:	83 f8 04             	cmp    eax,0x4
c00199fa:	75 1f                	jne    c0019a1b <CPU::detectFeatures()+0x9c5>
c00199fc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a03:	eb 32                	jmp    c0019a37 <CPU::detectFeatures()+0x9e1>
c0019a05:	50                   	push   eax
c0019a06:	50                   	push   eax
c0019a07:	68 26 b9 02 c0       	push   0xc002b926
c0019a0c:	53                   	push   ebx
c0019a0d:	e8 ca aa ff ff       	call   c00144dc <Device::setName(char const*)>
c0019a12:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a19:	eb d3                	jmp    c00199ee <CPU::detectFeatures()+0x998>
c0019a1b:	e8 69 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a20:	83 e0 01             	and    eax,0x1
c0019a23:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a26:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a2c:	83 e0 fd             	and    eax,0xfffffffd
c0019a2f:	09 d0                	or     eax,edx
c0019a31:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a37:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a3e:	83 c4 4c             	add    esp,0x4c
c0019a41:	5b                   	pop    ebx
c0019a42:	5e                   	pop    esi
c0019a43:	5f                   	pop    edi
c0019a44:	5d                   	pop    ebp
c0019a45:	c3                   	ret    

c0019a46 <CPU::setupSMEP()>:
c0019a46:	0f 20 e0             	mov    eax,cr4
c0019a49:	0d 00 00 10 00       	or     eax,0x100000
c0019a4e:	0f 22 e0             	mov    cr4,eax
c0019a51:	c3                   	ret    

c0019a52 <CPU::setupUMIP()>:
c0019a52:	0f 20 e0             	mov    eax,cr4
c0019a55:	80 cc 08             	or     ah,0x8
c0019a58:	0f 22 e0             	mov    cr4,eax
c0019a5b:	c3                   	ret    

c0019a5c <CPU::setupTSC()>:
c0019a5c:	0f 20 e0             	mov    eax,cr4
c0019a5f:	83 c8 04             	or     eax,0x4
c0019a62:	0f 22 e0             	mov    cr4,eax
c0019a65:	c3                   	ret    

c0019a66 <CPU::setupLargePages()>:
c0019a66:	0f 20 e0             	mov    eax,cr4
c0019a69:	83 c8 10             	or     eax,0x10
c0019a6c:	0f 22 e0             	mov    cr4,eax
c0019a6f:	c3                   	ret    

c0019a70 <CPU::setupPAT()>:
c0019a70:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0019a75:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a7c:	74 2c                	je     c0019aaa <CPU::setupPAT()+0x3a>
c0019a7e:	53                   	push   ebx
c0019a7f:	83 ec 10             	sub    esp,0x10
c0019a82:	68 77 02 00 00       	push   0x277
c0019a87:	50                   	push   eax
c0019a88:	e8 5b 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019a8d:	83 e2 f8             	and    edx,0xfffffff8
c0019a90:	83 ca 01             	or     edx,0x1
c0019a93:	52                   	push   edx
c0019a94:	50                   	push   eax
c0019a95:	68 77 02 00 00       	push   0x277
c0019a9a:	ff 35 e8 e3 02 c0    	push   DWORD PTR ds:0xc002e3e8
c0019aa0:	e8 6f 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019aa5:	83 c4 28             	add    esp,0x28
c0019aa8:	5b                   	pop    ebx
c0019aa9:	c3                   	ret    
c0019aaa:	c3                   	ret    
c0019aab:	90                   	nop

c0019aac <CPU::setupMTRR()>:
c0019aac:	c3                   	ret    
c0019aad:	90                   	nop

c0019aae <CPU::setupGlobalPages()>:
c0019aae:	0f 20 e0             	mov    eax,cr4
c0019ab1:	0c 80                	or     al,0x80
c0019ab3:	0f 22 e0             	mov    cr4,eax
c0019ab6:	c3                   	ret    
c0019ab7:	90                   	nop

c0019ab8 <CPU::allowUsermodeDataAccess()>:
c0019ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019abc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ac3:	74 03                	je     c0019ac8 <CPU::allowUsermodeDataAccess()+0x10>
c0019ac5:	0f 01 cb             	stac   
c0019ac8:	c3                   	ret    
c0019ac9:	90                   	nop

c0019aca <CPU::prohibitUsermodeDataAccess()>:
c0019aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ace:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ad5:	74 03                	je     c0019ada <CPU::prohibitUsermodeDataAccess()+0x10>
c0019ad7:	0f 01 ca             	clac   
c0019ada:	c3                   	ret    
c0019adb:	90                   	nop

c0019adc <CPU::setupSMAP()>:
c0019adc:	0f 20 e0             	mov    eax,cr4
c0019adf:	0d 00 00 20 00       	or     eax,0x200000
c0019ae4:	0f 22 e0             	mov    cr4,eax
c0019ae7:	eb e1                	jmp    c0019aca <CPU::prohibitUsermodeDataAccess()>
c0019ae9:	90                   	nop

c0019aea <CPU::setupFeatures()>:
c0019aea:	83 ec 0c             	sub    esp,0xc
c0019aed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019af1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019af8:	74 07                	je     c0019b01 <CPU::setupFeatures()+0x17>
c0019afa:	52                   	push   edx
c0019afb:	e8 46 ff ff ff       	call   c0019a46 <CPU::setupSMEP()>
c0019b00:	58                   	pop    eax
c0019b01:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b08:	74 07                	je     c0019b11 <CPU::setupFeatures()+0x27>
c0019b0a:	52                   	push   edx
c0019b0b:	e8 cc ff ff ff       	call   c0019adc <CPU::setupSMAP()>
c0019b10:	58                   	pop    eax
c0019b11:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b18:	74 07                	je     c0019b21 <CPU::setupFeatures()+0x37>
c0019b1a:	52                   	push   edx
c0019b1b:	e8 32 ff ff ff       	call   c0019a52 <CPU::setupUMIP()>
c0019b20:	58                   	pop    eax
c0019b21:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b28:	74 07                	je     c0019b31 <CPU::setupFeatures()+0x47>
c0019b2a:	52                   	push   edx
c0019b2b:	e8 2c ff ff ff       	call   c0019a5c <CPU::setupTSC()>
c0019b30:	58                   	pop    eax
c0019b31:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b38:	74 07                	je     c0019b41 <CPU::setupFeatures()+0x57>
c0019b3a:	52                   	push   edx
c0019b3b:	e8 26 ff ff ff       	call   c0019a66 <CPU::setupLargePages()>
c0019b40:	59                   	pop    ecx
c0019b41:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b48:	74 07                	je     c0019b51 <CPU::setupFeatures()+0x67>
c0019b4a:	52                   	push   edx
c0019b4b:	e8 5e ff ff ff       	call   c0019aae <CPU::setupGlobalPages()>
c0019b50:	58                   	pop    eax
c0019b51:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b58:	74 0c                	je     c0019b66 <CPU::setupFeatures()+0x7c>
c0019b5a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b5e:	83 c4 0c             	add    esp,0xc
c0019b61:	e9 0a ff ff ff       	jmp    c0019a70 <CPU::setupPAT()>
c0019b66:	83 c4 0c             	add    esp,0xc
c0019b69:	c3                   	ret    

c0019b6a <CPU::open(int, int, void*)>:
c0019b6a:	57                   	push   edi
c0019b6b:	56                   	push   esi
c0019b6c:	53                   	push   ebx
c0019b6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b75:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019b7b:	83 ec 0c             	sub    esp,0xc
c0019b7e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019b84:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019b8a:	50                   	push   eax
c0019b8b:	e8 44 55 ff ff       	call   c000f0d4 <GDT::setup()>
c0019b90:	83 c4 0c             	add    esp,0xc
c0019b93:	6a 00                	push   0x0
c0019b95:	68 ef be ad de       	push   0xdeadbeef
c0019b9a:	57                   	push   edi
c0019b9b:	e8 70 79 ff ff       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c0019ba0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ba3:	e8 48 79 ff ff       	call   c00114f0 <TSS::flush()>
c0019ba8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019bae:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bb1:	e8 7a 57 ff ff       	call   c000f330 <IDT::setup()>
c0019bb6:	b8 00 04 00 00       	mov    eax,0x400
c0019bbb:	0f 23 f8             	mov    db7,eax
c0019bbe:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019bc8:	e8 15 63 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019bcd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019bd3:	89 30                	mov    DWORD PTR [eax],esi
c0019bd5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019bdb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019bde:	58                   	pop    eax
c0019bdf:	5a                   	pop    edx
c0019be0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019be6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019bea:	e8 5f 8a ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0019bef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bf2:	e8 5f f4 ff ff       	call   c0019056 <CPU::detectFeatures()>
c0019bf7:	e8 cf bc ff ff       	call   c00158cb <setupInterruptController()>
c0019bfc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c02:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c0019c07:	83 e0 10             	and    eax,0x10
c0019c0a:	83 f8 01             	cmp    eax,0x1
c0019c0d:	19 c0                	sbb    eax,eax
c0019c0f:	83 e0 46             	and    eax,0x46
c0019c12:	83 c0 1e             	add    eax,0x1e
c0019c15:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c18:	e8 bb d1 ff ff       	call   c0016dd8 <setupTimer(int)>
c0019c1d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c26:	e8 bf fe ff ff       	call   c0019aea <CPU::setupFeatures()>
c0019c2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c2e:	e8 a7 f1 ff ff       	call   c0018dda <CPU::displayFeatures()>
c0019c33:	83 c4 10             	add    esp,0x10
c0019c36:	31 c0                	xor    eax,eax
c0019c38:	5b                   	pop    ebx
c0019c39:	5e                   	pop    esi
c0019c3a:	5f                   	pop    edi
c0019c3b:	c3                   	ret    

c0019c3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c3c:	57                   	push   edi
c0019c3d:	56                   	push   esi
c0019c3e:	53                   	push   ebx
c0019c3f:	51                   	push   ecx
c0019c40:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c44:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c47:	0f 02 c0             	lar    eax,ax
c0019c4a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c4d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c51:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c54:	88 ca                	mov    dl,cl
c0019c56:	c0 ea 06             	shr    dl,0x6
c0019c59:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c5d:	89 ca                	mov    edx,ecx
c0019c5f:	66 c1 ea 03          	shr    dx,0x3
c0019c63:	83 e2 07             	and    edx,0x7
c0019c66:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019c6b:	88 17                	mov    BYTE PTR [edi],dl
c0019c6d:	0f 84 a6 01 00 00    	je     c0019e19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019c73:	83 e1 07             	and    ecx,0x7
c0019c76:	80 f9 04             	cmp    cl,0x4
c0019c79:	0f 84 98 00 00 00    	je     c0019d17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019c7f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c84:	0f 95 c0             	setne  al
c0019c87:	80 f9 05             	cmp    cl,0x5
c0019c8a:	0f 95 c2             	setne  dl
c0019c8d:	08 c2                	or     dl,al
c0019c8f:	74 79                	je     c0019d0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019c91:	84 c9                	test   cl,cl
c0019c93:	75 05                	jne    c0019c9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019c95:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c98:	eb 3c                	jmp    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c9a:	80 f9 01             	cmp    cl,0x1
c0019c9d:	75 05                	jne    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019c9f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ca2:	eb 32                	jmp    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ca4:	80 f9 02             	cmp    cl,0x2
c0019ca7:	75 05                	jne    c0019cae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ca9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cac:	eb 28                	jmp    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cae:	31 c0                	xor    eax,eax
c0019cb0:	80 f9 03             	cmp    cl,0x3
c0019cb3:	75 05                	jne    c0019cba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019cb5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cb8:	eb 1c                	jmp    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cba:	80 f9 05             	cmp    cl,0x5
c0019cbd:	75 05                	jne    c0019cc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019cbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cc2:	eb 12                	jmp    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cc4:	80 f9 06             	cmp    cl,0x6
c0019cc7:	75 05                	jne    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019cc9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ccc:	eb 08                	jmp    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cce:	80 f9 07             	cmp    cl,0x7
c0019cd1:	75 03                	jne    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cd3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019cd6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cdb:	75 10                	jne    c0019ced <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019cdd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ce1:	b9 03 00 00 00       	mov    ecx,0x3
c0019ce6:	01 d0                	add    eax,edx
c0019ce8:	e9 37 01 00 00       	jmp    c0019e24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ced:	b9 02 00 00 00       	mov    ecx,0x2
c0019cf2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019cf7:	0f 85 27 01 00 00    	jne    c0019e24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cfd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d00:	b9 06 00 00 00       	mov    ecx,0x6
c0019d05:	e9 1a 01 00 00       	jmp    c0019e24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d0a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d0d:	b9 06 00 00 00       	mov    ecx,0x6
c0019d12:	e9 0f 01 00 00       	jmp    c0019e26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d17:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d1a:	88 ca                	mov    dl,cl
c0019d1c:	c0 ea 06             	shr    dl,0x6
c0019d1f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d23:	89 ca                	mov    edx,ecx
c0019d25:	66 c1 ea 03          	shr    dx,0x3
c0019d29:	83 e2 07             	and    edx,0x7
c0019d2c:	80 e1 07             	and    cl,0x7
c0019d2f:	75 05                	jne    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d31:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d34:	eb 4c                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d36:	80 f9 01             	cmp    cl,0x1
c0019d39:	75 05                	jne    c0019d40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d3b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d3e:	eb 42                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d40:	80 f9 02             	cmp    cl,0x2
c0019d43:	75 05                	jne    c0019d4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d45:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d48:	eb 38                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d4a:	80 f9 03             	cmp    cl,0x3
c0019d4d:	75 05                	jne    c0019d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d4f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d52:	eb 2e                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d54:	80 f9 04             	cmp    cl,0x4
c0019d57:	75 12                	jne    c0019d6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d59:	f6 c4 60             	test   ah,0x60
c0019d5c:	75 08                	jne    c0019d66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d5e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d61:	8d 78 14             	lea    edi,[eax+0x14]
c0019d64:	eb 1c                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d66:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019d69:	eb 17                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d6b:	80 f9 05             	cmp    cl,0x5
c0019d6e:	75 05                	jne    c0019d75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019d70:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019d73:	eb 0d                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d75:	80 f9 06             	cmp    cl,0x6
c0019d78:	75 05                	jne    c0019d7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019d7a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019d7d:	eb 03                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d7f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019d82:	84 d2                	test   dl,dl
c0019d84:	75 05                	jne    c0019d8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019d86:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d89:	eb 3c                	jmp    c0019dc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d8b:	80 fa 01             	cmp    dl,0x1
c0019d8e:	75 05                	jne    c0019d95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019d90:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d93:	eb 32                	jmp    c0019dc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d95:	80 fa 02             	cmp    dl,0x2
c0019d98:	75 05                	jne    c0019d9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019d9a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d9d:	eb 28                	jmp    c0019dc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d9f:	80 fa 03             	cmp    dl,0x3
c0019da2:	75 05                	jne    c0019da9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019da4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019da7:	eb 1e                	jmp    c0019dc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019da9:	31 c0                	xor    eax,eax
c0019dab:	80 fa 04             	cmp    dl,0x4
c0019dae:	74 17                	je     c0019dc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019db0:	80 fa 05             	cmp    dl,0x5
c0019db3:	75 05                	jne    c0019dba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019db5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019db8:	eb 0d                	jmp    c0019dc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dba:	80 fa 06             	cmp    dl,0x6
c0019dbd:	75 05                	jne    c0019dc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019dbf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dc2:	eb 03                	jmp    c0019dc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dc4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dc7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019dcc:	0f 94 c2             	sete   dl
c0019dcf:	80 f9 05             	cmp    cl,0x5
c0019dd2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019dd6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ddb:	d3 e0                	shl    eax,cl
c0019ddd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019de1:	74 0a                	je     c0019ded <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019de3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019de6:	b9 07 00 00 00       	mov    ecx,0x7
c0019deb:	eb 37                	jmp    c0019e24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ded:	01 f8                	add    eax,edi
c0019def:	b9 03 00 00 00       	mov    ecx,0x3
c0019df4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019df9:	74 2b                	je     c0019e26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019dfb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e00:	75 0d                	jne    c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e02:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e06:	01 c8                	add    eax,ecx
c0019e08:	b9 04 00 00 00       	mov    ecx,0x4
c0019e0d:	eb 17                	jmp    c0019e26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e0f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e12:	b9 07 00 00 00       	mov    ecx,0x7
c0019e17:	eb 0d                	jmp    c0019e26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e19:	b9 02 00 00 00       	mov    ecx,0x2
c0019e1e:	b2 01                	mov    dl,0x1
c0019e20:	31 c0                	xor    eax,eax
c0019e22:	eb 02                	jmp    c0019e26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e24:	31 d2                	xor    edx,edx
c0019e26:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e2a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e2c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e30:	88 11                	mov    BYTE PTR [ecx],dl
c0019e32:	5a                   	pop    edx
c0019e33:	5b                   	pop    ebx
c0019e34:	5e                   	pop    esi
c0019e35:	5f                   	pop    edi
c0019e36:	c3                   	ret    

c0019e37 <Krnl::smpEntry()>:
c0019e37:	eb fe                	jmp    c0019e37 <Krnl::smpEntry()>

c0019e39 <Krnl::startCPU(int)>:
c0019e39:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0019e3e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e45:	0f 84 36 01 00 00    	je     c0019f81 <Krnl::startCPU(int)+0x148>
c0019e4b:	53                   	push   ebx
c0019e4c:	83 ec 08             	sub    esp,0x8
c0019e4f:	e8 46 3f 00 00       	call   c001dd9a <lockScheduler()>
c0019e54:	52                   	push   edx
c0019e55:	52                   	push   edx
c0019e56:	6a 1b                	push   0x1b
c0019e58:	ff 35 e8 e3 02 c0    	push   DWORD PTR ds:0xc002e3e8
c0019e5e:	e8 85 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019e63:	59                   	pop    ecx
c0019e64:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e69:	89 c3                	mov    ebx,eax
c0019e6b:	58                   	pop    eax
c0019e6c:	53                   	push   ebx
c0019e6d:	68 60 b9 02 c0       	push   0xc002b960
c0019e72:	e8 5d 90 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0019e77:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e85:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e8f:	c1 e0 18             	shl    eax,0x18
c0019e92:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019e98:	83 c4 10             	add    esp,0x10
c0019e9b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ea1:	09 c2                	or     edx,eax
c0019ea3:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ea9:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019eaf:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019eb5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ebb:	80 cd c5             	or     ch,0xc5
c0019ebe:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ec4:	f3 90                	pause  
c0019ec6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ec8:	0f ba e1 0c          	bt     ecx,0xc
c0019ecc:	72 f6                	jb     c0019ec4 <Krnl::startCPU(int)+0x8b>
c0019ece:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ed4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019eda:	09 c1                	or     ecx,eax
c0019edc:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ee2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ee8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019eee:	80 cd 85             	or     ch,0x85
c0019ef1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ef7:	f3 90                	pause  
c0019ef9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019efb:	0f ba e1 0c          	bt     ecx,0xc
c0019eff:	72 f6                	jb     c0019ef7 <Krnl::startCPU(int)+0xbe>
c0019f01:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f0b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f11:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f17:	09 c1                	or     ecx,eax
c0019f19:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f1f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f25:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f2b:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f31:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f37:	f3 90                	pause  
c0019f39:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f3b:	0f ba e1 0c          	bt     ecx,0xc
c0019f3f:	72 f6                	jb     c0019f37 <Krnl::startCPU(int)+0xfe>
c0019f41:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f4b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f51:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f57:	09 c8                	or     eax,ecx
c0019f59:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f5f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019f65:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019f6a:	0d 02 06 00 00       	or     eax,0x602
c0019f6f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019f75:	f3 90                	pause  
c0019f77:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f79:	0f ba e0 0c          	bt     eax,0xc
c0019f7d:	72 f6                	jb     c0019f75 <Krnl::startCPU(int)+0x13c>
c0019f7f:	eb fe                	jmp    c0019f7f <Krnl::startCPU(int)+0x146>
c0019f81:	c3                   	ret    

c0019f82 <Krnl::startCPUs()>:
c0019f82:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0019f87:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019f8d:	88 c2                	mov    dl,al
c0019f8f:	83 e2 0a             	and    edx,0xa
c0019f92:	80 fa 0a             	cmp    dl,0xa
c0019f95:	75 09                	jne    c0019fa0 <Krnl::startCPUs()+0x1e>
c0019f97:	a8 01                	test   al,0x1
c0019f99:	74 05                	je     c0019fa0 <Krnl::startCPUs()+0x1e>
c0019f9b:	e9 fb 61 fe ff       	jmp    c000019b <prepareTramp>
c0019fa0:	c3                   	ret    
c0019fa1:	90                   	nop

c0019fa2 <EnvVarContainer::getEnv(char const*)>:
c0019fa2:	57                   	push   edi
c0019fa3:	56                   	push   esi
c0019fa4:	53                   	push   ebx
c0019fa5:	31 db                	xor    ebx,ebx
c0019fa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fab:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019fad:	7e 2b                	jle    c0019fda <EnvVarContainer::getEnv(char const*)+0x38>
c0019faf:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019fb6:	50                   	push   eax
c0019fb7:	50                   	push   eax
c0019fb8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fbb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019fbe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019fc2:	e8 f9 68 fe ff       	call   c00008c0 <strcmp>
c0019fc7:	83 c4 10             	add    esp,0x10
c0019fca:	85 c0                	test   eax,eax
c0019fcc:	75 09                	jne    c0019fd7 <EnvVarContainer::getEnv(char const*)+0x35>
c0019fce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fd1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019fd5:	eb 05                	jmp    c0019fdc <EnvVarContainer::getEnv(char const*)+0x3a>
c0019fd7:	43                   	inc    ebx
c0019fd8:	eb d1                	jmp    c0019fab <EnvVarContainer::getEnv(char const*)+0x9>
c0019fda:	31 c0                	xor    eax,eax
c0019fdc:	5b                   	pop    ebx
c0019fdd:	5e                   	pop    esi
c0019fde:	5f                   	pop    edi
c0019fdf:	c3                   	ret    

c0019fe0 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019fe0:	57                   	push   edi
c0019fe1:	56                   	push   esi
c0019fe2:	53                   	push   ebx
c0019fe3:	83 ec 1c             	sub    esp,0x1c
c0019fe6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019fea:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019fee:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ff2:	57                   	push   edi
c0019ff3:	e8 9c 67 fe ff       	call   c0000794 <strlen>
c0019ff8:	40                   	inc    eax
c0019ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ffc:	e8 3f 58 ff ff       	call   c000f840 <malloc>
c001a001:	89 34 24             	mov    DWORD PTR [esp],esi
c001a004:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a008:	e8 87 67 fe ff       	call   c0000794 <strlen>
c001a00d:	40                   	inc    eax
c001a00e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a011:	e8 2a 58 ff ff       	call   c000f840 <malloc>
c001a016:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a01d:	e8 72 67 fe ff       	call   c0000794 <strlen>
c001a022:	83 c4 0c             	add    esp,0xc
c001a025:	40                   	inc    eax
c001a026:	50                   	push   eax
c001a027:	6a 00                	push   0x0
c001a029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a02d:	e8 46 67 fe ff       	call   c0000778 <memset>
c001a032:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a035:	e8 5a 67 fe ff       	call   c0000794 <strlen>
c001a03a:	83 c4 0c             	add    esp,0xc
c001a03d:	40                   	inc    eax
c001a03e:	50                   	push   eax
c001a03f:	57                   	push   edi
c001a040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a044:	e8 fb 66 fe ff       	call   c0000744 <memcpy>
c001a049:	89 34 24             	mov    DWORD PTR [esp],esi
c001a04c:	e8 43 67 fe ff       	call   c0000794 <strlen>
c001a051:	83 c4 0c             	add    esp,0xc
c001a054:	40                   	inc    eax
c001a055:	50                   	push   eax
c001a056:	6a 00                	push   0x0
c001a058:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a05c:	e8 17 67 fe ff       	call   c0000778 <memset>
c001a061:	89 34 24             	mov    DWORD PTR [esp],esi
c001a064:	e8 2b 67 fe ff       	call   c0000794 <strlen>
c001a069:	83 c4 0c             	add    esp,0xc
c001a06c:	40                   	inc    eax
c001a06d:	50                   	push   eax
c001a06e:	56                   	push   esi
c001a06f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a073:	e8 cc 66 fe ff       	call   c0000744 <memcpy>
c001a078:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a07a:	40                   	inc    eax
c001a07b:	89 03                	mov    DWORD PTR [ebx],eax
c001a07d:	c1 e0 03             	shl    eax,0x3
c001a080:	5a                   	pop    edx
c001a081:	59                   	pop    ecx
c001a082:	50                   	push   eax
c001a083:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a086:	e8 a1 57 ff ff       	call   c000f82c <realloc>
c001a08b:	83 c4 0c             	add    esp,0xc
c001a08e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a091:	6a 08                	push   0x8
c001a093:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a097:	52                   	push   edx
c001a098:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a09a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a09e:	50                   	push   eax
c001a09f:	e8 a0 66 fe ff       	call   c0000744 <memcpy>
c001a0a4:	83 c4 20             	add    esp,0x20
c001a0a7:	5b                   	pop    ebx
c001a0a8:	5e                   	pop    esi
c001a0a9:	5f                   	pop    edi
c001a0aa:	c3                   	ret    
c001a0ab:	90                   	nop

c001a0ac <EnvVarContainer::deleteEnv(char const*)>:
c001a0ac:	c3                   	ret    
c001a0ad:	90                   	nop

c001a0ae <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0ae:	55                   	push   ebp
c001a0af:	57                   	push   edi
c001a0b0:	56                   	push   esi
c001a0b1:	53                   	push   ebx
c001a0b2:	81 ec 38 01 00 00    	sub    esp,0x138
c001a0b8:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a0bf:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a0c6:	68 14 01 00 00       	push   0x114
c001a0cb:	e8 70 57 ff ff       	call   c000f840 <malloc>
c001a0d0:	83 c4 0c             	add    esp,0xc
c001a0d3:	89 c7                	mov    edi,eax
c001a0d5:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a0d8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a0df:	50                   	push   eax
c001a0e0:	e8 47 93 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001a0e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0e8:	e8 11 96 ff ff       	call   c00136fe <File::exists()>
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	84 c0                	test   al,al
c001a0f2:	75 31                	jne    c001a125 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a0f4:	51                   	push   ecx
c001a0f5:	51                   	push   ecx
c001a0f6:	6a 12                	push   0x12
c001a0f8:	57                   	push   edi
c001a0f9:	e8 92 93 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001a0fe:	8b 07                	mov    eax,DWORD PTR [edi]
c001a100:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a103:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a106:	e8 89 66 fe ff       	call   c0000794 <strlen>
c001a10b:	5a                   	pop    edx
c001a10c:	31 d2                	xor    edx,edx
c001a10e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a112:	51                   	push   ecx
c001a113:	55                   	push   ebp
c001a114:	52                   	push   edx
c001a115:	50                   	push   eax
c001a116:	57                   	push   edi
c001a117:	ff d3                	call   ebx
c001a119:	83 c4 14             	add    esp,0x14
c001a11c:	57                   	push   edi
c001a11d:	e8 cc 93 ff ff       	call   c00134ee <File::close()>
c001a122:	83 c4 10             	add    esp,0x10
c001a125:	31 db                	xor    ebx,ebx
c001a127:	50                   	push   eax
c001a128:	31 ed                	xor    ebp,ebp
c001a12a:	68 00 01 00 00       	push   0x100
c001a12f:	6a 00                	push   0x0
c001a131:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a135:	50                   	push   eax
c001a136:	e8 3d 66 fe ff       	call   c0000778 <memset>
c001a13b:	58                   	pop    eax
c001a13c:	5a                   	pop    edx
c001a13d:	6a 01                	push   0x1
c001a13f:	57                   	push   edi
c001a140:	e8 4b 93 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001a145:	83 c4 10             	add    esp,0x10
c001a148:	83 ec 0c             	sub    esp,0xc
c001a14b:	8b 07                	mov    eax,DWORD PTR [edi]
c001a14d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a151:	51                   	push   ecx
c001a152:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a156:	52                   	push   edx
c001a157:	6a 00                	push   0x0
c001a159:	6a 01                	push   0x1
c001a15b:	57                   	push   edi
c001a15c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a15f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a163:	83 c4 20             	add    esp,0x20
c001a166:	3c 0d                	cmp    al,0xd
c001a168:	0f 84 12 01 00 00    	je     c001a280 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a16e:	85 db                	test   ebx,ebx
c001a170:	0f 84 fd 00 00 00    	je     c001a273 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a176:	3c 0a                	cmp    al,0xa
c001a178:	74 13                	je     c001a18d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a17a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a17f:	74 0c                	je     c001a18d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a181:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a187:	0f 8e e6 00 00 00    	jle    c001a273 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a18d:	83 ec 0c             	sub    esp,0xc
c001a190:	8d 53 01             	lea    edx,[ebx+0x1]
c001a193:	29 dd                	sub    ebp,ebx
c001a195:	52                   	push   edx
c001a196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a19a:	e8 a1 56 ff ff       	call   c000f840 <malloc>
c001a19f:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a1a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1a6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a1a9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1ad:	e8 8e 56 ff ff       	call   c000f840 <malloc>
c001a1b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1b6:	83 c4 0c             	add    esp,0xc
c001a1b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1bd:	52                   	push   edx
c001a1be:	6a 00                	push   0x0
c001a1c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1c4:	e8 af 65 fe ff       	call   c0000778 <memset>
c001a1c9:	83 c4 0c             	add    esp,0xc
c001a1cc:	53                   	push   ebx
c001a1cd:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a1d1:	55                   	push   ebp
c001a1d2:	01 eb                	add    ebx,ebp
c001a1d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1d8:	e8 67 65 fe ff       	call   c0000744 <memcpy>
c001a1dd:	83 c4 0c             	add    esp,0xc
c001a1e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a1e4:	51                   	push   ecx
c001a1e5:	6a 00                	push   0x0
c001a1e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1eb:	e8 88 65 fe ff       	call   c0000778 <memset>
c001a1f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1f3:	e8 9c 65 fe ff       	call   c0000794 <strlen>
c001a1f8:	83 c4 0c             	add    esp,0xc
c001a1fb:	50                   	push   eax
c001a1fc:	53                   	push   ebx
c001a1fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a201:	e8 3e 65 fe ff       	call   c0000744 <memcpy>
c001a206:	5b                   	pop    ebx
c001a207:	58                   	pop    eax
c001a208:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a20c:	68 71 b9 02 c0       	push   0xc002b971
c001a211:	e8 be 8c ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001a216:	8b 06                	mov    eax,DWORD PTR [esi]
c001a218:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a21b:	40                   	inc    eax
c001a21c:	83 c4 10             	add    esp,0x10
c001a21f:	89 06                	mov    DWORD PTR [esi],eax
c001a221:	85 d2                	test   edx,edx
c001a223:	75 0c                	jne    c001a231 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a225:	83 ec 0c             	sub    esp,0xc
c001a228:	6a 08                	push   0x8
c001a22a:	e8 11 56 ff ff       	call   c000f840 <malloc>
c001a22f:	eb 0c                	jmp    c001a23d <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a231:	c1 e0 03             	shl    eax,0x3
c001a234:	51                   	push   ecx
c001a235:	51                   	push   ecx
c001a236:	50                   	push   eax
c001a237:	52                   	push   edx
c001a238:	e8 ef 55 ff ff       	call   c000f82c <realloc>
c001a23d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a240:	83 c4 10             	add    esp,0x10
c001a243:	31 db                	xor    ebx,ebx
c001a245:	52                   	push   edx
c001a246:	6a 08                	push   0x8
c001a248:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a24c:	50                   	push   eax
c001a24d:	8b 16                	mov    edx,DWORD PTR [esi]
c001a24f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a252:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a256:	50                   	push   eax
c001a257:	e8 e8 64 fe ff       	call   c0000744 <memcpy>
c001a25c:	83 c4 0c             	add    esp,0xc
c001a25f:	68 00 01 00 00       	push   0x100
c001a264:	6a 00                	push   0x0
c001a266:	55                   	push   ebp
c001a267:	31 ed                	xor    ebp,ebp
c001a269:	e8 0a 65 fe ff       	call   c0000778 <memset>
c001a26e:	83 c4 10             	add    esp,0x10
c001a271:	eb 0d                	jmp    c001a280 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a273:	3c 3d                	cmp    al,0x3d
c001a275:	74 07                	je     c001a27e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a277:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a27b:	45                   	inc    ebp
c001a27c:	eb 02                	jmp    c001a280 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a27e:	89 eb                	mov    ebx,ebp
c001a280:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a285:	0f 85 bd fe ff ff    	jne    c001a148 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a28b:	50                   	push   eax
c001a28c:	50                   	push   eax
c001a28d:	ff 36                	push   DWORD PTR [esi]
c001a28f:	68 7f b9 02 c0       	push   0xc002b97f
c001a294:	e8 3b 8c ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001a299:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a29f:	5b                   	pop    ebx
c001a2a0:	5e                   	pop    esi
c001a2a1:	5f                   	pop    edi
c001a2a2:	5d                   	pop    ebp
c001a2a3:	c3                   	ret    

c001a2a4 <EnvVarContainer::__loadSystem()>:
c001a2a4:	83 ec 10             	sub    esp,0x10
c001a2a7:	68 20 d9 02 c0       	push   0xc002d920
c001a2ac:	68 aa b9 02 c0       	push   0xc002b9aa
c001a2b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2b5:	e8 f4 fd ff ff       	call   c001a0ae <EnvVarContainer::loadFrom(char const*, char const*)>
c001a2ba:	83 c4 1c             	add    esp,0x1c
c001a2bd:	c3                   	ret    

c001a2be <EnvVarContainer::__loadUser()>:
c001a2be:	c3                   	ret    
c001a2bf:	90                   	nop

c001a2c0 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a2d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a2e0:	90                   	nop
c001a2e1:	c3                   	ret    

c001a2e2 <EnvVarContainer::~EnvVarContainer()>:
c001a2e2:	83 ec 0c             	sub    esp,0xc
c001a2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2ec:	85 c0                	test   eax,eax
c001a2ee:	74 1d                	je     c001a30d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2f6:	85 c0                	test   eax,eax
c001a2f8:	74 13                	je     c001a30d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a301:	83 ec 0c             	sub    esp,0xc
c001a304:	50                   	push   eax
c001a305:	e8 46 55 ff ff       	call   c000f850 <free>
c001a30a:	83 c4 10             	add    esp,0x10
c001a30d:	90                   	nop
c001a30e:	83 c4 0c             	add    esp,0xc
c001a311:	c3                   	ret    

c001a312 <Krnl::getEnv(Process*, char const*)>:
c001a312:	53                   	push   ebx
c001a313:	83 ec 08             	sub    esp,0x8
c001a316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a31a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a31e:	39 05 54 19 03 c0    	cmp    DWORD PTR ds:0xc0031954,eax
c001a324:	74 04                	je     c001a32a <Krnl::getEnv(Process*, char const*)+0x18>
c001a326:	85 c0                	test   eax,eax
c001a328:	75 0b                	jne    c001a335 <Krnl::getEnv(Process*, char const*)+0x23>
c001a32a:	a1 34 0f 03 c0       	mov    eax,ds:0xc0030f34
c001a32f:	85 c0                	test   eax,eax
c001a331:	75 19                	jne    c001a34c <Krnl::getEnv(Process*, char const*)+0x3a>
c001a333:	eb 27                	jmp    c001a35c <Krnl::getEnv(Process*, char const*)+0x4a>
c001a335:	52                   	push   edx
c001a336:	52                   	push   edx
c001a337:	53                   	push   ebx
c001a338:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a33e:	e8 5f fc ff ff       	call   c0019fa2 <EnvVarContainer::getEnv(char const*)>
c001a343:	83 c4 10             	add    esp,0x10
c001a346:	85 c0                	test   eax,eax
c001a348:	75 28                	jne    c001a372 <Krnl::getEnv(Process*, char const*)+0x60>
c001a34a:	eb de                	jmp    c001a32a <Krnl::getEnv(Process*, char const*)+0x18>
c001a34c:	52                   	push   edx
c001a34d:	52                   	push   edx
c001a34e:	53                   	push   ebx
c001a34f:	50                   	push   eax
c001a350:	e8 4d fc ff ff       	call   c0019fa2 <EnvVarContainer::getEnv(char const*)>
c001a355:	83 c4 10             	add    esp,0x10
c001a358:	85 c0                	test   eax,eax
c001a35a:	75 16                	jne    c001a372 <Krnl::getEnv(Process*, char const*)+0x60>
c001a35c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a360:	a1 38 0f 03 c0       	mov    eax,ds:0xc0030f38
c001a365:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a369:	83 c4 08             	add    esp,0x8
c001a36c:	5b                   	pop    ebx
c001a36d:	e9 30 fc ff ff       	jmp    c0019fa2 <EnvVarContainer::getEnv(char const*)>
c001a372:	83 c4 08             	add    esp,0x8
c001a375:	5b                   	pop    ebx
c001a376:	c3                   	ret    

c001a377 <Krnl::setEnvSystem(char const*, char const*)>:
c001a377:	83 ec 10             	sub    esp,0x10
c001a37a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a37e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a382:	ff 35 38 0f 03 c0    	push   DWORD PTR ds:0xc0030f38
c001a388:	e8 53 fc ff ff       	call   c0019fe0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a38d:	83 c4 1c             	add    esp,0x1c
c001a390:	c3                   	ret    

c001a391 <Krnl::setEnvUser(char const*, char const*)>:
c001a391:	a1 34 0f 03 c0       	mov    eax,ds:0xc0030f34
c001a396:	85 c0                	test   eax,eax
c001a398:	74 15                	je     c001a3af <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a39a:	83 ec 10             	sub    esp,0x10
c001a39d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3a5:	50                   	push   eax
c001a3a6:	e8 35 fc ff ff       	call   c0019fe0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3ab:	83 c4 1c             	add    esp,0x1c
c001a3ae:	c3                   	ret    
c001a3af:	c3                   	ret    

c001a3b0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a3ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3be:	e9 1d fc ff ff       	jmp    c0019fe0 <EnvVarContainer::setEnv(char const*, char const*)>

c001a3c3 <Krnl::deleteEnvSystem(char const*)>:
c001a3c3:	c3                   	ret    

c001a3c4 <Krnl::deleteEnvUser(char const*)>:
c001a3c4:	c3                   	ret    

c001a3c5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a3c5:	c3                   	ret    

c001a3c6 <Krnl::newProcessEnv(Process*)>:
c001a3c6:	83 ec 28             	sub    esp,0x28
c001a3c9:	6a 0c                	push   0xc
c001a3cb:	e8 70 54 ff ff       	call   c000f840 <malloc>
c001a3d0:	5a                   	pop    edx
c001a3d1:	59                   	pop    ecx
c001a3d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a3d6:	50                   	push   eax
c001a3d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3db:	e8 e0 fe ff ff       	call   c001a2c0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3e4:	83 c4 2c             	add    esp,0x2c
c001a3e7:	c3                   	ret    

c001a3e8 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a3e8:	56                   	push   esi
c001a3e9:	53                   	push   ebx
c001a3ea:	83 ec 10             	sub    esp,0x10
c001a3ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3f1:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a3f7:	6a 0c                	push   0xc
c001a3f9:	e8 42 54 ff ff       	call   c000f840 <malloc>
c001a3fe:	89 c3                	mov    ebx,eax
c001a400:	58                   	pop    eax
c001a401:	5a                   	pop    edx
c001a402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a406:	53                   	push   ebx
c001a407:	e8 b4 fe ff ff       	call   c001a2c0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a40c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a40e:	89 03                	mov    DWORD PTR [ebx],eax
c001a410:	c1 e0 03             	shl    eax,0x3
c001a413:	89 04 24             	mov    DWORD PTR [esp],eax
c001a416:	e8 25 54 ff ff       	call   c000f840 <malloc>
c001a41b:	83 c4 0c             	add    esp,0xc
c001a41e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a421:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a423:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a42a:	52                   	push   edx
c001a42b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a42e:	50                   	push   eax
c001a42f:	e8 10 63 fe ff       	call   c0000744 <memcpy>
c001a434:	89 d8                	mov    eax,ebx
c001a436:	83 c4 14             	add    esp,0x14
c001a439:	5b                   	pop    ebx
c001a43a:	5e                   	pop    esi
c001a43b:	c3                   	ret    

c001a43c <Krnl::loadSystemEnv()>:
c001a43c:	53                   	push   ebx
c001a43d:	83 ec 14             	sub    esp,0x14
c001a440:	6a 0c                	push   0xc
c001a442:	e8 f9 53 ff ff       	call   c000f840 <malloc>
c001a447:	89 c3                	mov    ebx,eax
c001a449:	58                   	pop    eax
c001a44a:	5a                   	pop    edx
c001a44b:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001a451:	53                   	push   ebx
c001a452:	e8 69 fe ff ff       	call   c001a2c0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a457:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a45a:	89 1d 38 0f 03 c0    	mov    DWORD PTR ds:0xc0030f38,ebx
c001a460:	e8 3f fe ff ff       	call   c001a2a4 <EnvVarContainer::__loadSystem()>
c001a465:	83 c4 18             	add    esp,0x18
c001a468:	5b                   	pop    ebx
c001a469:	c3                   	ret    

c001a46a <Krnl::loadUserEnv()>:
c001a46a:	53                   	push   ebx
c001a46b:	83 ec 14             	sub    esp,0x14
c001a46e:	6a 0c                	push   0xc
c001a470:	e8 cb 53 ff ff       	call   c000f840 <malloc>
c001a475:	89 c3                	mov    ebx,eax
c001a477:	58                   	pop    eax
c001a478:	5a                   	pop    edx
c001a479:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001a47f:	53                   	push   ebx
c001a480:	e8 3b fe ff ff       	call   c001a2c0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a485:	89 1d 34 0f 03 c0    	mov    DWORD PTR ds:0xc0030f34,ebx
c001a48b:	83 c4 18             	add    esp,0x18
c001a48e:	5b                   	pop    ebx
c001a48f:	c3                   	ret    

c001a490 <Krnl::flushEnv()>:
c001a490:	c3                   	ret    

c001a491 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a491:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a495:	8b 15 34 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f34
c001a49b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a4a1:	a1 38 0f 03 c0       	mov    eax,ds:0xc0030f38
c001a4a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4a8:	03 01                	add    eax,DWORD PTR [ecx]
c001a4aa:	85 d2                	test   edx,edx
c001a4ac:	74 02                	je     c001a4b0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4ae:	03 02                	add    eax,DWORD PTR [edx]
c001a4b0:	c3                   	ret    

c001a4b1 <Krnl::getProcessEnvPair(Process*, int)>:
c001a4b1:	57                   	push   edi
c001a4b2:	8b 0d 34 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f34
c001a4b8:	56                   	push   esi
c001a4b9:	85 c9                	test   ecx,ecx
c001a4bb:	53                   	push   ebx
c001a4bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4c4:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a4ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4ce:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4d0:	75 47                	jne    c001a519 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a4d2:	39 c3                	cmp    ebx,eax
c001a4d4:	7c 47                	jl     c001a51d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a4d6:	8b 15 38 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f38
c001a4dc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a4de:	01 c1                	add    ecx,eax
c001a4e0:	39 d9                	cmp    ecx,ebx
c001a4e2:	7e 6c                	jle    c001a550 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4e4:	51                   	push   ecx
c001a4e5:	89 d9                	mov    ecx,ebx
c001a4e7:	29 c1                	sub    ecx,eax
c001a4e9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a4ec:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a4f0:	53                   	push   ebx
c001a4f1:	68 cc b9 02 c0       	push   0xc002b9cc
c001a4f6:	e8 d9 89 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001a4fb:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a501:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a503:	a1 38 0f 03 c0       	mov    eax,ds:0xc0030f38
c001a508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a50b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a50f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a512:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a515:	89 06                	mov    DWORD PTR [esi],eax
c001a517:	eb 51                	jmp    c001a56a <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a519:	39 c3                	cmp    ebx,eax
c001a51b:	7d 05                	jge    c001a522 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a51d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a520:	eb 20                	jmp    c001a542 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a522:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a524:	8d 14 07             	lea    edx,[edi+eax*1]
c001a527:	39 da                	cmp    edx,ebx
c001a529:	7e 04                	jle    c001a52f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a52b:	29 c3                	sub    ebx,eax
c001a52d:	eb 10                	jmp    c001a53f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a52f:	8b 0d 38 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f38
c001a535:	03 11                	add    edx,DWORD PTR [ecx]
c001a537:	39 da                	cmp    edx,ebx
c001a539:	7e 15                	jle    c001a550 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a53b:	29 c3                	sub    ebx,eax
c001a53d:	29 fb                	sub    ebx,edi
c001a53f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a542:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a546:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a549:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a54c:	89 06                	mov    DWORD PTR [esi],eax
c001a54e:	eb 1d                	jmp    c001a56d <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a550:	83 ec 0c             	sub    esp,0xc
c001a553:	68 e0 b9 02 c0       	push   0xc002b9e0
c001a558:	e8 18 00 00 00       	call   c001a575 <Krnl::panic(char const*)>
c001a55d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a563:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a56a:	83 c4 10             	add    esp,0x10
c001a56d:	89 f0                	mov    eax,esi
c001a56f:	5b                   	pop    ebx
c001a570:	5e                   	pop    esi
c001a571:	5f                   	pop    edi
c001a572:	c2 04 00             	ret    0x4

c001a575 <Krnl::panic(char const*)>:
c001a575:	55                   	push   ebp
c001a576:	89 e5                	mov    ebp,esp
c001a578:	53                   	push   ebx
c001a579:	83 ec 0c             	sub    esp,0xc
c001a57c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a57f:	fa                   	cli    
c001a580:	c6 05 44 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f44,0x1
c001a587:	53                   	push   ebx
c001a588:	c6 05 24 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d324,0x0
c001a58f:	68 fa b9 02 c0       	push   0xc002b9fa
c001a594:	e8 3b 89 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001a599:	58                   	pop    eax
c001a59a:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a59f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5a5:	e8 a7 67 ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001a5aa:	83 c4 0c             	add    esp,0xc
c001a5ad:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a5b2:	6a 01                	push   0x1
c001a5b4:	6a 0f                	push   0xf
c001a5b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5bc:	e8 c1 61 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a5c1:	58                   	pop    eax
c001a5c2:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a5c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5cd:	e8 20 6a ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c001a5d2:	58                   	pop    eax
c001a5d3:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a5d8:	5a                   	pop    edx
c001a5d9:	68 13 ba 02 c0       	push   0xc002ba13
c001a5de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e4:	e8 87 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a5e9:	59                   	pop    ecx
c001a5ea:	58                   	pop    eax
c001a5eb:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a5f0:	68 b8 ba 02 c0       	push   0xc002bab8
c001a5f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5fb:	e8 70 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a600:	58                   	pop    eax
c001a601:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a606:	5a                   	pop    edx
c001a607:	68 2f ba 02 c0       	push   0xc002ba2f
c001a60c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a612:	e8 59 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a617:	59                   	pop    ecx
c001a618:	58                   	pop    eax
c001a619:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a61e:	53                   	push   ebx
c001a61f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a625:	e8 46 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a62a:	58                   	pop    eax
c001a62b:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a630:	5a                   	pop    edx
c001a631:	68 4f ba 02 c0       	push   0xc002ba4f
c001a636:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63c:	e8 2f 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a641:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001a646:	83 c4 10             	add    esp,0x10
c001a649:	85 c0                	test   eax,eax
c001a64b:	74 02                	je     c001a64f <Krnl::panic(char const*)+0xda>
c001a64d:	ff d0                	call   eax
c001a64f:	83 ec 0c             	sub    esp,0xc
c001a652:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a655:	e8 47 30 00 00       	call   c001d6a1 <Thr::getDriverNameFromAddress(unsigned long)>
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	89 c3                	mov    ebx,eax
c001a65f:	85 c0                	test   eax,eax
c001a661:	0f 84 50 02 00 00    	je     c001a8b7 <Krnl::panic(char const*)+0x342>
c001a667:	83 ec 08             	sub    esp,0x8
c001a66a:	8b 15 54 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031954
c001a670:	68 f4 ba 02 c0       	push   0xc002baf4
c001a675:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a67b:	e8 f0 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a680:	58                   	pop    eax
c001a681:	5a                   	pop    edx
c001a682:	8b 15 54 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031954
c001a688:	68 2f ba 02 c0       	push   0xc002ba2f
c001a68d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a693:	e8 d8 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a698:	59                   	pop    ecx
c001a699:	58                   	pop    eax
c001a69a:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a69f:	53                   	push   ebx
c001a6a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a6:	e8 c5 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6ab:	83 c4 10             	add    esp,0x10
c001a6ae:	83 ec 08             	sub    esp,0x8
c001a6b1:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a6b6:	68 4e ba 02 c0       	push   0xc002ba4e
c001a6bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c1:	e8 aa 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6c6:	58                   	pop    eax
c001a6c7:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a6cc:	5a                   	pop    edx
c001a6cd:	68 4c bb 02 c0       	push   0xc002bb4c
c001a6d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d8:	e8 93 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6dd:	59                   	pop    ecx
c001a6de:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a6e3:	5b                   	pop    ebx
c001a6e4:	68 8c bb 02 c0       	push   0xc002bb8c
c001a6e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ef:	e8 7c 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6f4:	58                   	pop    eax
c001a6f5:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a6fa:	5a                   	pop    edx
c001a6fb:	68 3a ba 02 c0       	push   0xc002ba3a
c001a700:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a706:	e8 65 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a70b:	59                   	pop    ecx
c001a70c:	5b                   	pop    ebx
c001a70d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a710:	68 52 ba 02 c0       	push   0xc002ba52
c001a715:	e8 ba 87 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001a71a:	58                   	pop    eax
c001a71b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a71e:	5a                   	pop    edx
c001a71f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a722:	68 5b ba 02 c0       	push   0xc002ba5b
c001a727:	e8 a8 87 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001a72c:	59                   	pop    ecx
c001a72d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a730:	5b                   	pop    ebx
c001a731:	8b 00                	mov    eax,DWORD PTR [eax]
c001a733:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a736:	68 64 ba 02 c0       	push   0xc002ba64
c001a73b:	e8 94 87 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001a740:	58                   	pop    eax
c001a741:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a746:	5a                   	pop    edx
c001a747:	68 d0 bb 02 c0       	push   0xc002bbd0
c001a74c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a752:	e8 19 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a757:	59                   	pop    ecx
c001a758:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a75d:	5b                   	pop    ebx
c001a75e:	68 6d ba 02 c0       	push   0xc002ba6d
c001a763:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a769:	e8 02 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a76e:	0f 20 c0             	mov    eax,cr0
c001a771:	5a                   	pop    edx
c001a772:	59                   	pop    ecx
c001a773:	50                   	push   eax
c001a774:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a779:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a77f:	e8 12 6a ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a784:	5b                   	pop    ebx
c001a785:	58                   	pop    eax
c001a786:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a78b:	68 77 ba 02 c0       	push   0xc002ba77
c001a790:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a796:	e8 d5 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a79b:	0f 20 d0             	mov    eax,cr2
c001a79e:	5a                   	pop    edx
c001a79f:	59                   	pop    ecx
c001a7a0:	50                   	push   eax
c001a7a1:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a7a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ac:	e8 e5 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a7b1:	5b                   	pop    ebx
c001a7b2:	58                   	pop    eax
c001a7b3:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a7b8:	68 81 ba 02 c0       	push   0xc002ba81
c001a7bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c3:	e8 a8 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7c8:	0f 20 d8             	mov    eax,cr3
c001a7cb:	5a                   	pop    edx
c001a7cc:	59                   	pop    ecx
c001a7cd:	50                   	push   eax
c001a7ce:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a7d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d9:	e8 b8 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a7de:	5b                   	pop    ebx
c001a7df:	58                   	pop    eax
c001a7e0:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a7e5:	68 94 ba 02 c0       	push   0xc002ba94
c001a7ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f0:	e8 7b 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7f5:	0f 20 e0             	mov    eax,cr4
c001a7f8:	5a                   	pop    edx
c001a7f9:	59                   	pop    ecx
c001a7fa:	50                   	push   eax
c001a7fb:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a800:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a806:	e8 8b 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a80b:	5b                   	pop    ebx
c001a80c:	58                   	pop    eax
c001a80d:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a812:	68 9e ba 02 c0       	push   0xc002ba9e
c001a817:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a81d:	e8 4e 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a822:	5a                   	pop    edx
c001a823:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a828:	59                   	pop    ecx
c001a829:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a82f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a832:	50                   	push   eax
c001a833:	e8 5e 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a838:	5b                   	pop    ebx
c001a839:	58                   	pop    eax
c001a83a:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a83f:	68 b5 ba 02 c0       	push   0xc002bab5
c001a844:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84a:	e8 21 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a84f:	5a                   	pop    edx
c001a850:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a855:	59                   	pop    ecx
c001a856:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a85c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a85f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a862:	50                   	push   eax
c001a863:	e8 2e 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a868:	5b                   	pop    ebx
c001a869:	58                   	pop    eax
c001a86a:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a86f:	68 b5 ba 02 c0       	push   0xc002bab5
c001a874:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87a:	e8 f1 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a87f:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a884:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a887:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a88d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a88f:	59                   	pop    ecx
c001a890:	5b                   	pop    ebx
c001a891:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a894:	50                   	push   eax
c001a895:	e8 fc 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a89a:	83 c4 10             	add    esp,0x10
c001a89d:	b2 fe                	mov    dl,0xfe
c001a89f:	e4 60                	in     al,0x60
c001a8a1:	3c 1c                	cmp    al,0x1c
c001a8a3:	74 04                	je     c001a8a9 <Krnl::panic(char const*)+0x334>
c001a8a5:	3c 5a                	cmp    al,0x5a
c001a8a7:	75 f6                	jne    c001a89f <Krnl::panic(char const*)+0x32a>
c001a8a9:	e4 64                	in     al,0x64
c001a8ab:	a8 02                	test   al,0x2
c001a8ad:	75 fa                	jne    c001a8a9 <Krnl::panic(char const*)+0x334>
c001a8af:	88 d0                	mov    al,dl
c001a8b1:	e6 64                	out    0x64,al
c001a8b3:	fa                   	cli    
c001a8b4:	f4                   	hlt    
c001a8b5:	eb e8                	jmp    c001a89f <Krnl::panic(char const*)+0x32a>
c001a8b7:	50                   	push   eax
c001a8b8:	50                   	push   eax
c001a8b9:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a8be:	68 20 bb 02 c0       	push   0xc002bb20
c001a8c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c9:	e8 a2 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8ce:	58                   	pop    eax
c001a8cf:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a8d4:	5a                   	pop    edx
c001a8d5:	68 2f ba 02 c0       	push   0xc002ba2f
c001a8da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e0:	e8 8b 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8e5:	59                   	pop    ecx
c001a8e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8eb:	5b                   	pop    ebx
c001a8ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8ef:	83 c0 0c             	add    eax,0xc
c001a8f2:	50                   	push   eax
c001a8f3:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001a8f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8fe:	e8 6d 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a903:	83 c4 10             	add    esp,0x10
c001a906:	e9 a3 fd ff ff       	jmp    c001a6ae <Krnl::panic(char const*)+0x139>

c001a90b <Net::switchEndian16(unsigned short)>:
c001a90b:	83 ec 04             	sub    esp,0x4
c001a90e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a912:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a916:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a91a:	c1 f8 08             	sar    eax,0x8
c001a91d:	89 c2                	mov    edx,eax
c001a91f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a923:	c1 e0 08             	shl    eax,0x8
c001a926:	09 d0                	or     eax,edx
c001a928:	83 c4 04             	add    esp,0x4
c001a92b:	c3                   	ret    

c001a92c <Net::switchEndian32(unsigned int)>:
c001a92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a930:	c1 e8 18             	shr    eax,0x18
c001a933:	89 c2                	mov    edx,eax
c001a935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a939:	c1 e0 08             	shl    eax,0x8
c001a93c:	25 00 00 ff 00       	and    eax,0xff0000
c001a941:	09 c2                	or     edx,eax
c001a943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a947:	c1 e8 08             	shr    eax,0x8
c001a94a:	25 00 ff 00 00       	and    eax,0xff00
c001a94f:	09 c2                	or     edx,eax
c001a951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a955:	c1 e0 18             	shl    eax,0x18
c001a958:	09 d0                	or     eax,edx
c001a95a:	c3                   	ret    

c001a95b <Net::crc32Calc(unsigned char*, int)>:
c001a95b:	83 ec 10             	sub    esp,0x10
c001a95e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a963:	75 07                	jne    c001a96c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a965:	b8 00 00 00 00       	mov    eax,0x0
c001a96a:	eb 7c                	jmp    c001a9e8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a96c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a971:	7f 07                	jg     c001a97a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a973:	b8 00 00 00 00       	mov    eax,0x0
c001a978:	eb 6e                	jmp    c001a9e8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a97a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a982:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a98e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a992:	7d 4e                	jge    c001a9e2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a994:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a99c:	01 d0                	add    eax,edx
c001a99e:	8a 00                	mov    al,BYTE PTR [eax]
c001a9a0:	0f b6 c0             	movzx  eax,al
c001a9a3:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a9a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9af:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9b4:	7f 26                	jg     c001a9dc <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ba:	83 e0 01             	and    eax,0x1
c001a9bd:	74 0d                	je     c001a9cc <Net::crc32Calc(unsigned char*, int)+0x71>
c001a9bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c3:	d1 e8                	shr    eax,1
c001a9c5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a9ca:	eb 06                	jmp    c001a9d2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d0:	d1 e8                	shr    eax,1
c001a9d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9d6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9da:	eb d3                	jmp    c001a9af <Net::crc32Calc(unsigned char*, int)+0x54>
c001a9dc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a9e0:	eb a8                	jmp    c001a98a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e6:	f7 d0                	not    eax
c001a9e8:	83 c4 10             	add    esp,0x10
c001a9eb:	c3                   	ret    

c001a9ec <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a9ec:	83 ec 1c             	sub    esp,0x1c
c001a9ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9ff:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa04:	7f 14                	jg     c001aa1a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa0a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa0d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa11:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa14:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa18:	eb e5                	jmp    c001a9ff <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa1e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa21:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa25:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa28:	83 ec 04             	sub    esp,0x4
c001aa2b:	6a 06                	push   0x6
c001aa2d:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa31:	50                   	push   eax
c001aa32:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa36:	e8 09 5d fe ff       	call   c0000744 <memcpy>
c001aa3b:	83 c4 10             	add    esp,0x10
c001aa3e:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa43:	83 ec 04             	sub    esp,0x4
c001aa46:	6a 06                	push   0x6
c001aa48:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa4c:	50                   	push   eax
c001aa4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa51:	e8 ee 5c fe ff       	call   c0000744 <memcpy>
c001aa56:	83 c4 10             	add    esp,0x10
c001aa59:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa62:	0f b7 c0             	movzx  eax,ax
c001aa65:	c1 f8 08             	sar    eax,0x8
c001aa68:	89 c1                	mov    ecx,eax
c001aa6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa6e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa71:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa75:	88 ca                	mov    dl,cl
c001aa77:	88 10                	mov    BYTE PTR [eax],dl
c001aa79:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa81:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa84:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aa88:	88 10                	mov    BYTE PTR [eax],dl
c001aa8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa92:	83 ec 04             	sub    esp,0x4
c001aa95:	52                   	push   edx
c001aa96:	50                   	push   eax
c001aa97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa9b:	e8 a4 5c fe ff       	call   c0000744 <memcpy>
c001aaa0:	83 c4 10             	add    esp,0x10
c001aaa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aaa7:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aaab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaaf:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aab3:	83 ec 08             	sub    esp,0x8
c001aab6:	50                   	push   eax
c001aab7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aabb:	e8 9b fe ff ff       	call   c001a95b <Net::crc32Calc(unsigned char*, int)>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aacb:	c1 e8 18             	shr    eax,0x18
c001aace:	89 c1                	mov    ecx,eax
c001aad0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aad4:	8d 50 01             	lea    edx,[eax+0x1]
c001aad7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aadb:	88 ca                	mov    dl,cl
c001aadd:	88 10                	mov    BYTE PTR [eax],dl
c001aadf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae3:	c1 e8 10             	shr    eax,0x10
c001aae6:	89 c1                	mov    ecx,eax
c001aae8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaec:	8d 50 01             	lea    edx,[eax+0x1]
c001aaef:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaf3:	88 ca                	mov    dl,cl
c001aaf5:	88 10                	mov    BYTE PTR [eax],dl
c001aaf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aafb:	c1 e8 08             	shr    eax,0x8
c001aafe:	89 c1                	mov    ecx,eax
c001ab00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab04:	8d 50 01             	lea    edx,[eax+0x1]
c001ab07:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab0b:	88 ca                	mov    dl,cl
c001ab0d:	88 10                	mov    BYTE PTR [eax],dl
c001ab0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab13:	8d 50 01             	lea    edx,[eax+0x1]
c001ab16:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab1a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab1e:	88 10                	mov    BYTE PTR [eax],dl
c001ab20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab24:	83 c4 1c             	add    esp,0x1c
c001ab27:	c3                   	ret    

c001ab28 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab28:	83 ec 2c             	sub    esp,0x2c
c001ab2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab33:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab38:	83 ec 04             	sub    esp,0x4
c001ab3b:	6a 06                	push   0x6
c001ab3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab45:	83 c0 0e             	add    eax,0xe
c001ab48:	50                   	push   eax
c001ab49:	e8 f6 5b fe ff       	call   c0000744 <memcpy>
c001ab4e:	83 c4 10             	add    esp,0x10
c001ab51:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab56:	83 ec 04             	sub    esp,0x4
c001ab59:	6a 06                	push   0x6
c001ab5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab63:	83 c0 08             	add    eax,0x8
c001ab66:	50                   	push   eax
c001ab67:	e8 d8 5b fe ff       	call   c0000744 <memcpy>
c001ab6c:	83 c4 10             	add    esp,0x10
c001ab6f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab78:	8d 50 01             	lea    edx,[eax+0x1]
c001ab7b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab7f:	8a 00                	mov    al,BYTE PTR [eax]
c001ab81:	0f b6 c0             	movzx  eax,al
c001ab84:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ab89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab8d:	8d 50 01             	lea    edx,[eax+0x1]
c001ab90:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab94:	8a 00                	mov    al,BYTE PTR [eax]
c001ab96:	0f b6 c0             	movzx  eax,al
c001ab99:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ab9e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aba3:	c1 e0 08             	shl    eax,0x8
c001aba6:	89 c2                	mov    edx,eax
c001aba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abac:	09 d0                	or     eax,edx
c001abae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001abb2:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abb6:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001abbb:	75 3a                	jne    c001abf7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abc1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abc4:	66 3d dc 05          	cmp    ax,0x5dc
c001abc8:	77 10                	ja     c001abda <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001abca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abd1:	0f b7 c0             	movzx  eax,ax
c001abd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001abd8:	eb 1d                	jmp    c001abf7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abda:	83 ec 0c             	sub    esp,0xc
c001abdd:	68 f8 bb 02 c0       	push   0xc002bbf8
c001abe2:	e8 ed 82 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001abe7:	83 c4 10             	add    esp,0x10
c001abea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abee:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001abf2:	e9 c0 00 00 00       	jmp    c001acb7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001abf7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abff:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac01:	83 ec 04             	sub    esp,0x4
c001ac04:	52                   	push   edx
c001ac05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac09:	50                   	push   eax
c001ac0a:	e8 35 5b fe ff       	call   c0000744 <memcpy>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac16:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac1e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac25:	8a 00                	mov    al,BYTE PTR [eax]
c001ac27:	0f b6 c0             	movzx  eax,al
c001ac2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac32:	8d 50 01             	lea    edx,[eax+0x1]
c001ac35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac39:	8a 00                	mov    al,BYTE PTR [eax]
c001ac3b:	0f b6 c0             	movzx  eax,al
c001ac3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac46:	8d 50 01             	lea    edx,[eax+0x1]
c001ac49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac4d:	8a 00                	mov    al,BYTE PTR [eax]
c001ac4f:	0f b6 c0             	movzx  eax,al
c001ac52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac61:	8a 00                	mov    al,BYTE PTR [eax]
c001ac63:	0f b6 c0             	movzx  eax,al
c001ac66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac6e:	c1 e0 18             	shl    eax,0x18
c001ac71:	89 c2                	mov    edx,eax
c001ac73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac77:	c1 e0 10             	shl    eax,0x10
c001ac7a:	09 c2                	or     edx,eax
c001ac7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac80:	c1 e0 08             	shl    eax,0x8
c001ac83:	09 d0                	or     eax,edx
c001ac85:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ac89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac91:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ac95:	83 e8 04             	sub    eax,0x4
c001ac98:	83 ec 08             	sub    esp,0x8
c001ac9b:	50                   	push   eax
c001ac9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001aca0:	e8 b6 fc ff ff       	call   c001a95b <Net::crc32Calc(unsigned char*, int)>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001acac:	0f 94 c2             	sete   dl
c001acaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acb3:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acb6:	90                   	nop
c001acb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acbb:	83 c4 2c             	add    esp,0x2c
c001acbe:	c2 04 00             	ret    0x4

c001acc1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acc1:	55                   	push   ebp
c001acc2:	57                   	push   edi
c001acc3:	56                   	push   esi
c001acc4:	53                   	push   ebx
c001acc5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001accb:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acd2:	8a 1e                	mov    bl,BYTE PTR [esi]
c001acd4:	8d 6e 01             	lea    ebp,[esi+0x1]
c001acd7:	80 fb 40             	cmp    bl,0x40
c001acda:	75 1b                	jne    c001acf7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001acdc:	8a 16                	mov    dl,BYTE PTR [esi]
c001acde:	84 d2                	test   dl,dl
c001ace0:	0f 84 f1 00 00 00    	je     c001add7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ace6:	8d 46 01             	lea    eax,[esi+0x1]
c001ace9:	80 fa 3a             	cmp    dl,0x3a
c001acec:	74 04                	je     c001acf2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001acee:	89 c6                	mov    esi,eax
c001acf0:	eb ea                	jmp    c001acdc <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001acf2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001acf5:	89 c6                	mov    esi,eax
c001acf7:	50                   	push   eax
c001acf8:	6a 40                	push   0x40
c001acfa:	6a 00                	push   0x0
c001acfc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad00:	50                   	push   eax
c001ad01:	e8 72 5a fe ff       	call   c0000778 <memset>
c001ad06:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad0d:	31 c0                	xor    eax,eax
c001ad0f:	83 c4 10             	add    esp,0x10
c001ad12:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad14:	84 c9                	test   cl,cl
c001ad16:	0f 84 bb 00 00 00    	je     c001add7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1c:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad21:	0f 8f b0 00 00 00    	jg     c001add7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad27:	80 f9 0a             	cmp    cl,0xa
c001ad2a:	0f 85 98 00 00 00    	jne    c001adc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad30:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad35:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad39:	a8 df                	test   al,0xdf
c001ad3b:	0f 94 c1             	sete   cl
c001ad3e:	3c 23                	cmp    al,0x23
c001ad40:	0f 94 c2             	sete   dl
c001ad43:	08 d1                	or     cl,dl
c001ad45:	75 4a                	jne    c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad47:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad4a:	80 fa 01             	cmp    dl,0x1
c001ad4d:	76 42                	jbe    c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad4f:	3c 5b                	cmp    al,0x5b
c001ad51:	75 42                	jne    c001ad95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad53:	80 fb 40             	cmp    bl,0x40
c001ad56:	75 39                	jne    c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad5f:	52                   	push   edx
c001ad60:	e8 2f 5a fe ff       	call   c0000794 <strlen>
c001ad65:	83 c4 10             	add    esp,0x10
c001ad68:	83 f8 3f             	cmp    eax,0x3f
c001ad6b:	77 6a                	ja     c001add7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad6d:	50                   	push   eax
c001ad6e:	50                   	push   eax
c001ad6f:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad73:	52                   	push   edx
c001ad74:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad78:	52                   	push   edx
c001ad79:	e8 b6 5a fe ff       	call   c0000834 <strcpy>
c001ad7e:	58                   	pop    eax
c001ad7f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad83:	52                   	push   edx
c001ad84:	e8 0b 5a fe ff       	call   c0000794 <strlen>
c001ad89:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad8e:	83 c4 10             	add    esp,0x10
c001ad91:	31 d2                	xor    edx,edx
c001ad93:	eb 3a                	jmp    c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad95:	80 fb 40             	cmp    bl,0x40
c001ad98:	74 06                	je     c001ada0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad9a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad9e:	eb 20                	jmp    c001adc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ada0:	50                   	push   eax
c001ada1:	50                   	push   eax
c001ada2:	55                   	push   ebp
c001ada3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ada7:	50                   	push   eax
c001ada8:	e8 13 5b fe ff       	call   c00008c0 <strcmp>
c001adad:	83 c4 10             	add    esp,0x10
c001adb0:	85 c0                	test   eax,eax
c001adb2:	75 dd                	jne    c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb4:	eb e4                	jmp    c001ad9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adb6:	8d 50 01             	lea    edx,[eax+0x1]
c001adb9:	80 f9 3d             	cmp    cl,0x3d
c001adbc:	74 1d                	je     c001addb <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adbe:	89 d0                	mov    eax,edx
c001adc0:	8a 08                	mov    cl,BYTE PTR [eax]
c001adc2:	84 c9                	test   cl,cl
c001adc4:	75 f0                	jne    c001adb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adc6:	eb 0f                	jmp    c001add7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adc8:	8d 50 01             	lea    edx,[eax+0x1]
c001adcb:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001adcf:	47                   	inc    edi
c001add0:	89 d0                	mov    eax,edx
c001add2:	e9 3b ff ff ff       	jmp    c001ad12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001add7:	31 c0                	xor    eax,eax
c001add9:	eb 33                	jmp    c001ae0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001addb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001addf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ade2:	50                   	push   eax
c001ade3:	50                   	push   eax
c001ade4:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ade8:	50                   	push   eax
c001ade9:	56                   	push   esi
c001adea:	e8 d1 5a fe ff       	call   c00008c0 <strcmp>
c001adef:	83 c4 10             	add    esp,0x10
c001adf2:	85 c0                	test   eax,eax
c001adf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adf8:	75 97                	jne    c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adfa:	51                   	push   ecx
c001adfb:	51                   	push   ecx
c001adfc:	52                   	push   edx
c001adfd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae04:	e8 2b 5a fe ff       	call   c0000834 <strcpy>
c001ae09:	83 c4 10             	add    esp,0x10
c001ae0c:	b0 01                	mov    al,0x1
c001ae0e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae14:	5b                   	pop    ebx
c001ae15:	5e                   	pop    esi
c001ae16:	5f                   	pop    edi
c001ae17:	5d                   	pop    ebp
c001ae18:	c3                   	ret    

c001ae19 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae19:	57                   	push   edi
c001ae1a:	56                   	push   esi
c001ae1b:	53                   	push   ebx
c001ae1c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae22:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae29:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae30:	53                   	push   ebx
c001ae31:	e8 5e 59 fe ff       	call   c0000794 <strlen>
c001ae36:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae39:	89 c7                	mov    edi,eax
c001ae3b:	e8 54 59 fe ff       	call   c0000794 <strlen>
c001ae40:	83 c4 10             	add    esp,0x10
c001ae43:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae47:	3d ff 00 00 00       	cmp    eax,0xff
c001ae4c:	0f 87 d3 00 00 00    	ja     c001af25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae52:	57                   	push   edi
c001ae53:	57                   	push   edi
c001ae54:	56                   	push   esi
c001ae55:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae59:	56                   	push   esi
c001ae5a:	e8 d5 59 fe ff       	call   c0000834 <strcpy>
c001ae5f:	58                   	pop    eax
c001ae60:	5a                   	pop    edx
c001ae61:	68 c1 c1 02 c0       	push   0xc002c1c1
c001ae66:	56                   	push   esi
c001ae67:	e8 08 5b fe ff       	call   c0000974 <strcat>
c001ae6c:	59                   	pop    ecx
c001ae6d:	5f                   	pop    edi
c001ae6e:	53                   	push   ebx
c001ae6f:	56                   	push   esi
c001ae70:	e8 ff 5a fe ff       	call   c0000974 <strcat>
c001ae75:	58                   	pop    eax
c001ae76:	5a                   	pop    edx
c001ae77:	68 44 bc 02 c0       	push   0xc002bc44
c001ae7c:	56                   	push   esi
c001ae7d:	e8 f2 5a fe ff       	call   c0000974 <strcat>
c001ae82:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae89:	e8 b2 49 ff ff       	call   c000f840 <malloc>
c001ae8e:	83 c4 0c             	add    esp,0xc
c001ae91:	89 c3                	mov    ebx,eax
c001ae93:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001ae99:	56                   	push   esi
c001ae9a:	50                   	push   eax
c001ae9b:	e8 8c 85 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001aea0:	83 c4 10             	add    esp,0x10
c001aea3:	85 db                	test   ebx,ebx
c001aea5:	74 7e                	je     c001af25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aea7:	51                   	push   ecx
c001aea8:	51                   	push   ecx
c001aea9:	6a 01                	push   0x1
c001aeab:	53                   	push   ebx
c001aeac:	e8 df 85 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001aeb1:	83 c4 10             	add    esp,0x10
c001aeb4:	85 c0                	test   eax,eax
c001aeb6:	74 08                	je     c001aec0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aeb8:	83 ec 0c             	sub    esp,0xc
c001aebb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aebd:	53                   	push   ebx
c001aebe:	eb 5f                	jmp    c001af1f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aec0:	52                   	push   edx
c001aec1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aec5:	50                   	push   eax
c001aec6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aeca:	50                   	push   eax
c001aecb:	53                   	push   ebx
c001aecc:	e8 6b 88 ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001aed1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	89 c1                	mov    ecx,eax
c001aeda:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aede:	74 31                	je     c001af11 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aee0:	83 ec 0c             	sub    esp,0xc
c001aee3:	50                   	push   eax
c001aee4:	e8 57 49 ff ff       	call   c000f840 <malloc>
c001aee9:	89 c6                	mov    esi,eax
c001aeeb:	58                   	pop    eax
c001aeec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeee:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aef2:	52                   	push   edx
c001aef3:	56                   	push   esi
c001aef4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aef8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aefc:	53                   	push   ebx
c001aefd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af00:	83 c4 20             	add    esp,0x20
c001af03:	85 c0                	test   eax,eax
c001af05:	75 0a                	jne    c001af11 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af0b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af0f:	74 18                	je     c001af29 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af11:	83 ec 0c             	sub    esp,0xc
c001af14:	53                   	push   ebx
c001af15:	e8 d4 85 ff ff       	call   c00134ee <File::close()>
c001af1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af22:	83 c4 10             	add    esp,0x10
c001af25:	31 c0                	xor    eax,eax
c001af27:	eb 3b                	jmp    c001af64 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af29:	83 ec 0c             	sub    esp,0xc
c001af2c:	53                   	push   ebx
c001af2d:	e8 bc 85 ff ff       	call   c00134ee <File::close()>
c001af32:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af3a:	83 c4 0c             	add    esp,0xc
c001af3d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af44:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af4b:	56                   	push   esi
c001af4c:	e8 70 fd ff ff       	call   c001acc1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af51:	89 34 24             	mov    DWORD PTR [esp],esi
c001af54:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af58:	e8 f3 48 ff ff       	call   c000f850 <free>
c001af5d:	83 c4 10             	add    esp,0x10
c001af60:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af64:	81 c4 20 01 00 00    	add    esp,0x120
c001af6a:	5b                   	pop    ebx
c001af6b:	5e                   	pop    esi
c001af6c:	5f                   	pop    edi
c001af6d:	c3                   	ret    

c001af6e <Reg::getLine(char*, char*, char*)>:
c001af6e:	57                   	push   edi
c001af6f:	56                   	push   esi
c001af70:	53                   	push   ebx
c001af71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af79:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af7d:	57                   	push   edi
c001af7e:	56                   	push   esi
c001af7f:	53                   	push   ebx
c001af80:	68 49 bc 02 c0       	push   0xc002bc49
c001af85:	e8 8f fe ff ff       	call   c001ae19 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af8a:	83 c4 10             	add    esp,0x10
c001af8d:	84 c0                	test   al,al
c001af8f:	75 10                	jne    c001afa1 <Reg::getLine(char*, char*, char*)+0x33>
c001af91:	57                   	push   edi
c001af92:	56                   	push   esi
c001af93:	53                   	push   ebx
c001af94:	68 6e bc 02 c0       	push   0xc002bc6e
c001af99:	e8 7b fe ff ff       	call   c001ae19 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af9e:	83 c4 10             	add    esp,0x10
c001afa1:	5b                   	pop    ebx
c001afa2:	5e                   	pop    esi
c001afa3:	5f                   	pop    edi
c001afa4:	c3                   	ret    

c001afa5 <Reg::readInt(char*, char*, int*)>:
c001afa5:	55                   	push   ebp
c001afa6:	57                   	push   edi
c001afa7:	56                   	push   esi
c001afa8:	53                   	push   ebx
c001afa9:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afaf:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afb3:	57                   	push   edi
c001afb4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afbb:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afc2:	e8 a7 ff ff ff       	call   c001af6e <Reg::getLine(char*, char*, char*)>
c001afc7:	83 c4 10             	add    esp,0x10
c001afca:	84 c0                	test   al,al
c001afcc:	0f 84 b3 00 00 00    	je     c001b085 <Reg::readInt(char*, char*, int*)+0xe0>
c001afd2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afd6:	80 fa 2b             	cmp    dl,0x2b
c001afd9:	74 0c                	je     c001afe7 <Reg::readInt(char*, char*, int*)+0x42>
c001afdb:	80 fa 2d             	cmp    dl,0x2d
c001afde:	75 0e                	jne    c001afee <Reg::readInt(char*, char*, int*)+0x49>
c001afe0:	ba 01 00 00 00       	mov    edx,0x1
c001afe5:	eb 0b                	jmp    c001aff2 <Reg::readInt(char*, char*, int*)+0x4d>
c001afe7:	ba 01 00 00 00       	mov    edx,0x1
c001afec:	eb 02                	jmp    c001aff0 <Reg::readInt(char*, char*, int*)+0x4b>
c001afee:	31 d2                	xor    edx,edx
c001aff0:	31 c0                	xor    eax,eax
c001aff2:	be 0a 00 00 00       	mov    esi,0xa
c001aff7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001affc:	75 20                	jne    c001b01e <Reg::readInt(char*, char*, int*)+0x79>
c001affe:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b002:	80 f9 78             	cmp    cl,0x78
c001b005:	75 0a                	jne    c001b011 <Reg::readInt(char*, char*, int*)+0x6c>
c001b007:	83 c2 02             	add    edx,0x2
c001b00a:	be 10 00 00 00       	mov    esi,0x10
c001b00f:	eb 0d                	jmp    c001b01e <Reg::readInt(char*, char*, int*)+0x79>
c001b011:	80 f9 62             	cmp    cl,0x62
c001b014:	75 08                	jne    c001b01e <Reg::readInt(char*, char*, int*)+0x79>
c001b016:	83 c2 02             	add    edx,0x2
c001b019:	be 02 00 00 00       	mov    esi,0x2
c001b01e:	01 d7                	add    edi,edx
c001b020:	31 d2                	xor    edx,edx
c001b022:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b024:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b028:	80 fb 0d             	cmp    bl,0xd
c001b02b:	0f 94 c3             	sete   bl
c001b02e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b033:	0f 94 c1             	sete   cl
c001b036:	08 cb                	or     bl,cl
c001b038:	75 3a                	jne    c001b074 <Reg::readInt(char*, char*, int*)+0xcf>
c001b03a:	0f af d6             	imul   edx,esi
c001b03d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b042:	83 fe 10             	cmp    esi,0x10
c001b045:	75 26                	jne    c001b06d <Reg::readInt(char*, char*, int*)+0xc8>
c001b047:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b04b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b04e:	89 e9                	mov    ecx,ebp
c001b050:	80 f9 05             	cmp    cl,0x5
c001b053:	77 06                	ja     c001b05b <Reg::readInt(char*, char*, int*)+0xb6>
c001b055:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b059:	eb 16                	jmp    c001b071 <Reg::readInt(char*, char*, int*)+0xcc>
c001b05b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b05f:	83 e9 61             	sub    ecx,0x61
c001b062:	80 f9 05             	cmp    cl,0x5
c001b065:	77 06                	ja     c001b06d <Reg::readInt(char*, char*, int*)+0xc8>
c001b067:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b06b:	eb 04                	jmp    c001b071 <Reg::readInt(char*, char*, int*)+0xcc>
c001b06d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b071:	47                   	inc    edi
c001b072:	eb ae                	jmp    c001b022 <Reg::readInt(char*, char*, int*)+0x7d>
c001b074:	84 c0                	test   al,al
c001b076:	74 02                	je     c001b07a <Reg::readInt(char*, char*, int*)+0xd5>
c001b078:	f7 da                	neg    edx
c001b07a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b081:	89 10                	mov    DWORD PTR [eax],edx
c001b083:	88 d8                	mov    al,bl
c001b085:	81 c4 ec 00 00 00    	add    esp,0xec
c001b08b:	5b                   	pop    ebx
c001b08c:	5e                   	pop    esi
c001b08d:	5f                   	pop    edi
c001b08e:	5d                   	pop    ebp
c001b08f:	c3                   	ret    

c001b090 <Reg::readString(char*, char*, char*, int)>:
c001b090:	57                   	push   edi
c001b091:	56                   	push   esi
c001b092:	53                   	push   ebx
c001b093:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b099:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0a0:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0a4:	57                   	push   edi
c001b0a5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0ac:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0b3:	e8 b6 fe ff ff       	call   c001af6e <Reg::getLine(char*, char*, char*)>
c001b0b8:	83 c4 10             	add    esp,0x10
c001b0bb:	89 c6                	mov    esi,eax
c001b0bd:	84 c0                	test   al,al
c001b0bf:	74 44                	je     c001b105 <Reg::readString(char*, char*, char*, int)+0x75>
c001b0c1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0c8:	31 c0                	xor    eax,eax
c001b0ca:	4a                   	dec    edx
c001b0cb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0ce:	84 c9                	test   cl,cl
c001b0d0:	74 0f                	je     c001b0e1 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0d2:	39 c2                	cmp    edx,eax
c001b0d4:	7e 0b                	jle    c001b0e1 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0d6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0d9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0de:	40                   	inc    eax
c001b0df:	eb ea                	jmp    c001b0cb <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0e1:	83 ec 0c             	sub    esp,0xc
c001b0e4:	53                   	push   ebx
c001b0e5:	e8 aa 56 fe ff       	call   c0000794 <strlen>
c001b0ea:	83 c4 10             	add    esp,0x10
c001b0ed:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0f2:	75 11                	jne    c001b105 <Reg::readString(char*, char*, char*, int)+0x75>
c001b0f4:	83 ec 0c             	sub    esp,0xc
c001b0f7:	53                   	push   ebx
c001b0f8:	e8 97 56 fe ff       	call   c0000794 <strlen>
c001b0fd:	83 c4 10             	add    esp,0x10
c001b100:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b105:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b10b:	89 f0                	mov    eax,esi
c001b10d:	5b                   	pop    ebx
c001b10e:	5e                   	pop    esi
c001b10f:	5f                   	pop    edi
c001b110:	c3                   	ret    

c001b111 <Reg::readBool(char*, char*, bool*)>:
c001b111:	83 ec 20             	sub    esp,0x20
c001b114:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b118:	50                   	push   eax
c001b119:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b11d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b121:	e8 7f fe ff ff       	call   c001afa5 <Reg::readInt(char*, char*, int*)>
c001b126:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b12b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b12f:	0f 95 02             	setne  BYTE PTR [edx]
c001b132:	83 c4 2c             	add    esp,0x2c
c001b135:	c3                   	ret    

c001b136 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b136:	53                   	push   ebx
c001b137:	83 ec 1c             	sub    esp,0x1c
c001b13a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b13e:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b142:	50                   	push   eax
c001b143:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b147:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b14b:	e8 c1 ff ff ff       	call   c001b111 <Reg::readBool(char*, char*, bool*)>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	84 c0                	test   al,al
c001b155:	74 04                	je     c001b15b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b157:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b15b:	88 d8                	mov    al,bl
c001b15d:	83 c4 18             	add    esp,0x18
c001b160:	5b                   	pop    ebx
c001b161:	c3                   	ret    

c001b162 <Reg::readIntWithDefault(char*, char*, int)>:
c001b162:	53                   	push   ebx
c001b163:	83 ec 1c             	sub    esp,0x1c
c001b166:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b16a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b16e:	50                   	push   eax
c001b16f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b177:	e8 29 fe ff ff       	call   c001afa5 <Reg::readInt(char*, char*, int*)>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	84 c0                	test   al,al
c001b181:	74 04                	je     c001b187 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b183:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b187:	89 d8                	mov    eax,ebx
c001b189:	83 c4 18             	add    esp,0x18
c001b18c:	5b                   	pop    ebx
c001b18d:	c3                   	ret    

c001b18e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b18e:	57                   	push   edi
c001b18f:	56                   	push   esi
c001b190:	53                   	push   ebx
c001b191:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b195:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b199:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b19d:	56                   	push   esi
c001b19e:	53                   	push   ebx
c001b19f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1a7:	e8 e4 fe ff ff       	call   c001b090 <Reg::readString(char*, char*, char*, int)>
c001b1ac:	83 c4 10             	add    esp,0x10
c001b1af:	84 c0                	test   al,al
c001b1b1:	75 1b                	jne    c001b1ce <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1b3:	50                   	push   eax
c001b1b4:	56                   	push   esi
c001b1b5:	4e                   	dec    esi
c001b1b6:	6a 00                	push   0x0
c001b1b8:	53                   	push   ebx
c001b1b9:	e8 ba 55 fe ff       	call   c0000778 <memset>
c001b1be:	83 c4 0c             	add    esp,0xc
c001b1c1:	56                   	push   esi
c001b1c2:	57                   	push   edi
c001b1c3:	53                   	push   ebx
c001b1c4:	89 fb                	mov    ebx,edi
c001b1c6:	e8 79 55 fe ff       	call   c0000744 <memcpy>
c001b1cb:	83 c4 10             	add    esp,0x10
c001b1ce:	89 d8                	mov    eax,ebx
c001b1d0:	5b                   	pop    ebx
c001b1d1:	5e                   	pop    esi
c001b1d2:	5f                   	pop    edi
c001b1d3:	c3                   	ret    

c001b1d4 <Sys::eject(regs*)>:
c001b1d4:	83 ec 0c             	sub    esp,0xc
c001b1d7:	83 ca ff             	or     edx,0xffffffff
c001b1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1de:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1e1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1e6:	83 e9 41             	sub    ecx,0x41
c001b1e9:	83 f9 19             	cmp    ecx,0x19
c001b1ec:	77 18                	ja     c001b206 <Sys::eject(regs*)+0x32>
c001b1ee:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c001b1f5:	85 c9                	test   ecx,ecx
c001b1f7:	74 0d                	je     c001b206 <Sys::eject(regs*)+0x32>
c001b1f9:	83 ec 0c             	sub    esp,0xc
c001b1fc:	51                   	push   ecx
c001b1fd:	e8 78 b4 ff ff       	call   c001667a <LogicalDisk::eject()>
c001b202:	83 c4 10             	add    esp,0x10
c001b205:	99                   	cdq    
c001b206:	83 c4 0c             	add    esp,0xc
c001b209:	c3                   	ret    

c001b20a <Sys::exit(regs*)>:
c001b20a:	83 ec 18             	sub    esp,0x18
c001b20d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b211:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b214:	e8 c4 35 00 00       	call   c001e7dd <terminateTask(int)>
c001b219:	83 c8 ff             	or     eax,0xffffffff
c001b21c:	83 c4 1c             	add    esp,0x1c
c001b21f:	89 c2                	mov    edx,eax
c001b221:	c3                   	ret    

c001b222 <Sys::getCwd(regs*)>:
c001b222:	83 ec 10             	sub    esp,0x10
c001b225:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b229:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b22c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b22f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b234:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b237:	e8 f2 7f ff ff       	call   c001322e <Fs::getcwd(Process*, char*, int)>
c001b23c:	83 c4 1c             	add    esp,0x1c
c001b23f:	99                   	cdq    
c001b240:	c3                   	ret    

c001b241 <Sys::getPID(regs*)>:
c001b241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b246:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b249:	8b 00                	mov    eax,DWORD PTR [eax]
c001b24b:	99                   	cdq    
c001b24c:	c3                   	ret    

c001b24d <Sys::getRAMData(regs*)>:
c001b24d:	8b 0d 34 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e434
c001b253:	6b 05 30 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e430,0x64
c001b25a:	99                   	cdq    
c001b25b:	f7 f9                	idiv   ecx
c001b25d:	c1 e0 18             	shl    eax,0x18
c001b260:	09 c8                	or     eax,ecx
c001b262:	99                   	cdq    
c001b263:	c3                   	ret    

c001b264 <Sys::loadDLL(regs*)>:
c001b264:	56                   	push   esi
c001b265:	53                   	push   ebx
c001b266:	31 d2                	xor    edx,edx
c001b268:	51                   	push   ecx
c001b269:	b8 01 00 00 00       	mov    eax,0x1
c001b26e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b272:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b276:	0f 84 8c 00 00 00    	je     c001b308 <Sys::loadDLL(regs*)+0xa4>
c001b27c:	83 ec 0c             	sub    esp,0xc
c001b27f:	68 14 01 00 00       	push   0x114
c001b284:	e8 b7 45 ff ff       	call   c000f840 <malloc>
c001b289:	83 c4 0c             	add    esp,0xc
c001b28c:	89 c3                	mov    ebx,eax
c001b28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b293:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b296:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b299:	53                   	push   ebx
c001b29a:	e8 8d 81 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001b29f:	83 c4 10             	add    esp,0x10
c001b2a2:	31 d2                	xor    edx,edx
c001b2a4:	b8 02 00 00 00       	mov    eax,0x2
c001b2a9:	85 db                	test   ebx,ebx
c001b2ab:	74 5b                	je     c001b308 <Sys::loadDLL(regs*)+0xa4>
c001b2ad:	83 ec 0c             	sub    esp,0xc
c001b2b0:	53                   	push   ebx
c001b2b1:	e8 48 84 ff ff       	call   c00136fe <File::exists()>
c001b2b6:	83 c4 10             	add    esp,0x10
c001b2b9:	84 c0                	test   al,al
c001b2bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2bd:	75 11                	jne    c001b2d0 <Sys::loadDLL(regs*)+0x6c>
c001b2bf:	83 ec 0c             	sub    esp,0xc
c001b2c2:	53                   	push   ebx
c001b2c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2c6:	83 c4 10             	add    esp,0x10
c001b2c9:	b8 03 00 00 00       	mov    eax,0x3
c001b2ce:	eb 36                	jmp    c001b306 <Sys::loadDLL(regs*)+0xa2>
c001b2d0:	83 ec 0c             	sub    esp,0xc
c001b2d3:	53                   	push   ebx
c001b2d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2d7:	58                   	pop    eax
c001b2d8:	5a                   	pop    edx
c001b2d9:	6a 00                	push   0x0
c001b2db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2de:	e8 0f 24 00 00       	call   c001d6f2 <Thr::loadDLL(char const*, bool)>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	89 c1                	mov    ecx,eax
c001b2e8:	31 d2                	xor    edx,edx
c001b2ea:	b8 04 00 00 00       	mov    eax,0x4
c001b2ef:	85 c9                	test   ecx,ecx
c001b2f1:	74 15                	je     c001b308 <Sys::loadDLL(regs*)+0xa4>
c001b2f3:	53                   	push   ebx
c001b2f4:	53                   	push   ebx
c001b2f5:	ff 35 e8 e3 02 c0    	push   DWORD PTR ds:0xc002e3e8
c001b2fb:	51                   	push   ecx
c001b2fc:	e8 25 26 00 00       	call   c001d926 <Thr::executeDLL(unsigned long, void*)>
c001b301:	83 c4 10             	add    esp,0x10
c001b304:	31 c0                	xor    eax,eax
c001b306:	31 d2                	xor    edx,edx
c001b308:	59                   	pop    ecx
c001b309:	5b                   	pop    ebx
c001b30a:	5e                   	pop    esi
c001b30b:	c3                   	ret    

c001b30c <Sys::read(regs*)>:
c001b30c:	57                   	push   edi
c001b30d:	56                   	push   esi
c001b30e:	53                   	push   ebx
c001b30f:	83 ec 10             	sub    esp,0x10
c001b312:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b316:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b319:	83 f8 02             	cmp    eax,0x2
c001b31c:	77 10                	ja     c001b32e <Sys::read(regs*)+0x22>
c001b31e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b323:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b326:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b32c:	eb 0e                	jmp    c001b33c <Sys::read(regs*)+0x30>
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	50                   	push   eax
c001b332:	e8 12 67 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b337:	83 c4 10             	add    esp,0x10
c001b33a:	89 c1                	mov    ecx,eax
c001b33c:	83 c8 ff             	or     eax,0xffffffff
c001b33f:	85 c9                	test   ecx,ecx
c001b341:	89 c2                	mov    edx,eax
c001b343:	74 28                	je     c001b36d <Sys::read(regs*)+0x61>
c001b345:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b34d:	31 ff                	xor    edi,edi
c001b34f:	83 ec 0c             	sub    esp,0xc
c001b352:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b354:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b358:	52                   	push   edx
c001b359:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b35c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b35f:	57                   	push   edi
c001b360:	56                   	push   esi
c001b361:	51                   	push   ecx
c001b362:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b365:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b369:	83 c4 20             	add    esp,0x20
c001b36c:	99                   	cdq    
c001b36d:	83 c4 10             	add    esp,0x10
c001b370:	5b                   	pop    ebx
c001b371:	5e                   	pop    esi
c001b372:	5f                   	pop    edi
c001b373:	c3                   	ret    

c001b374 <Sys::sbrk(regs*)>:
c001b374:	56                   	push   esi
c001b375:	53                   	push   ebx
c001b376:	83 ec 0c             	sub    esp,0xc
c001b379:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b37d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b382:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b385:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b38b:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b38e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b391:	68 89 bc 02 c0       	push   0xc002bc89
c001b396:	e8 39 7b ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b39b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b39e:	83 c4 10             	add    esp,0x10
c001b3a1:	85 c0                	test   eax,eax
c001b3a3:	75 0a                	jne    c001b3af <Sys::sbrk(regs*)+0x3b>
c001b3a5:	50                   	push   eax
c001b3a6:	50                   	push   eax
c001b3a7:	53                   	push   ebx
c001b3a8:	68 a5 bc 02 c0       	push   0xc002bca5
c001b3ad:	eb 54                	jmp    c001b403 <Sys::sbrk(regs*)+0x8f>
c001b3af:	79 0a                	jns    c001b3bb <Sys::sbrk(regs*)+0x47>
c001b3b1:	56                   	push   esi
c001b3b2:	56                   	push   esi
c001b3b3:	53                   	push   ebx
c001b3b4:	68 b8 bc 02 c0       	push   0xc002bcb8
c001b3b9:	eb 48                	jmp    c001b403 <Sys::sbrk(regs*)+0x8f>
c001b3bb:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b3c0:	76 17                	jbe    c001b3d9 <Sys::sbrk(regs*)+0x65>
c001b3c2:	51                   	push   ecx
c001b3c3:	51                   	push   ecx
c001b3c4:	53                   	push   ebx
c001b3c5:	68 ca bc 02 c0       	push   0xc002bcca
c001b3ca:	e8 05 7b ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b3cf:	83 c8 ff             	or     eax,0xffffffff
c001b3d2:	83 c4 10             	add    esp,0x10
c001b3d5:	89 c2                	mov    edx,eax
c001b3d7:	eb 36                	jmp    c001b40f <Sys::sbrk(regs*)+0x9b>
c001b3d9:	05 ff 0f 00 00       	add    eax,0xfff
c001b3de:	56                   	push   esi
c001b3df:	c1 e8 0c             	shr    eax,0xc
c001b3e2:	68 07 04 00 00       	push   0x407
c001b3e7:	50                   	push   eax
c001b3e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3f0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b3f6:	e8 7b 70 ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001b3fb:	58                   	pop    eax
c001b3fc:	5a                   	pop    edx
c001b3fd:	53                   	push   ebx
c001b3fe:	68 e3 bc 02 c0       	push   0xc002bce3
c001b403:	e8 cc 7a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b408:	89 d8                	mov    eax,ebx
c001b40a:	31 d2                	xor    edx,edx
c001b40c:	83 c4 10             	add    esp,0x10
c001b40f:	59                   	pop    ecx
c001b410:	5b                   	pop    ebx
c001b411:	5e                   	pop    esi
c001b412:	c3                   	ret    

c001b413 <Sys::setCwd(regs*)>:
c001b413:	83 ec 14             	sub    esp,0x14
c001b416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b41a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b41d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b422:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b425:	e8 73 83 ff ff       	call   c001379d <Fs::setcwd(Process*, char*)>
c001b42a:	83 c4 1c             	add    esp,0x1c
c001b42d:	99                   	cdq    
c001b42e:	c3                   	ret    

c001b42f <Sys::setTime(regs*)>:
c001b42f:	55                   	push   ebp
c001b430:	31 d2                	xor    edx,edx
c001b432:	57                   	push   edi
c001b433:	bf 18 00 00 00       	mov    edi,0x18
c001b438:	56                   	push   esi
c001b439:	53                   	push   ebx
c001b43a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b43f:	83 ec 30             	sub    esp,0x30
c001b442:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b446:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b449:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b44c:	f7 f3                	div    ebx
c001b44e:	89 d6                	mov    esi,edx
c001b450:	31 d2                	xor    edx,edx
c001b452:	f7 f3                	div    ebx
c001b454:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b457:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b45b:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b460:	31 d2                	xor    edx,edx
c001b462:	f7 f3                	div    ebx
c001b464:	31 d2                	xor    edx,edx
c001b466:	bb 0c 00 00 00       	mov    ebx,0xc
c001b46b:	f7 f7                	div    edi
c001b46d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b470:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b474:	0f b7 cd             	movzx  ecx,bp
c001b477:	56                   	push   esi
c001b478:	89 c7                	mov    edi,eax
c001b47a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b47e:	c1 e6 10             	shl    esi,0x10
c001b481:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b485:	83 e7 1f             	and    edi,0x1f
c001b488:	51                   	push   ecx
c001b489:	47                   	inc    edi
c001b48a:	c1 e8 05             	shr    eax,0x5
c001b48d:	31 d2                	xor    edx,edx
c001b48f:	f7 f3                	div    ebx
c001b491:	31 db                	xor    ebx,ebx
c001b493:	52                   	push   edx
c001b494:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b498:	57                   	push   edi
c001b499:	68 09 bd 02 c0       	push   0xc002bd09
c001b49e:	e8 31 7a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b4a3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4a7:	89 f8                	mov    eax,edi
c001b4a9:	31 c9                	xor    ecx,ecx
c001b4ab:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4af:	88 c1                	mov    cl,al
c001b4b1:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4b7:	88 d5                	mov    ch,dl
c001b4b9:	c1 e0 10             	shl    eax,0x10
c001b4bc:	0f b7 d1             	movzx  edx,cx
c001b4bf:	09 c2                	or     edx,eax
c001b4c1:	89 d8                	mov    eax,ebx
c001b4c3:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b4c8:	09 f0                	or     eax,esi
c001b4ca:	89 c3                	mov    ebx,eax
c001b4cc:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b4d0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b4d4:	83 c4 18             	add    esp,0x18
c001b4d7:	53                   	push   ebx
c001b4d8:	52                   	push   edx
c001b4d9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b4dd:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b4e1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4e5:	e8 cd 89 ff ff       	call   c0013eb7 <datetimeToSeconds(datetime_t)>
c001b4ea:	83 c4 0c             	add    esp,0xc
c001b4ed:	52                   	push   edx
c001b4ee:	50                   	push   eax
c001b4ef:	56                   	push   esi
c001b4f0:	e8 49 8b ff ff       	call   c001403e <secondsToDatetime(unsigned long long)>
c001b4f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4fd:	51                   	push   ecx
c001b4fe:	89 d6                	mov    esi,edx
c001b500:	51                   	push   ecx
c001b501:	c1 ee 10             	shr    esi,0x10
c001b504:	89 f3                	mov    ebx,esi
c001b506:	0f b6 f3             	movzx  esi,bl
c001b509:	56                   	push   esi
c001b50a:	0f b6 f6             	movzx  esi,dh
c001b50d:	0f b6 d2             	movzx  edx,dl
c001b510:	56                   	push   esi
c001b511:	52                   	push   edx
c001b512:	89 c2                	mov    edx,eax
c001b514:	c1 ea 10             	shr    edx,0x10
c001b517:	52                   	push   edx
c001b518:	0f b6 d4             	movzx  edx,ah
c001b51b:	0f b6 c0             	movzx  eax,al
c001b51e:	52                   	push   edx
c001b51f:	50                   	push   eax
c001b520:	68 25 bd 02 c0       	push   0xc002bd25
c001b525:	e8 aa 79 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b52a:	83 c4 2c             	add    esp,0x2c
c001b52d:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001b532:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b536:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b53a:	53                   	push   ebx
c001b53b:	51                   	push   ecx
c001b53c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b542:	e8 97 8a ff ff       	call   c0013fde <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b547:	83 f0 01             	xor    eax,0x1
c001b54a:	31 d2                	xor    edx,edx
c001b54c:	0f b6 c0             	movzx  eax,al
c001b54f:	83 c4 3c             	add    esp,0x3c
c001b552:	5b                   	pop    ebx
c001b553:	5e                   	pop    esi
c001b554:	5f                   	pop    edi
c001b555:	5d                   	pop    ebp
c001b556:	c3                   	ret    

c001b557 <Sys::timezone(regs*)>:
c001b557:	53                   	push   ebx
c001b558:	83 ec 08             	sub    esp,0x8
c001b55b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b55f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b563:	75 17                	jne    c001b57c <Sys::timezone(regs*)+0x25>
c001b565:	83 ec 0c             	sub    esp,0xc
c001b568:	68 41 bd 02 c0       	push   0xc002bd41
c001b56d:	e8 62 79 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b572:	83 c8 ff             	or     eax,0xffffffff
c001b575:	83 c4 10             	add    esp,0x10
c001b578:	89 c2                	mov    edx,eax
c001b57a:	eb 20                	jmp    c001b59c <Sys::timezone(regs*)+0x45>
c001b57c:	83 ec 0c             	sub    esp,0xc
c001b57f:	68 79 bd 02 c0       	push   0xc002bd79
c001b584:	e8 4b 79 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b589:	58                   	pop    eax
c001b58a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b58d:	e8 ae 87 ff ff       	call   c0013d40 <User::loadClockSettings(int)>
c001b592:	83 c4 10             	add    esp,0x10
c001b595:	b8 01 00 00 00       	mov    eax,0x1
c001b59a:	31 d2                	xor    edx,edx
c001b59c:	83 c4 08             	add    esp,0x8
c001b59f:	5b                   	pop    ebx
c001b5a0:	c3                   	ret    

c001b5a1 <Sys::write(regs*)>:
c001b5a1:	57                   	push   edi
c001b5a2:	56                   	push   esi
c001b5a3:	53                   	push   ebx
c001b5a4:	83 ec 10             	sub    esp,0x10
c001b5a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5ae:	83 f8 02             	cmp    eax,0x2
c001b5b1:	77 10                	ja     c001b5c3 <Sys::write(regs*)+0x22>
c001b5b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5bb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b5c1:	eb 0e                	jmp    c001b5d1 <Sys::write(regs*)+0x30>
c001b5c3:	83 ec 0c             	sub    esp,0xc
c001b5c6:	50                   	push   eax
c001b5c7:	e8 7d 64 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b5cc:	83 c4 10             	add    esp,0x10
c001b5cf:	89 c1                	mov    ecx,eax
c001b5d1:	83 c8 ff             	or     eax,0xffffffff
c001b5d4:	85 c9                	test   ecx,ecx
c001b5d6:	89 c2                	mov    edx,eax
c001b5d8:	74 28                	je     c001b602 <Sys::write(regs*)+0x61>
c001b5da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5e2:	31 ff                	xor    edi,edi
c001b5e4:	83 ec 0c             	sub    esp,0xc
c001b5e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b5e9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b5ed:	52                   	push   edx
c001b5ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5f1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5f4:	57                   	push   edi
c001b5f5:	56                   	push   esi
c001b5f6:	51                   	push   ecx
c001b5f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5fe:	83 c4 20             	add    esp,0x20
c001b601:	99                   	cdq    
c001b602:	83 c4 10             	add    esp,0x10
c001b605:	5b                   	pop    ebx
c001b606:	5e                   	pop    esi
c001b607:	5f                   	pop    edi
c001b608:	c3                   	ret    

c001b609 <Sys::wsbe(regs*)>:
c001b609:	57                   	push   edi
c001b60a:	b9 0b 00 00 00       	mov    ecx,0xb
c001b60f:	56                   	push   esi
c001b610:	be b8 bd 02 c0       	mov    esi,0xc002bdb8
c001b615:	53                   	push   ebx
c001b616:	83 ec 30             	sub    esp,0x30
c001b619:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b61d:	fc                   	cld    
c001b61e:	83 ec 0c             	sub    esp,0xc
c001b621:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b623:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b627:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b62c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b62f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b635:	8b 06                	mov    eax,DWORD PTR [esi]
c001b637:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b63a:	57                   	push   edi
c001b63b:	e8 54 51 fe ff       	call   c0000794 <strlen>
c001b640:	5a                   	pop    edx
c001b641:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b645:	52                   	push   edx
c001b646:	31 d2                	xor    edx,edx
c001b648:	57                   	push   edi
c001b649:	52                   	push   edx
c001b64a:	50                   	push   eax
c001b64b:	56                   	push   esi
c001b64c:	ff d3                	call   ebx
c001b64e:	83 c4 14             	add    esp,0x14
c001b651:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b655:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b658:	e8 80 31 00 00       	call   c001e7dd <terminateTask(int)>
c001b65d:	83 c4 40             	add    esp,0x40
c001b660:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b665:	5b                   	pop    ebx
c001b666:	31 d2                	xor    edx,edx
c001b668:	5e                   	pop    esi
c001b669:	5f                   	pop    edi
c001b66a:	c3                   	ret    

c001b66b <Sys::yield(regs*)>:
c001b66b:	57                   	push   edi
c001b66c:	56                   	push   esi
c001b66d:	53                   	push   ebx
c001b66e:	e8 27 27 00 00       	call   c001dd9a <lockScheduler()>
c001b673:	e8 5e 2a 00 00       	call   c001e0d6 <schedule()>
c001b678:	e8 1f 27 00 00       	call   c001dd9c <unlockScheduler()>
c001b67d:	8b 35 70 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea70
c001b683:	8b 3d 74 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea74
c001b689:	89 f0                	mov    eax,esi
c001b68b:	89 fb                	mov    ebx,edi
c001b68d:	89 f1                	mov    ecx,esi
c001b68f:	c1 e0 07             	shl    eax,0x7
c001b692:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b696:	25 80 30 0f 00       	and    eax,0xf3080
c001b69b:	c1 eb 17             	shr    ebx,0x17
c001b69e:	31 c8                	xor    eax,ecx
c001b6a0:	89 da                	mov    edx,ebx
c001b6a2:	5b                   	pop    ebx
c001b6a3:	5e                   	pop    esi
c001b6a4:	5f                   	pop    edi
c001b6a5:	c3                   	ret    

c001b6a6 <sysCallSeekDir(regs*)>:
c001b6a6:	31 c0                	xor    eax,eax
c001b6a8:	31 d2                	xor    edx,edx
c001b6aa:	c3                   	ret    

c001b6ab <sysCallTellDir(regs*)>:
c001b6ab:	31 c0                	xor    eax,eax
c001b6ad:	31 d2                	xor    edx,edx
c001b6af:	c3                   	ret    

c001b6b0 <sysCallVerify(regs*)>:
c001b6b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6b4:	31 d2                	xor    edx,edx
c001b6b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6b9:	c3                   	ret    

c001b6ba <sysFormatDisk(regs*)>:
c001b6ba:	56                   	push   esi
c001b6bb:	53                   	push   ebx
c001b6bc:	53                   	push   ebx
c001b6bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6c1:	8b 1d 6c e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e56c
c001b6c7:	eb 25                	jmp    c001b6ee <sysFormatDisk(regs*)+0x34>
c001b6c9:	83 ec 0c             	sub    esp,0xc
c001b6cc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6d1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b6d4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b6d7:	50                   	push   eax
c001b6d8:	ff 34 85 00 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1600]
c001b6df:	53                   	push   ebx
c001b6e0:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b6e3:	83 c4 20             	add    esp,0x20
c001b6e6:	83 f8 08             	cmp    eax,0x8
c001b6e9:	75 12                	jne    c001b6fd <sysFormatDisk(regs*)+0x43>
c001b6eb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6ee:	85 db                	test   ebx,ebx
c001b6f0:	75 d7                	jne    c001b6c9 <sysFormatDisk(regs*)+0xf>
c001b6f2:	59                   	pop    ecx
c001b6f3:	b8 03 00 00 00       	mov    eax,0x3
c001b6f8:	31 d2                	xor    edx,edx
c001b6fa:	5b                   	pop    ebx
c001b6fb:	5e                   	pop    esi
c001b6fc:	c3                   	ret    
c001b6fd:	85 c0                	test   eax,eax
c001b6ff:	74 1b                	je     c001b71c <sysFormatDisk(regs*)+0x62>
c001b701:	83 f8 09             	cmp    eax,0x9
c001b704:	74 0b                	je     c001b711 <sysFormatDisk(regs*)+0x57>
c001b706:	59                   	pop    ecx
c001b707:	b8 02 00 00 00       	mov    eax,0x2
c001b70c:	31 d2                	xor    edx,edx
c001b70e:	5b                   	pop    ebx
c001b70f:	5e                   	pop    esi
c001b710:	c3                   	ret    
c001b711:	59                   	pop    ecx
c001b712:	b8 01 00 00 00       	mov    eax,0x1
c001b717:	31 d2                	xor    edx,edx
c001b719:	5b                   	pop    ebx
c001b71a:	5e                   	pop    esi
c001b71b:	c3                   	ret    
c001b71c:	59                   	pop    ecx
c001b71d:	31 c0                	xor    eax,eax
c001b71f:	31 d2                	xor    edx,edx
c001b721:	5b                   	pop    ebx
c001b722:	5e                   	pop    esi
c001b723:	c3                   	ret    

c001b724 <sysSetDiskVolumeLabel(regs*)>:
c001b724:	56                   	push   esi
c001b725:	53                   	push   ebx
c001b726:	53                   	push   ebx
c001b727:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b72b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b72e:	83 f8 19             	cmp    eax,0x19
c001b731:	77 29                	ja     c001b75c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b733:	8b 0c 85 00 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1600]
c001b73a:	85 c9                	test   ecx,ecx
c001b73c:	74 1e                	je     c001b75c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b73e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b741:	85 d2                	test   edx,edx
c001b743:	74 17                	je     c001b75c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b745:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b74b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b74d:	52                   	push   edx
c001b74e:	50                   	push   eax
c001b74f:	51                   	push   ecx
c001b750:	53                   	push   ebx
c001b751:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b754:	83 c4 10             	add    esp,0x10
c001b757:	99                   	cdq    
c001b758:	59                   	pop    ecx
c001b759:	5b                   	pop    ebx
c001b75a:	5e                   	pop    esi
c001b75b:	c3                   	ret    
c001b75c:	59                   	pop    ecx
c001b75d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b762:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b767:	5b                   	pop    ebx
c001b768:	5e                   	pop    esi
c001b769:	c3                   	ret    

c001b76a <sysGetDiskVolumeLabel(regs*)>:
c001b76a:	57                   	push   edi
c001b76b:	56                   	push   esi
c001b76c:	53                   	push   ebx
c001b76d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b771:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b774:	83 fa 19             	cmp    edx,0x19
c001b777:	77 34                	ja     c001b7ad <sysGetDiskVolumeLabel(regs*)+0x43>
c001b779:	8b 0c 95 00 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1600]
c001b780:	85 c9                	test   ecx,ecx
c001b782:	74 29                	je     c001b7ad <sysGetDiskVolumeLabel(regs*)+0x43>
c001b784:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b787:	85 db                	test   ebx,ebx
c001b789:	74 22                	je     c001b7ad <sysGetDiskVolumeLabel(regs*)+0x43>
c001b78b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b78e:	85 c0                	test   eax,eax
c001b790:	74 1b                	je     c001b7ad <sysGetDiskVolumeLabel(regs*)+0x43>
c001b792:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b798:	83 ec 0c             	sub    esp,0xc
c001b79b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b79d:	50                   	push   eax
c001b79e:	53                   	push   ebx
c001b79f:	52                   	push   edx
c001b7a0:	51                   	push   ecx
c001b7a1:	56                   	push   esi
c001b7a2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7a5:	83 c4 20             	add    esp,0x20
c001b7a8:	99                   	cdq    
c001b7a9:	5b                   	pop    ebx
c001b7aa:	5e                   	pop    esi
c001b7ab:	5f                   	pop    edi
c001b7ac:	c3                   	ret    
c001b7ad:	5b                   	pop    ebx
c001b7ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7b8:	5e                   	pop    esi
c001b7b9:	5f                   	pop    edi
c001b7ba:	c3                   	ret    

c001b7bb <sysShutdown(regs*)>:
c001b7bb:	83 ec 0c             	sub    esp,0xc
c001b7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7c5:	85 c0                	test   eax,eax
c001b7c7:	74 18                	je     c001b7e1 <sysShutdown(regs*)+0x26>
c001b7c9:	83 f8 01             	cmp    eax,0x1
c001b7cc:	74 38                	je     c001b806 <sysShutdown(regs*)+0x4b>
c001b7ce:	83 f8 02             	cmp    eax,0x2
c001b7d1:	74 24                	je     c001b7f7 <sysShutdown(regs*)+0x3c>
c001b7d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7dd:	83 c4 0c             	add    esp,0xc
c001b7e0:	c3                   	ret    
c001b7e1:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001b7e6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7e8:	6a 00                	push   0x0
c001b7ea:	6a 00                	push   0x0
c001b7ec:	6a 00                	push   0x0
c001b7ee:	50                   	push   eax
c001b7ef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7f2:	83 c4 10             	add    esp,0x10
c001b7f5:	eb dc                	jmp    c001b7d3 <sysShutdown(regs*)+0x18>
c001b7f7:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001b7fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7fe:	6a 00                	push   0x0
c001b800:	6a 00                	push   0x0
c001b802:	6a 01                	push   0x1
c001b804:	eb e8                	jmp    c001b7ee <sysShutdown(regs*)+0x33>
c001b806:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001b80b:	85 c0                	test   eax,eax
c001b80d:	74 02                	je     c001b811 <sysShutdown(regs*)+0x56>
c001b80f:	ff d0                	call   eax
c001b811:	31 c0                	xor    eax,eax
c001b813:	31 d2                	xor    edx,edx
c001b815:	83 c4 0c             	add    esp,0xc
c001b818:	c3                   	ret    

c001b819 <sysCallRealpath(regs*)>:
c001b819:	83 ec 0c             	sub    esp,0xc
c001b81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b820:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b823:	85 d2                	test   edx,edx
c001b825:	74 07                	je     c001b82e <sysCallRealpath(regs*)+0x15>
c001b827:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b82a:	85 c0                	test   eax,eax
c001b82c:	75 0b                	jne    c001b839 <sysCallRealpath(regs*)+0x20>
c001b82e:	b8 01 00 00 00       	mov    eax,0x1
c001b833:	31 d2                	xor    edx,edx
c001b835:	83 c4 0c             	add    esp,0xc
c001b838:	c3                   	ret    
c001b839:	51                   	push   ecx
c001b83a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b840:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b843:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b849:	51                   	push   ecx
c001b84a:	52                   	push   edx
c001b84b:	50                   	push   eax
c001b84c:	e8 31 7a ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b851:	83 c4 10             	add    esp,0x10
c001b854:	31 c0                	xor    eax,eax
c001b856:	31 d2                	xor    edx,edx
c001b858:	83 c4 0c             	add    esp,0xc
c001b85b:	c3                   	ret    

c001b85c <sysCallGetArgc(regs*)>:
c001b85c:	83 ec 14             	sub    esp,0x14
c001b85f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b864:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b867:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b86d:	68 e4 bd 02 c0       	push   0xc002bde4
c001b872:	e8 5d 76 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b877:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b87c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b87f:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b885:	83 c4 1c             	add    esp,0x1c
c001b888:	99                   	cdq    
c001b889:	c3                   	ret    

c001b88a <sysCallReadDir(regs*)>:
c001b88a:	53                   	push   ebx
c001b88b:	83 ec 18             	sub    esp,0x18
c001b88e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b892:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b895:	83 f8 02             	cmp    eax,0x2
c001b898:	76 53                	jbe    c001b8ed <sysCallReadDir(regs*)+0x63>
c001b89a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b89d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8a3:	77 4f                	ja     c001b8f4 <sysCallReadDir(regs*)+0x6a>
c001b8a5:	83 ec 0c             	sub    esp,0xc
c001b8a8:	50                   	push   eax
c001b8a9:	e8 9b 61 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b8ae:	83 c4 10             	add    esp,0x10
c001b8b1:	85 c0                	test   eax,eax
c001b8b3:	74 50                	je     c001b905 <sysCallReadDir(regs*)+0x7b>
c001b8b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8bd:	83 ec 0c             	sub    esp,0xc
c001b8c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8c2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b8c6:	51                   	push   ecx
c001b8c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8ca:	6a 00                	push   0x0
c001b8cc:	68 10 01 00 00       	push   0x110
c001b8d1:	50                   	push   eax
c001b8d2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8d5:	83 c4 20             	add    esp,0x20
c001b8d8:	85 c0                	test   eax,eax
c001b8da:	74 38                	je     c001b914 <sysCallReadDir(regs*)+0x8a>
c001b8dc:	83 f8 07             	cmp    eax,0x7
c001b8df:	74 0c                	je     c001b8ed <sysCallReadDir(regs*)+0x63>
c001b8e1:	b8 02 00 00 00       	mov    eax,0x2
c001b8e6:	31 d2                	xor    edx,edx
c001b8e8:	83 c4 18             	add    esp,0x18
c001b8eb:	5b                   	pop    ebx
c001b8ec:	c3                   	ret    
c001b8ed:	b8 01 00 00 00       	mov    eax,0x1
c001b8f2:	eb f2                	jmp    c001b8e6 <sysCallReadDir(regs*)+0x5c>
c001b8f4:	83 ec 08             	sub    esp,0x8
c001b8f7:	52                   	push   edx
c001b8f8:	68 fc be 02 c0       	push   0xc002befc
c001b8fd:	e8 d2 75 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b902:	83 c4 10             	add    esp,0x10
c001b905:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b90a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b90f:	83 c4 18             	add    esp,0x18
c001b912:	5b                   	pop    ebx
c001b913:	c3                   	ret    
c001b914:	31 c0                	xor    eax,eax
c001b916:	eb ce                	jmp    c001b8e6 <sysCallReadDir(regs*)+0x5c>

c001b918 <sysCallIsATTY(regs*)>:
c001b918:	83 ec 0c             	sub    esp,0xc
c001b91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b922:	83 f8 02             	cmp    eax,0x2
c001b925:	76 07                	jbe    c001b92e <sysCallIsATTY(regs*)+0x16>
c001b927:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b92c:	75 26                	jne    c001b954 <sysCallIsATTY(regs*)+0x3c>
c001b92e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b933:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b936:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b93c:	85 c0                	test   eax,eax
c001b93e:	74 24                	je     c001b964 <sysCallIsATTY(regs*)+0x4c>
c001b940:	83 ec 0c             	sub    esp,0xc
c001b943:	8b 10                	mov    edx,DWORD PTR [eax]
c001b945:	50                   	push   eax
c001b946:	ff 12                	call   DWORD PTR [edx]
c001b948:	31 d2                	xor    edx,edx
c001b94a:	0f b6 c0             	movzx  eax,al
c001b94d:	83 c4 10             	add    esp,0x10
c001b950:	83 c4 0c             	add    esp,0xc
c001b953:	c3                   	ret    
c001b954:	83 ec 0c             	sub    esp,0xc
c001b957:	50                   	push   eax
c001b958:	e8 ec 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b95d:	83 c4 10             	add    esp,0x10
c001b960:	85 c0                	test   eax,eax
c001b962:	75 dc                	jne    c001b940 <sysCallIsATTY(regs*)+0x28>
c001b964:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b969:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b96e:	83 c4 0c             	add    esp,0xc
c001b971:	c3                   	ret    

c001b972 <sysCallSeek(regs*)>:
c001b972:	53                   	push   ebx
c001b973:	83 ec 08             	sub    esp,0x8
c001b976:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b97a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b97d:	83 f8 02             	cmp    eax,0x2
c001b980:	76 4a                	jbe    c001b9cc <sysCallSeek(regs*)+0x5a>
c001b982:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b987:	77 32                	ja     c001b9bb <sysCallSeek(regs*)+0x49>
c001b989:	83 ec 0c             	sub    esp,0xc
c001b98c:	50                   	push   eax
c001b98d:	e8 b7 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b992:	83 c4 0c             	add    esp,0xc
c001b995:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b998:	31 db                	xor    ebx,ebx
c001b99a:	53                   	push   ebx
c001b99b:	51                   	push   ecx
c001b99c:	50                   	push   eax
c001b99d:	e8 ac 7b ff ff       	call   c001354e <File::seek(unsigned long long)>
c001b9a2:	83 c4 10             	add    esp,0x10
c001b9a5:	85 c0                	test   eax,eax
c001b9a7:	0f 95 c0             	setne  al
c001b9aa:	31 d2                	xor    edx,edx
c001b9ac:	0f b6 c0             	movzx  eax,al
c001b9af:	f7 d8                	neg    eax
c001b9b1:	83 d2 00             	adc    edx,0x0
c001b9b4:	83 c4 08             	add    esp,0x8
c001b9b7:	f7 da                	neg    edx
c001b9b9:	5b                   	pop    ebx
c001b9ba:	c3                   	ret    
c001b9bb:	83 ec 08             	sub    esp,0x8
c001b9be:	50                   	push   eax
c001b9bf:	68 ef bd 02 c0       	push   0xc002bdef
c001b9c4:	e8 0b 75 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9d6:	83 c4 08             	add    esp,0x8
c001b9d9:	5b                   	pop    ebx
c001b9da:	c3                   	ret    

c001b9db <sysCallTell(regs*)>:
c001b9db:	53                   	push   ebx
c001b9dc:	83 ec 08             	sub    esp,0x8
c001b9df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9e6:	83 f8 02             	cmp    eax,0x2
c001b9e9:	76 5e                	jbe    c001ba49 <sysCallTell(regs*)+0x6e>
c001b9eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9f0:	77 2d                	ja     c001ba1f <sysCallTell(regs*)+0x44>
c001b9f2:	83 ec 0c             	sub    esp,0xc
c001b9f5:	50                   	push   eax
c001b9f6:	e8 4e 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b9fb:	5a                   	pop    edx
c001b9fc:	59                   	pop    ecx
c001b9fd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba00:	50                   	push   eax
c001ba01:	e8 9e 7b ff ff       	call   c00135a4 <File::tell(unsigned long long*)>
c001ba06:	83 c4 10             	add    esp,0x10
c001ba09:	85 c0                	test   eax,eax
c001ba0b:	0f 95 c0             	setne  al
c001ba0e:	31 d2                	xor    edx,edx
c001ba10:	0f b6 c0             	movzx  eax,al
c001ba13:	f7 d8                	neg    eax
c001ba15:	83 d2 00             	adc    edx,0x0
c001ba18:	83 c4 08             	add    esp,0x8
c001ba1b:	f7 da                	neg    edx
c001ba1d:	5b                   	pop    ebx
c001ba1e:	c3                   	ret    
c001ba1f:	83 ec 08             	sub    esp,0x8
c001ba22:	50                   	push   eax
c001ba23:	68 09 be 02 c0       	push   0xc002be09
c001ba28:	e8 a7 74 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001ba2d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba30:	83 c4 10             	add    esp,0x10
c001ba33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba40:	31 d2                	xor    edx,edx
c001ba42:	31 c0                	xor    eax,eax
c001ba44:	83 c4 08             	add    esp,0x8
c001ba47:	5b                   	pop    ebx
c001ba48:	c3                   	ret    
c001ba49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba53:	83 c4 08             	add    esp,0x8
c001ba56:	5b                   	pop    ebx
c001ba57:	c3                   	ret    

c001ba58 <sysCallSize(regs*)>:
c001ba58:	53                   	push   ebx
c001ba59:	83 ec 18             	sub    esp,0x18
c001ba5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba60:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba63:	83 f8 02             	cmp    eax,0x2
c001ba66:	76 64                	jbe    c001bacc <sysCallSize(regs*)+0x74>
c001ba68:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba6d:	77 33                	ja     c001baa2 <sysCallSize(regs*)+0x4a>
c001ba6f:	83 ec 0c             	sub    esp,0xc
c001ba72:	50                   	push   eax
c001ba73:	e8 d1 5f ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001ba78:	83 c4 0c             	add    esp,0xc
c001ba7b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba7f:	52                   	push   edx
c001ba80:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba83:	50                   	push   eax
c001ba84:	e8 b3 7c ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001ba89:	83 c4 10             	add    esp,0x10
c001ba8c:	85 c0                	test   eax,eax
c001ba8e:	0f 95 c0             	setne  al
c001ba91:	31 d2                	xor    edx,edx
c001ba93:	0f b6 c0             	movzx  eax,al
c001ba96:	f7 d8                	neg    eax
c001ba98:	83 d2 00             	adc    edx,0x0
c001ba9b:	83 c4 18             	add    esp,0x18
c001ba9e:	f7 da                	neg    edx
c001baa0:	5b                   	pop    ebx
c001baa1:	c3                   	ret    
c001baa2:	83 ec 08             	sub    esp,0x8
c001baa5:	50                   	push   eax
c001baa6:	68 23 be 02 c0       	push   0xc002be23
c001baab:	e8 24 74 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001bab0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bab3:	83 c4 10             	add    esp,0x10
c001bab6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001babc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bac3:	31 d2                	xor    edx,edx
c001bac5:	31 c0                	xor    eax,eax
c001bac7:	83 c4 18             	add    esp,0x18
c001baca:	5b                   	pop    ebx
c001bacb:	c3                   	ret    
c001bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad6:	83 c4 18             	add    esp,0x18
c001bad9:	5b                   	pop    ebx
c001bada:	c3                   	ret    

c001badb <sysCallSizeFromFilename(regs*)>:
c001badb:	57                   	push   edi
c001badc:	56                   	push   esi
c001badd:	53                   	push   ebx
c001bade:	83 ec 20             	sub    esp,0x20
c001bae1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bae5:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bae8:	83 fb 02             	cmp    ebx,0x2
c001baeb:	0f 86 99 00 00 00    	jbe    c001bb8a <sysCallSizeFromFilename(regs*)+0xaf>
c001baf1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001baf7:	77 65                	ja     c001bb5e <sysCallSizeFromFilename(regs*)+0x83>
c001baf9:	83 ec 0c             	sub    esp,0xc
c001bafc:	68 14 01 00 00       	push   0x114
c001bb01:	e8 3a 3d ff ff       	call   c000f840 <malloc>
c001bb06:	83 c4 0c             	add    esp,0xc
c001bb09:	89 c6                	mov    esi,eax
c001bb0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb10:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb13:	53                   	push   ebx
c001bb14:	56                   	push   esi
c001bb15:	e8 12 79 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001bb1a:	83 c4 0c             	add    esp,0xc
c001bb1d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb21:	50                   	push   eax
c001bb22:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb25:	56                   	push   esi
c001bb26:	e8 11 7c ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	85 f6                	test   esi,esi
c001bb30:	74 14                	je     c001bb46 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb36:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb38:	83 ec 0c             	sub    esp,0xc
c001bb3b:	56                   	push   esi
c001bb3c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb3f:	83 c4 10             	add    esp,0x10
c001bb42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb46:	85 c0                	test   eax,eax
c001bb48:	0f 95 c0             	setne  al
c001bb4b:	31 d2                	xor    edx,edx
c001bb4d:	0f b6 c0             	movzx  eax,al
c001bb50:	f7 d8                	neg    eax
c001bb52:	83 d2 00             	adc    edx,0x0
c001bb55:	83 c4 20             	add    esp,0x20
c001bb58:	f7 da                	neg    edx
c001bb5a:	5b                   	pop    ebx
c001bb5b:	5e                   	pop    esi
c001bb5c:	5f                   	pop    edi
c001bb5d:	c3                   	ret    
c001bb5e:	83 ec 08             	sub    esp,0x8
c001bb61:	53                   	push   ebx
c001bb62:	68 23 be 02 c0       	push   0xc002be23
c001bb67:	e8 68 73 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001bb6c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb6f:	83 c4 10             	add    esp,0x10
c001bb72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb7f:	31 d2                	xor    edx,edx
c001bb81:	83 c4 20             	add    esp,0x20
c001bb84:	31 c0                	xor    eax,eax
c001bb86:	5b                   	pop    ebx
c001bb87:	5e                   	pop    esi
c001bb88:	5f                   	pop    edi
c001bb89:	c3                   	ret    
c001bb8a:	83 c4 20             	add    esp,0x20
c001bb8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb92:	5b                   	pop    ebx
c001bb93:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb98:	5e                   	pop    esi
c001bb99:	5f                   	pop    edi
c001bb9a:	c3                   	ret    

c001bb9b <sysCallClose(regs*)>:
c001bb9b:	53                   	push   ebx
c001bb9c:	83 ec 08             	sub    esp,0x8
c001bb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bba6:	83 f8 02             	cmp    eax,0x2
c001bba9:	76 50                	jbe    c001bbfb <sysCallClose(regs*)+0x60>
c001bbab:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbb0:	74 58                	je     c001bc0a <sysCallClose(regs*)+0x6f>
c001bbb2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbb7:	74 60                	je     c001bc19 <sysCallClose(regs*)+0x7e>
c001bbb9:	77 2f                	ja     c001bbea <sysCallClose(regs*)+0x4f>
c001bbbb:	83 ec 0c             	sub    esp,0xc
c001bbbe:	50                   	push   eax
c001bbbf:	e8 85 5e ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bbc4:	89 c3                	mov    ebx,eax
c001bbc6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbc9:	e8 20 79 ff ff       	call   c00134ee <File::close()>
c001bbce:	83 c4 10             	add    esp,0x10
c001bbd1:	85 db                	test   ebx,ebx
c001bbd3:	74 0c                	je     c001bbe1 <sysCallClose(regs*)+0x46>
c001bbd5:	83 ec 0c             	sub    esp,0xc
c001bbd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbda:	53                   	push   ebx
c001bbdb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbde:	83 c4 10             	add    esp,0x10
c001bbe1:	31 c0                	xor    eax,eax
c001bbe3:	31 d2                	xor    edx,edx
c001bbe5:	83 c4 08             	add    esp,0x8
c001bbe8:	5b                   	pop    ebx
c001bbe9:	c3                   	ret    
c001bbea:	83 ec 08             	sub    esp,0x8
c001bbed:	50                   	push   eax
c001bbee:	68 20 bf 02 c0       	push   0xc002bf20
c001bbf3:	e8 dc 72 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001bbf8:	83 c4 10             	add    esp,0x10
c001bbfb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc00:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc05:	83 c4 08             	add    esp,0x8
c001bc08:	5b                   	pop    ebx
c001bc09:	c3                   	ret    
c001bc0a:	83 ec 0c             	sub    esp,0xc
c001bc0d:	68 3e be 02 c0       	push   0xc002be3e
c001bc12:	e8 bd 72 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001bc17:	eb c5                	jmp    c001bbde <sysCallClose(regs*)+0x43>
c001bc19:	83 ec 0c             	sub    esp,0xc
c001bc1c:	68 4c be 02 c0       	push   0xc002be4c
c001bc21:	eb ef                	jmp    c001bc12 <sysCallClose(regs*)+0x77>

c001bc23 <sysCallOpenDir(regs*)>:
c001bc23:	56                   	push   esi
c001bc24:	53                   	push   ebx
c001bc25:	53                   	push   ebx
c001bc26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc2a:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc2d:	85 f6                	test   esi,esi
c001bc2f:	74 59                	je     c001bc8a <sysCallOpenDir(regs*)+0x67>
c001bc31:	83 ec 0c             	sub    esp,0xc
c001bc34:	68 14 01 00 00       	push   0x114
c001bc39:	e8 02 3c ff ff       	call   c000f840 <malloc>
c001bc3e:	83 c4 0c             	add    esp,0xc
c001bc41:	89 c6                	mov    esi,eax
c001bc43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc48:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc4b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc4e:	56                   	push   esi
c001bc4f:	e8 84 7c ff ff       	call   c00138d8 <Directory::Directory(char const*, Process*)>
c001bc54:	83 c4 10             	add    esp,0x10
c001bc57:	85 f6                	test   esi,esi
c001bc59:	74 2f                	je     c001bc8a <sysCallOpenDir(regs*)+0x67>
c001bc5b:	83 ec 0c             	sub    esp,0xc
c001bc5e:	56                   	push   esi
c001bc5f:	e8 d8 7c ff ff       	call   c001393c <Directory::open()>
c001bc64:	83 c4 10             	add    esp,0x10
c001bc67:	85 c0                	test   eax,eax
c001bc69:	75 1f                	jne    c001bc8a <sysCallOpenDir(regs*)+0x67>
c001bc6b:	83 ec 0c             	sub    esp,0xc
c001bc6e:	56                   	push   esi
c001bc6f:	e8 e0 5a ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001bc74:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	89 02                	mov    DWORD PTR [edx],eax
c001bc7c:	c1 f8 1f             	sar    eax,0x1f
c001bc7f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc82:	31 c0                	xor    eax,eax
c001bc84:	59                   	pop    ecx
c001bc85:	31 d2                	xor    edx,edx
c001bc87:	5b                   	pop    ebx
c001bc88:	5e                   	pop    esi
c001bc89:	c3                   	ret    
c001bc8a:	59                   	pop    ecx
c001bc8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc90:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc95:	5b                   	pop    ebx
c001bc96:	5e                   	pop    esi
c001bc97:	c3                   	ret    

c001bc98 <sysCallCloseDir(regs*)>:
c001bc98:	53                   	push   ebx
c001bc99:	83 ec 08             	sub    esp,0x8
c001bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bca3:	83 f8 02             	cmp    eax,0x2
c001bca6:	76 47                	jbe    c001bcef <sysCallCloseDir(regs*)+0x57>
c001bca8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcad:	77 2f                	ja     c001bcde <sysCallCloseDir(regs*)+0x46>
c001bcaf:	83 ec 0c             	sub    esp,0xc
c001bcb2:	50                   	push   eax
c001bcb3:	e8 91 5d ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bcb8:	89 c3                	mov    ebx,eax
c001bcba:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcbd:	e8 d6 7c ff ff       	call   c0013998 <Directory::close()>
c001bcc2:	83 c4 10             	add    esp,0x10
c001bcc5:	85 db                	test   ebx,ebx
c001bcc7:	74 0c                	je     c001bcd5 <sysCallCloseDir(regs*)+0x3d>
c001bcc9:	83 ec 0c             	sub    esp,0xc
c001bccc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcce:	53                   	push   ebx
c001bccf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcd2:	83 c4 10             	add    esp,0x10
c001bcd5:	31 c0                	xor    eax,eax
c001bcd7:	31 d2                	xor    edx,edx
c001bcd9:	83 c4 08             	add    esp,0x8
c001bcdc:	5b                   	pop    ebx
c001bcdd:	c3                   	ret    
c001bcde:	83 ec 08             	sub    esp,0x8
c001bce1:	50                   	push   eax
c001bce2:	68 48 bf 02 c0       	push   0xc002bf48
c001bce7:	e8 e8 71 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001bcec:	83 c4 10             	add    esp,0x10
c001bcef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcf4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcf9:	83 c4 08             	add    esp,0x8
c001bcfc:	5b                   	pop    ebx
c001bcfd:	c3                   	ret    

c001bcfe <sysCallMakeDir(regs*)>:
c001bcfe:	56                   	push   esi
c001bcff:	53                   	push   ebx
c001bd00:	83 ec 10             	sub    esp,0x10
c001bd03:	68 14 01 00 00       	push   0x114
c001bd08:	e8 33 3b ff ff       	call   c000f840 <malloc>
c001bd0d:	83 c4 0c             	add    esp,0xc
c001bd10:	89 c3                	mov    ebx,eax
c001bd12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd17:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd1e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd21:	53                   	push   ebx
c001bd22:	e8 b1 7b ff ff       	call   c00138d8 <Directory::Directory(char const*, Process*)>
c001bd27:	83 c4 10             	add    esp,0x10
c001bd2a:	85 db                	test   ebx,ebx
c001bd2c:	74 32                	je     c001bd60 <sysCallMakeDir(regs*)+0x62>
c001bd2e:	83 ec 0c             	sub    esp,0xc
c001bd31:	53                   	push   ebx
c001bd32:	e8 e5 7d ff ff       	call   c0013b1c <Directory::create()>
c001bd37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd3a:	89 c6                	mov    esi,eax
c001bd3c:	e8 57 7c ff ff       	call   c0013998 <Directory::close()>
c001bd41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd49:	83 c4 10             	add    esp,0x10
c001bd4c:	31 c0                	xor    eax,eax
c001bd4e:	59                   	pop    ecx
c001bd4f:	85 f6                	test   esi,esi
c001bd51:	5b                   	pop    ebx
c001bd52:	0f 95 c0             	setne  al
c001bd55:	5e                   	pop    esi
c001bd56:	31 d2                	xor    edx,edx
c001bd58:	f7 d8                	neg    eax
c001bd5a:	83 d2 00             	adc    edx,0x0
c001bd5d:	f7 da                	neg    edx
c001bd5f:	c3                   	ret    
c001bd60:	59                   	pop    ecx
c001bd61:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd66:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd6b:	5b                   	pop    ebx
c001bd6c:	5e                   	pop    esi
c001bd6d:	c3                   	ret    

c001bd6e <sysCallWait(regs*)>:
c001bd6e:	83 ec 10             	sub    esp,0x10
c001bd71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd75:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd78:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd7b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd7e:	e8 ce 24 00 00       	call   c001e251 <waitTask(int, int*, int)>
c001bd83:	83 c4 1c             	add    esp,0x1c
c001bd86:	99                   	cdq    
c001bd87:	c3                   	ret    

c001bd88 <sysCallNotImpl(regs*)>:
c001bd88:	83 ec 18             	sub    esp,0x18
c001bd8b:	68 5a be 02 c0       	push   0xc002be5a
c001bd90:	e8 e0 e7 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001bd95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd9f:	83 c4 1c             	add    esp,0x1c
c001bda2:	c3                   	ret    

c001bda3 <sysPanic(regs*)>:
c001bda3:	83 ec 18             	sub    esp,0x18
c001bda6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdaa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdad:	e8 c3 e7 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001bdb2:	c7 04 24 74 be 02 c0 	mov    DWORD PTR [esp],0xc002be74
c001bdb9:	e8 b7 e7 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001bdbe:	b8 01 00 00 00       	mov    eax,0x1
c001bdc3:	31 d2                	xor    edx,edx
c001bdc5:	83 c4 1c             	add    esp,0x1c
c001bdc8:	c3                   	ret    

c001bdc9 <sysCallRmdir(regs*)>:
c001bdc9:	56                   	push   esi
c001bdca:	53                   	push   ebx
c001bdcb:	83 ec 20             	sub    esp,0x20
c001bdce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdd2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdd5:	68 14 01 00 00       	push   0x114
c001bdda:	e8 61 3a ff ff       	call   c000f840 <malloc>
c001bddf:	83 c4 0c             	add    esp,0xc
c001bde2:	89 c3                	mov    ebx,eax
c001bde4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdec:	56                   	push   esi
c001bded:	53                   	push   ebx
c001bdee:	e8 39 76 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001bdf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdf6:	e8 0d 78 ff ff       	call   c0013608 <File::unlink()>
c001bdfb:	83 c4 10             	add    esp,0x10
c001bdfe:	85 db                	test   ebx,ebx
c001be00:	74 14                	je     c001be16 <sysCallRmdir(regs*)+0x4d>
c001be02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be06:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be08:	83 ec 0c             	sub    esp,0xc
c001be0b:	53                   	push   ebx
c001be0c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be0f:	83 c4 10             	add    esp,0x10
c001be12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be16:	85 c0                	test   eax,eax
c001be18:	0f 95 c0             	setne  al
c001be1b:	31 d2                	xor    edx,edx
c001be1d:	0f b6 c0             	movzx  eax,al
c001be20:	f7 d8                	neg    eax
c001be22:	83 d2 00             	adc    edx,0x0
c001be25:	83 c4 14             	add    esp,0x14
c001be28:	f7 da                	neg    edx
c001be2a:	5b                   	pop    ebx
c001be2b:	5e                   	pop    esi
c001be2c:	c3                   	ret    

c001be2d <sysCallUnlink(regs*)>:
c001be2d:	56                   	push   esi
c001be2e:	53                   	push   ebx
c001be2f:	83 ec 20             	sub    esp,0x20
c001be32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be36:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be39:	68 14 01 00 00       	push   0x114
c001be3e:	e8 fd 39 ff ff       	call   c000f840 <malloc>
c001be43:	83 c4 0c             	add    esp,0xc
c001be46:	89 c3                	mov    ebx,eax
c001be48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be4d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be50:	56                   	push   esi
c001be51:	53                   	push   ebx
c001be52:	e8 d5 75 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001be57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be5a:	e8 a9 77 ff ff       	call   c0013608 <File::unlink()>
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	85 db                	test   ebx,ebx
c001be64:	74 14                	je     c001be7a <sysCallUnlink(regs*)+0x4d>
c001be66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be6a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be6c:	83 ec 0c             	sub    esp,0xc
c001be6f:	53                   	push   ebx
c001be70:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be73:	83 c4 10             	add    esp,0x10
c001be76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be7a:	85 c0                	test   eax,eax
c001be7c:	0f 95 c0             	setne  al
c001be7f:	31 d2                	xor    edx,edx
c001be81:	0f b6 c0             	movzx  eax,al
c001be84:	f7 d8                	neg    eax
c001be86:	83 d2 00             	adc    edx,0x0
c001be89:	83 c4 14             	add    esp,0x14
c001be8c:	f7 da                	neg    edx
c001be8e:	5b                   	pop    ebx
c001be8f:	5e                   	pop    esi
c001be90:	c3                   	ret    

c001be91 <sysCallGetArgv(regs*)>:
c001be91:	83 ec 0c             	sub    esp,0xc
c001be94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be98:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be9b:	85 c0                	test   eax,eax
c001be9d:	78 2b                	js     c001beca <sysCallGetArgv(regs*)+0x39>
c001be9f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bea5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bea8:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001beae:	7d 1a                	jge    c001beca <sysCallGetArgv(regs*)+0x39>
c001beb0:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001beb7:	85 c0                	test   eax,eax
c001beb9:	74 17                	je     c001bed2 <sysCallGetArgv(regs*)+0x41>
c001bebb:	83 ec 08             	sub    esp,0x8
c001bebe:	50                   	push   eax
c001bebf:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bec2:	e8 6d 49 fe ff       	call   c0000834 <strcpy>
c001bec7:	83 c4 10             	add    esp,0x10
c001beca:	31 c0                	xor    eax,eax
c001becc:	31 d2                	xor    edx,edx
c001bece:	83 c4 0c             	add    esp,0xc
c001bed1:	c3                   	ret    
c001bed2:	b8 01 00 00 00       	mov    eax,0x1
c001bed7:	31 d2                	xor    edx,edx
c001bed9:	83 c4 0c             	add    esp,0xc
c001bedc:	c3                   	ret    

c001bedd <sysCallTTYName(regs*)>:
c001bedd:	56                   	push   esi
c001bede:	53                   	push   ebx
c001bedf:	53                   	push   ebx
c001bee0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bee4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bee7:	85 c0                	test   eax,eax
c001bee9:	74 5f                	je     c001bf4a <sysCallTTYName(regs*)+0x6d>
c001beeb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001beee:	83 f8 02             	cmp    eax,0x2
c001bef1:	77 3e                	ja     c001bf31 <sysCallTTYName(regs*)+0x54>
c001bef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001befb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf01:	85 db                	test   ebx,ebx
c001bf03:	74 45                	je     c001bf4a <sysCallTTYName(regs*)+0x6d>
c001bf05:	83 ec 0c             	sub    esp,0xc
c001bf08:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf0a:	53                   	push   ebx
c001bf0b:	ff 10                	call   DWORD PTR [eax]
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	84 c0                	test   al,al
c001bf12:	74 41                	je     c001bf55 <sysCallTTYName(regs*)+0x78>
c001bf14:	83 ec 08             	sub    esp,0x8
c001bf17:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf1d:	53                   	push   ebx
c001bf1e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf21:	e8 0e 49 fe ff       	call   c0000834 <strcpy>
c001bf26:	83 c4 10             	add    esp,0x10
c001bf29:	31 c0                	xor    eax,eax
c001bf2b:	59                   	pop    ecx
c001bf2c:	31 d2                	xor    edx,edx
c001bf2e:	5b                   	pop    ebx
c001bf2f:	5e                   	pop    esi
c001bf30:	c3                   	ret    
c001bf31:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf36:	74 bb                	je     c001bef3 <sysCallTTYName(regs*)+0x16>
c001bf38:	83 ec 0c             	sub    esp,0xc
c001bf3b:	50                   	push   eax
c001bf3c:	e8 08 5b ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bf41:	83 c4 10             	add    esp,0x10
c001bf44:	89 c3                	mov    ebx,eax
c001bf46:	85 db                	test   ebx,ebx
c001bf48:	75 bb                	jne    c001bf05 <sysCallTTYName(regs*)+0x28>
c001bf4a:	59                   	pop    ecx
c001bf4b:	b8 01 00 00 00       	mov    eax,0x1
c001bf50:	31 d2                	xor    edx,edx
c001bf52:	5b                   	pop    ebx
c001bf53:	5e                   	pop    esi
c001bf54:	c3                   	ret    
c001bf55:	59                   	pop    ecx
c001bf56:	b8 02 00 00 00       	mov    eax,0x2
c001bf5b:	31 d2                	xor    edx,edx
c001bf5d:	5b                   	pop    ebx
c001bf5e:	5e                   	pop    esi
c001bf5f:	c3                   	ret    

c001bf60 <sysCallUSleep(regs*)>:
c001bf60:	83 ec 14             	sub    esp,0x14
c001bf63:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf6c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf73:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf76:	01 ca                	add    edx,ecx
c001bf78:	52                   	push   edx
c001bf79:	50                   	push   eax
c001bf7a:	e8 6b 23 00 00       	call   c001e2ea <nanoSleep(unsigned long long)>
c001bf7f:	31 c0                	xor    eax,eax
c001bf81:	31 d2                	xor    edx,edx
c001bf83:	83 c4 1c             	add    esp,0x1c
c001bf86:	c3                   	ret    

c001bf87 <sysCallSpawn(regs*)>:
c001bf87:	56                   	push   esi
c001bf88:	53                   	push   ebx
c001bf89:	53                   	push   ebx
c001bf8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf8e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bf91:	85 f6                	test   esi,esi
c001bf93:	75 08                	jne    c001bf9d <sysCallSpawn(regs*)+0x16>
c001bf95:	59                   	pop    ecx
c001bf96:	31 c0                	xor    eax,eax
c001bf98:	31 d2                	xor    edx,edx
c001bf9a:	5b                   	pop    ebx
c001bf9b:	5e                   	pop    esi
c001bf9c:	c3                   	ret    
c001bf9d:	83 ec 0c             	sub    esp,0xc
c001bfa0:	68 3f 07 00 00       	push   0x73f
c001bfa5:	e8 96 38 ff ff       	call   c000f840 <malloc>
c001bfaa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfad:	89 c6                	mov    esi,eax
c001bfaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfb4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfb7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfba:	56                   	push   esi
c001bfbb:	e8 2a 1a 00 00       	call   c001d9ea <Process::Process(char const*, Process*, char**)>
c001bfc0:	83 c4 20             	add    esp,0x20
c001bfc3:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bfca:	75 c9                	jne    c001bf95 <sysCallSpawn(regs*)+0xe>
c001bfcc:	83 ec 0c             	sub    esp,0xc
c001bfcf:	56                   	push   esi
c001bfd0:	e8 db 1f 00 00       	call   c001dfb0 <Process::createUserThread()>
c001bfd5:	8b 06                	mov    eax,DWORD PTR [esi]
c001bfd7:	83 c4 10             	add    esp,0x10
c001bfda:	99                   	cdq    
c001bfdb:	59                   	pop    ecx
c001bfdc:	5b                   	pop    ebx
c001bfdd:	5e                   	pop    esi
c001bfde:	c3                   	ret    

c001bfdf <sysCallGetEnv(regs*)>:
c001bfdf:	55                   	push   ebp
c001bfe0:	57                   	push   edi
c001bfe1:	56                   	push   esi
c001bfe2:	53                   	push   ebx
c001bfe3:	83 ec 28             	sub    esp,0x28
c001bfe6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfea:	68 83 be 02 c0       	push   0xc002be83
c001bfef:	e8 e0 6e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001bff4:	5f                   	pop    edi
c001bff5:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bff8:	5d                   	pop    ebp
c001bff9:	53                   	push   ebx
c001bffa:	68 b2 c1 02 c0       	push   0xc002c1b2
c001bfff:	e8 d0 6e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c004:	58                   	pop    eax
c001c005:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c008:	5a                   	pop    edx
c001c009:	57                   	push   edi
c001c00a:	68 8c be 02 c0       	push   0xc002be8c
c001c00f:	e8 c0 6e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c014:	59                   	pop    ecx
c001c015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c01a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c01d:	e8 6f e4 ff ff       	call   c001a491 <Krnl::getProcessTotalEnvCount(Process*)>
c001c022:	5a                   	pop    edx
c001c023:	89 c5                	mov    ebp,eax
c001c025:	59                   	pop    ecx
c001c026:	50                   	push   eax
c001c027:	68 96 be 02 c0       	push   0xc002be96
c001c02c:	e8 a3 6e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c031:	83 c4 10             	add    esp,0x10
c001c034:	39 ef                	cmp    edi,ebp
c001c036:	7c 15                	jl     c001c04d <sysCallGetEnv(regs*)+0x6e>
c001c038:	85 db                	test   ebx,ebx
c001c03a:	75 0c                	jne    c001c048 <sysCallGetEnv(regs*)+0x69>
c001c03c:	83 c4 1c             	add    esp,0x1c
c001c03f:	31 c0                	xor    eax,eax
c001c041:	5b                   	pop    ebx
c001c042:	31 d2                	xor    edx,edx
c001c044:	5e                   	pop    esi
c001c045:	5f                   	pop    edi
c001c046:	5d                   	pop    ebp
c001c047:	c3                   	ret    
c001c048:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c04b:	eb ef                	jmp    c001c03c <sysCallGetEnv(regs*)+0x5d>
c001c04d:	83 ec 0c             	sub    esp,0xc
c001c050:	68 a2 be 02 c0       	push   0xc002bea2
c001c055:	e8 7a 6e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c05a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c05e:	83 c4 0c             	add    esp,0xc
c001c061:	57                   	push   edi
c001c062:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c068:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c06b:	50                   	push   eax
c001c06c:	e8 40 e4 ff ff       	call   c001a4b1 <Krnl::getProcessEnvPair(Process*, int)>
c001c071:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c075:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c079:	68 31 c2 02 c0       	push   0xc002c231
c001c07e:	e8 51 6e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c083:	83 c4 10             	add    esp,0x10
c001c086:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c089:	85 f6                	test   esi,esi
c001c08b:	75 47                	jne    c001c0d4 <sysCallGetEnv(regs*)+0xf5>
c001c08d:	83 ec 0c             	sub    esp,0xc
c001c090:	55                   	push   ebp
c001c091:	e8 fe 46 fe ff       	call   c0000794 <strlen>
c001c096:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c099:	89 c3                	mov    ebx,eax
c001c09b:	e8 f4 46 fe ff       	call   c0000794 <strlen>
c001c0a0:	5a                   	pop    edx
c001c0a1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0a5:	59                   	pop    ecx
c001c0a6:	50                   	push   eax
c001c0a7:	68 a5 be 02 c0       	push   0xc002bea5
c001c0ac:	e8 23 6e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c0b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0b4:	e8 db 46 fe ff       	call   c0000794 <strlen>
c001c0b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0bc:	89 c3                	mov    ebx,eax
c001c0be:	e8 d1 46 fe ff       	call   c0000794 <strlen>
c001c0c3:	83 c4 10             	add    esp,0x10
c001c0c6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0ca:	83 c4 1c             	add    esp,0x1c
c001c0cd:	31 d2                	xor    edx,edx
c001c0cf:	5b                   	pop    ebx
c001c0d0:	5e                   	pop    esi
c001c0d1:	5f                   	pop    edi
c001c0d2:	5d                   	pop    ebp
c001c0d3:	c3                   	ret    
c001c0d4:	83 ec 0c             	sub    esp,0xc
c001c0d7:	68 4b c2 02 c0       	push   0xc002c24b
c001c0dc:	e8 f3 6d ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c0e1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0e4:	58                   	pop    eax
c001c0e5:	5a                   	pop    edx
c001c0e6:	55                   	push   ebp
c001c0e7:	53                   	push   ebx
c001c0e8:	e8 47 47 fe ff       	call   c0000834 <strcpy>
c001c0ed:	59                   	pop    ecx
c001c0ee:	5e                   	pop    esi
c001c0ef:	68 af be 02 c0       	push   0xc002beaf
c001c0f4:	53                   	push   ebx
c001c0f5:	e8 7a 48 fe ff       	call   c0000974 <strcat>
c001c0fa:	5d                   	pop    ebp
c001c0fb:	58                   	pop    eax
c001c0fc:	57                   	push   edi
c001c0fd:	53                   	push   ebx
c001c0fe:	e8 71 48 fe ff       	call   c0000974 <strcat>
c001c103:	c7 04 24 65 c2 02 c0 	mov    DWORD PTR [esp],0xc002c265
c001c10a:	e8 c5 6d ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c10f:	83 c4 10             	add    esp,0x10
c001c112:	e9 25 ff ff ff       	jmp    c001c03c <sysCallGetEnv(regs*)+0x5d>

c001c117 <sysAppSettings(regs*)>:
c001c117:	53                   	push   ebx
c001c118:	83 ec 08             	sub    esp,0x8
c001c11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c122:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c128:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c12d:	66 3d c0 09          	cmp    ax,0x9c0
c001c131:	75 2f                	jne    c001c162 <sysAppSettings(regs*)+0x4b>
c001c133:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c139:	83 e0 1f             	and    eax,0x1f
c001c13c:	3c 01                	cmp    al,0x1
c001c13e:	74 2e                	je     c001c16e <sysAppSettings(regs*)+0x57>
c001c140:	3c 07                	cmp    al,0x7
c001c142:	0f 84 bd 00 00 00    	je     c001c205 <sysAppSettings(regs*)+0xee>
c001c148:	84 c0                	test   al,al
c001c14a:	0f 84 dc 00 00 00    	je     c001c22c <sysAppSettings(regs*)+0x115>
c001c150:	3c 08                	cmp    al,0x8
c001c152:	74 6d                	je     c001c1c1 <sysAppSettings(regs*)+0xaa>
c001c154:	0f b6 c0             	movzx  eax,al
c001c157:	83 c4 08             	add    esp,0x8
c001c15a:	05 e8 03 00 00       	add    eax,0x3e8
c001c15f:	5b                   	pop    ebx
c001c160:	99                   	cdq    
c001c161:	c3                   	ret    
c001c162:	b8 01 00 00 00       	mov    eax,0x1
c001c167:	31 d2                	xor    edx,edx
c001c169:	83 c4 08             	add    esp,0x8
c001c16c:	5b                   	pop    ebx
c001c16d:	c3                   	ret    
c001c16e:	51                   	push   ecx
c001c16f:	68 00 01 00 00       	push   0x100
c001c174:	6a 00                	push   0x0
c001c176:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c17b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c17e:	83 c0 0c             	add    eax,0xc
c001c181:	50                   	push   eax
c001c182:	e8 f1 45 fe ff       	call   c0000778 <memset>
c001c187:	83 c4 0c             	add    esp,0xc
c001c18a:	68 ff 00 00 00       	push   0xff
c001c18f:	53                   	push   ebx
c001c190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c195:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c198:	83 c0 0c             	add    eax,0xc
c001c19b:	50                   	push   eax
c001c19c:	e8 a3 45 fe ff       	call   c0000744 <memcpy>
c001c1a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a6:	5b                   	pop    ebx
c001c1a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1aa:	5a                   	pop    edx
c001c1ab:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1ae:	52                   	push   edx
c001c1af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1b5:	e8 0a 4a ff ff       	call   c0010bc4 <VgaText::setTitle(char*)>
c001c1ba:	83 c4 10             	add    esp,0x10
c001c1bd:	31 c0                	xor    eax,eax
c001c1bf:	eb a6                	jmp    c001c167 <sysAppSettings(regs*)+0x50>
c001c1c1:	83 ec 08             	sub    esp,0x8
c001c1c4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c1ca:	83 e0 0f             	and    eax,0xf
c001c1cd:	50                   	push   eax
c001c1ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1dc:	e8 d3 49 ff ff       	call   c0010bb4 <VgaText::setTitleColour(VgaColour)>
c001c1e1:	58                   	pop    eax
c001c1e2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c1e8:	5a                   	pop    edx
c001c1e9:	c1 e8 04             	shr    eax,0x4
c001c1ec:	83 e0 0f             	and    eax,0xf
c001c1ef:	50                   	push   eax
c001c1f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1fe:	e8 a1 49 ff ff       	call   c0010ba4 <VgaText::setTitleTextColour(VgaColour)>
c001c203:	eb b5                	jmp    c001c1ba <sysAppSettings(regs*)+0xa3>
c001c205:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c20a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c20d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c213:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c219:	c0 e8 06             	shr    al,0x6
c001c21c:	83 e0 01             	and    eax,0x1
c001c21f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c225:	31 c0                	xor    eax,eax
c001c227:	e9 3b ff ff ff       	jmp    c001c167 <sysAppSettings(regs*)+0x50>
c001c22c:	b8 02 00 00 00       	mov    eax,0x2
c001c231:	e9 31 ff ff ff       	jmp    c001c167 <sysAppSettings(regs*)+0x50>

c001c236 <sysSetFatAttrib(regs*)>:
c001c236:	57                   	push   edi
c001c237:	56                   	push   esi
c001c238:	53                   	push   ebx
c001c239:	83 ec 1c             	sub    esp,0x1c
c001c23c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c240:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c243:	68 14 01 00 00       	push   0x114
c001c248:	e8 f3 35 ff ff       	call   c000f840 <malloc>
c001c24d:	83 c4 0c             	add    esp,0xc
c001c250:	89 c3                	mov    ebx,eax
c001c252:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c257:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c25a:	57                   	push   edi
c001c25b:	53                   	push   ebx
c001c25c:	e8 cb 71 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001c261:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c264:	83 c4 0c             	add    esp,0xc
c001c267:	0f b6 d4             	movzx  edx,ah
c001c26a:	0f b6 c0             	movzx  eax,al
c001c26d:	52                   	push   edx
c001c26e:	50                   	push   eax
c001c26f:	53                   	push   ebx
c001c270:	e8 2d 74 ff ff       	call   c00136a2 <File::chfatattr(unsigned char, unsigned char)>
c001c275:	83 c4 10             	add    esp,0x10
c001c278:	85 db                	test   ebx,ebx
c001c27a:	74 14                	je     c001c290 <sysSetFatAttrib(regs*)+0x5a>
c001c27c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c280:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c282:	83 ec 0c             	sub    esp,0xc
c001c285:	53                   	push   ebx
c001c286:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c289:	83 c4 10             	add    esp,0x10
c001c28c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c290:	85 c0                	test   eax,eax
c001c292:	0f 95 c0             	setne  al
c001c295:	31 d2                	xor    edx,edx
c001c297:	0f b6 c0             	movzx  eax,al
c001c29a:	f7 d8                	neg    eax
c001c29c:	83 d2 00             	adc    edx,0x0
c001c29f:	83 c4 10             	add    esp,0x10
c001c2a2:	f7 da                	neg    edx
c001c2a4:	5b                   	pop    ebx
c001c2a5:	5e                   	pop    esi
c001c2a6:	5f                   	pop    edi
c001c2a7:	c3                   	ret    

c001c2a8 <sysPipe(regs*)>:
c001c2a8:	57                   	push   edi
c001c2a9:	56                   	push   esi
c001c2aa:	53                   	push   ebx
c001c2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2af:	83 ec 0c             	sub    esp,0xc
c001c2b2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2b5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c2b8:	6a 20                	push   0x20
c001c2ba:	e8 81 35 ff ff       	call   c000f840 <malloc>
c001c2bf:	89 c3                	mov    ebx,eax
c001c2c1:	58                   	pop    eax
c001c2c2:	5a                   	pop    edx
c001c2c3:	68 00 50 00 00       	push   0x5000
c001c2c8:	53                   	push   ebx
c001c2c9:	e8 26 42 ff ff       	call   c00104f4 <Pipe::Pipe(int)>
c001c2ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2d1:	e8 7e 54 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c2d6:	89 07                	mov    DWORD PTR [edi],eax
c001c2d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2db:	e8 74 54 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c2e0:	83 c4 10             	add    esp,0x10
c001c2e3:	89 06                	mov    DWORD PTR [esi],eax
c001c2e5:	31 d2                	xor    edx,edx
c001c2e7:	5b                   	pop    ebx
c001c2e8:	31 c0                	xor    eax,eax
c001c2ea:	5e                   	pop    esi
c001c2eb:	5f                   	pop    edi
c001c2ec:	c3                   	ret    

c001c2ed <sysGetUnixTime(regs*)>:
c001c2ed:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001c2f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2fc:	e9 15 7b ff ff       	jmp    c0013e16 <Clock::timeInSecondsLocal()>

c001c301 <string_ends_with(char const*, char const*)>:
c001c301:	57                   	push   edi
c001c302:	56                   	push   esi
c001c303:	53                   	push   ebx
c001c304:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c308:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c30c:	83 ec 0c             	sub    esp,0xc
c001c30f:	53                   	push   ebx
c001c310:	e8 7f 44 fe ff       	call   c0000794 <strlen>
c001c315:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c318:	89 c6                	mov    esi,eax
c001c31a:	e8 75 44 fe ff       	call   c0000794 <strlen>
c001c31f:	83 c4 10             	add    esp,0x10
c001c322:	39 c6                	cmp    esi,eax
c001c324:	7d 06                	jge    c001c32c <string_ends_with(char const*, char const*)+0x2b>
c001c326:	5b                   	pop    ebx
c001c327:	31 c0                	xor    eax,eax
c001c329:	5e                   	pop    esi
c001c32a:	5f                   	pop    edi
c001c32b:	c3                   	ret    
c001c32c:	83 ec 08             	sub    esp,0x8
c001c32f:	29 c6                	sub    esi,eax
c001c331:	57                   	push   edi
c001c332:	01 f3                	add    ebx,esi
c001c334:	53                   	push   ebx
c001c335:	e8 86 45 fe ff       	call   c00008c0 <strcmp>
c001c33a:	83 c4 10             	add    esp,0x10
c001c33d:	85 c0                	test   eax,eax
c001c33f:	5b                   	pop    ebx
c001c340:	0f 94 c0             	sete   al
c001c343:	5e                   	pop    esi
c001c344:	0f b6 c0             	movzx  eax,al
c001c347:	5f                   	pop    edi
c001c348:	c3                   	ret    

c001c349 <sysCallOpen(regs*)>:
c001c349:	56                   	push   esi
c001c34a:	53                   	push   ebx
c001c34b:	81 ec 04 01 00 00    	sub    esp,0x104
c001c351:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c358:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c35b:	85 c9                	test   ecx,ecx
c001c35d:	0f 84 b3 00 00 00    	je     c001c416 <sysCallOpen(regs*)+0xcd>
c001c363:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c366:	85 c0                	test   eax,eax
c001c368:	0f 84 a8 00 00 00    	je     c001c416 <sysCallOpen(regs*)+0xcd>
c001c36e:	52                   	push   edx
c001c36f:	68 b1 be 02 c0       	push   0xc002beb1
c001c374:	50                   	push   eax
c001c375:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c379:	56                   	push   esi
c001c37a:	e8 03 6f ff ff       	call   c0013282 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c37f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c382:	e8 0d 44 fe ff       	call   c0000794 <strlen>
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	48                   	dec    eax
c001c38b:	74 1d                	je     c001c3aa <sysCallOpen(regs*)+0x61>
c001c38d:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c390:	eb 0f                	jmp    c001c3a1 <sysCallOpen(regs*)+0x58>
c001c392:	80 fa 3a             	cmp    dl,0x3a
c001c395:	74 0f                	je     c001c3a6 <sysCallOpen(regs*)+0x5d>
c001c397:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c39b:	48                   	dec    eax
c001c39c:	74 0c                	je     c001c3aa <sysCallOpen(regs*)+0x61>
c001c39e:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3a1:	80 fa 2e             	cmp    dl,0x2e
c001c3a4:	75 ec                	jne    c001c392 <sysCallOpen(regs*)+0x49>
c001c3a6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3aa:	83 ec 08             	sub    esp,0x8
c001c3ad:	68 b5 be 02 c0       	push   0xc002beb5
c001c3b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3b5:	e8 47 ff ff ff       	call   c001c301 <string_ends_with(char const*, char const*)>
c001c3ba:	83 c4 10             	add    esp,0x10
c001c3bd:	85 c0                	test   eax,eax
c001c3bf:	75 17                	jne    c001c3d8 <sysCallOpen(regs*)+0x8f>
c001c3c1:	83 ec 08             	sub    esp,0x8
c001c3c4:	68 d6 be 02 c0       	push   0xc002bed6
c001c3c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3cc:	e8 30 ff ff ff       	call   c001c301 <string_ends_with(char const*, char const*)>
c001c3d1:	83 c4 10             	add    esp,0x10
c001c3d4:	85 c0                	test   eax,eax
c001c3d6:	74 51                	je     c001c429 <sysCallOpen(regs*)+0xe0>
c001c3d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3db:	83 ec 08             	sub    esp,0x8
c001c3de:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c3e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3ee:	ff 30                	push   DWORD PTR [eax]
c001c3f0:	68 ba be 02 c0       	push   0xc002beba
c001c3f5:	e8 da 6a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c3fa:	c7 04 24 c9 be 02 c0 	mov    DWORD PTR [esp],0xc002bec9
c001c401:	e8 ce 6a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c406:	83 c4 10             	add    esp,0x10
c001c409:	81 c4 04 01 00 00    	add    esp,0x104
c001c40f:	31 c0                	xor    eax,eax
c001c411:	31 d2                	xor    edx,edx
c001c413:	5b                   	pop    ebx
c001c414:	5e                   	pop    esi
c001c415:	c3                   	ret    
c001c416:	81 c4 04 01 00 00    	add    esp,0x104
c001c41c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c421:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c426:	5b                   	pop    ebx
c001c427:	5e                   	pop    esi
c001c428:	c3                   	ret    
c001c429:	83 ec 08             	sub    esp,0x8
c001c42c:	68 b6 be 02 c0       	push   0xc002beb6
c001c431:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c434:	e8 87 44 fe ff       	call   c00008c0 <strcmp>
c001c439:	83 c4 10             	add    esp,0x10
c001c43c:	85 c0                	test   eax,eax
c001c43e:	74 98                	je     c001c3d8 <sysCallOpen(regs*)+0x8f>
c001c440:	83 ec 08             	sub    esp,0x8
c001c443:	68 b5 be 02 c0       	push   0xc002beb5
c001c448:	56                   	push   esi
c001c449:	e8 b3 fe ff ff       	call   c001c301 <string_ends_with(char const*, char const*)>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	85 c0                	test   eax,eax
c001c453:	75 83                	jne    c001c3d8 <sysCallOpen(regs*)+0x8f>
c001c455:	83 ec 08             	sub    esp,0x8
c001c458:	68 db be 02 c0       	push   0xc002bedb
c001c45d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c460:	e8 9c fe ff ff       	call   c001c301 <string_ends_with(char const*, char const*)>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	85 c0                	test   eax,eax
c001c46a:	0f 85 d9 00 00 00    	jne    c001c549 <sysCallOpen(regs*)+0x200>
c001c470:	83 ec 08             	sub    esp,0x8
c001c473:	68 e0 be 02 c0       	push   0xc002bee0
c001c478:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c47b:	e8 81 fe ff ff       	call   c001c301 <string_ends_with(char const*, char const*)>
c001c480:	83 c4 10             	add    esp,0x10
c001c483:	85 c0                	test   eax,eax
c001c485:	0f 85 be 00 00 00    	jne    c001c549 <sysCallOpen(regs*)+0x200>
c001c48b:	83 ec 08             	sub    esp,0x8
c001c48e:	68 dc be 02 c0       	push   0xc002bedc
c001c493:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c496:	e8 25 44 fe ff       	call   c00008c0 <strcmp>
c001c49b:	83 c4 10             	add    esp,0x10
c001c49e:	85 c0                	test   eax,eax
c001c4a0:	0f 84 a3 00 00 00    	je     c001c549 <sysCallOpen(regs*)+0x200>
c001c4a6:	83 ec 08             	sub    esp,0x8
c001c4a9:	68 db be 02 c0       	push   0xc002bedb
c001c4ae:	56                   	push   esi
c001c4af:	e8 4d fe ff ff       	call   c001c301 <string_ends_with(char const*, char const*)>
c001c4b4:	83 c4 10             	add    esp,0x10
c001c4b7:	85 c0                	test   eax,eax
c001c4b9:	0f 85 8a 00 00 00    	jne    c001c549 <sysCallOpen(regs*)+0x200>
c001c4bf:	83 ec 0c             	sub    esp,0xc
c001c4c2:	68 14 01 00 00       	push   0x114
c001c4c7:	e8 74 33 ff ff       	call   c000f840 <malloc>
c001c4cc:	83 c4 0c             	add    esp,0xc
c001c4cf:	89 c6                	mov    esi,eax
c001c4d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4d6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c4d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4dc:	56                   	push   esi
c001c4dd:	e8 4a 6f ff ff       	call   c001342c <File::File(char const*, Process*)>
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	85 f6                	test   esi,esi
c001c4e7:	0f 84 29 ff ff ff    	je     c001c416 <sysCallOpen(regs*)+0xcd>
c001c4ed:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c4f0:	0f b6 c2             	movzx  eax,dl
c001c4f3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4f6:	89 d0                	mov    eax,edx
c001c4f8:	83 e0 01             	and    eax,0x1
c001c4fb:	f6 c2 02             	test   dl,0x2
c001c4fe:	74 03                	je     c001c503 <sysCallOpen(regs*)+0x1ba>
c001c500:	83 c8 02             	or     eax,0x2
c001c503:	f6 c2 04             	test   dl,0x4
c001c506:	74 03                	je     c001c50b <sysCallOpen(regs*)+0x1c2>
c001c508:	83 c8 04             	or     eax,0x4
c001c50b:	f6 c2 08             	test   dl,0x8
c001c50e:	74 03                	je     c001c513 <sysCallOpen(regs*)+0x1ca>
c001c510:	83 c8 0a             	or     eax,0xa
c001c513:	83 e2 10             	and    edx,0x10
c001c516:	74 03                	je     c001c51b <sysCallOpen(regs*)+0x1d2>
c001c518:	83 c8 12             	or     eax,0x12
c001c51b:	83 ec 08             	sub    esp,0x8
c001c51e:	50                   	push   eax
c001c51f:	56                   	push   esi
c001c520:	e8 6b 6f ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001c525:	83 c4 10             	add    esp,0x10
c001c528:	85 c0                	test   eax,eax
c001c52a:	0f 85 e6 fe ff ff    	jne    c001c416 <sysCallOpen(regs*)+0xcd>
c001c530:	83 ec 0c             	sub    esp,0xc
c001c533:	56                   	push   esi
c001c534:	e8 1b 52 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c539:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c53c:	89 02                	mov    DWORD PTR [edx],eax
c001c53e:	c1 f8 1f             	sar    eax,0x1f
c001c541:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c544:	e9 bd fe ff ff       	jmp    c001c406 <sysCallOpen(regs*)+0xbd>
c001c549:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c54c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c552:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c559:	e9 ab fe ff ff       	jmp    c001c409 <sysCallOpen(regs*)+0xc0>

c001c55e <Sys::loadSyscalls()>:
c001c55e:	c7 05 60 0f 03 c0 6b b6 01 c0 	mov    DWORD PTR ds:0xc0030f60,0xc001b66b
c001c568:	c7 05 64 0f 03 c0 0a b2 01 c0 	mov    DWORD PTR ds:0xc0030f64,0xc001b20a
c001c572:	c7 05 68 0f 03 c0 74 b3 01 c0 	mov    DWORD PTR ds:0xc0030f68,0xc001b374
c001c57c:	c7 05 6c 0f 03 c0 a1 b5 01 c0 	mov    DWORD PTR ds:0xc0030f6c,0xc001b5a1
c001c586:	c7 05 70 0f 03 c0 0c b3 01 c0 	mov    DWORD PTR ds:0xc0030f70,0xc001b30c
c001c590:	c7 05 74 0f 03 c0 41 b2 01 c0 	mov    DWORD PTR ds:0xc0030f74,0xc001b241
c001c59a:	c7 05 78 0f 03 c0 22 b2 01 c0 	mov    DWORD PTR ds:0xc0030f78,0xc001b222
c001c5a4:	c7 05 7c 0f 03 c0 13 b4 01 c0 	mov    DWORD PTR ds:0xc0030f7c,0xc001b413
c001c5ae:	c7 05 84 0f 03 c0 9b bb 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001bb9b
c001c5b8:	c7 05 80 0f 03 c0 49 c3 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001c349
c001c5c2:	c7 05 88 0f 03 c0 23 bc 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001bc23
c001c5cc:	c7 05 8c 0f 03 c0 8a b8 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b88a
c001c5d6:	c7 05 90 0f 03 c0 a6 b6 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001b6a6
c001c5e0:	c7 05 94 0f 03 c0 ab b6 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b6ab
c001c5ea:	c7 05 98 0f 03 c0 fe bc 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001bcfe
c001c5f4:	c7 05 9c 0f 03 c0 98 bc 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001bc98
c001c5fe:	c7 05 a0 0f 03 c0 72 b9 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001b972
c001c608:	c7 05 a4 0f 03 c0 db b9 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001b9db
c001c612:	c7 05 a8 0f 03 c0 58 ba 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001ba58
c001c61c:	c7 05 ac 0f 03 c0 b0 b6 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b6b0
c001c626:	c7 05 b0 0f 03 c0 6e bd 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001bd6e
c001c630:	c7 05 b4 0f 03 c0 88 bd 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001bd88
c001c63a:	c7 05 b8 0f 03 c0 88 bd 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001bd88
c001c644:	c7 05 bc 0f 03 c0 c9 bd 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001bdc9
c001c64e:	c7 05 c0 0f 03 c0 2d be 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001be2d
c001c658:	c7 05 c4 0f 03 c0 5c b8 01 c0 	mov    DWORD PTR ds:0xc0030fc4,0xc001b85c
c001c662:	c7 05 c8 0f 03 c0 91 be 01 c0 	mov    DWORD PTR ds:0xc0030fc8,0xc001be91
c001c66c:	c7 05 cc 0f 03 c0 19 b8 01 c0 	mov    DWORD PTR ds:0xc0030fcc,0xc001b819
c001c676:	c7 05 d0 0f 03 c0 dd be 01 c0 	mov    DWORD PTR ds:0xc0030fd0,0xc001bedd
c001c680:	c7 05 d4 0f 03 c0 18 b9 01 c0 	mov    DWORD PTR ds:0xc0030fd4,0xc001b918
c001c68a:	c7 05 d8 0f 03 c0 60 bf 01 c0 	mov    DWORD PTR ds:0xc0030fd8,0xc001bf60
c001c694:	c7 05 dc 0f 03 c0 db ba 01 c0 	mov    DWORD PTR ds:0xc0030fdc,0xc001badb
c001c69e:	c7 05 e0 0f 03 c0 87 bf 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001bf87
c001c6a8:	c7 05 e4 0f 03 c0 df bf 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001bfdf
c001c6b2:	c7 05 e8 0f 03 c0 17 c1 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001c117
c001c6bc:	c7 05 ec 0f 03 c0 ba b6 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b6ba
c001c6c6:	c7 05 f0 0f 03 c0 24 b7 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001b724
c001c6d0:	c7 05 f4 0f 03 c0 6a b7 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b76a
c001c6da:	c7 05 f8 0f 03 c0 36 c2 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001c236
c001c6e4:	c7 05 fc 0f 03 c0 a3 bd 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001bda3
c001c6ee:	c7 05 00 10 03 c0 bb b7 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001b7bb
c001c6f8:	c7 05 04 10 03 c0 a8 c2 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001c2a8
c001c702:	c7 05 08 10 03 c0 ed c2 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001c2ed
c001c70c:	c7 05 0c 10 03 c0 64 b2 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b264
c001c716:	c7 05 10 10 03 c0 2f b4 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001b42f
c001c720:	c7 05 14 10 03 c0 57 b5 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001b557
c001c72a:	c7 05 18 10 03 c0 d4 b1 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001b1d4
c001c734:	c7 05 1c 10 03 c0 09 b6 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001b609
c001c73e:	c7 05 20 10 03 c0 4d b2 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001b24d
c001c748:	c3                   	ret    

c001c749 <Sys::systemCall(regs*, void*)>:
c001c749:	53                   	push   ebx
c001c74a:	83 ec 08             	sub    esp,0x8
c001c74d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c751:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c754:	83 f8 7f             	cmp    eax,0x7f
c001c757:	77 16                	ja     c001c76f <Sys::systemCall(regs*, void*)+0x26>
c001c759:	8b 14 85 60 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0a0]
c001c760:	85 d2                	test   edx,edx
c001c762:	74 0b                	je     c001c76f <Sys::systemCall(regs*, void*)+0x26>
c001c764:	83 ec 0c             	sub    esp,0xc
c001c767:	53                   	push   ebx
c001c768:	ff d2                	call   edx
c001c76a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c76d:	eb 0d                	jmp    c001c77c <Sys::systemCall(regs*, void*)+0x33>
c001c76f:	52                   	push   edx
c001c770:	52                   	push   edx
c001c771:	50                   	push   eax
c001c772:	68 e5 be 02 c0       	push   0xc002bee5
c001c777:	e8 58 67 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c784:	31 d2                	xor    edx,edx
c001c786:	83 c4 08             	add    esp,0x8
c001c789:	5b                   	pop    ebx
c001c78a:	c3                   	ret    

c001c78b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c78b:	55                   	push   ebp
c001c78c:	57                   	push   edi
c001c78d:	56                   	push   esi
c001c78e:	53                   	push   ebx
c001c78f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c795:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c79c:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7a3:	85 c0                	test   eax,eax
c001c7a5:	0f 95 c1             	setne  cl
c001c7a8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7b0:	0f 94 c2             	sete   dl
c001c7b3:	84 d1                	test   cl,dl
c001c7b5:	74 23                	je     c001c7da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7b7:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c7bd:	74 1b                	je     c001c7da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7bf:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c7c5:	89 da                	mov    edx,ebx
c001c7c7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c7cd:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c7d3:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c7da:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c7e1:	05 ff 0f 00 00       	add    eax,0xfff
c001c7e6:	83 ec 0c             	sub    esp,0xc
c001c7e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7ed:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c7f3:	c1 e8 0c             	shr    eax,0xc
c001c7f6:	89 ef                	mov    edi,ebp
c001c7f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7fc:	c1 ef 0c             	shr    edi,0xc
c001c7ff:	6a 01                	push   0x1
c001c801:	e8 99 53 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001c806:	89 c6                	mov    esi,eax
c001c808:	58                   	pop    eax
c001c809:	5a                   	pop    edx
c001c80a:	57                   	push   edi
c001c80b:	68 6b bf 02 c0       	push   0xc002bf6b
c001c810:	e8 bf 66 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c815:	59                   	pop    ecx
c001c816:	58                   	pop    eax
c001c817:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c81b:	68 7d bf 02 c0       	push   0xc002bf7d
c001c820:	e8 af 66 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c825:	83 c4 10             	add    esp,0x10
c001c828:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c82e:	0f 86 24 01 00 00    	jbe    c001c958 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c834:	c1 e7 0c             	shl    edi,0xc
c001c837:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c83a:	89 df                	mov    edi,ebx
c001c83c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c840:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c847:	01 dd                	add    ebp,ebx
c001c849:	29 fd                	sub    ebp,edi
c001c84b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c84f:	0f 84 01 01 00 00    	je     c001c956 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c855:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c85b:	76 05                	jbe    c001c862 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c85d:	bd 00 10 00 00       	mov    ebp,0x1000
c001c862:	83 ec 0c             	sub    esp,0xc
c001c865:	31 d2                	xor    edx,edx
c001c867:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c86e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c870:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c874:	50                   	push   eax
c001c875:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c879:	50                   	push   eax
c001c87a:	52                   	push   edx
c001c87b:	55                   	push   ebp
c001c87c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c883:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c886:	83 c4 20             	add    esp,0x20
c001c889:	85 c0                	test   eax,eax
c001c88b:	74 0a                	je     c001c897 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c88d:	53                   	push   ebx
c001c88e:	53                   	push   ebx
c001c88f:	50                   	push   eax
c001c890:	68 8f bf 02 c0       	push   0xc002bf8f
c001c895:	eb 0f                	jmp    c001c8a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c897:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c89b:	74 20                	je     c001c8bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c89d:	51                   	push   ecx
c001c89e:	51                   	push   ecx
c001c89f:	6a 00                	push   0x0
c001c8a1:	68 ba bf 02 c0       	push   0xc002bfba
c001c8a6:	e8 29 66 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001c8ab:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8ae:	e8 5c 57 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	31 c0                	xor    eax,eax
c001c8b8:	e9 55 01 00 00       	jmp    c001ca12 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c8bd:	e8 d8 14 00 00       	call   c001dd9a <lockScheduler()>
c001c8c2:	e8 1b 36 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c8c7:	6a 07                	push   0x7
c001c8c9:	89 c5                	mov    ebp,eax
c001c8cb:	56                   	push   esi
c001c8cc:	50                   	push   eax
c001c8cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8d5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8db:	e8 96 5a ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8e0:	83 c4 0c             	add    esp,0xc
c001c8e3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8ea:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8f0:	6a 00                	push   0x0
c001c8f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8fa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c900:	e8 db 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c905:	58                   	pop    eax
c001c906:	5a                   	pop    edx
c001c907:	68 07 0c 00 00       	push   0xc07
c001c90c:	57                   	push   edi
c001c90d:	81 c7 00 10 00 00    	add    edi,0x1000
c001c913:	55                   	push   ebp
c001c914:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c91b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c921:	6a 00                	push   0x0
c001c923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c928:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c92b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c931:	e8 fa 5d ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c936:	83 c4 1c             	add    esp,0x1c
c001c939:	68 00 10 00 00       	push   0x1000
c001c93e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c942:	50                   	push   eax
c001c943:	56                   	push   esi
c001c944:	e8 fb 3d fe ff       	call   c0000744 <memcpy>
c001c949:	e8 4e 14 00 00       	call   c001dd9c <unlockScheduler()>
c001c94e:	83 c4 10             	add    esp,0x10
c001c951:	e9 ea fe ff ff       	jmp    c001c840 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c956:	89 fb                	mov    ebx,edi
c001c958:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c960:	0f 86 9e 00 00 00    	jbe    c001ca04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c966:	e8 2f 14 00 00       	call   c001dd9a <lockScheduler()>
c001c96b:	51                   	push   ecx
c001c96c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c973:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c979:	6a 00                	push   0x0
c001c97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c980:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c983:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c989:	e8 52 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c98e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c992:	c1 e7 0c             	shl    edi,0xc
c001c995:	01 df                	add    edi,ebx
c001c997:	83 c4 10             	add    esp,0x10
c001c99a:	39 fb                	cmp    ebx,edi
c001c99c:	74 61                	je     c001c9ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c99e:	e8 3f 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c9a3:	6a 07                	push   0x7
c001c9a5:	89 c5                	mov    ebp,eax
c001c9a7:	56                   	push   esi
c001c9a8:	50                   	push   eax
c001c9a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b7:	e8 ba 59 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9bc:	58                   	pop    eax
c001c9bd:	5a                   	pop    edx
c001c9be:	68 07 0c 00 00       	push   0xc07
c001c9c3:	53                   	push   ebx
c001c9c4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c9ca:	55                   	push   ebp
c001c9cb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9d2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d8:	6a 00                	push   0x0
c001c9da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9e2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9e8:	e8 43 5d ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9ed:	83 c4 1c             	add    esp,0x1c
c001c9f0:	68 00 10 00 00       	push   0x1000
c001c9f5:	6a 00                	push   0x0
c001c9f7:	56                   	push   esi
c001c9f8:	e8 7b 3d fe ff       	call   c0000778 <memset>
c001c9fd:	eb 98                	jmp    c001c997 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c9ff:	e8 98 13 00 00       	call   c001dd9c <unlockScheduler()>
c001ca04:	83 ec 0c             	sub    esp,0xc
c001ca07:	56                   	push   esi
c001ca08:	e8 02 56 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001ca0d:	83 c4 10             	add    esp,0x10
c001ca10:	b0 01                	mov    al,0x1
c001ca12:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca18:	5b                   	pop    ebx
c001ca19:	5e                   	pop    esi
c001ca1a:	5f                   	pop    edi
c001ca1b:	5d                   	pop    ebp
c001ca1c:	c3                   	ret    

c001ca1d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca1d:	55                   	push   ebp
c001ca1e:	57                   	push   edi
c001ca1f:	56                   	push   esi
c001ca20:	53                   	push   ebx
c001ca21:	83 ec 48             	sub    esp,0x48
c001ca24:	68 14 01 00 00       	push   0x114
c001ca29:	e8 12 2e ff ff       	call   c000f840 <malloc>
c001ca2e:	83 c4 0c             	add    esp,0xc
c001ca31:	89 c6                	mov    esi,eax
c001ca33:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca3b:	50                   	push   eax
c001ca3c:	e8 eb 69 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001ca41:	58                   	pop    eax
c001ca42:	5a                   	pop    edx
c001ca43:	6a 01                	push   0x1
c001ca45:	56                   	push   esi
c001ca46:	e8 45 6a ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001ca4b:	83 c4 10             	add    esp,0x10
c001ca4e:	85 c0                	test   eax,eax
c001ca50:	0f 85 47 01 00 00    	jne    c001cb9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca56:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca5e:	83 ec 0c             	sub    esp,0xc
c001ca61:	6a 34                	push   0x34
c001ca63:	e8 d8 2d ff ff       	call   c000f840 <malloc>
c001ca68:	89 c3                	mov    ebx,eax
c001ca6a:	58                   	pop    eax
c001ca6b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca6d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca71:	57                   	push   edi
c001ca72:	53                   	push   ebx
c001ca73:	6a 00                	push   0x0
c001ca75:	6a 34                	push   0x34
c001ca77:	56                   	push   esi
c001ca78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca7b:	83 c4 20             	add    esp,0x20
c001ca7e:	85 c0                	test   eax,eax
c001ca80:	0f 85 17 01 00 00    	jne    c001cb9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca86:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca8c:	0f 85 0b 01 00 00    	jne    c001cb9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca92:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca95:	85 c0                	test   eax,eax
c001ca97:	0f 84 00 01 00 00    	je     c001cb9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca9d:	31 d2                	xor    edx,edx
c001ca9f:	55                   	push   ebp
c001caa0:	52                   	push   edx
c001caa1:	50                   	push   eax
c001caa2:	56                   	push   esi
c001caa3:	e8 a6 6a ff ff       	call   c001354e <File::seek(unsigned long long)>
c001caa8:	83 c4 10             	add    esp,0x10
c001caab:	85 c0                	test   eax,eax
c001caad:	0f 85 ea 00 00 00    	jne    c001cb9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cab3:	83 ec 0c             	sub    esp,0xc
c001cab6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cab9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cabd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cac1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cac5:	0f af c2             	imul   eax,edx
c001cac8:	50                   	push   eax
c001cac9:	e8 72 2d ff ff       	call   c000f840 <malloc>
c001cace:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cad0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cad4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cad7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cadb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cadf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cae3:	0f af c2             	imul   eax,edx
c001cae6:	99                   	cdq    
c001cae7:	52                   	push   edx
c001cae8:	50                   	push   eax
c001cae9:	56                   	push   esi
c001caea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caed:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001caf0:	83 c4 20             	add    esp,0x20
c001caf3:	85 c0                	test   eax,eax
c001caf5:	0f 84 a2 00 00 00    	je     c001cb9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cafb:	31 d2                	xor    edx,edx
c001cafd:	51                   	push   ecx
c001cafe:	52                   	push   edx
c001caff:	50                   	push   eax
c001cb00:	56                   	push   esi
c001cb01:	e8 48 6a ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cb06:	83 c4 10             	add    esp,0x10
c001cb09:	85 c0                	test   eax,eax
c001cb0b:	0f 85 8c 00 00 00    	jne    c001cb9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb11:	83 ec 0c             	sub    esp,0xc
c001cb14:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb18:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb1c:	31 ed                	xor    ebp,ebp
c001cb1e:	0f af c2             	imul   eax,edx
c001cb21:	50                   	push   eax
c001cb22:	e8 19 2d ff ff       	call   c000f840 <malloc>
c001cb27:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb2d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb34:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb38:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb3c:	0f af c2             	imul   eax,edx
c001cb3f:	99                   	cdq    
c001cb40:	52                   	push   edx
c001cb41:	50                   	push   eax
c001cb42:	56                   	push   esi
c001cb43:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb46:	83 c4 20             	add    esp,0x20
c001cb49:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb51:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb55:	0f 86 80 00 00 00    	jbe    c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb5b:	0f b7 fd             	movzx  edi,bp
c001cb5e:	c1 e7 05             	shl    edi,0x5
c001cb61:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb65:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb68:	75 6b                	jne    c001cbd5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb6a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb71:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb78:	52                   	push   edx
c001cb79:	31 d2                	xor    edx,edx
c001cb7b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb7e:	52                   	push   edx
c001cb7f:	50                   	push   eax
c001cb80:	56                   	push   esi
c001cb81:	e8 c8 69 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cb86:	83 c4 10             	add    esp,0x10
c001cb89:	85 c0                	test   eax,eax
c001cb8b:	74 17                	je     c001cba4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb8d:	83 ec 0c             	sub    esp,0xc
c001cb90:	68 e6 bf 02 c0       	push   0xc002bfe6
c001cb95:	e8 3a 63 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001cb9a:	83 c4 10             	add    esp,0x10
c001cb9d:	31 c0                	xor    eax,eax
c001cb9f:	e9 87 00 00 00       	jmp    c001cc2b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbaa:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbad:	50                   	push   eax
c001cbae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbb6:	56                   	push   esi
c001cbb7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cbbb:	e8 cb fb ff ff       	call   c001c78b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cbc0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbc4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cbc8:	83 c4 20             	add    esp,0x20
c001cbcb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cbcf:	73 04                	jae    c001cbd5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbd5:	45                   	inc    ebp
c001cbd6:	e9 76 ff ff ff       	jmp    c001cb51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cbdb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cbdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbe3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbe7:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cbed:	83 ec 0c             	sub    esp,0xc
c001cbf0:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cbf6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbfb:	05 00 10 00 00       	add    eax,0x1000
c001cc00:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc07:	e8 44 2c ff ff       	call   c000f850 <free>
c001cc0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc0f:	e8 3c 2c ff ff       	call   c000f850 <free>
c001cc14:	58                   	pop    eax
c001cc15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc19:	e8 32 2c ff ff       	call   c000f850 <free>
c001cc1e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc21:	e8 c8 68 ff ff       	call   c00134ee <File::close()>
c001cc26:	83 c4 10             	add    esp,0x10
c001cc29:	b0 01                	mov    al,0x1
c001cc2b:	83 c4 3c             	add    esp,0x3c
c001cc2e:	5b                   	pop    ebx
c001cc2f:	5e                   	pop    esi
c001cc30:	5f                   	pop    edi
c001cc31:	5d                   	pop    ebp
c001cc32:	c3                   	ret    

c001cc33 <Thr::runtimeReferenceHelper()>:
c001cc33:	83 ec 18             	sub    esp,0x18
c001cc36:	68 ee bf 02 c0       	push   0xc002bfee
c001cc3b:	e8 94 62 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001cc40:	fa                   	cli    
c001cc41:	83 c4 10             	add    esp,0x10
c001cc44:	eb fe                	jmp    c001cc44 <Thr::runtimeReferenceHelper()+0x11>

c001cc46 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc46:	57                   	push   edi
c001cc47:	56                   	push   esi
c001cc48:	53                   	push   ebx
c001cc49:	31 db                	xor    ebx,ebx
c001cc4b:	39 1d 00 19 03 c0    	cmp    DWORD PTR ds:0xc0031900,ebx
c001cc51:	7e 3c                	jle    c001cc8f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc53:	8b 34 9d 80 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce780]
c001cc5a:	31 ff                	xor    edi,edi
c001cc5c:	39 3c 9d 80 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce880],edi
c001cc63:	7e 27                	jle    c001cc8c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc65:	50                   	push   eax
c001cc66:	50                   	push   eax
c001cc67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc6b:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc6d:	03 04 9d 00 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce800]
c001cc74:	50                   	push   eax
c001cc75:	e8 46 3c fe ff       	call   c00008c0 <strcmp>
c001cc7a:	83 c4 10             	add    esp,0x10
c001cc7d:	85 c0                	test   eax,eax
c001cc7f:	75 05                	jne    c001cc86 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc81:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc84:	eb 0b                	jmp    c001cc91 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc86:	83 c6 10             	add    esi,0x10
c001cc89:	47                   	inc    edi
c001cc8a:	eb d0                	jmp    c001cc5c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc8c:	43                   	inc    ebx
c001cc8d:	eb bc                	jmp    c001cc4b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc8f:	31 c0                	xor    eax,eax
c001cc91:	5b                   	pop    ebx
c001cc92:	5e                   	pop    esi
c001cc93:	5f                   	pop    edi
c001cc94:	c3                   	ret    

c001cc95 <Thr::loadKernelSymbolTable(char const*)>:
c001cc95:	55                   	push   ebp
c001cc96:	57                   	push   edi
c001cc97:	56                   	push   esi
c001cc98:	53                   	push   ebx
c001cc99:	83 ec 68             	sub    esp,0x68
c001cc9c:	8b 35 54 19 03 c0    	mov    esi,DWORD PTR ds:0xc0031954
c001cca2:	68 14 01 00 00       	push   0x114
c001cca7:	e8 94 2b ff ff       	call   c000f840 <malloc>
c001ccac:	83 c4 0c             	add    esp,0xc
c001ccaf:	89 c3                	mov    ebx,eax
c001ccb1:	56                   	push   esi
c001ccb2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ccb6:	50                   	push   eax
c001ccb7:	e8 70 67 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001ccbc:	5e                   	pop    esi
c001ccbd:	5f                   	pop    edi
c001ccbe:	6a 01                	push   0x1
c001ccc0:	53                   	push   ebx
c001ccc1:	e8 ca 67 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001ccc6:	83 c4 10             	add    esp,0x10
c001ccc9:	85 c0                	test   eax,eax
c001cccb:	74 0a                	je     c001ccd7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cccd:	83 ec 0c             	sub    esp,0xc
c001ccd0:	68 10 c0 02 c0       	push   0xc002c010
c001ccd5:	eb 34                	jmp    c001cd0b <Thr::loadKernelSymbolTable(char const*)+0x76>
c001ccd7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ccdf:	83 ec 0c             	sub    esp,0xc
c001cce2:	6a 34                	push   0x34
c001cce4:	e8 57 2b ff ff       	call   c000f840 <malloc>
c001cce9:	59                   	pop    ecx
c001ccea:	89 c7                	mov    edi,eax
c001ccec:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ccf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccf2:	56                   	push   esi
c001ccf3:	57                   	push   edi
c001ccf4:	6a 00                	push   0x0
c001ccf6:	6a 34                	push   0x34
c001ccf8:	53                   	push   ebx
c001ccf9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccfc:	83 c4 20             	add    esp,0x20
c001ccff:	85 c0                	test   eax,eax
c001cd01:	74 17                	je     c001cd1a <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd03:	83 ec 0c             	sub    esp,0xc
c001cd06:	68 27 c0 02 c0       	push   0xc002c027
c001cd0b:	e8 65 d8 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001cd10:	83 c4 10             	add    esp,0x10
c001cd13:	31 c0                	xor    eax,eax
c001cd15:	e9 31 02 00 00       	jmp    c001cf4b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd1a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd20:	75 e1                	jne    c001cd03 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd22:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd25:	85 c0                	test   eax,eax
c001cd27:	74 da                	je     c001cd03 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd29:	52                   	push   edx
c001cd2a:	31 d2                	xor    edx,edx
c001cd2c:	52                   	push   edx
c001cd2d:	50                   	push   eax
c001cd2e:	53                   	push   ebx
c001cd2f:	e8 1a 68 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cd34:	83 c4 10             	add    esp,0x10
c001cd37:	85 c0                	test   eax,eax
c001cd39:	75 c8                	jne    c001cd03 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd3b:	83 ec 0c             	sub    esp,0xc
c001cd3e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd42:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd46:	31 ed                	xor    ebp,ebp
c001cd48:	0f af c2             	imul   eax,edx
c001cd4b:	50                   	push   eax
c001cd4c:	e8 ef 2a ff ff       	call   c000f840 <malloc>
c001cd51:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd57:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd5e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd62:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd66:	0f af c2             	imul   eax,edx
c001cd69:	99                   	cdq    
c001cd6a:	52                   	push   edx
c001cd6b:	50                   	push   eax
c001cd6c:	53                   	push   ebx
c001cd6d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd70:	83 c4 20             	add    esp,0x20
c001cd73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd7b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd83:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd8b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd93:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd97:	0f 86 aa 00 00 00    	jbe    c001ce47 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd9d:	0f b7 f5             	movzx  esi,bp
c001cda0:	6b f6 28             	imul   esi,esi,0x28
c001cda3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cda7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cdaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdae:	50                   	push   eax
c001cdaf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdb3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cdb7:	8b 16                	mov    edx,DWORD PTR [esi]
c001cdb9:	6b c0 28             	imul   eax,eax,0x28
c001cdbc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cdc0:	89 d0                	mov    eax,edx
c001cdc2:	31 d2                	xor    edx,edx
c001cdc4:	52                   	push   edx
c001cdc5:	50                   	push   eax
c001cdc6:	53                   	push   ebx
c001cdc7:	e8 82 67 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cdcc:	83 c4 0c             	add    esp,0xc
c001cdcf:	6a 20                	push   0x20
c001cdd1:	6a 00                	push   0x0
c001cdd3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdd7:	52                   	push   edx
c001cdd8:	e8 9b 39 fe ff       	call   c0000778 <memset>
c001cddd:	58                   	pop    eax
c001cdde:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cde0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cde4:	51                   	push   ecx
c001cde5:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cde9:	52                   	push   edx
c001cdea:	6a 00                	push   0x0
c001cdec:	6a 1f                	push   0x1f
c001cdee:	53                   	push   ebx
c001cdef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdf2:	83 c4 18             	add    esp,0x18
c001cdf5:	68 3e c0 02 c0       	push   0xc002c03e
c001cdfa:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdfe:	52                   	push   edx
c001cdff:	e8 bc 3a fe ff       	call   c00008c0 <strcmp>
c001ce04:	83 c4 10             	add    esp,0x10
c001ce07:	85 c0                	test   eax,eax
c001ce09:	75 0f                	jne    c001ce1a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce0b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce1a:	50                   	push   eax
c001ce1b:	50                   	push   eax
c001ce1c:	68 46 c0 02 c0       	push   0xc002c046
c001ce21:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce25:	50                   	push   eax
c001ce26:	e8 95 3a fe ff       	call   c00008c0 <strcmp>
c001ce2b:	83 c4 10             	add    esp,0x10
c001ce2e:	85 c0                	test   eax,eax
c001ce30:	75 0f                	jne    c001ce41 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce32:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce41:	45                   	inc    ebp
c001ce42:	e9 4c ff ff ff       	jmp    c001cd93 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce47:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce4c:	75 10                	jne    c001ce5e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce4e:	83 ec 0c             	sub    esp,0xc
c001ce51:	68 4e c0 02 c0       	push   0xc002c04e
c001ce56:	e8 1a d7 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce63:	75 10                	jne    c001ce75 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce65:	83 ec 0c             	sub    esp,0xc
c001ce68:	68 4e c0 02 c0       	push   0xc002c04e
c001ce6d:	e8 03 d7 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001ce72:	83 c4 10             	add    esp,0x10
c001ce75:	31 d2                	xor    edx,edx
c001ce77:	50                   	push   eax
c001ce78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce7c:	52                   	push   edx
c001ce7d:	50                   	push   eax
c001ce7e:	53                   	push   ebx
c001ce7f:	e8 ca 66 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001ce84:	5a                   	pop    edx
c001ce85:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce89:	e8 b2 29 ff ff       	call   c000f840 <malloc>
c001ce8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce96:	31 c9                	xor    ecx,ecx
c001ce98:	5e                   	pop    esi
c001ce99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce9b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce9f:	55                   	push   ebp
c001cea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea4:	51                   	push   ecx
c001cea5:	52                   	push   edx
c001cea6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ceaa:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ceae:	53                   	push   ebx
c001ceaf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceb2:	83 c4 14             	add    esp,0x14
c001ceb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ceb9:	e8 82 29 ff ff       	call   c000f840 <malloc>
c001cebe:	89 c6                	mov    esi,eax
c001cec0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cec2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cec5:	56                   	push   esi
c001cec6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ceca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cece:	51                   	push   ecx
c001cecf:	52                   	push   edx
c001ced0:	53                   	push   ebx
c001ced1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ced4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ced8:	8b 15 00 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031900
c001cede:	83 c4 1c             	add    esp,0x1c
c001cee1:	c1 e8 04             	shr    eax,0x4
c001cee4:	89 04 95 80 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce880],eax
c001ceeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ceef:	31 d2                	xor    edx,edx
c001cef1:	52                   	push   edx
c001cef2:	50                   	push   eax
c001cef3:	53                   	push   ebx
c001cef4:	e8 55 66 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cef9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cefb:	31 d2                	xor    edx,edx
c001cefd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf00:	56                   	push   esi
c001cf01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf05:	52                   	push   edx
c001cf06:	50                   	push   eax
c001cf07:	53                   	push   ebx
c001cf08:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf0b:	83 c4 14             	add    esp,0x14
c001cf0e:	53                   	push   ebx
c001cf0f:	e8 da 65 ff ff       	call   c00134ee <File::close()>
c001cf14:	5d                   	pop    ebp
c001cf15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf19:	e8 32 29 ff ff       	call   c000f850 <free>
c001cf1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf21:	e8 2a 29 ff ff       	call   c000f850 <free>
c001cf26:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c001cf2b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf2f:	8d 50 01             	lea    edx,[eax+0x1]
c001cf32:	89 0c 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],ecx
c001cf39:	89 34 85 00 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce800],esi
c001cf40:	89 15 00 19 03 c0    	mov    DWORD PTR ds:0xc0031900,edx
c001cf46:	83 c4 10             	add    esp,0x10
c001cf49:	b0 01                	mov    al,0x1
c001cf4b:	83 c4 5c             	add    esp,0x5c
c001cf4e:	5b                   	pop    ebx
c001cf4f:	5e                   	pop    esi
c001cf50:	5f                   	pop    edi
c001cf51:	5d                   	pop    ebp
c001cf52:	c3                   	ret    

c001cf53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf53:	55                   	push   ebp
c001cf54:	57                   	push   edi
c001cf55:	56                   	push   esi
c001cf56:	53                   	push   ebx
c001cf57:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf5d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf64:	8b 1d 54 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031954
c001cf6a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf6e:	68 14 01 00 00       	push   0x114
c001cf73:	e8 c8 28 ff ff       	call   c000f840 <malloc>
c001cf78:	83 c4 0c             	add    esp,0xc
c001cf7b:	89 c5                	mov    ebp,eax
c001cf7d:	53                   	push   ebx
c001cf7e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf85:	50                   	push   eax
c001cf86:	e8 a1 64 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001cf8b:	5e                   	pop    esi
c001cf8c:	5f                   	pop    edi
c001cf8d:	6a 01                	push   0x1
c001cf8f:	55                   	push   ebp
c001cf90:	e8 fb 64 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001cf95:	83 c4 10             	add    esp,0x10
c001cf98:	85 c0                	test   eax,eax
c001cf9a:	0f 85 8d 06 00 00    	jne    c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfa0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfa8:	83 ec 0c             	sub    esp,0xc
c001cfab:	6a 34                	push   0x34
c001cfad:	e8 8e 28 ff ff       	call   c000f840 <malloc>
c001cfb2:	5b                   	pop    ebx
c001cfb3:	89 c7                	mov    edi,eax
c001cfb5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfbc:	53                   	push   ebx
c001cfbd:	57                   	push   edi
c001cfbe:	6a 00                	push   0x0
c001cfc0:	6a 34                	push   0x34
c001cfc2:	55                   	push   ebp
c001cfc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfc6:	83 c4 20             	add    esp,0x20
c001cfc9:	85 c0                	test   eax,eax
c001cfcb:	0f 85 5c 06 00 00    	jne    c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfd1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cfd7:	0f 85 50 06 00 00    	jne    c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfdd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cfe0:	85 c0                	test   eax,eax
c001cfe2:	0f 84 45 06 00 00    	je     c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfe8:	31 d2                	xor    edx,edx
c001cfea:	51                   	push   ecx
c001cfeb:	52                   	push   edx
c001cfec:	50                   	push   eax
c001cfed:	55                   	push   ebp
c001cfee:	e8 5b 65 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001cff3:	83 c4 10             	add    esp,0x10
c001cff6:	85 c0                	test   eax,eax
c001cff8:	0f 85 2f 06 00 00    	jne    c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cffe:	83 ec 0c             	sub    esp,0xc
c001d001:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d004:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d008:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d00c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d010:	0f af c2             	imul   eax,edx
c001d013:	50                   	push   eax
c001d014:	e8 27 28 ff ff       	call   c000f840 <malloc>
c001d019:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d01c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d023:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d027:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d02b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d02f:	0f af c2             	imul   eax,edx
c001d032:	99                   	cdq    
c001d033:	52                   	push   edx
c001d034:	50                   	push   eax
c001d035:	55                   	push   ebp
c001d036:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d039:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d03c:	83 c4 20             	add    esp,0x20
c001d03f:	85 c0                	test   eax,eax
c001d041:	0f 84 e6 05 00 00    	je     c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d047:	52                   	push   edx
c001d048:	31 d2                	xor    edx,edx
c001d04a:	52                   	push   edx
c001d04b:	50                   	push   eax
c001d04c:	55                   	push   ebp
c001d04d:	e8 fc 64 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d052:	83 c4 10             	add    esp,0x10
c001d055:	85 c0                	test   eax,eax
c001d057:	0f 85 d0 05 00 00    	jne    c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d05d:	83 ec 0c             	sub    esp,0xc
c001d060:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d064:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d068:	31 f6                	xor    esi,esi
c001d06a:	0f af c2             	imul   eax,edx
c001d06d:	50                   	push   eax
c001d06e:	e8 cd 27 ff ff       	call   c000f840 <malloc>
c001d073:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d076:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d07a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d07d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d081:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d085:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d089:	0f af c2             	imul   eax,edx
c001d08c:	99                   	cdq    
c001d08d:	52                   	push   edx
c001d08e:	50                   	push   eax
c001d08f:	55                   	push   ebp
c001d090:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d093:	83 c4 20             	add    esp,0x20
c001d096:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d09a:	0f 86 8a 00 00 00    	jbe    c001d12a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0a0:	0f b7 de             	movzx  ebx,si
c001d0a3:	c1 e3 05             	shl    ebx,0x5
c001d0a6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0aa:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0ad:	75 75                	jne    c001d124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0af:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0b2:	31 d2                	xor    edx,edx
c001d0b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0b8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0bf:	50                   	push   eax
c001d0c0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d0c3:	52                   	push   edx
c001d0c4:	50                   	push   eax
c001d0c5:	55                   	push   ebp
c001d0c6:	e8 83 64 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d0cb:	83 c4 10             	add    esp,0x10
c001d0ce:	85 c0                	test   eax,eax
c001d0d0:	0f 85 57 05 00 00    	jne    c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0d6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d0dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0e0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0e4:	31 d2                	xor    edx,edx
c001d0e6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0ea:	83 ec 0c             	sub    esp,0xc
c001d0ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0f8:	50                   	push   eax
c001d0f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d101:	52                   	push   edx
c001d102:	50                   	push   eax
c001d103:	55                   	push   ebp
c001d104:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d107:	83 c4 1c             	add    esp,0x1c
c001d10a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d10d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d110:	50                   	push   eax
c001d111:	6a 00                	push   0x0
c001d113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d117:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d11b:	50                   	push   eax
c001d11c:	e8 57 36 fe ff       	call   c0000778 <memset>
c001d121:	83 c4 10             	add    esp,0x10
c001d124:	46                   	inc    esi
c001d125:	e9 6c ff ff ff       	jmp    c001d096 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d12a:	53                   	push   ebx
c001d12b:	31 db                	xor    ebx,ebx
c001d12d:	68 00 01 00 00       	push   0x100
c001d132:	6a 00                	push   0x0
c001d134:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d138:	50                   	push   eax
c001d139:	e8 3a 36 fe ff       	call   c0000778 <memset>
c001d13e:	83 c4 0c             	add    esp,0xc
c001d141:	68 00 01 00 00       	push   0x100
c001d146:	6a 00                	push   0x0
c001d148:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d14f:	50                   	push   eax
c001d150:	e8 23 36 fe ff       	call   c0000778 <memset>
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d160:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d168:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d170:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d178:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d180:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d184:	0f 86 30 01 00 00    	jbe    c001d2ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d18a:	0f b7 f3             	movzx  esi,bx
c001d18d:	6b f6 28             	imul   esi,esi,0x28
c001d190:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d194:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d197:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d19b:	52                   	push   edx
c001d19c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1a0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1a4:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1a6:	6b d2 28             	imul   edx,edx,0x28
c001d1a9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1ad:	31 d2                	xor    edx,edx
c001d1af:	52                   	push   edx
c001d1b0:	50                   	push   eax
c001d1b1:	55                   	push   ebp
c001d1b2:	e8 97 63 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d1b7:	83 c4 0c             	add    esp,0xc
c001d1ba:	6a 20                	push   0x20
c001d1bc:	6a 00                	push   0x0
c001d1be:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1c5:	51                   	push   ecx
c001d1c6:	e8 ad 35 fe ff       	call   c0000778 <memset>
c001d1cb:	59                   	pop    ecx
c001d1cc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1cf:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1d3:	52                   	push   edx
c001d1d4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d1db:	51                   	push   ecx
c001d1dc:	6a 00                	push   0x0
c001d1de:	6a 1f                	push   0x1f
c001d1e0:	55                   	push   ebp
c001d1e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1e4:	83 c4 1c             	add    esp,0x1c
c001d1e7:	6a 09                	push   0x9
c001d1e9:	68 68 c0 02 c0       	push   0xc002c068
c001d1ee:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1f5:	51                   	push   ecx
c001d1f6:	e8 45 34 fe ff       	call   c0000640 <memcmp>
c001d1fb:	83 c4 10             	add    esp,0x10
c001d1fe:	85 c0                	test   eax,eax
c001d200:	75 21                	jne    c001d223 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d206:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d20a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d20e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d212:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d215:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d21c:	89 d0                	mov    eax,edx
c001d21e:	40                   	inc    eax
c001d21f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d223:	50                   	push   eax
c001d224:	6a 09                	push   0x9
c001d226:	68 72 c0 02 c0       	push   0xc002c072
c001d22b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d232:	50                   	push   eax
c001d233:	e8 08 34 fe ff       	call   c0000640 <memcmp>
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	85 c0                	test   eax,eax
c001d23d:	75 21                	jne    c001d260 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d23f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d243:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d247:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d24b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d24f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d252:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d259:	89 d0                	mov    eax,edx
c001d25b:	40                   	inc    eax
c001d25c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d260:	50                   	push   eax
c001d261:	50                   	push   eax
c001d262:	68 3e c0 02 c0       	push   0xc002c03e
c001d267:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d26e:	50                   	push   eax
c001d26f:	e8 4c 36 fe ff       	call   c00008c0 <strcmp>
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	85 c0                	test   eax,eax
c001d279:	75 0f                	jne    c001d28a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d27b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d27e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d282:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d28a:	50                   	push   eax
c001d28b:	50                   	push   eax
c001d28c:	68 46 c0 02 c0       	push   0xc002c046
c001d291:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d298:	50                   	push   eax
c001d299:	e8 22 36 fe ff       	call   c00008c0 <strcmp>
c001d29e:	83 c4 10             	add    esp,0x10
c001d2a1:	85 c0                	test   eax,eax
c001d2a3:	75 0f                	jne    c001d2b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2b4:	43                   	inc    ebx
c001d2b5:	e9 c6 fe ff ff       	jmp    c001d180 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2ba:	31 d2                	xor    edx,edx
c001d2bc:	50                   	push   eax
c001d2bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2c1:	52                   	push   edx
c001d2c2:	50                   	push   eax
c001d2c3:	55                   	push   ebp
c001d2c4:	e8 85 62 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d2c9:	58                   	pop    eax
c001d2ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2ce:	e8 6d 25 ff ff       	call   c000f840 <malloc>
c001d2d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2da:	31 d2                	xor    edx,edx
c001d2dc:	58                   	pop    eax
c001d2dd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2e1:	53                   	push   ebx
c001d2e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2ea:	52                   	push   edx
c001d2eb:	50                   	push   eax
c001d2ec:	55                   	push   ebp
c001d2ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2f0:	83 c4 14             	add    esp,0x14
c001d2f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2f7:	e8 44 25 ff ff       	call   c000f840 <malloc>
c001d2fc:	31 d2                	xor    edx,edx
c001d2fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d302:	83 c4 0c             	add    esp,0xc
c001d305:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d309:	52                   	push   edx
c001d30a:	50                   	push   eax
c001d30b:	55                   	push   ebp
c001d30c:	e8 3d 62 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d311:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d314:	31 d2                	xor    edx,edx
c001d316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d319:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d31d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d321:	52                   	push   edx
c001d322:	50                   	push   eax
c001d323:	55                   	push   ebp
c001d324:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d327:	83 c4 20             	add    esp,0x20
c001d32a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d332:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d336:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d33a:	0f 84 f1 02 00 00    	je     c001d631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d340:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d347:	31 d2                	xor    edx,edx
c001d349:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d34d:	c1 e8 03             	shr    eax,0x3
c001d350:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d354:	51                   	push   ecx
c001d355:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d359:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d35d:	52                   	push   edx
c001d35e:	50                   	push   eax
c001d35f:	55                   	push   ebp
c001d360:	e8 e9 61 ff ff       	call   c001354e <File::seek(unsigned long long)>
c001d365:	5b                   	pop    ebx
c001d366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d36a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d371:	e8 ca 24 ff ff       	call   c000f840 <malloc>
c001d376:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d379:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d37d:	31 d2                	xor    edx,edx
c001d37f:	5e                   	pop    esi
c001d380:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d384:	50                   	push   eax
c001d385:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d389:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d38d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d394:	52                   	push   edx
c001d395:	50                   	push   eax
c001d396:	55                   	push   ebp
c001d397:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d39a:	83 c4 20             	add    esp,0x20
c001d39d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3a9:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3ad:	0f 8d 62 02 00 00    	jge    c001d615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3bb:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d3c0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d3c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3cb:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d3cf:	89 d8                	mov    eax,ebx
c001d3d1:	c1 e8 08             	shr    eax,0x8
c001d3d4:	89 c6                	mov    esi,eax
c001d3d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d3da:	c1 e6 04             	shl    esi,0x4
c001d3dd:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d3e1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3e4:	85 d2                	test   edx,edx
c001d3e6:	0f 85 bf 00 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3ec:	83 ec 0c             	sub    esp,0xc
c001d3ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3f3:	03 06                	add    eax,DWORD PTR [esi]
c001d3f5:	50                   	push   eax
c001d3f6:	e8 4b f8 ff ff       	call   c001cc46 <Thr::getAddressOfKernelSymbol(char const*)>
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	89 c2                	mov    edx,eax
c001d400:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d405:	85 c0                	test   eax,eax
c001d407:	0f 85 9e 00 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d40d:	83 ec 0c             	sub    esp,0xc
c001d410:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d414:	03 06                	add    eax,DWORD PTR [esi]
c001d416:	50                   	push   eax
c001d417:	e8 d9 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d41c:	83 c4 10             	add    esp,0x10
c001d41f:	89 c2                	mov    edx,eax
c001d421:	85 c0                	test   eax,eax
c001d423:	0f 85 82 00 00 00    	jne    c001d4ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d42d:	50                   	push   eax
c001d42e:	50                   	push   eax
c001d42f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d433:	03 06                	add    eax,DWORD PTR [esi]
c001d435:	50                   	push   eax
c001d436:	68 7c c0 02 c0       	push   0xc002c07c
c001d43b:	e8 94 5a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001d440:	58                   	pop    eax
c001d441:	5a                   	pop    edx
c001d442:	68 96 c0 02 c0       	push   0xc002c096
c001d447:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d44e:	50                   	push   eax
c001d44f:	e8 e0 33 fe ff       	call   c0000834 <strcpy>
c001d454:	59                   	pop    ecx
c001d455:	58                   	pop    eax
c001d456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d45a:	03 06                	add    eax,DWORD PTR [esi]
c001d45c:	50                   	push   eax
c001d45d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d464:	50                   	push   eax
c001d465:	e8 0a 35 fe ff       	call   c0000974 <strcat>
c001d46a:	58                   	pop    eax
c001d46b:	5a                   	pop    edx
c001d46c:	68 2c c1 02 c0       	push   0xc002c12c
c001d471:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d478:	50                   	push   eax
c001d479:	e8 f6 34 fe ff       	call   c0000974 <strcat>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d486:	0f 84 43 01 00 00    	je     c001d5cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d48c:	83 ec 0c             	sub    esp,0xc
c001d48f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d496:	50                   	push   eax
c001d497:	e8 d9 d0 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d49c:	83 c4 10             	add    esp,0x10
c001d49f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4a7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4ab:	80 fb 01             	cmp    bl,0x1
c001d4ae:	75 7d                	jne    c001d52d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4b0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4b7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4bb:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4bf:	01 ce                	add    esi,ecx
c001d4c1:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4c7:	0f 94 c0             	sete   al
c001d4ca:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4d0:	0f 94 c3             	sete   bl
c001d4d3:	09 c3                	or     ebx,eax
c001d4d5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4d7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4dc:	74 36                	je     c001d514 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d4de:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d4e1:	84 db                	test   bl,bl
c001d4e3:	75 0a                	jne    c001d4ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d4e5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4e9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4ed:	76 37                	jbe    c001d526 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4ef:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4f3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4f8:	0f 84 d1 00 00 00    	je     c001d5cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4fe:	83 ec 0c             	sub    esp,0xc
c001d501:	68 ad c0 02 c0       	push   0xc002c0ad
c001d506:	e8 6a d0 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d50b:	83 c4 10             	add    esp,0x10
c001d50e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d512:	eb 12                	jmp    c001d526 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d514:	01 c1                	add    ecx,eax
c001d516:	84 db                	test   bl,bl
c001d518:	75 0c                	jne    c001d526 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d51a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d51e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d522:	77 02                	ja     c001d526 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d524:	01 d1                	add    ecx,edx
c001d526:	89 0e                	mov    DWORD PTR [esi],ecx
c001d528:	e9 df 00 00 00       	jmp    c001d60c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d52d:	80 fb 02             	cmp    bl,0x2
c001d530:	75 71                	jne    c001d5a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d532:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d539:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d53d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d541:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d547:	74 15                	je     c001d55e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d549:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d54f:	74 0d                	je     c001d55e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d551:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d555:	83 e8 04             	sub    eax,0x4
c001d558:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d55c:	76 1f                	jbe    c001d57d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d55e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d562:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d567:	74 66                	je     c001d5cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d569:	83 ec 0c             	sub    esp,0xc
c001d56c:	68 c9 c0 02 c0       	push   0xc002c0c9
c001d571:	e8 ff cf ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d576:	83 c4 10             	add    esp,0x10
c001d579:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d57d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d57f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d584:	74 13                	je     c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d586:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d58a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d591:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d595:	01 c8                	add    eax,ecx
c001d597:	eb 04                	jmp    c001d59d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d599:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d59d:	01 c2                	add    edx,eax
c001d59f:	89 16                	mov    DWORD PTR [esi],edx
c001d5a1:	eb 69                	jmp    c001d60c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5a3:	0f b6 db             	movzx  ebx,bl
c001d5a6:	50                   	push   eax
c001d5a7:	50                   	push   eax
c001d5a8:	53                   	push   ebx
c001d5a9:	68 e5 c0 02 c0       	push   0xc002c0e5
c001d5ae:	e8 21 59 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5bb:	74 12                	je     c001d5cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5bd:	83 ec 0c             	sub    esp,0xc
c001d5c0:	68 f0 c0 02 c0       	push   0xc002c0f0
c001d5c5:	e8 ab cf ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d5ca:	83 c4 10             	add    esp,0x10
c001d5cd:	eb 3d                	jmp    c001d60c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5cf:	83 ec 0c             	sub    esp,0xc
c001d5d2:	55                   	push   ebp
c001d5d3:	e8 16 5f ff ff       	call   c00134ee <File::close()>
c001d5d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5e1:	59                   	pop    ecx
c001d5e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5e6:	e8 65 22 ff ff       	call   c000f850 <free>
c001d5eb:	5b                   	pop    ebx
c001d5ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5f0:	e8 5b 22 ff ff       	call   c000f850 <free>
c001d5f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5f8:	e8 53 22 ff ff       	call   c000f850 <free>
c001d5fd:	5e                   	pop    esi
c001d5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d602:	e8 49 22 ff ff       	call   c000f850 <free>
c001d607:	83 c4 10             	add    esp,0x10
c001d60a:	eb 21                	jmp    c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d60c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d610:	e9 90 fd ff ff       	jmp    c001d3a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d615:	83 ec 0c             	sub    esp,0xc
c001d618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d61c:	e8 2f 22 ff ff       	call   c000f850 <free>
c001d621:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d625:	83 c4 10             	add    esp,0x10
c001d628:	e9 05 fd ff ff       	jmp    c001d332 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d62d:	31 c0                	xor    eax,eax
c001d62f:	eb 33                	jmp    c001d664 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d631:	83 ec 0c             	sub    esp,0xc
c001d634:	55                   	push   ebp
c001d635:	e8 b4 5e ff ff       	call   c00134ee <File::close()>
c001d63a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d63d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d640:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d643:	58                   	pop    eax
c001d644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d648:	e8 03 22 ff ff       	call   c000f850 <free>
c001d64d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d650:	e8 fb 21 ff ff       	call   c000f850 <free>
c001d655:	5a                   	pop    edx
c001d656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d65a:	e8 f1 21 ff ff       	call   c000f850 <free>
c001d65f:	83 c4 10             	add    esp,0x10
c001d662:	b0 01                	mov    al,0x1
c001d664:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d66a:	5b                   	pop    ebx
c001d66b:	5e                   	pop    esi
c001d66c:	5f                   	pop    edi
c001d66d:	5d                   	pop    ebp
c001d66e:	c3                   	ret    

c001d66f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d66f:	56                   	push   esi
c001d670:	31 d2                	xor    edx,edx
c001d672:	53                   	push   ebx
c001d673:	8b 1d 60 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031160
c001d679:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d67d:	39 d3                	cmp    ebx,edx
c001d67f:	7e 1b                	jle    c001d69c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d681:	8b 04 95 80 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcec80]
c001d688:	39 c8                	cmp    eax,ecx
c001d68a:	77 0d                	ja     c001d699 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d68c:	8b 34 95 80 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcee80]
c001d693:	01 c6                	add    esi,eax
c001d695:	39 ce                	cmp    esi,ecx
c001d697:	77 05                	ja     c001d69e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d699:	42                   	inc    edx
c001d69a:	eb e1                	jmp    c001d67d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d69c:	31 c0                	xor    eax,eax
c001d69e:	5b                   	pop    ebx
c001d69f:	5e                   	pop    esi
c001d6a0:	c3                   	ret    

c001d6a1 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6a1:	53                   	push   ebx
c001d6a2:	31 c0                	xor    eax,eax
c001d6a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6a8:	8b 1d 60 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031160
c001d6ae:	39 c3                	cmp    ebx,eax
c001d6b0:	7e 22                	jle    c001d6d4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6b2:	8b 14 85 80 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec80]
c001d6b9:	39 ca                	cmp    edx,ecx
c001d6bb:	77 14                	ja     c001d6d1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6bd:	03 14 85 80 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcee80]
c001d6c4:	39 ca                	cmp    edx,ecx
c001d6c6:	76 09                	jbe    c001d6d1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6c8:	8b 04 85 80 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcea80]
c001d6cf:	eb 05                	jmp    c001d6d6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d6d1:	40                   	inc    eax
c001d6d2:	eb da                	jmp    c001d6ae <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d6d4:	31 c0                	xor    eax,eax
c001d6d6:	5b                   	pop    ebx
c001d6d7:	c3                   	ret    

c001d6d8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d6d8:	53                   	push   ebx
c001d6d9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d6dd:	53                   	push   ebx
c001d6de:	e8 8c ff ff ff       	call   c001d66f <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6e3:	5a                   	pop    edx
c001d6e4:	31 d2                	xor    edx,edx
c001d6e6:	85 c0                	test   eax,eax
c001d6e8:	74 04                	je     c001d6ee <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6ea:	89 da                	mov    edx,ebx
c001d6ec:	29 c2                	sub    edx,eax
c001d6ee:	89 d0                	mov    eax,edx
c001d6f0:	5b                   	pop    ebx
c001d6f1:	c3                   	ret    

c001d6f2 <Thr::loadDLL(char const*, bool)>:
c001d6f2:	55                   	push   ebp
c001d6f3:	57                   	push   edi
c001d6f4:	56                   	push   esi
c001d6f5:	53                   	push   ebx
c001d6f6:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6fc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d703:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d70a:	56                   	push   esi
c001d70b:	68 08 c1 02 c0       	push   0xc002c108
c001d710:	e8 bf 57 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001d715:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d71c:	e8 1f 21 ff ff       	call   c000f840 <malloc>
c001d721:	83 c4 0c             	add    esp,0xc
c001d724:	89 c3                	mov    ebx,eax
c001d726:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001d72c:	56                   	push   esi
c001d72d:	50                   	push   eax
c001d72e:	e8 f9 5c ff ff       	call   c001342c <File::File(char const*, Process*)>
c001d733:	83 c4 10             	add    esp,0x10
c001d736:	85 db                	test   ebx,ebx
c001d738:	75 3c                	jne    c001d776 <Thr::loadDLL(char const*, bool)+0x84>
c001d73a:	89 e8                	mov    eax,ebp
c001d73c:	84 c0                	test   al,al
c001d73e:	0f 84 d5 01 00 00    	je     c001d919 <Thr::loadDLL(char const*, bool)+0x227>
c001d744:	57                   	push   edi
c001d745:	57                   	push   edi
c001d746:	68 19 c1 02 c0       	push   0xc002c119
c001d74b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d74f:	57                   	push   edi
c001d750:	e8 df 30 fe ff       	call   c0000834 <strcpy>
c001d755:	58                   	pop    eax
c001d756:	5a                   	pop    edx
c001d757:	56                   	push   esi
c001d758:	57                   	push   edi
c001d759:	e8 16 32 fe ff       	call   c0000974 <strcat>
c001d75e:	59                   	pop    ecx
c001d75f:	58                   	pop    eax
c001d760:	68 2c c1 02 c0       	push   0xc002c12c
c001d765:	57                   	push   edi
c001d766:	e8 09 32 fe ff       	call   c0000974 <strcat>
c001d76b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d76e:	e8 02 ce ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d773:	83 c4 10             	add    esp,0x10
c001d776:	51                   	push   ecx
c001d777:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d77b:	50                   	push   eax
c001d77c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d780:	50                   	push   eax
c001d781:	53                   	push   ebx
c001d782:	e8 b5 5f ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001d787:	83 c4 10             	add    esp,0x10
c001d78a:	85 db                	test   ebx,ebx
c001d78c:	74 0c                	je     c001d79a <Thr::loadDLL(char const*, bool)+0xa8>
c001d78e:	83 ec 0c             	sub    esp,0xc
c001d791:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d793:	53                   	push   ebx
c001d794:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d797:	83 c4 10             	add    esp,0x10
c001d79a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d79f:	75 0a                	jne    c001d7ab <Thr::loadDLL(char const*, bool)+0xb9>
c001d7a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7a5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7a9:	75 3c                	jne    c001d7e7 <Thr::loadDLL(char const*, bool)+0xf5>
c001d7ab:	89 e8                	mov    eax,ebp
c001d7ad:	84 c0                	test   al,al
c001d7af:	0f 84 4c 01 00 00    	je     c001d901 <Thr::loadDLL(char const*, bool)+0x20f>
c001d7b5:	51                   	push   ecx
c001d7b6:	51                   	push   ecx
c001d7b7:	68 19 c1 02 c0       	push   0xc002c119
c001d7bc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7c0:	53                   	push   ebx
c001d7c1:	e8 6e 30 fe ff       	call   c0000834 <strcpy>
c001d7c6:	5f                   	pop    edi
c001d7c7:	58                   	pop    eax
c001d7c8:	56                   	push   esi
c001d7c9:	53                   	push   ebx
c001d7ca:	e8 a5 31 fe ff       	call   c0000974 <strcat>
c001d7cf:	58                   	pop    eax
c001d7d0:	5a                   	pop    edx
c001d7d1:	68 2c c1 02 c0       	push   0xc002c12c
c001d7d6:	53                   	push   ebx
c001d7d7:	e8 98 31 fe ff       	call   c0000974 <strcat>
c001d7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7df:	e8 91 cd ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d7e4:	83 c4 10             	add    esp,0x10
c001d7e7:	e8 4e 46 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d7ec:	51                   	push   ecx
c001d7ed:	6a 03                	push   0x3
c001d7ef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d7f3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d7f7:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d7fd:	83 d3 00             	adc    ebx,0x0
c001d800:	89 ca                	mov    edx,ecx
c001d802:	89 d1                	mov    ecx,edx
c001d804:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d808:	51                   	push   ecx
c001d809:	50                   	push   eax
c001d80a:	e8 67 4c ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001d80f:	5f                   	pop    edi
c001d810:	89 c3                	mov    ebx,eax
c001d812:	58                   	pop    eax
c001d813:	53                   	push   ebx
c001d814:	68 2e c1 02 c0       	push   0xc002c12e
c001d819:	e8 b6 56 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001d81e:	89 34 24             	mov    DWORD PTR [esp],esi
c001d821:	e8 6e 2f fe ff       	call   c0000794 <strlen>
c001d826:	8b 3d 60 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031160
c001d82c:	40                   	inc    eax
c001d82d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d830:	e8 0b 20 ff ff       	call   c000f840 <malloc>
c001d835:	89 04 bd 80 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffcea80],eax
c001d83c:	58                   	pop    eax
c001d83d:	a1 60 11 03 c0       	mov    eax,ds:0xc0031160
c001d842:	5a                   	pop    edx
c001d843:	56                   	push   esi
c001d844:	ff 34 85 80 15 03 c0 	push   DWORD PTR [eax*4-0x3ffcea80]
c001d84b:	e8 e4 2f fe ff       	call   c0000834 <strcpy>
c001d850:	a1 60 11 03 c0       	mov    eax,ds:0xc0031160
c001d855:	8d 50 01             	lea    edx,[eax+0x1]
c001d858:	89 1c 85 80 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec80],ebx
c001d85f:	89 15 60 11 03 c0    	mov    DWORD PTR ds:0xc0031160,edx
c001d865:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d869:	83 c4 0c             	add    esp,0xc
c001d86c:	89 14 85 80 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee80],edx
c001d873:	6a 01                	push   0x1
c001d875:	53                   	push   ebx
c001d876:	56                   	push   esi
c001d877:	e8 d7 f6 ff ff       	call   c001cf53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d87c:	83 c4 10             	add    esp,0x10
c001d87f:	89 c7                	mov    edi,eax
c001d881:	84 c0                	test   al,al
c001d883:	0f 85 8c 00 00 00    	jne    c001d915 <Thr::loadDLL(char const*, bool)+0x223>
c001d889:	89 e8                	mov    eax,ebp
c001d88b:	84 c0                	test   al,al
c001d88d:	74 76                	je     c001d905 <Thr::loadDLL(char const*, bool)+0x213>
c001d88f:	83 ec 0c             	sub    esp,0xc
c001d892:	68 3b c1 02 c0       	push   0xc002c13b
c001d897:	e8 d9 cc ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d89c:	83 c4 10             	add    esp,0x10
c001d89f:	eb 64                	jmp    c001d905 <Thr::loadDLL(char const*, bool)+0x213>
c001d8a1:	e8 94 45 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d8a6:	89 f5                	mov    ebp,esi
c001d8a8:	c1 e5 0c             	shl    ebp,0xc
c001d8ab:	52                   	push   edx
c001d8ac:	01 dd                	add    ebp,ebx
c001d8ae:	52                   	push   edx
c001d8af:	55                   	push   ebp
c001d8b0:	50                   	push   eax
c001d8b1:	e8 3a 47 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c001d8b6:	83 c4 10             	add    esp,0x10
c001d8b9:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8bc:	75 0c                	jne    c001d8ca <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8be:	83 ec 0c             	sub    esp,0xc
c001d8c1:	55                   	push   ebp
c001d8c2:	e8 91 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d8c7:	83 c4 10             	add    esp,0x10
c001d8ca:	46                   	inc    esi
c001d8cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8d3:	05 ff 0f 00 00       	add    eax,0xfff
c001d8d8:	83 d2 00             	adc    edx,0x0
c001d8db:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8df:	c1 ea 0c             	shr    edx,0xc
c001d8e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d8ee:	ba 00 00 00 00       	mov    edx,0x0
c001d8f3:	89 d0                	mov    eax,edx
c001d8f5:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d8f9:	72 a6                	jb     c001d8a1 <Thr::loadDLL(char const*, bool)+0x1af>
c001d8fb:	89 f8                	mov    eax,edi
c001d8fd:	84 c0                	test   al,al
c001d8ff:	75 18                	jne    c001d919 <Thr::loadDLL(char const*, bool)+0x227>
c001d901:	31 db                	xor    ebx,ebx
c001d903:	eb 14                	jmp    c001d919 <Thr::loadDLL(char const*, bool)+0x227>
c001d905:	83 ec 0c             	sub    esp,0xc
c001d908:	68 5a c1 02 c0       	push   0xc002c15a
c001d90d:	e8 63 cc ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d912:	83 c4 10             	add    esp,0x10
c001d915:	31 f6                	xor    esi,esi
c001d917:	eb b2                	jmp    c001d8cb <Thr::loadDLL(char const*, bool)+0x1d9>
c001d919:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d91f:	89 d8                	mov    eax,ebx
c001d921:	5b                   	pop    ebx
c001d922:	5e                   	pop    esi
c001d923:	5f                   	pop    edi
c001d924:	5d                   	pop    ebp
c001d925:	c3                   	ret    

c001d926 <Thr::executeDLL(unsigned long, void*)>:
c001d926:	56                   	push   esi
c001d927:	53                   	push   ebx
c001d928:	52                   	push   edx
c001d929:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d92d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d931:	85 db                	test   ebx,ebx
c001d933:	75 10                	jne    c001d945 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d935:	83 ec 0c             	sub    esp,0xc
c001d938:	68 76 c1 02 c0       	push   0xc002c176
c001d93d:	e8 33 cc ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001d942:	83 c4 10             	add    esp,0x10
c001d945:	50                   	push   eax
c001d946:	50                   	push   eax
c001d947:	53                   	push   ebx
c001d948:	68 a0 c1 02 c0       	push   0xc002c1a0
c001d94d:	e8 82 55 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001d952:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d956:	89 d8                	mov    eax,ebx
c001d958:	83 c4 14             	add    esp,0x14
c001d95b:	5b                   	pop    ebx
c001d95c:	5e                   	pop    esi
c001d95d:	ff e0                	jmp    eax
c001d95f:	90                   	nop

c001d960 <changeTSS>:
c001d960:	83 ec 14             	sub    esp,0x14
c001d963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d968:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d96b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d970:	c1 e2 15             	shl    edx,0x15
c001d973:	29 d0                	sub    eax,edx
c001d975:	50                   	push   eax
c001d976:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001d97b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d981:	05 7c 11 00 00       	add    eax,0x117c
c001d986:	50                   	push   eax
c001d987:	e8 52 3b ff ff       	call   c00114de <TSS::setESP(unsigned long)>
c001d98c:	83 c4 1c             	add    esp,0x1c
c001d98f:	c3                   	ret    

c001d990 <Process::addArgs(char**)>:
c001d990:	57                   	push   edi
c001d991:	56                   	push   esi
c001d992:	53                   	push   ebx
c001d993:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d997:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d99b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9a5:	85 ff                	test   edi,edi
c001d9a7:	74 3d                	je     c001d9e6 <Process::addArgs(char**)+0x56>
c001d9a9:	8b 07                	mov    eax,DWORD PTR [edi]
c001d9ab:	85 c0                	test   eax,eax
c001d9ad:	74 37                	je     c001d9e6 <Process::addArgs(char**)+0x56>
c001d9af:	31 db                	xor    ebx,ebx
c001d9b1:	83 ec 0c             	sub    esp,0xc
c001d9b4:	50                   	push   eax
c001d9b5:	e8 da 2d fe ff       	call   c0000794 <strlen>
c001d9ba:	40                   	inc    eax
c001d9bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9be:	e8 7d 1e ff ff       	call   c000f840 <malloc>
c001d9c3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d9ca:	5a                   	pop    edx
c001d9cb:	59                   	pop    ecx
c001d9cc:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d9cf:	43                   	inc    ebx
c001d9d0:	50                   	push   eax
c001d9d1:	e8 5e 2e fe ff       	call   c0000834 <strcpy>
c001d9d6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d9dc:	83 c4 10             	add    esp,0x10
c001d9df:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9e2:	85 c0                	test   eax,eax
c001d9e4:	75 cb                	jne    c001d9b1 <Process::addArgs(char**)+0x21>
c001d9e6:	5b                   	pop    ebx
c001d9e7:	5e                   	pop    esi
c001d9e8:	5f                   	pop    edi
c001d9e9:	c3                   	ret    

c001d9ea <Process::Process(char const*, Process*, char**)>:
c001d9ea:	56                   	push   esi
c001d9eb:	53                   	push   ebx
c001d9ec:	83 ec 14             	sub    esp,0x14
c001d9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f3:	05 0c 02 00 00       	add    eax,0x20c
c001d9f8:	bb 07 00 00 00       	mov    ebx,0x7
c001d9fd:	89 c6                	mov    esi,eax
c001d9ff:	85 db                	test   ebx,ebx
c001da01:	78 12                	js     c001da15 <Process::Process(char const*, Process*, char**)+0x2b>
c001da03:	83 ec 0c             	sub    esp,0xc
c001da06:	56                   	push   esi
c001da07:	e8 26 b2 00 00       	call   c0028c32 <ThreadControlBlock::ThreadControlBlock()>
c001da0c:	83 c4 10             	add    esp,0x10
c001da0f:	83 c6 63             	add    esi,0x63
c001da12:	4b                   	dec    ebx
c001da13:	eb ea                	jmp    c001d9ff <Process::Process(char const*, Process*, char**)+0x15>
c001da15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da19:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da20:	83 ec 0c             	sub    esp,0xc
c001da23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da27:	e8 9a c9 ff ff       	call   c001a3c6 <Krnl::newProcessEnv(Process*)>
c001da2c:	83 c4 10             	add    esp,0x10
c001da2f:	89 c2                	mov    edx,eax
c001da31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da35:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da3f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da48:	a1 70 d9 02 c0       	mov    eax,ds:0xc002d970
c001da4d:	8d 50 01             	lea    edx,[eax+0x1]
c001da50:	89 15 70 d9 02 c0    	mov    DWORD PTR ds:0xc002d970,edx
c001da56:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da5a:	89 02                	mov    DWORD PTR [edx],eax
c001da5c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001da64:	83 ec 0c             	sub    esp,0xc
c001da67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da6b:	e8 d0 1d ff ff       	call   c000f840 <malloc>
c001da70:	83 c4 10             	add    esp,0x10
c001da73:	89 c3                	mov    ebx,eax
c001da75:	83 ec 08             	sub    esp,0x8
c001da78:	6a 00                	push   0x0
c001da7a:	53                   	push   ebx
c001da7b:	e8 9e 4d ff ff       	call   c001281e <VAS::VAS(bool)>
c001da80:	83 c4 10             	add    esp,0x10
c001da83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da87:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001da8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da91:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001da9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001daa3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001daa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daad:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dab3:	85 c0                	test   eax,eax
c001dab5:	74 42                	je     c001daf9 <Process::Process(char const*, Process*, char**)+0x10f>
c001dab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dabb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dac1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dadb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae5:	05 0c 01 00 00       	add    eax,0x10c
c001daea:	83 ec 08             	sub    esp,0x8
c001daed:	52                   	push   edx
c001daee:	50                   	push   eax
c001daef:	e8 40 2d fe ff       	call   c0000834 <strcpy>
c001daf4:	83 c4 10             	add    esp,0x10
c001daf7:	eb 63                	jmp    c001db5c <Process::Process(char const*, Process*, char**)+0x172>
c001daf9:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db01:	83 ec 0c             	sub    esp,0xc
c001db04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db08:	e8 33 1d ff ff       	call   c000f840 <malloc>
c001db0d:	83 c4 10             	add    esp,0x10
c001db10:	89 c3                	mov    ebx,eax
c001db12:	83 ec 08             	sub    esp,0x8
c001db15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db19:	53                   	push   ebx
c001db1a:	e8 bd 36 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001db1f:	83 c4 10             	add    esp,0x10
c001db22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db26:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db30:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db36:	83 ec 0c             	sub    esp,0xc
c001db39:	50                   	push   eax
c001db3a:	e8 90 2a ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001db3f:	83 c4 10             	add    esp,0x10
c001db42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db46:	05 0c 01 00 00       	add    eax,0x10c
c001db4b:	83 ec 08             	sub    esp,0x8
c001db4e:	68 bf c1 02 c0       	push   0xc002c1bf
c001db53:	50                   	push   eax
c001db54:	e8 db 2c fe ff       	call   c0000834 <strcpy>
c001db59:	83 c4 10             	add    esp,0x10
c001db5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db60:	83 c0 0c             	add    eax,0xc
c001db63:	83 ec 08             	sub    esp,0x8
c001db66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db6a:	50                   	push   eax
c001db6b:	e8 c4 2c fe ff       	call   c0000834 <strcpy>
c001db70:	83 c4 10             	add    esp,0x10
c001db73:	83 ec 08             	sub    esp,0x8
c001db76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001db7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db7e:	e8 0d fe ff ff       	call   c001d990 <Process::addArgs(char**)>
c001db83:	83 c4 10             	add    esp,0x10
c001db86:	83 ec 08             	sub    esp,0x8
c001db89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db91:	e8 87 ee ff ff       	call   c001ca1d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001db96:	83 c4 10             	add    esp,0x10
c001db99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db9d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dba1:	83 f0 01             	xor    eax,0x1
c001dba4:	88 c2                	mov    dl,al
c001dba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbaa:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dbb0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dbb5:	83 ec 08             	sub    esp,0x8
c001dbb8:	50                   	push   eax
c001dbb9:	68 bc c2 02 c0       	push   0xc002c2bc
c001dbbe:	e8 11 53 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001dbc3:	83 c4 10             	add    esp,0x10
c001dbc6:	90                   	nop
c001dbc7:	83 c4 14             	add    esp,0x14
c001dbca:	5b                   	pop    ebx
c001dbcb:	5e                   	pop    esi
c001dbcc:	c3                   	ret    
c001dbcd:	90                   	nop

c001dbce <Process::Process(bool, char const*, Process*, char**)>:
c001dbce:	56                   	push   esi
c001dbcf:	53                   	push   ebx
c001dbd0:	83 ec 24             	sub    esp,0x24
c001dbd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dbd7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dbdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbdf:	05 0c 02 00 00       	add    eax,0x20c
c001dbe4:	bb 07 00 00 00       	mov    ebx,0x7
c001dbe9:	89 c6                	mov    esi,eax
c001dbeb:	85 db                	test   ebx,ebx
c001dbed:	78 12                	js     c001dc01 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dbef:	83 ec 0c             	sub    esp,0xc
c001dbf2:	56                   	push   esi
c001dbf3:	e8 3a b0 00 00       	call   c0028c32 <ThreadControlBlock::ThreadControlBlock()>
c001dbf8:	83 c4 10             	add    esp,0x10
c001dbfb:	83 c6 63             	add    esi,0x63
c001dbfe:	4b                   	dec    ebx
c001dbff:	eb ea                	jmp    c001dbeb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc05:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc0c:	83 ec 0c             	sub    esp,0xc
c001dc0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc13:	e8 ae c7 ff ff       	call   c001a3c6 <Krnl::newProcessEnv(Process*)>
c001dc18:	83 c4 10             	add    esp,0x10
c001dc1b:	89 c2                	mov    edx,eax
c001dc1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc21:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc2b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc34:	a1 70 d9 02 c0       	mov    eax,ds:0xc002d970
c001dc39:	8d 50 01             	lea    edx,[eax+0x1]
c001dc3c:	89 15 70 d9 02 c0    	mov    DWORD PTR ds:0xc002d970,edx
c001dc42:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc46:	89 02                	mov    DWORD PTR [edx],eax
c001dc48:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dc50:	83 ec 0c             	sub    esp,0xc
c001dc53:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc57:	e8 e4 1b ff ff       	call   c000f840 <malloc>
c001dc5c:	83 c4 10             	add    esp,0x10
c001dc5f:	89 c3                	mov    ebx,eax
c001dc61:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc66:	83 ec 08             	sub    esp,0x8
c001dc69:	50                   	push   eax
c001dc6a:	53                   	push   ebx
c001dc6b:	e8 ae 4b ff ff       	call   c001281e <VAS::VAS(bool)>
c001dc70:	83 c4 10             	add    esp,0x10
c001dc73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc77:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dc7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc81:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dc8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc93:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dc99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dca3:	85 c0                	test   eax,eax
c001dca5:	74 42                	je     c001dce9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dca7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcab:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcb1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dcb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dcc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dccb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd5:	05 0c 01 00 00       	add    eax,0x10c
c001dcda:	83 ec 08             	sub    esp,0x8
c001dcdd:	52                   	push   edx
c001dcde:	50                   	push   eax
c001dcdf:	e8 50 2b fe ff       	call   c0000834 <strcpy>
c001dce4:	83 c4 10             	add    esp,0x10
c001dce7:	eb 63                	jmp    c001dd4c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dce9:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dcf1:	83 ec 0c             	sub    esp,0xc
c001dcf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dcf8:	e8 43 1b ff ff       	call   c000f840 <malloc>
c001dcfd:	83 c4 10             	add    esp,0x10
c001dd00:	89 c3                	mov    ebx,eax
c001dd02:	83 ec 08             	sub    esp,0x8
c001dd05:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd09:	53                   	push   ebx
c001dd0a:	e8 cd 34 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001dd0f:	83 c4 10             	add    esp,0x10
c001dd12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd16:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd20:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd26:	83 ec 0c             	sub    esp,0xc
c001dd29:	50                   	push   eax
c001dd2a:	e8 a0 28 ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001dd2f:	83 c4 10             	add    esp,0x10
c001dd32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd36:	05 0c 01 00 00       	add    eax,0x10c
c001dd3b:	83 ec 08             	sub    esp,0x8
c001dd3e:	68 bf c1 02 c0       	push   0xc002c1bf
c001dd43:	50                   	push   eax
c001dd44:	e8 eb 2a fe ff       	call   c0000834 <strcpy>
c001dd49:	83 c4 10             	add    esp,0x10
c001dd4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd50:	83 c0 0c             	add    eax,0xc
c001dd53:	83 ec 08             	sub    esp,0x8
c001dd56:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd5a:	50                   	push   eax
c001dd5b:	e8 d4 2a fe ff       	call   c0000834 <strcpy>
c001dd60:	83 c4 10             	add    esp,0x10
c001dd63:	83 ec 08             	sub    esp,0x8
c001dd66:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd6e:	e8 1d fc ff ff       	call   c001d990 <Process::addArgs(char**)>
c001dd73:	83 c4 10             	add    esp,0x10
c001dd76:	90                   	nop
c001dd77:	83 c4 24             	add    esp,0x24
c001dd7a:	5b                   	pop    ebx
c001dd7b:	5e                   	pop    esi
c001dd7c:	c3                   	ret    

c001dd7d <disableIRQs()>:
c001dd7d:	fa                   	cli    
c001dd7e:	ff 05 2c 19 03 c0    	inc    DWORD PTR ds:0xc003192c
c001dd84:	c3                   	ret    

c001dd85 <getIRQNestingLevel()>:
c001dd85:	a1 2c 19 03 c0       	mov    eax,ds:0xc003192c
c001dd8a:	c3                   	ret    

c001dd8b <enableIRQs()>:
c001dd8b:	a1 2c 19 03 c0       	mov    eax,ds:0xc003192c
c001dd90:	48                   	dec    eax
c001dd91:	a3 2c 19 03 c0       	mov    ds:0xc003192c,eax
c001dd96:	75 01                	jne    c001dd99 <enableIRQs()+0xe>
c001dd98:	fb                   	sti    
c001dd99:	c3                   	ret    

c001dd9a <lockScheduler()>:
c001dd9a:	eb e1                	jmp    c001dd7d <disableIRQs()>

c001dd9c <unlockScheduler()>:
c001dd9c:	eb ed                	jmp    c001dd8b <enableIRQs()>

c001dd9e <userModeEntryPoint(void*)>:
c001dd9e:	83 ec 0c             	sub    esp,0xc
c001dda1:	e8 f6 ff ff ff       	call   c001dd9c <unlockScheduler()>
c001dda6:	fb                   	sti    
c001dda7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ddaf:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ddb5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddb9:	83 c4 0c             	add    esp,0xc
c001ddbc:	e9 69 25 fe ff       	jmp    c000032a <goToUsermode>

c001ddc1 <lockStuff()>:
c001ddc1:	e8 b7 ff ff ff       	call   c001dd7d <disableIRQs()>
c001ddc6:	ff 05 28 19 03 c0    	inc    DWORD PTR ds:0xc0031928
c001ddcc:	c3                   	ret    

c001ddcd <taskStartupFunction>:
c001ddcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddd2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ddd5:	c3                   	ret    

c001ddd6 <updateTimeUsed()>:
c001ddd6:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001dddb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dde1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dde8:	74 50                	je     c001de3a <updateTimeUsed()+0x64>
c001ddea:	57                   	push   edi
c001ddeb:	56                   	push   esi
c001ddec:	53                   	push   ebx
c001dded:	0f 31                	rdtsc  
c001ddef:	89 c1                	mov    ecx,eax
c001ddf1:	a3 68 19 03 c0       	mov    ds:0xc0031968,eax
c001ddf6:	2b 0d 58 19 03 c0    	sub    ecx,DWORD PTR ds:0xc0031958
c001ddfc:	89 d3                	mov    ebx,edx
c001ddfe:	89 0d 60 19 03 c0    	mov    DWORD PTR ds:0xc0031960,ecx
c001de04:	1b 1d 5c 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc003195c
c001de0a:	a3 58 19 03 c0       	mov    ds:0xc0031958,eax
c001de0f:	89 1d 64 19 03 c0    	mov    DWORD PTR ds:0xc0031964,ebx
c001de15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de1a:	89 15 6c 19 03 c0    	mov    DWORD PTR ds:0xc003196c,edx
c001de20:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de23:	89 15 5c 19 03 c0    	mov    DWORD PTR ds:0xc003195c,edx
c001de29:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de2c:	01 f1                	add    ecx,esi
c001de2e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de31:	11 fb                	adc    ebx,edi
c001de33:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de36:	5b                   	pop    ebx
c001de37:	5e                   	pop    esi
c001de38:	5f                   	pop    edi
c001de39:	c3                   	ret    
c001de3a:	c3                   	ret    

c001de3b <switchToThread(ThreadControlBlock*)>:
c001de3b:	53                   	push   ebx
c001de3c:	83 ec 08             	sub    esp,0x8
c001de3f:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001de44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de48:	85 c0                	test   eax,eax
c001de4a:	75 30                	jne    c001de7c <switchToThread(ThreadControlBlock*)+0x41>
c001de4c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de4f:	3c ff                	cmp    al,0xff
c001de51:	74 25                	je     c001de78 <switchToThread(ThreadControlBlock*)+0x3d>
c001de53:	0f b6 d0             	movzx  edx,al
c001de56:	b8 84 03 00 00       	mov    eax,0x384
c001de5b:	29 d0                	sub    eax,edx
c001de5d:	c1 e0 10             	shl    eax,0x10
c001de60:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de63:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001de66:	e8 6b ff ff ff       	call   c001ddd6 <updateTimeUsed()>
c001de6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001de6f:	83 c4 08             	add    esp,0x8
c001de72:	5b                   	pop    ebx
c001de73:	e9 ea 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de78:	31 c0                	xor    eax,eax
c001de7a:	eb e7                	jmp    c001de63 <switchToThread(ThreadControlBlock*)+0x28>
c001de7c:	c7 05 24 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031924,0x1
c001de86:	83 c4 08             	add    esp,0x8
c001de89:	5b                   	pop    ebx
c001de8a:	c3                   	ret    
c001de8b:	90                   	nop

c001de8c <Semaphore::Semaphore(int)>:
c001de8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de94:	89 10                	mov    DWORD PTR [eax],edx
c001de96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de9a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dea1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dea5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001deac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deb0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001deb7:	90                   	nop
c001deb8:	c3                   	ret    
c001deb9:	90                   	nop

c001deba <Mutex::Mutex()>:
c001deba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001debe:	6a 01                	push   0x1
c001dec0:	50                   	push   eax
c001dec1:	e8 c6 ff ff ff       	call   c001de8c <Semaphore::Semaphore(int)>
c001dec6:	83 c4 08             	add    esp,0x8
c001dec9:	90                   	nop
c001deca:	c3                   	ret    
c001decb:	90                   	nop

c001decc <Process::createThread(void (*)(void*), void*, int)>:
c001decc:	55                   	push   ebp
c001decd:	31 c9                	xor    ecx,ecx
c001decf:	57                   	push   edi
c001ded0:	56                   	push   esi
c001ded1:	53                   	push   ebx
c001ded2:	83 ec 1c             	sub    esp,0x1c
c001ded5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ded9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dee0:	89 f2                	mov    edx,esi
c001dee2:	0f b7 c2             	movzx  eax,dx
c001dee5:	83 e2 01             	and    edx,0x1
c001dee8:	74 14                	je     c001defe <Process::createThread(void (*)(void*), void*, int)+0x32>
c001deea:	d1 f8                	sar    eax,1
c001deec:	41                   	inc    ecx
c001deed:	89 c2                	mov    edx,eax
c001deef:	83 f9 10             	cmp    ecx,0x10
c001def2:	75 ee                	jne    c001dee2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001def4:	83 c4 1c             	add    esp,0x1c
c001def7:	31 c0                	xor    eax,eax
c001def9:	5b                   	pop    ebx
c001defa:	5e                   	pop    esi
c001defb:	5f                   	pop    edi
c001defc:	5d                   	pop    ebp
c001defd:	c3                   	ret    
c001defe:	83 ec 08             	sub    esp,0x8
c001df01:	b8 01 00 00 00       	mov    eax,0x1
c001df06:	d3 e0                	shl    eax,cl
c001df08:	09 c6                	or     esi,eax
c001df0a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df10:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df17:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df1a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df1d:	01 ce                	add    esi,ecx
c001df1f:	89 f0                	mov    eax,esi
c001df21:	c1 e0 05             	shl    eax,0x5
c001df24:	01 c6                	add    esi,eax
c001df26:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df29:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df2f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df35:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df39:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df3f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df45:	89 ca                	mov    edx,ecx
c001df47:	f7 da                	neg    edx
c001df49:	c1 e2 15             	shl    edx,0x15
c001df4c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df52:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df58:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df5c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df66:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df6c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df70:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001df76:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df80:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df8a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001df91:	50                   	push   eax
c001df92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df96:	68 48 19 03 c0       	push   0xc0031948
c001df9b:	e8 20 ab 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfa0:	83 c4 10             	add    esp,0x10
c001dfa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfa7:	83 c4 1c             	add    esp,0x1c
c001dfaa:	5b                   	pop    ebx
c001dfab:	5e                   	pop    esi
c001dfac:	5f                   	pop    edi
c001dfad:	5d                   	pop    ebp
c001dfae:	c3                   	ret    
c001dfaf:	90                   	nop

c001dfb0 <Process::createUserThread()>:
c001dfb0:	83 ec 0c             	sub    esp,0xc
c001dfb3:	68 80 00 00 00       	push   0x80
c001dfb8:	6a 00                	push   0x0
c001dfba:	68 9e dd 01 c0       	push   0xc001dd9e
c001dfbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfc3:	e8 04 ff ff ff       	call   c001decc <Process::createThread(void (*)(void*), void*, int)>
c001dfc8:	83 c4 1c             	add    esp,0x1c
c001dfcb:	c3                   	ret    

c001dfcc <setupMultitasking(void (*)())>:
c001dfcc:	56                   	push   esi
c001dfcd:	53                   	push   ebx
c001dfce:	53                   	push   ebx
c001dfcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfd3:	eb 10                	jmp    c001dfe5 <setupMultitasking(void (*)())+0x19>
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	68 48 19 03 c0       	push   0xc0031948
c001dfdd:	e8 30 aa 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfe2:	83 c4 10             	add    esp,0x10
c001dfe5:	83 ec 0c             	sub    esp,0xc
c001dfe8:	68 48 19 03 c0       	push   0xc0031948
c001dfed:	e8 04 aa 00 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dff2:	83 c4 10             	add    esp,0x10
c001dff5:	84 c0                	test   al,al
c001dff7:	74 dc                	je     c001dfd5 <setupMultitasking(void (*)())+0x9>
c001dff9:	83 ec 0c             	sub    esp,0xc
c001dffc:	68 3f 07 00 00       	push   0x73f
c001e001:	e8 3a 18 ff ff       	call   c000f840 <malloc>
c001e006:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e00d:	89 c3                	mov    ebx,eax
c001e00f:	6a 00                	push   0x0
c001e011:	68 c3 c1 02 c0       	push   0xc002c1c3
c001e016:	6a 01                	push   0x1
c001e018:	50                   	push   eax
c001e019:	e8 b0 fb ff ff       	call   c001dbce <Process::Process(bool, char const*, Process*, char**)>
c001e01e:	83 c4 18             	add    esp,0x18
c001e021:	89 1d 54 19 03 c0    	mov    DWORD PTR ds:0xc0031954,ebx
c001e027:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e02d:	68 e4 c2 02 c0       	push   0xc002c2e4
c001e032:	e8 9d 4e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e037:	58                   	pop    eax
c001e038:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e03e:	e8 0e 2d ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001e043:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e04b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e051:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e054:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e05e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e064:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e06a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e074:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e07e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e088:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e08e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e094:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e09e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0a4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0ae:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0b4:	5a                   	pop    edx
c001e0b5:	59                   	pop    ecx
c001e0b6:	68 bf c1 02 c0       	push   0xc002c1bf
c001e0bb:	50                   	push   eax
c001e0bc:	e8 73 27 fe ff       	call   c0000834 <strcpy>
c001e0c1:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0c8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0cc:	83 c4 14             	add    esp,0x14
c001e0cf:	5b                   	pop    ebx
c001e0d0:	5e                   	pop    esi
c001e0d1:	e9 7e 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0d6 <schedule()>:
c001e0d6:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001e0db:	85 c0                	test   eax,eax
c001e0dd:	74 0b                	je     c001e0ea <schedule()+0x14>
c001e0df:	c7 05 24 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031924,0x1
c001e0e9:	c3                   	ret    
c001e0ea:	53                   	push   ebx
c001e0eb:	83 ec 14             	sub    esp,0x14
c001e0ee:	68 48 19 03 c0       	push   0xc0031948
c001e0f3:	e8 fe a8 00 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0f8:	83 c4 10             	add    esp,0x10
c001e0fb:	84 c0                	test   al,al
c001e0fd:	75 38                	jne    c001e137 <schedule()+0x61>
c001e0ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e104:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e107:	4a                   	dec    edx
c001e108:	74 32                	je     c001e13c <schedule()+0x66>
c001e10a:	83 ec 0c             	sub    esp,0xc
c001e10d:	68 48 19 03 c0       	push   0xc0031948
c001e112:	e8 d7 a8 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e117:	c7 04 24 48 19 03 c0 	mov    DWORD PTR [esp],0xc0031948
c001e11e:	89 c3                	mov    ebx,eax
c001e120:	e8 ed a8 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e125:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e12c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e12f:	e8 07 fd ff ff       	call   c001de3b <switchToThread(ThreadControlBlock*)>
c001e134:	83 c4 10             	add    esp,0x10
c001e137:	83 c4 08             	add    esp,0x8
c001e13a:	5b                   	pop    ebx
c001e13b:	c3                   	ret    
c001e13c:	83 ec 08             	sub    esp,0x8
c001e13f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e146:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e14c:	68 48 19 03 c0       	push   0xc0031948
c001e151:	e8 6a a9 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e156:	83 c4 10             	add    esp,0x10
c001e159:	eb af                	jmp    c001e10a <schedule()+0x34>

c001e15b <unlockStuff()>:
c001e15b:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001e160:	48                   	dec    eax
c001e161:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c001e166:	75 09                	jne    c001e171 <unlockStuff()+0x16>
c001e168:	a1 24 19 03 c0       	mov    eax,ds:0xc0031924
c001e16d:	85 c0                	test   eax,eax
c001e16f:	75 05                	jne    c001e176 <unlockStuff()+0x1b>
c001e171:	e9 15 fc ff ff       	jmp    c001dd8b <enableIRQs()>
c001e176:	83 ec 0c             	sub    esp,0xc
c001e179:	c7 05 24 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031924,0x0
c001e183:	e8 4e ff ff ff       	call   c001e0d6 <schedule()>
c001e188:	83 c4 0c             	add    esp,0xc
c001e18b:	e9 fb fb ff ff       	jmp    c001dd8b <enableIRQs()>

c001e190 <Semaphore::tryAcquire()>:
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e197:	e8 25 fc ff ff       	call   c001ddc1 <lockStuff()>
c001e19c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e19f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1a1:	7c 0b                	jl     c001e1ae <Semaphore::tryAcquire()+0x1e>
c001e1a3:	e8 b3 ff ff ff       	call   c001e15b <unlockStuff()>
c001e1a8:	31 c0                	xor    eax,eax
c001e1aa:	83 c4 0c             	add    esp,0xc
c001e1ad:	c3                   	ret    
c001e1ae:	42                   	inc    edx
c001e1af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1b2:	e8 a4 ff ff ff       	call   c001e15b <unlockStuff()>
c001e1b7:	b0 01                	mov    al,0x1
c001e1b9:	83 c4 0c             	add    esp,0xc
c001e1bc:	c3                   	ret    
c001e1bd:	90                   	nop

c001e1be <Semaphore::assertLocked(char const*)>:
c001e1be:	83 ec 0c             	sub    esp,0xc
c001e1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1c9:	e8 f3 fb ff ff       	call   c001ddc1 <lockStuff()>
c001e1ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e1d0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e1d3:	7c 05                	jl     c001e1da <Semaphore::assertLocked(char const*)+0x1c>
c001e1d5:	83 c4 0c             	add    esp,0xc
c001e1d8:	eb 81                	jmp    c001e15b <unlockStuff()>
c001e1da:	83 ec 0c             	sub    esp,0xc
c001e1dd:	52                   	push   edx
c001e1de:	e8 92 c3 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001e1e3:	83 c4 10             	add    esp,0x10
c001e1e6:	83 c4 0c             	add    esp,0xc
c001e1e9:	e9 6d ff ff ff       	jmp    c001e15b <unlockStuff()>

c001e1ee <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e1ee:	83 ec 0c             	sub    esp,0xc
c001e1f1:	e8 8f fb ff ff       	call   c001dd85 <getIRQNestingLevel()>
c001e1f6:	83 ec 08             	sub    esp,0x8
c001e1f9:	50                   	push   eax
c001e1fa:	68 18 c3 02 c0       	push   0xc002c318
c001e1ff:	e8 d0 4c ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e204:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e20d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e210:	e8 c1 fe ff ff       	call   c001e0d6 <schedule()>
c001e215:	e8 82 fb ff ff       	call   c001dd9c <unlockScheduler()>
c001e21a:	e8 66 fb ff ff       	call   c001dd85 <getIRQNestingLevel()>
c001e21f:	5a                   	pop    edx
c001e220:	59                   	pop    ecx
c001e221:	50                   	push   eax
c001e222:	68 4c c3 02 c0       	push   0xc002c34c
c001e227:	e8 a8 4c ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e22c:	83 c4 1c             	add    esp,0x1c
c001e22f:	c3                   	ret    

c001e230 <blockTask(TaskState)>:
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e237:	e8 5e fb ff ff       	call   c001dd9a <lockScheduler()>
c001e23c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e241:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e244:	e8 8d fe ff ff       	call   c001e0d6 <schedule()>
c001e249:	83 c4 0c             	add    esp,0xc
c001e24c:	e9 4b fb ff ff       	jmp    c001dd9c <unlockScheduler()>

c001e251 <waitTask(int, int*, int)>:
c001e251:	83 ec 18             	sub    esp,0x18
c001e254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e259:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e25d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e260:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e269:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e26c:	6a 07                	push   0x7
c001e26e:	e8 bd ff ff ff       	call   c001e230 <blockTask(TaskState)>
c001e273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e278:	83 c4 10             	add    esp,0x10
c001e27b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e27e:	85 d2                	test   edx,edx
c001e280:	74 0a                	je     c001e28c <waitTask(int, int*, int)+0x3b>
c001e282:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e285:	89 02                	mov    DWORD PTR [edx],eax
c001e287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e28c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e28f:	83 c4 0c             	add    esp,0xc
c001e292:	c3                   	ret    

c001e293 <nanoSleepUntil(unsigned long long)>:
c001e293:	83 ec 0c             	sub    esp,0xc
c001e296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e29e:	3b 05 70 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea70
c001e2a4:	89 d1                	mov    ecx,edx
c001e2a6:	1b 0d 74 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea74
c001e2ac:	73 04                	jae    c001e2b2 <nanoSleepUntil(unsigned long long)+0x1f>
c001e2ae:	83 c4 0c             	add    esp,0xc
c001e2b1:	c3                   	ret    
c001e2b2:	e8 0a fb ff ff       	call   c001ddc1 <lockStuff()>
c001e2b7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2bd:	83 ec 08             	sub    esp,0x8
c001e2c0:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e2c3:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e2c6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e2cc:	68 3c 19 03 c0       	push   0xc003193c
c001e2d1:	e8 ea a7 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2d6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e2dd:	e8 4e ff ff ff       	call   c001e230 <blockTask(TaskState)>
c001e2e2:	83 c4 1c             	add    esp,0x1c
c001e2e5:	e9 71 fe ff ff       	jmp    c001e15b <unlockStuff()>

c001e2ea <nanoSleep(unsigned long long)>:
c001e2ea:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c001e2ef:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c001e2f5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e2f9:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e2fd:	eb 94                	jmp    c001e293 <nanoSleepUntil(unsigned long long)>

c001e2ff <sleep(unsigned long long)>:
c001e2ff:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e307:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e30c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e310:	01 ca                	add    edx,ecx
c001e312:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e316:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e31a:	eb ce                	jmp    c001e2ea <nanoSleep(unsigned long long)>

c001e31c <Semaphore::acquire()>:
c001e31c:	83 ec 0c             	sub    esp,0xc
c001e31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e323:	e8 99 fa ff ff       	call   c001ddc1 <lockStuff()>
c001e328:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e32b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e32d:	7d 0c                	jge    c001e33b <Semaphore::acquire()+0x1f>
c001e32f:	42                   	inc    edx
c001e330:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e333:	83 c4 0c             	add    esp,0xc
c001e336:	e9 20 fe ff ff       	jmp    c001e15b <unlockStuff()>
c001e33b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e341:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e348:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e34b:	85 d2                	test   edx,edx
c001e34d:	74 2a                	je     c001e379 <Semaphore::acquire()+0x5d>
c001e34f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e352:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e358:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e35b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e361:	83 ec 0c             	sub    esp,0xc
c001e364:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e367:	6a 05                	push   0x5
c001e369:	e8 c2 fe ff ff       	call   c001e230 <blockTask(TaskState)>
c001e36e:	83 c4 10             	add    esp,0x10
c001e371:	83 c4 0c             	add    esp,0xc
c001e374:	e9 e2 fd ff ff       	jmp    c001e15b <unlockStuff()>
c001e379:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e37f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e382:	eb d7                	jmp    c001e35b <Semaphore::acquire()+0x3f>

c001e384 <taskReturned>:
c001e384:	83 ec 18             	sub    esp,0x18
c001e387:	68 80 c3 02 c0       	push   0xc002c380
c001e38c:	e8 e4 c1 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001e391:	83 c4 10             	add    esp,0x10
c001e394:	83 ec 0c             	sub    esp,0xc
c001e397:	6a 02                	push   0x2
c001e399:	e8 92 fe ff ff       	call   c001e230 <blockTask(TaskState)>
c001e39e:	e8 f7 f9 ff ff       	call   c001dd9a <lockScheduler()>
c001e3a3:	e8 2e fd ff ff       	call   c001e0d6 <schedule()>
c001e3a8:	e8 ef f9 ff ff       	call   c001dd9c <unlockScheduler()>
c001e3ad:	83 c4 10             	add    esp,0x10
c001e3b0:	eb e2                	jmp    c001e394 <taskReturned+0x10>

c001e3b2 <unblockTask(ThreadControlBlock*)>:
c001e3b2:	53                   	push   ebx
c001e3b3:	83 ec 08             	sub    esp,0x8
c001e3b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3ba:	e8 db f9 ff ff       	call   c001dd9a <lockScheduler()>
c001e3bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3c2:	85 c0                	test   eax,eax
c001e3c4:	74 5c                	je     c001e422 <unblockTask(ThreadControlBlock*)+0x70>
c001e3c6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3c9:	48                   	dec    eax
c001e3ca:	74 31                	je     c001e3fd <unblockTask(ThreadControlBlock*)+0x4b>
c001e3cc:	83 ec 0c             	sub    esp,0xc
c001e3cf:	68 48 19 03 c0       	push   0xc0031948
c001e3d4:	e8 15 a6 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3d9:	83 c4 10             	add    esp,0x10
c001e3dc:	85 c0                	test   eax,eax
c001e3de:	75 17                	jne    c001e3f7 <unblockTask(ThreadControlBlock*)+0x45>
c001e3e0:	eb 65                	jmp    c001e447 <unblockTask(ThreadControlBlock*)+0x95>
c001e3e2:	83 ec 08             	sub    esp,0x8
c001e3e5:	50                   	push   eax
c001e3e6:	68 48 19 03 c0       	push   0xc0031948
c001e3eb:	e8 d8 a8 00 00       	call   c0028cc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e3f0:	83 c4 10             	add    esp,0x10
c001e3f3:	85 c0                	test   eax,eax
c001e3f5:	74 50                	je     c001e447 <unblockTask(ThreadControlBlock*)+0x95>
c001e3f7:	39 c3                	cmp    ebx,eax
c001e3f9:	75 e7                	jne    c001e3e2 <unblockTask(ThreadControlBlock*)+0x30>
c001e3fb:	eb 1c                	jmp    c001e419 <unblockTask(ThreadControlBlock*)+0x67>
c001e3fd:	83 ec 0c             	sub    esp,0xc
c001e400:	68 70 c4 02 c0       	push   0xc002c470
c001e405:	e8 ca 4a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e40a:	c7 04 24 fc c3 02 c0 	mov    DWORD PTR [esp],0xc002c3fc
c001e411:	e8 be 4a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e416:	83 c4 10             	add    esp,0x10
c001e419:	83 c4 08             	add    esp,0x8
c001e41c:	5b                   	pop    ebx
c001e41d:	e9 7a f9 ff ff       	jmp    c001dd9c <unlockScheduler()>
c001e422:	83 ec 0c             	sub    esp,0xc
c001e425:	68 b4 c3 02 c0       	push   0xc002c3b4
c001e42a:	e8 a5 4a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e42f:	c7 04 24 fc c3 02 c0 	mov    DWORD PTR [esp],0xc002c3fc
c001e436:	e8 99 4a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e43b:	83 c4 10             	add    esp,0x10
c001e43e:	83 c4 08             	add    esp,0x8
c001e441:	5b                   	pop    ebx
c001e442:	e9 55 f9 ff ff       	jmp    c001dd9c <unlockScheduler()>
c001e447:	83 ec 08             	sub    esp,0x8
c001e44a:	53                   	push   ebx
c001e44b:	68 48 19 03 c0       	push   0xc0031948
c001e450:	e8 6b a6 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e455:	83 c4 10             	add    esp,0x10
c001e458:	83 c4 08             	add    esp,0x8
c001e45b:	5b                   	pop    ebx
c001e45c:	e9 3b f9 ff ff       	jmp    c001dd9c <unlockScheduler()>

c001e461 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e461:	55                   	push   ebp
c001e462:	57                   	push   edi
c001e463:	56                   	push   esi
c001e464:	53                   	push   ebx
c001e465:	83 ec 1c             	sub    esp,0x1c
c001e468:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e46c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e46f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e475:	85 ff                	test   edi,edi
c001e477:	7e 20                	jle    c001e499 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e479:	31 f6                	xor    esi,esi
c001e47b:	83 ec 0c             	sub    esp,0xc
c001e47e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e485:	46                   	inc    esi
c001e486:	e8 c5 13 ff ff       	call   c000f850 <free>
c001e48b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e48e:	83 c4 10             	add    esp,0x10
c001e491:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e497:	7f e2                	jg     c001e47b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e499:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4a3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4a8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4ab:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4ae:	d3 c0                	rol    eax,cl
c001e4b0:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4b7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4ba:	89 f7                	mov    edi,esi
c001e4bc:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e4c4:	0f 85 74 01 00 00    	jne    c001e63e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e4ca:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e4d0:	85 ed                	test   ebp,ebp
c001e4d2:	74 1b                	je     c001e4ef <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e4d4:	83 ec 0c             	sub    esp,0xc
c001e4d7:	55                   	push   ebp
c001e4d8:	e8 05 be ff ff       	call   c001a2e2 <EnvVarContainer::~EnvVarContainer()>
c001e4dd:	59                   	pop    ecx
c001e4de:	5e                   	pop    esi
c001e4df:	6a 0c                	push   0xc
c001e4e1:	55                   	push   ebp
c001e4e2:	e8 0d 49 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c001e4e7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4ea:	83 c4 10             	add    esp,0x10
c001e4ed:	89 f7                	mov    edi,esi
c001e4ef:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4f5:	85 c0                	test   eax,eax
c001e4f7:	0f 84 aa 00 00 00    	je     c001e5a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4fd:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e500:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e504:	31 c9                	xor    ecx,ecx
c001e506:	eb 10                	jmp    c001e518 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e508:	41                   	inc    ecx
c001e509:	83 f9 10             	cmp    ecx,0x10
c001e50c:	0f 84 95 00 00 00    	je     c001e5a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e512:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e518:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e51f:	d3 fa                	sar    edx,cl
c001e521:	83 e2 01             	and    edx,0x1
c001e524:	74 e2                	je     c001e508 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e526:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e529:	01 ca                	add    edx,ecx
c001e52b:	89 d5                	mov    ebp,edx
c001e52d:	c1 e5 05             	shl    ebp,0x5
c001e530:	01 ea                	add    edx,ebp
c001e532:	01 d0                	add    eax,edx
c001e534:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e53a:	83 fd 07             	cmp    ebp,0x7
c001e53d:	75 c9                	jne    c001e508 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e53f:	05 40 02 00 00       	add    eax,0x240
c001e544:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e547:	83 fd ff             	cmp    ebp,0xffffffff
c001e54a:	0f 8c 08 01 00 00    	jl     c001e658 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e550:	0f 84 b9 01 00 00    	je     c001e70f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e556:	85 ed                	test   ebp,ebp
c001e558:	0f 84 a0 01 00 00    	je     c001e6fe <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e55e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e560:	75 a6                	jne    c001e508 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e562:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e568:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e56c:	01 d0                	add    eax,edx
c001e56e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e572:	83 ec 0c             	sub    esp,0xc
c001e575:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e57b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e57e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e584:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e58b:	50                   	push   eax
c001e58c:	e8 21 fe ff ff       	call   c001e3b2 <unblockTask(ThreadControlBlock*)>
c001e591:	83 c4 10             	add    esp,0x10
c001e594:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e597:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e59b:	89 f7                	mov    edi,esi
c001e59d:	41                   	inc    ecx
c001e59e:	83 f9 10             	cmp    ecx,0x10
c001e5a1:	0f 85 6b ff ff ff    	jne    c001e512 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5a7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5ad:	85 c0                	test   eax,eax
c001e5af:	74 5d                	je     c001e60e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5b1:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5b7:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5bd:	74 4f                	je     c001e60e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5bf:	83 ec 0c             	sub    esp,0xc
c001e5c2:	68 48 19 03 c0       	push   0xc0031948
c001e5c7:	e8 22 a4 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5cc:	c7 04 24 48 19 03 c0 	mov    DWORD PTR [esp],0xc0031948
c001e5d3:	89 c7                	mov    edi,eax
c001e5d5:	e8 1c a4 00 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5da:	83 c4 10             	add    esp,0x10
c001e5dd:	84 c0                	test   al,al
c001e5df:	0f 84 e4 00 00 00    	je     c001e6c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e5e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5e8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e5ee:	85 d2                	test   edx,edx
c001e5f0:	74 0f                	je     c001e601 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e5f2:	83 ec 0c             	sub    esp,0xc
c001e5f5:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5f7:	52                   	push   edx
c001e5f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5fb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5fe:	83 c4 10             	add    esp,0x10
c001e601:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e60b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e60e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e614:	85 db                	test   ebx,ebx
c001e616:	74 16                	je     c001e62e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e618:	83 ec 0c             	sub    esp,0xc
c001e61b:	53                   	push   ebx
c001e61c:	e8 e9 3b ff ff       	call   c001220a <VAS::~VAS()>
c001e621:	58                   	pop    eax
c001e622:	5a                   	pop    edx
c001e623:	6a 10                	push   0x10
c001e625:	53                   	push   ebx
c001e626:	e8 c9 47 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c001e62b:	83 c4 10             	add    esp,0x10
c001e62e:	83 ec 0c             	sub    esp,0xc
c001e631:	68 ca c1 02 c0       	push   0xc002c1ca
c001e636:	e8 99 48 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e63b:	83 c4 10             	add    esp,0x10
c001e63e:	83 ec 08             	sub    esp,0x8
c001e641:	68 3f 07 00 00       	push   0x73f
c001e646:	68 d8 c1 02 c0       	push   0xc002c1d8
c001e64b:	e8 84 48 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e650:	83 c4 2c             	add    esp,0x2c
c001e653:	5b                   	pop    ebx
c001e654:	5e                   	pop    esi
c001e655:	5f                   	pop    edi
c001e656:	5d                   	pop    ebp
c001e657:	c3                   	ret    
c001e658:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e65c:	83 ec 0c             	sub    esp,0xc
c001e65f:	68 b4 c4 02 c0       	push   0xc002c4b4
c001e664:	e8 0c bf ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001e669:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e66c:	83 c4 10             	add    esp,0x10
c001e66f:	89 f7                	mov    edi,esi
c001e671:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e675:	e9 8e fe ff ff       	jmp    c001e508 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e67a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e680:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e686:	75 1c                	jne    c001e6a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e688:	83 ec 0c             	sub    esp,0xc
c001e68b:	68 1c c5 02 c0       	push   0xc002c51c
c001e690:	e8 3f 48 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e695:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e69c:	e8 8f fb ff ff       	call   c001e230 <blockTask(TaskState)>
c001e6a1:	83 c4 10             	add    esp,0x10
c001e6a4:	83 ec 08             	sub    esp,0x8
c001e6a7:	56                   	push   esi
c001e6a8:	68 48 19 03 c0       	push   0xc0031948
c001e6ad:	e8 0e a4 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6b2:	c7 04 24 48 19 03 c0 	mov    DWORD PTR [esp],0xc0031948
c001e6b9:	e8 30 a3 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	39 f8                	cmp    eax,edi
c001e6c3:	0f 84 1c ff ff ff    	je     c001e5e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e6c9:	83 ec 0c             	sub    esp,0xc
c001e6cc:	68 48 19 03 c0       	push   0xc0031948
c001e6d1:	e8 18 a3 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6d6:	c7 04 24 48 19 03 c0 	mov    DWORD PTR [esp],0xc0031948
c001e6dd:	89 c6                	mov    esi,eax
c001e6df:	e8 2e a3 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6e4:	83 c4 10             	add    esp,0x10
c001e6e7:	39 f3                	cmp    ebx,esi
c001e6e9:	74 b9                	je     c001e6a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6eb:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6ee:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6f1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e6f7:	75 ab                	jne    c001e6a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6f9:	e9 7c ff ff ff       	jmp    c001e67a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e6fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e702:	83 ec 0c             	sub    esp,0xc
c001e705:	68 e8 c4 02 c0       	push   0xc002c4e8
c001e70a:	e9 55 ff ff ff       	jmp    c001e664 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e70f:	8b 36                	mov    esi,DWORD PTR [esi]
c001e711:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e715:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e718:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e71b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e721:	01 d7                	add    edi,edx
c001e723:	89 f8                	mov    eax,edi
c001e725:	e9 44 fe ff ff       	jmp    c001e56e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e72a <cleanerTaskFunction(void*)>:
c001e72a:	53                   	push   ebx
c001e72b:	83 ec 08             	sub    esp,0x8
c001e72e:	e8 69 f6 ff ff       	call   c001dd9c <unlockScheduler()>
c001e733:	e8 62 f6 ff ff       	call   c001dd9a <lockScheduler()>
c001e738:	80 3d 0c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003190c,0x0
c001e73f:	0f 85 8e 00 00 00    	jne    c001e7d3 <cleanerTaskFunction(void*)+0xa9>
c001e745:	83 ec 0c             	sub    esp,0xc
c001e748:	6a 02                	push   0x2
c001e74a:	e8 9f fa ff ff       	call   c001e1ee <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e74f:	83 c4 10             	add    esp,0x10
c001e752:	c6 05 0c 19 03 c0 00 	mov    BYTE PTR ds:0xc003190c,0x0
c001e759:	e8 63 f6 ff ff       	call   c001ddc1 <lockStuff()>
c001e75e:	e8 37 f6 ff ff       	call   c001dd9a <lockScheduler()>
c001e763:	83 ec 0c             	sub    esp,0xc
c001e766:	68 30 19 03 c0       	push   0xc0031930
c001e76b:	e8 86 a2 00 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e770:	83 c4 10             	add    esp,0x10
c001e773:	84 c0                	test   al,al
c001e775:	75 40                	jne    c001e7b7 <cleanerTaskFunction(void*)+0x8d>
c001e777:	83 ec 0c             	sub    esp,0xc
c001e77a:	68 30 19 03 c0       	push   0xc0031930
c001e77f:	e8 6a a2 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e784:	c7 04 24 30 19 03 c0 	mov    DWORD PTR [esp],0xc0031930
c001e78b:	89 c3                	mov    ebx,eax
c001e78d:	e8 80 a2 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e792:	c7 04 24 ee c1 02 c0 	mov    DWORD PTR [esp],0xc002c1ee
c001e799:	e8 36 47 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e79e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7a1:	e8 bb fc ff ff       	call   c001e461 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7a6:	c7 04 24 07 c2 02 c0 	mov    DWORD PTR [esp],0xc002c207
c001e7ad:	e8 22 47 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e7b2:	83 c4 10             	add    esp,0x10
c001e7b5:	eb ac                	jmp    c001e763 <cleanerTaskFunction(void*)+0x39>
c001e7b7:	e8 e0 f5 ff ff       	call   c001dd9c <unlockScheduler()>
c001e7bc:	e8 9a f9 ff ff       	call   c001e15b <unlockStuff()>
c001e7c1:	e8 d4 f5 ff ff       	call   c001dd9a <lockScheduler()>
c001e7c6:	80 3d 0c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003190c,0x0
c001e7cd:	0f 84 72 ff ff ff    	je     c001e745 <cleanerTaskFunction(void*)+0x1b>
c001e7d3:	e8 c4 f5 ff ff       	call   c001dd9c <unlockScheduler()>
c001e7d8:	e9 75 ff ff ff       	jmp    c001e752 <cleanerTaskFunction(void*)+0x28>

c001e7dd <terminateTask(int)>:
c001e7dd:	83 ec 14             	sub    esp,0x14
c001e7e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e7e8:	83 c0 0c             	add    eax,0xc
c001e7eb:	50                   	push   eax
c001e7ec:	68 44 c5 02 c0       	push   0xc002c544
c001e7f1:	e8 de 46 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e7f6:	e8 c6 f5 ff ff       	call   c001ddc1 <lockStuff()>
c001e7fb:	e8 9a f5 ff ff       	call   c001dd9a <lockScheduler()>
c001e800:	c7 04 24 1a c2 02 c0 	mov    DWORD PTR [esp],0xc002c21a
c001e807:	e8 c8 46 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e80c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e815:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e818:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e81d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e820:	5a                   	pop    edx
c001e821:	59                   	pop    ecx
c001e822:	50                   	push   eax
c001e823:	68 30 19 03 c0       	push   0xc0031930
c001e828:	e8 93 a2 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e82d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e832:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e839:	c7 04 24 34 c2 02 c0 	mov    DWORD PTR [esp],0xc002c234
c001e840:	e8 8f 46 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e845:	83 c4 10             	add    esp,0x10
c001e848:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c001e84d:	85 c0                	test   eax,eax
c001e84f:	74 5a                	je     c001e8ab <terminateTask(int)+0xce>
c001e851:	83 ec 0c             	sub    esp,0xc
c001e854:	68 4e c2 02 c0       	push   0xc002c24e
c001e859:	e8 76 46 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e85e:	58                   	pop    eax
c001e85f:	c6 05 0c 19 03 c0 01 	mov    BYTE PTR ds:0xc003190c,0x1
c001e866:	ff 35 08 19 03 c0    	push   DWORD PTR ds:0xc0031908
c001e86c:	e8 41 fb ff ff       	call   c001e3b2 <unblockTask(ThreadControlBlock*)>
c001e871:	c7 04 24 68 c2 02 c0 	mov    DWORD PTR [esp],0xc002c268
c001e878:	e8 57 46 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e87d:	83 c4 10             	add    esp,0x10
c001e880:	e8 17 f5 ff ff       	call   c001dd9c <unlockScheduler()>
c001e885:	e8 d1 f8 ff ff       	call   c001e15b <unlockStuff()>
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	68 a0 c2 02 c0       	push   0xc002c2a0
c001e892:	e8 3d 46 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e897:	83 c4 10             	add    esp,0x10
c001e89a:	e8 fb f4 ff ff       	call   c001dd9a <lockScheduler()>
c001e89f:	e8 32 f8 ff ff       	call   c001e0d6 <schedule()>
c001e8a4:	e8 f3 f4 ff ff       	call   c001dd9c <unlockScheduler()>
c001e8a9:	eb ef                	jmp    c001e89a <terminateTask(int)+0xbd>
c001e8ab:	83 ec 0c             	sub    esp,0xc
c001e8ae:	68 82 c2 02 c0       	push   0xc002c282
c001e8b3:	e8 1c 46 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e8b8:	83 c4 10             	add    esp,0x10
c001e8bb:	eb c3                	jmp    c001e880 <terminateTask(int)+0xa3>

c001e8bd <Thr::terminateFromIRQ(int)>:
c001e8bd:	83 ec 18             	sub    esp,0x18
c001e8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8c4:	e8 14 ff ff ff       	call   c001e7dd <terminateTask(int)>
c001e8c9:	90                   	nop

c001e8ca <Semaphore::release()>:
c001e8ca:	83 ec 0c             	sub    esp,0xc
c001e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d1:	e8 eb f4 ff ff       	call   c001ddc1 <lockStuff()>
c001e8d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e8d9:	85 d2                	test   edx,edx
c001e8db:	74 1a                	je     c001e8f7 <Semaphore::release()+0x2d>
c001e8dd:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e8e6:	52                   	push   edx
c001e8e7:	e8 c6 fa ff ff       	call   c001e3b2 <unblockTask(ThreadControlBlock*)>
c001e8ec:	83 c4 10             	add    esp,0x10
c001e8ef:	83 c4 0c             	add    esp,0xc
c001e8f2:	e9 64 f8 ff ff       	jmp    c001e15b <unlockStuff()>
c001e8f7:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e8fa:	83 c4 0c             	add    esp,0xc
c001e8fd:	e9 59 f8 ff ff       	jmp    c001e15b <unlockStuff()>

c001e902 <__static_initialization_and_destruction_0(int, int)>:
c001e902:	83 ec 0c             	sub    esp,0xc
c001e905:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e90a:	0f 85 88 00 00 00    	jne    c001e998 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e910:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e918:	75 7e                	jne    c001e998 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e91a:	83 ec 0c             	sub    esp,0xc
c001e91d:	68 48 19 03 c0       	push   0xc0031948
c001e922:	e8 49 a3 00 00       	call   c0028c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e927:	83 c4 10             	add    esp,0x10
c001e92a:	83 ec 04             	sub    esp,0x4
c001e92d:	68 fc d2 02 c0       	push   0xc002d2fc
c001e932:	68 48 19 03 c0       	push   0xc0031948
c001e937:	68 30 8c 02 c0       	push   0xc0028c30
c001e93c:	e8 2d 44 ff ff       	call   c0012d6e <__cxa_atexit>
c001e941:	83 c4 10             	add    esp,0x10
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	68 3c 19 03 c0       	push   0xc003193c
c001e94c:	e8 1f a3 00 00       	call   c0028c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e951:	83 c4 10             	add    esp,0x10
c001e954:	83 ec 04             	sub    esp,0x4
c001e957:	68 fc d2 02 c0       	push   0xc002d2fc
c001e95c:	68 3c 19 03 c0       	push   0xc003193c
c001e961:	68 30 8c 02 c0       	push   0xc0028c30
c001e966:	e8 03 44 ff ff       	call   c0012d6e <__cxa_atexit>
c001e96b:	83 c4 10             	add    esp,0x10
c001e96e:	83 ec 0c             	sub    esp,0xc
c001e971:	68 30 19 03 c0       	push   0xc0031930
c001e976:	e8 f5 a2 00 00       	call   c0028c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e97b:	83 c4 10             	add    esp,0x10
c001e97e:	83 ec 04             	sub    esp,0x4
c001e981:	68 fc d2 02 c0       	push   0xc002d2fc
c001e986:	68 30 19 03 c0       	push   0xc0031930
c001e98b:	68 30 8c 02 c0       	push   0xc0028c30
c001e990:	e8 d9 43 ff ff       	call   c0012d6e <__cxa_atexit>
c001e995:	83 c4 10             	add    esp,0x10
c001e998:	90                   	nop
c001e999:	83 c4 0c             	add    esp,0xc
c001e99c:	c3                   	ret    

c001e99d <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e99d:	83 ec 0c             	sub    esp,0xc
c001e9a0:	83 ec 08             	sub    esp,0x8
c001e9a3:	68 ff ff 00 00       	push   0xffff
c001e9a8:	6a 01                	push   0x1
c001e9aa:	e8 53 ff ff ff       	call   c001e902 <__static_initialization_and_destruction_0(int, int)>
c001e9af:	83 c4 10             	add    esp,0x10
c001e9b2:	83 c4 0c             	add    esp,0xc
c001e9b5:	c3                   	ret    

c001e9b6 <Vm::inbv(unsigned short)>:
c001e9b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9ba:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9bf:	75 06                	jne    c001e9c7 <Vm::inbv(unsigned short)+0x11>
c001e9c1:	a0 8c 19 03 c0       	mov    al,ds:0xc003198c
c001e9c6:	c3                   	ret    
c001e9c7:	ec                   	in     al,dx
c001e9c8:	c3                   	ret    

c001e9c9 <Vm::outbv(unsigned short, unsigned char)>:
c001e9c9:	53                   	push   ebx
c001e9ca:	83 ec 08             	sub    esp,0x8
c001e9cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e9d5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9da:	75 38                	jne    c001ea14 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e9dc:	0f b6 c3             	movzx  eax,bl
c001e9df:	51                   	push   ecx
c001e9e0:	51                   	push   ecx
c001e9e1:	50                   	push   eax
c001e9e2:	68 63 c5 02 c0       	push   0xc002c563
c001e9e7:	e8 e8 44 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001e9ec:	8b 15 8c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003198c
c001e9f2:	83 c4 10             	add    esp,0x10
c001e9f5:	8d 42 01             	lea    eax,[edx+0x1]
c001e9f8:	88 9a a0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce660],bl
c001e9fe:	a3 8c 19 03 c0       	mov    ds:0xc003198c,eax
c001ea03:	83 f8 20             	cmp    eax,0x20
c001ea06:	75 0f                	jne    c001ea17 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea08:	c7 05 8c 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003198c,0x1f
c001ea12:	eb 03                	jmp    c001ea17 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea14:	88 d8                	mov    al,bl
c001ea16:	ee                   	out    dx,al
c001ea17:	83 c4 08             	add    esp,0x8
c001ea1a:	5b                   	pop    ebx
c001ea1b:	c3                   	ret    

c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea26:	c1 e0 04             	shl    eax,0x4
c001ea29:	01 d0                	add    eax,edx
c001ea2b:	c3                   	ret    

c001ea2c <Vm::getSegment(unsigned int)>:
c001ea2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea30:	c1 e8 10             	shr    eax,0x10
c001ea33:	c3                   	ret    

c001ea34 <Vm::getOffset(unsigned int)>:
c001ea34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea38:	c3                   	ret    

c001ea39 <Vm::mainloop2()>:
c001ea39:	83 ec 0c             	sub    esp,0xc
c001ea3c:	e8 59 f3 ff ff       	call   c001dd9a <lockScheduler()>
c001ea41:	83 ec 0c             	sub    esp,0xc
c001ea44:	c6 05 85 19 03 c0 01 	mov    BYTE PTR ds:0xc0031985,0x1
c001ea4b:	6a 02                	push   0x2
c001ea4d:	e8 9c f7 ff ff       	call   c001e1ee <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea57:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea5b:	52                   	push   edx
c001ea5c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea60:	52                   	push   edx
c001ea61:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea65:	52                   	push   edx
c001ea66:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea6a:	50                   	push   eax
c001ea6b:	e8 8a 18 fe ff       	call   c00002fa <goToVM86>
c001ea70:	83 c4 2c             	add    esp,0x2c
c001ea73:	c3                   	ret    

c001ea74 <Vm::mainVm8086Loop(void*)>:
c001ea74:	83 ec 0c             	sub    esp,0xc
c001ea77:	e8 20 f3 ff ff       	call   c001dd9c <unlockScheduler()>
c001ea7c:	83 c4 0c             	add    esp,0xc
c001ea7f:	eb b8                	jmp    c001ea39 <Vm::mainloop2()>

c001ea81 <Vm::mainloop3(unsigned long)>:
c001ea81:	53                   	push   ebx
c001ea82:	83 ec 08             	sub    esp,0x8
c001ea85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea89:	e8 0c f3 ff ff       	call   c001dd9a <lockScheduler()>
c001ea8e:	83 ec 0c             	sub    esp,0xc
c001ea91:	89 1d 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,ebx
c001ea97:	6a 02                	push   0x2
c001ea99:	c6 05 84 19 03 c0 01 	mov    BYTE PTR ds:0xc0031984,0x1
c001eaa0:	e8 49 f7 ff ff       	call   c001e1ee <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eaa5:	83 c4 18             	add    esp,0x18
c001eaa8:	5b                   	pop    ebx
c001eaa9:	eb 8e                	jmp    c001ea39 <Vm::mainloop2()>

c001eaab <Vm::initialise8086()>:
c001eaab:	83 ec 0c             	sub    esp,0xc
c001eaae:	68 80 00 00 00       	push   0x80
c001eab3:	6a 00                	push   0x0
c001eab5:	68 74 ea 01 c0       	push   0xc001ea74
c001eaba:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001eac0:	e8 07 f4 ff ff       	call   c001decc <Process::createThread(void (*)(void*), void*, int)>
c001eac5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eacc:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c001ead1:	68 00 01 00 00       	push   0x100
c001ead6:	a1 54 19 03 c0       	mov    eax,ds:0xc0031954
c001eadb:	6a 00                	push   0x0
c001eadd:	6a 00                	push   0x0
c001eadf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eae5:	e8 80 3b ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eaea:	83 c4 2c             	add    esp,0x2c
c001eaed:	c3                   	ret    

c001eaee <Vm::finish8086()>:
c001eaee:	53                   	push   ebx
c001eaef:	83 ec 08             	sub    esp,0x8
c001eaf2:	e8 a3 f2 ff ff       	call   c001dd9a <lockScheduler()>
c001eaf7:	80 3d 84 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031984,0x0
c001eafe:	75 0c                	jne    c001eb0c <Vm::finish8086()+0x1e>
c001eb00:	e8 d1 f5 ff ff       	call   c001e0d6 <schedule()>
c001eb05:	e8 92 f2 ff ff       	call   c001dd9c <unlockScheduler()>
c001eb0a:	eb e6                	jmp    c001eaf2 <Vm::finish8086()+0x4>
c001eb0c:	83 ec 0c             	sub    esp,0xc
c001eb0f:	8b 1d 80 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031980
c001eb15:	ff 35 88 19 03 c0    	push   DWORD PTR ds:0xc0031988
c001eb1b:	c6 05 84 19 03 c0 00 	mov    BYTE PTR ds:0xc0031984,0x0
c001eb22:	e8 8b f8 ff ff       	call   c001e3b2 <unblockTask(ThreadControlBlock*)>
c001eb27:	e8 70 f2 ff ff       	call   c001dd9c <unlockScheduler()>
c001eb2c:	89 d8                	mov    eax,ebx
c001eb2e:	83 c4 18             	add    esp,0x18
c001eb31:	5b                   	pop    ebx
c001eb32:	c3                   	ret    

c001eb33 <Vm::getOutput8086(unsigned char*)>:
c001eb33:	83 ec 10             	sub    esp,0x10
c001eb36:	ff 35 8c 19 03 c0    	push   DWORD PTR ds:0xc003198c
c001eb3c:	68 a0 19 03 c0       	push   0xc00319a0
c001eb41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb45:	e8 fa 1b fe ff       	call   c0000744 <memcpy>
c001eb4a:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c001eb4f:	c7 05 8c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003198c,0x0
c001eb59:	83 c4 1c             	add    esp,0x1c
c001eb5c:	c3                   	ret    

c001eb5d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb5d:	55                   	push   ebp
c001eb5e:	57                   	push   edi
c001eb5f:	56                   	push   esi
c001eb60:	53                   	push   ebx
c001eb61:	83 ec 2c             	sub    esp,0x2c
c001eb64:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eb68:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eb6c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eb70:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eb74:	e8 21 f2 ff ff       	call   c001dd9a <lockScheduler()>
c001eb79:	a0 85 19 03 c0       	mov    al,ds:0xc0031985
c001eb7e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb82:	84 c0                	test   al,al
c001eb84:	75 0c                	jne    c001eb92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eb86:	e8 4b f5 ff ff       	call   c001e0d6 <schedule()>
c001eb8b:	e8 0c f2 ff ff       	call   c001dd9c <unlockScheduler()>
c001eb90:	eb e2                	jmp    c001eb74 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb92:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001eb97:	c7 05 8c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003198c,0x0
c001eba1:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eba5:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eba9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ebad:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ebb1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebb5:	50                   	push   eax
c001ebb6:	6a 20                	push   0x20
c001ebb8:	6a 00                	push   0x0
c001ebba:	68 a0 19 03 c0       	push   0xc00319a0
c001ebbf:	e8 b4 1b fe ff       	call   c0000778 <memset>
c001ebc4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ebcb:	e8 70 0c ff ff       	call   c000f840 <malloc>
c001ebd0:	83 c4 0c             	add    esp,0xc
c001ebd3:	89 c7                	mov    edi,eax
c001ebd5:	ff 35 54 19 03 c0    	push   DWORD PTR ds:0xc0031954
c001ebdb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebdf:	50                   	push   eax
c001ebe0:	e8 47 48 ff ff       	call   c001342c <File::File(char const*, Process*)>
c001ebe5:	83 c4 10             	add    esp,0x10
c001ebe8:	85 ff                	test   edi,edi
c001ebea:	75 0a                	jne    c001ebf6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ebec:	83 ec 0c             	sub    esp,0xc
c001ebef:	68 7f c5 02 c0       	push   0xc002c57f
c001ebf4:	eb 27                	jmp    c001ec1d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ebf6:	50                   	push   eax
c001ebf7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ebfb:	50                   	push   eax
c001ebfc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec00:	50                   	push   eax
c001ec01:	57                   	push   edi
c001ec02:	e8 35 4b ff ff       	call   c001373c <File::stat(unsigned long long*, bool*)>
c001ec07:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec0c:	83 c4 10             	add    esp,0x10
c001ec0f:	89 e8                	mov    eax,ebp
c001ec11:	84 c0                	test   al,al
c001ec13:	74 19                	je     c001ec2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec15:	83 ec 0c             	sub    esp,0xc
c001ec18:	68 93 c5 02 c0       	push   0xc002c593
c001ec1d:	e8 53 b9 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001ec22:	31 ed                	xor    ebp,ebp
c001ec24:	e8 73 f1 ff ff       	call   c001dd9c <unlockScheduler()>
c001ec29:	83 c4 10             	add    esp,0x10
c001ec2c:	eb 75                	jmp    c001eca3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec2e:	50                   	push   eax
c001ec2f:	50                   	push   eax
c001ec30:	6a 01                	push   0x1
c001ec32:	57                   	push   edi
c001ec33:	e8 58 48 ff ff       	call   c0013490 <File::open(FileOpenMode)>
c001ec38:	83 c4 10             	add    esp,0x10
c001ec3b:	85 c0                	test   eax,eax
c001ec3d:	74 17                	je     c001ec56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec3f:	83 ec 0c             	sub    esp,0xc
c001ec42:	68 ac c5 02 c0       	push   0xc002c5ac
c001ec47:	e8 29 b9 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001ec4c:	e8 4b f1 ff ff       	call   c001dd9c <unlockScheduler()>
c001ec51:	83 c4 10             	add    esp,0x10
c001ec54:	eb 4d                	jmp    c001eca3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec56:	0f b7 f6             	movzx  esi,si
c001ec59:	50                   	push   eax
c001ec5a:	0f b7 db             	movzx  ebx,bx
c001ec5d:	50                   	push   eax
c001ec5e:	56                   	push   esi
c001ec5f:	53                   	push   ebx
c001ec60:	e8 b7 fd ff ff       	call   c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>
c001ec65:	5a                   	pop    edx
c001ec66:	8b 17                	mov    edx,DWORD PTR [edi]
c001ec68:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec6c:	51                   	push   ecx
c001ec6d:	50                   	push   eax
c001ec6e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec72:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec76:	57                   	push   edi
c001ec77:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec7a:	83 c4 14             	add    esp,0x14
c001ec7d:	57                   	push   edi
c001ec7e:	e8 6b 48 ff ff       	call   c00134ee <File::close()>
c001ec83:	c6 05 85 19 03 c0 00 	mov    BYTE PTR ds:0xc0031985,0x0
c001ec8a:	e8 0d f1 ff ff       	call   c001dd9c <unlockScheduler()>
c001ec8f:	59                   	pop    ecx
c001ec90:	ff 35 88 19 03 c0    	push   DWORD PTR ds:0xc0031988
c001ec96:	e8 17 f7 ff ff       	call   c001e3b2 <unblockTask(ThreadControlBlock*)>
c001ec9b:	83 c4 10             	add    esp,0x10
c001ec9e:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eca3:	83 c4 2c             	add    esp,0x2c
c001eca6:	89 e8                	mov    eax,ebp
c001eca8:	5b                   	pop    ebx
c001eca9:	5e                   	pop    esi
c001ecaa:	5f                   	pop    edi
c001ecab:	5d                   	pop    ebp
c001ecac:	c3                   	ret    

c001ecad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ecad:	57                   	push   edi
c001ecae:	56                   	push   esi
c001ecaf:	53                   	push   ebx
c001ecb0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecbc:	83 e8 06             	sub    eax,0x6
c001ecbf:	0f b7 c0             	movzx  eax,ax
c001ecc2:	50                   	push   eax
c001ecc3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ecc8:	50                   	push   eax
c001ecc9:	e8 4e fd ff ff       	call   c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>
c001ecce:	5a                   	pop    edx
c001eccf:	5e                   	pop    esi
c001ecd0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ecd3:	8d 56 fa             	lea    edx,[esi-0x6]
c001ecd6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ecdc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ecdf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ece2:	83 c2 02             	add    edx,0x2
c001ece5:	66 89 10             	mov    WORD PTR [eax],dx
c001ece8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001eceb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ecef:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ecf2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ecf6:	89 d6                	mov    esi,edx
c001ecf8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ecfe:	66 81 e6 ff fd       	and    si,0xfdff
c001ed03:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed07:	74 07                	je     c001ed10 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed09:	89 d6                	mov    esi,edx
c001ed0b:	66 81 ce 00 02       	or     si,0x200
c001ed10:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed19:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed1d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed25:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed28:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed30:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed33:	5b                   	pop    ebx
c001ed34:	5e                   	pop    esi
c001ed35:	5f                   	pop    edi
c001ed36:	c3                   	ret    

c001ed37 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed37:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed3c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed41:	c1 e0 04             	shl    eax,0x4
c001ed44:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed47:	c3                   	ret    

c001ed48 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed48:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed4d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed52:	c1 e0 04             	shl    eax,0x4
c001ed55:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed59:	c3                   	ret    

c001ed5a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed64:	c1 e0 04             	shl    eax,0x4
c001ed67:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed6a:	c3                   	ret    

c001ed6b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed6b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed70:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed75:	c1 e0 04             	shl    eax,0x4
c001ed78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed7c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed7f:	c3                   	ret    

c001ed80 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed80:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed85:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed8a:	c1 e0 04             	shl    eax,0x4
c001ed8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed91:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed95:	c3                   	ret    

c001ed96 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed96:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed9b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda0:	c1 e0 04             	shl    eax,0x4
c001eda3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eda7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001edaa:	c3                   	ret    

c001edab <Vm::faultHandler(regs*)>:
c001edab:	55                   	push   ebp
c001edac:	57                   	push   edi
c001edad:	56                   	push   esi
c001edae:	53                   	push   ebx
c001edaf:	83 ec 1c             	sub    esp,0x1c
c001edb2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edb6:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001edb9:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001edbc:	0f b7 c1             	movzx  eax,cx
c001edbf:	50                   	push   eax
c001edc0:	0f b7 c3             	movzx  eax,bx
c001edc3:	c1 e3 04             	shl    ebx,0x4
c001edc6:	50                   	push   eax
c001edc7:	e8 50 fc ff ff       	call   c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>
c001edcc:	5a                   	pop    edx
c001edcd:	89 c5                	mov    ebp,eax
c001edcf:	5e                   	pop    esi
c001edd0:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001edd4:	50                   	push   eax
c001edd5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001edd9:	50                   	push   eax
c001edda:	e8 3d fc ff ff       	call   c001ea1c <Vm::realToLinear(unsigned short, unsigned short)>
c001eddf:	01 cb                	add    ebx,ecx
c001ede1:	89 c6                	mov    esi,eax
c001ede3:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ede7:	50                   	push   eax
c001ede8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edec:	50                   	push   eax
c001eded:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001edf1:	50                   	push   eax
c001edf2:	55                   	push   ebp
c001edf3:	53                   	push   ebx
c001edf4:	b3 06                	mov    bl,0x6
c001edf6:	68 c5 c5 02 c0       	push   0xc002c5c5
c001edfb:	e8 d4 40 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001ee00:	83 c4 20             	add    esp,0x20
c001ee03:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee08:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee0d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee11:	3c 9d                	cmp    al,0x9d
c001ee13:	0f 84 d7 02 00 00    	je     c001f0f0 <Vm::faultHandler(regs*)+0x345>
c001ee19:	0f 87 a3 00 00 00    	ja     c001eec2 <Vm::faultHandler(regs*)+0x117>
c001ee1f:	3c 66                	cmp    al,0x66
c001ee21:	0f 84 15 02 00 00    	je     c001f03c <Vm::faultHandler(regs*)+0x291>
c001ee27:	77 5f                	ja     c001ee88 <Vm::faultHandler(regs*)+0xdd>
c001ee29:	3c 36                	cmp    al,0x36
c001ee2b:	0f 84 f1 01 00 00    	je     c001f022 <Vm::faultHandler(regs*)+0x277>
c001ee31:	77 28                	ja     c001ee5b <Vm::faultHandler(regs*)+0xb0>
c001ee33:	3c 26                	cmp    al,0x26
c001ee35:	0f 84 99 01 00 00    	je     c001efd4 <Vm::faultHandler(regs*)+0x229>
c001ee3b:	3c 2e                	cmp    al,0x2e
c001ee3d:	0f 85 3b 07 00 00    	jne    c001f57e <Vm::faultHandler(regs*)+0x7d3>
c001ee43:	83 ec 0c             	sub    esp,0xc
c001ee46:	31 db                	xor    ebx,ebx
c001ee48:	68 da c5 02 c0       	push   0xc002c5da
c001ee4d:	e8 82 40 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001ee52:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee55:	83 c4 10             	add    esp,0x10
c001ee58:	45                   	inc    ebp
c001ee59:	eb b2                	jmp    c001ee0d <Vm::faultHandler(regs*)+0x62>
c001ee5b:	3c 64                	cmp    al,0x64
c001ee5d:	0f 84 8b 01 00 00    	je     c001efee <Vm::faultHandler(regs*)+0x243>
c001ee63:	0f 87 9f 01 00 00    	ja     c001f008 <Vm::faultHandler(regs*)+0x25d>
c001ee69:	3c 3e                	cmp    al,0x3e
c001ee6b:	0f 85 0d 07 00 00    	jne    c001f57e <Vm::faultHandler(regs*)+0x7d3>
c001ee71:	83 ec 0c             	sub    esp,0xc
c001ee74:	b3 01                	mov    bl,0x1
c001ee76:	68 de c5 02 c0       	push   0xc002c5de
c001ee7b:	e8 54 40 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001ee80:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee83:	83 c4 10             	add    esp,0x10
c001ee86:	eb d0                	jmp    c001ee58 <Vm::faultHandler(regs*)+0xad>
c001ee88:	3c 6d                	cmp    al,0x6d
c001ee8a:	0f 84 af 03 00 00    	je     c001f23f <Vm::faultHandler(regs*)+0x494>
c001ee90:	77 15                	ja     c001eea7 <Vm::faultHandler(regs*)+0xfc>
c001ee92:	3c 67                	cmp    al,0x67
c001ee94:	0f 84 bf 01 00 00    	je     c001f059 <Vm::faultHandler(regs*)+0x2ae>
c001ee9a:	3c 6c                	cmp    al,0x6c
c001ee9c:	0f 84 3f 03 00 00    	je     c001f1e1 <Vm::faultHandler(regs*)+0x436>
c001eea2:	e9 d7 06 00 00       	jmp    c001f57e <Vm::faultHandler(regs*)+0x7d3>
c001eea7:	3c 6f                	cmp    al,0x6f
c001eea9:	0f 84 a4 04 00 00    	je     c001f353 <Vm::faultHandler(regs*)+0x5a8>
c001eeaf:	0f 82 11 04 00 00    	jb     c001f2c6 <Vm::faultHandler(regs*)+0x51b>
c001eeb5:	3c 9c                	cmp    al,0x9c
c001eeb7:	0f 84 ba 01 00 00    	je     c001f077 <Vm::faultHandler(regs*)+0x2cc>
c001eebd:	e9 bc 06 00 00       	jmp    c001f57e <Vm::faultHandler(regs*)+0x7d3>
c001eec2:	3c ec                	cmp    al,0xec
c001eec4:	0f 84 24 06 00 00    	je     c001f4ee <Vm::faultHandler(regs*)+0x743>
c001eeca:	0f 87 93 00 00 00    	ja     c001ef63 <Vm::faultHandler(regs*)+0x1b8>
c001eed0:	3c e4                	cmp    al,0xe4
c001eed2:	0f 84 5c 05 00 00    	je     c001f434 <Vm::faultHandler(regs*)+0x689>
c001eed8:	77 6a                	ja     c001ef44 <Vm::faultHandler(regs*)+0x199>
c001eeda:	3c cd                	cmp    al,0xcd
c001eedc:	0f 84 7e 02 00 00    	je     c001f160 <Vm::faultHandler(regs*)+0x3b5>
c001eee2:	3c cf                	cmp    al,0xcf
c001eee4:	0f 85 94 06 00 00    	jne    c001f57e <Vm::faultHandler(regs*)+0x7d3>
c001eeea:	83 ec 0c             	sub    esp,0xc
c001eeed:	68 22 c6 02 c0       	push   0xc002c622
c001eef2:	e8 dd 3f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001eef7:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eefa:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eefd:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef01:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef04:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef08:	0d 00 02 02 00       	or     eax,0x20200
c001ef0d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef10:	56                   	push   esi
c001ef11:	53                   	push   ebx
c001ef12:	52                   	push   edx
c001ef13:	68 28 c6 02 c0       	push   0xc002c628
c001ef18:	e8 b7 3f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001ef1d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef21:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef27:	66 c1 e8 09          	shr    ax,0x9
c001ef2b:	83 e0 01             	and    eax,0x1
c001ef2e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef31:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef34:	83 c0 06             	add    eax,0x6
c001ef37:	25 ff ff 00 00       	and    eax,0xffff
c001ef3c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef3f:	e9 95 02 00 00       	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x42e>
c001ef44:	3c e6                	cmp    al,0xe6
c001ef46:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef4a:	0f 84 4e 05 00 00    	je     c001f49e <Vm::faultHandler(regs*)+0x6f3>
c001ef50:	0f 82 0a 05 00 00    	jb     c001f460 <Vm::faultHandler(regs*)+0x6b5>
c001ef56:	3c e7                	cmp    al,0xe7
c001ef58:	0f 84 69 05 00 00    	je     c001f4c7 <Vm::faultHandler(regs*)+0x71c>
c001ef5e:	e9 1b 06 00 00       	jmp    c001f57e <Vm::faultHandler(regs*)+0x7d3>
c001ef63:	3c ef                	cmp    al,0xef
c001ef65:	0f 84 e6 05 00 00    	je     c001f551 <Vm::faultHandler(regs*)+0x7a6>
c001ef6b:	77 37                	ja     c001efa4 <Vm::faultHandler(regs*)+0x1f9>
c001ef6d:	3c ed                	cmp    al,0xed
c001ef6f:	0f 84 a3 05 00 00    	je     c001f518 <Vm::faultHandler(regs*)+0x76d>
c001ef75:	3c ee                	cmp    al,0xee
c001ef77:	0f 85 01 06 00 00    	jne    c001f57e <Vm::faultHandler(regs*)+0x7d3>
c001ef7d:	52                   	push   edx
c001ef7e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef81:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef84:	68 c3 c6 02 c0       	push   0xc002c6c3
c001ef89:	e8 46 3f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001ef8e:	59                   	pop    ecx
c001ef8f:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef93:	5b                   	pop    ebx
c001ef94:	50                   	push   eax
c001ef95:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef99:	50                   	push   eax
c001ef9a:	e8 2a fa ff ff       	call   c001e9c9 <Vm::outbv(unsigned short, unsigned char)>
c001ef9f:	e9 a5 05 00 00       	jmp    c001f549 <Vm::faultHandler(regs*)+0x79e>
c001efa4:	3c fa                	cmp    al,0xfa
c001efa6:	0f 84 f7 01 00 00    	je     c001f1a3 <Vm::faultHandler(regs*)+0x3f8>
c001efac:	3c fb                	cmp    al,0xfb
c001efae:	0f 84 0a 02 00 00    	je     c001f1be <Vm::faultHandler(regs*)+0x413>
c001efb4:	3c f3                	cmp    al,0xf3
c001efb6:	0f 85 c2 05 00 00    	jne    c001f57e <Vm::faultHandler(regs*)+0x7d3>
c001efbc:	83 ec 0c             	sub    esp,0xc
c001efbf:	68 fb c5 02 c0       	push   0xc002c5fb
c001efc4:	e8 0b 3f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001efc9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efcc:	83 c4 10             	add    esp,0x10
c001efcf:	e9 84 fe ff ff       	jmp    c001ee58 <Vm::faultHandler(regs*)+0xad>
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	b3 02                	mov    bl,0x2
c001efd9:	68 d6 c5 02 c0       	push   0xc002c5d6
c001efde:	e8 f1 3e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001efe3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efe6:	83 c4 10             	add    esp,0x10
c001efe9:	e9 6a fe ff ff       	jmp    c001ee58 <Vm::faultHandler(regs*)+0xad>
c001efee:	83 ec 0c             	sub    esp,0xc
c001eff1:	b3 03                	mov    bl,0x3
c001eff3:	68 e2 c5 02 c0       	push   0xc002c5e2
c001eff8:	e8 d7 3e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001effd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	e9 50 fe ff ff       	jmp    c001ee58 <Vm::faultHandler(regs*)+0xad>
c001f008:	83 ec 0c             	sub    esp,0xc
c001f00b:	b3 04                	mov    bl,0x4
c001f00d:	68 e6 c5 02 c0       	push   0xc002c5e6
c001f012:	e8 bd 3e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f017:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f01a:	83 c4 10             	add    esp,0x10
c001f01d:	e9 36 fe ff ff       	jmp    c001ee58 <Vm::faultHandler(regs*)+0xad>
c001f022:	83 ec 0c             	sub    esp,0xc
c001f025:	b3 05                	mov    bl,0x5
c001f027:	68 ea c5 02 c0       	push   0xc002c5ea
c001f02c:	e8 a3 3e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f031:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f034:	83 c4 10             	add    esp,0x10
c001f037:	e9 1c fe ff ff       	jmp    c001ee58 <Vm::faultHandler(regs*)+0xad>
c001f03c:	83 ec 0c             	sub    esp,0xc
c001f03f:	68 ee c5 02 c0       	push   0xc002c5ee
c001f044:	e8 8b 3e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f049:	83 c4 10             	add    esp,0x10
c001f04c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f04f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f054:	e9 ff fd ff ff       	jmp    c001ee58 <Vm::faultHandler(regs*)+0xad>
c001f059:	50                   	push   eax
c001f05a:	50                   	push   eax
c001f05b:	6a 01                	push   0x1
c001f05d:	68 f3 c5 02 c0       	push   0xc002c5f3
c001f062:	e8 6d 3e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f06d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f072:	e9 e1 fd ff ff       	jmp    c001ee58 <Vm::faultHandler(regs*)+0xad>
c001f077:	83 ec 0c             	sub    esp,0xc
c001f07a:	68 01 c6 02 c0       	push   0xc002c601
c001f07f:	e8 50 3e ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f084:	83 c4 10             	add    esp,0x10
c001f087:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f08a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f08f:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f092:	74 2f                	je     c001f0c3 <Vm::faultHandler(regs*)+0x318>
c001f094:	83 ea 04             	sub    edx,0x4
c001f097:	25 ff 0d 00 00       	and    eax,0xdff
c001f09c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0a2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0a5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0ae:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0b2:	0f 84 bf 04 00 00    	je     c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f0b8:	80 cc 02             	or     ah,0x2
c001f0bb:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0be:	e9 b4 04 00 00       	jmp    c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f0c3:	83 ea 02             	sub    edx,0x2
c001f0c6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0cc:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0cf:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0d9:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0dd:	74 05                	je     c001f0e4 <Vm::faultHandler(regs*)+0x339>
c001f0df:	80 cc 02             	or     ah,0x2
c001f0e2:	eb 03                	jmp    c001f0e7 <Vm::faultHandler(regs*)+0x33c>
c001f0e4:	80 e4 fd             	and    ah,0xfd
c001f0e7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0eb:	e9 87 04 00 00       	jmp    c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f0f0:	83 ec 0c             	sub    esp,0xc
c001f0f3:	68 08 c6 02 c0       	push   0xc002c608
c001f0f8:	e8 d7 3d ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f0fd:	83 c4 10             	add    esp,0x10
c001f100:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f105:	74 28                	je     c001f12f <Vm::faultHandler(regs*)+0x384>
c001f107:	8b 06                	mov    eax,DWORD PTR [esi]
c001f109:	25 ff 0d 00 00       	and    eax,0xdff
c001f10e:	0d 00 02 02 00       	or     eax,0x20200
c001f113:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f116:	8b 06                	mov    eax,DWORD PTR [esi]
c001f118:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f11e:	c1 e8 09             	shr    eax,0x9
c001f121:	83 e0 01             	and    eax,0x1
c001f124:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f127:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f12a:	83 c0 04             	add    eax,0x4
c001f12d:	eb 24                	jmp    c001f153 <Vm::faultHandler(regs*)+0x3a8>
c001f12f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f132:	0d 00 02 02 00       	or     eax,0x20200
c001f137:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f13a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f13d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f143:	66 c1 e8 09          	shr    ax,0x9
c001f147:	83 e0 01             	and    eax,0x1
c001f14a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f14d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f150:	83 c0 02             	add    eax,0x2
c001f153:	25 ff ff 00 00       	and    eax,0xffff
c001f158:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f15b:	e9 17 04 00 00       	jmp    c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f160:	53                   	push   ebx
c001f161:	53                   	push   ebx
c001f162:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f166:	50                   	push   eax
c001f167:	68 0e c6 02 c0       	push   0xc002c60e
c001f16c:	e8 63 3d ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f171:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f175:	83 c4 10             	add    esp,0x10
c001f178:	3c ee                	cmp    al,0xee
c001f17a:	75 10                	jne    c001f18c <Vm::faultHandler(regs*)+0x3e1>
c001f17c:	83 ec 0c             	sub    esp,0xc
c001f17f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f182:	e8 fa f8 ff ff       	call   c001ea81 <Vm::mainloop3(unsigned long)>
c001f187:	e9 c0 03 00 00       	jmp    c001f54c <Vm::faultHandler(regs*)+0x7a1>
c001f18c:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f190:	83 ec 0c             	sub    esp,0xc
c001f193:	53                   	push   ebx
c001f194:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f198:	53                   	push   ebx
c001f199:	55                   	push   ebp
c001f19a:	50                   	push   eax
c001f19b:	57                   	push   edi
c001f19c:	e8 0c fb ff ff       	call   c001ecad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f1a1:	eb 36                	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x42e>
c001f1a3:	83 ec 0c             	sub    esp,0xc
c001f1a6:	68 18 c6 02 c0       	push   0xc002c618
c001f1ab:	e8 24 3d ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f1b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1b5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f1b9:	e9 8b 03 00 00       	jmp    c001f549 <Vm::faultHandler(regs*)+0x79e>
c001f1be:	83 ec 0c             	sub    esp,0xc
c001f1c1:	68 1d c6 02 c0       	push   0xc002c61d
c001f1c6:	e8 09 3d ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f1cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1d0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f1d4:	e9 70 03 00 00       	jmp    c001f549 <Vm::faultHandler(regs*)+0x79e>
c001f1d9:	83 c4 20             	add    esp,0x20
c001f1dc:	e9 99 03 00 00       	jmp    c001f57a <Vm::faultHandler(regs*)+0x7cf>
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	68 5b c6 02 c0       	push   0xc002c65b
c001f1e9:	e8 e6 3c ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f1ee:	83 c4 10             	add    esp,0x10
c001f1f1:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1f4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1f9:	74 0d                	je     c001f208 <Vm::faultHandler(regs*)+0x45d>
c001f1fb:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f202:	0f 87 9e 01 00 00    	ja     c001f3a6 <Vm::faultHandler(regs*)+0x5fb>
c001f208:	83 ec 0c             	sub    esp,0xc
c001f20b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f20f:	0f b7 db             	movzx  ebx,bx
c001f212:	50                   	push   eax
c001f213:	e8 9e f7 ff ff       	call   c001e9b6 <Vm::inbv(unsigned short)>
c001f218:	83 c4 0c             	add    esp,0xc
c001f21b:	0f b6 c0             	movzx  eax,al
c001f21e:	50                   	push   eax
c001f21f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f223:	50                   	push   eax
c001f224:	53                   	push   ebx
c001f225:	e8 41 fb ff ff       	call   c001ed6b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f22a:	83 c4 10             	add    esp,0x10
c001f22d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f230:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f234:	74 03                	je     c001f239 <Vm::faultHandler(regs*)+0x48e>
c001f236:	48                   	dec    eax
c001f237:	eb 01                	jmp    c001f23a <Vm::faultHandler(regs*)+0x48f>
c001f239:	40                   	inc    eax
c001f23a:	0f b7 c0             	movzx  eax,ax
c001f23d:	eb 7f                	jmp    c001f2be <Vm::faultHandler(regs*)+0x513>
c001f23f:	83 ec 0c             	sub    esp,0xc
c001f242:	68 8d c6 02 c0       	push   0xc002c68d
c001f247:	e8 88 3c ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f24c:	83 c4 10             	add    esp,0x10
c001f24f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f252:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f257:	74 0d                	je     c001f266 <Vm::faultHandler(regs*)+0x4bb>
c001f259:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f260:	0f 87 40 01 00 00    	ja     c001f3a6 <Vm::faultHandler(regs*)+0x5fb>
c001f266:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f269:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f26d:	0f b7 db             	movzx  ebx,bx
c001f270:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f275:	74 20                	je     c001f297 <Vm::faultHandler(regs*)+0x4ec>
c001f277:	ed                   	in     eax,dx
c001f278:	51                   	push   ecx
c001f279:	50                   	push   eax
c001f27a:	56                   	push   esi
c001f27b:	53                   	push   ebx
c001f27c:	e8 15 fb ff ff       	call   c001ed96 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f281:	83 c4 10             	add    esp,0x10
c001f284:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f287:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f28b:	74 05                	je     c001f292 <Vm::faultHandler(regs*)+0x4e7>
c001f28d:	83 e8 04             	sub    eax,0x4
c001f290:	eb 27                	jmp    c001f2b9 <Vm::faultHandler(regs*)+0x50e>
c001f292:	83 c0 04             	add    eax,0x4
c001f295:	eb 22                	jmp    c001f2b9 <Vm::faultHandler(regs*)+0x50e>
c001f297:	66 ed                	in     ax,dx
c001f299:	0f b7 c0             	movzx  eax,ax
c001f29c:	52                   	push   edx
c001f29d:	50                   	push   eax
c001f29e:	56                   	push   esi
c001f29f:	53                   	push   ebx
c001f2a0:	e8 db fa ff ff       	call   c001ed80 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f2a5:	83 c4 10             	add    esp,0x10
c001f2a8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2ab:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2af:	74 05                	je     c001f2b6 <Vm::faultHandler(regs*)+0x50b>
c001f2b1:	83 e8 02             	sub    eax,0x2
c001f2b4:	eb 03                	jmp    c001f2b9 <Vm::faultHandler(regs*)+0x50e>
c001f2b6:	83 c0 02             	add    eax,0x2
c001f2b9:	25 ff ff 00 00       	and    eax,0xffff
c001f2be:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f2c1:	e9 b1 02 00 00       	jmp    c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f2c6:	83 ec 0c             	sub    esp,0xc
c001f2c9:	4b                   	dec    ebx
c001f2ca:	68 93 c6 02 c0       	push   0xc002c693
c001f2cf:	e8 00 3c ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f2d4:	83 c4 10             	add    esp,0x10
c001f2d7:	80 fb 05             	cmp    bl,0x5
c001f2da:	77 0a                	ja     c001f2e6 <Vm::faultHandler(regs*)+0x53b>
c001f2dc:	0f b6 db             	movzx  ebx,bl
c001f2df:	ff 24 9d 04 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd38fc]
c001f2e6:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2ea:	eb 1b                	jmp    c001f307 <Vm::faultHandler(regs*)+0x55c>
c001f2ec:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f2f0:	eb 15                	jmp    c001f307 <Vm::faultHandler(regs*)+0x55c>
c001f2f2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2f6:	eb 0f                	jmp    c001f307 <Vm::faultHandler(regs*)+0x55c>
c001f2f8:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f2fc:	eb 09                	jmp    c001f307 <Vm::faultHandler(regs*)+0x55c>
c001f2fe:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f301:	eb 04                	jmp    c001f307 <Vm::faultHandler(regs*)+0x55c>
c001f303:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f307:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f30c:	74 0d                	je     c001f31b <Vm::faultHandler(regs*)+0x570>
c001f30e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f315:	0f 87 8b 00 00 00    	ja     c001f3a6 <Vm::faultHandler(regs*)+0x5fb>
c001f31b:	53                   	push   ebx
c001f31c:	53                   	push   ebx
c001f31d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f321:	52                   	push   edx
c001f322:	50                   	push   eax
c001f323:	e8 0f fa ff ff       	call   c001ed37 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f328:	5e                   	pop    esi
c001f329:	0f b6 c0             	movzx  eax,al
c001f32c:	5d                   	pop    ebp
c001f32d:	50                   	push   eax
c001f32e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f332:	50                   	push   eax
c001f333:	e8 91 f6 ff ff       	call   c001e9c9 <Vm::outbv(unsigned short, unsigned char)>
c001f338:	83 c4 10             	add    esp,0x10
c001f33b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f33e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f342:	74 03                	je     c001f347 <Vm::faultHandler(regs*)+0x59c>
c001f344:	48                   	dec    eax
c001f345:	eb 01                	jmp    c001f348 <Vm::faultHandler(regs*)+0x59d>
c001f347:	40                   	inc    eax
c001f348:	0f b7 c0             	movzx  eax,ax
c001f34b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f34e:	e9 24 02 00 00       	jmp    c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f353:	83 ec 0c             	sub    esp,0xc
c001f356:	4b                   	dec    ebx
c001f357:	68 93 c6 02 c0       	push   0xc002c693
c001f35c:	e8 73 3b ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f361:	83 c4 10             	add    esp,0x10
c001f364:	80 fb 05             	cmp    bl,0x5
c001f367:	77 0a                	ja     c001f373 <Vm::faultHandler(regs*)+0x5c8>
c001f369:	0f b6 db             	movzx  ebx,bl
c001f36c:	ff 24 9d 1c c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd38e4]
c001f373:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f377:	eb 1b                	jmp    c001f394 <Vm::faultHandler(regs*)+0x5e9>
c001f379:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f37d:	eb 15                	jmp    c001f394 <Vm::faultHandler(regs*)+0x5e9>
c001f37f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f383:	eb 0f                	jmp    c001f394 <Vm::faultHandler(regs*)+0x5e9>
c001f385:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f389:	eb 09                	jmp    c001f394 <Vm::faultHandler(regs*)+0x5e9>
c001f38b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f38e:	eb 04                	jmp    c001f394 <Vm::faultHandler(regs*)+0x5e9>
c001f390:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f394:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f397:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f39c:	74 39                	je     c001f3d7 <Vm::faultHandler(regs*)+0x62c>
c001f39e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f3a4:	76 31                	jbe    c001f3d7 <Vm::faultHandler(regs*)+0x62c>
c001f3a6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f3aa:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f3ae:	51                   	push   ecx
c001f3af:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f3b3:	51                   	push   ecx
c001f3b4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f3b8:	51                   	push   ecx
c001f3b9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f3bd:	51                   	push   ecx
c001f3be:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3c2:	52                   	push   edx
c001f3c3:	50                   	push   eax
c001f3c4:	50                   	push   eax
c001f3c5:	68 60 c6 02 c0       	push   0xc002c660
c001f3ca:	e8 05 3b ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f3cf:	83 c4 20             	add    esp,0x20
c001f3d2:	e9 fb 01 00 00       	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x827>
c001f3d7:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f3da:	0f b7 d3             	movzx  edx,bx
c001f3dd:	81 e6 00 04 00 00    	and    esi,0x400
c001f3e3:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f3e6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3eb:	74 1d                	je     c001f40a <Vm::faultHandler(regs*)+0x65f>
c001f3ed:	51                   	push   ecx
c001f3ee:	51                   	push   ecx
c001f3ef:	52                   	push   edx
c001f3f0:	50                   	push   eax
c001f3f1:	e8 64 f9 ff ff       	call   c001ed5a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f3f6:	83 c4 10             	add    esp,0x10
c001f3f9:	89 ea                	mov    edx,ebp
c001f3fb:	ef                   	out    dx,eax
c001f3fc:	85 f6                	test   esi,esi
c001f3fe:	74 05                	je     c001f405 <Vm::faultHandler(regs*)+0x65a>
c001f400:	83 eb 04             	sub    ebx,0x4
c001f403:	eb 21                	jmp    c001f426 <Vm::faultHandler(regs*)+0x67b>
c001f405:	83 c3 04             	add    ebx,0x4
c001f408:	eb 1c                	jmp    c001f426 <Vm::faultHandler(regs*)+0x67b>
c001f40a:	51                   	push   ecx
c001f40b:	51                   	push   ecx
c001f40c:	52                   	push   edx
c001f40d:	50                   	push   eax
c001f40e:	e8 35 f9 ff ff       	call   c001ed48 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f413:	83 c4 10             	add    esp,0x10
c001f416:	89 ea                	mov    edx,ebp
c001f418:	66 ef                	out    dx,ax
c001f41a:	85 f6                	test   esi,esi
c001f41c:	74 05                	je     c001f423 <Vm::faultHandler(regs*)+0x678>
c001f41e:	83 eb 02             	sub    ebx,0x2
c001f421:	eb 03                	jmp    c001f426 <Vm::faultHandler(regs*)+0x67b>
c001f423:	83 c3 02             	add    ebx,0x2
c001f426:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f42c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f42f:	e9 43 01 00 00       	jmp    c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f434:	53                   	push   ebx
c001f435:	53                   	push   ebx
c001f436:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f43a:	50                   	push   eax
c001f43b:	68 99 c6 02 c0       	push   0xc002c699
c001f440:	e8 8f 3a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f445:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f44c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f450:	89 04 24             	mov    DWORD PTR [esp],eax
c001f453:	e8 5e f5 ff ff       	call   c001e9b6 <Vm::inbv(unsigned short)>
c001f458:	0f b6 c0             	movzx  eax,al
c001f45b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f45e:	eb 5e                	jmp    c001f4be <Vm::faultHandler(regs*)+0x713>
c001f460:	51                   	push   ecx
c001f461:	51                   	push   ecx
c001f462:	53                   	push   ebx
c001f463:	68 9f c6 02 c0       	push   0xc002c69f
c001f468:	e8 67 3a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f46d:	83 c4 10             	add    esp,0x10
c001f470:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f475:	74 07                	je     c001f47e <Vm::faultHandler(regs*)+0x6d3>
c001f477:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f47b:	ed                   	in     eax,dx
c001f47c:	eb 14                	jmp    c001f492 <Vm::faultHandler(regs*)+0x6e7>
c001f47e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f481:	66 31 db             	xor    bx,bx
c001f484:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f487:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f48b:	66 ed                	in     ax,dx
c001f48d:	0f b7 c0             	movzx  eax,ax
c001f490:	09 d8                	or     eax,ebx
c001f492:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f495:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f499:	e9 dc 00 00 00       	jmp    c001f57a <Vm::faultHandler(regs*)+0x7cf>
c001f49e:	50                   	push   eax
c001f49f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4a2:	53                   	push   ebx
c001f4a3:	68 a5 c6 02 c0       	push   0xc002c6a5
c001f4a8:	e8 27 3a ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f4ad:	58                   	pop    eax
c001f4ae:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f4b2:	5a                   	pop    edx
c001f4b3:	50                   	push   eax
c001f4b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4b8:	50                   	push   eax
c001f4b9:	e8 0b f5 ff ff       	call   c001e9c9 <Vm::outbv(unsigned short, unsigned char)>
c001f4be:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4c2:	e9 85 00 00 00       	jmp    c001f54c <Vm::faultHandler(regs*)+0x7a1>
c001f4c7:	50                   	push   eax
c001f4c8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4cb:	53                   	push   ebx
c001f4cc:	68 ae c6 02 c0       	push   0xc002c6ae
c001f4d1:	e8 fe 39 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f4d6:	83 c4 10             	add    esp,0x10
c001f4d9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4dd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4e2:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4e5:	74 03                	je     c001f4ea <Vm::faultHandler(regs*)+0x73f>
c001f4e7:	ef                   	out    dx,eax
c001f4e8:	eb ab                	jmp    c001f495 <Vm::faultHandler(regs*)+0x6ea>
c001f4ea:	66 ef                	out    dx,ax
c001f4ec:	eb a7                	jmp    c001f495 <Vm::faultHandler(regs*)+0x6ea>
c001f4ee:	55                   	push   ebp
c001f4ef:	55                   	push   ebp
c001f4f0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4f3:	68 b7 c6 02 c0       	push   0xc002c6b7
c001f4f8:	e8 d7 39 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f4fd:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f504:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f508:	89 04 24             	mov    DWORD PTR [esp],eax
c001f50b:	e8 a6 f4 ff ff       	call   c001e9b6 <Vm::inbv(unsigned short)>
c001f510:	0f b6 c0             	movzx  eax,al
c001f513:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f516:	eb 31                	jmp    c001f549 <Vm::faultHandler(regs*)+0x79e>
c001f518:	56                   	push   esi
c001f519:	56                   	push   esi
c001f51a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f51d:	68 bd c6 02 c0       	push   0xc002c6bd
c001f522:	e8 ad 39 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f527:	83 c4 10             	add    esp,0x10
c001f52a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f52d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f532:	74 03                	je     c001f537 <Vm::faultHandler(regs*)+0x78c>
c001f534:	ed                   	in     eax,dx
c001f535:	eb 0d                	jmp    c001f544 <Vm::faultHandler(regs*)+0x799>
c001f537:	66 ed                	in     ax,dx
c001f539:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f53c:	0f b7 c0             	movzx  eax,ax
c001f53f:	66 31 d2             	xor    dx,dx
c001f542:	09 d0                	or     eax,edx
c001f544:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f547:	eb 2e                	jmp    c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f549:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f54c:	83 c4 10             	add    esp,0x10
c001f54f:	eb 29                	jmp    c001f57a <Vm::faultHandler(regs*)+0x7cf>
c001f551:	50                   	push   eax
c001f552:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f555:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f558:	68 cc c6 02 c0       	push   0xc002c6cc
c001f55d:	e8 72 39 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f562:	83 c4 10             	add    esp,0x10
c001f565:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f568:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f56d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f570:	74 03                	je     c001f575 <Vm::faultHandler(regs*)+0x7ca>
c001f572:	ef                   	out    dx,eax
c001f573:	eb 02                	jmp    c001f577 <Vm::faultHandler(regs*)+0x7cc>
c001f575:	66 ef                	out    dx,ax
c001f577:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f57a:	b0 01                	mov    al,0x1
c001f57c:	eb 56                	jmp    c001f5d4 <Vm::faultHandler(regs*)+0x829>
c001f57e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f582:	51                   	push   ecx
c001f583:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f587:	51                   	push   ecx
c001f588:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f58c:	51                   	push   ecx
c001f58d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f591:	51                   	push   ecx
c001f592:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f596:	52                   	push   edx
c001f597:	50                   	push   eax
c001f598:	50                   	push   eax
c001f599:	68 d5 c6 02 c0       	push   0xc002c6d5
c001f59e:	e8 31 39 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c001f5a3:	83 c4 20             	add    esp,0x20
c001f5a6:	83 ec 0c             	sub    esp,0xc
c001f5a9:	6a 60                	push   0x60
c001f5ab:	e8 06 f4 ff ff       	call   c001e9b6 <Vm::inbv(unsigned short)>
c001f5b0:	83 c4 10             	add    esp,0x10
c001f5b3:	3c 1c                	cmp    al,0x1c
c001f5b5:	74 04                	je     c001f5bb <Vm::faultHandler(regs*)+0x810>
c001f5b7:	3c 5a                	cmp    al,0x5a
c001f5b9:	75 eb                	jne    c001f5a6 <Vm::faultHandler(regs*)+0x7fb>
c001f5bb:	3c 1c                	cmp    al,0x1c
c001f5bd:	74 04                	je     c001f5c3 <Vm::faultHandler(regs*)+0x818>
c001f5bf:	3c 5a                	cmp    al,0x5a
c001f5c1:	75 0f                	jne    c001f5d2 <Vm::faultHandler(regs*)+0x827>
c001f5c3:	83 ec 0c             	sub    esp,0xc
c001f5c6:	6a 60                	push   0x60
c001f5c8:	e8 e9 f3 ff ff       	call   c001e9b6 <Vm::inbv(unsigned short)>
c001f5cd:	83 c4 10             	add    esp,0x10
c001f5d0:	eb e9                	jmp    c001f5bb <Vm::faultHandler(regs*)+0x810>
c001f5d2:	31 c0                	xor    eax,eax
c001f5d4:	83 c4 1c             	add    esp,0x1c
c001f5d7:	5b                   	pop    ebx
c001f5d8:	5e                   	pop    esi
c001f5d9:	5f                   	pop    edi
c001f5da:	5d                   	pop    ebp
c001f5db:	c3                   	ret    

c001f5dc <Vm::fpuInternalTo32(unsigned long long)>:
c001f5dc:	57                   	push   edi
c001f5dd:	56                   	push   esi
c001f5de:	53                   	push   ebx
c001f5df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e7:	89 d6                	mov    esi,edx
c001f5e9:	89 d7                	mov    edi,edx
c001f5eb:	89 c1                	mov    ecx,eax
c001f5ed:	c1 ef 14             	shr    edi,0x14
c001f5f0:	89 d3                	mov    ebx,edx
c001f5f2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f5f8:	31 d2                	xor    edx,edx
c001f5fa:	89 f8                	mov    eax,edi
c001f5fc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f602:	bf ff 00 00 00       	mov    edi,0xff
c001f607:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f60c:	83 d2 ff             	adc    edx,0xffffffff
c001f60f:	39 c7                	cmp    edi,eax
c001f611:	bf 00 00 00 00       	mov    edi,0x0
c001f616:	19 d7                	sbb    edi,edx
c001f618:	72 15                	jb     c001f62f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f61a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f61e:	c1 e0 17             	shl    eax,0x17
c001f621:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f627:	09 f1                	or     ecx,esi
c001f629:	09 c1                	or     ecx,eax
c001f62b:	89 cf                	mov    edi,ecx
c001f62d:	eb 02                	jmp    c001f631 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f62f:	31 ff                	xor    edi,edi
c001f631:	89 f8                	mov    eax,edi
c001f633:	5b                   	pop    ebx
c001f634:	5e                   	pop    esi
c001f635:	5f                   	pop    edi
c001f636:	c3                   	ret    

c001f637 <Vm::fpuInternalTo64(unsigned long long)>:
c001f637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f63b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f63f:	c3                   	ret    

c001f640 <Vm::fpu32ToInternal(unsigned int)>:
c001f640:	57                   	push   edi
c001f641:	31 ff                	xor    edi,edi
c001f643:	56                   	push   esi
c001f644:	53                   	push   ebx
c001f645:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f649:	89 cb                	mov    ebx,ecx
c001f64b:	89 ce                	mov    esi,ecx
c001f64d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f653:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f659:	c1 e9 17             	shr    ecx,0x17
c001f65c:	89 f0                	mov    eax,esi
c001f65e:	0f b6 d1             	movzx  edx,cl
c001f661:	81 c2 80 03 00 00    	add    edx,0x380
c001f667:	89 d1                	mov    ecx,edx
c001f669:	89 fa                	mov    edx,edi
c001f66b:	c1 e1 14             	shl    ecx,0x14
c001f66e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f672:	c1 e0 1d             	shl    eax,0x1d
c001f675:	89 d7                	mov    edi,edx
c001f677:	89 c6                	mov    esi,eax
c001f679:	89 ca                	mov    edx,ecx
c001f67b:	89 f0                	mov    eax,esi
c001f67d:	09 fa                	or     edx,edi
c001f67f:	09 da                	or     edx,ebx
c001f681:	5b                   	pop    ebx
c001f682:	5e                   	pop    esi
c001f683:	5f                   	pop    edi
c001f684:	c3                   	ret    

c001f685 <Vm::fpu64ToInternal(unsigned long long)>:
c001f685:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f689:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f68d:	c3                   	ret    

c001f68e <Vm::fpuFloatToLong(unsigned long long)>:
c001f68e:	57                   	push   edi
c001f68f:	31 c0                	xor    eax,eax
c001f691:	56                   	push   esi
c001f692:	31 d2                	xor    edx,edx
c001f694:	53                   	push   ebx
c001f695:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f699:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f69d:	89 d9                	mov    ecx,ebx
c001f69f:	c1 e9 14             	shr    ecx,0x14
c001f6a2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6a8:	89 cf                	mov    edi,ecx
c001f6aa:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6b0:	78 33                	js     c001f6e5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6b2:	89 d9                	mov    ecx,ebx
c001f6b4:	89 f0                	mov    eax,esi
c001f6b6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6bc:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f6c2:	89 ca                	mov    edx,ecx
c001f6c4:	b9 34 00 00 00       	mov    ecx,0x34
c001f6c9:	29 f9                	sub    ecx,edi
c001f6cb:	0f ad d0             	shrd   eax,edx,cl
c001f6ce:	d3 fa                	sar    edx,cl
c001f6d0:	f6 c1 20             	test   cl,0x20
c001f6d3:	74 05                	je     c001f6da <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f6d5:	89 d0                	mov    eax,edx
c001f6d7:	c1 fa 1f             	sar    edx,0x1f
c001f6da:	85 db                	test   ebx,ebx
c001f6dc:	79 07                	jns    c001f6e5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6de:	f7 d8                	neg    eax
c001f6e0:	83 d2 00             	adc    edx,0x0
c001f6e3:	f7 da                	neg    edx
c001f6e5:	5b                   	pop    ebx
c001f6e6:	5e                   	pop    esi
c001f6e7:	5f                   	pop    edi
c001f6e8:	c3                   	ret    

c001f6e9 <Vm::fpuULongToFloat(unsigned long long)>:
c001f6e9:	57                   	push   edi
c001f6ea:	31 c9                	xor    ecx,ecx
c001f6ec:	56                   	push   esi
c001f6ed:	53                   	push   ebx
c001f6ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f6f6:	0f ba e7 14          	bt     edi,0x14
c001f6fa:	72 07                	jb     c001f703 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f6fc:	01 f6                	add    esi,esi
c001f6fe:	11 ff                	adc    edi,edi
c001f700:	41                   	inc    ecx
c001f701:	eb f3                	jmp    c001f6f6 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f703:	89 fa                	mov    edx,edi
c001f705:	89 f0                	mov    eax,esi
c001f707:	bb 33 04 00 00       	mov    ebx,0x433
c001f70c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f712:	29 cb                	sub    ebx,ecx
c001f714:	89 d9                	mov    ecx,ebx
c001f716:	5b                   	pop    ebx
c001f717:	c1 e1 14             	shl    ecx,0x14
c001f71a:	5e                   	pop    esi
c001f71b:	09 ca                	or     edx,ecx
c001f71d:	5f                   	pop    edi
c001f71e:	c3                   	ret    

c001f71f <Vm::fpuLongToFloat(long long)>:
c001f71f:	56                   	push   esi
c001f720:	31 c0                	xor    eax,eax
c001f722:	53                   	push   ebx
c001f723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f727:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f72b:	39 c8                	cmp    eax,ecx
c001f72d:	19 d8                	sbb    eax,ebx
c001f72f:	7d 04                	jge    c001f735 <Vm::fpuLongToFloat(long long)+0x16>
c001f731:	31 f6                	xor    esi,esi
c001f733:	eb 0c                	jmp    c001f741 <Vm::fpuLongToFloat(long long)+0x22>
c001f735:	f7 d9                	neg    ecx
c001f737:	be 01 00 00 00       	mov    esi,0x1
c001f73c:	83 d3 00             	adc    ebx,0x0
c001f73f:	f7 db                	neg    ebx
c001f741:	31 c0                	xor    eax,eax
c001f743:	0f ba e3 14          	bt     ebx,0x14
c001f747:	72 07                	jb     c001f750 <Vm::fpuLongToFloat(long long)+0x31>
c001f749:	01 c9                	add    ecx,ecx
c001f74b:	11 db                	adc    ebx,ebx
c001f74d:	40                   	inc    eax
c001f74e:	eb f3                	jmp    c001f743 <Vm::fpuLongToFloat(long long)+0x24>
c001f750:	ba 33 04 00 00       	mov    edx,0x433
c001f755:	29 c2                	sub    edx,eax
c001f757:	89 c8                	mov    eax,ecx
c001f759:	c1 e2 14             	shl    edx,0x14
c001f75c:	89 d9                	mov    ecx,ebx
c001f75e:	89 f3                	mov    ebx,esi
c001f760:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f766:	09 ca                	or     edx,ecx
c001f768:	84 db                	test   bl,bl
c001f76a:	74 06                	je     c001f772 <Vm::fpuLongToFloat(long long)+0x53>
c001f76c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f772:	5b                   	pop    ebx
c001f773:	5e                   	pop    esi
c001f774:	c3                   	ret    

c001f775 <Vm::fpuGet0()>:
c001f775:	31 c0                	xor    eax,eax
c001f777:	31 d2                	xor    edx,edx
c001f779:	c3                   	ret    

c001f77a <Vm::fpuGet1()>:
c001f77a:	b8 01 00 00 00       	mov    eax,0x1
c001f77f:	31 d2                	xor    edx,edx
c001f781:	c3                   	ret    

c001f782 <Vm::fpuGetPi()>:
c001f782:	b8 03 00 00 00       	mov    eax,0x3
c001f787:	31 d2                	xor    edx,edx
c001f789:	c3                   	ret    

c001f78a <Vm::fpuGetLog2E()>:
c001f78a:	83 ec 18             	sub    esp,0x18
c001f78d:	68 34 c7 02 c0       	push   0xc002c734
c001f792:	e8 de ad ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001f797:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f79c:	31 d2                	xor    edx,edx
c001f79e:	83 c4 1c             	add    esp,0x1c
c001f7a1:	c3                   	ret    

c001f7a2 <Vm::fpuGetLogE2()>:
c001f7a2:	83 ec 18             	sub    esp,0x18
c001f7a5:	68 40 c7 02 c0       	push   0xc002c740
c001f7aa:	e8 c6 ad ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001f7af:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7b4:	31 d2                	xor    edx,edx
c001f7b6:	83 c4 1c             	add    esp,0x1c
c001f7b9:	c3                   	ret    

c001f7ba <Vm::fpuGetLog210()>:
c001f7ba:	83 ec 18             	sub    esp,0x18
c001f7bd:	68 4c c7 02 c0       	push   0xc002c74c
c001f7c2:	e8 ae ad ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001f7c7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7cc:	31 d2                	xor    edx,edx
c001f7ce:	83 c4 1c             	add    esp,0x1c
c001f7d1:	c3                   	ret    

c001f7d2 <Vm::fpuGetLog102()>:
c001f7d2:	83 ec 18             	sub    esp,0x18
c001f7d5:	68 59 c7 02 c0       	push   0xc002c759
c001f7da:	e8 96 ad ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001f7df:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7e4:	31 d2                	xor    edx,edx
c001f7e6:	83 c4 1c             	add    esp,0x1c
c001f7e9:	c3                   	ret    

c001f7ea <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f7ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7ee:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f7f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7f6:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f7fa:	0f 92 c0             	setb   al
c001f7fd:	c3                   	ret    

c001f7fe <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f7fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f806:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f80a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f80e:	09 c2                	or     edx,eax
c001f810:	0f 94 c0             	sete   al
c001f813:	c3                   	ret    

c001f814 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f814:	57                   	push   edi
c001f815:	56                   	push   esi
c001f816:	53                   	push   ebx
c001f817:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f81b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f81f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f823:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f827:	57                   	push   edi
c001f828:	56                   	push   esi
c001f829:	53                   	push   ebx
c001f82a:	51                   	push   ecx
c001f82b:	e8 ce ff ff ff       	call   c001f7fe <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f830:	83 c4 10             	add    esp,0x10
c001f833:	88 c2                	mov    dl,al
c001f835:	31 c0                	xor    eax,eax
c001f837:	84 d2                	test   dl,dl
c001f839:	75 0c                	jne    c001f847 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f83b:	57                   	push   edi
c001f83c:	56                   	push   esi
c001f83d:	53                   	push   ebx
c001f83e:	51                   	push   ecx
c001f83f:	e8 a6 ff ff ff       	call   c001f7ea <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f844:	83 c4 10             	add    esp,0x10
c001f847:	83 e0 01             	and    eax,0x1
c001f84a:	5b                   	pop    ebx
c001f84b:	88 c1                	mov    cl,al
c001f84d:	83 e2 01             	and    edx,0x1
c001f850:	a0 c1 19 03 c0       	mov    al,ds:0xc00319c1
c001f855:	c1 e2 06             	shl    edx,0x6
c001f858:	83 e0 ba             	and    eax,0xffffffba
c001f85b:	5e                   	pop    esi
c001f85c:	09 c8                	or     eax,ecx
c001f85e:	5f                   	pop    edi
c001f85f:	09 d0                	or     eax,edx
c001f861:	a2 c1 19 03 c0       	mov    ds:0xc00319c1,al
c001f866:	c3                   	ret    

c001f867 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f86b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f86f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f873:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f877:	c3                   	ret    

c001f878 <Vm::fpuAbs(unsigned long long)>:
c001f878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f87c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f880:	c3                   	ret    

c001f881 <Vm::fpuChs(unsigned long long)>:
c001f881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f885:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f889:	f7 d8                	neg    eax
c001f88b:	83 d2 00             	adc    edx,0x0
c001f88e:	f7 da                	neg    edx
c001f890:	c3                   	ret    

c001f891 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f891:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f895:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f89a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f89e:	eb c7                	jmp    c001f867 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8a0:	53                   	push   ebx
c001f8a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8b1:	0f af ca             	imul   ecx,edx
c001f8b4:	0f af d8             	imul   ebx,eax
c001f8b7:	f7 e2                	mul    edx
c001f8b9:	01 d9                	add    ecx,ebx
c001f8bb:	5b                   	pop    ebx
c001f8bc:	01 ca                	add    edx,ecx
c001f8be:	c3                   	ret    

c001f8bf <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8bf:	83 ec 0c             	sub    esp,0xc
c001f8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d2:	e8 a5 70 00 00       	call   c002697c <__udivdi3>
c001f8d7:	83 c4 1c             	add    esp,0x1c
c001f8da:	c3                   	ret    

c001f8db <Vm::fpuSquare(unsigned long long)>:
c001f8db:	50                   	push   eax
c001f8dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8e4:	52                   	push   edx
c001f8e5:	50                   	push   eax
c001f8e6:	52                   	push   edx
c001f8e7:	50                   	push   eax
c001f8e8:	e8 b3 ff ff ff       	call   c001f8a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8ed:	83 c4 14             	add    esp,0x14
c001f8f0:	c3                   	ret    

c001f8f1 <Vm::fpuGetReg(int)>:
c001f8f1:	83 ec 0c             	sub    esp,0xc
c001f8f4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f8f9:	76 10                	jbe    c001f90b <Vm::fpuGetReg(int)+0x1a>
c001f8fb:	83 ec 0c             	sub    esp,0xc
c001f8fe:	68 66 c7 02 c0       	push   0xc002c766
c001f903:	e8 6d ac ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001f908:	83 c4 10             	add    esp,0x10
c001f90b:	a0 c1 19 03 c0       	mov    al,ds:0xc00319c1
c001f910:	b9 08 00 00 00       	mov    ecx,0x8
c001f915:	c0 e8 03             	shr    al,0x3
c001f918:	83 e0 07             	and    eax,0x7
c001f91b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f91f:	99                   	cdq    
c001f920:	f7 f9                	idiv   ecx
c001f922:	8b 04 d5 c4 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce63c]
c001f929:	8b 14 d5 c8 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce638]
c001f930:	83 c4 0c             	add    esp,0xc
c001f933:	c3                   	ret    

c001f934 <Vm::fpuSetReg(int, unsigned long long)>:
c001f934:	57                   	push   edi
c001f935:	56                   	push   esi
c001f936:	52                   	push   edx
c001f937:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f93b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f93f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f944:	76 10                	jbe    c001f956 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	68 79 c7 02 c0       	push   0xc002c779
c001f94e:	e8 22 ac ff ff       	call   c001a575 <Krnl::panic(char const*)>
c001f953:	83 c4 10             	add    esp,0x10
c001f956:	a0 c1 19 03 c0       	mov    al,ds:0xc00319c1
c001f95b:	b9 08 00 00 00       	mov    ecx,0x8
c001f960:	c0 e8 03             	shr    al,0x3
c001f963:	83 e0 07             	and    eax,0x7
c001f966:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f96a:	99                   	cdq    
c001f96b:	f7 f9                	idiv   ecx
c001f96d:	89 34 d5 c4 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce63c],esi
c001f974:	89 3c d5 c8 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce638],edi
c001f97b:	58                   	pop    eax
c001f97c:	5e                   	pop    esi
c001f97d:	5f                   	pop    edi
c001f97e:	c3                   	ret    

c001f97f <Vm::fpuPush(unsigned long long)>:
c001f97f:	a0 c1 19 03 c0       	mov    al,ds:0xc00319c1
c001f984:	c0 e8 03             	shr    al,0x3
c001f987:	83 e0 07             	and    eax,0x7
c001f98a:	83 c0 07             	add    eax,0x7
c001f98d:	88 c2                	mov    dl,al
c001f98f:	83 e0 07             	and    eax,0x7
c001f992:	83 e2 07             	and    edx,0x7
c001f995:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f99c:	8a 15 c1 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319c1
c001f9a2:	83 e2 c7             	and    edx,0xffffffc7
c001f9a5:	09 ca                	or     edx,ecx
c001f9a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9ab:	88 15 c1 19 03 c0    	mov    BYTE PTR ds:0xc00319c1,dl
c001f9b1:	89 0c c5 c8 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce638],ecx
c001f9b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9bc:	89 14 c5 c4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce63c],edx
c001f9c3:	a1 04 1a 03 c0       	mov    eax,ds:0xc0031a04
c001f9c8:	83 f8 08             	cmp    eax,0x8
c001f9cb:	75 08                	jne    c001f9d5 <Vm::fpuPush(unsigned long long)+0x56>
c001f9cd:	80 0d c0 19 03 c0 40 	or     BYTE PTR ds:0xc00319c0,0x40
c001f9d4:	c3                   	ret    
c001f9d5:	40                   	inc    eax
c001f9d6:	a3 04 1a 03 c0       	mov    ds:0xc0031a04,eax
c001f9db:	c3                   	ret    

c001f9dc <Vm::fpuPop()>:
c001f9dc:	8a 0d c1 19 03 c0    	mov    cl,BYTE PTR ds:0xc00319c1
c001f9e2:	53                   	push   ebx
c001f9e3:	c0 e9 03             	shr    cl,0x3
c001f9e6:	8a 1d c1 19 03 c0    	mov    bl,BYTE PTR ds:0xc00319c1
c001f9ec:	83 e1 07             	and    ecx,0x7
c001f9ef:	83 e3 c7             	and    ebx,0xffffffc7
c001f9f2:	8b 04 cd c4 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce63c]
c001f9f9:	8b 14 cd c8 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce638]
c001fa00:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa07:	83 e1 38             	and    ecx,0x38
c001fa0a:	09 d9                	or     ecx,ebx
c001fa0c:	88 0d c1 19 03 c0    	mov    BYTE PTR ds:0xc00319c1,cl
c001fa12:	8b 0d 04 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a04
c001fa18:	85 c9                	test   ecx,ecx
c001fa1a:	74 09                	je     c001fa25 <Vm::fpuPop()+0x49>
c001fa1c:	49                   	dec    ecx
c001fa1d:	89 0d 04 1a 03 c0    	mov    DWORD PTR ds:0xc0031a04,ecx
c001fa23:	eb 07                	jmp    c001fa2c <Vm::fpuPop()+0x50>
c001fa25:	80 0d c0 19 03 c0 40 	or     BYTE PTR ds:0xc00319c0,0x40
c001fa2c:	5b                   	pop    ebx
c001fa2d:	c3                   	ret    

c001fa2e <Vm::x87Handler(regs*)>:
c001fa2e:	55                   	push   ebp
c001fa2f:	57                   	push   edi
c001fa30:	56                   	push   esi
c001fa31:	53                   	push   ebx
c001fa32:	83 ec 1c             	sub    esp,0x1c
c001fa35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa39:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa3e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa41:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa49:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa4d:	50                   	push   eax
c001fa4e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa52:	50                   	push   eax
c001fa53:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa57:	50                   	push   eax
c001fa58:	53                   	push   ebx
c001fa59:	e8 de a1 ff ff       	call   c0019c3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa5e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa61:	83 c4 10             	add    esp,0x10
c001fa64:	89 c6                	mov    esi,eax
c001fa66:	80 fa d9             	cmp    dl,0xd9
c001fa69:	0f 85 52 01 00 00    	jne    c001fbc1 <Vm::x87Handler(regs*)+0x193>
c001fa6f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa73:	8d 50 20             	lea    edx,[eax+0x20]
c001fa76:	80 fa 0e             	cmp    dl,0xe
c001fa79:	0f 87 86 00 00 00    	ja     c001fb05 <Vm::x87Handler(regs*)+0xd7>
c001fa7f:	0f b6 d2             	movzx  edx,dl
c001fa82:	ff 24 95 8c c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3874]
c001fa89:	e8 e7 fc ff ff       	call   c001f775 <Vm::fpuGet0()>
c001fa8e:	eb 05                	jmp    c001fa95 <Vm::x87Handler(regs*)+0x67>
c001fa90:	e8 e5 fc ff ff       	call   c001f77a <Vm::fpuGet1()>
c001fa95:	57                   	push   edi
c001fa96:	57                   	push   edi
c001fa97:	52                   	push   edx
c001fa98:	50                   	push   eax
c001fa99:	e8 e1 fe ff ff       	call   c001f97f <Vm::fpuPush(unsigned long long)>
c001fa9e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faa2:	83 c4 10             	add    esp,0x10
c001faa5:	b0 01                	mov    al,0x1
c001faa7:	e9 e3 09 00 00       	jmp    c002048f <Vm::x87Handler(regs*)+0xa61>
c001faac:	83 ec 0c             	sub    esp,0xc
c001faaf:	6a 00                	push   0x0
c001fab1:	e8 3b fe ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fab6:	59                   	pop    ecx
c001fab7:	5e                   	pop    esi
c001fab8:	52                   	push   edx
c001fab9:	50                   	push   eax
c001faba:	e8 c2 fd ff ff       	call   c001f881 <Vm::fpuChs(unsigned long long)>
c001fabf:	eb 13                	jmp    c001fad4 <Vm::x87Handler(regs*)+0xa6>
c001fac1:	83 ec 0c             	sub    esp,0xc
c001fac4:	6a 00                	push   0x0
c001fac6:	e8 26 fe ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001facb:	5f                   	pop    edi
c001facc:	5d                   	pop    ebp
c001facd:	52                   	push   edx
c001face:	50                   	push   eax
c001facf:	e8 a4 fd ff ff       	call   c001f878 <Vm::fpuAbs(unsigned long long)>
c001fad4:	83 c4 0c             	add    esp,0xc
c001fad7:	52                   	push   edx
c001fad8:	50                   	push   eax
c001fad9:	6a 00                	push   0x0
c001fadb:	e8 54 fe ff ff       	call   c001f934 <Vm::fpuSetReg(int, unsigned long long)>
c001fae0:	eb bc                	jmp    c001fa9e <Vm::x87Handler(regs*)+0x70>
c001fae2:	e8 d3 fc ff ff       	call   c001f7ba <Vm::fpuGetLog210()>
c001fae7:	eb ac                	jmp    c001fa95 <Vm::x87Handler(regs*)+0x67>
c001fae9:	e8 9c fc ff ff       	call   c001f78a <Vm::fpuGetLog2E()>
c001faee:	eb a5                	jmp    c001fa95 <Vm::x87Handler(regs*)+0x67>
c001faf0:	e8 8d fc ff ff       	call   c001f782 <Vm::fpuGetPi()>
c001faf5:	eb 9e                	jmp    c001fa95 <Vm::x87Handler(regs*)+0x67>
c001faf7:	e8 d6 fc ff ff       	call   c001f7d2 <Vm::fpuGetLog102()>
c001fafc:	eb 97                	jmp    c001fa95 <Vm::x87Handler(regs*)+0x67>
c001fafe:	e8 9f fc ff ff       	call   c001f7a2 <Vm::fpuGetLogE2()>
c001fb03:	eb 90                	jmp    c001fa95 <Vm::x87Handler(regs*)+0x67>
c001fb05:	8d 50 40             	lea    edx,[eax+0x40]
c001fb08:	80 fa 07             	cmp    dl,0x7
c001fb0b:	77 15                	ja     c001fb22 <Vm::x87Handler(regs*)+0xf4>
c001fb0d:	83 ec 0c             	sub    esp,0xc
c001fb10:	2d c0 00 00 00       	sub    eax,0xc0
c001fb15:	50                   	push   eax
c001fb16:	e8 d6 fd ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fb1b:	59                   	pop    ecx
c001fb1c:	5e                   	pop    esi
c001fb1d:	e9 75 ff ff ff       	jmp    c001fa97 <Vm::x87Handler(regs*)+0x69>
c001fb22:	8d 50 38             	lea    edx,[eax+0x38]
c001fb25:	80 fa 07             	cmp    dl,0x7
c001fb28:	77 3c                	ja     c001fb66 <Vm::x87Handler(regs*)+0x138>
c001fb2a:	83 ec 0c             	sub    esp,0xc
c001fb2d:	2d c8 00 00 00       	sub    eax,0xc8
c001fb32:	50                   	push   eax
c001fb33:	e8 b9 fd ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fb38:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb3f:	89 c6                	mov    esi,eax
c001fb41:	89 d7                	mov    edi,edx
c001fb43:	e8 a9 fd ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fb48:	83 c4 0c             	add    esp,0xc
c001fb4b:	52                   	push   edx
c001fb4c:	50                   	push   eax
c001fb4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb51:	2d c8 00 00 00       	sub    eax,0xc8
c001fb56:	50                   	push   eax
c001fb57:	e8 d8 fd ff ff       	call   c001f934 <Vm::fpuSetReg(int, unsigned long long)>
c001fb5c:	83 c4 0c             	add    esp,0xc
c001fb5f:	57                   	push   edi
c001fb60:	56                   	push   esi
c001fb61:	e9 73 ff ff ff       	jmp    c001fad9 <Vm::x87Handler(regs*)+0xab>
c001fb66:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb6a:	84 d2                	test   dl,dl
c001fb6c:	75 0f                	jne    c001fb7d <Vm::x87Handler(regs*)+0x14f>
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	ff 36                	push   DWORD PTR [esi]
c001fb73:	e8 c8 fa ff ff       	call   c001f640 <Vm::fpu32ToInternal(unsigned int)>
c001fb78:	e9 bf 00 00 00       	jmp    c001fc3c <Vm::x87Handler(regs*)+0x20e>
c001fb7d:	80 fa 03             	cmp    dl,0x3
c001fb80:	75 13                	jne    c001fb95 <Vm::x87Handler(regs*)+0x167>
c001fb82:	e8 55 fe ff ff       	call   c001f9dc <Vm::fpuPop()>
c001fb87:	55                   	push   ebp
c001fb88:	55                   	push   ebp
c001fb89:	52                   	push   edx
c001fb8a:	50                   	push   eax
c001fb8b:	e8 4c fa ff ff       	call   c001f5dc <Vm::fpuInternalTo32(unsigned long long)>
c001fb90:	e9 88 00 00 00       	jmp    c001fc1d <Vm::x87Handler(regs*)+0x1ef>
c001fb95:	80 fa 05             	cmp    dl,0x5
c001fb98:	75 0e                	jne    c001fba8 <Vm::x87Handler(regs*)+0x17a>
c001fb9a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fb9d:	66 a3 c2 19 03 c0    	mov    ds:0xc00319c2,ax
c001fba3:	e9 df 00 00 00       	jmp    c001fc87 <Vm::x87Handler(regs*)+0x259>
c001fba8:	31 c0                	xor    eax,eax
c001fbaa:	80 fa 07             	cmp    dl,0x7
c001fbad:	0f 85 dc 08 00 00    	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c001fbb3:	66 a1 c2 19 03 c0    	mov    ax,ds:0xc00319c2
c001fbb9:	66 89 06             	mov    WORD PTR [esi],ax
c001fbbc:	e9 c6 00 00 00       	jmp    c001fc87 <Vm::x87Handler(regs*)+0x259>
c001fbc1:	80 fa d8             	cmp    dl,0xd8
c001fbc4:	0f 84 c9 00 00 00    	je     c001fc93 <Vm::x87Handler(regs*)+0x265>
c001fbca:	80 fa dc             	cmp    dl,0xdc
c001fbcd:	0f 84 0d 02 00 00    	je     c001fde0 <Vm::x87Handler(regs*)+0x3b2>
c001fbd3:	80 fa de             	cmp    dl,0xde
c001fbd6:	0f 84 cd 02 00 00    	je     c001fea9 <Vm::x87Handler(regs*)+0x47b>
c001fbdc:	80 fa dd             	cmp    dl,0xdd
c001fbdf:	0f 84 5f 04 00 00    	je     c0020044 <Vm::x87Handler(regs*)+0x616>
c001fbe5:	80 fa da             	cmp    dl,0xda
c001fbe8:	0f 84 24 05 00 00    	je     c0020112 <Vm::x87Handler(regs*)+0x6e4>
c001fbee:	80 fa df             	cmp    dl,0xdf
c001fbf1:	0f 84 68 05 00 00    	je     c002015f <Vm::x87Handler(regs*)+0x731>
c001fbf7:	31 c0                	xor    eax,eax
c001fbf9:	80 fa db             	cmp    dl,0xdb
c001fbfc:	0f 85 8d 08 00 00    	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c001fc02:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc06:	80 fa 03             	cmp    dl,0x3
c001fc09:	0f 85 70 06 00 00    	jne    c002027f <Vm::x87Handler(regs*)+0x851>
c001fc0f:	e8 c8 fd ff ff       	call   c001f9dc <Vm::fpuPop()>
c001fc14:	55                   	push   ebp
c001fc15:	55                   	push   ebp
c001fc16:	52                   	push   edx
c001fc17:	50                   	push   eax
c001fc18:	e8 71 fa ff ff       	call   c001f68e <Vm::fpuFloatToLong(unsigned long long)>
c001fc1d:	83 c4 10             	add    esp,0x10
c001fc20:	89 06                	mov    DWORD PTR [esi],eax
c001fc22:	eb 63                	jmp    c001fc87 <Vm::x87Handler(regs*)+0x259>
c001fc24:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc28:	84 d2                	test   dl,dl
c001fc2a:	0f 85 e6 05 00 00    	jne    c0020216 <Vm::x87Handler(regs*)+0x7e8>
c001fc30:	57                   	push   edi
c001fc31:	57                   	push   edi
c001fc32:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc35:	ff 36                	push   DWORD PTR [esi]
c001fc37:	e8 49 fa ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c001fc3c:	5e                   	pop    esi
c001fc3d:	5f                   	pop    edi
c001fc3e:	52                   	push   edx
c001fc3f:	50                   	push   eax
c001fc40:	e8 3a fd ff ff       	call   c001f97f <Vm::fpuPush(unsigned long long)>
c001fc45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc49:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc4c:	e9 51 fe ff ff       	jmp    c001faa2 <Vm::x87Handler(regs*)+0x74>
c001fc51:	80 fa 03             	cmp    dl,0x3
c001fc54:	0f 85 d7 06 00 00    	jne    c0020331 <Vm::x87Handler(regs*)+0x903>
c001fc5a:	57                   	push   edi
c001fc5b:	57                   	push   edi
c001fc5c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc5f:	ff 36                	push   DWORD PTR [esi]
c001fc61:	e8 1f fa ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c001fc66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc6d:	89 c6                	mov    esi,eax
c001fc6f:	89 d7                	mov    edi,edx
c001fc71:	e8 7b fc ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fc76:	57                   	push   edi
c001fc77:	56                   	push   esi
c001fc78:	52                   	push   edx
c001fc79:	50                   	push   eax
c001fc7a:	e8 95 fb ff ff       	call   c001f814 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc7f:	83 c4 20             	add    esp,0x20
c001fc82:	e8 55 fd ff ff       	call   c001f9dc <Vm::fpuPop()>
c001fc87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc8b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc8e:	e9 12 fe ff ff       	jmp    c001faa5 <Vm::x87Handler(regs*)+0x77>
c001fc93:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc97:	8d 50 40             	lea    edx,[eax+0x40]
c001fc9a:	80 fa 07             	cmp    dl,0x7
c001fc9d:	77 29                	ja     c001fcc8 <Vm::x87Handler(regs*)+0x29a>
c001fc9f:	83 ec 0c             	sub    esp,0xc
c001fca2:	2d c0 00 00 00       	sub    eax,0xc0
c001fca7:	50                   	push   eax
c001fca8:	e8 44 fc ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fcad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcb4:	89 c6                	mov    esi,eax
c001fcb6:	89 d7                	mov    edi,edx
c001fcb8:	e8 34 fc ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fcbd:	57                   	push   edi
c001fcbe:	56                   	push   esi
c001fcbf:	52                   	push   edx
c001fcc0:	50                   	push   eax
c001fcc1:	e8 a1 fb ff ff       	call   c001f867 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcc6:	eb 2f                	jmp    c001fcf7 <Vm::x87Handler(regs*)+0x2c9>
c001fcc8:	8d 50 38             	lea    edx,[eax+0x38]
c001fccb:	80 fa 07             	cmp    dl,0x7
c001fcce:	77 2f                	ja     c001fcff <Vm::x87Handler(regs*)+0x2d1>
c001fcd0:	83 ec 0c             	sub    esp,0xc
c001fcd3:	2d c8 00 00 00       	sub    eax,0xc8
c001fcd8:	50                   	push   eax
c001fcd9:	e8 13 fc ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fcde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fce5:	89 c6                	mov    esi,eax
c001fce7:	89 d7                	mov    edi,edx
c001fce9:	e8 03 fc ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fcee:	57                   	push   edi
c001fcef:	56                   	push   esi
c001fcf0:	52                   	push   edx
c001fcf1:	50                   	push   eax
c001fcf2:	e8 a9 fb ff ff       	call   c001f8a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcf7:	83 c4 1c             	add    esp,0x1c
c001fcfa:	e9 d8 fd ff ff       	jmp    c001fad7 <Vm::x87Handler(regs*)+0xa9>
c001fcff:	8d 50 30             	lea    edx,[eax+0x30]
c001fd02:	80 fa 07             	cmp    dl,0x7
c001fd05:	77 0d                	ja     c001fd14 <Vm::x87Handler(regs*)+0x2e6>
c001fd07:	83 ec 0c             	sub    esp,0xc
c001fd0a:	2d d0 00 00 00       	sub    eax,0xd0
c001fd0f:	e9 99 03 00 00       	jmp    c00200ad <Vm::x87Handler(regs*)+0x67f>
c001fd14:	8d 50 28             	lea    edx,[eax+0x28]
c001fd17:	80 fa 07             	cmp    dl,0x7
c001fd1a:	77 0d                	ja     c001fd29 <Vm::x87Handler(regs*)+0x2fb>
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	2d d8 00 00 00       	sub    eax,0xd8
c001fd24:	e9 c0 03 00 00       	jmp    c00200e9 <Vm::x87Handler(regs*)+0x6bb>
c001fd29:	8d 50 20             	lea    edx,[eax+0x20]
c001fd2c:	80 fa 07             	cmp    dl,0x7
c001fd2f:	77 1b                	ja     c001fd4c <Vm::x87Handler(regs*)+0x31e>
c001fd31:	83 ec 0c             	sub    esp,0xc
c001fd34:	2d e0 00 00 00       	sub    eax,0xe0
c001fd39:	50                   	push   eax
c001fd3a:	e8 b2 fb ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fd3f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd46:	89 c6                	mov    esi,eax
c001fd48:	89 d7                	mov    edi,edx
c001fd4a:	eb 22                	jmp    c001fd6e <Vm::x87Handler(regs*)+0x340>
c001fd4c:	8d 50 18             	lea    edx,[eax+0x18]
c001fd4f:	80 fa 07             	cmp    dl,0x7
c001fd52:	77 2d                	ja     c001fd81 <Vm::x87Handler(regs*)+0x353>
c001fd54:	83 ec 0c             	sub    esp,0xc
c001fd57:	6a 00                	push   0x0
c001fd59:	e8 93 fb ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fd5e:	89 c6                	mov    esi,eax
c001fd60:	89 d7                	mov    edi,edx
c001fd62:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd66:	2d e8 00 00 00       	sub    eax,0xe8
c001fd6b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd6e:	e8 7e fb ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fd73:	57                   	push   edi
c001fd74:	56                   	push   esi
c001fd75:	52                   	push   edx
c001fd76:	50                   	push   eax
c001fd77:	e8 15 fb ff ff       	call   c001f891 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd7c:	e9 76 ff ff ff       	jmp    c001fcf7 <Vm::x87Handler(regs*)+0x2c9>
c001fd81:	8d 50 10             	lea    edx,[eax+0x10]
c001fd84:	80 fa 07             	cmp    dl,0x7
c001fd87:	77 1b                	ja     c001fda4 <Vm::x87Handler(regs*)+0x376>
c001fd89:	83 ec 0c             	sub    esp,0xc
c001fd8c:	2d f0 00 00 00       	sub    eax,0xf0
c001fd91:	50                   	push   eax
c001fd92:	e8 5a fb ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fd97:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd9e:	89 c6                	mov    esi,eax
c001fda0:	89 d7                	mov    edi,edx
c001fda2:	eb 22                	jmp    c001fdc6 <Vm::x87Handler(regs*)+0x398>
c001fda4:	3c f7                	cmp    al,0xf7
c001fda6:	0f 86 d1 03 00 00    	jbe    c002017d <Vm::x87Handler(regs*)+0x74f>
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	6a 00                	push   0x0
c001fdb1:	e8 3b fb ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fdb6:	89 c6                	mov    esi,eax
c001fdb8:	89 d7                	mov    edi,edx
c001fdba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdbe:	2d f8 00 00 00       	sub    eax,0xf8
c001fdc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdc6:	e8 26 fb ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fdcb:	57                   	push   edi
c001fdcc:	56                   	push   esi
c001fdcd:	52                   	push   edx
c001fdce:	50                   	push   eax
c001fdcf:	e8 eb fa ff ff       	call   c001f8bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdd4:	83 c4 1c             	add    esp,0x1c
c001fdd7:	52                   	push   edx
c001fdd8:	50                   	push   eax
c001fdd9:	6a 00                	push   0x0
c001fddb:	e9 51 02 00 00       	jmp    c0020031 <Vm::x87Handler(regs*)+0x603>
c001fde0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde4:	8d 50 40             	lea    edx,[eax+0x40]
c001fde7:	80 fa 07             	cmp    dl,0x7
c001fdea:	77 37                	ja     c001fe23 <Vm::x87Handler(regs*)+0x3f5>
c001fdec:	83 ec 0c             	sub    esp,0xc
c001fdef:	2d c0 00 00 00       	sub    eax,0xc0
c001fdf4:	50                   	push   eax
c001fdf5:	e8 f7 fa ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fdfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe01:	89 c6                	mov    esi,eax
c001fe03:	89 d7                	mov    edi,edx
c001fe05:	e8 e7 fa ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fe0a:	57                   	push   edi
c001fe0b:	56                   	push   esi
c001fe0c:	52                   	push   edx
c001fe0d:	50                   	push   eax
c001fe0e:	e8 54 fa ff ff       	call   c001f867 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe13:	83 c4 1c             	add    esp,0x1c
c001fe16:	52                   	push   edx
c001fe17:	50                   	push   eax
c001fe18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe1c:	2d c0 00 00 00       	sub    eax,0xc0
c001fe21:	eb 3d                	jmp    c001fe60 <Vm::x87Handler(regs*)+0x432>
c001fe23:	8d 50 38             	lea    edx,[eax+0x38]
c001fe26:	80 fa 07             	cmp    dl,0x7
c001fe29:	77 3b                	ja     c001fe66 <Vm::x87Handler(regs*)+0x438>
c001fe2b:	83 ec 0c             	sub    esp,0xc
c001fe2e:	2d c8 00 00 00       	sub    eax,0xc8
c001fe33:	50                   	push   eax
c001fe34:	e8 b8 fa ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fe39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe40:	89 c6                	mov    esi,eax
c001fe42:	89 d7                	mov    edi,edx
c001fe44:	e8 a8 fa ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fe49:	57                   	push   edi
c001fe4a:	56                   	push   esi
c001fe4b:	52                   	push   edx
c001fe4c:	50                   	push   eax
c001fe4d:	e8 4e fa ff ff       	call   c001f8a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe52:	83 c4 1c             	add    esp,0x1c
c001fe55:	52                   	push   edx
c001fe56:	50                   	push   eax
c001fe57:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe5b:	2d c8 00 00 00       	sub    eax,0xc8
c001fe60:	50                   	push   eax
c001fe61:	e9 75 fc ff ff       	jmp    c001fadb <Vm::x87Handler(regs*)+0xad>
c001fe66:	83 c0 18             	add    eax,0x18
c001fe69:	3c 07                	cmp    al,0x7
c001fe6b:	0f 87 3b 04 00 00    	ja     c00202ac <Vm::x87Handler(regs*)+0x87e>
c001fe71:	83 ec 0c             	sub    esp,0xc
c001fe74:	6a 00                	push   0x0
c001fe76:	e8 76 fa ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fe7b:	89 c6                	mov    esi,eax
c001fe7d:	89 d7                	mov    edi,edx
c001fe7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe83:	2d e8 00 00 00       	sub    eax,0xe8
c001fe88:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe8b:	e8 61 fa ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fe90:	57                   	push   edi
c001fe91:	56                   	push   esi
c001fe92:	52                   	push   edx
c001fe93:	50                   	push   eax
c001fe94:	e8 f8 f9 ff ff       	call   c001f891 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe99:	83 c4 1c             	add    esp,0x1c
c001fe9c:	52                   	push   edx
c001fe9d:	50                   	push   eax
c001fe9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea2:	2d e8 00 00 00       	sub    eax,0xe8
c001fea7:	eb b7                	jmp    c001fe60 <Vm::x87Handler(regs*)+0x432>
c001fea9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fead:	8d 50 40             	lea    edx,[eax+0x40]
c001feb0:	80 fa 07             	cmp    dl,0x7
c001feb3:	77 3a                	ja     c001feef <Vm::x87Handler(regs*)+0x4c1>
c001feb5:	83 ec 0c             	sub    esp,0xc
c001feb8:	2d c0 00 00 00       	sub    eax,0xc0
c001febd:	50                   	push   eax
c001febe:	e8 2e fa ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fec3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feca:	89 c6                	mov    esi,eax
c001fecc:	89 d7                	mov    edi,edx
c001fece:	e8 1e fa ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001fed3:	57                   	push   edi
c001fed4:	56                   	push   esi
c001fed5:	52                   	push   edx
c001fed6:	50                   	push   eax
c001fed7:	e8 8b f9 ff ff       	call   c001f867 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fedc:	83 c4 1c             	add    esp,0x1c
c001fedf:	52                   	push   edx
c001fee0:	50                   	push   eax
c001fee1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee5:	2d c0 00 00 00       	sub    eax,0xc0
c001feea:	e9 9e 01 00 00       	jmp    c002008d <Vm::x87Handler(regs*)+0x65f>
c001feef:	8d 50 20             	lea    edx,[eax+0x20]
c001fef2:	80 fa 07             	cmp    dl,0x7
c001fef5:	77 3a                	ja     c001ff31 <Vm::x87Handler(regs*)+0x503>
c001fef7:	83 ec 0c             	sub    esp,0xc
c001fefa:	2d e0 00 00 00       	sub    eax,0xe0
c001feff:	50                   	push   eax
c001ff00:	e8 ec f9 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001ff05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff0c:	89 c6                	mov    esi,eax
c001ff0e:	89 d7                	mov    edi,edx
c001ff10:	e8 dc f9 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001ff15:	57                   	push   edi
c001ff16:	56                   	push   esi
c001ff17:	52                   	push   edx
c001ff18:	50                   	push   eax
c001ff19:	e8 73 f9 ff ff       	call   c001f891 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff1e:	83 c4 1c             	add    esp,0x1c
c001ff21:	52                   	push   edx
c001ff22:	50                   	push   eax
c001ff23:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff27:	2d e0 00 00 00       	sub    eax,0xe0
c001ff2c:	e9 5c 01 00 00       	jmp    c002008d <Vm::x87Handler(regs*)+0x65f>
c001ff31:	8d 50 18             	lea    edx,[eax+0x18]
c001ff34:	80 fa 07             	cmp    dl,0x7
c001ff37:	77 3b                	ja     c001ff74 <Vm::x87Handler(regs*)+0x546>
c001ff39:	83 ec 0c             	sub    esp,0xc
c001ff3c:	6a 00                	push   0x0
c001ff3e:	e8 ae f9 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001ff43:	89 c6                	mov    esi,eax
c001ff45:	89 d7                	mov    edi,edx
c001ff47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff4b:	2d e8 00 00 00       	sub    eax,0xe8
c001ff50:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff53:	e8 99 f9 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001ff58:	57                   	push   edi
c001ff59:	56                   	push   esi
c001ff5a:	52                   	push   edx
c001ff5b:	50                   	push   eax
c001ff5c:	e8 30 f9 ff ff       	call   c001f891 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff61:	83 c4 1c             	add    esp,0x1c
c001ff64:	52                   	push   edx
c001ff65:	50                   	push   eax
c001ff66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6a:	2d e8 00 00 00       	sub    eax,0xe8
c001ff6f:	e9 19 01 00 00       	jmp    c002008d <Vm::x87Handler(regs*)+0x65f>
c001ff74:	8d 50 38             	lea    edx,[eax+0x38]
c001ff77:	80 fa 07             	cmp    dl,0x7
c001ff7a:	77 37                	ja     c001ffb3 <Vm::x87Handler(regs*)+0x585>
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	2d c8 00 00 00       	sub    eax,0xc8
c001ff84:	50                   	push   eax
c001ff85:	e8 67 f9 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001ff8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff91:	89 c6                	mov    esi,eax
c001ff93:	89 d7                	mov    edi,edx
c001ff95:	e8 57 f9 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001ff9a:	57                   	push   edi
c001ff9b:	56                   	push   esi
c001ff9c:	52                   	push   edx
c001ff9d:	50                   	push   eax
c001ff9e:	e8 fd f8 ff ff       	call   c001f8a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffa3:	83 c4 1c             	add    esp,0x1c
c001ffa6:	52                   	push   edx
c001ffa7:	50                   	push   eax
c001ffa8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffac:	2d c8 00 00 00       	sub    eax,0xc8
c001ffb1:	eb 7d                	jmp    c0020030 <Vm::x87Handler(regs*)+0x602>
c001ffb3:	3c f7                	cmp    al,0xf7
c001ffb5:	76 38                	jbe    c001ffef <Vm::x87Handler(regs*)+0x5c1>
c001ffb7:	83 ec 0c             	sub    esp,0xc
c001ffba:	6a 00                	push   0x0
c001ffbc:	e8 30 f9 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001ffc1:	89 c6                	mov    esi,eax
c001ffc3:	89 d7                	mov    edi,edx
c001ffc5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc9:	2d f8 00 00 00       	sub    eax,0xf8
c001ffce:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffd1:	e8 1b f9 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c001ffd6:	57                   	push   edi
c001ffd7:	56                   	push   esi
c001ffd8:	52                   	push   edx
c001ffd9:	50                   	push   eax
c001ffda:	e8 e0 f8 ff ff       	call   c001f8bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffdf:	83 c4 1c             	add    esp,0x1c
c001ffe2:	52                   	push   edx
c001ffe3:	50                   	push   eax
c001ffe4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe8:	2d f8 00 00 00       	sub    eax,0xf8
c001ffed:	eb 41                	jmp    c0020030 <Vm::x87Handler(regs*)+0x602>
c001ffef:	8d 50 10             	lea    edx,[eax+0x10]
c001fff2:	80 fa 07             	cmp    dl,0x7
c001fff5:	0f 87 5a 01 00 00    	ja     c0020155 <Vm::x87Handler(regs*)+0x727>
c001fffb:	83 ec 0c             	sub    esp,0xc
c001fffe:	2d f0 00 00 00       	sub    eax,0xf0
c0020003:	50                   	push   eax
c0020004:	e8 e8 f8 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020009:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020010:	89 c6                	mov    esi,eax
c0020012:	89 d7                	mov    edi,edx
c0020014:	e8 d8 f8 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020019:	57                   	push   edi
c002001a:	56                   	push   esi
c002001b:	52                   	push   edx
c002001c:	50                   	push   eax
c002001d:	e8 9d f8 ff ff       	call   c001f8bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020022:	83 c4 1c             	add    esp,0x1c
c0020025:	52                   	push   edx
c0020026:	50                   	push   eax
c0020027:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002002b:	2d f0 00 00 00       	sub    eax,0xf0
c0020030:	50                   	push   eax
c0020031:	e8 fe f8 ff ff       	call   c001f934 <Vm::fpuSetReg(int, unsigned long long)>
c0020036:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002003a:	e8 9d f9 ff ff       	call   c001f9dc <Vm::fpuPop()>
c002003f:	e9 5e fa ff ff       	jmp    c001faa2 <Vm::x87Handler(regs*)+0x74>
c0020044:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020048:	8d 50 30             	lea    edx,[eax+0x30]
c002004b:	80 fa 07             	cmp    dl,0x7
c002004e:	77 1d                	ja     c002006d <Vm::x87Handler(regs*)+0x63f>
c0020050:	83 ec 0c             	sub    esp,0xc
c0020053:	6a 00                	push   0x0
c0020055:	e8 97 f8 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c002005a:	83 c4 0c             	add    esp,0xc
c002005d:	52                   	push   edx
c002005e:	50                   	push   eax
c002005f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020063:	2d d0 00 00 00       	sub    eax,0xd0
c0020068:	e9 f3 fd ff ff       	jmp    c001fe60 <Vm::x87Handler(regs*)+0x432>
c002006d:	8d 50 28             	lea    edx,[eax+0x28]
c0020070:	80 fa 07             	cmp    dl,0x7
c0020073:	77 28                	ja     c002009d <Vm::x87Handler(regs*)+0x66f>
c0020075:	83 ec 0c             	sub    esp,0xc
c0020078:	6a 00                	push   0x0
c002007a:	e8 72 f8 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c002007f:	83 c4 0c             	add    esp,0xc
c0020082:	52                   	push   edx
c0020083:	50                   	push   eax
c0020084:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020088:	2d d8 00 00 00       	sub    eax,0xd8
c002008d:	50                   	push   eax
c002008e:	e8 a1 f8 ff ff       	call   c001f934 <Vm::fpuSetReg(int, unsigned long long)>
c0020093:	e8 44 f9 ff ff       	call   c001f9dc <Vm::fpuPop()>
c0020098:	e9 01 fa ff ff       	jmp    c001fa9e <Vm::x87Handler(regs*)+0x70>
c002009d:	8d 50 20             	lea    edx,[eax+0x20]
c00200a0:	80 fa 07             	cmp    dl,0x7
c00200a3:	77 30                	ja     c00200d5 <Vm::x87Handler(regs*)+0x6a7>
c00200a5:	83 ec 0c             	sub    esp,0xc
c00200a8:	2d e0 00 00 00       	sub    eax,0xe0
c00200ad:	50                   	push   eax
c00200ae:	e8 3e f8 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00200b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200ba:	89 c6                	mov    esi,eax
c00200bc:	89 d7                	mov    edi,edx
c00200be:	e8 2e f8 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00200c3:	57                   	push   edi
c00200c4:	56                   	push   esi
c00200c5:	52                   	push   edx
c00200c6:	50                   	push   eax
c00200c7:	e8 48 f7 ff ff       	call   c001f814 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200d0:	e9 54 02 00 00       	jmp    c0020329 <Vm::x87Handler(regs*)+0x8fb>
c00200d5:	8d 50 18             	lea    edx,[eax+0x18]
c00200d8:	80 fa 07             	cmp    dl,0x7
c00200db:	0f 87 43 fb ff ff    	ja     c001fc24 <Vm::x87Handler(regs*)+0x1f6>
c00200e1:	83 ec 0c             	sub    esp,0xc
c00200e4:	2d e8 00 00 00       	sub    eax,0xe8
c00200e9:	50                   	push   eax
c00200ea:	e8 02 f8 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00200ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f6:	89 c6                	mov    esi,eax
c00200f8:	89 d7                	mov    edi,edx
c00200fa:	e8 f2 f7 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00200ff:	57                   	push   edi
c0020100:	56                   	push   esi
c0020101:	52                   	push   edx
c0020102:	50                   	push   eax
c0020103:	e8 0c f7 ff ff       	call   c001f814 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020108:	83 c4 20             	add    esp,0x20
c002010b:	e8 cc f8 ff ff       	call   c001f9dc <Vm::fpuPop()>
c0020110:	eb 62                	jmp    c0020174 <Vm::x87Handler(regs*)+0x746>
c0020112:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020116:	0f 85 0f 01 00 00    	jne    c002022b <Vm::x87Handler(regs*)+0x7fd>
c002011c:	83 ec 0c             	sub    esp,0xc
c002011f:	6a 01                	push   0x1
c0020121:	e8 cb f7 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020126:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002012d:	89 c6                	mov    esi,eax
c002012f:	89 d7                	mov    edi,edx
c0020131:	e8 bb f7 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020136:	57                   	push   edi
c0020137:	56                   	push   esi
c0020138:	52                   	push   edx
c0020139:	50                   	push   eax
c002013a:	e8 d5 f6 ff ff       	call   c001f814 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002013f:	83 c4 20             	add    esp,0x20
c0020142:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020146:	e8 91 f8 ff ff       	call   c001f9dc <Vm::fpuPop()>
c002014b:	e8 8c f8 ff ff       	call   c001f9dc <Vm::fpuPop()>
c0020150:	e9 50 f9 ff ff       	jmp    c001faa5 <Vm::x87Handler(regs*)+0x77>
c0020155:	3c d9                	cmp    al,0xd9
c0020157:	0f 85 b5 02 00 00    	jne    c0020412 <Vm::x87Handler(regs*)+0x9e4>
c002015d:	eb bd                	jmp    c002011c <Vm::x87Handler(regs*)+0x6ee>
c002015f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020163:	0f 85 ea 02 00 00    	jne    c0020453 <Vm::x87Handler(regs*)+0xa25>
c0020169:	0f b7 05 c0 19 03 c0 	movzx  eax,WORD PTR ds:0xc00319c0
c0020170:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020174:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020178:	e9 28 f9 ff ff       	jmp    c001faa5 <Vm::x87Handler(regs*)+0x77>
c002017d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020181:	84 d2                	test   dl,dl
c0020183:	75 0f                	jne    c0020194 <Vm::x87Handler(regs*)+0x766>
c0020185:	83 ec 0c             	sub    esp,0xc
c0020188:	ff 36                	push   DWORD PTR [esi]
c002018a:	e8 b1 f4 ff ff       	call   c001f640 <Vm::fpu32ToInternal(unsigned int)>
c002018f:	e9 2c 01 00 00       	jmp    c00202c0 <Vm::x87Handler(regs*)+0x892>
c0020194:	80 fa 01             	cmp    dl,0x1
c0020197:	75 0f                	jne    c00201a8 <Vm::x87Handler(regs*)+0x77a>
c0020199:	83 ec 0c             	sub    esp,0xc
c002019c:	ff 36                	push   DWORD PTR [esi]
c002019e:	e8 9d f4 ff ff       	call   c001f640 <Vm::fpu32ToInternal(unsigned int)>
c00201a3:	e9 81 02 00 00       	jmp    c0020429 <Vm::x87Handler(regs*)+0x9fb>
c00201a8:	80 fa 04             	cmp    dl,0x4
c00201ab:	75 0f                	jne    c00201bc <Vm::x87Handler(regs*)+0x78e>
c00201ad:	83 ec 0c             	sub    esp,0xc
c00201b0:	ff 36                	push   DWORD PTR [esi]
c00201b2:	e8 89 f4 ff ff       	call   c001f640 <Vm::fpu32ToInternal(unsigned int)>
c00201b7:	e9 86 01 00 00       	jmp    c0020342 <Vm::x87Handler(regs*)+0x914>
c00201bc:	80 fa 05             	cmp    dl,0x5
c00201bf:	75 1b                	jne    c00201dc <Vm::x87Handler(regs*)+0x7ae>
c00201c1:	83 ec 0c             	sub    esp,0xc
c00201c4:	6a 00                	push   0x0
c00201c6:	e8 26 f7 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00201cb:	89 c7                	mov    edi,eax
c00201cd:	89 d5                	mov    ebp,edx
c00201cf:	58                   	pop    eax
c00201d0:	ff 36                	push   DWORD PTR [esi]
c00201d2:	e8 69 f4 ff ff       	call   c001f640 <Vm::fpu32ToInternal(unsigned int)>
c00201d7:	e9 a3 01 00 00       	jmp    c002037f <Vm::x87Handler(regs*)+0x951>
c00201dc:	80 fa 06             	cmp    dl,0x6
c00201df:	75 0f                	jne    c00201f0 <Vm::x87Handler(regs*)+0x7c2>
c00201e1:	83 ec 0c             	sub    esp,0xc
c00201e4:	ff 36                	push   DWORD PTR [esi]
c00201e6:	e8 55 f4 ff ff       	call   c001f640 <Vm::fpu32ToInternal(unsigned int)>
c00201eb:	e9 ae 01 00 00       	jmp    c002039e <Vm::x87Handler(regs*)+0x970>
c00201f0:	31 c0                	xor    eax,eax
c00201f2:	80 fa 07             	cmp    dl,0x7
c00201f5:	0f 85 94 02 00 00    	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c00201fb:	83 ec 0c             	sub    esp,0xc
c00201fe:	6a 00                	push   0x0
c0020200:	e8 ec f6 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020205:	89 c7                	mov    edi,eax
c0020207:	89 d5                	mov    ebp,edx
c0020209:	58                   	pop    eax
c002020a:	ff 36                	push   DWORD PTR [esi]
c002020c:	e8 2f f4 ff ff       	call   c001f640 <Vm::fpu32ToInternal(unsigned int)>
c0020211:	e9 cb 01 00 00       	jmp    c00203e1 <Vm::x87Handler(regs*)+0x9b3>
c0020216:	80 fa 03             	cmp    dl,0x3
c0020219:	0f 85 d3 01 00 00    	jne    c00203f2 <Vm::x87Handler(regs*)+0x9c4>
c002021f:	e8 b8 f7 ff ff       	call   c001f9dc <Vm::fpuPop()>
c0020224:	51                   	push   ecx
c0020225:	51                   	push   ecx
c0020226:	e9 de 01 00 00       	jmp    c0020409 <Vm::x87Handler(regs*)+0x9db>
c002022b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002022f:	80 fa 01             	cmp    dl,0x1
c0020232:	75 09                	jne    c002023d <Vm::x87Handler(regs*)+0x80f>
c0020234:	57                   	push   edi
c0020235:	57                   	push   edi
c0020236:	8b 06                	mov    eax,DWORD PTR [esi]
c0020238:	e9 e3 01 00 00       	jmp    c0020420 <Vm::x87Handler(regs*)+0x9f2>
c002023d:	80 fa 04             	cmp    dl,0x4
c0020240:	75 12                	jne    c0020254 <Vm::x87Handler(regs*)+0x826>
c0020242:	31 d2                	xor    edx,edx
c0020244:	51                   	push   ecx
c0020245:	51                   	push   ecx
c0020246:	8b 06                	mov    eax,DWORD PTR [esi]
c0020248:	52                   	push   edx
c0020249:	50                   	push   eax
c002024a:	e8 d0 f4 ff ff       	call   c001f71f <Vm::fpuLongToFloat(long long)>
c002024f:	e9 ee 00 00 00       	jmp    c0020342 <Vm::x87Handler(regs*)+0x914>
c0020254:	31 c0                	xor    eax,eax
c0020256:	80 fa 07             	cmp    dl,0x7
c0020259:	0f 85 30 02 00 00    	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c002025f:	83 ec 0c             	sub    esp,0xc
c0020262:	6a 00                	push   0x0
c0020264:	e8 88 f6 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020269:	89 c7                	mov    edi,eax
c002026b:	89 d5                	mov    ebp,edx
c002026d:	58                   	pop    eax
c002026e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020270:	5a                   	pop    edx
c0020271:	31 d2                	xor    edx,edx
c0020273:	52                   	push   edx
c0020274:	50                   	push   eax
c0020275:	e8 a5 f4 ff ff       	call   c001f71f <Vm::fpuLongToFloat(long long)>
c002027a:	e9 62 01 00 00       	jmp    c00203e1 <Vm::x87Handler(regs*)+0x9b3>
c002027f:	84 d2                	test   dl,dl
c0020281:	75 0d                	jne    c0020290 <Vm::x87Handler(regs*)+0x862>
c0020283:	31 d2                	xor    edx,edx
c0020285:	55                   	push   ebp
c0020286:	55                   	push   ebp
c0020287:	8b 06                	mov    eax,DWORD PTR [esi]
c0020289:	52                   	push   edx
c002028a:	50                   	push   eax
c002028b:	e9 d3 01 00 00       	jmp    c0020463 <Vm::x87Handler(regs*)+0xa35>
c0020290:	31 c0                	xor    eax,eax
c0020292:	80 fa 02             	cmp    dl,0x2
c0020295:	0f 85 f4 01 00 00    	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c002029b:	83 ec 0c             	sub    esp,0xc
c002029e:	6a 00                	push   0x0
c00202a0:	e8 4c f6 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00202a5:	59                   	pop    ecx
c00202a6:	5f                   	pop    edi
c00202a7:	e9 6a f9 ff ff       	jmp    c001fc16 <Vm::x87Handler(regs*)+0x1e8>
c00202ac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202b0:	84 d2                	test   dl,dl
c00202b2:	75 2a                	jne    c00202de <Vm::x87Handler(regs*)+0x8b0>
c00202b4:	50                   	push   eax
c00202b5:	50                   	push   eax
c00202b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202b9:	ff 36                	push   DWORD PTR [esi]
c00202bb:	e8 c5 f3 ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c00202c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202c7:	89 c6                	mov    esi,eax
c00202c9:	89 d7                	mov    edi,edx
c00202cb:	e8 21 f6 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00202d0:	57                   	push   edi
c00202d1:	56                   	push   esi
c00202d2:	52                   	push   edx
c00202d3:	50                   	push   eax
c00202d4:	e8 8e f5 ff ff       	call   c001f867 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202d9:	e9 64 01 00 00       	jmp    c0020442 <Vm::x87Handler(regs*)+0xa14>
c00202de:	80 fa 01             	cmp    dl,0x1
c00202e1:	75 11                	jne    c00202f4 <Vm::x87Handler(regs*)+0x8c6>
c00202e3:	50                   	push   eax
c00202e4:	50                   	push   eax
c00202e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e8:	ff 36                	push   DWORD PTR [esi]
c00202ea:	e8 96 f3 ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c00202ef:	e9 35 01 00 00       	jmp    c0020429 <Vm::x87Handler(regs*)+0x9fb>
c00202f4:	80 fa 02             	cmp    dl,0x2
c00202f7:	0f 85 54 f9 ff ff    	jne    c001fc51 <Vm::x87Handler(regs*)+0x223>
c00202fd:	55                   	push   ebp
c00202fe:	55                   	push   ebp
c00202ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020302:	ff 36                	push   DWORD PTR [esi]
c0020304:	e8 7c f3 ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c0020309:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020310:	89 c6                	mov    esi,eax
c0020312:	89 d7                	mov    edi,edx
c0020314:	e8 d8 f5 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020319:	57                   	push   edi
c002031a:	56                   	push   esi
c002031b:	52                   	push   edx
c002031c:	50                   	push   eax
c002031d:	e8 f2 f4 ff ff       	call   c001f814 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020322:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020326:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020329:	83 c4 20             	add    esp,0x20
c002032c:	e9 74 f7 ff ff       	jmp    c001faa5 <Vm::x87Handler(regs*)+0x77>
c0020331:	80 fa 04             	cmp    dl,0x4
c0020334:	75 2a                	jne    c0020360 <Vm::x87Handler(regs*)+0x932>
c0020336:	51                   	push   ecx
c0020337:	51                   	push   ecx
c0020338:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002033b:	ff 36                	push   DWORD PTR [esi]
c002033d:	e8 43 f3 ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c0020342:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020349:	89 c6                	mov    esi,eax
c002034b:	89 d7                	mov    edi,edx
c002034d:	e8 9f f5 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020352:	57                   	push   edi
c0020353:	56                   	push   esi
c0020354:	52                   	push   edx
c0020355:	50                   	push   eax
c0020356:	e8 36 f5 ff ff       	call   c001f891 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002035b:	e9 e2 00 00 00       	jmp    c0020442 <Vm::x87Handler(regs*)+0xa14>
c0020360:	80 fa 05             	cmp    dl,0x5
c0020363:	75 28                	jne    c002038d <Vm::x87Handler(regs*)+0x95f>
c0020365:	83 ec 0c             	sub    esp,0xc
c0020368:	6a 00                	push   0x0
c002036a:	e8 82 f5 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c002036f:	89 c7                	mov    edi,eax
c0020371:	89 d5                	mov    ebp,edx
c0020373:	58                   	pop    eax
c0020374:	5a                   	pop    edx
c0020375:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020378:	ff 36                	push   DWORD PTR [esi]
c002037a:	e8 06 f3 ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c002037f:	83 c4 10             	add    esp,0x10
c0020382:	55                   	push   ebp
c0020383:	57                   	push   edi
c0020384:	52                   	push   edx
c0020385:	50                   	push   eax
c0020386:	e8 06 f5 ff ff       	call   c001f891 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002038b:	eb 60                	jmp    c00203ed <Vm::x87Handler(regs*)+0x9bf>
c002038d:	80 fa 06             	cmp    dl,0x6
c0020390:	75 2a                	jne    c00203bc <Vm::x87Handler(regs*)+0x98e>
c0020392:	51                   	push   ecx
c0020393:	51                   	push   ecx
c0020394:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020397:	ff 36                	push   DWORD PTR [esi]
c0020399:	e8 e7 f2 ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c002039e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203a5:	89 c6                	mov    esi,eax
c00203a7:	89 d7                	mov    edi,edx
c00203a9:	e8 43 f5 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00203ae:	57                   	push   edi
c00203af:	56                   	push   esi
c00203b0:	52                   	push   edx
c00203b1:	50                   	push   eax
c00203b2:	e8 08 f5 ff ff       	call   c001f8bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203b7:	e9 86 00 00 00       	jmp    c0020442 <Vm::x87Handler(regs*)+0xa14>
c00203bc:	31 c0                	xor    eax,eax
c00203be:	80 fa 07             	cmp    dl,0x7
c00203c1:	0f 85 c8 00 00 00    	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c00203c7:	83 ec 0c             	sub    esp,0xc
c00203ca:	6a 00                	push   0x0
c00203cc:	e8 20 f5 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c00203d1:	89 c7                	mov    edi,eax
c00203d3:	89 d5                	mov    ebp,edx
c00203d5:	58                   	pop    eax
c00203d6:	5a                   	pop    edx
c00203d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203da:	ff 36                	push   DWORD PTR [esi]
c00203dc:	e8 a4 f2 ff ff       	call   c001f685 <Vm::fpu64ToInternal(unsigned long long)>
c00203e1:	83 c4 10             	add    esp,0x10
c00203e4:	55                   	push   ebp
c00203e5:	57                   	push   edi
c00203e6:	52                   	push   edx
c00203e7:	50                   	push   eax
c00203e8:	e8 d2 f4 ff ff       	call   c001f8bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203ed:	83 c4 0c             	add    esp,0xc
c00203f0:	eb 53                	jmp    c0020445 <Vm::x87Handler(regs*)+0xa17>
c00203f2:	31 c0                	xor    eax,eax
c00203f4:	80 fa 02             	cmp    dl,0x2
c00203f7:	0f 85 92 00 00 00    	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c00203fd:	83 ec 0c             	sub    esp,0xc
c0020400:	6a 00                	push   0x0
c0020402:	e8 ea f4 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020407:	59                   	pop    ecx
c0020408:	5f                   	pop    edi
c0020409:	52                   	push   edx
c002040a:	50                   	push   eax
c002040b:	e8 27 f2 ff ff       	call   c001f637 <Vm::fpuInternalTo64(unsigned long long)>
c0020410:	eb 70                	jmp    c0020482 <Vm::x87Handler(regs*)+0xa54>
c0020412:	31 c0                	xor    eax,eax
c0020414:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020419:	75 74                	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c002041b:	50                   	push   eax
c002041c:	50                   	push   eax
c002041d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020420:	31 d2                	xor    edx,edx
c0020422:	52                   	push   edx
c0020423:	50                   	push   eax
c0020424:	e8 f6 f2 ff ff       	call   c001f71f <Vm::fpuLongToFloat(long long)>
c0020429:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020430:	89 c6                	mov    esi,eax
c0020432:	89 d7                	mov    edi,edx
c0020434:	e8 b8 f4 ff ff       	call   c001f8f1 <Vm::fpuGetReg(int)>
c0020439:	57                   	push   edi
c002043a:	56                   	push   esi
c002043b:	52                   	push   edx
c002043c:	50                   	push   eax
c002043d:	e8 5e f4 ff ff       	call   c001f8a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020442:	83 c4 1c             	add    esp,0x1c
c0020445:	52                   	push   edx
c0020446:	50                   	push   eax
c0020447:	6a 00                	push   0x0
c0020449:	e8 e6 f4 ff ff       	call   c001f934 <Vm::fpuSetReg(int, unsigned long long)>
c002044e:	e9 f2 f7 ff ff       	jmp    c001fc45 <Vm::x87Handler(regs*)+0x217>
c0020453:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020457:	80 fa 05             	cmp    dl,0x5
c002045a:	75 11                	jne    c002046d <Vm::x87Handler(regs*)+0xa3f>
c002045c:	55                   	push   ebp
c002045d:	55                   	push   ebp
c002045e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020461:	ff 36                	push   DWORD PTR [esi]
c0020463:	e8 81 f2 ff ff       	call   c001f6e9 <Vm::fpuULongToFloat(unsigned long long)>
c0020468:	e9 cf f7 ff ff       	jmp    c001fc3c <Vm::x87Handler(regs*)+0x20e>
c002046d:	31 c0                	xor    eax,eax
c002046f:	80 fa 07             	cmp    dl,0x7
c0020472:	75 1b                	jne    c002048f <Vm::x87Handler(regs*)+0xa61>
c0020474:	e8 63 f5 ff ff       	call   c001f9dc <Vm::fpuPop()>
c0020479:	51                   	push   ecx
c002047a:	51                   	push   ecx
c002047b:	52                   	push   edx
c002047c:	50                   	push   eax
c002047d:	e8 0c f2 ff ff       	call   c001f68e <Vm::fpuFloatToLong(unsigned long long)>
c0020482:	83 c4 10             	add    esp,0x10
c0020485:	89 06                	mov    DWORD PTR [esi],eax
c0020487:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002048a:	e9 f8 f7 ff ff       	jmp    c001fc87 <Vm::x87Handler(regs*)+0x259>
c002048f:	83 c4 1c             	add    esp,0x1c
c0020492:	5b                   	pop    ebx
c0020493:	5e                   	pop    esi
c0020494:	5f                   	pop    edi
c0020495:	5d                   	pop    ebp
c0020496:	c3                   	ret    

c0020497 <__static_initialization_and_destruction_0(int, int)>:
c0020497:	83 ec 0c             	sub    esp,0xc
c002049a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002049f:	75 1a                	jne    c00204bb <__static_initialization_and_destruction_0(int, int)+0x24>
c00204a1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204a9:	75 10                	jne    c00204bb <__static_initialization_and_destruction_0(int, int)+0x24>
c00204ab:	83 ec 0c             	sub    esp,0xc
c00204ae:	68 c0 19 03 c0       	push   0xc00319c0
c00204b3:	e8 18 88 00 00       	call   c0028cd0 <Vm::_FPUState::_FPUState()>
c00204b8:	83 c4 10             	add    esp,0x10
c00204bb:	90                   	nop
c00204bc:	83 c4 0c             	add    esp,0xc
c00204bf:	c3                   	ret    

c00204c0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204c0:	83 ec 0c             	sub    esp,0xc
c00204c3:	83 ec 08             	sub    esp,0x8
c00204c6:	68 ff ff 00 00       	push   0xffff
c00204cb:	6a 01                	push   0x1
c00204cd:	e8 c5 ff ff ff       	call   c0020497 <__static_initialization_and_destruction_0(int, int)>
c00204d2:	83 c4 10             	add    esp,0x10
c00204d5:	83 c4 0c             	add    esp,0xc
c00204d8:	c3                   	ret    
c00204d9:	90                   	nop

c00204da <FAT::getName()>:
c00204da:	b8 c8 c7 02 c0       	mov    eax,0xc002c7c8
c00204df:	c3                   	ret    

c00204e0 <FAT::tell(void*, unsigned long long*)>:
c00204e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00204e5:	75 06                	jne    c00204ed <FAT::tell(void*, unsigned long long*)+0xd>
c00204e7:	b8 04 00 00 00       	mov    eax,0x4
c00204ec:	c3                   	ret    
c00204ed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204f2:	75 06                	jne    c00204fa <FAT::tell(void*, unsigned long long*)+0x1a>
c00204f4:	b8 04 00 00 00       	mov    eax,0x4
c00204f9:	c3                   	ret    
c00204fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204fe:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020501:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020508:	89 01                	mov    DWORD PTR [ecx],eax
c002050a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002050d:	b8 00 00 00 00       	mov    eax,0x0
c0020512:	c3                   	ret    
c0020513:	90                   	nop

c0020514 <FAT::stat(void*, unsigned long long*)>:
c0020514:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020519:	75 06                	jne    c0020521 <FAT::stat(void*, unsigned long long*)+0xd>
c002051b:	b8 04 00 00 00       	mov    eax,0x4
c0020520:	c3                   	ret    
c0020521:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020526:	75 06                	jne    c002052e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020528:	b8 04 00 00 00       	mov    eax,0x4
c002052d:	c3                   	ret    
c002052e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020532:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020535:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020538:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002053c:	89 01                	mov    DWORD PTR [ecx],eax
c002053e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020541:	b8 00 00 00 00       	mov    eax,0x0
c0020546:	c3                   	ret    
c0020547:	90                   	nop

c0020548 <FAT::~FAT()>:
c0020548:	83 ec 0c             	sub    esp,0xc
c002054b:	ba 4c c8 02 c0       	mov    edx,0xc002c84c
c0020550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020554:	89 10                	mov    DWORD PTR [eax],edx
c0020556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002055a:	83 ec 0c             	sub    esp,0xc
c002055d:	50                   	push   eax
c002055e:	e8 99 2c ff ff       	call   c00131fc <Filesystem::~Filesystem()>
c0020563:	83 c4 10             	add    esp,0x10
c0020566:	90                   	nop
c0020567:	83 c4 0c             	add    esp,0xc
c002056a:	c3                   	ret    
c002056b:	90                   	nop

c002056c <FAT::~FAT()>:
c002056c:	83 ec 0c             	sub    esp,0xc
c002056f:	83 ec 0c             	sub    esp,0xc
c0020572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020576:	e8 cd ff ff ff       	call   c0020548 <FAT::~FAT()>
c002057b:	83 c4 10             	add    esp,0x10
c002057e:	83 ec 08             	sub    esp,0x8
c0020581:	6a 08                	push   0x8
c0020583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020587:	e8 68 28 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c002058c:	83 c4 10             	add    esp,0x10
c002058f:	83 c4 0c             	add    esp,0xc
c0020592:	c3                   	ret    
c0020593:	90                   	nop

c0020594 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020594:	83 ec 1c             	sub    esp,0x1c
c0020597:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002059e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205a7:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c00205ae:	83 f8 ff             	cmp    eax,0xffffffff
c00205b1:	75 34                	jne    c00205e7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205b7:	88 c2                	mov    dl,al
c00205b9:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c00205be:	01 d0                	add    eax,edx
c00205c0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205c4:	8b 15 20 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a20
c00205ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205ce:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c00205d5:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c00205da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00205de:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c00205e5:	eb 17                	jmp    c00205fe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00205e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205eb:	88 c2                	mov    dl,al
c00205ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205f1:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c00205f8:	01 d0                	add    eax,edx
c00205fa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205fe:	83 ec 04             	sub    esp,0x4
c0020601:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020605:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020609:	8d 44 24 15          	lea    eax,[esp+0x15]
c002060d:	50                   	push   eax
c002060e:	e8 25 67 fe ff       	call   c0006d38 <f_getlabel>
c0020613:	83 c4 10             	add    esp,0x10
c0020616:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002061a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002061f:	75 07                	jne    c0020628 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020621:	b8 00 00 00 00       	mov    eax,0x0
c0020626:	eb 05                	jmp    c002062d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020628:	b8 01 00 00 00       	mov    eax,0x1
c002062d:	83 c4 1c             	add    esp,0x1c
c0020630:	c3                   	ret    
c0020631:	90                   	nop

c0020632 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020632:	57                   	push   edi
c0020633:	83 ec 58             	sub    esp,0x58
c0020636:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002063e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020642:	b9 0f 00 00 00       	mov    ecx,0xf
c0020647:	b8 00 00 00 00       	mov    eax,0x0
c002064c:	fc                   	cld    
c002064d:	89 d7                	mov    edi,edx
c002064f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020651:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020655:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c002065c:	83 f8 ff             	cmp    eax,0xffffffff
c002065f:	75 34                	jne    c0020695 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020661:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020665:	88 c2                	mov    dl,al
c0020667:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002066c:	01 d0                	add    eax,edx
c002066e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020672:	8b 15 20 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a20
c0020678:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002067c:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0020683:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c0020688:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002068c:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020693:	eb 17                	jmp    c00206ac <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020695:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020699:	88 c2                	mov    dl,al
c002069b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002069f:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c00206a6:	01 d0                	add    eax,edx
c00206a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ac:	83 ec 08             	sub    esp,0x8
c00206af:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206b7:	50                   	push   eax
c00206b8:	e8 b7 02 fe ff       	call   c0000974 <strcat>
c00206bd:	83 c4 10             	add    esp,0x10
c00206c0:	83 ec 0c             	sub    esp,0xc
c00206c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206c7:	50                   	push   eax
c00206c8:	e8 59 68 fe ff       	call   c0006f26 <f_setlabel>
c00206cd:	83 c4 10             	add    esp,0x10
c00206d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00206d4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00206d9:	75 07                	jne    c00206e2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00206db:	b8 00 00 00 00       	mov    eax,0x0
c00206e0:	eb 05                	jmp    c00206e7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00206e2:	b8 01 00 00 00       	mov    eax,0x1
c00206e7:	83 c4 58             	add    esp,0x58
c00206ea:	5f                   	pop    edi
c00206eb:	c3                   	ret    

c00206ec <FAT::format(LogicalDisk*, int, char const*, int)>:
c00206ec:	83 ec 2c             	sub    esp,0x2c
c00206ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00206f7:	83 ec 08             	sub    esp,0x8
c00206fa:	68 ec c7 02 c0       	push   0xc002c7ec
c00206ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020703:	e8 b8 01 fe ff       	call   c00008c0 <strcmp>
c0020708:	83 c4 10             	add    esp,0x10
c002070b:	85 c0                	test   eax,eax
c002070d:	0f 94 c0             	sete   al
c0020710:	84 c0                	test   al,al
c0020712:	74 0d                	je     c0020721 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020714:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002071c:	e9 a6 00 00 00       	jmp    c00207c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020721:	83 ec 08             	sub    esp,0x8
c0020724:	68 de c7 02 c0       	push   0xc002c7de
c0020729:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002072d:	e8 8e 01 fe ff       	call   c00008c0 <strcmp>
c0020732:	83 c4 10             	add    esp,0x10
c0020735:	85 c0                	test   eax,eax
c0020737:	0f 94 c0             	sete   al
c002073a:	84 c0                	test   al,al
c002073c:	74 0a                	je     c0020748 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002073e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020746:	eb 7f                	jmp    c00207c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020748:	83 ec 08             	sub    esp,0x8
c002074b:	68 e4 c7 02 c0       	push   0xc002c7e4
c0020750:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020754:	e8 67 01 fe ff       	call   c00008c0 <strcmp>
c0020759:	83 c4 10             	add    esp,0x10
c002075c:	85 c0                	test   eax,eax
c002075e:	0f 94 c0             	sete   al
c0020761:	84 c0                	test   al,al
c0020763:	74 0a                	je     c002076f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020765:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002076d:	eb 58                	jmp    c00207c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002076f:	83 ec 08             	sub    esp,0x8
c0020772:	68 2c 94 02 c0       	push   0xc002942c
c0020777:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002077b:	e8 40 01 fe ff       	call   c00008c0 <strcmp>
c0020780:	83 c4 10             	add    esp,0x10
c0020783:	85 c0                	test   eax,eax
c0020785:	0f 94 c0             	sete   al
c0020788:	84 c0                	test   al,al
c002078a:	74 0a                	je     c0020796 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002078c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020794:	eb 31                	jmp    c00207c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020796:	83 ec 08             	sub    esp,0x8
c0020799:	68 ea c7 02 c0       	push   0xc002c7ea
c002079e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207a2:	e8 19 01 fe ff       	call   c00008c0 <strcmp>
c00207a7:	83 c4 10             	add    esp,0x10
c00207aa:	85 c0                	test   eax,eax
c00207ac:	0f 94 c0             	sete   al
c00207af:	84 c0                	test   al,al
c00207b1:	74 0a                	je     c00207bd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207b3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207bb:	eb 0a                	jmp    c00207c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207bd:	b8 08 00 00 00       	mov    eax,0x8
c00207c2:	e9 04 01 00 00       	jmp    c00208cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207c7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00207ce:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00207d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207d7:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c00207de:	83 f8 ff             	cmp    eax,0xffffffff
c00207e1:	75 34                	jne    c0020817 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00207e3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00207e7:	88 c2                	mov    dl,al
c00207e9:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c00207ee:	01 d0                	add    eax,edx
c00207f0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207f4:	8b 15 20 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a20
c00207fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207fe:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0020805:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002080a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002080e:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020815:	eb 17                	jmp    c002082e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020817:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002081b:	88 c2                	mov    dl,al
c002081d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020821:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c0020828:	01 d0                	add    eax,edx
c002082a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002082e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020832:	88 04 24             	mov    BYTE PTR [esp],al
c0020835:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002083d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020845:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002084a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020852:	83 ec 0c             	sub    esp,0xc
c0020855:	68 00 20 00 00       	push   0x2000
c002085a:	e8 e1 ef fe ff       	call   c000f840 <malloc>
c002085f:	83 c4 10             	add    esp,0x10
c0020862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020866:	68 00 20 00 00       	push   0x2000
c002086b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002086f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020873:	50                   	push   eax
c0020874:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020878:	50                   	push   eax
c0020879:	e8 f3 6a fe ff       	call   c0007371 <f_mkfs>
c002087e:	83 c4 10             	add    esp,0x10
c0020881:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020885:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002088a:	75 07                	jne    c0020893 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002088c:	b8 00 00 00 00       	mov    eax,0x0
c0020891:	eb 38                	jmp    c00208cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020893:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020898:	75 17                	jne    c00208b1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002089a:	83 ec 0c             	sub    esp,0xc
c002089d:	68 1c c8 02 c0       	push   0xc002c81c
c00208a2:	e8 2d 26 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00208a7:	83 c4 10             	add    esp,0x10
c00208aa:	b8 09 00 00 00       	mov    eax,0x9
c00208af:	eb 1a                	jmp    c00208cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208b5:	83 ec 08             	sub    esp,0x8
c00208b8:	50                   	push   eax
c00208b9:	68 f0 c7 02 c0       	push   0xc002c7f0
c00208be:	e8 11 26 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00208c3:	83 c4 10             	add    esp,0x10
c00208c6:	b8 01 00 00 00       	mov    eax,0x1
c00208cb:	83 c4 2c             	add    esp,0x2c
c00208ce:	c3                   	ret    
c00208cf:	90                   	nop

c00208d0 <FAT::tryMount(LogicalDisk*, int)>:
c00208d0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00208d6:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c00208db:	83 f8 14             	cmp    eax,0x14
c00208de:	75 17                	jne    c00208f7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00208e0:	83 ec 0c             	sub    esp,0xc
c00208e3:	68 02 c8 02 c0       	push   0xc002c802
c00208e8:	e8 88 9c ff ff       	call   c001a575 <Krnl::panic(char const*)>
c00208ed:	83 c4 10             	add    esp,0x10
c00208f0:	b0 00                	mov    al,0x0
c00208f2:	e9 d7 01 00 00       	jmp    c0020ace <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208f7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00208fe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020904:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002090a:	3d 00 02 00 00       	cmp    eax,0x200
c002090f:	74 07                	je     c0020918 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020911:	b0 00                	mov    al,0x0
c0020913:	e9 b6 01 00 00       	jmp    c0020ace <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020918:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020920:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020927:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c002092e:	83 f8 ff             	cmp    eax,0xffffffff
c0020931:	74 07                	je     c002093a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020933:	b0 01                	mov    al,0x1
c0020935:	e9 94 01 00 00       	jmp    c0020ace <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002093a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020944:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002094c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020953:	88 c2                	mov    dl,al
c0020955:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002095a:	01 d0                	add    eax,edx
c002095c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020963:	8b 15 20 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a20
c0020969:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020970:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0020977:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c002097c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020983:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c002098a:	83 ec 0c             	sub    esp,0xc
c002098d:	68 54 02 00 00       	push   0x254
c0020992:	e8 a9 ee fe ff       	call   c000f840 <malloc>
c0020997:	83 c4 10             	add    esp,0x10
c002099a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209a1:	83 ec 04             	sub    esp,0x4
c00209a4:	6a 00                	push   0x0
c00209a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209ad:	50                   	push   eax
c00209ae:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209b5:	e8 75 45 fe ff       	call   c0004f2f <f_mount>
c00209ba:	83 c4 10             	add    esp,0x10
c00209bd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209c4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00209cc:	74 19                	je     c00209e7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00209ce:	83 ec 0c             	sub    esp,0xc
c00209d1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209d8:	e8 83 ee fe ff       	call   c000f860 <rfree>
c00209dd:	83 c4 10             	add    esp,0x10
c00209e0:	b0 00                	mov    al,0x0
c00209e2:	e9 e7 00 00 00       	jmp    c0020ace <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209e7:	83 ec 04             	sub    esp,0x4
c00209ea:	68 00 01 00 00       	push   0x100
c00209ef:	6a 00                	push   0x0
c00209f1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209f8:	50                   	push   eax
c00209f9:	e8 7a fd fd ff       	call   c0000778 <memset>
c00209fe:	83 c4 10             	add    esp,0x10
c0020a01:	83 ec 08             	sub    esp,0x8
c0020a04:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a0b:	50                   	push   eax
c0020a0c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a13:	50                   	push   eax
c0020a14:	e8 5b ff fd ff       	call   c0000974 <strcat>
c0020a19:	83 c4 10             	add    esp,0x10
c0020a1c:	83 ec 08             	sub    esp,0x8
c0020a1f:	68 10 c8 02 c0       	push   0xc002c810
c0020a24:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a2b:	50                   	push   eax
c0020a2c:	e8 43 ff fd ff       	call   c0000974 <strcat>
c0020a31:	83 c4 10             	add    esp,0x10
c0020a34:	83 ec 04             	sub    esp,0x4
c0020a37:	6a 01                	push   0x1
c0020a39:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a40:	50                   	push   eax
c0020a41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a45:	50                   	push   eax
c0020a46:	e8 46 45 fe ff       	call   c0004f91 <f_open>
c0020a4b:	83 c4 10             	add    esp,0x10
c0020a4e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a55:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a5c:	85 c0                	test   eax,eax
c0020a5e:	74 0a                	je     c0020a6a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a60:	78 2d                	js     c0020a8f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a62:	83 e8 04             	sub    eax,0x4
c0020a65:	83 f8 01             	cmp    eax,0x1
c0020a68:	77 25                	ja     c0020a8f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a6a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020a72:	83 ec 0c             	sub    esp,0xc
c0020a75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a79:	50                   	push   eax
c0020a7a:	e8 64 50 fe ff       	call   c0005ae3 <f_close>
c0020a7f:	83 c4 10             	add    esp,0x10
c0020a82:	90                   	nop
c0020a83:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020a8b:	74 3a                	je     c0020ac7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020a8d:	eb 2d                	jmp    c0020abc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020a8f:	83 ec 0c             	sub    esp,0xc
c0020a92:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a99:	e8 c2 ed fe ff       	call   c000f860 <rfree>
c0020a9e:	83 c4 10             	add    esp,0x10
c0020aa1:	83 ec 04             	sub    esp,0x4
c0020aa4:	6a 00                	push   0x0
c0020aa6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aad:	50                   	push   eax
c0020aae:	6a 00                	push   0x0
c0020ab0:	e8 7a 44 fe ff       	call   c0004f2f <f_mount>
c0020ab5:	83 c4 10             	add    esp,0x10
c0020ab8:	b0 00                	mov    al,0x0
c0020aba:	eb 12                	jmp    c0020ace <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020abc:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c0020ac1:	40                   	inc    eax
c0020ac2:	a3 20 1a 03 c0       	mov    ds:0xc0031a20,eax
c0020ac7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020ace:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020ad4:	c3                   	ret    
c0020ad5:	90                   	nop

c0020ad6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020ad6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020adc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020ae4:	74 0a                	je     c0020af0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020ae6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020aee:	75 0a                	jne    c0020afa <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020af0:	b8 04 00 00 00       	mov    eax,0x4
c0020af5:	e9 db 00 00 00       	jmp    c0020bd5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020afa:	83 ec 08             	sub    esp,0x8
c0020afd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b04:	50                   	push   eax
c0020b05:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b0c:	e8 dc 55 fe ff       	call   c00060ed <f_readdir>
c0020b11:	83 c4 10             	add    esp,0x10
c0020b14:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b1b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b21:	83 ec 0c             	sub    esp,0xc
c0020b24:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b2b:	83 c0 1a             	add    eax,0x1a
c0020b2e:	50                   	push   eax
c0020b2f:	e8 60 fc fd ff       	call   c0000794 <strlen>
c0020b34:	83 c4 10             	add    esp,0x10
c0020b37:	ba 00 00 00 00       	mov    edx,0x0
c0020b3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b40:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b44:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b4b:	0f b6 c0             	movzx  eax,al
c0020b4e:	83 e0 10             	and    eax,0x10
c0020b51:	74 07                	je     c0020b5a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b53:	b8 02 00 00 00       	mov    eax,0x2
c0020b58:	eb 05                	jmp    c0020b5f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b5a:	b8 01 00 00 00       	mov    eax,0x1
c0020b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b63:	83 ec 08             	sub    esp,0x8
c0020b66:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b6d:	83 c0 1a             	add    eax,0x1a
c0020b70:	50                   	push   eax
c0020b71:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b75:	83 c0 10             	add    eax,0x10
c0020b78:	50                   	push   eax
c0020b79:	e8 b6 fc fd ff       	call   c0000834 <strcpy>
c0020b7e:	83 c4 10             	add    esp,0x10
c0020b81:	83 ec 04             	sub    esp,0x4
c0020b84:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020b8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b8f:	50                   	push   eax
c0020b90:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020b97:	e8 a8 fb fd ff       	call   c0000744 <memcpy>
c0020b9c:	83 c4 10             	add    esp,0x10
c0020b9f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ba6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bac:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bb3:	84 c0                	test   al,al
c0020bb5:	75 07                	jne    c0020bbe <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bb7:	b8 07 00 00 00       	mov    eax,0x7
c0020bbc:	eb 17                	jmp    c0020bd5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bbe:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020bc5:	85 c0                	test   eax,eax
c0020bc7:	75 07                	jne    c0020bd0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020bc9:	b8 00 00 00 00       	mov    eax,0x0
c0020bce:	eb 05                	jmp    c0020bd5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bd0:	b8 01 00 00 00       	mov    eax,0x1
c0020bd5:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020bdb:	c3                   	ret    

c0020bdc <FAT::read(void*, unsigned long, void*, int*)>:
c0020bdc:	83 ec 1c             	sub    esp,0x1c
c0020bdf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020be4:	74 07                	je     c0020bed <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020be6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020beb:	75 07                	jne    c0020bf4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020bed:	b8 04 00 00 00       	mov    eax,0x4
c0020bf2:	eb 3d                	jmp    c0020c31 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020bf4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bf8:	50                   	push   eax
c0020bf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020bfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c05:	e8 c3 47 fe ff       	call   c00053cd <f_read>
c0020c0a:	83 c4 10             	add    esp,0x10
c0020c0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c15:	89 c2                	mov    edx,eax
c0020c17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c1b:	89 10                	mov    DWORD PTR [eax],edx
c0020c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c21:	85 c0                	test   eax,eax
c0020c23:	75 07                	jne    c0020c2c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c25:	b8 00 00 00 00       	mov    eax,0x0
c0020c2a:	eb 05                	jmp    c0020c31 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c2c:	b8 01 00 00 00       	mov    eax,0x1
c0020c31:	83 c4 1c             	add    esp,0x1c
c0020c34:	c3                   	ret    
c0020c35:	90                   	nop

c0020c36 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c36:	83 ec 1c             	sub    esp,0x1c
c0020c39:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c3e:	74 07                	je     c0020c47 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c40:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c45:	75 07                	jne    c0020c4e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c47:	b8 04 00 00 00       	mov    eax,0x4
c0020c4c:	eb 3d                	jmp    c0020c8b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c4e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c52:	50                   	push   eax
c0020c53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c5b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c5f:	e8 e9 49 fe ff       	call   c000564d <f_write>
c0020c64:	83 c4 10             	add    esp,0x10
c0020c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c6f:	89 c2                	mov    edx,eax
c0020c71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c75:	89 10                	mov    DWORD PTR [eax],edx
c0020c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c7b:	85 c0                	test   eax,eax
c0020c7d:	75 07                	jne    c0020c86 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c7f:	b8 00 00 00 00       	mov    eax,0x0
c0020c84:	eb 05                	jmp    c0020c8b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c86:	b8 01 00 00 00       	mov    eax,0x1
c0020c8b:	83 c4 1c             	add    esp,0x1c
c0020c8e:	c3                   	ret    
c0020c8f:	90                   	nop

c0020c90 <FAT::close(void*)>:
c0020c90:	83 ec 1c             	sub    esp,0x1c
c0020c93:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c98:	75 07                	jne    c0020ca1 <FAT::close(void*)+0x11>
c0020c9a:	b8 04 00 00 00       	mov    eax,0x4
c0020c9f:	eb 36                	jmp    c0020cd7 <FAT::close(void*)+0x47>
c0020ca1:	83 ec 0c             	sub    esp,0xc
c0020ca4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ca8:	e8 36 4e fe ff       	call   c0005ae3 <f_close>
c0020cad:	83 c4 10             	add    esp,0x10
c0020cb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cb4:	83 ec 0c             	sub    esp,0xc
c0020cb7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cbb:	e8 90 eb fe ff       	call   c000f850 <free>
c0020cc0:	83 c4 10             	add    esp,0x10
c0020cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cc7:	85 c0                	test   eax,eax
c0020cc9:	75 07                	jne    c0020cd2 <FAT::close(void*)+0x42>
c0020ccb:	b8 00 00 00 00       	mov    eax,0x0
c0020cd0:	eb 05                	jmp    c0020cd7 <FAT::close(void*)+0x47>
c0020cd2:	b8 01 00 00 00       	mov    eax,0x1
c0020cd7:	83 c4 1c             	add    esp,0x1c
c0020cda:	c3                   	ret    
c0020cdb:	90                   	nop

c0020cdc <FAT::closeDir(void*)>:
c0020cdc:	83 ec 1c             	sub    esp,0x1c
c0020cdf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ce4:	75 07                	jne    c0020ced <FAT::closeDir(void*)+0x11>
c0020ce6:	b8 04 00 00 00       	mov    eax,0x4
c0020ceb:	eb 36                	jmp    c0020d23 <FAT::closeDir(void*)+0x47>
c0020ced:	83 ec 0c             	sub    esp,0xc
c0020cf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf4:	e8 d2 53 fe ff       	call   c00060cb <f_closedir>
c0020cf9:	83 c4 10             	add    esp,0x10
c0020cfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d00:	83 ec 0c             	sub    esp,0xc
c0020d03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d07:	e8 44 eb fe ff       	call   c000f850 <free>
c0020d0c:	83 c4 10             	add    esp,0x10
c0020d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d13:	85 c0                	test   eax,eax
c0020d15:	75 07                	jne    c0020d1e <FAT::closeDir(void*)+0x42>
c0020d17:	b8 00 00 00 00       	mov    eax,0x0
c0020d1c:	eb 05                	jmp    c0020d23 <FAT::closeDir(void*)+0x47>
c0020d1e:	b8 01 00 00 00       	mov    eax,0x1
c0020d23:	83 c4 1c             	add    esp,0x1c
c0020d26:	c3                   	ret    
c0020d27:	90                   	nop

c0020d28 <FAT::seek(void*, unsigned long long)>:
c0020d28:	83 ec 2c             	sub    esp,0x2c
c0020d2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d3b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d40:	75 07                	jne    c0020d49 <FAT::seek(void*, unsigned long long)+0x21>
c0020d42:	b8 04 00 00 00       	mov    eax,0x4
c0020d47:	eb 2f                	jmp    c0020d78 <FAT::seek(void*, unsigned long long)+0x50>
c0020d49:	83 ec 04             	sub    esp,0x4
c0020d4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d58:	e8 b5 4d fe ff       	call   c0005b12 <f_lseek>
c0020d5d:	83 c4 10             	add    esp,0x10
c0020d60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d68:	85 c0                	test   eax,eax
c0020d6a:	75 07                	jne    c0020d73 <FAT::seek(void*, unsigned long long)+0x4b>
c0020d6c:	b8 00 00 00 00       	mov    eax,0x0
c0020d71:	eb 05                	jmp    c0020d78 <FAT::seek(void*, unsigned long long)+0x50>
c0020d73:	b8 01 00 00 00       	mov    eax,0x1
c0020d78:	83 c4 2c             	add    esp,0x2c
c0020d7b:	c3                   	ret    

c0020d7c <fatWrapperReadDisk>:
c0020d7c:	83 ec 1c             	sub    esp,0x1c
c0020d7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d9b:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020da2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020da6:	83 ec 0c             	sub    esp,0xc
c0020da9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dad:	52                   	push   edx
c0020dae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020db2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020db6:	50                   	push   eax
c0020db7:	e8 28 59 ff ff       	call   c00166e4 <LogicalDisk::read(unsigned long long, int, void*)>
c0020dbc:	83 c4 20             	add    esp,0x20
c0020dbf:	83 c4 1c             	add    esp,0x1c
c0020dc2:	c3                   	ret    

c0020dc3 <fatWrapperWriteDisk>:
c0020dc3:	83 ec 1c             	sub    esp,0x1c
c0020dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ddd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020de2:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020de9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ded:	83 ec 0c             	sub    esp,0xc
c0020df0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020df4:	52                   	push   edx
c0020df5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dfd:	50                   	push   eax
c0020dfe:	e8 4d 59 ff ff       	call   c0016750 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e03:	83 c4 20             	add    esp,0x20
c0020e06:	83 c4 1c             	add    esp,0x1c
c0020e09:	c3                   	ret    

c0020e0a <fatWrapperIoctl>:
c0020e0a:	53                   	push   ebx
c0020e0b:	83 ec 28             	sub    esp,0x28
c0020e0e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e16:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e1e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e23:	75 31                	jne    c0020e56 <fatWrapperIoctl+0x4c>
c0020e25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e2d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e32:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020e39:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e3f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e49:	66 89 02             	mov    WORD PTR [edx],ax
c0020e4c:	b8 00 00 00 00       	mov    eax,0x0
c0020e51:	e9 b2 00 00 00       	jmp    c0020f08 <fatWrapperIoctl+0xfe>
c0020e56:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e5b:	75 6a                	jne    c0020ec7 <fatWrapperIoctl+0xbd>
c0020e5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e65:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e6a:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020e71:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e77:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e7d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020e83:	89 c8                	mov    eax,ecx
c0020e85:	89 da                	mov    edx,ebx
c0020e87:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020e8b:	c1 e0 0a             	shl    eax,0xa
c0020e8e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e93:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0020e9a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ea0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ea6:	89 cb                	mov    ebx,ecx
c0020ea8:	c1 fb 1f             	sar    ebx,0x1f
c0020eab:	53                   	push   ebx
c0020eac:	51                   	push   ecx
c0020ead:	52                   	push   edx
c0020eae:	50                   	push   eax
c0020eaf:	e8 c8 5a 00 00       	call   c002697c <__udivdi3>
c0020eb4:	83 c4 10             	add    esp,0x10
c0020eb7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ebb:	89 01                	mov    DWORD PTR [ecx],eax
c0020ebd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ec0:	b8 00 00 00 00       	mov    eax,0x0
c0020ec5:	eb 41                	jmp    c0020f08 <fatWrapperIoctl+0xfe>
c0020ec7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ecc:	75 07                	jne    c0020ed5 <fatWrapperIoctl+0xcb>
c0020ece:	b8 00 00 00 00       	mov    eax,0x0
c0020ed3:	eb 33                	jmp    c0020f08 <fatWrapperIoctl+0xfe>
c0020ed5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020eda:	75 19                	jne    c0020ef5 <fatWrapperIoctl+0xeb>
c0020edc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ee0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ee4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ee8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020eee:	b8 00 00 00 00       	mov    eax,0x0
c0020ef3:	eb 13                	jmp    c0020f08 <fatWrapperIoctl+0xfe>
c0020ef5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020efa:	75 07                	jne    c0020f03 <fatWrapperIoctl+0xf9>
c0020efc:	b8 00 00 00 00       	mov    eax,0x0
c0020f01:	eb 05                	jmp    c0020f08 <fatWrapperIoctl+0xfe>
c0020f03:	b8 04 00 00 00       	mov    eax,0x4
c0020f08:	83 c4 28             	add    esp,0x28
c0020f0b:	5b                   	pop    ebx
c0020f0c:	c3                   	ret    
c0020f0d:	90                   	nop

c0020f0e <FAT::FAT()>:
c0020f0e:	83 ec 1c             	sub    esp,0x1c
c0020f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f15:	83 ec 0c             	sub    esp,0xc
c0020f18:	50                   	push   eax
c0020f19:	e8 ba 22 ff ff       	call   c00131d8 <Filesystem::Filesystem()>
c0020f1e:	83 c4 10             	add    esp,0x10
c0020f21:	ba 4c c8 02 c0       	mov    edx,0xc002c84c
c0020f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f2a:	89 10                	mov    DWORD PTR [eax],edx
c0020f2c:	c7 05 20 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a20,0x0
c0020f36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f3e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f43:	7f 15                	jg     c0020f5a <FAT::FAT()+0x4c>
c0020f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f49:	c7 04 85 40 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce5c0],0xffffffff
c0020f54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f58:	eb e4                	jmp    c0020f3e <FAT::FAT()+0x30>
c0020f5a:	90                   	nop
c0020f5b:	83 c4 1c             	add    esp,0x1c
c0020f5e:	c3                   	ret    
c0020f5f:	90                   	nop

c0020f60 <FAT::fixFilepath(char*)>:
c0020f60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f64:	8a 00                	mov    al,BYTE PTR [eax]
c0020f66:	3c 40                	cmp    al,0x40
c0020f68:	7e 2c                	jle    c0020f96 <FAT::fixFilepath(char*)+0x36>
c0020f6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f6e:	8a 00                	mov    al,BYTE PTR [eax]
c0020f70:	83 e8 41             	sub    eax,0x41
c0020f73:	88 c2                	mov    dl,al
c0020f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f79:	88 10                	mov    BYTE PTR [eax],dl
c0020f7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f7f:	8a 00                	mov    al,BYTE PTR [eax]
c0020f81:	0f be c0             	movsx  eax,al
c0020f84:	8b 04 85 40 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5c0]
c0020f8b:	83 c0 30             	add    eax,0x30
c0020f8e:	88 c2                	mov    dl,al
c0020f90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f94:	88 10                	mov    BYTE PTR [eax],dl
c0020f96:	90                   	nop
c0020f97:	c3                   	ret    

c0020f98 <FAT::open(char const*, void**, FileOpenMode)>:
c0020f98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f9e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fa6:	74 0a                	je     c0020fb2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fa8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fb0:	75 0a                	jne    c0020fbc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fb2:	b8 04 00 00 00       	mov    eax,0x4
c0020fb7:	e9 fd 00 00 00       	jmp    c00210b9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fbc:	83 ec 08             	sub    esp,0x8
c0020fbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fca:	50                   	push   eax
c0020fcb:	e8 64 f8 fd ff       	call   c0000834 <strcpy>
c0020fd0:	83 c4 10             	add    esp,0x10
c0020fd3:	83 ec 08             	sub    esp,0x8
c0020fd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020fda:	50                   	push   eax
c0020fdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fe2:	e8 79 ff ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c0020fe7:	83 c4 10             	add    esp,0x10
c0020fea:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ff2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ff9:	83 e0 01             	and    eax,0x1
c0020ffc:	74 08                	je     c0021006 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020ffe:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021006:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002100d:	83 e0 04             	and    eax,0x4
c0021010:	74 10                	je     c0021022 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021012:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002101a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021022:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021029:	83 e0 02             	and    eax,0x2
c002102c:	74 08                	je     c0021036 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002102e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021036:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002103d:	83 e0 08             	and    eax,0x8
c0021040:	74 08                	je     c002104a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021042:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002104a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021051:	83 e0 10             	and    eax,0x10
c0021054:	74 08                	je     c002105e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021056:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002105e:	83 ec 0c             	sub    esp,0xc
c0021061:	68 50 02 00 00       	push   0x250
c0021066:	e8 d5 e7 fe ff       	call   c000f840 <malloc>
c002106b:	83 c4 10             	add    esp,0x10
c002106e:	89 c2                	mov    edx,eax
c0021070:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021077:	89 10                	mov    DWORD PTR [eax],edx
c0021079:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021081:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021088:	8b 00                	mov    eax,DWORD PTR [eax]
c002108a:	83 ec 04             	sub    esp,0x4
c002108d:	52                   	push   edx
c002108e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021092:	52                   	push   edx
c0021093:	50                   	push   eax
c0021094:	e8 f8 3e fe ff       	call   c0004f91 <f_open>
c0021099:	83 c4 10             	add    esp,0x10
c002109c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210a3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210ab:	74 07                	je     c00210b4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210ad:	b8 01 00 00 00       	mov    eax,0x1
c00210b2:	eb 05                	jmp    c00210b9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210b4:	b8 00 00 00 00       	mov    eax,0x0
c00210b9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210bf:	c3                   	ret    

c00210c0 <FAT::openDir(char const*, void**)>:
c00210c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210ce:	74 0a                	je     c00210da <FAT::openDir(char const*, void**)+0x1a>
c00210d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210d8:	75 07                	jne    c00210e1 <FAT::openDir(char const*, void**)+0x21>
c00210da:	b8 04 00 00 00       	mov    eax,0x4
c00210df:	eb 7d                	jmp    c002115e <FAT::openDir(char const*, void**)+0x9e>
c00210e1:	83 ec 08             	sub    esp,0x8
c00210e4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210ef:	50                   	push   eax
c00210f0:	e8 3f f7 fd ff       	call   c0000834 <strcpy>
c00210f5:	83 c4 10             	add    esp,0x10
c00210f8:	83 ec 08             	sub    esp,0x8
c00210fb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210ff:	50                   	push   eax
c0021100:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021107:	e8 54 fe ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c002110c:	83 c4 10             	add    esp,0x10
c002110f:	83 ec 0c             	sub    esp,0xc
c0021112:	6a 4c                	push   0x4c
c0021114:	e8 27 e7 fe ff       	call   c000f840 <malloc>
c0021119:	83 c4 10             	add    esp,0x10
c002111c:	89 c2                	mov    edx,eax
c002111e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021125:	89 10                	mov    DWORD PTR [eax],edx
c0021127:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002112e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021130:	83 ec 08             	sub    esp,0x8
c0021133:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021137:	52                   	push   edx
c0021138:	50                   	push   eax
c0021139:	e8 8b 4e fe ff       	call   c0005fc9 <f_opendir>
c002113e:	83 c4 10             	add    esp,0x10
c0021141:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021148:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021150:	74 07                	je     c0021159 <FAT::openDir(char const*, void**)+0x99>
c0021152:	b8 01 00 00 00       	mov    eax,0x1
c0021157:	eb 05                	jmp    c002115e <FAT::openDir(char const*, void**)+0x9e>
c0021159:	b8 00 00 00 00       	mov    eax,0x0
c002115e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021164:	c3                   	ret    
c0021165:	90                   	nop

c0021166 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021166:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002116c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021174:	75 0a                	jne    c0021180 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021176:	b8 04 00 00 00       	mov    eax,0x4
c002117b:	e9 c9 00 00 00       	jmp    c0021249 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021180:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021188:	75 0a                	jne    c0021194 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002118a:	b8 04 00 00 00       	mov    eax,0x4
c002118f:	e9 b5 00 00 00       	jmp    c0021249 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021194:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002119c:	75 0a                	jne    c00211a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002119e:	b8 04 00 00 00       	mov    eax,0x4
c00211a3:	e9 a1 00 00 00       	jmp    c0021249 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211a8:	83 ec 08             	sub    esp,0x8
c00211ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211b2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211b9:	50                   	push   eax
c00211ba:	e8 75 f6 fd ff       	call   c0000834 <strcpy>
c00211bf:	83 c4 10             	add    esp,0x10
c00211c2:	83 ec 08             	sub    esp,0x8
c00211c5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211cc:	50                   	push   eax
c00211cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211d4:	e8 87 fd ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c00211d9:	83 c4 10             	add    esp,0x10
c00211dc:	83 ec 08             	sub    esp,0x8
c00211df:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211e3:	50                   	push   eax
c00211e4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211eb:	50                   	push   eax
c00211ec:	e8 97 4f fe ff       	call   c0006188 <f_stat>
c00211f1:	83 c4 10             	add    esp,0x10
c00211f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00211fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021202:	85 c0                	test   eax,eax
c0021204:	74 07                	je     c002120d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021206:	83 f8 04             	cmp    eax,0x4
c0021209:	74 32                	je     c002123d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002120b:	eb 37                	jmp    c0021244 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002120d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021211:	0f b6 c0             	movzx  eax,al
c0021214:	83 e0 10             	and    eax,0x10
c0021217:	0f 95 c2             	setne  dl
c002121a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021221:	88 10                	mov    BYTE PTR [eax],dl
c0021223:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021226:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002122a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021231:	89 01                	mov    DWORD PTR [ecx],eax
c0021233:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021236:	b8 00 00 00 00       	mov    eax,0x0
c002123b:	eb 0c                	jmp    c0021249 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002123d:	b8 02 00 00 00       	mov    eax,0x2
c0021242:	eb 05                	jmp    c0021249 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021244:	b8 01 00 00 00       	mov    eax,0x1
c0021249:	81 c4 2c 02 00 00    	add    esp,0x22c
c002124f:	c3                   	ret    

c0021250 <FAT::unlink(char const*)>:
c0021250:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021256:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002125e:	75 07                	jne    c0021267 <FAT::unlink(char const*)+0x17>
c0021260:	b8 04 00 00 00       	mov    eax,0x4
c0021265:	eb 5c                	jmp    c00212c3 <FAT::unlink(char const*)+0x73>
c0021267:	83 ec 08             	sub    esp,0x8
c002126a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021271:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021275:	50                   	push   eax
c0021276:	e8 b9 f5 fd ff       	call   c0000834 <strcpy>
c002127b:	83 c4 10             	add    esp,0x10
c002127e:	83 ec 08             	sub    esp,0x8
c0021281:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021285:	50                   	push   eax
c0021286:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002128d:	e8 ce fc ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c0021292:	83 c4 10             	add    esp,0x10
c0021295:	83 ec 0c             	sub    esp,0xc
c0021298:	8d 44 24 18          	lea    eax,[esp+0x18]
c002129c:	50                   	push   eax
c002129d:	e8 38 52 fe ff       	call   c00064da <f_unlink>
c00212a2:	83 c4 10             	add    esp,0x10
c00212a5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212ac:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212b3:	85 c0                	test   eax,eax
c00212b5:	75 07                	jne    c00212be <FAT::unlink(char const*)+0x6e>
c00212b7:	b8 00 00 00 00       	mov    eax,0x0
c00212bc:	eb 05                	jmp    c00212c3 <FAT::unlink(char const*)+0x73>
c00212be:	b8 01 00 00 00       	mov    eax,0x1
c00212c3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212c9:	c3                   	ret    

c00212ca <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212ca:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212d0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212d7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212de:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00212e2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00212e6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00212ee:	75 0a                	jne    c00212fa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00212f0:	b8 04 00 00 00       	mov    eax,0x4
c00212f5:	e9 1c 01 00 00       	jmp    c0021416 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212fa:	83 ec 08             	sub    esp,0x8
c00212fd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021304:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021308:	50                   	push   eax
c0021309:	e8 26 f5 fd ff       	call   c0000834 <strcpy>
c002130e:	83 c4 10             	add    esp,0x10
c0021311:	83 ec 08             	sub    esp,0x8
c0021314:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021318:	50                   	push   eax
c0021319:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021320:	e8 3b fc ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c0021325:	83 c4 10             	add    esp,0x10
c0021328:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021330:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021338:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002133d:	83 e0 01             	and    eax,0x1
c0021340:	74 08                	je     c002134a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021342:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002134a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002134f:	83 e0 02             	and    eax,0x2
c0021352:	74 08                	je     c002135c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021354:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002135c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021361:	83 e0 04             	and    eax,0x4
c0021364:	74 08                	je     c002136e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021366:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002136e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021373:	83 e0 08             	and    eax,0x8
c0021376:	74 08                	je     c0021380 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021378:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021380:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021385:	83 e0 01             	and    eax,0x1
c0021388:	74 08                	je     c0021392 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002138a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021392:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021397:	83 e0 02             	and    eax,0x2
c002139a:	74 08                	je     c00213a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002139c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213a9:	83 e0 04             	and    eax,0x4
c00213ac:	74 08                	je     c00213b6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213ae:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213bb:	83 e0 08             	and    eax,0x8
c00213be:	74 08                	je     c00213c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213c0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213c8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213cf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213d6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213de:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00213e6:	83 ec 04             	sub    esp,0x4
c00213e9:	52                   	push   edx
c00213ea:	50                   	push   eax
c00213eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213ef:	50                   	push   eax
c00213f0:	e8 87 57 fe ff       	call   c0006b7c <f_chmod>
c00213f5:	83 c4 10             	add    esp,0x10
c00213f8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00213ff:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021406:	85 c0                	test   eax,eax
c0021408:	75 07                	jne    c0021411 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002140a:	b8 00 00 00 00       	mov    eax,0x0
c002140f:	eb 05                	jmp    c0021416 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021411:	b8 01 00 00 00       	mov    eax,0x1
c0021416:	81 c4 2c 01 00 00    	add    esp,0x12c
c002141c:	c3                   	ret    
c002141d:	90                   	nop

c002141e <FAT::rename(char const*, char const*)>:
c002141e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021424:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002142c:	74 0a                	je     c0021438 <FAT::rename(char const*, char const*)+0x1a>
c002142e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021436:	75 0a                	jne    c0021442 <FAT::rename(char const*, char const*)+0x24>
c0021438:	b8 04 00 00 00       	mov    eax,0x4
c002143d:	e9 98 00 00 00       	jmp    c00214da <FAT::rename(char const*, char const*)+0xbc>
c0021442:	83 ec 08             	sub    esp,0x8
c0021445:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002144c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021453:	50                   	push   eax
c0021454:	e8 db f3 fd ff       	call   c0000834 <strcpy>
c0021459:	83 c4 10             	add    esp,0x10
c002145c:	83 ec 08             	sub    esp,0x8
c002145f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021466:	50                   	push   eax
c0021467:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002146e:	e8 ed fa ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c0021473:	83 c4 10             	add    esp,0x10
c0021476:	83 ec 08             	sub    esp,0x8
c0021479:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021480:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021484:	50                   	push   eax
c0021485:	e8 aa f3 fd ff       	call   c0000834 <strcpy>
c002148a:	83 c4 10             	add    esp,0x10
c002148d:	83 ec 08             	sub    esp,0x8
c0021490:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021494:	50                   	push   eax
c0021495:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002149c:	e8 bf fa ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c00214a1:	83 c4 10             	add    esp,0x10
c00214a4:	83 ec 08             	sub    esp,0x8
c00214a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214ab:	50                   	push   eax
c00214ac:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214b3:	50                   	push   eax
c00214b4:	e8 d0 53 fe ff       	call   c0006889 <f_rename>
c00214b9:	83 c4 10             	add    esp,0x10
c00214bc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214c3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214ca:	85 c0                	test   eax,eax
c00214cc:	75 07                	jne    c00214d5 <FAT::rename(char const*, char const*)+0xb7>
c00214ce:	b8 00 00 00 00       	mov    eax,0x0
c00214d3:	eb 05                	jmp    c00214da <FAT::rename(char const*, char const*)+0xbc>
c00214d5:	b8 01 00 00 00       	mov    eax,0x1
c00214da:	81 c4 1c 02 00 00    	add    esp,0x21c
c00214e0:	c3                   	ret    
c00214e1:	90                   	nop

c00214e2 <FAT::mkdir(char const*)>:
c00214e2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214e8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214f0:	75 07                	jne    c00214f9 <FAT::mkdir(char const*)+0x17>
c00214f2:	b8 04 00 00 00       	mov    eax,0x4
c00214f7:	eb 5c                	jmp    c0021555 <FAT::mkdir(char const*)+0x73>
c00214f9:	83 ec 08             	sub    esp,0x8
c00214fc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021503:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021507:	50                   	push   eax
c0021508:	e8 27 f3 fd ff       	call   c0000834 <strcpy>
c002150d:	83 c4 10             	add    esp,0x10
c0021510:	83 ec 08             	sub    esp,0x8
c0021513:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021517:	50                   	push   eax
c0021518:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002151f:	e8 3c fa ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c0021524:	83 c4 10             	add    esp,0x10
c0021527:	83 ec 0c             	sub    esp,0xc
c002152a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002152e:	50                   	push   eax
c002152f:	e8 29 51 fe ff       	call   c000665d <f_mkdir>
c0021534:	83 c4 10             	add    esp,0x10
c0021537:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002153e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021545:	85 c0                	test   eax,eax
c0021547:	75 07                	jne    c0021550 <FAT::mkdir(char const*)+0x6e>
c0021549:	b8 00 00 00 00       	mov    eax,0x0
c002154e:	eb 05                	jmp    c0021555 <FAT::mkdir(char const*)+0x73>
c0021550:	b8 01 00 00 00       	mov    eax,0x1
c0021555:	81 c4 1c 01 00 00    	add    esp,0x11c
c002155b:	c3                   	ret    

c002155c <FAT::exists(char const*)>:
c002155c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021562:	83 ec 08             	sub    esp,0x8
c0021565:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002156c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021570:	50                   	push   eax
c0021571:	e8 be f2 fd ff       	call   c0000834 <strcpy>
c0021576:	83 c4 10             	add    esp,0x10
c0021579:	83 ec 08             	sub    esp,0x8
c002157c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021580:	50                   	push   eax
c0021581:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021588:	e8 d3 f9 ff ff       	call   c0020f60 <FAT::fixFilepath(char*)>
c002158d:	83 c4 10             	add    esp,0x10
c0021590:	83 ec 08             	sub    esp,0x8
c0021593:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002159a:	50                   	push   eax
c002159b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002159f:	50                   	push   eax
c00215a0:	e8 e3 4b fe ff       	call   c0006188 <f_stat>
c00215a5:	83 c4 10             	add    esp,0x10
c00215a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215b6:	85 c0                	test   eax,eax
c00215b8:	75 04                	jne    c00215be <FAT::exists(char const*)+0x62>
c00215ba:	b0 01                	mov    al,0x1
c00215bc:	eb 02                	jmp    c00215c0 <FAT::exists(char const*)+0x64>
c00215be:	b0 00                	mov    al,0x0
c00215c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215c6:	c3                   	ret    
c00215c7:	90                   	nop

c00215c8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215c8:	b8 08 00 00 00       	mov    eax,0x8
c00215cd:	c3                   	ret    

c00215ce <ISO9660::seek(void*, unsigned long long)>:
c00215ce:	53                   	push   ebx
c00215cf:	b8 04 00 00 00       	mov    eax,0x4
c00215d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00215e0:	85 d2                	test   edx,edx
c00215e2:	74 17                	je     c00215fb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215e4:	89 c8                	mov    eax,ecx
c00215e6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00215e9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00215ec:	b8 01 00 00 00       	mov    eax,0x1
c00215f1:	73 08                	jae    c00215fb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215f3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00215f6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00215f9:	31 c0                	xor    eax,eax
c00215fb:	5b                   	pop    ebx
c00215fc:	c3                   	ret    
c00215fd:	90                   	nop

c00215fe <ISO9660::tell(void*, unsigned long long*)>:
c00215fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021606:	85 d2                	test   edx,edx
c0021608:	74 12                	je     c002161c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002160a:	85 c0                	test   eax,eax
c002160c:	74 0e                	je     c002161c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002160e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021611:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021614:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021617:	89 10                	mov    DWORD PTR [eax],edx
c0021619:	31 c0                	xor    eax,eax
c002161b:	c3                   	ret    
c002161c:	b8 04 00 00 00       	mov    eax,0x4
c0021621:	c3                   	ret    

c0021622 <ISO9660::getName()>:
c0021622:	b8 a8 c8 02 c0       	mov    eax,0xc002c8a8
c0021627:	c3                   	ret    

c0021628 <ISO9660::stat(void*, unsigned long long*)>:
c0021628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002162c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021630:	85 d2                	test   edx,edx
c0021632:	74 12                	je     c0021646 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021634:	85 c0                	test   eax,eax
c0021636:	74 0e                	je     c0021646 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021638:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002163b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002163e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021641:	89 10                	mov    DWORD PTR [eax],edx
c0021643:	31 c0                	xor    eax,eax
c0021645:	c3                   	ret    
c0021646:	b8 04 00 00 00       	mov    eax,0x4
c002164b:	c3                   	ret    

c002164c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002164c:	b8 01 00 00 00       	mov    eax,0x1
c0021651:	c3                   	ret    

c0021652 <ISO9660::unlink(char const*)>:
c0021652:	b8 01 00 00 00       	mov    eax,0x1
c0021657:	c3                   	ret    

c0021658 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021658:	b8 01 00 00 00       	mov    eax,0x1
c002165d:	c3                   	ret    

c002165e <ISO9660::rename(char const*, char const*)>:
c002165e:	b8 01 00 00 00       	mov    eax,0x1
c0021663:	c3                   	ret    

c0021664 <ISO9660::mkdir(char const*)>:
c0021664:	b8 01 00 00 00       	mov    eax,0x1
c0021669:	c3                   	ret    

c002166a <ISO9660::close(void*)>:
c002166a:	83 ec 0c             	sub    esp,0xc
c002166d:	b8 04 00 00 00       	mov    eax,0x4
c0021672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021676:	85 d2                	test   edx,edx
c0021678:	74 0e                	je     c0021688 <ISO9660::close(void*)+0x1e>
c002167a:	83 ec 0c             	sub    esp,0xc
c002167d:	52                   	push   edx
c002167e:	e8 cd e1 fe ff       	call   c000f850 <free>
c0021683:	83 c4 10             	add    esp,0x10
c0021686:	31 c0                	xor    eax,eax
c0021688:	83 c4 0c             	add    esp,0xc
c002168b:	c3                   	ret    

c002168c <ISO9660::closeDir(void*)>:
c002168c:	83 ec 0c             	sub    esp,0xc
c002168f:	b8 04 00 00 00       	mov    eax,0x4
c0021694:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021698:	85 d2                	test   edx,edx
c002169a:	74 0e                	je     c00216aa <ISO9660::closeDir(void*)+0x1e>
c002169c:	83 ec 0c             	sub    esp,0xc
c002169f:	52                   	push   edx
c00216a0:	e8 ab e1 fe ff       	call   c000f850 <free>
c00216a5:	83 c4 10             	add    esp,0x10
c00216a8:	31 c0                	xor    eax,eax
c00216aa:	83 c4 0c             	add    esp,0xc
c00216ad:	c3                   	ret    

c00216ae <ISO9660::~ISO9660()>:
c00216ae:	83 ec 0c             	sub    esp,0xc
c00216b1:	ba 0c c9 02 c0       	mov    edx,0xc002c90c
c00216b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ba:	89 10                	mov    DWORD PTR [eax],edx
c00216bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c0:	83 ec 0c             	sub    esp,0xc
c00216c3:	50                   	push   eax
c00216c4:	e8 33 1b ff ff       	call   c00131fc <Filesystem::~Filesystem()>
c00216c9:	83 c4 10             	add    esp,0x10
c00216cc:	90                   	nop
c00216cd:	83 c4 0c             	add    esp,0xc
c00216d0:	c3                   	ret    
c00216d1:	90                   	nop

c00216d2 <ISO9660::~ISO9660()>:
c00216d2:	83 ec 0c             	sub    esp,0xc
c00216d5:	83 ec 0c             	sub    esp,0xc
c00216d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216dc:	e8 cd ff ff ff       	call   c00216ae <ISO9660::~ISO9660()>
c00216e1:	83 c4 10             	add    esp,0x10
c00216e4:	83 ec 08             	sub    esp,0x8
c00216e7:	6a 08                	push   0x8
c00216e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ed:	e8 02 17 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00216f2:	83 c4 10             	add    esp,0x10
c00216f5:	83 c4 0c             	add    esp,0xc
c00216f8:	c3                   	ret    

c00216f9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00216f9:	55                   	push   ebp
c00216fa:	31 c9                	xor    ecx,ecx
c00216fc:	57                   	push   edi
c00216fd:	56                   	push   esi
c00216fe:	53                   	push   ebx
c00216ff:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021703:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021707:	89 eb                	mov    ebx,ebp
c0021709:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002170d:	39 ce                	cmp    esi,ecx
c002170f:	7e 17                	jle    c0021728 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021711:	31 d2                	xor    edx,edx
c0021713:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021717:	7d 13                	jge    c002172c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021719:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002171d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021720:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021723:	75 0d                	jne    c0021732 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021725:	42                   	inc    edx
c0021726:	eb eb                	jmp    c0021713 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021728:	31 c0                	xor    eax,eax
c002172a:	eb 0a                	jmp    c0021736 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002172c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021730:	eb 04                	jmp    c0021736 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021732:	41                   	inc    ecx
c0021733:	43                   	inc    ebx
c0021734:	eb d7                	jmp    c002170d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021736:	5b                   	pop    ebx
c0021737:	5e                   	pop    esi
c0021738:	5f                   	pop    edi
c0021739:	5d                   	pop    ebp
c002173a:	c3                   	ret    

c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002173b:	56                   	push   esi
c002173c:	53                   	push   ebx
c002173d:	52                   	push   edx
c002173e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021742:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021746:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002174a:	39 0d 20 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b20,ecx
c0021750:	75 08                	jne    c002175a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021752:	38 05 74 d9 02 c0    	cmp    BYTE PTR ds:0xc002d974,al
c0021758:	74 2b                	je     c0021785 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002175a:	83 ec 0c             	sub    esp,0xc
c002175d:	a2 74 d9 02 c0       	mov    ds:0xc002d974,al
c0021762:	68 40 1b 03 c0       	push   0xc0031b40
c0021767:	0f be c0             	movsx  eax,al
c002176a:	6a 01                	push   0x1
c002176c:	89 0d 20 1b 03 c0    	mov    DWORD PTR ds:0xc0031b20,ecx
c0021772:	31 db                	xor    ebx,ebx
c0021774:	53                   	push   ebx
c0021775:	51                   	push   ecx
c0021776:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c002177d:	e8 62 4f ff ff       	call   c00166e4 <LogicalDisk::read(unsigned long long, int, void*)>
c0021782:	83 c4 20             	add    esp,0x20
c0021785:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002178d:	c7 44 24 14 40 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031b40
c0021795:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021799:	58                   	pop    eax
c002179a:	5b                   	pop    ebx
c002179b:	5e                   	pop    esi
c002179c:	e9 a3 ef fd ff       	jmp    c0000744 <memcpy>
c00217a1:	90                   	nop

c00217a2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00217a2:	81 ec 10 08 00 00    	sub    esp,0x810
c00217a8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217af:	83 c0 41             	add    eax,0x41
c00217b2:	0f be c0             	movsx  eax,al
c00217b5:	50                   	push   eax
c00217b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217ba:	50                   	push   eax
c00217bb:	6a 10                	push   0x10
c00217bd:	e8 79 ff ff ff       	call   c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217c2:	83 c4 10             	add    esp,0x10
c00217c5:	31 c0                	xor    eax,eax
c00217c7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217cc:	75 1d                	jne    c00217eb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217ce:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217d3:	75 16                	jne    c00217eb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217d5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217da:	75 0f                	jne    c00217eb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217dc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217e1:	75 08                	jne    c00217eb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217e3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00217e8:	0f 94 c0             	sete   al
c00217eb:	81 c4 0c 08 00 00    	add    esp,0x80c
c00217f1:	c3                   	ret    

c00217f2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00217f2:	55                   	push   ebp
c00217f3:	57                   	push   edi
c00217f4:	56                   	push   esi
c00217f5:	53                   	push   ebx
c00217f6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00217fc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021803:	85 ed                	test   ebp,ebp
c0021805:	0f 84 d6 01 00 00    	je     c00219e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002180b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021813:	0f 84 c8 01 00 00    	je     c00219e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021819:	b8 01 00 00 00       	mov    eax,0x1
c002181e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021822:	0f 85 be 01 00 00    	jne    c00219e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021828:	31 d2                	xor    edx,edx
c002182a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021831:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021834:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021837:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002183b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002183e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021841:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021845:	01 f0                	add    eax,esi
c0021847:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002184a:	11 fa                	adc    edx,edi
c002184c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021850:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021854:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021858:	19 d1                	sbb    ecx,edx
c002185a:	72 0a                	jb     c0021866 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002185c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021864:	eb 13                	jmp    c0021879 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002186a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002186e:	29 f0                	sub    eax,esi
c0021870:	19 fa                	sbb    edx,edi
c0021872:	89 04 24             	mov    DWORD PTR [esp],eax
c0021875:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021879:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002187c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002187f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021883:	51                   	push   ecx
c0021884:	c1 e0 0b             	shl    eax,0xb
c0021887:	01 c6                	add    esi,eax
c0021889:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002188d:	11 d7                	adc    edi,edx
c002188f:	50                   	push   eax
c0021890:	89 fa                	mov    edx,edi
c0021892:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021896:	89 f0                	mov    eax,esi
c0021898:	53                   	push   ebx
c0021899:	0f ac d0 0b          	shrd   eax,edx,0xb
c002189d:	50                   	push   eax
c002189e:	e8 98 fe ff ff       	call   c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218a7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218aa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218ae:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218b4:	83 c4 10             	add    esp,0x10
c00218b7:	b8 00 08 00 00       	mov    eax,0x800
c00218bc:	29 d0                	sub    eax,edx
c00218be:	39 c1                	cmp    ecx,eax
c00218c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00218c4:	83 d9 00             	sbb    ecx,0x0
c00218c7:	7d 1c                	jge    c00218e5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00218c9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218ce:	75 12                	jne    c00218e2 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00218d0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218dd:	e9 fb 00 00 00       	jmp    c00219dd <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00218e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00218e5:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00218e8:	31 d2                	xor    edx,edx
c00218ea:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00218ee:	39 c2                	cmp    edx,eax
c00218f0:	7d 14                	jge    c0021906 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00218f2:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00218f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218fd:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021900:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021903:	42                   	inc    edx
c0021904:	eb e8                	jmp    c00218ee <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021906:	89 c3                	mov    ebx,eax
c0021908:	85 c0                	test   eax,eax
c002190a:	79 02                	jns    c002190e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002190c:	31 db                	xor    ebx,ebx
c002190e:	99                   	cdq    
c002190f:	01 c3                	add    ebx,eax
c0021911:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021918:	01 c6                	add    esi,eax
c002191a:	11 d7                	adc    edi,edx
c002191c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021920:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021924:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021927:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002192b:	29 c6                	sub    esi,eax
c002192d:	19 d7                	sbb    edi,edx
c002192f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021932:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021936:	b8 ff 07 00 00       	mov    eax,0x7ff
c002193b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002193e:	b8 00 00 00 00       	mov    eax,0x0
c0021943:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021947:	7d 3e                	jge    c0021987 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021949:	52                   	push   edx
c002194a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002194e:	50                   	push   eax
c002194f:	53                   	push   ebx
c0021950:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021954:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021958:	0f ac d0 0b          	shrd   eax,edx,0xb
c002195c:	50                   	push   eax
c002195d:	e8 d9 fd ff ff       	call   c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021962:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002196a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002196f:	81 c3 00 08 00 00    	add    ebx,0x800
c0021975:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002197d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021982:	83 c4 10             	add    esp,0x10
c0021985:	eb af                	jmp    c0021936 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002198b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002198e:	74 32                	je     c00219c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021990:	50                   	push   eax
c0021991:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021995:	50                   	push   eax
c0021996:	8d 44 24 28          	lea    eax,[esp+0x28]
c002199a:	50                   	push   eax
c002199b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002199f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219a3:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219a7:	56                   	push   esi
c00219a8:	e8 8e fd ff ff       	call   c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219ad:	83 c4 0c             	add    esp,0xc
c00219b0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219b8:	50                   	push   eax
c00219b9:	53                   	push   ebx
c00219ba:	e8 85 ed fd ff       	call   c0000744 <memcpy>
c00219bf:	83 c4 10             	add    esp,0x10
c00219c2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219c9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219d1:	89 38                	mov    DWORD PTR [eax],edi
c00219d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219d7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219da:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219dd:	31 c0                	xor    eax,eax
c00219df:	eb 05                	jmp    c00219e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219e1:	b8 04 00 00 00       	mov    eax,0x4
c00219e6:	81 c4 2c 08 00 00    	add    esp,0x82c
c00219ec:	5b                   	pop    ebx
c00219ed:	5e                   	pop    esi
c00219ee:	5f                   	pop    edi
c00219ef:	5d                   	pop    ebp
c00219f0:	c3                   	ret    
c00219f1:	90                   	nop

c00219f2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00219f2:	55                   	push   ebp
c00219f3:	57                   	push   edi
c00219f4:	56                   	push   esi
c00219f5:	53                   	push   ebx
c00219f6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00219fc:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a03:	85 f6                	test   esi,esi
c0021a05:	0f 84 64 02 00 00    	je     c0021c6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a0b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a13:	0f 84 56 02 00 00    	je     c0021c6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a19:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a1c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a1f:	75 0a                	jne    c0021a2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a21:	b8 07 00 00 00       	mov    eax,0x7
c0021a26:	e9 49 02 00 00       	jmp    c0021c74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a2b:	50                   	push   eax
c0021a2c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a30:	50                   	push   eax
c0021a31:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a38:	53                   	push   ebx
c0021a39:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a3b:	c1 e0 0b             	shl    eax,0xb
c0021a3e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a41:	c1 e8 0b             	shr    eax,0xb
c0021a44:	50                   	push   eax
c0021a45:	e8 f1 fc ff ff       	call   c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a4a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a4d:	83 c4 10             	add    esp,0x10
c0021a50:	89 c1                	mov    ecx,eax
c0021a52:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a55:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a5b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a5e:	84 db                	test   bl,bl
c0021a60:	0f 85 90 00 00 00    	jne    c0021af6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a66:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a6c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a72:	29 c7                	sub    edi,eax
c0021a74:	89 fb                	mov    ebx,edi
c0021a76:	c1 fb 1f             	sar    ebx,0x1f
c0021a79:	01 f8                	add    eax,edi
c0021a7b:	11 da                	adc    edx,ebx
c0021a7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a85:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021a88:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021a8b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021a8e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021a91:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a98:	89 d8                	mov    eax,ebx
c0021a9a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021a9d:	ba 00 00 00 00       	mov    edx,0x0
c0021aa2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021aa6:	b8 00 00 00 00       	mov    eax,0x0
c0021aab:	73 0b                	jae    c0021ab8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021aad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ab0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ab4:	29 f8                	sub    eax,edi
c0021ab6:	19 da                	sbb    edx,ebx
c0021ab8:	89 d3                	mov    ebx,edx
c0021aba:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021abd:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ac0:	09 c3                	or     ebx,eax
c0021ac2:	0f 84 59 ff ff ff    	je     c0021a21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ac8:	55                   	push   ebp
c0021ac9:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021acd:	50                   	push   eax
c0021ace:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021ad5:	53                   	push   ebx
c0021ad6:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ad8:	c1 e0 0b             	shl    eax,0xb
c0021adb:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021adf:	c1 e8 0b             	shr    eax,0xb
c0021ae2:	50                   	push   eax
c0021ae3:	e8 53 fc ff ff       	call   c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ae8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021aeb:	83 c4 10             	add    esp,0x10
c0021aee:	25 ff 07 00 00       	and    eax,0x7ff
c0021af3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021af6:	57                   	push   edi
c0021af7:	6a 28                	push   0x28
c0021af9:	6a 00                	push   0x0
c0021afb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021aff:	50                   	push   eax
c0021b00:	e8 73 ec fd ff       	call   c0000778 <memset>
c0021b05:	31 d2                	xor    edx,edx
c0021b07:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b0a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b10:	89 f8                	mov    eax,edi
c0021b12:	83 c0 21             	add    eax,0x21
c0021b15:	83 d2 00             	adc    edx,0x0
c0021b18:	89 c7                	mov    edi,eax
c0021b1a:	89 d5                	mov    ebp,edx
c0021b1c:	83 c4 10             	add    esp,0x10
c0021b1f:	31 c9                	xor    ecx,ecx
c0021b21:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b28:	83 f9 28             	cmp    ecx,0x28
c0021b2b:	88 04 24             	mov    BYTE PTR [esp],al
c0021b2e:	0f 94 c2             	sete   dl
c0021b31:	88 d0                	mov    al,dl
c0021b33:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b38:	39 fa                	cmp    edx,edi
c0021b3a:	ba 00 00 00 00       	mov    edx,0x0
c0021b3f:	19 ea                	sbb    edx,ebp
c0021b41:	0f 92 c2             	setb   dl
c0021b44:	09 c2                	or     edx,eax
c0021b46:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b4a:	0f 94 c0             	sete   al
c0021b4d:	08 d0                	or     al,dl
c0021b4f:	75 16                	jne    c0021b67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b51:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b55:	74 10                	je     c0021b67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b57:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b5a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b5e:	41                   	inc    ecx
c0021b5f:	83 c7 01             	add    edi,0x1
c0021b62:	83 d5 00             	adc    ebp,0x0
c0021b65:	eb ba                	jmp    c0021b21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b67:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b6e:	83 ec 0c             	sub    esp,0xc
c0021b71:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021b75:	57                   	push   edi
c0021b76:	e8 19 ec fd ff       	call   c0000794 <strlen>
c0021b7b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b83:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b87:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021b8e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b91:	5a                   	pop    edx
c0021b92:	25 ff 07 00 00       	and    eax,0x7ff
c0021b97:	01 c8                	add    eax,ecx
c0021b99:	59                   	pop    ecx
c0021b9a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021ba0:	83 e0 02             	and    eax,0x2
c0021ba3:	3c 01                	cmp    al,0x1
c0021ba5:	19 c0                	sbb    eax,eax
c0021ba7:	83 c0 02             	add    eax,0x2
c0021baa:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bae:	57                   	push   edi
c0021baf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bb3:	50                   	push   eax
c0021bb4:	e8 7b ec fd ff       	call   c0000834 <strcpy>
c0021bb9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bbd:	83 c4 10             	add    esp,0x10
c0021bc0:	84 c0                	test   al,al
c0021bc2:	75 21                	jne    c0021be5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021bc4:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bcc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bd4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bdc:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021be3:	eb 28                	jmp    c0021c0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021be5:	fe c8                	dec    al
c0021be7:	75 24                	jne    c0021c0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021be9:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021bf1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bf9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c01:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c08:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c0d:	0f b6 fb             	movzx  edi,bl
c0021c10:	31 db                	xor    ebx,ebx
c0021c12:	50                   	push   eax
c0021c13:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c1a:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c1e:	50                   	push   eax
c0021c1f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c26:	e8 19 eb fd ff       	call   c0000744 <memcpy>
c0021c2b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c32:	89 f9                	mov    ecx,edi
c0021c34:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c3a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c3d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c40:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c43:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c46:	83 c4 10             	add    esp,0x10
c0021c49:	39 c7                	cmp    edi,eax
c0021c4b:	89 df                	mov    edi,ebx
c0021c4d:	19 d7                	sbb    edi,edx
c0021c4f:	72 10                	jb     c0021c61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c51:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c58:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c5f:	eb 0a                	jmp    c0021c6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c61:	29 c8                	sub    eax,ecx
c0021c63:	19 da                	sbb    edx,ebx
c0021c65:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c68:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c6b:	31 c0                	xor    eax,eax
c0021c6d:	eb 05                	jmp    c0021c74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c6f:	b8 04 00 00 00       	mov    eax,0x4
c0021c74:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c7a:	5b                   	pop    ebx
c0021c7b:	5e                   	pop    esi
c0021c7c:	5f                   	pop    edi
c0021c7d:	5d                   	pop    ebp
c0021c7e:	c3                   	ret    

c0021c7f <readRoot(unsigned int*, unsigned int*, char)>:
c0021c7f:	81 ec 40 08 00 00    	sub    esp,0x840
c0021c85:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c8d:	50                   	push   eax
c0021c8e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c92:	50                   	push   eax
c0021c93:	6a 10                	push   0x10
c0021c95:	e8 a1 fa ff ff       	call   c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c9a:	83 c4 0c             	add    esp,0xc
c0021c9d:	6a 22                	push   0x22
c0021c9f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021ca6:	50                   	push   eax
c0021ca7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021cab:	50                   	push   eax
c0021cac:	e8 93 ea fd ff       	call   c0000744 <memcpy>
c0021cb1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cbc:	89 10                	mov    DWORD PTR [eax],edx
c0021cbe:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021cc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cc9:	89 10                	mov    DWORD PTR [eax],edx
c0021ccb:	b0 01                	mov    al,0x1
c0021ccd:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021cd3:	c3                   	ret    

c0021cd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021cd4:	55                   	push   ebp
c0021cd5:	57                   	push   edi
c0021cd6:	56                   	push   esi
c0021cd7:	53                   	push   ebx
c0021cd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cde:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021ce5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021cec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021cf0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021cf4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021cf8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021cfc:	75 03                	jne    c0021d01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cfe:	83 c3 02             	add    ebx,0x2
c0021d01:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d04:	75 03                	jne    c0021d09 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d06:	43                   	inc    ebx
c0021d07:	eb f8                	jmp    c0021d01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d09:	51                   	push   ecx
c0021d0a:	68 00 01 00 00       	push   0x100
c0021d0f:	6a 00                	push   0x0
c0021d11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d15:	50                   	push   eax
c0021d16:	e8 5d ea fd ff       	call   c0000778 <memset>
c0021d1b:	83 c4 10             	add    esp,0x10
c0021d1e:	31 d2                	xor    edx,edx
c0021d20:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d23:	84 c0                	test   al,al
c0021d25:	74 21                	je     c0021d48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d27:	3c 2f                	cmp    al,0x2f
c0021d29:	75 0b                	jne    c0021d36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d2b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0021d34:	eb 14                	jmp    c0021d4a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d36:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d39:	80 f9 19             	cmp    cl,0x19
c0021d3c:	77 03                	ja     c0021d41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d3e:	83 e8 20             	sub    eax,0x20
c0021d41:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d45:	42                   	inc    edx
c0021d46:	eb d8                	jmp    c0021d20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d48:	31 ed                	xor    ebp,ebp
c0021d4a:	83 ec 0c             	sub    esp,0xc
c0021d4d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d54:	e8 e7 da fe ff       	call   c000f840 <malloc>
c0021d59:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d60:	89 c6                	mov    esi,eax
c0021d62:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d68:	c1 ef 0b             	shr    edi,0xb
c0021d6b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d72:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d76:	83 c4 10             	add    esp,0x10
c0021d79:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d82:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d89:	74 28                	je     c0021db3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d8b:	52                   	push   edx
c0021d8c:	57                   	push   edi
c0021d8d:	50                   	push   eax
c0021d8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d92:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021d99:	e8 9d f9 ff ff       	call   c002173b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021da2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021da9:	05 00 08 00 00       	add    eax,0x800
c0021dae:	83 c4 10             	add    esp,0x10
c0021db1:	eb cb                	jmp    c0021d7e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021db3:	83 ec 0c             	sub    esp,0xc
c0021db6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021dba:	57                   	push   edi
c0021dbb:	e8 d4 e9 fd ff       	call   c0000794 <strlen>
c0021dc0:	50                   	push   eax
c0021dc1:	57                   	push   edi
c0021dc2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021dc9:	56                   	push   esi
c0021dca:	e8 2a f9 ff ff       	call   c00216f9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021dcf:	83 c4 20             	add    esp,0x20
c0021dd2:	85 c0                	test   eax,eax
c0021dd4:	75 13                	jne    c0021de9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021dd6:	83 ec 0c             	sub    esp,0xc
c0021dd9:	56                   	push   esi
c0021dda:	e8 71 da fe ff       	call   c000f850 <free>
c0021ddf:	83 c4 10             	add    esp,0x10
c0021de2:	31 c0                	xor    eax,eax
c0021de4:	e9 b3 00 00 00       	jmp    c0021e9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021de9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ded:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021df1:	c1 e7 08             	shl    edi,0x8
c0021df4:	c1 e2 10             	shl    edx,0x10
c0021df7:	09 d7                	or     edi,edx
c0021df9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021dfd:	09 d7                	or     edi,edx
c0021dff:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e03:	c1 e2 18             	shl    edx,0x18
c0021e06:	09 d7                	or     edi,edx
c0021e08:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e0c:	89 d1                	mov    ecx,edx
c0021e0e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e12:	c1 e1 08             	shl    ecx,0x8
c0021e15:	c1 e2 10             	shl    edx,0x10
c0021e18:	09 ca                	or     edx,ecx
c0021e1a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e1e:	09 ca                	or     edx,ecx
c0021e20:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e24:	c1 e1 18             	shl    ecx,0x18
c0021e27:	09 ca                	or     edx,ecx
c0021e29:	89 e9                	mov    ecx,ebp
c0021e2b:	84 c9                	test   cl,cl
c0021e2d:	74 3c                	je     c0021e6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e2f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e33:	83 ec 0c             	sub    esp,0xc
c0021e36:	56                   	push   esi
c0021e37:	e8 14 da fe ff       	call   c000f850 <free>
c0021e3c:	83 c4 0c             	add    esp,0xc
c0021e3f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e46:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e4b:	50                   	push   eax
c0021e4c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e53:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e5e:	52                   	push   edx
c0021e5f:	57                   	push   edi
c0021e60:	53                   	push   ebx
c0021e61:	e8 6e fe ff ff       	call   c0021cd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e66:	83 c4 20             	add    esp,0x20
c0021e69:	eb 31                	jmp    c0021e9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e6b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e6e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e75:	d0 e8                	shr    al,1
c0021e77:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e79:	83 e0 01             	and    eax,0x1
c0021e7c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e83:	83 ec 0c             	sub    esp,0xc
c0021e86:	89 13                	mov    DWORD PTR [ebx],edx
c0021e88:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e8f:	89 03                	mov    DWORD PTR [ebx],eax
c0021e91:	56                   	push   esi
c0021e92:	e8 b9 d9 fe ff       	call   c000f850 <free>
c0021e97:	83 c4 10             	add    esp,0x10
c0021e9a:	b0 01                	mov    al,0x1
c0021e9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ea2:	5b                   	pop    ebx
c0021ea3:	5e                   	pop    esi
c0021ea4:	5f                   	pop    edi
c0021ea5:	5d                   	pop    ebp
c0021ea6:	c3                   	ret    

c0021ea7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ea7:	55                   	push   ebp
c0021ea8:	57                   	push   edi
c0021ea9:	56                   	push   esi
c0021eaa:	53                   	push   ebx
c0021eab:	83 ec 20             	sub    esp,0x20
c0021eae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021eb2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021eb6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021eba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ec2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021eca:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ecf:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ed5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021edb:	57                   	push   edi
c0021edc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ee0:	50                   	push   eax
c0021ee1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ee5:	50                   	push   eax
c0021ee6:	e8 94 fd ff ff       	call   c0021c7f <readRoot(unsigned int*, unsigned int*, char)>
c0021eeb:	5a                   	pop    edx
c0021eec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ef0:	e8 9f e8 fd ff       	call   c0000794 <strlen>
c0021ef5:	83 c4 10             	add    esp,0x10
c0021ef8:	83 f8 03             	cmp    eax,0x3
c0021efb:	77 17                	ja     c0021f14 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f01:	89 03                	mov    DWORD PTR [ebx],eax
c0021f03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f07:	89 06                	mov    DWORD PTR [esi],eax
c0021f09:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f10:	b0 01                	mov    al,0x1
c0021f12:	eb 19                	jmp    c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f14:	50                   	push   eax
c0021f15:	55                   	push   ebp
c0021f16:	57                   	push   edi
c0021f17:	56                   	push   esi
c0021f18:	53                   	push   ebx
c0021f19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f25:	e8 aa fd ff ff       	call   c0021cd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f2a:	83 c4 20             	add    esp,0x20
c0021f2d:	83 c4 1c             	add    esp,0x1c
c0021f30:	5b                   	pop    ebx
c0021f31:	5e                   	pop    esi
c0021f32:	5f                   	pop    edi
c0021f33:	5d                   	pop    ebp
c0021f34:	c3                   	ret    
c0021f35:	90                   	nop

c0021f36 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f36:	57                   	push   edi
c0021f37:	56                   	push   esi
c0021f38:	53                   	push   ebx
c0021f39:	83 ec 10             	sub    esp,0x10
c0021f3c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f44:	85 ff                	test   edi,edi
c0021f46:	0f 84 9d 00 00 00    	je     c0021fe9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f4c:	85 f6                	test   esi,esi
c0021f4e:	0f 84 95 00 00 00    	je     c0021fe9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f54:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f59:	74 17                	je     c0021f72 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f5b:	83 ec 0c             	sub    esp,0xc
c0021f5e:	68 c3 c8 02 c0       	push   0xc002c8c3
c0021f63:	e8 6c 0f ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0021f68:	83 c4 10             	add    esp,0x10
c0021f6b:	b8 03 00 00 00       	mov    eax,0x3
c0021f70:	eb 7c                	jmp    c0021fee <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f72:	83 ec 0c             	sub    esp,0xc
c0021f75:	6a 1c                	push   0x1c
c0021f77:	e8 c4 d8 fe ff       	call   c000f840 <malloc>
c0021f7c:	89 07                	mov    DWORD PTR [edi],eax
c0021f7e:	89 c3                	mov    ebx,eax
c0021f80:	58                   	pop    eax
c0021f81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f85:	50                   	push   eax
c0021f86:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f89:	50                   	push   eax
c0021f8a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f8e:	50                   	push   eax
c0021f8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f93:	50                   	push   eax
c0021f94:	56                   	push   esi
c0021f95:	e8 0d ff ff ff       	call   c0021ea7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f9a:	83 c4 20             	add    esp,0x20
c0021f9d:	84 c0                	test   al,al
c0021f9f:	74 07                	je     c0021fa8 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fa1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fa6:	74 0b                	je     c0021fb3 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fa8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fac:	b8 01 00 00 00       	mov    eax,0x1
c0021fb1:	eb 3b                	jmp    c0021fee <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fb7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fbb:	89 03                	mov    DWORD PTR [ebx],eax
c0021fbd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fcf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fd6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fd9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fe0:	8a 06                	mov    al,BYTE PTR [esi]
c0021fe2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fe5:	31 c0                	xor    eax,eax
c0021fe7:	eb 05                	jmp    c0021fee <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fe9:	b8 04 00 00 00       	mov    eax,0x4
c0021fee:	83 c4 10             	add    esp,0x10
c0021ff1:	5b                   	pop    ebx
c0021ff2:	5e                   	pop    esi
c0021ff3:	5f                   	pop    edi
c0021ff4:	c3                   	ret    
c0021ff5:	90                   	nop

c0021ff6 <ISO9660::exists(char const*)>:
c0021ff6:	83 ec 28             	sub    esp,0x28
c0021ff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ffd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022001:	52                   	push   edx
c0022002:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022005:	52                   	push   edx
c0022006:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002200a:	52                   	push   edx
c002200b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002200f:	52                   	push   edx
c0022010:	50                   	push   eax
c0022011:	e8 91 fe ff ff       	call   c0021ea7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022016:	83 c4 3c             	add    esp,0x3c
c0022019:	c3                   	ret    

c002201a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002201a:	56                   	push   esi
c002201b:	53                   	push   ebx
c002201c:	83 ec 14             	sub    esp,0x14
c002201f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022023:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022027:	85 db                	test   ebx,ebx
c0022029:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002202d:	0f 94 c2             	sete   dl
c0022030:	85 f6                	test   esi,esi
c0022032:	0f 94 c0             	sete   al
c0022035:	08 c2                	or     dl,al
c0022037:	75 68                	jne    c00220a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022039:	85 c9                	test   ecx,ecx
c002203b:	74 64                	je     c00220a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002203d:	83 ec 0c             	sub    esp,0xc
c0022040:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022043:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022047:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002204d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022054:	50                   	push   eax
c0022055:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022058:	50                   	push   eax
c0022059:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002205d:	50                   	push   eax
c002205e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022062:	50                   	push   eax
c0022063:	51                   	push   ecx
c0022064:	e8 3e fe ff ff       	call   c0021ea7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022069:	83 c4 20             	add    esp,0x20
c002206c:	ba 01 00 00 00       	mov    edx,0x1
c0022071:	84 c0                	test   al,al
c0022073:	74 31                	je     c00220a6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022075:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022079:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022080:	89 03                	mov    DWORD PTR [ebx],eax
c0022082:	ba 00 00 00 00       	mov    edx,0x0
c0022087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002208b:	85 c0                	test   eax,eax
c002208d:	0f 95 06             	setne  BYTE PTR [esi]
c0022090:	74 14                	je     c00220a6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022092:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022098:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002209f:	eb 05                	jmp    c00220a6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220a1:	ba 04 00 00 00       	mov    edx,0x4
c00220a6:	83 c4 14             	add    esp,0x14
c00220a9:	89 d0                	mov    eax,edx
c00220ab:	5b                   	pop    ebx
c00220ac:	5e                   	pop    esi
c00220ad:	c3                   	ret    

c00220ae <ISO9660::openDir(char const*, void**)>:
c00220ae:	57                   	push   edi
c00220af:	56                   	push   esi
c00220b0:	53                   	push   ebx
c00220b1:	83 ec 10             	sub    esp,0x10
c00220b4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220bc:	85 ff                	test   edi,edi
c00220be:	0f 84 95 00 00 00    	je     c0022159 <ISO9660::openDir(char const*, void**)+0xab>
c00220c4:	85 f6                	test   esi,esi
c00220c6:	0f 84 8d 00 00 00    	je     c0022159 <ISO9660::openDir(char const*, void**)+0xab>
c00220cc:	83 ec 0c             	sub    esp,0xc
c00220cf:	6a 1c                	push   0x1c
c00220d1:	e8 6a d7 fe ff       	call   c000f840 <malloc>
c00220d6:	89 07                	mov    DWORD PTR [edi],eax
c00220d8:	89 c3                	mov    ebx,eax
c00220da:	59                   	pop    ecx
c00220db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220df:	50                   	push   eax
c00220e0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220e3:	50                   	push   eax
c00220e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e8:	50                   	push   eax
c00220e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220ed:	50                   	push   eax
c00220ee:	56                   	push   esi
c00220ef:	e8 b3 fd ff ff       	call   c0021ea7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220f4:	83 c4 20             	add    esp,0x20
c00220f7:	84 c0                	test   al,al
c00220f9:	74 07                	je     c0022102 <ISO9660::openDir(char const*, void**)+0x54>
c00220fb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022100:	75 21                	jne    c0022123 <ISO9660::openDir(char const*, void**)+0x75>
c0022102:	0f b6 c0             	movzx  eax,al
c0022105:	52                   	push   edx
c0022106:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002210a:	50                   	push   eax
c002210b:	68 e9 c8 02 c0       	push   0xc002c8e9
c0022110:	e8 bf 0d ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0022115:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022119:	83 c4 10             	add    esp,0x10
c002211c:	b8 01 00 00 00       	mov    eax,0x1
c0022121:	eb 3b                	jmp    c002215e <ISO9660::openDir(char const*, void**)+0xb0>
c0022123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022127:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002212b:	89 03                	mov    DWORD PTR [ebx],eax
c002212d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022138:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002213f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022146:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022149:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022150:	8a 06                	mov    al,BYTE PTR [esi]
c0022152:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022155:	31 c0                	xor    eax,eax
c0022157:	eb 05                	jmp    c002215e <ISO9660::openDir(char const*, void**)+0xb0>
c0022159:	b8 04 00 00 00       	mov    eax,0x4
c002215e:	83 c4 10             	add    esp,0x10
c0022161:	5b                   	pop    ebx
c0022162:	5e                   	pop    esi
c0022163:	5f                   	pop    edi
c0022164:	c3                   	ret    
c0022165:	90                   	nop

c0022166 <ISO9660::ISO9660()>:
c0022166:	83 ec 0c             	sub    esp,0xc
c0022169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216d:	83 ec 0c             	sub    esp,0xc
c0022170:	50                   	push   eax
c0022171:	e8 62 10 ff ff       	call   c00131d8 <Filesystem::Filesystem()>
c0022176:	83 c4 10             	add    esp,0x10
c0022179:	ba 0c c9 02 c0       	mov    edx,0xc002c90c
c002217e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022182:	89 10                	mov    DWORD PTR [eax],edx
c0022184:	90                   	nop
c0022185:	83 c4 0c             	add    esp,0xc
c0022188:	c3                   	ret    
c0022189:	90                   	nop

c002218a <SoundChannel::~SoundChannel()>:
c002218a:	83 ec 0c             	sub    esp,0xc
c002218d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022191:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022194:	83 ec 0c             	sub    esp,0xc
c0022197:	50                   	push   eax
c0022198:	e8 b3 d6 fe ff       	call   c000f850 <free>
c002219d:	83 c4 10             	add    esp,0x10
c00221a0:	90                   	nop
c00221a1:	83 c4 0c             	add    esp,0xc
c00221a4:	c3                   	ret    
c00221a5:	90                   	nop

c00221a6 <SoundChannel::setSpeed(float)>:
c00221a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221ae:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221b1:	c3                   	ret    

c00221b2 <SoundChannel::getSpeed()>:
c00221b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221b9:	c3                   	ret    

c00221ba <SoundChannel::setVolume(int)>:
c00221ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221be:	83 f8 64             	cmp    eax,0x64
c00221c1:	7e 05                	jle    c00221c8 <SoundChannel::setVolume(int)+0xe>
c00221c3:	b8 64 00 00 00       	mov    eax,0x64
c00221c8:	85 c0                	test   eax,eax
c00221ca:	79 02                	jns    c00221ce <SoundChannel::setVolume(int)+0x14>
c00221cc:	31 c0                	xor    eax,eax
c00221ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221d2:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00221d5:	c3                   	ret    

c00221d6 <SoundChannel::getVolume()>:
c00221d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221da:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00221dd:	c3                   	ret    

c00221de <SoundChannel::pause()>:
c00221de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e2:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00221e6:	c3                   	ret    
c00221e7:	90                   	nop

c00221e8 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221e8:	83 ec 1c             	sub    esp,0x1c
c00221eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00221ef:	e8 ea ff ff ff       	call   c00221de <SoundChannel::pause()>
c00221f4:	83 c4 04             	add    esp,0x4
c00221f7:	6a 50                	push   0x50
c00221f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00221fd:	e8 b8 ff ff ff       	call   c00221ba <SoundChannel::setVolume(int)>
c0022202:	83 c4 08             	add    esp,0x8
c0022205:	a1 84 c9 02 c0       	mov    eax,ds:0xc002c984
c002220a:	50                   	push   eax
c002220b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002220f:	e8 92 ff ff ff       	call   c00221a6 <SoundChannel::setSpeed(float)>
c0022214:	83 c4 08             	add    esp,0x8
c0022217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002221b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002221f:	89 10                	mov    DWORD PTR [eax],edx
c0022221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022225:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022229:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002222c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022230:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022234:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022237:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002223c:	75 23                	jne    c0022261 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002223e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022242:	8b 10                	mov    edx,DWORD PTR [eax]
c0022244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002224b:	0f af c2             	imul   eax,edx
c002224e:	85 c0                	test   eax,eax
c0022250:	79 03                	jns    c0022255 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022252:	83 c0 03             	add    eax,0x3
c0022255:	c1 f8 02             	sar    eax,0x2
c0022258:	05 a0 0f 00 00       	add    eax,0xfa0
c002225d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022265:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022269:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002226c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022270:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022286:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022289:	c1 e0 02             	shl    eax,0x2
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	50                   	push   eax
c0022290:	e8 ab d5 fe ff       	call   c000f840 <malloc>
c0022295:	83 c4 10             	add    esp,0x10
c0022298:	89 c2                	mov    edx,eax
c002229a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002229e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222a1:	83 ec 04             	sub    esp,0x4
c00222a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222a8:	50                   	push   eax
c00222a9:	6a 01                	push   0x1
c00222ab:	6a 04                	push   0x4
c00222ad:	e8 ed 68 fe ff       	call   c0008b9f <src_new>
c00222b2:	83 c4 10             	add    esp,0x10
c00222b5:	89 c2                	mov    edx,eax
c00222b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c2:	85 c0                	test   eax,eax
c00222c4:	74 10                	je     c00222d6 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00222c6:	83 ec 0c             	sub    esp,0xc
c00222c9:	68 68 c9 02 c0       	push   0xc002c968
c00222ce:	e8 a2 82 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c00222d3:	83 c4 10             	add    esp,0x10
c00222d6:	a0 40 27 03 c0       	mov    al,ds:0xc0032740
c00222db:	83 f0 01             	xor    eax,0x1
c00222de:	84 c0                	test   al,al
c00222e0:	74 57                	je     c0022339 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00222e2:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00222e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222f3:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00222fb:	7f 35                	jg     c0022332 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00222fd:	83 ec 0c             	sub    esp,0xc
c0022300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022304:	e8 9e 4f 00 00       	call   c00272a7 <__floatsisf>
c0022309:	83 c4 10             	add    esp,0x10
c002230c:	8b 15 88 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c988
c0022312:	83 ec 08             	sub    esp,0x8
c0022315:	52                   	push   edx
c0022316:	50                   	push   eax
c0022317:	e8 9d 4b 00 00       	call   c0026eb9 <__mulsf3>
c002231c:	83 c4 10             	add    esp,0x10
c002231f:	89 c2                	mov    edx,eax
c0022321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022325:	89 14 85 40 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdcc0],edx
c002232c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022330:	eb c1                	jmp    c00222f3 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022332:	c6 05 40 27 03 c0 01 	mov    BYTE PTR ds:0xc0032740,0x1
c0022339:	90                   	nop
c002233a:	83 c4 1c             	add    esp,0x1c
c002233d:	c3                   	ret    

c002233e <SoundChannel::play()>:
c002233e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022342:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022346:	c3                   	ret    
c0022347:	90                   	nop

c0022348 <SoundChannel::paused()>:
c0022348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002234f:	c3                   	ret    

c0022350 <SoundChannel::getSampleRate()>:
c0022350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022354:	8b 00                	mov    eax,DWORD PTR [eax]
c0022356:	c3                   	ret    
c0022357:	90                   	nop

c0022358 <SoundChannel::getBits()>:
c0022358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002235c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002235f:	c3                   	ret    

c0022360 <SoundChannel::getBufferUsed()>:
c0022360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022364:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022367:	c3                   	ret    

c0022368 <SoundChannel::getBufferSize()>:
c0022368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002236f:	c3                   	ret    

c0022370 <SoundChannel::unbuffer(float*, int, int)>:
c0022370:	56                   	push   esi
c0022371:	53                   	push   ebx
c0022372:	83 ec 40             	sub    esp,0x40
c0022375:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022379:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002237c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022380:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022383:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022387:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002238b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002238f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022393:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022397:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002239b:	e8 07 4f 00 00       	call   c00272a7 <__floatsisf>
c00223a0:	5a                   	pop    edx
c00223a1:	89 c6                	mov    esi,eax
c00223a3:	ff 33                	push   DWORD PTR [ebx]
c00223a5:	e8 fd 4e 00 00       	call   c00272a7 <__floatsisf>
c00223aa:	59                   	pop    ecx
c00223ab:	5a                   	pop    edx
c00223ac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223af:	50                   	push   eax
c00223b0:	e8 04 4b 00 00       	call   c0026eb9 <__mulsf3>
c00223b5:	59                   	pop    ecx
c00223b6:	5a                   	pop    edx
c00223b7:	50                   	push   eax
c00223b8:	56                   	push   esi
c00223b9:	e8 be 4c 00 00       	call   c002707c <__divsf3>
c00223be:	89 04 24             	mov    DWORD PTR [esp],eax
c00223c1:	e8 b1 61 00 00       	call   c0028577 <__extendsfdf2>
c00223c6:	59                   	pop    ecx
c00223c7:	5e                   	pop    esi
c00223c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00223d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00223d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00223dc:	50                   	push   eax
c00223dd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00223e0:	e8 af 63 fe ff       	call   c0008794 <src_process>
c00223e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223e9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00223ec:	83 c4 0c             	add    esp,0xc
c00223ef:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00223f2:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00223f5:	29 d0                	sub    eax,edx
c00223f7:	c1 e0 02             	shl    eax,0x2
c00223fa:	50                   	push   eax
c00223fb:	8d 04 91             	lea    eax,[ecx+edx*4]
c00223fe:	50                   	push   eax
c00223ff:	51                   	push   ecx
c0022400:	e8 77 e2 fd ff       	call   c000067c <memmove>
c0022405:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022409:	83 c4 44             	add    esp,0x44
c002240c:	5b                   	pop    ebx
c002240d:	5e                   	pop    esi
c002240e:	c3                   	ret    
c002240f:	90                   	nop

c0022410 <SoundChannel::buffer8(unsigned char*, int)>:
c0022410:	55                   	push   ebp
c0022411:	57                   	push   edi
c0022412:	56                   	push   esi
c0022413:	53                   	push   ebx
c0022414:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022418:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002241c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002241f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022423:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022426:	74 7a                	je     c00224a2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022428:	85 ff                	test   edi,edi
c002242a:	7e 76                	jle    c00224a2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002242c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022430:	8d 70 01             	lea    esi,[eax+0x1]
c0022433:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022436:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022439:	8b 1c 9d 40 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdcc0]
c0022440:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022443:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022446:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022449:	74 5e                	je     c00224a9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002244b:	83 ff 01             	cmp    edi,0x1
c002244e:	74 4b                	je     c002249b <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022450:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022454:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022457:	8d 70 01             	lea    esi,[eax+0x1]
c002245a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002245d:	8b 1c 9d 40 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdcc0]
c0022464:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022467:	b8 02 00 00 00       	mov    eax,0x2
c002246c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002246f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022472:	75 23                	jne    c0022497 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022474:	eb 27                	jmp    c002249d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022476:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002247b:	8d 71 01             	lea    esi,[ecx+0x1]
c002247e:	40                   	inc    eax
c002247f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022482:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022485:	8b 1c 9d 40 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdcc0]
c002248c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002248f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022492:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022495:	74 06                	je     c002249d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022497:	39 c7                	cmp    edi,eax
c0022499:	75 db                	jne    c0022476 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002249b:	89 f8                	mov    eax,edi
c002249d:	5b                   	pop    ebx
c002249e:	5e                   	pop    esi
c002249f:	5f                   	pop    edi
c00224a0:	5d                   	pop    ebp
c00224a1:	c3                   	ret    
c00224a2:	5b                   	pop    ebx
c00224a3:	31 c0                	xor    eax,eax
c00224a5:	5e                   	pop    esi
c00224a6:	5f                   	pop    edi
c00224a7:	5d                   	pop    ebp
c00224a8:	c3                   	ret    
c00224a9:	b8 01 00 00 00       	mov    eax,0x1
c00224ae:	eb ed                	jmp    c002249d <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224b0 <SoundDevice::SoundDevice(char const*)>:
c00224b0:	83 ec 1c             	sub    esp,0x1c
c00224b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224b7:	83 ec 08             	sub    esp,0x8
c00224ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224be:	50                   	push   eax
c00224bf:	e8 26 20 ff ff       	call   c00144ea <Device::Device(char const*)>
c00224c4:	83 c4 10             	add    esp,0x10
c00224c7:	ba 94 c9 02 c0       	mov    edx,0xc002c994
c00224cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224d0:	89 10                	mov    DWORD PTR [eax],edx
c00224d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224d6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00224e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224e4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00224ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224f6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00224fb:	7f 19                	jg     c0022516 <SoundDevice::SoundDevice(char const*)+0x66>
c00224fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022505:	83 c2 54             	add    edx,0x54
c0022508:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022510:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022514:	eb e0                	jmp    c00224f6 <SoundDevice::SoundDevice(char const*)+0x46>
c0022516:	90                   	nop
c0022517:	83 c4 1c             	add    esp,0x1c
c002251a:	c3                   	ret    
c002251b:	90                   	nop

c002251c <SoundDevice::~SoundDevice()>:
c002251c:	53                   	push   ebx
c002251d:	83 ec 18             	sub    esp,0x18
c0022520:	ba 94 c9 02 c0       	mov    edx,0xc002c994
c0022525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022529:	89 10                	mov    DWORD PTR [eax],edx
c002252b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022533:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022538:	7f 46                	jg     c0022580 <SoundDevice::~SoundDevice()+0x64>
c002253a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022542:	83 c2 54             	add    edx,0x54
c0022545:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022549:	85 c0                	test   eax,eax
c002254b:	74 2d                	je     c002257a <SoundDevice::~SoundDevice()+0x5e>
c002254d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022551:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022555:	83 c2 54             	add    edx,0x54
c0022558:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002255c:	85 db                	test   ebx,ebx
c002255e:	74 1a                	je     c002257a <SoundDevice::~SoundDevice()+0x5e>
c0022560:	83 ec 0c             	sub    esp,0xc
c0022563:	53                   	push   ebx
c0022564:	e8 21 fc ff ff       	call   c002218a <SoundChannel::~SoundChannel()>
c0022569:	83 c4 10             	add    esp,0x10
c002256c:	83 ec 08             	sub    esp,0x8
c002256f:	6a 2c                	push   0x2c
c0022571:	53                   	push   ebx
c0022572:	e8 7d 08 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0022577:	83 c4 10             	add    esp,0x10
c002257a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002257e:	eb b3                	jmp    c0022533 <SoundDevice::~SoundDevice()+0x17>
c0022580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022584:	83 ec 0c             	sub    esp,0xc
c0022587:	50                   	push   eax
c0022588:	e8 3f 1c ff ff       	call   c00141cc <Device::~Device()>
c002258d:	83 c4 10             	add    esp,0x10
c0022590:	90                   	nop
c0022591:	83 c4 18             	add    esp,0x18
c0022594:	5b                   	pop    ebx
c0022595:	c3                   	ret    

c0022596 <SoundDevice::~SoundDevice()>:
c0022596:	83 ec 0c             	sub    esp,0xc
c0022599:	83 ec 0c             	sub    esp,0xc
c002259c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225a0:	e8 77 ff ff ff       	call   c002251c <SoundDevice::~SoundDevice()>
c00225a5:	83 c4 10             	add    esp,0x10
c00225a8:	83 ec 08             	sub    esp,0x8
c00225ab:	68 e4 01 00 00       	push   0x1e4
c00225b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225b4:	e8 3b 08 ff ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00225b9:	83 c4 10             	add    esp,0x10
c00225bc:	83 c4 0c             	add    esp,0xc
c00225bf:	c3                   	ret    

c00225c0 <SoundDevice::getFreeChannelNum()>:
c00225c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225c4:	31 c0                	xor    eax,eax
c00225c6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00225ce:	74 09                	je     c00225d9 <SoundDevice::getFreeChannelNum()+0x19>
c00225d0:	40                   	inc    eax
c00225d1:	83 f8 20             	cmp    eax,0x20
c00225d4:	75 f0                	jne    c00225c6 <SoundDevice::getFreeChannelNum()+0x6>
c00225d6:	83 c8 ff             	or     eax,0xffffffff
c00225d9:	c3                   	ret    

c00225da <SoundDevice::addChannel(SoundChannel*)>:
c00225da:	56                   	push   esi
c00225db:	53                   	push   ebx
c00225dc:	51                   	push   ecx
c00225dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00225e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00225e5:	53                   	push   ebx
c00225e6:	e8 d5 ff ff ff       	call   c00225c0 <SoundDevice::getFreeChannelNum()>
c00225eb:	5a                   	pop    edx
c00225ec:	83 f8 ff             	cmp    eax,0xffffffff
c00225ef:	74 51                	je     c0022642 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225f1:	85 f6                	test   esi,esi
c00225f3:	74 4d                	je     c0022642 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225f5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00225fc:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022603:	75 30                	jne    c0022635 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022605:	83 ec 0c             	sub    esp,0xc
c0022608:	56                   	push   esi
c0022609:	e8 42 fd ff ff       	call   c0022350 <SoundChannel::getSampleRate()>
c002260e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022614:	89 34 24             	mov    DWORD PTR [esp],esi
c0022617:	e8 3c fd ff ff       	call   c0022358 <SoundChannel::getBits()>
c002261c:	83 c4 0c             	add    esp,0xc
c002261f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022625:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022627:	50                   	push   eax
c0022628:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002262e:	53                   	push   ebx
c002262f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022632:	83 c4 10             	add    esp,0x10
c0022635:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002263b:	b8 01 00 00 00       	mov    eax,0x1
c0022640:	eb 03                	jmp    c0022645 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022642:	83 c8 ff             	or     eax,0xffffffff
c0022645:	5a                   	pop    edx
c0022646:	5b                   	pop    ebx
c0022647:	5e                   	pop    esi
c0022648:	c3                   	ret    
c0022649:	90                   	nop

c002264a <SoundDevice::removeChannel(int)>:
c002264a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002264e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022652:	83 fa 1f             	cmp    edx,0x1f
c0022655:	77 23                	ja     c002267a <SoundDevice::removeChannel(int)+0x30>
c0022657:	8d 14 90             	lea    edx,[eax+edx*4]
c002265a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022661:	74 17                	je     c002267a <SoundDevice::removeChannel(int)+0x30>
c0022663:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002266d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022673:	75 05                	jne    c002267a <SoundDevice::removeChannel(int)+0x30>
c0022675:	8b 00                	mov    eax,DWORD PTR [eax]
c0022677:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002267a:	c3                   	ret    
c002267b:	90                   	nop

c002267c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002267c:	57                   	push   edi
c002267d:	56                   	push   esi
c002267e:	53                   	push   ebx
c002267f:	31 db                	xor    ebx,ebx
c0022681:	83 ec 10             	sub    esp,0x10
c0022684:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022688:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002268c:	0f 8d cb 00 00 00    	jge    c002275d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022692:	83 ec 0c             	sub    esp,0xc
c0022695:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022699:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002269c:	e8 d6 5e 00 00       	call   c0028577 <__extendsfdf2>
c00226a1:	83 c4 10             	add    esp,0x10
c00226a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226ac:	68 00 00 f0 3f       	push   0x3ff00000
c00226b1:	6a 00                	push   0x0
c00226b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226bb:	e8 43 4e 00 00       	call   c0027503 <__adddf3>
c00226c0:	83 c4 10             	add    esp,0x10
c00226c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226cb:	68 00 00 e0 3f       	push   0x3fe00000
c00226d0:	6a 00                	push   0x0
c00226d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226da:	e8 a1 54 00 00       	call   c0027b80 <__muldf3>
c00226df:	83 c4 10             	add    esp,0x10
c00226e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226ea:	68 00 00 60 40       	push   0x40600000
c00226ef:	6a 00                	push   0x0
c00226f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f9:	e8 82 54 00 00       	call   c0027b80 <__muldf3>
c00226fe:	59                   	pop    ecx
c00226ff:	5f                   	pop    edi
c0022700:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022704:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022708:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022710:	e8 3e 5d 00 00       	call   c0028453 <__truncdfsf2>
c0022715:	5a                   	pop    edx
c0022716:	89 c7                	mov    edi,eax
c0022718:	59                   	pop    ecx
c0022719:	68 00 00 fe 42       	push   0x42fe0000
c002271e:	50                   	push   eax
c002271f:	e8 d9 4d 00 00       	call   c00274fd <__gesf2>
c0022724:	83 c4 10             	add    esp,0x10
c0022727:	85 c0                	test   eax,eax
c0022729:	78 06                	js     c0022731 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002272b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002272f:	eb 26                	jmp    c0022757 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022731:	50                   	push   eax
c0022732:	50                   	push   eax
c0022733:	6a 00                	push   0x0
c0022735:	57                   	push   edi
c0022736:	e8 c6 4d 00 00       	call   c0027501 <__lesf2>
c002273b:	83 c4 10             	add    esp,0x10
c002273e:	85 c0                	test   eax,eax
c0022740:	7f 06                	jg     c0022748 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022742:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022746:	eb 0f                	jmp    c0022757 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022748:	83 ec 0c             	sub    esp,0xc
c002274b:	57                   	push   edi
c002274c:	e8 bb 5e 00 00       	call   c002860c <lrintf>
c0022751:	83 c4 10             	add    esp,0x10
c0022754:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022757:	43                   	inc    ebx
c0022758:	e9 2b ff ff ff       	jmp    c0022688 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002275d:	83 c4 10             	add    esp,0x10
c0022760:	5b                   	pop    ebx
c0022761:	5e                   	pop    esi
c0022762:	5f                   	pop    edi
c0022763:	c3                   	ret    

c0022764 <SoundDevice::getAudio(int, float*, float*)>:
c0022764:	55                   	push   ebp
c0022765:	57                   	push   edi
c0022766:	56                   	push   esi
c0022767:	53                   	push   ebx
c0022768:	31 db                	xor    ebx,ebx
c002276a:	83 ec 20             	sub    esp,0x20
c002276d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022771:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022775:	c1 e0 02             	shl    eax,0x2
c0022778:	50                   	push   eax
c0022779:	6a 00                	push   0x0
c002277b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002277f:	e8 f4 df fd ff       	call   c0000778 <memset>
c0022784:	83 c4 10             	add    esp,0x10
c0022787:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002278b:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022792:	85 c0                	test   eax,eax
c0022794:	0f 84 d7 00 00 00    	je     c0022871 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002279a:	83 ec 0c             	sub    esp,0xc
c002279d:	50                   	push   eax
c002279e:	e8 a5 fb ff ff       	call   c0022348 <SoundChannel::paused()>
c00227a3:	83 c4 10             	add    esp,0x10
c00227a6:	84 c0                	test   al,al
c00227a8:	0f 85 c3 00 00 00    	jne    c0022871 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227ae:	83 ec 0c             	sub    esp,0xc
c00227b1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227b8:	e8 19 fa ff ff       	call   c00221d6 <SoundChannel::getVolume()>
c00227bd:	83 c4 10             	add    esp,0x10
c00227c0:	85 c0                	test   eax,eax
c00227c2:	0f 84 a9 00 00 00    	je     c0022871 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227c8:	83 ec 0c             	sub    esp,0xc
c00227cb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227d2:	e8 ff f9 ff ff       	call   c00221d6 <SoundChannel::getVolume()>
c00227d7:	83 ec 0c             	sub    esp,0xc
c00227da:	50                   	push   eax
c00227db:	e8 c7 4a 00 00       	call   c00272a7 <__floatsisf>
c00227e0:	59                   	pop    ecx
c00227e1:	5d                   	pop    ebp
c00227e2:	31 ed                	xor    ebp,ebp
c00227e4:	68 00 00 c8 42       	push   0x42c80000
c00227e9:	50                   	push   eax
c00227ea:	e8 8d 48 00 00       	call   c002707c <__divsf3>
c00227ef:	83 c4 10             	add    esp,0x10
c00227f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00227f6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00227fa:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022800:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022804:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002280b:	e8 60 fb ff ff       	call   c0022370 <SoundChannel::unbuffer(float*, int, int)>
c0022810:	83 c4 20             	add    esp,0x20
c0022813:	89 c1                	mov    ecx,eax
c0022815:	39 cd                	cmp    ebp,ecx
c0022817:	7d 52                	jge    c002286b <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022819:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002281d:	50                   	push   eax
c002281e:	50                   	push   eax
c002281f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022823:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002282a:	e8 8a 46 00 00       	call   c0026eb9 <__mulsf3>
c002282f:	5a                   	pop    edx
c0022830:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022834:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002283a:	e8 68 4a 00 00       	call   c00272a7 <__floatsisf>
c002283f:	59                   	pop    ecx
c0022840:	5a                   	pop    edx
c0022841:	50                   	push   eax
c0022842:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022846:	e8 31 48 00 00       	call   c002707c <__divsf3>
c002284b:	59                   	pop    ecx
c002284c:	5a                   	pop    edx
c002284d:	50                   	push   eax
c002284e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022852:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022855:	e8 3c 43 00 00       	call   c0026b96 <__addsf3>
c002285a:	83 c4 10             	add    esp,0x10
c002285d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022861:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022865:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022868:	45                   	inc    ebp
c0022869:	eb aa                	jmp    c0022815 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002286b:	39 cf                	cmp    edi,ecx
c002286d:	7e 02                	jle    c0022871 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002286f:	89 cf                	mov    edi,ecx
c0022871:	43                   	inc    ebx
c0022872:	83 fb 20             	cmp    ebx,0x20
c0022875:	0f 85 10 ff ff ff    	jne    c002278b <SoundDevice::getAudio(int, float*, float*)+0x27>
c002287b:	83 c4 1c             	add    esp,0x1c
c002287e:	89 f8                	mov    eax,edi
c0022880:	5b                   	pop    ebx
c0022881:	5e                   	pop    esi
c0022882:	5f                   	pop    edi
c0022883:	5d                   	pop    ebp
c0022884:	c3                   	ret    
c0022885:	90                   	nop

c0022886 <PCI::open(int, int, void*)>:
c0022886:	83 ec 18             	sub    esp,0x18
c0022889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002288d:	8b 10                	mov    edx,DWORD PTR [eax]
c002288f:	50                   	push   eax
c0022890:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022893:	31 c0                	xor    eax,eax
c0022895:	83 c4 1c             	add    esp,0x1c
c0022898:	c3                   	ret    
c0022899:	90                   	nop

c002289a <PCI::close(int, int, void*)>:
c002289a:	31 c0                	xor    eax,eax
c002289c:	c3                   	ret    
c002289d:	90                   	nop

c002289e <PCI::PCI()>:
c002289e:	83 ec 0c             	sub    esp,0xc
c00228a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a5:	83 ec 08             	sub    esp,0x8
c00228a8:	68 c4 c9 02 c0       	push   0xc002c9c4
c00228ad:	50                   	push   eax
c00228ae:	e8 bb 12 ff ff       	call   c0013b6e <Bus::Bus(char const*)>
c00228b3:	83 c4 10             	add    esp,0x10
c00228b6:	ba 30 ca 02 c0       	mov    edx,0xc002ca30
c00228bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bf:	89 10                	mov    DWORD PTR [eax],edx
c00228c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228cb:	0f b6 d0             	movzx  edx,al
c00228ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00228d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228e3:	0f b6 d0             	movzx  edx,al
c00228e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ea:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00228ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228f9:	8d 50 01             	lea    edx,[eax+0x1]
c00228fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022900:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022906:	0f b6 d0             	movzx  edx,al
c0022909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022911:	83 c9 c0             	or     ecx,0xffffffc0
c0022914:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022918:	90                   	nop
c0022919:	83 c4 0c             	add    esp,0xc
c002291c:	c3                   	ret    
c002291d:	90                   	nop

c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002291e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022922:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022927:	89 ca                	mov    edx,ecx
c0022929:	c1 e0 10             	shl    eax,0x10
c002292c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022932:	09 d0                	or     eax,edx
c0022934:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022939:	c1 e2 08             	shl    edx,0x8
c002293c:	09 d0                	or     eax,edx
c002293e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022943:	c1 e2 0b             	shl    edx,0xb
c0022946:	09 d0                	or     eax,edx
c0022948:	ba f8 0c 00 00       	mov    edx,0xcf8
c002294d:	0d 00 00 00 80       	or     eax,0x80000000
c0022952:	ef                   	out    dx,eax
c0022953:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022958:	ed                   	in     eax,dx
c0022959:	83 e1 02             	and    ecx,0x2
c002295c:	0f b6 c9             	movzx  ecx,cl
c002295f:	c1 e1 03             	shl    ecx,0x3
c0022962:	d3 e8                	shr    eax,cl
c0022964:	c3                   	ret    
c0022965:	90                   	nop

c0022966 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022966:	6a 00                	push   0x0
c0022968:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002296d:	50                   	push   eax
c002296e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022973:	50                   	push   eax
c0022974:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022979:	50                   	push   eax
c002297a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002297e:	e8 9b ff ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022983:	83 c4 14             	add    esp,0x14
c0022986:	c3                   	ret    
c0022987:	90                   	nop

c0022988 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022988:	6a 0e                	push   0xe
c002298a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002298f:	50                   	push   eax
c0022990:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022995:	50                   	push   eax
c0022996:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002299b:	50                   	push   eax
c002299c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a0:	e8 79 ff ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229a5:	83 c4 14             	add    esp,0x14
c00229a8:	0f b6 c0             	movzx  eax,al
c00229ab:	c3                   	ret    

c00229ac <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229ac:	55                   	push   ebp
c00229ad:	57                   	push   edi
c00229ae:	56                   	push   esi
c00229af:	53                   	push   ebx
c00229b0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229b5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229ba:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229bf:	6a 0a                	push   0xa
c00229c1:	56                   	push   esi
c00229c2:	55                   	push   ebp
c00229c3:	57                   	push   edi
c00229c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229c8:	e8 51 ff ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229cd:	6a 0a                	push   0xa
c00229cf:	89 c3                	mov    ebx,eax
c00229d1:	56                   	push   esi
c00229d2:	0f b6 db             	movzx  ebx,bl
c00229d5:	55                   	push   ebp
c00229d6:	57                   	push   edi
c00229d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00229db:	e8 3e ff ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229e0:	83 c4 28             	add    esp,0x28
c00229e3:	25 00 ff 00 00       	and    eax,0xff00
c00229e8:	09 d8                	or     eax,ebx
c00229ea:	5b                   	pop    ebx
c00229eb:	5e                   	pop    esi
c00229ec:	5f                   	pop    edi
c00229ed:	5d                   	pop    ebp
c00229ee:	c3                   	ret    
c00229ef:	90                   	nop

c00229f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00229f0:	6a 08                	push   0x8
c00229f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f7:	50                   	push   eax
c00229f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fd:	50                   	push   eax
c00229fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a03:	50                   	push   eax
c0022a04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a08:	e8 11 ff ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a0d:	83 c4 14             	add    esp,0x14
c0022a10:	0f b6 c4             	movzx  eax,ah
c0022a13:	c3                   	ret    

c0022a14 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a14:	6a 08                	push   0x8
c0022a16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1b:	50                   	push   eax
c0022a1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a21:	50                   	push   eax
c0022a22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a27:	50                   	push   eax
c0022a28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a2c:	e8 ed fe ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a31:	83 c4 14             	add    esp,0x14
c0022a34:	c3                   	ret    
c0022a35:	90                   	nop

c0022a36 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a36:	6a 3c                	push   0x3c
c0022a38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3d:	50                   	push   eax
c0022a3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a43:	50                   	push   eax
c0022a44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a49:	50                   	push   eax
c0022a4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a4e:	e8 cb fe ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a53:	83 c4 14             	add    esp,0x14
c0022a56:	c3                   	ret    
c0022a57:	90                   	nop

c0022a58 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a58:	6a 18                	push   0x18
c0022a5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5f:	50                   	push   eax
c0022a60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a65:	50                   	push   eax
c0022a66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6b:	50                   	push   eax
c0022a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a70:	e8 a9 fe ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a75:	83 c4 14             	add    esp,0x14
c0022a78:	0f b6 c4             	movzx  eax,ah
c0022a7b:	c3                   	ret    

c0022a7c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a7c:	55                   	push   ebp
c0022a7d:	57                   	push   edi
c0022a7e:	56                   	push   esi
c0022a7f:	53                   	push   ebx
c0022a80:	50                   	push   eax
c0022a81:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022a85:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022a8a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022a8f:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022a94:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022a9b:	8d 43 12             	lea    eax,[ebx+0x12]
c0022a9e:	83 c3 10             	add    ebx,0x10
c0022aa1:	0f b6 c0             	movzx  eax,al
c0022aa4:	0f b6 db             	movzx  ebx,bl
c0022aa7:	50                   	push   eax
c0022aa8:	51                   	push   ecx
c0022aa9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022aad:	57                   	push   edi
c0022aae:	55                   	push   ebp
c0022aaf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022ab3:	e8 66 fe ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab8:	53                   	push   ebx
c0022ab9:	89 c6                	mov    esi,eax
c0022abb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022abf:	c1 e6 10             	shl    esi,0x10
c0022ac2:	51                   	push   ecx
c0022ac3:	57                   	push   edi
c0022ac4:	55                   	push   ebp
c0022ac5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ac9:	e8 50 fe ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ace:	83 c4 2c             	add    esp,0x2c
c0022ad1:	0f b7 c0             	movzx  eax,ax
c0022ad4:	5b                   	pop    ebx
c0022ad5:	09 f0                	or     eax,esi
c0022ad7:	5e                   	pop    esi
c0022ad8:	5f                   	pop    edi
c0022ad9:	5d                   	pop    ebp
c0022ada:	c3                   	ret    
c0022adb:	90                   	nop

c0022adc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022adc:	53                   	push   ebx
c0022add:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ae2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022ae7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022aeb:	c1 e1 10             	shl    ecx,0x10
c0022aee:	25 fc 00 00 00       	and    eax,0xfc
c0022af3:	09 c1                	or     ecx,eax
c0022af5:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afa:	c1 e0 08             	shl    eax,0x8
c0022afd:	09 c1                	or     ecx,eax
c0022aff:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b04:	c1 e0 0b             	shl    eax,0xb
c0022b07:	09 c1                	or     ecx,eax
c0022b09:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b0f:	89 c8                	mov    eax,ecx
c0022b11:	ef                   	out    dx,eax
c0022b12:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b17:	ed                   	in     eax,dx
c0022b18:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b1d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b22:	74 0a                	je     c0022b2e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b24:	0f b7 d8             	movzx  ebx,ax
c0022b27:	89 d0                	mov    eax,edx
c0022b29:	c1 e0 10             	shl    eax,0x10
c0022b2c:	eb 05                	jmp    c0022b33 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b2e:	66 31 c0             	xor    ax,ax
c0022b31:	89 d3                	mov    ebx,edx
c0022b33:	09 c3                	or     ebx,eax
c0022b35:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b3a:	89 c8                	mov    eax,ecx
c0022b3c:	ef                   	out    dx,eax
c0022b3d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b42:	89 d8                	mov    eax,ebx
c0022b44:	ef                   	out    dx,eax
c0022b45:	5b                   	pop    ebx
c0022b46:	c3                   	ret    
c0022b47:	90                   	nop

c0022b48 <PCI::checkBus(unsigned char)>:
c0022b48:	56                   	push   esi
c0022b49:	53                   	push   ebx
c0022b4a:	31 db                	xor    ebx,ebx
c0022b4c:	51                   	push   ecx
c0022b4d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b52:	52                   	push   edx
c0022b53:	53                   	push   ebx
c0022b54:	43                   	inc    ebx
c0022b55:	56                   	push   esi
c0022b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b5a:	e8 2b 03 00 00       	call   c0022e8a <PCI::checkDevice(unsigned char, unsigned char)>
c0022b5f:	83 c4 10             	add    esp,0x10
c0022b62:	83 fb 20             	cmp    ebx,0x20
c0022b65:	75 eb                	jne    c0022b52 <PCI::checkBus(unsigned char)+0xa>
c0022b67:	58                   	pop    eax
c0022b68:	5b                   	pop    ebx
c0022b69:	5e                   	pop    esi
c0022b6a:	c3                   	ret    
c0022b6b:	90                   	nop

c0022b6c <PCI::foundDevice(PCIDeviceInfo)>:
c0022b6c:	55                   	push   ebp
c0022b6d:	57                   	push   edi
c0022b6e:	56                   	push   esi
c0022b6f:	53                   	push   ebx
c0022b70:	83 ec 1c             	sub    esp,0x1c
c0022b73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b77:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b7d:	0f 84 52 01 00 00    	je     c0022cd5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b83:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b87:	66 81 f9 06 04       	cmp    cx,0x406
c0022b8c:	75 2c                	jne    c0022bba <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b8e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b93:	50                   	push   eax
c0022b94:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b99:	50                   	push   eax
c0022b9a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b9f:	50                   	push   eax
c0022ba0:	56                   	push   esi
c0022ba1:	e8 b2 fe ff ff       	call   c0022a58 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ba6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022baa:	0f b6 c0             	movzx  eax,al
c0022bad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bb1:	83 c4 2c             	add    esp,0x2c
c0022bb4:	5b                   	pop    ebx
c0022bb5:	5e                   	pop    esi
c0022bb6:	5f                   	pop    edi
c0022bb7:	5d                   	pop    ebp
c0022bb8:	eb 8e                	jmp    c0022b48 <PCI::checkBus(unsigned char)>
c0022bba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bbe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bc8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bcc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022bd0:	88 d3                	mov    bl,dl
c0022bd2:	85 c0                	test   eax,eax
c0022bd4:	74 33                	je     c0022c09 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022bd6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022bd9:	85 d2                	test   edx,edx
c0022bdb:	74 28                	je     c0022c05 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bdd:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022be3:	31 ef                	xor    edi,ebp
c0022be5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022beb:	75 18                	jne    c0022c05 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022bf1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022bf7:	75 0c                	jne    c0022c05 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bf9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022bff:	0f 84 d0 00 00 00    	je     c0022cd5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c07:	eb c9                	jmp    c0022bd2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c09:	66 81 f9 01 06       	cmp    cx,0x601
c0022c0e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c12:	75 19                	jne    c0022c2d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c14:	83 ec 0c             	sub    esp,0xc
c0022c17:	68 64 01 00 00       	push   0x164
c0022c1c:	e8 1f cc fe ff       	call   c000f840 <malloc>
c0022c21:	89 c5                	mov    ebp,eax
c0022c23:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c26:	e8 95 0f 00 00       	call   c0023bc0 <SATABus::SATABus()>
c0022c2b:	eb 1e                	jmp    c0022c4b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c2d:	66 81 f9 01 01       	cmp    cx,0x101
c0022c32:	75 60                	jne    c0022c94 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c34:	83 ec 0c             	sub    esp,0xc
c0022c37:	68 70 02 00 00       	push   0x270
c0022c3c:	e8 ff cb fe ff       	call   c000f840 <malloc>
c0022c41:	89 c5                	mov    ebp,eax
c0022c43:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c46:	e8 03 03 00 00       	call   c0022f4e <IDE::IDE()>
c0022c4b:	58                   	pop    eax
c0022c4c:	5a                   	pop    edx
c0022c4d:	55                   	push   ebp
c0022c4e:	56                   	push   esi
c0022c4f:	e8 a6 16 ff ff       	call   c00142fa <Device::addChild(Device*)>
c0022c54:	83 ec 1c             	sub    esp,0x1c
c0022c57:	b9 09 00 00 00       	mov    ecx,0x9
c0022c5c:	fc                   	cld    
c0022c5d:	89 e7                	mov    edi,esp
c0022c5f:	89 de                	mov    esi,ebx
c0022c61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c63:	55                   	push   ebp
c0022c64:	e8 9b 15 ff ff       	call   c0014204 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c6c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c70:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c78:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c80:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c8b:	83 c4 4c             	add    esp,0x4c
c0022c8e:	5b                   	pop    ebx
c0022c8f:	5e                   	pop    esi
c0022c90:	5f                   	pop    edi
c0022c91:	5d                   	pop    ebp
c0022c92:	ff e0                	jmp    eax
c0022c94:	83 ec 0c             	sub    esp,0xc
c0022c97:	68 58 01 00 00       	push   0x158
c0022c9c:	e8 9f cb fe ff       	call   c000f840 <malloc>
c0022ca1:	89 c5                	mov    ebp,eax
c0022ca3:	58                   	pop    eax
c0022ca4:	5a                   	pop    edx
c0022ca5:	68 cc c9 02 c0       	push   0xc002c9cc
c0022caa:	55                   	push   ebp
c0022cab:	e8 40 19 ff ff       	call   c00145f0 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cb0:	59                   	pop    ecx
c0022cb1:	5f                   	pop    edi
c0022cb2:	55                   	push   ebp
c0022cb3:	56                   	push   esi
c0022cb4:	e8 41 16 ff ff       	call   c00142fa <Device::addChild(Device*)>
c0022cb9:	b9 09 00 00 00       	mov    ecx,0x9
c0022cbe:	fc                   	cld    
c0022cbf:	89 df                	mov    edi,ebx
c0022cc1:	89 de                	mov    esi,ebx
c0022cc3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cc5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022cc9:	83 c4 2c             	add    esp,0x2c
c0022ccc:	5b                   	pop    ebx
c0022ccd:	5e                   	pop    esi
c0022cce:	5f                   	pop    edi
c0022ccf:	5d                   	pop    ebp
c0022cd0:	e9 2f 15 ff ff       	jmp    c0014204 <Device::preOpenPCI(PCIDeviceInfo)>
c0022cd5:	83 c4 1c             	add    esp,0x1c
c0022cd8:	5b                   	pop    ebx
c0022cd9:	5e                   	pop    esi
c0022cda:	5f                   	pop    edi
c0022cdb:	5d                   	pop    ebp
c0022cdc:	c3                   	ret    
c0022cdd:	90                   	nop

c0022cde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022cde:	55                   	push   ebp
c0022cdf:	57                   	push   edi
c0022ce0:	56                   	push   esi
c0022ce1:	53                   	push   ebx
c0022ce2:	83 ec 5c             	sub    esp,0x5c
c0022ce5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022ce9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ced:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022cf1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022cf6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022cfa:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022cfe:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d07:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d0c:	6a 0c                	push   0xc
c0022d0e:	55                   	push   ebp
c0022d0f:	53                   	push   ebx
c0022d10:	57                   	push   edi
c0022d11:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d18:	e8 01 fc ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d1d:	55                   	push   ebp
c0022d1e:	53                   	push   ebx
c0022d1f:	57                   	push   edi
c0022d20:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d27:	e8 80 fc ff ff       	call   c00229ac <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d2c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d31:	83 c4 24             	add    esp,0x24
c0022d34:	55                   	push   ebp
c0022d35:	53                   	push   ebx
c0022d36:	57                   	push   edi
c0022d37:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d3b:	e8 f6 fc ff ff       	call   c0022a36 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d40:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d44:	6a 3c                	push   0x3c
c0022d46:	55                   	push   ebp
c0022d47:	53                   	push   ebx
c0022d48:	57                   	push   edi
c0022d49:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d50:	e8 c9 fb ff ff       	call   c002291e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d55:	0f b6 c4             	movzx  eax,ah
c0022d58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d5c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d60:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d64:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0022d69:	83 c4 24             	add    esp,0x24
c0022d6c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d72:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d79:	74 6c                	je     c0022de7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d7b:	31 f6                	xor    esi,esi
c0022d7d:	8b 15 e8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3e8
c0022d83:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d89:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022d8f:	7e 56                	jle    c0022de7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d91:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022d94:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d9b:	39 cb                	cmp    ebx,ecx
c0022d9d:	75 45                	jne    c0022de4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d9f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022da6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022daa:	75 38                	jne    c0022de4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dac:	83 ec 0c             	sub    esp,0xc
c0022daf:	68 e6 c9 02 c0       	push   0xc002c9e6
c0022db4:	e8 1b 01 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0022db9:	8b 15 e8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3e8
c0022dbf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dc5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022dcd:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022dd1:	52                   	push   edx
c0022dd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022dd6:	53                   	push   ebx
c0022dd7:	68 0b ca 02 c0       	push   0xc002ca0b
c0022ddc:	e8 f3 00 ff ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0022de1:	83 c4 20             	add    esp,0x20
c0022de4:	46                   	inc    esi
c0022de5:	eb 96                	jmp    c0022d7d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022de7:	31 d2                	xor    edx,edx
c0022de9:	83 ec 0c             	sub    esp,0xc
c0022dec:	55                   	push   ebp
c0022ded:	53                   	push   ebx
c0022dee:	57                   	push   edi
c0022def:	52                   	push   edx
c0022df0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022df4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022dfb:	e8 7c fc ff ff       	call   c0022a7c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e00:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e08:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e0c:	42                   	inc    edx
c0022e0d:	83 c4 20             	add    esp,0x20
c0022e10:	83 fa 06             	cmp    edx,0x6
c0022e13:	75 d4                	jne    c0022de9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e15:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e19:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e1d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e21:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e25:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e29:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e2d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e32:	86 e0                	xchg   al,ah
c0022e34:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e39:	55                   	push   ebp
c0022e3a:	53                   	push   ebx
c0022e3b:	57                   	push   edi
c0022e3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e40:	e8 ab fb ff ff       	call   c00229f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e45:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e49:	55                   	push   ebp
c0022e4a:	53                   	push   ebx
c0022e4b:	57                   	push   edi
c0022e4c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e53:	e8 0e fb ff ff       	call   c0022966 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e58:	83 ec 0c             	sub    esp,0xc
c0022e5b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e60:	b9 09 00 00 00       	mov    ecx,0x9
c0022e65:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e69:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e6d:	fc                   	cld    
c0022e6e:	89 e7                	mov    edi,esp
c0022e70:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e72:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022e79:	e8 ee fc ff ff       	call   c0022b6c <PCI::foundDevice(PCIDeviceInfo)>
c0022e7e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e84:	5b                   	pop    ebx
c0022e85:	5e                   	pop    esi
c0022e86:	5f                   	pop    edi
c0022e87:	5d                   	pop    ebp
c0022e88:	c3                   	ret    
c0022e89:	90                   	nop

c0022e8a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e8a:	55                   	push   ebp
c0022e8b:	57                   	push   edi
c0022e8c:	56                   	push   esi
c0022e8d:	53                   	push   ebx
c0022e8e:	83 ec 0c             	sub    esp,0xc
c0022e91:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e95:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e9a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e9f:	6a 00                	push   0x0
c0022ea1:	56                   	push   esi
c0022ea2:	57                   	push   edi
c0022ea3:	55                   	push   ebp
c0022ea4:	e8 bd fa ff ff       	call   c0022966 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ea9:	6a 00                	push   0x0
c0022eab:	56                   	push   esi
c0022eac:	57                   	push   edi
c0022ead:	55                   	push   ebp
c0022eae:	e8 2b fe ff ff       	call   c0022cde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022eb3:	83 c4 20             	add    esp,0x20
c0022eb6:	6a 00                	push   0x0
c0022eb8:	56                   	push   esi
c0022eb9:	57                   	push   edi
c0022eba:	55                   	push   ebp
c0022ebb:	e8 c8 fa ff ff       	call   c0022988 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ec0:	83 c4 10             	add    esp,0x10
c0022ec3:	84 c0                	test   al,al
c0022ec5:	79 27                	jns    c0022eee <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ec7:	bb 01 00 00 00       	mov    ebx,0x1
c0022ecc:	53                   	push   ebx
c0022ecd:	56                   	push   esi
c0022ece:	57                   	push   edi
c0022ecf:	55                   	push   ebp
c0022ed0:	e8 91 fa ff ff       	call   c0022966 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ed5:	83 c4 10             	add    esp,0x10
c0022ed8:	66 40                	inc    ax
c0022eda:	74 0c                	je     c0022ee8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022edc:	53                   	push   ebx
c0022edd:	56                   	push   esi
c0022ede:	57                   	push   edi
c0022edf:	55                   	push   ebp
c0022ee0:	e8 f9 fd ff ff       	call   c0022cde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ee5:	83 c4 10             	add    esp,0x10
c0022ee8:	43                   	inc    ebx
c0022ee9:	83 fb 08             	cmp    ebx,0x8
c0022eec:	75 de                	jne    c0022ecc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022eee:	83 c4 0c             	add    esp,0xc
c0022ef1:	5b                   	pop    ebx
c0022ef2:	5e                   	pop    esi
c0022ef3:	5f                   	pop    edi
c0022ef4:	5d                   	pop    ebp
c0022ef5:	c3                   	ret    

c0022ef6 <PCI::detect()>:
c0022ef6:	56                   	push   esi
c0022ef7:	53                   	push   ebx
c0022ef8:	53                   	push   ebx
c0022ef9:	31 db                	xor    ebx,ebx
c0022efb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022eff:	6a 00                	push   0x0
c0022f01:	6a 00                	push   0x0
c0022f03:	6a 00                	push   0x0
c0022f05:	56                   	push   esi
c0022f06:	e8 7d fa ff ff       	call   c0022988 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f0b:	83 c4 10             	add    esp,0x10
c0022f0e:	a8 80                	test   al,0x80
c0022f10:	75 21                	jne    c0022f33 <PCI::detect()+0x3d>
c0022f12:	51                   	push   ecx
c0022f13:	51                   	push   ecx
c0022f14:	6a 00                	push   0x0
c0022f16:	56                   	push   esi
c0022f17:	e8 2c fc ff ff       	call   c0022b48 <PCI::checkBus(unsigned char)>
c0022f1c:	83 c4 10             	add    esp,0x10
c0022f1f:	eb 24                	jmp    c0022f45 <PCI::detect()+0x4f>
c0022f21:	52                   	push   edx
c0022f22:	52                   	push   edx
c0022f23:	53                   	push   ebx
c0022f24:	43                   	inc    ebx
c0022f25:	56                   	push   esi
c0022f26:	e8 1d fc ff ff       	call   c0022b48 <PCI::checkBus(unsigned char)>
c0022f2b:	83 c4 10             	add    esp,0x10
c0022f2e:	83 fb 08             	cmp    ebx,0x8
c0022f31:	74 12                	je     c0022f45 <PCI::detect()+0x4f>
c0022f33:	53                   	push   ebx
c0022f34:	6a 00                	push   0x0
c0022f36:	6a 00                	push   0x0
c0022f38:	56                   	push   esi
c0022f39:	e8 28 fa ff ff       	call   c0022966 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f3e:	83 c4 10             	add    esp,0x10
c0022f41:	66 40                	inc    ax
c0022f43:	74 dc                	je     c0022f21 <PCI::detect()+0x2b>
c0022f45:	58                   	pop    eax
c0022f46:	5b                   	pop    ebx
c0022f47:	5e                   	pop    esi
c0022f48:	c3                   	ret    
c0022f49:	90                   	nop

c0022f4a <IDE::close(int, int, void*)>:
c0022f4a:	83 c8 ff             	or     eax,0xffffffff
c0022f4d:	c3                   	ret    

c0022f4e <IDE::IDE()>:
c0022f4e:	83 ec 0c             	sub    esp,0xc
c0022f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f55:	83 ec 08             	sub    esp,0x8
c0022f58:	68 54 ca 02 c0       	push   0xc002ca54
c0022f5d:	50                   	push   eax
c0022f5e:	e8 23 17 ff ff       	call   c0014686 <HardDiskController::HardDiskController(char const*)>
c0022f63:	83 c4 10             	add    esp,0x10
c0022f66:	ba 94 cc 02 c0       	mov    edx,0xc002cc94
c0022f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6f:	89 10                	mov    DWORD PTR [eax],edx
c0022f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f75:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f7c:	90                   	nop
c0022f7d:	83 c4 0c             	add    esp,0xc
c0022f80:	c3                   	ret    
c0022f81:	90                   	nop

c0022f82 <IDE::prepareInterrupt(unsigned char)>:
c0022f82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f87:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f8b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f93:	c3                   	ret    

c0022f94 <selectDrive(unsigned char, unsigned char)>:
c0022f94:	c3                   	ret    
c0022f95:	90                   	nop

c0022f96 <IDE::getBase(unsigned char)>:
c0022f96:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f9f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fa7:	c3                   	ret    

c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fa8:	55                   	push   ebp
c0022fa9:	57                   	push   edi
c0022faa:	56                   	push   esi
c0022fab:	53                   	push   ebx
c0022fac:	83 ec 1c             	sub    esp,0x1c
c0022faf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fb3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fb7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022fc2:	80 f9 03             	cmp    cl,0x3
c0022fc5:	77 51                	ja     c0023018 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022fc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022fcb:	0f b6 f2             	movzx  esi,dl
c0022fce:	0f b6 db             	movzx  ebx,bl
c0022fd1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fd4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022fd8:	83 ca 80             	or     edx,0xffffff80
c0022fdb:	0f b6 d2             	movzx  edx,dl
c0022fde:	52                   	push   edx
c0022fdf:	6a 0c                	push   0xc
c0022fe1:	56                   	push   esi
c0022fe2:	57                   	push   edi
c0022fe3:	e8 c0 ff ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fe8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022fed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ff1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022ff5:	ee                   	out    dx,al
c0022ff6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022ffb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022fff:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023003:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023007:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002300f:	83 c4 2c             	add    esp,0x2c
c0023012:	5b                   	pop    ebx
c0023013:	5e                   	pop    esi
c0023014:	5f                   	pop    edi
c0023015:	5d                   	pop    ebp
c0023016:	eb 90                	jmp    c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023018:	80 fb 07             	cmp    bl,0x7
c002301b:	77 12                	ja     c002302f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002301d:	0f b6 d2             	movzx  edx,dl
c0023020:	0f b6 db             	movzx  ebx,bl
c0023023:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002302b:	89 da                	mov    edx,ebx
c002302d:	eb 2f                	jmp    c002305e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002302f:	80 fb 0d             	cmp    bl,0xd
c0023032:	77 13                	ja     c0023047 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023034:	0f b6 d2             	movzx  edx,dl
c0023037:	0f b6 db             	movzx  ebx,bl
c002303a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023041:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023045:	eb 17                	jmp    c002305e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023047:	80 fb 15             	cmp    bl,0x15
c002304a:	77 13                	ja     c002305f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002304c:	0f b6 d2             	movzx  edx,dl
c002304f:	0f b6 db             	movzx  ebx,bl
c0023052:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002305a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002305e:	ee                   	out    dx,al
c002305f:	83 c4 1c             	add    esp,0x1c
c0023062:	5b                   	pop    ebx
c0023063:	5e                   	pop    esi
c0023064:	5f                   	pop    edi
c0023065:	5d                   	pop    ebp
c0023066:	c3                   	ret    
c0023067:	90                   	nop

c0023068 <IDE::read(unsigned char, unsigned char)>:
c0023068:	55                   	push   ebp
c0023069:	57                   	push   edi
c002306a:	56                   	push   esi
c002306b:	53                   	push   ebx
c002306c:	83 ec 1c             	sub    esp,0x1c
c002306f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023073:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023077:	8d 43 f8             	lea    eax,[ebx-0x8]
c002307a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002307e:	3c 03                	cmp    al,0x3
c0023080:	77 43                	ja     c00230c5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023082:	0f b6 f2             	movzx  esi,dl
c0023085:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023088:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002308c:	83 c8 80             	or     eax,0xffffff80
c002308f:	0f b6 c0             	movzx  eax,al
c0023092:	50                   	push   eax
c0023093:	6a 0c                	push   0xc
c0023095:	56                   	push   esi
c0023096:	57                   	push   edi
c0023097:	e8 0c ff ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002309c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230a1:	0f b6 c3             	movzx  eax,bl
c00230a4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230a8:	ec                   	in     al,dx
c00230a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230ad:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230b2:	52                   	push   edx
c00230b3:	6a 0c                	push   0xc
c00230b5:	56                   	push   esi
c00230b6:	57                   	push   edi
c00230b7:	e8 ec fe ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230bc:	83 c4 20             	add    esp,0x20
c00230bf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230c3:	eb 49                	jmp    c002310e <IDE::read(unsigned char, unsigned char)+0xa6>
c00230c5:	80 fb 07             	cmp    bl,0x7
c00230c8:	77 12                	ja     c00230dc <IDE::read(unsigned char, unsigned char)+0x74>
c00230ca:	0f b6 d2             	movzx  edx,dl
c00230cd:	0f b6 c3             	movzx  eax,bl
c00230d0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230d8:	89 c2                	mov    edx,eax
c00230da:	eb 31                	jmp    c002310d <IDE::read(unsigned char, unsigned char)+0xa5>
c00230dc:	80 fb 0d             	cmp    bl,0xd
c00230df:	77 13                	ja     c00230f4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00230e1:	0f b6 d2             	movzx  edx,dl
c00230e4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00230eb:	0f b6 d3             	movzx  edx,bl
c00230ee:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00230f2:	eb 19                	jmp    c002310d <IDE::read(unsigned char, unsigned char)+0xa5>
c00230f4:	31 c0                	xor    eax,eax
c00230f6:	80 fb 15             	cmp    bl,0x15
c00230f9:	77 13                	ja     c002310e <IDE::read(unsigned char, unsigned char)+0xa6>
c00230fb:	0f b6 d2             	movzx  edx,dl
c00230fe:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023106:	0f b6 d3             	movzx  edx,bl
c0023109:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002310d:	ec                   	in     al,dx
c002310e:	83 c4 1c             	add    esp,0x1c
c0023111:	5b                   	pop    ebx
c0023112:	5e                   	pop    esi
c0023113:	5f                   	pop    edi
c0023114:	5d                   	pop    ebp
c0023115:	c3                   	ret    

c0023116 <IDE::waitInterrupt(unsigned char)>:
c0023116:	55                   	push   ebp
c0023117:	57                   	push   edi
c0023118:	56                   	push   esi
c0023119:	53                   	push   ebx
c002311a:	31 db                	xor    ebx,ebx
c002311c:	83 ec 0c             	sub    esp,0xc
c002311f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023123:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023128:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023130:	89 e8                	mov    eax,ebp
c0023132:	84 c0                	test   al,al
c0023134:	75 34                	jne    c002316a <IDE::waitInterrupt(unsigned char)+0x54>
c0023136:	52                   	push   edx
c0023137:	6a 0c                	push   0xc
c0023139:	56                   	push   esi
c002313a:	57                   	push   edi
c002313b:	e8 28 ff ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023140:	83 c4 10             	add    esp,0x10
c0023143:	a8 01                	test   al,0x1
c0023145:	75 2b                	jne    c0023172 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023147:	f6 c3 04             	test   bl,0x4
c002314a:	75 16                	jne    c0023162 <IDE::waitInterrupt(unsigned char)+0x4c>
c002314c:	83 fb 32             	cmp    ebx,0x32
c002314f:	7e 11                	jle    c0023162 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023151:	50                   	push   eax
c0023152:	50                   	push   eax
c0023153:	6a 00                	push   0x0
c0023155:	68 80 96 98 00       	push   0x989680
c002315a:	e8 8b b1 ff ff       	call   c001e2ea <nanoSleep(unsigned long long)>
c002315f:	83 c4 10             	add    esp,0x10
c0023162:	83 fb 3c             	cmp    ebx,0x3c
c0023165:	74 0b                	je     c0023172 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023167:	43                   	inc    ebx
c0023168:	eb be                	jmp    c0023128 <IDE::waitInterrupt(unsigned char)+0x12>
c002316a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023172:	83 c4 0c             	add    esp,0xc
c0023175:	89 e8                	mov    eax,ebp
c0023177:	5b                   	pop    ebx
c0023178:	5e                   	pop    esi
c0023179:	5f                   	pop    edi
c002317a:	5d                   	pop    ebp
c002317b:	c3                   	ret    

c002317c <ideChannel0IRQHandler(regs*, void*)>:
c002317c:	83 ec 10             	sub    esp,0x10
c002317f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023183:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002318a:	6a 07                	push   0x7
c002318c:	6a 00                	push   0x0
c002318e:	50                   	push   eax
c002318f:	e8 d4 fe ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023194:	83 c4 1c             	add    esp,0x1c
c0023197:	c3                   	ret    

c0023198 <ideChannel1IRQHandler(regs*, void*)>:
c0023198:	83 ec 10             	sub    esp,0x10
c002319b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002319f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231a6:	6a 07                	push   0x7
c00231a8:	6a 01                	push   0x1
c00231aa:	50                   	push   eax
c00231ab:	e8 b8 fe ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00231b0:	83 c4 1c             	add    esp,0x1c
c00231b3:	c3                   	ret    

c00231b4 <IDE::enableIRQs(unsigned char, bool)>:
c00231b4:	57                   	push   edi
c00231b5:	56                   	push   esi
c00231b6:	be 04 00 00 00       	mov    esi,0x4
c00231bb:	53                   	push   ebx
c00231bc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231c5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231ca:	0f 94 c0             	sete   al
c00231cd:	d1 e0                	shl    eax,1
c00231cf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231d6:	0f b6 c0             	movzx  eax,al
c00231d9:	50                   	push   eax
c00231da:	6a 0c                	push   0xc
c00231dc:	57                   	push   edi
c00231dd:	53                   	push   ebx
c00231de:	e8 c5 fd ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231e3:	83 c4 10             	add    esp,0x10
c00231e6:	50                   	push   eax
c00231e7:	6a 0c                	push   0xc
c00231e9:	57                   	push   edi
c00231ea:	53                   	push   ebx
c00231eb:	e8 78 fe ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00231f0:	83 c4 10             	add    esp,0x10
c00231f3:	4e                   	dec    esi
c00231f4:	75 f0                	jne    c00231e6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00231f6:	5b                   	pop    ebx
c00231f7:	5e                   	pop    esi
c00231f8:	5f                   	pop    edi
c00231f9:	c3                   	ret    

c00231fa <IDE::open(int, int, void*)>:
c00231fa:	55                   	push   ebp
c00231fb:	57                   	push   edi
c00231fc:	56                   	push   esi
c00231fd:	53                   	push   ebx
c00231fe:	83 ec 1c             	sub    esp,0x1c
c0023201:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023205:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002320e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023217:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002321e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023225:	0f 85 b0 02 00 00    	jne    c00234db <IDE::open(int, int, void*)+0x2e1>
c002322b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023231:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023235:	83 e0 7f             	and    eax,0x7f
c0023238:	3c 05                	cmp    al,0x5
c002323a:	74 04                	je     c0023240 <IDE::open(int, int, void*)+0x46>
c002323c:	3c 0f                	cmp    al,0xf
c002323e:	75 32                	jne    c0023272 <IDE::open(int, int, void*)+0x78>
c0023240:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023246:	83 e0 fc             	and    eax,0xfffffffc
c0023249:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023250:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023256:	83 e0 fc             	and    eax,0xfffffffc
c0023259:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023260:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023266:	83 e0 fc             	and    eax,0xfffffffc
c0023269:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023270:	eb 14                	jmp    c0023286 <IDE::open(int, int, void*)+0x8c>
c0023272:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002327c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023286:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002328d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023294:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023298:	89 c6                	mov    esi,eax
c002329a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002329f:	c1 e6 10             	shl    esi,0x10
c00232a2:	89 e8                	mov    eax,ebp
c00232a4:	89 fa                	mov    edx,edi
c00232a6:	c1 e0 0b             	shl    eax,0xb
c00232a9:	09 f0                	or     eax,esi
c00232ab:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232b2:	c1 e6 08             	shl    esi,0x8
c00232b5:	09 c6                	or     esi,eax
c00232b7:	89 f0                	mov    eax,esi
c00232b9:	0d 08 00 00 80       	or     eax,0x80000008
c00232be:	ef                   	out    dx,eax
c00232bf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232c4:	89 ca                	mov    edx,ecx
c00232c6:	ed                   	in     eax,dx
c00232c7:	c1 e8 10             	shr    eax,0x10
c00232ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00232cf:	0f 84 f5 00 00 00    	je     c00233ca <IDE::open(int, int, void*)+0x1d0>
c00232d5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232db:	89 fa                	mov    edx,edi
c00232dd:	89 f0                	mov    eax,esi
c00232df:	ef                   	out    dx,eax
c00232e0:	b0 fe                	mov    al,0xfe
c00232e2:	89 ca                	mov    edx,ecx
c00232e4:	ee                   	out    dx,al
c00232e5:	89 f0                	mov    eax,esi
c00232e7:	89 fa                	mov    edx,edi
c00232e9:	ef                   	out    dx,eax
c00232ea:	89 ca                	mov    edx,ecx
c00232ec:	ed                   	in     eax,dx
c00232ed:	3c fe                	cmp    al,0xfe
c00232ef:	0f 85 a9 00 00 00    	jne    c002339e <IDE::open(int, int, void*)+0x1a4>
c00232f5:	8b 15 e8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3e8
c00232fb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023302:	74 33                	je     c0023337 <IDE::open(int, int, void*)+0x13d>
c0023304:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002330a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002330e:	40                   	inc    eax
c002330f:	83 ec 0c             	sub    esp,0xc
c0023312:	0f b6 c0             	movzx  eax,al
c0023315:	50                   	push   eax
c0023316:	55                   	push   ebp
c0023317:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002331b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023321:	51                   	push   ecx
c0023322:	e8 a7 4e ff ff       	call   c00181ce <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023327:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002332c:	83 c4 1c             	add    esp,0x1c
c002332f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023335:	eb 0a                	jmp    c0023341 <IDE::open(int, int, void*)+0x147>
c0023337:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023341:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023348:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002334f:	c1 e1 10             	shl    ecx,0x10
c0023352:	c1 e0 08             	shl    eax,0x8
c0023355:	bf f8 0c 00 00       	mov    edi,0xcf8
c002335a:	09 c1                	or     ecx,eax
c002335c:	89 fa                	mov    edx,edi
c002335e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023365:	c1 e0 0b             	shl    eax,0xb
c0023368:	09 c1                	or     ecx,eax
c002336a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023370:	89 c8                	mov    eax,ecx
c0023372:	ef                   	out    dx,eax
c0023373:	be fc 0c 00 00       	mov    esi,0xcfc
c0023378:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002337e:	89 f2                	mov    edx,esi
c0023380:	ee                   	out    dx,al
c0023381:	89 c8                	mov    eax,ecx
c0023383:	89 fa                	mov    edx,edi
c0023385:	ef                   	out    dx,eax
c0023386:	89 f2                	mov    edx,esi
c0023388:	ed                   	in     eax,dx
c0023389:	0f b6 c0             	movzx  eax,al
c002338c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023392:	74 46                	je     c00233da <IDE::open(int, int, void*)+0x1e0>
c0023394:	83 ec 0c             	sub    esp,0xc
c0023397:	68 6c ca 02 c0       	push   0xc002ca6c
c002339c:	eb 34                	jmp    c00233d2 <IDE::open(int, int, void*)+0x1d8>
c002339e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233a7:	75 17                	jne    c00233c0 <IDE::open(int, int, void*)+0x1c6>
c00233a9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233ae:	74 07                	je     c00233b7 <IDE::open(int, int, void*)+0x1bd>
c00233b0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233b5:	75 09                	jne    c00233c0 <IDE::open(int, int, void*)+0x1c6>
c00233b7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233be:	eb 1a                	jmp    c00233da <IDE::open(int, int, void*)+0x1e0>
c00233c0:	83 ec 0c             	sub    esp,0xc
c00233c3:	68 74 ca 02 c0       	push   0xc002ca74
c00233c8:	eb 08                	jmp    c00233d2 <IDE::open(int, int, void*)+0x1d8>
c00233ca:	83 ec 0c             	sub    esp,0xc
c00233cd:	68 a5 ca 02 c0       	push   0xc002caa5
c00233d2:	e8 9e 71 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c00233d7:	83 c4 10             	add    esp,0x10
c00233da:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233e1:	79 1a                	jns    c00233fd <IDE::open(int, int, void*)+0x203>
c00233e3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00233e9:	83 e0 fc             	and    eax,0xfffffffc
c00233ec:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00233f3:	83 c0 08             	add    eax,0x8
c00233f6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00233fd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023403:	89 c2                	mov    edx,eax
c0023405:	83 e2 0f             	and    edx,0xf
c0023408:	66 83 fa 08          	cmp    dx,0x8
c002340c:	75 0a                	jne    c0023418 <IDE::open(int, int, void*)+0x21e>
c002340e:	83 e8 02             	sub    eax,0x2
c0023411:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023418:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002341e:	89 c2                	mov    edx,eax
c0023420:	83 e2 0f             	and    edx,0xf
c0023423:	66 83 fa 08          	cmp    dx,0x8
c0023427:	75 0a                	jne    c0023433 <IDE::open(int, int, void*)+0x239>
c0023429:	83 e8 02             	sub    eax,0x2
c002342c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023433:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002343a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023441:	89 d0                	mov    eax,edx
c0023443:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023446:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002344a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002344e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023451:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023456:	0f b6 c9             	movzx  ecx,cl
c0023459:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023460:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023463:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023467:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002346b:	8d 50 02             	lea    edx,[eax+0x2]
c002346e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023473:	0f b6 d2             	movzx  edx,dl
c0023476:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002347c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002347f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023483:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023487:	8d 48 03             	lea    ecx,[eax+0x3]
c002348a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002348f:	0f b6 c9             	movzx  ecx,cl
c0023492:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023498:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002349b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002349f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234a3:	8d 50 04             	lea    edx,[eax+0x4]
c00234a6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234ac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234b1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234b8:	66 85 f6             	test   si,si
c00234bb:	74 3e                	je     c00234fb <IDE::open(int, int, void*)+0x301>
c00234bd:	0f b6 d2             	movzx  edx,dl
c00234c0:	83 c0 05             	add    eax,0x5
c00234c3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234c6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234ca:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234ce:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234d4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234d9:	eb 20                	jmp    c00234fb <IDE::open(int, int, void*)+0x301>
c00234db:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00234e5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00234ef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234f6:	e9 02 ff ff ff       	jmp    c00233fd <IDE::open(int, int, void*)+0x203>
c00234fb:	52                   	push   edx
c00234fc:	52                   	push   edx
c00234fd:	6a 00                	push   0x0
c00234ff:	53                   	push   ebx
c0023500:	e8 7d fa ff ff       	call   c0022f82 <IDE::prepareInterrupt(unsigned char)>
c0023505:	59                   	pop    ecx
c0023506:	5e                   	pop    esi
c0023507:	6a 01                	push   0x1
c0023509:	53                   	push   ebx
c002350a:	e8 73 fa ff ff       	call   c0022f82 <IDE::prepareInterrupt(unsigned char)>
c002350f:	83 c4 0c             	add    esp,0xc
c0023512:	6a 00                	push   0x0
c0023514:	6a 00                	push   0x0
c0023516:	53                   	push   ebx
c0023517:	e8 98 fc ff ff       	call   c00231b4 <IDE::enableIRQs(unsigned char, bool)>
c002351c:	83 c4 0c             	add    esp,0xc
c002351f:	6a 00                	push   0x0
c0023521:	6a 01                	push   0x1
c0023523:	53                   	push   ebx
c0023524:	e8 8b fc ff ff       	call   c00231b4 <IDE::enableIRQs(unsigned char, bool)>
c0023529:	83 c4 10             	add    esp,0x10
c002352c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023533:	74 40                	je     c0023575 <IDE::open(int, int, void*)+0x37b>
c0023535:	83 ec 0c             	sub    esp,0xc
c0023538:	68 cf ca 02 c0       	push   0xc002cacf
c002353d:	e8 92 f9 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023542:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023545:	6a 01                	push   0x1
c0023547:	68 7c 31 02 c0       	push   0xc002317c
c002354c:	6a 0e                	push   0xe
c002354e:	53                   	push   ebx
c002354f:	e8 2a 0d ff ff       	call   c001427e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023554:	83 c4 14             	add    esp,0x14
c0023557:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002355d:	53                   	push   ebx
c002355e:	6a 01                	push   0x1
c0023560:	68 98 31 02 c0       	push   0xc0023198
c0023565:	6a 0f                	push   0xf
c0023567:	53                   	push   ebx
c0023568:	e8 11 0d ff ff       	call   c001427e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002356d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023573:	eb 4a                	jmp    c00235bf <IDE::open(int, int, void*)+0x3c5>
c0023575:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002357f:	50                   	push   eax
c0023580:	6a 0f                	push   0xf
c0023582:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023588:	68 eb ca 02 c0       	push   0xc002caeb
c002358d:	e8 42 f9 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023592:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023595:	6a 00                	push   0x0
c0023597:	68 7c 31 02 c0       	push   0xc002317c
c002359c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235a2:	53                   	push   ebx
c00235a3:	e8 d6 0c ff ff       	call   c001427e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235a8:	83 c4 14             	add    esp,0x14
c00235ab:	53                   	push   ebx
c00235ac:	6a 00                	push   0x0
c00235ae:	68 98 31 02 c0       	push   0xc0023198
c00235b3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235b9:	53                   	push   ebx
c00235ba:	e8 bf 0c ff ff       	call   c001427e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235c1:	83 c4 20             	add    esp,0x20
c00235c4:	83 ec 0c             	sub    esp,0xc
c00235c7:	53                   	push   ebx
c00235c8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235cb:	83 c4 0c             	add    esp,0xc
c00235ce:	6a 07                	push   0x7
c00235d0:	6a 00                	push   0x0
c00235d2:	53                   	push   ebx
c00235d3:	e8 90 fa ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00235d8:	83 c4 0c             	add    esp,0xc
c00235db:	6a 07                	push   0x7
c00235dd:	6a 01                	push   0x1
c00235df:	53                   	push   ebx
c00235e0:	e8 83 fa ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00235e5:	83 c4 0c             	add    esp,0xc
c00235e8:	6a 01                	push   0x1
c00235ea:	6a 00                	push   0x0
c00235ec:	53                   	push   ebx
c00235ed:	e8 c2 fb ff ff       	call   c00231b4 <IDE::enableIRQs(unsigned char, bool)>
c00235f2:	83 c4 0c             	add    esp,0xc
c00235f5:	6a 01                	push   0x1
c00235f7:	6a 01                	push   0x1
c00235f9:	53                   	push   ebx
c00235fa:	e8 b5 fb ff ff       	call   c00231b4 <IDE::enableIRQs(unsigned char, bool)>
c00235ff:	83 c4 2c             	add    esp,0x2c
c0023602:	31 c0                	xor    eax,eax
c0023604:	5b                   	pop    ebx
c0023605:	5e                   	pop    esi
c0023606:	5f                   	pop    edi
c0023607:	5d                   	pop    ebp
c0023608:	c3                   	ret    
c0023609:	90                   	nop

c002360a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002360a:	55                   	push   ebp
c002360b:	57                   	push   edi
c002360c:	56                   	push   esi
c002360d:	53                   	push   ebx
c002360e:	83 ec 1c             	sub    esp,0x1c
c0023611:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023615:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023619:	8d 50 f8             	lea    edx,[eax-0x8]
c002361c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023620:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023624:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023628:	80 fa 03             	cmp    dl,0x3
c002362b:	77 5d                	ja     c002368a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002362d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023635:	0f b6 db             	movzx  ebx,bl
c0023638:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002363b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002363f:	83 ca 80             	or     edx,0xffffff80
c0023642:	0f b6 d2             	movzx  edx,dl
c0023645:	52                   	push   edx
c0023646:	6a 0c                	push   0xc
c0023648:	53                   	push   ebx
c0023649:	56                   	push   esi
c002364a:	e8 59 f9 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002364f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023654:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023658:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002365c:	0f b6 c0             	movzx  eax,al
c002365f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023663:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023665:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002366a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002366e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023672:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023676:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002367e:	83 c4 2c             	add    esp,0x2c
c0023681:	5b                   	pop    ebx
c0023682:	5e                   	pop    esi
c0023683:	5f                   	pop    edi
c0023684:	5d                   	pop    ebp
c0023685:	e9 1e f9 ff ff       	jmp    c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368a:	3c 07                	cmp    al,0x7
c002368c:	77 10                	ja     c002369e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002368e:	0f b6 db             	movzx  ebx,bl
c0023691:	0f b6 d0             	movzx  edx,al
c0023694:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002369c:	eb 2d                	jmp    c00236cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002369e:	3c 0d                	cmp    al,0xd
c00236a0:	77 13                	ja     c00236b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236a2:	0f b6 db             	movzx  ebx,bl
c00236a5:	0f b6 c0             	movzx  eax,al
c00236a8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236af:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236b3:	eb 16                	jmp    c00236cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236b5:	3c 15                	cmp    al,0x15
c00236b7:	77 14                	ja     c00236cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236b9:	0f b6 db             	movzx  ebx,bl
c00236bc:	0f b6 c0             	movzx  eax,al
c00236bf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236c7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236cb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236cd:	83 c4 1c             	add    esp,0x1c
c00236d0:	5b                   	pop    ebx
c00236d1:	5e                   	pop    esi
c00236d2:	5f                   	pop    edi
c00236d3:	5d                   	pop    ebp
c00236d4:	c3                   	ret    
c00236d5:	90                   	nop

c00236d6 <IDE::detect()>:
c00236d6:	55                   	push   ebp
c00236d7:	57                   	push   edi
c00236d8:	56                   	push   esi
c00236d9:	53                   	push   ebx
c00236da:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236e0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00236e7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00236ee:	0f 85 be 02 00 00    	jne    c00239b2 <IDE::detect()+0x2dc>
c00236f4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00236fb:	31 f6                	xor    esi,esi
c00236fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023705:	31 ed                	xor    ebp,ebp
c0023707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002370b:	c1 e0 06             	shl    eax,0x6
c002370e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023716:	89 e8                	mov    eax,ebp
c0023718:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002371c:	c1 e0 04             	shl    eax,0x4
c002371f:	83 c8 a0             	or     eax,0xffffffa0
c0023722:	0f b6 c0             	movzx  eax,al
c0023725:	50                   	push   eax
c0023726:	6a 06                	push   0x6
c0023728:	56                   	push   esi
c0023729:	53                   	push   ebx
c002372a:	e8 79 f8 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002372f:	83 c4 0c             	add    esp,0xc
c0023732:	6a 0c                	push   0xc
c0023734:	56                   	push   esi
c0023735:	53                   	push   ebx
c0023736:	e8 2d f9 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c002373b:	83 c4 0c             	add    esp,0xc
c002373e:	6a 0c                	push   0xc
c0023740:	56                   	push   esi
c0023741:	53                   	push   ebx
c0023742:	e8 21 f9 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023747:	83 c4 0c             	add    esp,0xc
c002374a:	6a 0c                	push   0xc
c002374c:	56                   	push   esi
c002374d:	53                   	push   ebx
c002374e:	e8 15 f9 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023753:	83 c4 0c             	add    esp,0xc
c0023756:	6a 0c                	push   0xc
c0023758:	56                   	push   esi
c0023759:	53                   	push   ebx
c002375a:	e8 09 f9 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c002375f:	68 ec 00 00 00       	push   0xec
c0023764:	6a 07                	push   0x7
c0023766:	56                   	push   esi
c0023767:	53                   	push   ebx
c0023768:	e8 3b f8 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002376d:	83 c4 1c             	add    esp,0x1c
c0023770:	6a 0c                	push   0xc
c0023772:	56                   	push   esi
c0023773:	53                   	push   ebx
c0023774:	e8 ef f8 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023779:	83 c4 0c             	add    esp,0xc
c002377c:	6a 0c                	push   0xc
c002377e:	56                   	push   esi
c002377f:	53                   	push   ebx
c0023780:	e8 e3 f8 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023785:	83 c4 0c             	add    esp,0xc
c0023788:	6a 0c                	push   0xc
c002378a:	56                   	push   esi
c002378b:	53                   	push   ebx
c002378c:	e8 d7 f8 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023791:	83 c4 0c             	add    esp,0xc
c0023794:	6a 0c                	push   0xc
c0023796:	56                   	push   esi
c0023797:	53                   	push   ebx
c0023798:	e8 cb f8 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c002379d:	83 c4 0c             	add    esp,0xc
c00237a0:	6a 0c                	push   0xc
c00237a2:	56                   	push   esi
c00237a3:	53                   	push   ebx
c00237a4:	e8 bf f8 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00237a9:	83 c4 10             	add    esp,0x10
c00237ac:	84 c0                	test   al,al
c00237ae:	0f 84 8b 01 00 00    	je     c002393f <IDE::detect()+0x269>
c00237b4:	31 ff                	xor    edi,edi
c00237b6:	50                   	push   eax
c00237b7:	6a 0c                	push   0xc
c00237b9:	56                   	push   esi
c00237ba:	53                   	push   ebx
c00237bb:	e8 a8 f8 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00237c0:	83 c4 10             	add    esp,0x10
c00237c3:	a8 01                	test   al,0x1
c00237c5:	0f 85 8e 01 00 00    	jne    c0023959 <IDE::detect()+0x283>
c00237cb:	84 c0                	test   al,al
c00237cd:	78 04                	js     c00237d3 <IDE::detect()+0xfd>
c00237cf:	a8 08                	test   al,0x8
c00237d1:	75 27                	jne    c00237fa <IDE::detect()+0x124>
c00237d3:	47                   	inc    edi
c00237d4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237da:	7e da                	jle    c00237b6 <IDE::detect()+0xe0>
c00237dc:	50                   	push   eax
c00237dd:	50                   	push   eax
c00237de:	6a 00                	push   0x0
c00237e0:	68 40 4b 4c 00       	push   0x4c4b40
c00237e5:	e8 00 ab ff ff       	call   c001e2ea <nanoSleep(unsigned long long)>
c00237ea:	83 c4 10             	add    esp,0x10
c00237ed:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00237f3:	75 c1                	jne    c00237b6 <IDE::detect()+0xe0>
c00237f5:	e9 5f 01 00 00       	jmp    c0023959 <IDE::detect()+0x283>
c00237fa:	31 c9                	xor    ecx,ecx
c00237fc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023800:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023804:	83 ec 0c             	sub    esp,0xc
c0023807:	68 80 00 00 00       	push   0x80
c002380c:	57                   	push   edi
c002380d:	6a 00                	push   0x0
c002380f:	56                   	push   esi
c0023810:	53                   	push   ebx
c0023811:	e8 f4 fd ff ff       	call   c002360a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023816:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002381b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002381f:	89 d1                	mov    ecx,edx
c0023821:	c1 e0 06             	shl    eax,0x6
c0023824:	01 d8                	add    eax,ebx
c0023826:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002382d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023834:	89 f2                	mov    edx,esi
c0023836:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002383c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023840:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023846:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002384a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023851:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023859:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023860:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023868:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002386e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023875:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002387b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002387f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023883:	83 c4 20             	add    esp,0x20
c0023886:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023889:	83 c0 02             	add    eax,0x2
c002388c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023892:	83 c7 02             	add    edi,0x2
c0023895:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023898:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002389e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238a2:	75 e2                	jne    c0023886 <IDE::detect()+0x1b0>
c00238a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238a8:	c1 e0 06             	shl    eax,0x6
c00238ab:	01 d8                	add    eax,ebx
c00238ad:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238b3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238ba:	66 c1 ea 09          	shr    dx,0x9
c00238be:	83 e2 01             	and    edx,0x1
c00238c1:	84 c9                	test   cl,cl
c00238c3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238c9:	75 2f                	jne    c00238fa <IDE::detect()+0x224>
c00238cb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00238d1:	85 c0                	test   eax,eax
c00238d3:	74 66                	je     c002393b <IDE::detect()+0x265>
c00238d5:	50                   	push   eax
c00238d6:	55                   	push   ebp
c00238d7:	56                   	push   esi
c00238d8:	68 07 cb 02 c0       	push   0xc002cb07
c00238dd:	e8 f2 f5 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00238e2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00238e9:	e8 52 bf fe ff       	call   c000f840 <malloc>
c00238ee:	89 c7                	mov    edi,eax
c00238f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00238f3:	e8 78 06 00 00       	call   c0023f70 <ATA::ATA()>
c00238f8:	eb 28                	jmp    c0023922 <IDE::detect()+0x24c>
c00238fa:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023900:	55                   	push   ebp
c0023901:	56                   	push   esi
c0023902:	68 36 cb 02 c0       	push   0xc002cb36
c0023907:	e8 c8 f5 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c002390c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023913:	e8 28 bf fe ff       	call   c000f840 <malloc>
c0023918:	89 c7                	mov    edi,eax
c002391a:	89 04 24             	mov    DWORD PTR [esp],eax
c002391d:	e8 8e 0c 00 00       	call   c00245b0 <ATAPI::ATAPI()>
c0023922:	5a                   	pop    edx
c0023923:	59                   	pop    ecx
c0023924:	57                   	push   edi
c0023925:	53                   	push   ebx
c0023926:	e8 cf 09 ff ff       	call   c00142fa <Device::addChild(Device*)>
c002392b:	8b 07                	mov    eax,DWORD PTR [edi]
c002392d:	53                   	push   ebx
c002392e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023932:	6a 00                	push   0x0
c0023934:	57                   	push   edi
c0023935:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023938:	83 c4 20             	add    esp,0x20
c002393b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002393f:	4d                   	dec    ebp
c0023940:	74 0a                	je     c002394c <IDE::detect()+0x276>
c0023942:	bd 01 00 00 00       	mov    ebp,0x1
c0023947:	e9 bb fd ff ff       	jmp    c0023707 <IDE::detect()+0x31>
c002394c:	4e                   	dec    esi
c002394d:	74 63                	je     c00239b2 <IDE::detect()+0x2dc>
c002394f:	be 01 00 00 00       	mov    esi,0x1
c0023954:	e9 ac fd ff ff       	jmp    c0023705 <IDE::detect()+0x2f>
c0023959:	50                   	push   eax
c002395a:	6a 04                	push   0x4
c002395c:	56                   	push   esi
c002395d:	53                   	push   ebx
c002395e:	e8 05 f7 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023963:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023967:	83 c4 0c             	add    esp,0xc
c002396a:	6a 05                	push   0x5
c002396c:	56                   	push   esi
c002396d:	53                   	push   ebx
c002396e:	e8 f5 f6 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023973:	83 c4 10             	add    esp,0x10
c0023976:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002397a:	80 fa 14             	cmp    dl,0x14
c002397d:	75 04                	jne    c0023983 <IDE::detect()+0x2ad>
c002397f:	3c eb                	cmp    al,0xeb
c0023981:	eb 07                	jmp    c002398a <IDE::detect()+0x2b4>
c0023983:	3c 96                	cmp    al,0x96
c0023985:	75 b8                	jne    c002393f <IDE::detect()+0x269>
c0023987:	80 fa 69             	cmp    dl,0x69
c002398a:	75 b3                	jne    c002393f <IDE::detect()+0x269>
c002398c:	68 a1 00 00 00       	push   0xa1
c0023991:	6a 07                	push   0x7
c0023993:	56                   	push   esi
c0023994:	53                   	push   ebx
c0023995:	e8 0e f6 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002399a:	5f                   	pop    edi
c002399b:	58                   	pop    eax
c002399c:	6a 00                	push   0x0
c002399e:	68 40 42 0f 00       	push   0xf4240
c00239a3:	e8 42 a9 ff ff       	call   c001e2ea <nanoSleep(unsigned long long)>
c00239a8:	83 c4 10             	add    esp,0x10
c00239ab:	b1 01                	mov    cl,0x1
c00239ad:	e9 4a fe ff ff       	jmp    c00237fc <IDE::detect()+0x126>
c00239b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239b8:	5b                   	pop    ebx
c00239b9:	5e                   	pop    esi
c00239ba:	5f                   	pop    edi
c00239bb:	5d                   	pop    ebp
c00239bc:	c3                   	ret    
c00239bd:	90                   	nop

c00239be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239be:	55                   	push   ebp
c00239bf:	57                   	push   edi
c00239c0:	56                   	push   esi
c00239c1:	53                   	push   ebx
c00239c2:	83 ec 1c             	sub    esp,0x1c
c00239c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239cd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239d1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239d5:	88 c3                	mov    bl,al
c00239d7:	84 c0                	test   al,al
c00239d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239dd:	0f 84 67 01 00 00    	je     c0023b4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00239e3:	83 ec 0c             	sub    esp,0xc
c00239e6:	68 67 cb 02 c0       	push   0xc002cb67
c00239eb:	e8 e4 f4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00239f0:	83 c4 10             	add    esp,0x10
c00239f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00239f7:	3c 01                	cmp    al,0x1
c00239f9:	75 17                	jne    c0023a12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00239fb:	83 ec 0c             	sub    esp,0xc
c00239fe:	b3 13                	mov    bl,0x13
c0023a00:	68 73 cb 02 c0       	push   0xc002cb73
c0023a05:	e8 ca f4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023a0a:	83 c4 10             	add    esp,0x10
c0023a0d:	e9 25 01 00 00       	jmp    c0023b37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a12:	3c 02                	cmp    al,0x2
c0023a14:	0f 85 ef 00 00 00    	jne    c0023b09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a1a:	d1 e6                	shl    esi,1
c0023a1c:	09 ee                	or     esi,ebp
c0023a1e:	52                   	push   edx
c0023a1f:	89 f0                	mov    eax,esi
c0023a21:	6a 01                	push   0x1
c0023a23:	0f b6 f0             	movzx  esi,al
c0023a26:	c1 e6 06             	shl    esi,0x6
c0023a29:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a31:	50                   	push   eax
c0023a32:	57                   	push   edi
c0023a33:	e8 30 f6 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023a38:	83 c4 10             	add    esp,0x10
c0023a3b:	89 c6                	mov    esi,eax
c0023a3d:	a8 01                	test   al,0x1
c0023a3f:	74 12                	je     c0023a53 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a41:	83 ec 0c             	sub    esp,0xc
c0023a44:	b3 07                	mov    bl,0x7
c0023a46:	68 88 cb 02 c0       	push   0xc002cb88
c0023a4b:	e8 84 f4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023a50:	83 c4 10             	add    esp,0x10
c0023a53:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a59:	74 12                	je     c0023a6d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a5b:	83 ec 0c             	sub    esp,0xc
c0023a5e:	b3 03                	mov    bl,0x3
c0023a60:	68 a6 cb 02 c0       	push   0xc002cba6
c0023a65:	e8 6a f4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023a6a:	83 c4 10             	add    esp,0x10
c0023a6d:	f7 c6 04 00 00 00    	test   esi,0x4
c0023a73:	74 12                	je     c0023a87 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023a75:	83 ec 0c             	sub    esp,0xc
c0023a78:	b3 14                	mov    bl,0x14
c0023a7a:	68 c6 cb 02 c0       	push   0xc002cbc6
c0023a7f:	e8 50 f4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023a84:	83 c4 10             	add    esp,0x10
c0023a87:	f7 c6 08 00 00 00    	test   esi,0x8
c0023a8d:	74 12                	je     c0023aa1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023a8f:	83 ec 0c             	sub    esp,0xc
c0023a92:	b3 03                	mov    bl,0x3
c0023a94:	68 a6 cb 02 c0       	push   0xc002cba6
c0023a99:	e8 36 f4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023a9e:	83 c4 10             	add    esp,0x10
c0023aa1:	f7 c6 10 00 00 00    	test   esi,0x10
c0023aa7:	74 12                	je     c0023abb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023aa9:	83 ec 0c             	sub    esp,0xc
c0023aac:	b3 15                	mov    bl,0x15
c0023aae:	68 de cb 02 c0       	push   0xc002cbde
c0023ab3:	e8 1c f4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023ab8:	83 c4 10             	add    esp,0x10
c0023abb:	f7 c6 20 00 00 00    	test   esi,0x20
c0023ac1:	74 12                	je     c0023ad5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023ac3:	83 ec 0c             	sub    esp,0xc
c0023ac6:	b3 03                	mov    bl,0x3
c0023ac8:	68 a6 cb 02 c0       	push   0xc002cba6
c0023acd:	e8 02 f4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023ad2:	83 c4 10             	add    esp,0x10
c0023ad5:	f7 c6 40 00 00 00    	test   esi,0x40
c0023adb:	74 12                	je     c0023aef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023add:	83 ec 0c             	sub    esp,0xc
c0023ae0:	b3 16                	mov    bl,0x16
c0023ae2:	68 f8 cb 02 c0       	push   0xc002cbf8
c0023ae7:	e8 e8 f3 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023aec:	83 c4 10             	add    esp,0x10
c0023aef:	89 f0                	mov    eax,esi
c0023af1:	84 c0                	test   al,al
c0023af3:	79 42                	jns    c0023b37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023af5:	83 ec 0c             	sub    esp,0xc
c0023af8:	b3 0d                	mov    bl,0xd
c0023afa:	68 19 cc 02 c0       	push   0xc002cc19
c0023aff:	e8 d0 f3 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023b04:	83 c4 10             	add    esp,0x10
c0023b07:	eb 2e                	jmp    c0023b37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b09:	3c 03                	cmp    al,0x3
c0023b0b:	75 14                	jne    c0023b21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b0d:	83 ec 0c             	sub    esp,0xc
c0023b10:	b3 17                	mov    bl,0x17
c0023b12:	68 2d cc 02 c0       	push   0xc002cc2d
c0023b17:	e8 b8 f3 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023b1c:	83 c4 10             	add    esp,0x10
c0023b1f:	eb 16                	jmp    c0023b37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b21:	3c 04                	cmp    al,0x4
c0023b23:	75 12                	jne    c0023b37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b25:	83 ec 0c             	sub    esp,0xc
c0023b28:	b3 08                	mov    bl,0x8
c0023b2a:	68 43 cc 02 c0       	push   0xc002cc43
c0023b2f:	e8 a0 f3 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023b34:	83 c4 10             	add    esp,0x10
c0023b37:	50                   	push   eax
c0023b38:	50                   	push   eax
c0023b39:	0f b6 c3             	movzx  eax,bl
c0023b3c:	50                   	push   eax
c0023b3d:	68 5b cc 02 c0       	push   0xc002cc5b
c0023b42:	e8 8d f3 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023b47:	83 c4 10             	add    esp,0x10
c0023b4a:	83 c4 1c             	add    esp,0x1c
c0023b4d:	88 d8                	mov    al,bl
c0023b4f:	5b                   	pop    ebx
c0023b50:	5e                   	pop    esi
c0023b51:	5f                   	pop    edi
c0023b52:	5d                   	pop    ebp
c0023b53:	c3                   	ret    

c0023b54 <IDE::polling(unsigned char, unsigned int)>:
c0023b54:	57                   	push   edi
c0023b55:	56                   	push   esi
c0023b56:	53                   	push   ebx
c0023b57:	bb 04 00 00 00       	mov    ebx,0x4
c0023b5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b60:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b65:	52                   	push   edx
c0023b66:	6a 0c                	push   0xc
c0023b68:	56                   	push   esi
c0023b69:	57                   	push   edi
c0023b6a:	e8 f9 f4 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023b6f:	83 c4 10             	add    esp,0x10
c0023b72:	4b                   	dec    ebx
c0023b73:	75 f0                	jne    c0023b65 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b75:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b7a:	50                   	push   eax
c0023b7b:	6a 0c                	push   0xc
c0023b7d:	56                   	push   esi
c0023b7e:	57                   	push   edi
c0023b7f:	e8 e4 f4 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0023b84:	83 c4 10             	add    esp,0x10
c0023b87:	a8 01                	test   al,0x1
c0023b89:	74 12                	je     c0023b9d <IDE::polling(unsigned char, unsigned int)+0x49>
c0023b8b:	83 ec 0c             	sub    esp,0xc
c0023b8e:	68 75 cc 02 c0       	push   0xc002cc75
c0023b93:	e8 3c f3 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023b98:	83 c4 10             	add    esp,0x10
c0023b9b:	eb 17                	jmp    c0023bb4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b9d:	a8 20                	test   al,0x20
c0023b9f:	75 0f                	jne    c0023bb0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023ba1:	4b                   	dec    ebx
c0023ba2:	74 10                	je     c0023bb4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ba4:	84 c0                	test   al,al
c0023ba6:	78 d2                	js     c0023b7a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ba8:	a8 08                	test   al,0x8
c0023baa:	74 ce                	je     c0023b7a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bac:	31 c0                	xor    eax,eax
c0023bae:	eb 06                	jmp    c0023bb6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bb0:	b0 01                	mov    al,0x1
c0023bb2:	eb 02                	jmp    c0023bb6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bb4:	b0 02                	mov    al,0x2
c0023bb6:	5b                   	pop    ebx
c0023bb7:	5e                   	pop    esi
c0023bb8:	5f                   	pop    edi
c0023bb9:	c3                   	ret    

c0023bba <SATABus::close(int, int, void*)>:
c0023bba:	31 c0                	xor    eax,eax
c0023bbc:	c3                   	ret    
c0023bbd:	90                   	nop

c0023bbe <SATABus::detect()>:
c0023bbe:	c3                   	ret    
c0023bbf:	90                   	nop

c0023bc0 <SATABus::SATABus()>:
c0023bc0:	83 ec 0c             	sub    esp,0xc
c0023bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc7:	83 ec 08             	sub    esp,0x8
c0023bca:	68 b8 cc 02 c0       	push   0xc002ccb8
c0023bcf:	50                   	push   eax
c0023bd0:	e8 b1 0a ff ff       	call   c0014686 <HardDiskController::HardDiskController(char const*)>
c0023bd5:	83 c4 10             	add    esp,0x10
c0023bd8:	ba 74 cd 02 c0       	mov    edx,0xc002cd74
c0023bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023be1:	89 10                	mov    DWORD PTR [eax],edx
c0023be3:	83 ec 0c             	sub    esp,0xc
c0023be6:	6a 50                	push   0x50
c0023be8:	e8 38 c4 fe ff       	call   c0010025 <Phys::allocateContiguousPages(int)>
c0023bed:	83 c4 10             	add    esp,0x10
c0023bf0:	89 c2                	mov    edx,eax
c0023bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023bfc:	83 ec 0c             	sub    esp,0xc
c0023bff:	6a 50                	push   0x50
c0023c01:	e8 99 df fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0023c06:	83 c4 10             	add    esp,0x10
c0023c09:	89 c2                	mov    edx,eax
c0023c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c15:	e8 20 e2 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0023c1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c1e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c28:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c2e:	83 ec 0c             	sub    esp,0xc
c0023c31:	6a 03                	push   0x3
c0023c33:	6a 50                	push   0x50
c0023c35:	51                   	push   ecx
c0023c36:	52                   	push   edx
c0023c37:	50                   	push   eax
c0023c38:	e8 2d ea fe ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c3d:	83 c4 20             	add    esp,0x20
c0023c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c44:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c54:	83 ec 04             	sub    esp,0x4
c0023c57:	52                   	push   edx
c0023c58:	50                   	push   eax
c0023c59:	68 dc cc 02 c0       	push   0xc002ccdc
c0023c5e:	e8 71 f2 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023c63:	83 c4 10             	add    esp,0x10
c0023c66:	90                   	nop
c0023c67:	83 c4 0c             	add    esp,0xc
c0023c6a:	c3                   	ret    
c0023c6b:	90                   	nop

c0023c6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c6c:	83 ec 0c             	sub    esp,0xc
c0023c6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c73:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c76:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c79:	09 c2                	or     edx,eax
c0023c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c85:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c87:	31 c0                	xor    eax,eax
c0023c89:	c1 e9 08             	shr    ecx,0x8
c0023c8c:	83 e1 0f             	and    ecx,0xf
c0023c8f:	39 c8                	cmp    eax,ecx
c0023c91:	74 0a                	je     c0023c9d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c93:	f6 c2 01             	test   dl,0x1
c0023c96:	74 18                	je     c0023cb0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c98:	d1 ea                	shr    edx,1
c0023c9a:	40                   	inc    eax
c0023c9b:	eb f2                	jmp    c0023c8f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c9d:	83 ec 0c             	sub    esp,0xc
c0023ca0:	68 00 cd 02 c0       	push   0xc002cd00
c0023ca5:	e8 cb 68 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0023caa:	83 c4 10             	add    esp,0x10
c0023cad:	83 c8 ff             	or     eax,0xffffffff
c0023cb0:	83 c4 0c             	add    esp,0xc
c0023cb3:	c3                   	ret    

c0023cb4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cb8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cbb:	89 c2                	mov    edx,eax
c0023cbd:	c1 ea 08             	shr    edx,0x8
c0023cc0:	83 e2 0f             	and    edx,0xf
c0023cc3:	fe ca                	dec    dl
c0023cc5:	75 31                	jne    c0023cf8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cc7:	83 e0 0f             	and    eax,0xf
c0023cca:	3c 03                	cmp    al,0x3
c0023ccc:	75 2a                	jne    c0023cf8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cce:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023cd1:	b8 02 00 00 00       	mov    eax,0x2
c0023cd6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023cdc:	74 1c                	je     c0023cfa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cde:	b8 04 00 00 00       	mov    eax,0x4
c0023ce3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023ce9:	74 0f                	je     c0023cfa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ceb:	31 c0                	xor    eax,eax
c0023ced:	83 fa 03             	cmp    edx,0x3
c0023cf0:	0f 94 c0             	sete   al
c0023cf3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023cf7:	c3                   	ret    
c0023cf8:	31 c0                	xor    eax,eax
c0023cfa:	c3                   	ret    
c0023cfb:	90                   	nop

c0023cfc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023cfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d03:	0f ba e2 0f          	bt     edx,0xf
c0023d07:	72 f7                	jb     c0023d00 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d0c:	83 ca 10             	or     edx,0x10
c0023d0f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d15:	83 ca 01             	or     edx,0x1
c0023d18:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d1b:	c3                   	ret    

c0023d1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d23:	83 e2 fe             	and    edx,0xfffffffe
c0023d26:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d2c:	83 e2 ef             	and    edx,0xffffffef
c0023d2f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d35:	0f ba e2 0e          	bt     edx,0xe
c0023d39:	72 f7                	jb     c0023d32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d3e:	0f ba e2 0f          	bt     edx,0xf
c0023d42:	72 ee                	jb     c0023d32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d44:	c3                   	ret    
c0023d45:	90                   	nop

c0023d46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d46:	55                   	push   ebp
c0023d47:	57                   	push   edi
c0023d48:	56                   	push   esi
c0023d49:	53                   	push   ebx
c0023d4a:	83 ec 1c             	sub    esp,0x1c
c0023d4d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d55:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d59:	53                   	push   ebx
c0023d5a:	89 fd                	mov    ebp,edi
c0023d5c:	56                   	push   esi
c0023d5d:	c1 e5 0a             	shl    ebp,0xa
c0023d60:	e8 b7 ff ff ff       	call   c0023d1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d65:	83 ec 0c             	sub    esp,0xc
c0023d68:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d6e:	01 e8                	add    eax,ebp
c0023d70:	89 03                	mov    DWORD PTR [ebx],eax
c0023d72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d74:	68 00 04 00 00       	push   0x400
c0023d79:	6a 00                	push   0x0
c0023d7b:	50                   	push   eax
c0023d7c:	e8 f7 c9 fd ff       	call   c0000778 <memset>
c0023d81:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d87:	89 fa                	mov    edx,edi
c0023d89:	01 e8                	add    eax,ebp
c0023d8b:	c1 e7 0d             	shl    edi,0xd
c0023d8e:	89 03                	mov    DWORD PTR [ebx],eax
c0023d90:	c1 e2 08             	shl    edx,0x8
c0023d93:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d9a:	81 c2 00 80 00 00    	add    edx,0x8000
c0023da0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023da4:	89 d0                	mov    eax,edx
c0023da6:	83 c4 1c             	add    esp,0x1c
c0023da9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023daf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023db2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023db5:	68 00 01 00 00       	push   0x100
c0023dba:	6a 00                	push   0x0
c0023dbc:	50                   	push   eax
c0023dbd:	e8 b6 c9 fd ff       	call   c0000778 <memset>
c0023dc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023dc6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023dcc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023dd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023dd6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023dd9:	83 c4 10             	add    esp,0x10
c0023ddc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023de3:	31 ff                	xor    edi,edi
c0023de5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023deb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023df1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023df5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023dfb:	83 c5 20             	add    ebp,0x20
c0023dfe:	01 f8                	add    eax,edi
c0023e00:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e03:	52                   	push   edx
c0023e04:	68 00 01 00 00       	push   0x100
c0023e09:	6a 00                	push   0x0
c0023e0b:	50                   	push   eax
c0023e0c:	e8 67 c9 fd ff       	call   c0000778 <memset>
c0023e11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e15:	83 c4 10             	add    esp,0x10
c0023e18:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e1e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e25:	01 f8                	add    eax,edi
c0023e27:	81 c7 00 01 00 00    	add    edi,0x100
c0023e2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e30:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e36:	75 b3                	jne    c0023deb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e38:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e3c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e40:	83 c4 1c             	add    esp,0x1c
c0023e43:	5b                   	pop    ebx
c0023e44:	5e                   	pop    esi
c0023e45:	5f                   	pop    edi
c0023e46:	5d                   	pop    ebp
c0023e47:	e9 b0 fe ff ff       	jmp    c0023cfc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e4c:	55                   	push   ebp
c0023e4d:	57                   	push   edi
c0023e4e:	56                   	push   esi
c0023e4f:	53                   	push   ebx
c0023e50:	31 db                	xor    ebx,ebx
c0023e52:	83 ec 0c             	sub    esp,0xc
c0023e55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e59:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e5d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e60:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e66:	0f 84 aa 00 00 00    	je     c0023f16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e6c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e70:	89 d8                	mov    eax,ebx
c0023e72:	c1 e0 07             	shl    eax,0x7
c0023e75:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023e7c:	55                   	push   ebp
c0023e7d:	56                   	push   esi
c0023e7e:	e8 31 fe ff ff       	call   c0023cb4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e83:	5a                   	pop    edx
c0023e84:	83 f8 01             	cmp    eax,0x1
c0023e87:	59                   	pop    ecx
c0023e88:	75 30                	jne    c0023eba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023e8a:	50                   	push   eax
c0023e8b:	50                   	push   eax
c0023e8c:	53                   	push   ebx
c0023e8d:	68 25 cd 02 c0       	push   0xc002cd25
c0023e92:	e8 3d f0 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023e97:	83 c4 0c             	add    esp,0xc
c0023e9a:	53                   	push   ebx
c0023e9b:	55                   	push   ebp
c0023e9c:	56                   	push   esi
c0023e9d:	e8 a4 fe ff ff       	call   c0023d46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ea2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ea9:	e8 92 b9 fe ff       	call   c000f840 <malloc>
c0023eae:	89 c5                	mov    ebp,eax
c0023eb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0023eb3:	e8 60 0d 00 00       	call   c0024c18 <SATA::SATA()>
c0023eb8:	eb 33                	jmp    c0023eed <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023eba:	83 f8 04             	cmp    eax,0x4
c0023ebd:	75 47                	jne    c0023f06 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023ebf:	50                   	push   eax
c0023ec0:	50                   	push   eax
c0023ec1:	53                   	push   ebx
c0023ec2:	68 3c cd 02 c0       	push   0xc002cd3c
c0023ec7:	e8 08 f0 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023ecc:	83 c4 0c             	add    esp,0xc
c0023ecf:	53                   	push   ebx
c0023ed0:	55                   	push   ebp
c0023ed1:	56                   	push   esi
c0023ed2:	e8 6f fe ff ff       	call   c0023d46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ed7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ede:	e8 5d b9 fe ff       	call   c000f840 <malloc>
c0023ee3:	89 c5                	mov    ebp,eax
c0023ee5:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ee8:	e8 d7 10 00 00       	call   c0024fc4 <SATAPI::SATAPI()>
c0023eed:	5a                   	pop    edx
c0023eee:	59                   	pop    ecx
c0023eef:	55                   	push   ebp
c0023ef0:	56                   	push   esi
c0023ef1:	e8 04 04 ff ff       	call   c00142fa <Device::addChild(Device*)>
c0023ef6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ef9:	56                   	push   esi
c0023efa:	6a 00                	push   0x0
c0023efc:	53                   	push   ebx
c0023efd:	55                   	push   ebp
c0023efe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f01:	83 c4 20             	add    esp,0x20
c0023f04:	eb 10                	jmp    c0023f16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f06:	50                   	push   eax
c0023f07:	50                   	push   eax
c0023f08:	53                   	push   ebx
c0023f09:	68 55 cd 02 c0       	push   0xc002cd55
c0023f0e:	e8 c1 ef fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0023f13:	83 c4 10             	add    esp,0x10
c0023f16:	d1 ef                	shr    edi,1
c0023f18:	43                   	inc    ebx
c0023f19:	83 fb 20             	cmp    ebx,0x20
c0023f1c:	0f 85 3e ff ff ff    	jne    c0023e60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f22:	83 c4 0c             	add    esp,0xc
c0023f25:	5b                   	pop    ebx
c0023f26:	5e                   	pop    esi
c0023f27:	5f                   	pop    edi
c0023f28:	5d                   	pop    ebp
c0023f29:	c3                   	ret    

c0023f2a <SATABus::open(int, int, void*)>:
c0023f2a:	83 ec 14             	sub    esp,0x14
c0023f2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f31:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f37:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f3d:	52                   	push   edx
c0023f3e:	50                   	push   eax
c0023f3f:	e8 08 ff ff ff       	call   c0023e4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f44:	31 c0                	xor    eax,eax
c0023f46:	83 c4 1c             	add    esp,0x1c
c0023f49:	c3                   	ret    

c0023f4a <ATA::close(int, int, void*)>:
c0023f4a:	83 ec 0c             	sub    esp,0xc
c0023f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f57:	85 c0                	test   eax,eax
c0023f59:	74 0c                	je     c0023f67 <ATA::close(int, int, void*)+0x1d>
c0023f5b:	83 ec 0c             	sub    esp,0xc
c0023f5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f60:	50                   	push   eax
c0023f61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f64:	83 c4 10             	add    esp,0x10
c0023f67:	31 c0                	xor    eax,eax
c0023f69:	83 c4 0c             	add    esp,0xc
c0023f6c:	c3                   	ret    
c0023f6d:	90                   	nop

c0023f6e <ATA::powerSaving(PowerSavingLevel)>:
c0023f6e:	c3                   	ret    
c0023f6f:	90                   	nop

c0023f70 <ATA::ATA()>:
c0023f70:	83 ec 0c             	sub    esp,0xc
c0023f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f77:	83 ec 04             	sub    esp,0x4
c0023f7a:	68 00 02 00 00       	push   0x200
c0023f7f:	68 3d ce 02 c0       	push   0xc002ce3d
c0023f84:	50                   	push   eax
c0023f85:	e8 94 07 ff ff       	call   c001471e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f8a:	83 c4 10             	add    esp,0x10
c0023f8d:	ba c0 cd 02 c0       	mov    edx,0xc002cdc0
c0023f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f96:	89 10                	mov    DWORD PTR [eax],edx
c0023f98:	90                   	nop
c0023f99:	83 c4 0c             	add    esp,0xc
c0023f9c:	c3                   	ret    
c0023f9d:	90                   	nop

c0023f9e <ATA::flush(bool)>:
c0023f9e:	53                   	push   ebx
c0023f9f:	83 ec 08             	sub    esp,0x8
c0023fa2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fab:	19 c0                	sbb    eax,eax
c0023fad:	83 e0 fd             	and    eax,0xfffffffd
c0023fb0:	05 ea 00 00 00       	add    eax,0xea
c0023fb5:	50                   	push   eax
c0023fb6:	6a 07                	push   0x7
c0023fb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fbf:	50                   	push   eax
c0023fc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc6:	e8 dd ef ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fcb:	83 c4 0c             	add    esp,0xc
c0023fce:	6a 00                	push   0x0
c0023fd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fd7:	50                   	push   eax
c0023fd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fde:	e8 71 fb ff ff       	call   c0023b54 <IDE::polling(unsigned char, unsigned int)>
c0023fe3:	83 c4 18             	add    esp,0x18
c0023fe6:	5b                   	pop    ebx
c0023fe7:	c3                   	ret    

c0023fe8 <ATA::readyForCommand()>:
c0023fe8:	56                   	push   esi
c0023fe9:	53                   	push   ebx
c0023fea:	31 db                	xor    ebx,ebx
c0023fec:	50                   	push   eax
c0023fed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ff1:	50                   	push   eax
c0023ff2:	6a 0c                	push   0xc
c0023ff4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ffb:	50                   	push   eax
c0023ffc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024002:	e8 61 f0 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c0024007:	83 c4 10             	add    esp,0x10
c002400a:	a8 88                	test   al,0x88
c002400c:	74 23                	je     c0024031 <ATA::readyForCommand()+0x49>
c002400e:	43                   	inc    ebx
c002400f:	83 fb 63             	cmp    ebx,0x63
c0024012:	7e dd                	jle    c0023ff1 <ATA::readyForCommand()+0x9>
c0024014:	51                   	push   ecx
c0024015:	51                   	push   ecx
c0024016:	6a 00                	push   0x0
c0024018:	68 40 42 0f 00       	push   0xf4240
c002401d:	e8 c8 a2 ff ff       	call   c001e2ea <nanoSleep(unsigned long long)>
c0024022:	83 c4 10             	add    esp,0x10
c0024025:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002402b:	75 c4                	jne    c0023ff1 <ATA::readyForCommand()+0x9>
c002402d:	31 c0                	xor    eax,eax
c002402f:	eb 02                	jmp    c0024033 <ATA::readyForCommand()+0x4b>
c0024031:	b0 01                	mov    al,0x1
c0024033:	5a                   	pop    edx
c0024034:	5b                   	pop    ebx
c0024035:	5e                   	pop    esi
c0024036:	c3                   	ret    
c0024037:	90                   	nop

c0024038 <ATA::access(unsigned long long, int, void*, bool)>:
c0024038:	55                   	push   ebp
c0024039:	57                   	push   edi
c002403a:	56                   	push   esi
c002403b:	53                   	push   ebx
c002403c:	83 ec 2c             	sub    esp,0x2c
c002403f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024043:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024047:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002404b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002404f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024053:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024057:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002405b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024061:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024065:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002406b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002406f:	c1 e0 06             	shl    eax,0x6
c0024072:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002407a:	74 5d                	je     c00240d9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002407c:	89 fa                	mov    edx,edi
c002407e:	89 f0                	mov    eax,esi
c0024080:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024084:	c1 ea 1c             	shr    edx,0x1c
c0024087:	89 d1                	mov    ecx,edx
c0024089:	09 c1                	or     ecx,eax
c002408b:	74 25                	je     c00240b2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002408d:	31 ed                	xor    ebp,ebp
c002408f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024096:	89 fa                	mov    edx,edi
c0024098:	89 f0                	mov    eax,esi
c002409a:	0f ad d0             	shrd   eax,edx,cl
c002409d:	d3 ea                	shr    edx,cl
c002409f:	f6 c1 20             	test   cl,0x20
c00240a2:	74 02                	je     c00240a6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240a4:	89 d0                	mov    eax,edx
c00240a6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240aa:	45                   	inc    ebp
c00240ab:	83 fd 06             	cmp    ebp,0x6
c00240ae:	75 df                	jne    c002408f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240b0:	eb 76                	jmp    c0024128 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240b2:	89 f0                	mov    eax,esi
c00240b4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240b9:	89 fa                	mov    edx,edi
c00240bb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240c2:	0f ac d0 10          	shrd   eax,edx,0x10
c00240c6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240cb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00240cf:	c1 ee 18             	shr    esi,0x18
c00240d2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00240d7:	eb 56                	jmp    c002412f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240d9:	6a 00                	push   0x0
c00240db:	6a 3f                	push   0x3f
c00240dd:	57                   	push   edi
c00240de:	56                   	push   esi
c00240df:	e8 98 29 00 00       	call   c0026a7c <__umoddi3>
c00240e4:	83 c4 10             	add    esp,0x10
c00240e7:	40                   	inc    eax
c00240e8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00240ec:	6a 00                	push   0x0
c00240ee:	68 f0 03 00 00       	push   0x3f0
c00240f3:	57                   	push   edi
c00240f4:	56                   	push   esi
c00240f5:	e8 82 28 00 00       	call   c002697c <__udivdi3>
c00240fa:	83 c4 10             	add    esp,0x10
c00240fd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024102:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024109:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002410e:	6a 00                	push   0x0
c0024110:	6a 3f                	push   0x3f
c0024112:	57                   	push   edi
c0024113:	56                   	push   esi
c0024114:	e8 63 28 00 00       	call   c002697c <__udivdi3>
c0024119:	83 c4 10             	add    esp,0x10
c002411c:	89 c6                	mov    esi,eax
c002411e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024123:	83 e6 0f             	and    esi,0xf
c0024126:	eb 07                	jmp    c002412f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024128:	31 f6                	xor    esi,esi
c002412a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002412f:	bf 01 00 00 00       	mov    edi,0x1
c0024134:	50                   	push   eax
c0024135:	6a 00                	push   0x0
c0024137:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002413e:	50                   	push   eax
c002413f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024143:	e8 6c f0 ff ff       	call   c00231b4 <IDE::enableIRQs(unsigned char, bool)>
c0024148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002414b:	e8 98 fe ff ff       	call   c0023fe8 <ATA::readyForCommand()>
c0024150:	83 c4 10             	add    esp,0x10
c0024153:	84 c0                	test   al,al
c0024155:	0f 84 5a 02 00 00    	je     c00243b5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002415b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024161:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024167:	c1 e0 04             	shl    eax,0x4
c002416a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024171:	09 c6                	or     esi,eax
c0024173:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024178:	75 05                	jne    c002417f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002417a:	83 ce a0             	or     esi,0xffffffa0
c002417d:	eb 03                	jmp    c0024182 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002417f:	83 ce e0             	or     esi,0xffffffe0
c0024182:	89 f0                	mov    eax,esi
c0024184:	0f b6 f0             	movzx  esi,al
c0024187:	56                   	push   esi
c0024188:	6a 06                	push   0x6
c002418a:	51                   	push   ecx
c002418b:	52                   	push   edx
c002418c:	e8 17 ee ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024191:	83 c4 10             	add    esp,0x10
c0024194:	6a 00                	push   0x0
c0024196:	6a 01                	push   0x1
c0024198:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002419f:	50                   	push   eax
c00241a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241a6:	e8 fd ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ab:	83 c4 10             	add    esp,0x10
c00241ae:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241b3:	75 6e                	jne    c0024223 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241b5:	6a 00                	push   0x0
c00241b7:	6a 08                	push   0x8
c00241b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c0:	50                   	push   eax
c00241c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241c7:	e8 dc ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241cc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00241d1:	50                   	push   eax
c00241d2:	6a 09                	push   0x9
c00241d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241db:	50                   	push   eax
c00241dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e2:	e8 c1 ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e7:	83 c4 20             	add    esp,0x20
c00241ea:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00241ef:	50                   	push   eax
c00241f0:	6a 0a                	push   0xa
c00241f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f9:	50                   	push   eax
c00241fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024200:	e8 a3 ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024205:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002420a:	50                   	push   eax
c002420b:	6a 0b                	push   0xb
c002420d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024214:	50                   	push   eax
c0024215:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002421b:	e8 88 ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024220:	83 c4 20             	add    esp,0x20
c0024223:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024228:	50                   	push   eax
c0024229:	6a 02                	push   0x2
c002422b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024232:	50                   	push   eax
c0024233:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024239:	e8 6a ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002423e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024243:	50                   	push   eax
c0024244:	6a 03                	push   0x3
c0024246:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002424d:	50                   	push   eax
c002424e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024254:	e8 4f ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024259:	83 c4 20             	add    esp,0x20
c002425c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024261:	50                   	push   eax
c0024262:	6a 04                	push   0x4
c0024264:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002426b:	50                   	push   eax
c002426c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024272:	e8 31 ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024277:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002427c:	50                   	push   eax
c002427d:	6a 05                	push   0x5
c002427f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024286:	50                   	push   eax
c0024287:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002428d:	e8 16 ed ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024292:	83 c4 20             	add    esp,0x20
c0024295:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002429a:	0f 94 c0             	sete   al
c002429d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242a2:	74 09                	je     c00242ad <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242a4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242ab:	eb 07                	jmp    c00242b4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242ad:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242b4:	0f b6 c0             	movzx  eax,al
c00242b7:	50                   	push   eax
c00242b8:	6a 07                	push   0x7
c00242ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c1:	50                   	push   eax
c00242c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c8:	e8 db ec ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242cd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00242d1:	83 c4 10             	add    esp,0x10
c00242d4:	85 f6                	test   esi,esi
c00242d6:	0f 84 ba 00 00 00    	je     c0024396 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00242dc:	50                   	push   eax
c00242dd:	6a 01                	push   0x1
c00242df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e6:	50                   	push   eax
c00242e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ed:	e8 62 f8 ff ff       	call   c0023b54 <IDE::polling(unsigned char, unsigned int)>
c00242f2:	83 c4 10             	add    esp,0x10
c00242f5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00242fb:	84 c0                	test   al,al
c00242fd:	74 2c                	je     c002432b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00242ff:	0f b6 f8             	movzx  edi,al
c0024302:	0f b6 d2             	movzx  edx,dl
c0024305:	57                   	push   edi
c0024306:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002430d:	50                   	push   eax
c002430e:	52                   	push   edx
c002430f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024315:	e8 a4 f6 ff ff       	call   c00239be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002431a:	c7 04 24 98 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd98
c0024321:	e8 ae eb fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0024326:	e9 87 00 00 00       	jmp    c00243b2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002432b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024330:	74 33                	je     c0024365 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024332:	31 ed                	xor    ebp,ebp
c0024334:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024338:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002433c:	50                   	push   eax
c002433d:	50                   	push   eax
c002433e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024345:	50                   	push   eax
c0024346:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434c:	e8 45 ec ff ff       	call   c0022f96 <IDE::getBase(unsigned char)>
c0024351:	89 c2                	mov    edx,eax
c0024353:	89 f8                	mov    eax,edi
c0024355:	66 ef                	out    dx,ax
c0024357:	45                   	inc    ebp
c0024358:	83 c4 10             	add    esp,0x10
c002435b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024361:	75 d1                	jne    c0024334 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024363:	eb 23                	jmp    c0024388 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024365:	0f b6 d2             	movzx  edx,dl
c0024368:	51                   	push   ecx
c0024369:	51                   	push   ecx
c002436a:	52                   	push   edx
c002436b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024371:	e8 20 ec ff ff       	call   c0022f96 <IDE::getBase(unsigned char)>
c0024376:	b9 00 01 00 00       	mov    ecx,0x100
c002437b:	89 c2                	mov    edx,eax
c002437d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024381:	fc                   	cld    
c0024382:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024385:	83 c4 10             	add    esp,0x10
c0024388:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024390:	4e                   	dec    esi
c0024391:	e9 3e ff ff ff       	jmp    c00242d4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024396:	31 ff                	xor    edi,edi
c0024398:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002439d:	74 16                	je     c00243b5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002439f:	50                   	push   eax
c00243a0:	50                   	push   eax
c00243a1:	31 c0                	xor    eax,eax
c00243a3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243a8:	0f 94 c0             	sete   al
c00243ab:	50                   	push   eax
c00243ac:	53                   	push   ebx
c00243ad:	e8 ec fb ff ff       	call   c0023f9e <ATA::flush(bool)>
c00243b2:	83 c4 10             	add    esp,0x10
c00243b5:	83 c4 2c             	add    esp,0x2c
c00243b8:	89 f8                	mov    eax,edi
c00243ba:	5b                   	pop    ebx
c00243bb:	5e                   	pop    esi
c00243bc:	5f                   	pop    edi
c00243bd:	5d                   	pop    ebp
c00243be:	c3                   	ret    
c00243bf:	90                   	nop

c00243c0 <ATA::read(unsigned long long, int, void*)>:
c00243c0:	57                   	push   edi
c00243c1:	b8 04 00 00 00       	mov    eax,0x4
c00243c6:	56                   	push   esi
c00243c7:	53                   	push   ebx
c00243c8:	83 ec 10             	sub    esp,0x10
c00243cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00243cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00243d3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00243da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00243de:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00243e4:	77 3b                	ja     c0024421 <ATA::read(unsigned long long, int, void*)+0x61>
c00243e6:	b8 06 00 00 00       	mov    eax,0x6
c00243eb:	85 d2                	test   edx,edx
c00243ed:	74 32                	je     c0024421 <ATA::read(unsigned long long, int, void*)+0x61>
c00243ef:	50                   	push   eax
c00243f0:	50                   	push   eax
c00243f1:	6a 00                	push   0x0
c00243f3:	52                   	push   edx
c00243f4:	53                   	push   ebx
c00243f5:	57                   	push   edi
c00243f6:	56                   	push   esi
c00243f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00243fb:	e8 38 fc ff ff       	call   c0024038 <ATA::access(unsigned long long, int, void*, bool)>
c0024400:	83 c4 20             	add    esp,0x20
c0024403:	85 c0                	test   eax,eax
c0024405:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024409:	75 11                	jne    c002441c <ATA::read(unsigned long long, int, void*)+0x5c>
c002440b:	01 1d 48 27 03 c0    	add    DWORD PTR ds:0xc0032748,ebx
c0024411:	e8 de c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002441a:	eb 05                	jmp    c0024421 <ATA::read(unsigned long long, int, void*)+0x61>
c002441c:	b8 01 00 00 00       	mov    eax,0x1
c0024421:	83 c4 10             	add    esp,0x10
c0024424:	5b                   	pop    ebx
c0024425:	5e                   	pop    esi
c0024426:	5f                   	pop    edi
c0024427:	c3                   	ret    

c0024428 <ATA::write(unsigned long long, int, void*)>:
c0024428:	57                   	push   edi
c0024429:	b8 04 00 00 00       	mov    eax,0x4
c002442e:	56                   	push   esi
c002442f:	53                   	push   ebx
c0024430:	83 ec 10             	sub    esp,0x10
c0024433:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024437:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002443b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002443e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024442:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024446:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002444c:	77 3b                	ja     c0024489 <ATA::write(unsigned long long, int, void*)+0x61>
c002444e:	b8 06 00 00 00       	mov    eax,0x6
c0024453:	85 d2                	test   edx,edx
c0024455:	74 32                	je     c0024489 <ATA::write(unsigned long long, int, void*)+0x61>
c0024457:	50                   	push   eax
c0024458:	50                   	push   eax
c0024459:	6a 01                	push   0x1
c002445b:	52                   	push   edx
c002445c:	53                   	push   ebx
c002445d:	57                   	push   edi
c002445e:	56                   	push   esi
c002445f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024463:	e8 d0 fb ff ff       	call   c0024038 <ATA::access(unsigned long long, int, void*, bool)>
c0024468:	83 c4 20             	add    esp,0x20
c002446b:	85 c0                	test   eax,eax
c002446d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024471:	75 11                	jne    c0024484 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024473:	01 1d 44 27 03 c0    	add    DWORD PTR ds:0xc0032744,ebx
c0024479:	e8 76 c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c002447e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024482:	eb 05                	jmp    c0024489 <ATA::write(unsigned long long, int, void*)+0x61>
c0024484:	b8 01 00 00 00       	mov    eax,0x1
c0024489:	83 c4 10             	add    esp,0x10
c002448c:	5b                   	pop    ebx
c002448d:	5e                   	pop    esi
c002448e:	5f                   	pop    edi
c002448f:	c3                   	ret    

c0024490 <ATA::detectCHS()>:
c0024490:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024494:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002449a:	c1 e0 06             	shl    eax,0x6
c002449d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244a3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244ad:	c7 44 24 04 a3 cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cda3
c00244b5:	e9 bb 60 ff ff       	jmp    c001a575 <Krnl::panic(char const*)>

c00244ba <ATA::open(int, int, void*)>:
c00244ba:	53                   	push   ebx
c00244bb:	83 ec 08             	sub    esp,0x8
c00244be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244ca:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244d0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244d6:	c1 e0 06             	shl    eax,0x6
c00244d9:	01 d0                	add    eax,edx
c00244db:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00244e2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00244e8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244ef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244f9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244ff:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024506:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002450d:	75 0c                	jne    c002451b <ATA::open(int, int, void*)+0x61>
c002450f:	83 ec 0c             	sub    esp,0xc
c0024512:	53                   	push   ebx
c0024513:	e8 78 ff ff ff       	call   c0024490 <ATA::detectCHS()>
c0024518:	83 c4 10             	add    esp,0x10
c002451b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024521:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024527:	c1 e0 06             	shl    eax,0x6
c002452a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024531:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002453b:	d1 e8                	shr    eax,1
c002453d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024543:	6a 04                	push   0x4
c0024545:	6a 0c                	push   0xc
c0024547:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002454e:	50                   	push   eax
c002454f:	52                   	push   edx
c0024550:	e8 53 ea ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024555:	90                   	nop
c0024556:	90                   	nop
c0024557:	6a 00                	push   0x0
c0024559:	6a 0c                	push   0xc
c002455b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024562:	50                   	push   eax
c0024563:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024569:	e8 3a ea ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002456e:	83 c4 14             	add    esp,0x14
c0024571:	53                   	push   ebx
c0024572:	e8 0f 02 ff ff       	call   c0014786 <PhysicalDisk::startCache()>
c0024577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002457a:	e8 7d 23 ff ff       	call   c00168fc <createPartitionsForDisk(PhysicalDisk*)>
c002457f:	31 c0                	xor    eax,eax
c0024581:	83 c4 18             	add    esp,0x18
c0024584:	5b                   	pop    ebx
c0024585:	c3                   	ret    

c0024586 <ATAPI::write(unsigned long long, int, void*)>:
c0024586:	b8 03 00 00 00       	mov    eax,0x3
c002458b:	c3                   	ret    

c002458c <ATAPI::close(int, int, void*)>:
c002458c:	83 ec 0c             	sub    esp,0xc
c002458f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024593:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024599:	85 c0                	test   eax,eax
c002459b:	74 0c                	je     c00245a9 <ATAPI::close(int, int, void*)+0x1d>
c002459d:	83 ec 0c             	sub    esp,0xc
c00245a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00245a2:	50                   	push   eax
c00245a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245a6:	83 c4 10             	add    esp,0x10
c00245a9:	31 c0                	xor    eax,eax
c00245ab:	83 c4 0c             	add    esp,0xc
c00245ae:	c3                   	ret    
c00245af:	90                   	nop

c00245b0 <ATAPI::ATAPI()>:
c00245b0:	83 ec 0c             	sub    esp,0xc
c00245b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245b7:	83 ec 04             	sub    esp,0x4
c00245ba:	68 00 08 00 00       	push   0x800
c00245bf:	68 dd ce 02 c0       	push   0xc002cedd
c00245c4:	50                   	push   eax
c00245c5:	e8 54 01 ff ff       	call   c001471e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245ca:	83 c4 10             	add    esp,0x10
c00245cd:	ba f8 cd 02 c0       	mov    edx,0xc002cdf8
c00245d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d6:	89 10                	mov    DWORD PTR [eax],edx
c00245d8:	90                   	nop
c00245d9:	83 c4 0c             	add    esp,0xc
c00245dc:	c3                   	ret    
c00245dd:	90                   	nop

c00245de <ATAPI::readyForCommand()>:
c00245de:	56                   	push   esi
c00245df:	53                   	push   ebx
c00245e0:	31 db                	xor    ebx,ebx
c00245e2:	50                   	push   eax
c00245e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00245e7:	50                   	push   eax
c00245e8:	6a 0c                	push   0xc
c00245ea:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00245f1:	50                   	push   eax
c00245f2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00245f8:	e8 6b ea ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00245fd:	83 c4 10             	add    esp,0x10
c0024600:	a8 88                	test   al,0x88
c0024602:	74 23                	je     c0024627 <ATAPI::readyForCommand()+0x49>
c0024604:	43                   	inc    ebx
c0024605:	83 fb 63             	cmp    ebx,0x63
c0024608:	7e dd                	jle    c00245e7 <ATAPI::readyForCommand()+0x9>
c002460a:	51                   	push   ecx
c002460b:	51                   	push   ecx
c002460c:	6a 00                	push   0x0
c002460e:	68 40 42 0f 00       	push   0xf4240
c0024613:	e8 d2 9c ff ff       	call   c001e2ea <nanoSleep(unsigned long long)>
c0024618:	83 c4 10             	add    esp,0x10
c002461b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024621:	75 c4                	jne    c00245e7 <ATAPI::readyForCommand()+0x9>
c0024623:	31 c0                	xor    eax,eax
c0024625:	eb 02                	jmp    c0024629 <ATAPI::readyForCommand()+0x4b>
c0024627:	b0 01                	mov    al,0x1
c0024629:	5a                   	pop    edx
c002462a:	5b                   	pop    ebx
c002462b:	5e                   	pop    esi
c002462c:	c3                   	ret    
c002462d:	90                   	nop

c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002462e:	55                   	push   ebp
c002462f:	57                   	push   edi
c0024630:	56                   	push   esi
c0024631:	53                   	push   ebx
c0024632:	83 ec 20             	sub    esp,0x20
c0024635:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024639:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002463d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024641:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024645:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024649:	6a 01                	push   0x1
c002464b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024652:	50                   	push   eax
c0024653:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024659:	e8 56 eb ff ff       	call   c00231b4 <IDE::enableIRQs(unsigned char, bool)>
c002465e:	5e                   	pop    esi
c002465f:	58                   	pop    eax
c0024660:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024667:	50                   	push   eax
c0024668:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002466e:	e8 0f e9 ff ff       	call   c0022f82 <IDE::prepareInterrupt(unsigned char)>
c0024673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024676:	e8 63 ff ff ff       	call   c00245de <ATAPI::readyForCommand()>
c002467b:	83 c4 10             	add    esp,0x10
c002467e:	84 c0                	test   al,al
c0024680:	75 0a                	jne    c002468c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024682:	bb 01 00 00 00       	mov    ebx,0x1
c0024687:	e9 57 02 00 00       	jmp    c00248e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002468c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024692:	c1 e0 04             	shl    eax,0x4
c0024695:	0f b6 c0             	movzx  eax,al
c0024698:	50                   	push   eax
c0024699:	6a 06                	push   0x6
c002469b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a2:	50                   	push   eax
c00246a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a9:	e8 fa e8 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ae:	6a 00                	push   0x0
c00246b0:	6a 01                	push   0x1
c00246b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b9:	50                   	push   eax
c00246ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c0:	e8 e3 e8 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246c5:	83 c4 20             	add    esp,0x20
c00246c8:	0f b6 c3             	movzx  eax,bl
c00246cb:	0f b6 df             	movzx  ebx,bh
c00246ce:	50                   	push   eax
c00246cf:	6a 04                	push   0x4
c00246d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d8:	50                   	push   eax
c00246d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246df:	e8 c4 e8 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e4:	53                   	push   ebx
c00246e5:	6a 05                	push   0x5
c00246e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ee:	50                   	push   eax
c00246ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f5:	e8 ae e8 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246fa:	83 c4 20             	add    esp,0x20
c00246fd:	68 a0 00 00 00       	push   0xa0
c0024702:	6a 07                	push   0x7
c0024704:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470b:	50                   	push   eax
c002470c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024712:	e8 91 e8 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024717:	83 c4 0c             	add    esp,0xc
c002471a:	6a 01                	push   0x1
c002471c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024723:	50                   	push   eax
c0024724:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002472a:	e8 25 f4 ff ff       	call   c0023b54 <IDE::polling(unsigned char, unsigned int)>
c002472f:	83 c4 10             	add    esp,0x10
c0024732:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024738:	84 c0                	test   al,al
c002473a:	74 23                	je     c002475f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002473c:	0f b6 d8             	movzx  ebx,al
c002473f:	0f b6 d2             	movzx  edx,dl
c0024742:	53                   	push   ebx
c0024743:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002474a:	50                   	push   eax
c002474b:	52                   	push   edx
c002474c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024752:	e8 67 f2 ff ff       	call   c00239be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024757:	83 c4 10             	add    esp,0x10
c002475a:	e9 84 01 00 00       	jmp    c00248e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002475f:	0f b6 d2             	movzx  edx,dl
c0024762:	53                   	push   ebx
c0024763:	53                   	push   ebx
c0024764:	52                   	push   edx
c0024765:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002476b:	e8 26 e8 ff ff       	call   c0022f96 <IDE::getBase(unsigned char)>
c0024770:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024774:	b9 06 00 00 00       	mov    ecx,0x6
c0024779:	89 c2                	mov    edx,eax
c002477b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002477e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024782:	83 c4 10             	add    esp,0x10
c0024785:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002478b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024792:	85 db                	test   ebx,ebx
c0024794:	0f 84 ec 00 00 00    	je     c0024886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002479a:	51                   	push   ecx
c002479b:	51                   	push   ecx
c002479c:	52                   	push   edx
c002479d:	50                   	push   eax
c002479e:	e8 73 e9 ff ff       	call   c0023116 <IDE::waitInterrupt(unsigned char)>
c00247a3:	83 c4 10             	add    esp,0x10
c00247a6:	84 c0                	test   al,al
c00247a8:	0f 84 d4 fe ff ff    	je     c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247ae:	56                   	push   esi
c00247af:	56                   	push   esi
c00247b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b7:	50                   	push   eax
c00247b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247be:	e8 bf e7 ff ff       	call   c0022f82 <IDE::prepareInterrupt(unsigned char)>
c00247c3:	83 c4 0c             	add    esp,0xc
c00247c6:	6a 04                	push   0x4
c00247c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247cf:	50                   	push   eax
c00247d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d6:	e8 8d e8 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00247db:	83 c4 0c             	add    esp,0xc
c00247de:	89 c6                	mov    esi,eax
c00247e0:	6a 05                	push   0x5
c00247e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e9:	50                   	push   eax
c00247ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f0:	e8 73 e8 ff ff       	call   c0023068 <IDE::read(unsigned char, unsigned char)>
c00247f5:	89 f1                	mov    ecx,esi
c00247f7:	0f b6 c0             	movzx  eax,al
c00247fa:	0f b6 f1             	movzx  esi,cl
c00247fd:	c1 e0 08             	shl    eax,0x8
c0024800:	09 c6                	or     esi,eax
c0024802:	d1 fe                	sar    esi,1
c0024804:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024808:	83 c4 10             	add    esp,0x10
c002480b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024810:	74 41                	je     c0024853 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024812:	31 c9                	xor    ecx,ecx
c0024814:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002481a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024821:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024825:	75 0a                	jne    c0024831 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024827:	01 c9                	add    ecx,ecx
c0024829:	01 cd                	add    ebp,ecx
c002482b:	4b                   	dec    ebx
c002482c:	e9 54 ff ff ff       	jmp    c0024785 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024831:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024836:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002483a:	51                   	push   ecx
c002483b:	51                   	push   ecx
c002483c:	52                   	push   edx
c002483d:	50                   	push   eax
c002483e:	e8 53 e7 ff ff       	call   c0022f96 <IDE::getBase(unsigned char)>
c0024843:	89 c2                	mov    edx,eax
c0024845:	89 f0                	mov    eax,esi
c0024847:	66 ef                	out    dx,ax
c0024849:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002484d:	83 c4 10             	add    esp,0x10
c0024850:	41                   	inc    ecx
c0024851:	eb c1                	jmp    c0024814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024853:	31 f6                	xor    esi,esi
c0024855:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002485b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024862:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024866:	75 06                	jne    c002486e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024868:	01 f6                	add    esi,esi
c002486a:	01 f5                	add    ebp,esi
c002486c:	eb bd                	jmp    c002482b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002486e:	51                   	push   ecx
c002486f:	51                   	push   ecx
c0024870:	52                   	push   edx
c0024871:	50                   	push   eax
c0024872:	e8 1f e7 ff ff       	call   c0022f96 <IDE::getBase(unsigned char)>
c0024877:	89 c2                	mov    edx,eax
c0024879:	66 ed                	in     ax,dx
c002487b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024880:	83 c4 10             	add    esp,0x10
c0024883:	46                   	inc    esi
c0024884:	eb cf                	jmp    c0024855 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024886:	51                   	push   ecx
c0024887:	51                   	push   ecx
c0024888:	52                   	push   edx
c0024889:	50                   	push   eax
c002488a:	e8 87 e8 ff ff       	call   c0023116 <IDE::waitInterrupt(unsigned char)>
c002488f:	83 c4 10             	add    esp,0x10
c0024892:	84 c0                	test   al,al
c0024894:	0f 84 e8 fd ff ff    	je     c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002489a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002489f:	52                   	push   edx
c00248a0:	52                   	push   edx
c00248a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a8:	50                   	push   eax
c00248a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248af:	e8 ce e6 ff ff       	call   c0022f82 <IDE::prepareInterrupt(unsigned char)>
c00248b4:	83 c4 10             	add    esp,0x10
c00248b7:	50                   	push   eax
c00248b8:	50                   	push   eax
c00248b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248c0:	50                   	push   eax
c00248c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248c7:	e8 ca e6 ff ff       	call   c0022f96 <IDE::getBase(unsigned char)>
c00248cc:	8d 50 07             	lea    edx,[eax+0x7]
c00248cf:	ec                   	in     al,dx
c00248d0:	83 c4 10             	add    esp,0x10
c00248d3:	a8 88                	test   al,0x88
c00248d5:	74 0a                	je     c00248e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248d7:	4b                   	dec    ebx
c00248d8:	75 dd                	jne    c00248b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00248da:	bb 02 00 00 00       	mov    ebx,0x2
c00248df:	eb 02                	jmp    c00248e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248e1:	31 db                	xor    ebx,ebx
c00248e3:	83 c4 1c             	add    esp,0x1c
c00248e6:	89 d8                	mov    eax,ebx
c00248e8:	5b                   	pop    ebx
c00248e9:	5e                   	pop    esi
c00248ea:	5f                   	pop    edi
c00248eb:	5d                   	pop    ebp
c00248ec:	c3                   	ret    
c00248ed:	90                   	nop

c00248ee <ATAPI::diskRemoved()>:
c00248ee:	83 ec 18             	sub    esp,0x18
c00248f1:	68 e9 ce 02 c0       	push   0xc002cee9
c00248f6:	e8 d9 e5 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00248fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248ff:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024906:	83 c4 1c             	add    esp,0x1c
c0024909:	c3                   	ret    

c002490a <ATAPI::eject()>:
c002490a:	57                   	push   edi
c002490b:	b9 03 00 00 00       	mov    ecx,0x3
c0024910:	53                   	push   ebx
c0024911:	83 ec 14             	sub    esp,0x14
c0024914:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024918:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002491c:	fc                   	cld    
c002491d:	31 c0                	xor    eax,eax
c002491f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024921:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024926:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002492b:	50                   	push   eax
c002492c:	50                   	push   eax
c002492d:	6a 00                	push   0x0
c002492f:	6a 00                	push   0x0
c0024931:	6a 00                	push   0x0
c0024933:	6a 02                	push   0x2
c0024935:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024939:	50                   	push   eax
c002493a:	53                   	push   ebx
c002493b:	e8 ee fc ff ff       	call   c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024940:	83 c4 14             	add    esp,0x14
c0024943:	53                   	push   ebx
c0024944:	e8 a5 ff ff ff       	call   c00248ee <ATAPI::diskRemoved()>
c0024949:	83 c4 24             	add    esp,0x24
c002494c:	31 c0                	xor    eax,eax
c002494e:	5b                   	pop    ebx
c002494f:	5f                   	pop    edi
c0024950:	c3                   	ret    
c0024951:	90                   	nop

c0024952 <ATAPI::diskInserted()>:
c0024952:	53                   	push   ebx
c0024953:	83 ec 14             	sub    esp,0x14
c0024956:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002495a:	68 00 cf 02 c0       	push   0xc002cf00
c002495f:	e8 70 e5 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0024964:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002496b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002496e:	e8 13 fe fe ff       	call   c0014786 <PhysicalDisk::startCache()>
c0024973:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024977:	83 c4 18             	add    esp,0x18
c002497a:	5b                   	pop    ebx
c002497b:	e9 7c 1f ff ff       	jmp    c00168fc <createPartitionsForDisk(PhysicalDisk*)>

c0024980 <ATAPI::detectMedia()>:
c0024980:	56                   	push   esi
c0024981:	53                   	push   ebx
c0024982:	83 ec 28             	sub    esp,0x28
c0024985:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024989:	6a 0c                	push   0xc
c002498b:	6a 00                	push   0x0
c002498d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024991:	56                   	push   esi
c0024992:	e8 e1 bd fd ff       	call   c0000778 <memset>
c0024997:	58                   	pop    eax
c0024998:	5a                   	pop    edx
c0024999:	6a 00                	push   0x0
c002499b:	6a 00                	push   0x0
c002499d:	6a 00                	push   0x0
c002499f:	6a 00                	push   0x0
c00249a1:	56                   	push   esi
c00249a2:	53                   	push   ebx
c00249a3:	e8 86 fc ff ff       	call   c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249a8:	83 c4 1c             	add    esp,0x1c
c00249ab:	6a 0c                	push   0xc
c00249ad:	6a 00                	push   0x0
c00249af:	56                   	push   esi
c00249b0:	e8 c3 bd fd ff       	call   c0000778 <memset>
c00249b5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249ba:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249bf:	59                   	pop    ecx
c00249c0:	58                   	pop    eax
c00249c1:	6a 01                	push   0x1
c00249c3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249c7:	50                   	push   eax
c00249c8:	6a 00                	push   0x0
c00249ca:	6a 12                	push   0x12
c00249cc:	56                   	push   esi
c00249cd:	53                   	push   ebx
c00249ce:	e8 5b fc ff ff       	call   c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249d3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249d7:	83 c4 20             	add    esp,0x20
c00249da:	83 e0 7f             	and    eax,0x7f
c00249dd:	3c 70                	cmp    al,0x70
c00249df:	74 15                	je     c00249f6 <ATAPI::detectMedia()+0x76>
c00249e1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249e8:	75 0c                	jne    c00249f6 <ATAPI::detectMedia()+0x76>
c00249ea:	83 ec 0c             	sub    esp,0xc
c00249ed:	53                   	push   ebx
c00249ee:	e8 5f ff ff ff       	call   c0024952 <ATAPI::diskInserted()>
c00249f3:	83 c4 10             	add    esp,0x10
c00249f6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00249fa:	83 e0 0f             	and    eax,0xf
c00249fd:	3c 02                	cmp    al,0x2
c00249ff:	75 1b                	jne    c0024a1c <ATAPI::detectMedia()+0x9c>
c0024a01:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a06:	75 2d                	jne    c0024a35 <ATAPI::detectMedia()+0xb5>
c0024a08:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a0f:	74 24                	je     c0024a35 <ATAPI::detectMedia()+0xb5>
c0024a11:	83 ec 0c             	sub    esp,0xc
c0024a14:	53                   	push   ebx
c0024a15:	e8 d4 fe ff ff       	call   c00248ee <ATAPI::diskRemoved()>
c0024a1a:	eb 16                	jmp    c0024a32 <ATAPI::detectMedia()+0xb2>
c0024a1c:	84 c0                	test   al,al
c0024a1e:	75 15                	jne    c0024a35 <ATAPI::detectMedia()+0xb5>
c0024a20:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a27:	75 0c                	jne    c0024a35 <ATAPI::detectMedia()+0xb5>
c0024a29:	83 ec 0c             	sub    esp,0xc
c0024a2c:	53                   	push   ebx
c0024a2d:	e8 20 ff ff ff       	call   c0024952 <ATAPI::diskInserted()>
c0024a32:	83 c4 10             	add    esp,0x10
c0024a35:	83 c4 24             	add    esp,0x24
c0024a38:	5b                   	pop    ebx
c0024a39:	5e                   	pop    esi
c0024a3a:	c3                   	ret    
c0024a3b:	90                   	nop

c0024a3c <ATAPI::open(int, int, void*)>:
c0024a3c:	53                   	push   ebx
c0024a3d:	83 ec 08             	sub    esp,0x8
c0024a40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a4c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a52:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a58:	c1 e0 06             	shl    eax,0x6
c0024a5b:	01 d0                	add    eax,edx
c0024a5d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a64:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a6a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a71:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a7b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a81:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a88:	6a 04                	push   0x4
c0024a8a:	6a 0c                	push   0xc
c0024a8c:	51                   	push   ecx
c0024a8d:	52                   	push   edx
c0024a8e:	e8 15 e5 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a93:	90                   	nop
c0024a94:	90                   	nop
c0024a95:	6a 00                	push   0x0
c0024a97:	6a 0c                	push   0xc
c0024a99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aa0:	50                   	push   eax
c0024aa1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aa7:	e8 fc e4 ff ff       	call   c0022fa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024ab3:	83 c4 14             	add    esp,0x14
c0024ab6:	53                   	push   ebx
c0024ab7:	e8 c4 fe ff ff       	call   c0024980 <ATAPI::detectMedia()>
c0024abc:	31 c0                	xor    eax,eax
c0024abe:	83 c4 18             	add    esp,0x18
c0024ac1:	5b                   	pop    ebx
c0024ac2:	c3                   	ret    
c0024ac3:	90                   	nop

c0024ac4 <ATAPI::read(unsigned long long, int, void*)>:
c0024ac4:	55                   	push   ebp
c0024ac5:	57                   	push   edi
c0024ac6:	56                   	push   esi
c0024ac7:	53                   	push   ebx
c0024ac8:	83 ec 1c             	sub    esp,0x1c
c0024acb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024acf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ad3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024ad7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ade:	74 41                	je     c0024b21 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024ae0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ae4:	b9 03 00 00 00       	mov    ecx,0x3
c0024ae9:	fc                   	cld    
c0024aea:	31 c0                	xor    eax,eax
c0024aec:	86 fb                	xchg   bl,bh
c0024aee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024af0:	c1 c3 10             	rol    ebx,0x10
c0024af3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024af8:	89 e8                	mov    eax,ebp
c0024afa:	86 fb                	xchg   bl,bh
c0024afc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b00:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b04:	50                   	push   eax
c0024b05:	50                   	push   eax
c0024b06:	55                   	push   ebp
c0024b07:	c1 e5 0b             	shl    ebp,0xb
c0024b0a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b0e:	6a 00                	push   0x0
c0024b10:	55                   	push   ebp
c0024b11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b15:	50                   	push   eax
c0024b16:	56                   	push   esi
c0024b17:	e8 12 fb ff ff       	call   c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b1c:	83 c4 20             	add    esp,0x20
c0024b1f:	eb 1a                	jmp    c0024b3b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b21:	83 ec 0c             	sub    esp,0xc
c0024b24:	56                   	push   esi
c0024b25:	e8 56 fe ff ff       	call   c0024980 <ATAPI::detectMedia()>
c0024b2a:	83 c4 10             	add    esp,0x10
c0024b2d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b34:	75 aa                	jne    c0024ae0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b36:	b8 02 00 00 00       	mov    eax,0x2
c0024b3b:	83 c4 1c             	add    esp,0x1c
c0024b3e:	5b                   	pop    ebx
c0024b3f:	5e                   	pop    esi
c0024b40:	5f                   	pop    edi
c0024b41:	5d                   	pop    ebp
c0024b42:	c3                   	ret    
c0024b43:	90                   	nop

c0024b44 <SATA::close(int, int, void*)>:
c0024b44:	83 ec 0c             	sub    esp,0xc
c0024b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b51:	85 c0                	test   eax,eax
c0024b53:	74 0c                	je     c0024b61 <SATA::close(int, int, void*)+0x1d>
c0024b55:	83 ec 0c             	sub    esp,0xc
c0024b58:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b5a:	50                   	push   eax
c0024b5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b5e:	83 c4 10             	add    esp,0x10
c0024b61:	31 c0                	xor    eax,eax
c0024b63:	83 c4 0c             	add    esp,0xc
c0024b66:	c3                   	ret    
c0024b67:	90                   	nop

c0024b68 <SATA::powerSaving(PowerSavingLevel)>:
c0024b68:	c3                   	ret    
c0024b69:	90                   	nop

c0024b6a <SATA::open(int, int, void*)>:
c0024b6a:	56                   	push   esi
c0024b6b:	53                   	push   ebx
c0024b6c:	50                   	push   eax
c0024b6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b75:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b7f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b85:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b93:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b9d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ba3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024baa:	e8 33 b3 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024baf:	89 c6                	mov    esi,eax
c0024bb1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bb7:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bbd:	e8 20 b3 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024bc2:	39 c6                	cmp    esi,eax
c0024bc4:	74 10                	je     c0024bd6 <SATA::open(int, int, void*)+0x6c>
c0024bc6:	83 ec 0c             	sub    esp,0xc
c0024bc9:	68 28 ce 02 c0       	push   0xc002ce28
c0024bce:	e8 a2 59 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0024bd3:	83 c4 10             	add    esp,0x10
c0024bd6:	83 ec 0c             	sub    esp,0xc
c0024bd9:	6a 02                	push   0x2
c0024bdb:	e8 bf cf fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0024be0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024be6:	e8 4f d2 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0024beb:	6a 03                	push   0x3
c0024bed:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024bf3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024bf9:	50                   	push   eax
c0024bfa:	e8 77 d7 fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024bff:	83 c4 14             	add    esp,0x14
c0024c02:	53                   	push   ebx
c0024c03:	e8 7e fb fe ff       	call   c0014786 <PhysicalDisk::startCache()>
c0024c08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c0b:	e8 ec 1c ff ff       	call   c00168fc <createPartitionsForDisk(PhysicalDisk*)>
c0024c10:	83 c4 14             	add    esp,0x14
c0024c13:	31 c0                	xor    eax,eax
c0024c15:	5b                   	pop    ebx
c0024c16:	5e                   	pop    esi
c0024c17:	c3                   	ret    

c0024c18 <SATA::SATA()>:
c0024c18:	83 ec 0c             	sub    esp,0xc
c0024c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c1f:	83 ec 04             	sub    esp,0x4
c0024c22:	68 00 02 00 00       	push   0x200
c0024c27:	68 3c ce 02 c0       	push   0xc002ce3c
c0024c2c:	50                   	push   eax
c0024c2d:	e8 ec fa fe ff       	call   c001471e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c32:	83 c4 10             	add    esp,0x10
c0024c35:	ba ac ce 02 c0       	mov    edx,0xc002ceac
c0024c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c3e:	89 10                	mov    DWORD PTR [eax],edx
c0024c40:	90                   	nop
c0024c41:	83 c4 0c             	add    esp,0xc
c0024c44:	c3                   	ret    
c0024c45:	90                   	nop

c0024c46 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c46:	55                   	push   ebp
c0024c47:	57                   	push   edi
c0024c48:	56                   	push   esi
c0024c49:	53                   	push   ebx
c0024c4a:	83 ec 2c             	sub    esp,0x2c
c0024c4d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c51:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c59:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c5d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c61:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c6a:	7e 10                	jle    c0024c7c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c6c:	83 ec 0c             	sub    esp,0xc
c0024c6f:	68 4c ce 02 c0       	push   0xc002ce4c
c0024c74:	e8 fc 58 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0024c79:	83 c4 10             	add    esp,0x10
c0024c7c:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024c82:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c92:	89 f0                	mov    eax,esi
c0024c94:	c1 e0 07             	shl    eax,0x7
c0024c97:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c9b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ca5:	53                   	push   ebx
c0024ca6:	8d 46 02             	lea    eax,[esi+0x2]
c0024ca9:	53                   	push   ebx
c0024caa:	c1 e0 07             	shl    eax,0x7
c0024cad:	bb 01 00 00 00       	mov    ebx,0x1
c0024cb2:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cb6:	50                   	push   eax
c0024cb7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cbd:	e8 aa ef ff ff       	call   c0023c6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024cc6:	83 c4 10             	add    esp,0x10
c0024cc9:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024cce:	0f 84 ce 01 00 00    	je     c0024ea2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024cd4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cd8:	c1 e0 09             	shl    eax,0x9
c0024cdb:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ce0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024ce4:	74 17                	je     c0024cfd <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024ce6:	51                   	push   ecx
c0024ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ceb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024cef:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024cf5:	e8 4a ba fd ff       	call   c0000744 <memcpy>
c0024cfa:	83 c4 10             	add    esp,0x10
c0024cfd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d03:	8d 46 02             	lea    eax,[esi+0x2]
c0024d06:	c1 e0 07             	shl    eax,0x7
c0024d09:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d0f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d15:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d1b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d1f:	c1 e1 05             	shl    ecx,0x5
c0024d22:	01 c8                	add    eax,ecx
c0024d24:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d28:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d2a:	83 e1 01             	and    ecx,0x1
c0024d2d:	83 e3 bf             	and    ebx,0xffffffbf
c0024d30:	c1 e1 06             	shl    ecx,0x6
c0024d33:	09 d9                	or     ecx,ebx
c0024d35:	88 08                	mov    BYTE PTR [eax],cl
c0024d37:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d39:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d3f:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d45:	89 08                	mov    DWORD PTR [eax],ecx
c0024d47:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d4d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d53:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d59:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d5c:	52                   	push   edx
c0024d5d:	68 90 00 00 00       	push   0x90
c0024d62:	6a 00                	push   0x0
c0024d64:	53                   	push   ebx
c0024d65:	e8 0e ba fd ff       	call   c0000778 <memset>
c0024d6a:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024d70:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024d74:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d7a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d82:	83 c4 10             	add    esp,0x10
c0024d85:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024d88:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d8e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024d94:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d99:	09 c8                	or     eax,ecx
c0024d9b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024da1:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024da4:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024dab:	66 25 00 7f          	and    ax,0x7f00
c0024daf:	66 0d 27 80          	or     ax,0x8027
c0024db3:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024db8:	66 89 03             	mov    WORD PTR [ebx],ax
c0024dbb:	19 c0                	sbb    eax,eax
c0024dbd:	83 e0 f0             	and    eax,0xfffffff0
c0024dc0:	83 c0 35             	add    eax,0x35
c0024dc3:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024dc6:	89 f8                	mov    eax,edi
c0024dc8:	c1 e8 10             	shr    eax,0x10
c0024dcb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024dce:	89 f8                	mov    eax,edi
c0024dd0:	c1 e8 18             	shr    eax,0x18
c0024dd3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024dd6:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024dda:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024de1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024de4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024de8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024dec:	89 f3                	mov    ebx,esi
c0024dee:	31 c0                	xor    eax,eax
c0024df0:	c1 e3 07             	shl    ebx,0x7
c0024df3:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024df7:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024dfd:	80 e1 88             	and    cl,0x88
c0024e00:	74 0a                	je     c0024e0c <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e02:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e07:	74 0a                	je     c0024e13 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e09:	40                   	inc    eax
c0024e0a:	eb eb                	jmp    c0024df7 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e0c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e11:	75 0a                	jne    c0024e1d <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e13:	83 ec 0c             	sub    esp,0xc
c0024e16:	68 85 ce 02 c0       	push   0xc002ce85
c0024e1b:	eb 56                	jmp    c0024e73 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e1d:	b8 01 00 00 00       	mov    eax,0x1
c0024e22:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e26:	c1 e6 07             	shl    esi,0x7
c0024e29:	d3 e0                	shl    eax,cl
c0024e2b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e2f:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e35:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e3b:	85 c8                	test   eax,ecx
c0024e3d:	74 20                	je     c0024e5f <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e3f:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e45:	0f ba e1 1e          	bt     ecx,0x1e
c0024e49:	73 ea                	jae    c0024e35 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e4b:	83 ec 0c             	sub    esp,0xc
c0024e4e:	31 db                	xor    ebx,ebx
c0024e50:	68 93 ce 02 c0       	push   0xc002ce93
c0024e55:	e8 1b 57 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0024e5a:	83 c4 10             	add    esp,0x10
c0024e5d:	eb 43                	jmp    c0024ea2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e5f:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e65:	0f ba e0 1e          	bt     eax,0x1e
c0024e69:	73 17                	jae    c0024e82 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e6b:	83 ec 0c             	sub    esp,0xc
c0024e6e:	68 93 ce 02 c0       	push   0xc002ce93
c0024e73:	e8 fd 56 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0024e78:	bb 01 00 00 00       	mov    ebx,0x1
c0024e7d:	83 c4 10             	add    esp,0x10
c0024e80:	eb 20                	jmp    c0024ea2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e82:	31 db                	xor    ebx,ebx
c0024e84:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e89:	75 17                	jne    c0024ea2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e8b:	50                   	push   eax
c0024e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e90:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e96:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024e9a:	e8 a5 b8 fd ff       	call   c0000744 <memcpy>
c0024e9f:	83 c4 10             	add    esp,0x10
c0024ea2:	83 c4 2c             	add    esp,0x2c
c0024ea5:	89 d8                	mov    eax,ebx
c0024ea7:	5b                   	pop    ebx
c0024ea8:	5e                   	pop    esi
c0024ea9:	5f                   	pop    edi
c0024eaa:	5d                   	pop    ebp
c0024eab:	c3                   	ret    

c0024eac <SATA::read(unsigned long long, int, void*)>:
c0024eac:	57                   	push   edi
c0024ead:	b8 04 00 00 00       	mov    eax,0x4
c0024eb2:	56                   	push   esi
c0024eb3:	53                   	push   ebx
c0024eb4:	83 ec 10             	sub    esp,0x10
c0024eb7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ebb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ebf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ec2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ec6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024eca:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ed0:	77 3b                	ja     c0024f0d <SATA::read(unsigned long long, int, void*)+0x61>
c0024ed2:	b8 06 00 00 00       	mov    eax,0x6
c0024ed7:	85 d2                	test   edx,edx
c0024ed9:	74 32                	je     c0024f0d <SATA::read(unsigned long long, int, void*)+0x61>
c0024edb:	50                   	push   eax
c0024edc:	50                   	push   eax
c0024edd:	6a 00                	push   0x0
c0024edf:	52                   	push   edx
c0024ee0:	53                   	push   ebx
c0024ee1:	57                   	push   edi
c0024ee2:	56                   	push   esi
c0024ee3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ee7:	e8 5a fd ff ff       	call   c0024c46 <SATA::access(unsigned long long, int, void*, bool)>
c0024eec:	83 c4 20             	add    esp,0x20
c0024eef:	85 c0                	test   eax,eax
c0024ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ef5:	75 11                	jne    c0024f08 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024ef7:	01 1d 48 27 03 c0    	add    DWORD PTR ds:0xc0032748,ebx
c0024efd:	e8 f2 ba fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f06:	eb 05                	jmp    c0024f0d <SATA::read(unsigned long long, int, void*)+0x61>
c0024f08:	b8 01 00 00 00       	mov    eax,0x1
c0024f0d:	83 c4 10             	add    esp,0x10
c0024f10:	5b                   	pop    ebx
c0024f11:	5e                   	pop    esi
c0024f12:	5f                   	pop    edi
c0024f13:	c3                   	ret    

c0024f14 <SATA::write(unsigned long long, int, void*)>:
c0024f14:	55                   	push   ebp
c0024f15:	b8 04 00 00 00       	mov    eax,0x4
c0024f1a:	57                   	push   edi
c0024f1b:	56                   	push   esi
c0024f1c:	53                   	push   ebx
c0024f1d:	83 ec 1c             	sub    esp,0x1c
c0024f20:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f24:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f28:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f2f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f33:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f39:	77 56                	ja     c0024f91 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f3b:	b8 06 00 00 00       	mov    eax,0x6
c0024f40:	85 ff                	test   edi,edi
c0024f42:	74 4d                	je     c0024f91 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f44:	89 ee                	mov    esi,ebp
c0024f46:	c1 e6 09             	shl    esi,0x9
c0024f49:	01 fe                	add    esi,edi
c0024f4b:	89 c8                	mov    eax,ecx
c0024f4d:	89 da                	mov    edx,ebx
c0024f4f:	83 c0 01             	add    eax,0x1
c0024f52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f56:	83 d2 00             	adc    edx,0x0
c0024f59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f5d:	50                   	push   eax
c0024f5e:	50                   	push   eax
c0024f5f:	6a 01                	push   0x1
c0024f61:	57                   	push   edi
c0024f62:	81 c7 00 02 00 00    	add    edi,0x200
c0024f68:	6a 01                	push   0x1
c0024f6a:	53                   	push   ebx
c0024f6b:	51                   	push   ecx
c0024f6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f70:	e8 d1 fc ff ff       	call   c0024c46 <SATA::access(unsigned long long, int, void*, bool)>
c0024f75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024f79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f7d:	83 c4 20             	add    esp,0x20
c0024f80:	39 f7                	cmp    edi,esi
c0024f82:	75 c7                	jne    c0024f4b <SATA::write(unsigned long long, int, void*)+0x37>
c0024f84:	01 2d 44 27 03 c0    	add    DWORD PTR ds:0xc0032744,ebp
c0024f8a:	e8 65 ba fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024f8f:	31 c0                	xor    eax,eax
c0024f91:	83 c4 1c             	add    esp,0x1c
c0024f94:	5b                   	pop    ebx
c0024f95:	5e                   	pop    esi
c0024f96:	5f                   	pop    edi
c0024f97:	5d                   	pop    ebp
c0024f98:	c3                   	ret    
c0024f99:	90                   	nop

c0024f9a <SATAPI::write(unsigned long long, int, void*)>:
c0024f9a:	b8 03 00 00 00       	mov    eax,0x3
c0024f9f:	c3                   	ret    

c0024fa0 <SATAPI::close(int, int, void*)>:
c0024fa0:	83 ec 0c             	sub    esp,0xc
c0024fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fad:	85 c0                	test   eax,eax
c0024faf:	74 0c                	je     c0024fbd <SATAPI::close(int, int, void*)+0x1d>
c0024fb1:	83 ec 0c             	sub    esp,0xc
c0024fb4:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fb6:	50                   	push   eax
c0024fb7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fba:	83 c4 10             	add    esp,0x10
c0024fbd:	31 c0                	xor    eax,eax
c0024fbf:	83 c4 0c             	add    esp,0xc
c0024fc2:	c3                   	ret    
c0024fc3:	90                   	nop

c0024fc4 <SATAPI::SATAPI()>:
c0024fc4:	83 ec 0c             	sub    esp,0xc
c0024fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fcb:	83 ec 04             	sub    esp,0x4
c0024fce:	68 00 08 00 00       	push   0x800
c0024fd3:	68 dc ce 02 c0       	push   0xc002cedc
c0024fd8:	50                   	push   eax
c0024fd9:	e8 40 f7 fe ff       	call   c001471e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fde:	83 c4 10             	add    esp,0x10
c0024fe1:	ba 88 cf 02 c0       	mov    edx,0xc002cf88
c0024fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fea:	89 10                	mov    DWORD PTR [eax],edx
c0024fec:	90                   	nop
c0024fed:	83 c4 0c             	add    esp,0xc
c0024ff0:	c3                   	ret    
c0024ff1:	90                   	nop

c0024ff2 <SATAPI::diskRemoved()>:
c0024ff2:	83 ec 18             	sub    esp,0x18
c0024ff5:	68 e8 ce 02 c0       	push   0xc002cee8
c0024ffa:	e8 d5 de fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0024fff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025003:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002500a:	83 c4 1c             	add    esp,0x1c
c002500d:	c3                   	ret    

c002500e <SATAPI::diskInserted()>:
c002500e:	53                   	push   ebx
c002500f:	83 ec 14             	sub    esp,0x14
c0025012:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025016:	68 ff ce 02 c0       	push   0xc002ceff
c002501b:	e8 b4 de fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0025020:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025027:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002502a:	e8 57 f7 fe ff       	call   c0014786 <PhysicalDisk::startCache()>
c002502f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025033:	83 c4 18             	add    esp,0x18
c0025036:	5b                   	pop    ebx
c0025037:	e9 c0 18 ff ff       	jmp    c00168fc <createPartitionsForDisk(PhysicalDisk*)>

c002503c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002503c:	55                   	push   ebp
c002503d:	57                   	push   edi
c002503e:	56                   	push   esi
c002503f:	53                   	push   ebx
c0025040:	83 ec 24             	sub    esp,0x24
c0025043:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025047:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002504b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025051:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025055:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025059:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002505f:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025062:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025068:	c1 e3 07             	shl    ebx,0x7
c002506b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002506f:	89 f8                	mov    eax,edi
c0025071:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025075:	c1 e0 07             	shl    eax,0x7
c0025078:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002507c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025080:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002508a:	53                   	push   ebx
c002508b:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025091:	e8 d6 eb ff ff       	call   c0023c6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025096:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002509a:	83 c4 10             	add    esp,0x10
c002509d:	b8 01 00 00 00       	mov    eax,0x1
c00250a2:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250a7:	0f 84 8a 01 00 00    	je     c0025237 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250ad:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250b5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250bb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00250c5:	c1 e1 05             	shl    ecx,0x5
c00250c8:	01 c8                	add    eax,ecx
c00250ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250cc:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00250d2:	81 c9 25 00 01 00    	or     ecx,0x10025
c00250d8:	89 08                	mov    DWORD PTR [eax],ecx
c00250da:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250e0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00250e6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00250ec:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00250ef:	52                   	push   edx
c00250f0:	68 90 00 00 00       	push   0x90
c00250f5:	6a 00                	push   0x0
c00250f7:	53                   	push   ebx
c00250f8:	e8 7b b6 fd ff       	call   c0000778 <memset>
c00250fd:	83 c4 0c             	add    esp,0xc
c0025100:	8d 43 40             	lea    eax,[ebx+0x40]
c0025103:	6a 0c                	push   0xc
c0025105:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025109:	50                   	push   eax
c002510a:	e8 35 b6 fd ff       	call   c0000744 <memcpy>
c002510f:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025115:	89 ea                	mov    edx,ebp
c0025117:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002511d:	c1 ea 18             	shr    edx,0x18
c0025120:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025124:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025127:	8d 48 ff             	lea    ecx,[eax-0x1]
c002512a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002512e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025134:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002513a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002513f:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025143:	09 c8                	or     eax,ecx
c0025145:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025149:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002514f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025152:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025159:	66 25 00 7f          	and    ax,0x7f00
c002515d:	66 0d 27 80          	or     ax,0x8027
c0025161:	66 89 03             	mov    WORD PTR [ebx],ax
c0025164:	89 e8                	mov    eax,ebp
c0025166:	c1 e8 10             	shr    eax,0x10
c0025169:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002516c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025170:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025177:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002517a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002517e:	83 c4 10             	add    esp,0x10
c0025181:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025185:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025189:	31 c0                	xor    eax,eax
c002518b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025191:	80 e1 88             	and    cl,0x88
c0025194:	74 0a                	je     c00251a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025196:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002519b:	74 0a                	je     c00251a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002519d:	40                   	inc    eax
c002519e:	eb eb                	jmp    c002518b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251a5:	75 0f                	jne    c00251b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251a7:	83 ec 0c             	sub    esp,0xc
c00251aa:	68 85 ce 02 c0       	push   0xc002ce85
c00251af:	e8 c1 53 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c00251b4:	eb 3a                	jmp    c00251f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251b6:	b8 01 00 00 00       	mov    eax,0x1
c00251bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251bf:	c1 e7 07             	shl    edi,0x7
c00251c2:	d3 e0                	shl    eax,cl
c00251c4:	03 3c 24             	add    edi,DWORD PTR [esp]
c00251c7:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00251cd:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00251d3:	85 d0                	test   eax,edx
c00251d5:	74 23                	je     c00251fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00251d7:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00251dd:	0f ba e2 1e          	bt     edx,0x1e
c00251e1:	73 ea                	jae    c00251cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00251e3:	83 ec 0c             	sub    esp,0xc
c00251e6:	68 17 cf 02 c0       	push   0xc002cf17
c00251eb:	e8 e4 dc fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00251f0:	83 c4 10             	add    esp,0x10
c00251f3:	b8 01 00 00 00       	mov    eax,0x1
c00251f8:	eb 3d                	jmp    c0025237 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251fa:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025200:	0f ba e0 1e          	bt     eax,0x1e
c0025204:	73 0a                	jae    c0025210 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025206:	83 ec 0c             	sub    esp,0xc
c0025209:	68 2a cf 02 c0       	push   0xc002cf2a
c002520e:	eb db                	jmp    c00251eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025210:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025215:	74 1e                	je     c0025235 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025217:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002521c:	74 17                	je     c0025235 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002521e:	50                   	push   eax
c002521f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025223:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025229:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002522d:	e8 12 b5 fd ff       	call   c0000744 <memcpy>
c0025232:	83 c4 10             	add    esp,0x10
c0025235:	31 c0                	xor    eax,eax
c0025237:	83 c4 1c             	add    esp,0x1c
c002523a:	5b                   	pop    ebx
c002523b:	5e                   	pop    esi
c002523c:	5f                   	pop    edi
c002523d:	5d                   	pop    ebp
c002523e:	c3                   	ret    
c002523f:	90                   	nop

c0025240 <SATAPI::eject()>:
c0025240:	57                   	push   edi
c0025241:	b9 03 00 00 00       	mov    ecx,0x3
c0025246:	53                   	push   ebx
c0025247:	83 ec 14             	sub    esp,0x14
c002524a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002524e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025252:	fc                   	cld    
c0025253:	31 c0                	xor    eax,eax
c0025255:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025257:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002525c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025261:	50                   	push   eax
c0025262:	6a 00                	push   0x0
c0025264:	6a 00                	push   0x0
c0025266:	6a 00                	push   0x0
c0025268:	6a 00                	push   0x0
c002526a:	6a 02                	push   0x2
c002526c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025270:	50                   	push   eax
c0025271:	53                   	push   ebx
c0025272:	e8 c5 fd ff ff       	call   c002503c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025277:	83 c4 14             	add    esp,0x14
c002527a:	53                   	push   ebx
c002527b:	e8 72 fd ff ff       	call   c0024ff2 <SATAPI::diskRemoved()>
c0025280:	83 c4 24             	add    esp,0x24
c0025283:	31 c0                	xor    eax,eax
c0025285:	5b                   	pop    ebx
c0025286:	5f                   	pop    edi
c0025287:	c3                   	ret    

c0025288 <SATAPI::detectMedia()>:
c0025288:	56                   	push   esi
c0025289:	53                   	push   ebx
c002528a:	83 ec 28             	sub    esp,0x28
c002528d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025291:	6a 0c                	push   0xc
c0025293:	6a 00                	push   0x0
c0025295:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025299:	56                   	push   esi
c002529a:	e8 d9 b4 fd ff       	call   c0000778 <memset>
c002529f:	83 c4 0c             	add    esp,0xc
c00252a2:	6a 00                	push   0x0
c00252a4:	6a 00                	push   0x0
c00252a6:	6a 00                	push   0x0
c00252a8:	6a 00                	push   0x0
c00252aa:	6a 00                	push   0x0
c00252ac:	56                   	push   esi
c00252ad:	53                   	push   ebx
c00252ae:	e8 89 fd ff ff       	call   c002503c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252b3:	83 c4 1c             	add    esp,0x1c
c00252b6:	6a 0c                	push   0xc
c00252b8:	6a 00                	push   0x0
c00252ba:	56                   	push   esi
c00252bb:	e8 b8 b4 fd ff       	call   c0000778 <memset>
c00252c0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00252c5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252ca:	83 c4 0c             	add    esp,0xc
c00252cd:	6a 01                	push   0x1
c00252cf:	8d 44 24 16          	lea    eax,[esp+0x16]
c00252d3:	50                   	push   eax
c00252d4:	6a 00                	push   0x0
c00252d6:	6a 00                	push   0x0
c00252d8:	6a 12                	push   0x12
c00252da:	56                   	push   esi
c00252db:	53                   	push   ebx
c00252dc:	e8 5b fd ff ff       	call   c002503c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252e1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252e5:	83 c4 20             	add    esp,0x20
c00252e8:	83 e0 7f             	and    eax,0x7f
c00252eb:	3c 70                	cmp    al,0x70
c00252ed:	74 15                	je     c0025304 <SATAPI::detectMedia()+0x7c>
c00252ef:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252f6:	75 0c                	jne    c0025304 <SATAPI::detectMedia()+0x7c>
c00252f8:	83 ec 0c             	sub    esp,0xc
c00252fb:	53                   	push   ebx
c00252fc:	e8 0d fd ff ff       	call   c002500e <SATAPI::diskInserted()>
c0025301:	83 c4 10             	add    esp,0x10
c0025304:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025308:	83 e0 0f             	and    eax,0xf
c002530b:	3c 02                	cmp    al,0x2
c002530d:	75 1b                	jne    c002532a <SATAPI::detectMedia()+0xa2>
c002530f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025314:	75 2d                	jne    c0025343 <SATAPI::detectMedia()+0xbb>
c0025316:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002531d:	74 24                	je     c0025343 <SATAPI::detectMedia()+0xbb>
c002531f:	83 ec 0c             	sub    esp,0xc
c0025322:	53                   	push   ebx
c0025323:	e8 ca fc ff ff       	call   c0024ff2 <SATAPI::diskRemoved()>
c0025328:	eb 16                	jmp    c0025340 <SATAPI::detectMedia()+0xb8>
c002532a:	84 c0                	test   al,al
c002532c:	75 15                	jne    c0025343 <SATAPI::detectMedia()+0xbb>
c002532e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025335:	75 0c                	jne    c0025343 <SATAPI::detectMedia()+0xbb>
c0025337:	83 ec 0c             	sub    esp,0xc
c002533a:	53                   	push   ebx
c002533b:	e8 ce fc ff ff       	call   c002500e <SATAPI::diskInserted()>
c0025340:	83 c4 10             	add    esp,0x10
c0025343:	83 c4 24             	add    esp,0x24
c0025346:	5b                   	pop    ebx
c0025347:	5e                   	pop    esi
c0025348:	c3                   	ret    
c0025349:	90                   	nop

c002534a <SATAPI::open(int, int, void*)>:
c002534a:	56                   	push   esi
c002534b:	53                   	push   ebx
c002534c:	50                   	push   eax
c002534d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025355:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002535f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025365:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002536f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025373:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002537d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025383:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002538a:	e8 53 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c002538f:	89 c6                	mov    esi,eax
c0025391:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025397:	81 c6 00 10 00 00    	add    esi,0x1000
c002539d:	e8 40 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253a2:	39 c6                	cmp    esi,eax
c00253a4:	74 10                	je     c00253b6 <SATAPI::open(int, int, void*)+0x6c>
c00253a6:	83 ec 0c             	sub    esp,0xc
c00253a9:	68 3f cf 02 c0       	push   0xc002cf3f
c00253ae:	e8 c2 51 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c00253b3:	83 c4 10             	add    esp,0x10
c00253b6:	83 ec 0c             	sub    esp,0xc
c00253b9:	6a 02                	push   0x2
c00253bb:	e8 df c7 fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00253c0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253c6:	e8 6f ca fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c00253cb:	6a 03                	push   0x3
c00253cd:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00253d3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253d9:	50                   	push   eax
c00253da:	e8 97 cf fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253df:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00253e6:	83 c4 14             	add    esp,0x14
c00253e9:	53                   	push   ebx
c00253ea:	e8 99 fe ff ff       	call   c0025288 <SATAPI::detectMedia()>
c00253ef:	83 c4 14             	add    esp,0x14
c00253f2:	31 c0                	xor    eax,eax
c00253f4:	5b                   	pop    ebx
c00253f5:	5e                   	pop    esi
c00253f6:	c3                   	ret    
c00253f7:	90                   	nop

c00253f8 <SATAPI::read(unsigned long long, int, void*)>:
c00253f8:	55                   	push   ebp
c00253f9:	57                   	push   edi
c00253fa:	56                   	push   esi
c00253fb:	53                   	push   ebx
c00253fc:	83 ec 1c             	sub    esp,0x1c
c00253ff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025403:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025407:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002540b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025412:	74 19                	je     c002542d <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025414:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025419:	7e 2e                	jle    c0025449 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002541b:	83 ec 0c             	sub    esp,0xc
c002541e:	68 55 cf 02 c0       	push   0xc002cf55
c0025423:	e8 4d 51 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0025428:	83 c4 10             	add    esp,0x10
c002542b:	eb 1c                	jmp    c0025449 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002542d:	83 ec 0c             	sub    esp,0xc
c0025430:	55                   	push   ebp
c0025431:	e8 52 fe ff ff       	call   c0025288 <SATAPI::detectMedia()>
c0025436:	83 c4 10             	add    esp,0x10
c0025439:	b8 02 00 00 00       	mov    eax,0x2
c002543e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025445:	75 cd                	jne    c0025414 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025447:	eb 49                	jmp    c0025492 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025449:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002544d:	b9 03 00 00 00       	mov    ecx,0x3
c0025452:	fc                   	cld    
c0025453:	31 c0                	xor    eax,eax
c0025455:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025457:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002545c:	89 d8                	mov    eax,ebx
c002545e:	86 e0                	xchg   al,ah
c0025460:	c1 c0 10             	rol    eax,0x10
c0025463:	86 e0                	xchg   al,ah
c0025465:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025469:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002546d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025471:	50                   	push   eax
c0025472:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025476:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002547a:	56                   	push   esi
c002547b:	53                   	push   ebx
c002547c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025480:	c1 e0 0b             	shl    eax,0xb
c0025483:	50                   	push   eax
c0025484:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025488:	50                   	push   eax
c0025489:	55                   	push   ebp
c002548a:	e8 ad fb ff ff       	call   c002503c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002548f:	83 c4 20             	add    esp,0x20
c0025492:	83 c4 1c             	add    esp,0x1c
c0025495:	5b                   	pop    ebx
c0025496:	5e                   	pop    esi
c0025497:	5f                   	pop    edi
c0025498:	5d                   	pop    ebp
c0025499:	c3                   	ret    

c002549a <AVX::open(int, int, void*)>:
c002549a:	83 ec 0c             	sub    esp,0xc
c002549d:	e8 46 11 00 00       	call   c00265e8 <avxInit>
c00254a2:	b8 00 00 00 00       	mov    eax,0x0
c00254a7:	83 c4 0c             	add    esp,0xc
c00254aa:	c3                   	ret    
c00254ab:	90                   	nop

c00254ac <AVX::close(int, int, void*)>:
c00254ac:	83 ec 0c             	sub    esp,0xc
c00254af:	e8 35 11 00 00       	call   c00265e9 <avxClose>
c00254b4:	b8 00 00 00 00       	mov    eax,0x0
c00254b9:	83 c4 0c             	add    esp,0xc
c00254bc:	c3                   	ret    
c00254bd:	90                   	nop

c00254be <AVX::available()>:
c00254be:	83 ec 0c             	sub    esp,0xc
c00254c1:	e8 1a 11 00 00       	call   c00265e0 <avxDetect>
c00254c6:	85 c0                	test   eax,eax
c00254c8:	0f 95 c0             	setne  al
c00254cb:	83 c4 0c             	add    esp,0xc
c00254ce:	c3                   	ret    
c00254cf:	90                   	nop

c00254d0 <AVX::save(void*)>:
c00254d0:	83 ec 0c             	sub    esp,0xc
c00254d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254d7:	83 ec 0c             	sub    esp,0xc
c00254da:	50                   	push   eax
c00254db:	e8 06 11 00 00       	call   c00265e6 <avxSave>
c00254e0:	83 c4 10             	add    esp,0x10
c00254e3:	90                   	nop
c00254e4:	83 c4 0c             	add    esp,0xc
c00254e7:	c3                   	ret    

c00254e8 <AVX::load(void*)>:
c00254e8:	83 ec 0c             	sub    esp,0xc
c00254eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254ef:	83 ec 0c             	sub    esp,0xc
c00254f2:	50                   	push   eax
c00254f3:	e8 ef 10 00 00       	call   c00265e7 <avxLoad>
c00254f8:	83 c4 10             	add    esp,0x10
c00254fb:	90                   	nop
c00254fc:	83 c4 0c             	add    esp,0xc
c00254ff:	c3                   	ret    

c0025500 <AVX::AVX()>:
c0025500:	83 ec 0c             	sub    esp,0xc
c0025503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025507:	83 ec 08             	sub    esp,0x8
c002550a:	68 b8 cf 02 c0       	push   0xc002cfb8
c002550f:	50                   	push   eax
c0025510:	e8 e7 f2 fe ff       	call   c00147fc <FPU::FPU(char const*)>
c0025515:	83 c4 10             	add    esp,0x10
c0025518:	ba c8 cf 02 c0       	mov    edx,0xc002cfc8
c002551d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025521:	89 10                	mov    DWORD PTR [eax],edx
c0025523:	90                   	nop
c0025524:	83 c4 0c             	add    esp,0xc
c0025527:	c3                   	ret    

c0025528 <MMX::available()>:
c0025528:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c002552d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025533:	83 e0 20             	and    eax,0x20
c0025536:	84 c0                	test   al,al
c0025538:	0f 95 c0             	setne  al
c002553b:	c3                   	ret    

c002553c <MMX::open(int, int, void*)>:
c002553c:	83 ec 0c             	sub    esp,0xc
c002553f:	e8 28 11 00 00       	call   c002666c <x87Init>
c0025544:	b8 00 00 00 00       	mov    eax,0x0
c0025549:	83 c4 0c             	add    esp,0xc
c002554c:	c3                   	ret    
c002554d:	90                   	nop

c002554e <MMX::close(int, int, void*)>:
c002554e:	83 ec 0c             	sub    esp,0xc
c0025551:	e8 30 11 00 00       	call   c0026686 <x87Close>
c0025556:	b8 00 00 00 00       	mov    eax,0x0
c002555b:	83 c4 0c             	add    esp,0xc
c002555e:	c3                   	ret    
c002555f:	90                   	nop

c0025560 <MMX::save(void*)>:
c0025560:	83 ec 0c             	sub    esp,0xc
c0025563:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025567:	83 ec 0c             	sub    esp,0xc
c002556a:	50                   	push   eax
c002556b:	e8 f1 10 00 00       	call   c0026661 <x87Save>
c0025570:	83 c4 10             	add    esp,0x10
c0025573:	90                   	nop
c0025574:	83 c4 0c             	add    esp,0xc
c0025577:	c3                   	ret    

c0025578 <MMX::load(void*)>:
c0025578:	83 ec 0c             	sub    esp,0xc
c002557b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002557f:	83 ec 0c             	sub    esp,0xc
c0025582:	50                   	push   eax
c0025583:	e8 df 10 00 00       	call   c0026667 <x87Load>
c0025588:	83 c4 10             	add    esp,0x10
c002558b:	90                   	nop
c002558c:	83 c4 0c             	add    esp,0xc
c002558f:	c3                   	ret    

c0025590 <MMX::MMX()>:
c0025590:	83 ec 0c             	sub    esp,0xc
c0025593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025597:	83 ec 08             	sub    esp,0x8
c002559a:	68 f8 cf 02 c0       	push   0xc002cff8
c002559f:	50                   	push   eax
c00255a0:	e8 57 f2 fe ff       	call   c00147fc <FPU::FPU(char const*)>
c00255a5:	83 c4 10             	add    esp,0x10
c00255a8:	ba 08 d0 02 c0       	mov    edx,0xc002d008
c00255ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b1:	89 10                	mov    DWORD PTR [eax],edx
c00255b3:	90                   	nop
c00255b4:	83 c4 0c             	add    esp,0xc
c00255b7:	c3                   	ret    

c00255b8 <SSE::open(int, int, void*)>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	e8 64 10 00 00       	call   c0026624 <sseInit>
c00255c0:	b8 00 00 00 00       	mov    eax,0x0
c00255c5:	83 c4 0c             	add    esp,0xc
c00255c8:	c3                   	ret    
c00255c9:	90                   	nop

c00255ca <SSE::close(int, int, void*)>:
c00255ca:	83 ec 0c             	sub    esp,0xc
c00255cd:	e8 62 10 00 00       	call   c0026634 <sseClose>
c00255d2:	b8 00 00 00 00       	mov    eax,0x0
c00255d7:	83 c4 0c             	add    esp,0xc
c00255da:	c3                   	ret    
c00255db:	90                   	nop

c00255dc <SSE::available()>:
c00255dc:	83 ec 1c             	sub    esp,0x1c
c00255df:	e8 1c 10 00 00       	call   c0026600 <absolutelyNoChanceInHell>
c00255e4:	85 c0                	test   eax,eax
c00255e6:	0f 95 c0             	setne  al
c00255e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00255ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00255f1:	83 c4 1c             	add    esp,0x1c
c00255f4:	c3                   	ret    
c00255f5:	90                   	nop

c00255f6 <SSE::save(void*)>:
c00255f6:	83 ec 0c             	sub    esp,0xc
c00255f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255fd:	83 ec 0c             	sub    esp,0xc
c0025600:	50                   	push   eax
c0025601:	e8 12 10 00 00       	call   c0026618 <sseSave>
c0025606:	83 c4 10             	add    esp,0x10
c0025609:	90                   	nop
c002560a:	83 c4 0c             	add    esp,0xc
c002560d:	c3                   	ret    

c002560e <SSE::load(void*)>:
c002560e:	83 ec 0c             	sub    esp,0xc
c0025611:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025615:	83 ec 0c             	sub    esp,0xc
c0025618:	50                   	push   eax
c0025619:	e8 00 10 00 00       	call   c002661e <sseLoad>
c002561e:	83 c4 10             	add    esp,0x10
c0025621:	90                   	nop
c0025622:	83 c4 0c             	add    esp,0xc
c0025625:	c3                   	ret    

c0025626 <SSE::SSE()>:
c0025626:	83 ec 0c             	sub    esp,0xc
c0025629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002562d:	83 ec 08             	sub    esp,0x8
c0025630:	68 38 d0 02 c0       	push   0xc002d038
c0025635:	50                   	push   eax
c0025636:	e8 c1 f1 fe ff       	call   c00147fc <FPU::FPU(char const*)>
c002563b:	83 c4 10             	add    esp,0x10
c002563e:	ba 48 d0 02 c0       	mov    edx,0xc002d048
c0025643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025647:	89 10                	mov    DWORD PTR [eax],edx
c0025649:	90                   	nop
c002564a:	83 c4 0c             	add    esp,0xc
c002564d:	c3                   	ret    

c002564e <x87::open(int, int, void*)>:
c002564e:	83 ec 0c             	sub    esp,0xc
c0025651:	e8 16 10 00 00       	call   c002666c <x87Init>
c0025656:	b8 00 00 00 00       	mov    eax,0x0
c002565b:	83 c4 0c             	add    esp,0xc
c002565e:	c3                   	ret    
c002565f:	90                   	nop

c0025660 <x87::close(int, int, void*)>:
c0025660:	83 ec 0c             	sub    esp,0xc
c0025663:	e8 1e 10 00 00       	call   c0026686 <x87Close>
c0025668:	b8 00 00 00 00       	mov    eax,0x0
c002566d:	83 c4 0c             	add    esp,0xc
c0025670:	c3                   	ret    
c0025671:	90                   	nop

c0025672 <x87::available()>:
c0025672:	83 ec 0c             	sub    esp,0xc
c0025675:	e8 cc 0f 00 00       	call   c0026646 <x87Detect>
c002567a:	85 c0                	test   eax,eax
c002567c:	0f 95 c0             	setne  al
c002567f:	83 c4 0c             	add    esp,0xc
c0025682:	c3                   	ret    
c0025683:	90                   	nop

c0025684 <x87::save(void*)>:
c0025684:	83 ec 0c             	sub    esp,0xc
c0025687:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002568b:	83 ec 0c             	sub    esp,0xc
c002568e:	50                   	push   eax
c002568f:	e8 cd 0f 00 00       	call   c0026661 <x87Save>
c0025694:	83 c4 10             	add    esp,0x10
c0025697:	90                   	nop
c0025698:	83 c4 0c             	add    esp,0xc
c002569b:	c3                   	ret    

c002569c <x87::load(void*)>:
c002569c:	83 ec 0c             	sub    esp,0xc
c002569f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256a3:	83 ec 0c             	sub    esp,0xc
c00256a6:	50                   	push   eax
c00256a7:	e8 bb 0f 00 00       	call   c0026667 <x87Load>
c00256ac:	83 c4 10             	add    esp,0x10
c00256af:	90                   	nop
c00256b0:	83 c4 0c             	add    esp,0xc
c00256b3:	c3                   	ret    

c00256b4 <x87::x87()>:
c00256b4:	83 ec 0c             	sub    esp,0xc
c00256b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256bb:	83 ec 08             	sub    esp,0x8
c00256be:	68 78 d0 02 c0       	push   0xc002d078
c00256c3:	50                   	push   eax
c00256c4:	e8 33 f1 fe ff       	call   c00147fc <FPU::FPU(char const*)>
c00256c9:	83 c4 10             	add    esp,0x10
c00256cc:	ba 88 d0 02 c0       	mov    edx,0xc002d088
c00256d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d5:	89 10                	mov    DWORD PTR [eax],edx
c00256d7:	90                   	nop
c00256d8:	83 c4 0c             	add    esp,0xc
c00256db:	c3                   	ret    

c00256dc <APIC::disable()>:
c00256dc:	90                   	nop
c00256dd:	c3                   	ret    

c00256de <APIC::close(int, int, void*)>:
c00256de:	55                   	push   ebp
c00256df:	89 e5                	mov    ebp,esp
c00256e1:	83 ec 08             	sub    esp,0x8
c00256e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e9:	83 c0 3c             	add    eax,0x3c
c00256ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00256ee:	83 ec 0c             	sub    esp,0xc
c00256f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256f4:	ff d0                	call   eax
c00256f6:	83 c4 10             	add    esp,0x10
c00256f9:	b8 00 00 00 00       	mov    eax,0x0
c00256fe:	c9                   	leave  
c00256ff:	c3                   	ret    

c0025700 <IOAPIC::close(int, int, void*)>:
c0025700:	b8 00 00 00 00       	mov    eax,0x0
c0025705:	c3                   	ret    

c0025706 <APIC::io_wait()>:
c0025706:	eb 00                	jmp    c0025708 <APIC::io_wait()+0x2>
c0025708:	eb 00                	jmp    c002570a <APIC::io_wait()+0x4>
c002570a:	90                   	nop
c002570b:	c3                   	ret    

c002570c <APIC::getBase()>:
c002570c:	55                   	push   ebp
c002570d:	89 e5                	mov    ebp,esp
c002570f:	83 ec 18             	sub    esp,0x18
c0025712:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0025717:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002571d:	83 e0 08             	and    eax,0x8
c0025720:	84 c0                	test   al,al
c0025722:	75 07                	jne    c002572b <APIC::getBase()+0x1f>
c0025724:	b8 00 00 00 00       	mov    eax,0x0
c0025729:	eb 21                	jmp    c002574c <APIC::getBase()+0x40>
c002572b:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0025730:	83 ec 08             	sub    esp,0x8
c0025733:	6a 1b                	push   0x1b
c0025735:	50                   	push   eax
c0025736:	e8 ad 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002573b:	83 c4 10             	add    esp,0x10
c002573e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025741:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025744:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025747:	25 00 f0 ff ff       	and    eax,0xfffff000
c002574c:	c9                   	leave  
c002574d:	c3                   	ret    

c002574e <APIC::eoi(unsigned char)>:
c002574e:	55                   	push   ebp
c002574f:	89 e5                	mov    ebp,esp
c0025751:	83 ec 28             	sub    esp,0x28
c0025754:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025757:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002575a:	83 ec 0c             	sub    esp,0xc
c002575d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025760:	e8 a7 ff ff ff       	call   c002570c <APIC::getBase()>
c0025765:	83 c4 10             	add    esp,0x10
c0025768:	05 b0 00 00 00       	add    eax,0xb0
c002576d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025770:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025773:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025779:	90                   	nop
c002577a:	c9                   	leave  
c002577b:	c3                   	ret    

c002577c <APIC::open(int, int, void*)>:
c002577c:	55                   	push   ebp
c002577d:	89 e5                	mov    ebp,esp
c002577f:	57                   	push   edi
c0025780:	56                   	push   esi
c0025781:	53                   	push   ebx
c0025782:	83 ec 2c             	sub    esp,0x2c
c0025785:	83 ec 0c             	sub    esp,0xc
c0025788:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002578b:	e8 7c ff ff ff       	call   c002570c <APIC::getBase()>
c0025790:	83 c4 10             	add    esp,0x10
c0025793:	89 c2                	mov    edx,eax
c0025795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025798:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002579e:	0f b6 f8             	movzx  edi,al
c00257a1:	89 d0                	mov    eax,edx
c00257a3:	ba 00 00 00 00       	mov    edx,0x0
c00257a8:	89 c1                	mov    ecx,eax
c00257aa:	80 e5 ff             	and    ch,0xff
c00257ad:	89 cb                	mov    ebx,ecx
c00257af:	0f b6 f2             	movzx  esi,dl
c00257b2:	89 d8                	mov    eax,ebx
c00257b4:	89 f2                	mov    edx,esi
c00257b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257b9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257bc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257c0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257c4:	83 e0 00             	and    eax,0x0
c00257c7:	09 d0                	or     eax,edx
c00257c9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257d6:	8d 50 01             	lea    edx,[eax+0x1]
c00257d9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257dc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00257e2:	0f b6 d0             	movzx  edx,al
c00257e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e8:	83 c2 08             	add    edx,0x8
c00257eb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257ef:	0f b6 c9             	movzx  ecx,cl
c00257f2:	81 c9 00 00 01 00    	or     ecx,0x10000
c00257f8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257fc:	83 ec 0c             	sub    esp,0xc
c00257ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025802:	e8 05 ff ff ff       	call   c002570c <APIC::getBase()>
c0025807:	83 c4 10             	add    esp,0x10
c002580a:	05 f0 00 00 00       	add    eax,0xf0
c002580f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025812:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025815:	8b 00                	mov    eax,DWORD PTR [eax]
c0025817:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002581a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025821:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025828:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002582b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002582e:	89 10                	mov    DWORD PTR [eax],edx
c0025830:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025837:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c002583c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002583f:	7d 7c                	jge    c00258bd <APIC::open(int, int, void*)+0x141>
c0025841:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025844:	8b 04 85 e0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf320]
c002584b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002584e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025851:	8b 04 85 e0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf320]
c0025858:	c1 e8 08             	shr    eax,0x8
c002585b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002585f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025862:	8b 04 85 e0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf320]
c0025869:	c1 e8 18             	shr    eax,0x18
c002586c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002586f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025873:	75 40                	jne    c00258b5 <APIC::open(int, int, void*)+0x139>
c0025875:	83 ec 0c             	sub    esp,0xc
c0025878:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002587b:	e8 8c fe ff ff       	call   c002570c <APIC::getBase()>
c0025880:	83 c4 10             	add    esp,0x10
c0025883:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025887:	75 07                	jne    c0025890 <APIC::open(int, int, void*)+0x114>
c0025889:	ba 60 03 00 00       	mov    edx,0x360
c002588e:	eb 05                	jmp    c0025895 <APIC::open(int, int, void*)+0x119>
c0025890:	ba 50 03 00 00       	mov    edx,0x350
c0025895:	01 d0                	add    eax,edx
c0025897:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002589a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002589d:	8b 00                	mov    eax,DWORD PTR [eax]
c002589f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258a2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258a9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258ad:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258b0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258b3:	89 10                	mov    DWORD PTR [eax],edx
c00258b5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258b8:	e9 7a ff ff ff       	jmp    c0025837 <APIC::open(int, int, void*)+0xbb>
c00258bd:	b8 00 00 00 00       	mov    eax,0x0
c00258c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258c5:	5b                   	pop    ebx
c00258c6:	5e                   	pop    esi
c00258c7:	5f                   	pop    edi
c00258c8:	5d                   	pop    ebp
c00258c9:	c3                   	ret    

c00258ca <IOAPIC::IOAPIC()>:
c00258ca:	83 ec 0c             	sub    esp,0xc
c00258cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258d1:	83 ec 08             	sub    esp,0x8
c00258d4:	68 b8 d0 02 c0       	push   0xc002d0b8
c00258d9:	50                   	push   eax
c00258da:	e8 0b ec fe ff       	call   c00144ea <Device::Device(char const*)>
c00258df:	83 c4 10             	add    esp,0x10
c00258e2:	ba e0 d1 02 c0       	mov    edx,0xc002d1e0
c00258e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258eb:	89 10                	mov    DWORD PTR [eax],edx
c00258ed:	90                   	nop
c00258ee:	83 c4 0c             	add    esp,0xc
c00258f1:	c3                   	ret    

c00258f2 <APIC::APIC()>:
c00258f2:	53                   	push   ebx
c00258f3:	83 ec 18             	sub    esp,0x18
c00258f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258fa:	83 ec 08             	sub    esp,0x8
c00258fd:	68 c0 d0 02 c0       	push   0xc002d0c0
c0025902:	50                   	push   eax
c0025903:	e8 4e f3 fe ff       	call   c0014c56 <InterruptController::InterruptController(char const*)>
c0025908:	83 c4 10             	add    esp,0x10
c002590b:	ba 98 d1 02 c0       	mov    edx,0xc002d198
c0025910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025914:	89 10                	mov    DWORD PTR [eax],edx
c0025916:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c002591b:	83 f0 01             	xor    eax,0x1
c002591e:	84 c0                	test   al,al
c0025920:	0f 84 a1 00 00 00    	je     c00259c7 <APIC::APIC()+0xd5>
c0025926:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002592b:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c0025930:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025934:	0f 83 86 00 00 00    	jae    c00259c0 <APIC::APIC()+0xce>
c002593a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025942:	83 ec 0c             	sub    esp,0xc
c0025945:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025949:	e8 f2 9e fe ff       	call   c000f840 <malloc>
c002594e:	83 c4 10             	add    esp,0x10
c0025951:	89 c3                	mov    ebx,eax
c0025953:	83 ec 0c             	sub    esp,0xc
c0025956:	53                   	push   ebx
c0025957:	e8 6e ff ff ff       	call   c00258ca <IOAPIC::IOAPIC()>
c002595c:	83 c4 10             	add    esp,0x10
c002595f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025963:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025968:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002596c:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c0025973:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c0025978:	40                   	inc    eax
c0025979:	a3 60 27 03 c0       	mov    ds:0xc0032760,eax
c002597e:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0025983:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025989:	83 ec 08             	sub    esp,0x8
c002598c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025990:	50                   	push   eax
c0025991:	e8 64 e9 fe ff       	call   c00142fa <Device::addChild(Device*)>
c0025996:	83 c4 10             	add    esp,0x10
c0025999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002599d:	8b 00                	mov    eax,DWORD PTR [eax]
c002599f:	83 c0 08             	add    eax,0x8
c00259a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00259a4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259a9:	6a 00                	push   0x0
c00259ab:	6a 00                	push   0x0
c00259ad:	52                   	push   edx
c00259ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259b2:	ff d0                	call   eax
c00259b4:	83 c4 10             	add    esp,0x10
c00259b7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259bb:	e9 6b ff ff ff       	jmp    c002592b <APIC::APIC()+0x39>
c00259c0:	c6 05 a0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327a0,0x1
c00259c7:	90                   	nop
c00259c8:	83 c4 18             	add    esp,0x18
c00259cb:	5b                   	pop    ebx
c00259cc:	c3                   	ret    
c00259cd:	90                   	nop

c00259ce <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00259ce:	55                   	push   ebp
c00259cf:	89 e5                	mov    ebp,esp
c00259d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259da:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259dd:	72 1d                	jb     c00259fc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00259e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259eb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00259f1:	01 d0                	add    eax,edx
c00259f3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259f6:	73 04                	jae    c00259fc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259f8:	b0 01                	mov    al,0x1
c00259fa:	eb 02                	jmp    c00259fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00259fc:	b0 00                	mov    al,0x0
c00259fe:	5d                   	pop    ebp
c00259ff:	c3                   	ret    

c0025a00 <IOAPIC::read(int)>:
c0025a00:	55                   	push   ebp
c0025a01:	89 e5                	mov    ebp,esp
c0025a03:	83 ec 10             	sub    esp,0x10
c0025a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a09:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a0f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a15:	0f b6 d0             	movzx  edx,al
c0025a18:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a1b:	89 10                	mov    DWORD PTR [eax],edx
c0025a1d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a20:	83 c0 10             	add    eax,0x10
c0025a23:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a25:	c9                   	leave  
c0025a26:	c3                   	ret    
c0025a27:	90                   	nop

c0025a28 <IOAPIC::open(int, int, void*)>:
c0025a28:	55                   	push   ebp
c0025a29:	89 e5                	mov    ebp,esp
c0025a2b:	57                   	push   edi
c0025a2c:	56                   	push   esi
c0025a2d:	53                   	push   ebx
c0025a2e:	83 ec 0c             	sub    esp,0xc
c0025a31:	83 ec 0c             	sub    esp,0xc
c0025a34:	68 eb d0 02 c0       	push   0xc002d0eb
c0025a39:	e8 96 d4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0025a3e:	83 c4 10             	add    esp,0x10
c0025a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a44:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a47:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a56:	8b 14 85 c0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf240]
c0025a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a69:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a6f:	8b 14 85 40 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1c0]
c0025a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a79:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a82:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a91:	0f b6 f8             	movzx  edi,al
c0025a94:	89 d0                	mov    eax,edx
c0025a96:	ba 00 00 00 00       	mov    edx,0x0
c0025a9b:	89 c1                	mov    ecx,eax
c0025a9d:	80 e5 ff             	and    ch,0xff
c0025aa0:	89 cb                	mov    ebx,ecx
c0025aa2:	0f b6 f2             	movzx  esi,dl
c0025aa5:	89 d8                	mov    eax,ebx
c0025aa7:	89 f2                	mov    edx,esi
c0025aa9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025aac:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025aaf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ab3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ab7:	83 e0 00             	and    eax,0x0
c0025aba:	09 d0                	or     eax,edx
c0025abc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ac9:	8d 50 01             	lea    edx,[eax+0x1]
c0025acc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025acf:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025ad5:	0f b6 d0             	movzx  edx,al
c0025ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025adb:	83 c2 08             	add    edx,0x8
c0025ade:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025ae2:	0f b6 c9             	movzx  ecx,cl
c0025ae5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025aeb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025aef:	83 ec 08             	sub    esp,0x8
c0025af2:	6a 01                	push   0x1
c0025af4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025af7:	e8 04 ff ff ff       	call   c0025a00 <IOAPIC::read(int)>
c0025afc:	83 c4 10             	add    esp,0x10
c0025aff:	c1 f8 10             	sar    eax,0x10
c0025b02:	0f b6 c0             	movzx  eax,al
c0025b05:	8d 50 01             	lea    edx,[eax+0x1]
c0025b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b11:	b8 00 00 00 00       	mov    eax,0x0
c0025b16:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b19:	5b                   	pop    ebx
c0025b1a:	5e                   	pop    esi
c0025b1b:	5f                   	pop    edi
c0025b1c:	5d                   	pop    ebp
c0025b1d:	c3                   	ret    

c0025b1e <IOAPIC::write(int, int)>:
c0025b1e:	55                   	push   ebp
c0025b1f:	89 e5                	mov    ebp,esp
c0025b21:	83 ec 10             	sub    esp,0x10
c0025b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b27:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b2d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b33:	0f b6 d0             	movzx  edx,al
c0025b36:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b39:	89 10                	mov    DWORD PTR [eax],edx
c0025b3b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b3e:	8d 50 10             	lea    edx,[eax+0x10]
c0025b41:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b44:	89 02                	mov    DWORD PTR [edx],eax
c0025b46:	90                   	nop
c0025b47:	c9                   	leave  
c0025b48:	c3                   	ret    
c0025b49:	90                   	nop

c0025b4a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b4a:	55                   	push   ebp
c0025b4b:	89 e5                	mov    ebp,esp
c0025b4d:	53                   	push   ebx
c0025b4e:	83 ec 2c             	sub    esp,0x2c
c0025b51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b54:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b57:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b5a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b5d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b60:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b63:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b66:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b69:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b6c:	88 d8                	mov    al,bl
c0025b6e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b71:	88 c8                	mov    al,cl
c0025b73:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b76:	88 d0                	mov    al,dl
c0025b78:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b7b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b7f:	83 c0 08             	add    eax,0x8
c0025b82:	01 c0                	add    eax,eax
c0025b84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b8b:	83 c0 08             	add    eax,0x8
c0025b8e:	01 c0                	add    eax,eax
c0025b90:	40                   	inc    eax
c0025b91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b94:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b97:	50                   	push   eax
c0025b98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b9b:	e8 60 fe ff ff       	call   c0025a00 <IOAPIC::read(int)>
c0025ba0:	83 c4 08             	add    esp,0x8
c0025ba3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ba6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025bad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bb0:	c1 e0 18             	shl    eax,0x18
c0025bb3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bb6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bb9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bbc:	52                   	push   edx
c0025bbd:	50                   	push   eax
c0025bbe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bc1:	e8 58 ff ff ff       	call   c0025b1e <IOAPIC::write(int, int)>
c0025bc6:	83 c4 0c             	add    esp,0xc
c0025bc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bcc:	50                   	push   eax
c0025bcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bd0:	e8 2b fe ff ff       	call   c0025a00 <IOAPIC::read(int)>
c0025bd5:	83 c4 08             	add    esp,0x8
c0025bd8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025bdb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025be2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025be9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025bf0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025bf4:	74 09                	je     c0025bff <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025bf6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025bfd:	eb 07                	jmp    c0025c06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025bff:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c06:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c0a:	74 09                	je     c0025c15 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c0c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c13:	eb 07                	jmp    c0025c1c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c15:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c1c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c23:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c27:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c30:	52                   	push   edx
c0025c31:	50                   	push   eax
c0025c32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c35:	e8 e4 fe ff ff       	call   c0025b1e <IOAPIC::write(int, int)>
c0025c3a:	83 c4 0c             	add    esp,0xc
c0025c3d:	90                   	nop
c0025c3e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c41:	c9                   	leave  
c0025c42:	c3                   	ret    
c0025c43:	90                   	nop

c0025c44 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c44:	55                   	push   ebp
c0025c45:	89 e5                	mov    ebp,esp
c0025c47:	57                   	push   edi
c0025c48:	56                   	push   esi
c0025c49:	53                   	push   ebx
c0025c4a:	83 ec 2c             	sub    esp,0x2c
c0025c4d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c50:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c53:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c57:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c5b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c5f:	74 5a                	je     c0025cbb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c61:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c65:	7f 44                	jg     c0025cab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c6a:	05 40 d6 02 c0       	add    eax,0xc002d640
c0025c6f:	8a 00                	mov    al,BYTE PTR [eax]
c0025c71:	0f b6 c0             	movzx  eax,al
c0025c74:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c7a:	66 8b 84 00 60 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf2a0]
c0025c82:	0f b7 c0             	movzx  eax,ax
c0025c85:	83 e0 02             	and    eax,0x2
c0025c88:	85 c0                	test   eax,eax
c0025c8a:	74 04                	je     c0025c90 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c8c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c93:	66 8b 84 00 60 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf2a0]
c0025c9b:	0f b7 c0             	movzx  eax,ax
c0025c9e:	83 e0 08             	and    eax,0x8
c0025ca1:	85 c0                	test   eax,eax
c0025ca3:	74 16                	je     c0025cbb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ca5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ca9:	eb 10                	jmp    c0025cbb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cab:	83 ec 0c             	sub    esp,0xc
c0025cae:	68 fc d0 02 c0       	push   0xc002d0fc
c0025cb3:	e8 bd 48 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0025cb8:	83 c4 10             	add    esp,0x10
c0025cbb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cbf:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c0025cc4:	83 ec 08             	sub    esp,0x8
c0025cc7:	50                   	push   eax
c0025cc8:	68 34 d1 02 c0       	push   0xc002d134
c0025ccd:	e8 02 d2 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0025cd2:	83 c4 10             	add    esp,0x10
c0025cd5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025cdc:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c0025ce1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025ce4:	7d 67                	jge    c0025d4d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ce6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ce9:	8b 04 85 80 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd880]
c0025cf0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cf3:	83 ec 08             	sub    esp,0x8
c0025cf6:	52                   	push   edx
c0025cf7:	50                   	push   eax
c0025cf8:	e8 d1 fc ff ff       	call   c00259ce <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025cfd:	83 c4 10             	add    esp,0x10
c0025d00:	84 c0                	test   al,al
c0025d02:	74 44                	je     c0025d48 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d04:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d07:	8b 1c 85 80 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd880]
c0025d0e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d12:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d15:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d1c:	83 c0 20             	add    eax,0x20
c0025d1f:	0f b6 f0             	movzx  esi,al
c0025d22:	b8 00 00 00 00       	mov    eax,0x0
c0025d27:	99                   	cdq    
c0025d28:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d2b:	0f b6 c9             	movzx  ecx,cl
c0025d2e:	83 ec 04             	sub    esp,0x4
c0025d31:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d34:	57                   	push   edi
c0025d35:	56                   	push   esi
c0025d36:	52                   	push   edx
c0025d37:	50                   	push   eax
c0025d38:	51                   	push   ecx
c0025d39:	53                   	push   ebx
c0025d3a:	e8 0b fe ff ff       	call   c0025b4a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d3f:	83 c4 20             	add    esp,0x20
c0025d42:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d46:	eb 05                	jmp    c0025d4d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d48:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d4b:	eb 8f                	jmp    c0025cdc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d4d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d50:	83 f0 01             	xor    eax,0x1
c0025d53:	84 c0                	test   al,al
c0025d55:	74 10                	je     c0025d67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d57:	83 ec 0c             	sub    esp,0xc
c0025d5a:	68 4b d1 02 c0       	push   0xc002d14b
c0025d5f:	e8 11 48 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0025d64:	83 c4 10             	add    esp,0x10
c0025d67:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d6b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d72:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d76:	7f 65                	jg     c0025ddd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d7e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d85:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d88:	01 ca                	add    edx,ecx
c0025d8a:	83 c2 54             	add    edx,0x54
c0025d8d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d91:	85 c0                	test   eax,eax
c0025d93:	75 43                	jne    c0025dd8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d9b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025da2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025da5:	01 ca                	add    edx,ecx
c0025da7:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025daa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025dad:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025db7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dbe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dc1:	01 ca                	add    edx,ecx
c0025dc3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025dc9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025dcc:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dd0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dd3:	83 e8 20             	sub    eax,0x20
c0025dd6:	eb 1a                	jmp    c0025df2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025dd8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ddb:	eb 95                	jmp    c0025d72 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ddd:	83 ec 0c             	sub    esp,0xc
c0025de0:	68 58 d1 02 c0       	push   0xc002d158
c0025de5:	e8 8b 47 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0025dea:	83 c4 10             	add    esp,0x10
c0025ded:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025df2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025df5:	5b                   	pop    ebx
c0025df6:	5e                   	pop    esi
c0025df7:	5f                   	pop    edi
c0025df8:	5d                   	pop    ebp
c0025df9:	c3                   	ret    

c0025dfa <PIC::disable()>:
c0025dfa:	55                   	push   ebp
c0025dfb:	89 e5                	mov    ebp,esp
c0025dfd:	83 ec 10             	sub    esp,0x10
c0025e00:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e06:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e0a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e0d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e11:	ee                   	out    dx,al
c0025e12:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e18:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e1c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e1f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e23:	ee                   	out    dx,al
c0025e24:	90                   	nop
c0025e25:	c9                   	leave  
c0025e26:	c3                   	ret    
c0025e27:	90                   	nop

c0025e28 <PIC::close(int, int, void*)>:
c0025e28:	55                   	push   ebp
c0025e29:	89 e5                	mov    ebp,esp
c0025e2b:	83 ec 08             	sub    esp,0x8
c0025e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e33:	83 c0 3c             	add    eax,0x3c
c0025e36:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e38:	83 ec 0c             	sub    esp,0xc
c0025e3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e3e:	ff d0                	call   eax
c0025e40:	83 c4 10             	add    esp,0x10
c0025e43:	b8 00 00 00 00       	mov    eax,0x0
c0025e48:	c9                   	leave  
c0025e49:	c3                   	ret    

c0025e4a <PIC::PIC()>:
c0025e4a:	83 ec 0c             	sub    esp,0xc
c0025e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e51:	83 ec 08             	sub    esp,0x8
c0025e54:	68 04 d2 02 c0       	push   0xc002d204
c0025e59:	50                   	push   eax
c0025e5a:	e8 f7 ed fe ff       	call   c0014c56 <InterruptController::InterruptController(char const*)>
c0025e5f:	83 c4 10             	add    esp,0x10
c0025e62:	ba 30 d2 02 c0       	mov    edx,0xc002d230
c0025e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6b:	89 10                	mov    DWORD PTR [eax],edx
c0025e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e71:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e77:	0f b6 d0             	movzx  edx,al
c0025e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e8f:	0f b6 d0             	movzx  edx,al
c0025e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e96:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ea5:	8d 50 01             	lea    edx,[eax+0x1]
c0025ea8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025eb2:	0f b6 d0             	movzx  edx,al
c0025eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ebd:	83 e1 3f             	and    ecx,0x3f
c0025ec0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ece:	0f b6 d0             	movzx  edx,al
c0025ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee6:	0f b6 d0             	movzx  edx,al
c0025ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eed:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025efc:	8d 50 01             	lea    edx,[eax+0x1]
c0025eff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f03:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f09:	0f b6 d0             	movzx  edx,al
c0025f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f10:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f14:	83 e1 3f             	and    ecx,0x3f
c0025f17:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f1b:	90                   	nop
c0025f1c:	83 c4 0c             	add    esp,0xc
c0025f1f:	c3                   	ret    

c0025f20 <PIC::ioWait()>:
c0025f20:	eb 00                	jmp    c0025f22 <PIC::ioWait()+0x2>
c0025f22:	eb 00                	jmp    c0025f24 <PIC::ioWait()+0x4>
c0025f24:	90                   	nop
c0025f25:	c3                   	ret    

c0025f26 <PIC::getIRQReg(int)>:
c0025f26:	55                   	push   ebp
c0025f27:	89 e5                	mov    ebp,esp
c0025f29:	83 ec 10             	sub    esp,0x10
c0025f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f2f:	0f b6 c0             	movzx  eax,al
c0025f32:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f38:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f3b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f3e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f42:	ee                   	out    dx,al
c0025f43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f46:	0f b6 c0             	movzx  eax,al
c0025f49:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f4f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f52:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f55:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f59:	ee                   	out    dx,al
c0025f5a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f60:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f64:	89 c2                	mov    edx,eax
c0025f66:	ec                   	in     al,dx
c0025f67:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f6a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f6d:	0f b6 c0             	movzx  eax,al
c0025f70:	c1 e0 08             	shl    eax,0x8
c0025f73:	89 c1                	mov    ecx,eax
c0025f75:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f7b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f7f:	89 c2                	mov    edx,eax
c0025f81:	ec                   	in     al,dx
c0025f82:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025f85:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f88:	0f b6 c0             	movzx  eax,al
c0025f8b:	09 c8                	or     eax,ecx
c0025f8d:	c9                   	leave  
c0025f8e:	c3                   	ret    
c0025f8f:	90                   	nop

c0025f90 <PIC::eoi(unsigned char)>:
c0025f90:	55                   	push   ebp
c0025f91:	89 e5                	mov    ebp,esp
c0025f93:	83 ec 14             	sub    esp,0x14
c0025f96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f99:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f9c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fa0:	75 1e                	jne    c0025fc0 <PIC::eoi(unsigned char)+0x30>
c0025fa2:	6a 0b                	push   0xb
c0025fa4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa7:	e8 7a ff ff ff       	call   c0025f26 <PIC::getIRQReg(int)>
c0025fac:	83 c4 08             	add    esp,0x8
c0025faf:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025fb3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025fb7:	25 80 00 00 00       	and    eax,0x80
c0025fbc:	85 c0                	test   eax,eax
c0025fbe:	74 5f                	je     c002601f <PIC::eoi(unsigned char)+0x8f>
c0025fc0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025fc4:	75 2d                	jne    c0025ff3 <PIC::eoi(unsigned char)+0x63>
c0025fc6:	6a 0b                	push   0xb
c0025fc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fcb:	e8 56 ff ff ff       	call   c0025f26 <PIC::getIRQReg(int)>
c0025fd0:	83 c4 08             	add    esp,0x8
c0025fd3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025fd7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025fda:	66 85 c0             	test   ax,ax
c0025fdd:	78 14                	js     c0025ff3 <PIC::eoi(unsigned char)+0x63>
c0025fdf:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025fe5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025fe9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fec:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ff0:	ee                   	out    dx,al
c0025ff1:	eb 2d                	jmp    c0026020 <PIC::eoi(unsigned char)+0x90>
c0025ff3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ff7:	76 12                	jbe    c002600b <PIC::eoi(unsigned char)+0x7b>
c0025ff9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fff:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026003:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026006:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002600a:	ee                   	out    dx,al
c002600b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026011:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026015:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026018:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002601c:	ee                   	out    dx,al
c002601d:	eb 01                	jmp    c0026020 <PIC::eoi(unsigned char)+0x90>
c002601f:	90                   	nop
c0026020:	c9                   	leave  
c0026021:	c3                   	ret    

c0026022 <PIC::remap()>:
c0026022:	55                   	push   ebp
c0026023:	89 e5                	mov    ebp,esp
c0026025:	83 ec 48             	sub    esp,0x48
c0026028:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002602f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026036:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002603c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002603f:	89 c2                	mov    edx,eax
c0026041:	ec                   	in     al,dx
c0026042:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026045:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026048:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002604b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026051:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026054:	89 c2                	mov    edx,eax
c0026056:	ec                   	in     al,dx
c0026057:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002605a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002605d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026060:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026066:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002606a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002606d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026070:	ee                   	out    dx,al
c0026071:	83 ec 0c             	sub    esp,0xc
c0026074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026077:	e8 a4 fe ff ff       	call   c0025f20 <PIC::ioWait()>
c002607c:	83 c4 10             	add    esp,0x10
c002607f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026085:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026089:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002608c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002608f:	ee                   	out    dx,al
c0026090:	83 ec 0c             	sub    esp,0xc
c0026093:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026096:	e8 85 fe ff ff       	call   c0025f20 <PIC::ioWait()>
c002609b:	83 c4 10             	add    esp,0x10
c002609e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260a1:	0f b6 c0             	movzx  eax,al
c00260a4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260aa:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260ad:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260b0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260b3:	ee                   	out    dx,al
c00260b4:	83 ec 0c             	sub    esp,0xc
c00260b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260ba:	e8 61 fe ff ff       	call   c0025f20 <PIC::ioWait()>
c00260bf:	83 c4 10             	add    esp,0x10
c00260c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260c5:	0f b6 c0             	movzx  eax,al
c00260c8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00260ce:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00260d1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00260d4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00260d7:	ee                   	out    dx,al
c00260d8:	83 ec 0c             	sub    esp,0xc
c00260db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260de:	e8 3d fe ff ff       	call   c0025f20 <PIC::ioWait()>
c00260e3:	83 c4 10             	add    esp,0x10
c00260e6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00260ec:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00260f0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00260f3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00260f6:	ee                   	out    dx,al
c00260f7:	83 ec 0c             	sub    esp,0xc
c00260fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260fd:	e8 1e fe ff ff       	call   c0025f20 <PIC::ioWait()>
c0026102:	83 c4 10             	add    esp,0x10
c0026105:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002610b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002610f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026112:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026115:	ee                   	out    dx,al
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611c:	e8 ff fd ff ff       	call   c0025f20 <PIC::ioWait()>
c0026121:	83 c4 10             	add    esp,0x10
c0026124:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002612a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002612e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026131:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026134:	ee                   	out    dx,al
c0026135:	83 ec 0c             	sub    esp,0xc
c0026138:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002613b:	e8 e0 fd ff ff       	call   c0025f20 <PIC::ioWait()>
c0026140:	83 c4 10             	add    esp,0x10
c0026143:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026149:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002614d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026150:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026153:	ee                   	out    dx,al
c0026154:	83 ec 0c             	sub    esp,0xc
c0026157:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615a:	e8 c1 fd ff ff       	call   c0025f20 <PIC::ioWait()>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026166:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002616c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002616f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026172:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026175:	ee                   	out    dx,al
c0026176:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002617a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026180:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026183:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026186:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026189:	ee                   	out    dx,al
c002618a:	90                   	nop
c002618b:	c9                   	leave  
c002618c:	c3                   	ret    
c002618d:	90                   	nop

c002618e <PIC::open(int, int, void*)>:
c002618e:	55                   	push   ebp
c002618f:	89 e5                	mov    ebp,esp
c0026191:	83 ec 18             	sub    esp,0x18
c0026194:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002619a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002619e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261a1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261a5:	ee                   	out    dx,al
c00261a6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261ac:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261b0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261b3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261b7:	ee                   	out    dx,al
c00261b8:	83 ec 0c             	sub    esp,0xc
c00261bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261be:	e8 5f fe ff ff       	call   c0026022 <PIC::remap()>
c00261c3:	83 c4 10             	add    esp,0x10
c00261c6:	b8 00 00 00 00       	mov    eax,0x0
c00261cb:	c9                   	leave  
c00261cc:	c3                   	ret    
c00261cd:	90                   	nop

c00261ce <APICTimer::close(int, int, void*)>:
c00261ce:	b8 00 00 00 00       	mov    eax,0x0
c00261d3:	c3                   	ret    

c00261d4 <apicTimerHandler(regs*, void*)>:
c00261d4:	83 ec 0c             	sub    esp,0xc
c00261d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261db:	8b 00                	mov    eax,DWORD PTR [eax]
c00261dd:	99                   	cdq    
c00261de:	52                   	push   edx
c00261df:	50                   	push   eax
c00261e0:	6a 00                	push   0x0
c00261e2:	68 00 ca 9a 3b       	push   0x3b9aca00
c00261e7:	e8 90 07 00 00       	call   c002697c <__udivdi3>
c00261ec:	83 c4 10             	add    esp,0x10
c00261ef:	83 ec 08             	sub    esp,0x8
c00261f2:	52                   	push   edx
c00261f3:	50                   	push   eax
c00261f4:	e8 a8 0a ff ff       	call   c0016ca1 <timerHandler(unsigned long long)>
c00261f9:	83 c4 10             	add    esp,0x10
c00261fc:	90                   	nop
c00261fd:	83 c4 0c             	add    esp,0xc
c0026200:	c3                   	ret    
c0026201:	90                   	nop

c0026202 <APICTimer::write(int)>:
c0026202:	53                   	push   ebx
c0026203:	83 ec 28             	sub    esp,0x28
c0026206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002620a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002620e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026214:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0026219:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002621f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026225:	83 ec 0c             	sub    esp,0xc
c0026228:	50                   	push   eax
c0026229:	e8 de f4 ff ff       	call   c002570c <APIC::getBase()>
c002622e:	83 c4 10             	add    esp,0x10
c0026231:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026235:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c002623a:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c0026240:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026244:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026248:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002624c:	05 e0 03 00 00       	add    eax,0x3e0
c0026251:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002625b:	05 80 03 00 00       	add    eax,0x380
c0026260:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026266:	fb                   	sti    
c0026267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002626b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002626f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026274:	83 d2 00             	adc    edx,0x0
c0026277:	89 c1                	mov    ecx,eax
c0026279:	89 d3                	mov    ebx,edx
c002627b:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c0026280:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c0026286:	39 c8                	cmp    eax,ecx
c0026288:	89 d0                	mov    eax,edx
c002628a:	19 d8                	sbb    eax,ebx
c002628c:	73 02                	jae    c0026290 <APICTimer::write(int)+0x8e>
c002628e:	eb d7                	jmp    c0026267 <APICTimer::write(int)+0x65>
c0026290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026294:	05 20 03 00 00       	add    eax,0x320
c0026299:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002629f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262a3:	05 90 03 00 00       	add    eax,0x390
c00262a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00262aa:	f7 d0                	not    eax
c00262ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262b8:	ba 00 00 00 00       	mov    edx,0x0
c00262bd:	f7 f3                	div    ebx
c00262bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262cd:	0d 00 00 02 00       	or     eax,0x20000
c00262d2:	89 c2                	mov    edx,eax
c00262d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d8:	05 20 03 00 00       	add    eax,0x320
c00262dd:	89 10                	mov    DWORD PTR [eax],edx
c00262df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e3:	05 e0 03 00 00       	add    eax,0x3e0
c00262e8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262f2:	05 80 03 00 00       	add    eax,0x380
c00262f7:	89 c2                	mov    edx,eax
c00262f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00262fd:	89 02                	mov    DWORD PTR [edx],eax
c00262ff:	90                   	nop
c0026300:	83 c4 28             	add    esp,0x28
c0026303:	5b                   	pop    ebx
c0026304:	c3                   	ret    
c0026305:	90                   	nop

c0026306 <APICTimer::open(int, int, void*)>:
c0026306:	57                   	push   edi
c0026307:	56                   	push   esi
c0026308:	53                   	push   ebx
c0026309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630d:	8b 00                	mov    eax,DWORD PTR [eax]
c002630f:	83 c0 24             	add    eax,0x24
c0026312:	8b 00                	mov    eax,DWORD PTR [eax]
c0026314:	83 ec 08             	sub    esp,0x8
c0026317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002631b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002631f:	ff d0                	call   eax
c0026321:	83 c4 10             	add    esp,0x10
c0026324:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0026329:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002632f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026335:	83 ec 0c             	sub    esp,0xc
c0026338:	50                   	push   eax
c0026339:	e8 ce f3 ff ff       	call   c002570c <APIC::getBase()>
c002633e:	83 c4 10             	add    esp,0x10
c0026341:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026351:	0f b6 f8             	movzx  edi,al
c0026354:	89 d0                	mov    eax,edx
c0026356:	ba 00 00 00 00       	mov    edx,0x0
c002635b:	89 c1                	mov    ecx,eax
c002635d:	80 e5 ff             	and    ch,0xff
c0026360:	89 cb                	mov    ebx,ecx
c0026362:	0f b6 f2             	movzx  esi,dl
c0026365:	89 d8                	mov    eax,ebx
c0026367:	89 f2                	mov    edx,esi
c0026369:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002636d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026370:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026374:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026378:	83 e0 00             	and    eax,0x0
c002637b:	09 d0                	or     eax,edx
c002637d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026385:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002638b:	8d 50 01             	lea    edx,[eax+0x1]
c002638e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026392:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026398:	0f b6 d0             	movzx  edx,al
c002639b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002639f:	83 c2 08             	add    edx,0x8
c00263a2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263a6:	0f b6 c9             	movzx  ecx,cl
c00263a9:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263af:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263bb:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263c9:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00263cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263d3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00263d9:	83 ec 0c             	sub    esp,0xc
c00263dc:	51                   	push   ecx
c00263dd:	6a 01                	push   0x1
c00263df:	68 d4 61 02 c0       	push   0xc00261d4
c00263e4:	52                   	push   edx
c00263e5:	50                   	push   eax
c00263e6:	e8 93 de fe ff       	call   c001427e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263eb:	83 c4 20             	add    esp,0x20
c00263ee:	89 c2                	mov    edx,eax
c00263f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00263fa:	b8 00 00 00 00       	mov    eax,0x0
c00263ff:	5b                   	pop    ebx
c0026400:	5e                   	pop    esi
c0026401:	5f                   	pop    edi
c0026402:	c3                   	ret    
c0026403:	90                   	nop

c0026404 <APICTimer::APICTimer()>:
c0026404:	83 ec 0c             	sub    esp,0xc
c0026407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640b:	83 ec 08             	sub    esp,0x8
c002640e:	68 70 d2 02 c0       	push   0xc002d270
c0026413:	50                   	push   eax
c0026414:	e8 f9 07 ff ff       	call   c0016c12 <Timer::Timer(char const*)>
c0026419:	83 c4 10             	add    esp,0x10
c002641c:	ba 84 d2 02 c0       	mov    edx,0xc002d284
c0026421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026425:	89 10                	mov    DWORD PTR [eax],edx
c0026427:	90                   	nop
c0026428:	83 c4 0c             	add    esp,0xc
c002642b:	c3                   	ret    

c002642c <PIT::write(int)>:
c002642c:	83 ec 10             	sub    esp,0x10
c002642f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026437:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002643d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026441:	a3 a4 27 03 c0       	mov    ds:0xc00327a4,eax
c0026446:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002644b:	99                   	cdq    
c002644c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026450:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026454:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002645b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026460:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026464:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026469:	ee                   	out    dx,al
c002646a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002646e:	0f b6 c0             	movzx  eax,al
c0026471:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026478:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002647c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026480:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026485:	ee                   	out    dx,al
c0026486:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002648a:	c1 f8 08             	sar    eax,0x8
c002648d:	0f b6 c0             	movzx  eax,al
c0026490:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026497:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002649b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002649f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264a4:	ee                   	out    dx,al
c00264a5:	90                   	nop
c00264a6:	83 c4 10             	add    esp,0x10
c00264a9:	c3                   	ret    

c00264aa <pitHandler(regs*, void*)>:
c00264aa:	83 ec 0c             	sub    esp,0xc
c00264ad:	a1 a4 27 03 c0       	mov    eax,ds:0xc00327a4
c00264b2:	99                   	cdq    
c00264b3:	52                   	push   edx
c00264b4:	50                   	push   eax
c00264b5:	6a 00                	push   0x0
c00264b7:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264bc:	e8 bb 04 00 00       	call   c002697c <__udivdi3>
c00264c1:	83 c4 10             	add    esp,0x10
c00264c4:	83 ec 08             	sub    esp,0x8
c00264c7:	52                   	push   edx
c00264c8:	50                   	push   eax
c00264c9:	e8 d3 07 ff ff       	call   c0016ca1 <timerHandler(unsigned long long)>
c00264ce:	83 c4 10             	add    esp,0x10
c00264d1:	90                   	nop
c00264d2:	83 c4 0c             	add    esp,0xc
c00264d5:	c3                   	ret    

c00264d6 <PIT::open(int, int, void*)>:
c00264d6:	83 ec 0c             	sub    esp,0xc
c00264d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00264df:	83 c0 24             	add    eax,0x24
c00264e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00264e4:	83 ec 08             	sub    esp,0x8
c00264e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264ef:	ff d0                	call   eax
c00264f1:	83 c4 10             	add    esp,0x10
c00264f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f8:	83 ec 0c             	sub    esp,0xc
c00264fb:	6a 00                	push   0x0
c00264fd:	6a 01                	push   0x1
c00264ff:	68 aa 64 02 c0       	push   0xc00264aa
c0026504:	6a 00                	push   0x0
c0026506:	50                   	push   eax
c0026507:	e8 72 dd fe ff       	call   c001427e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002650c:	83 c4 20             	add    esp,0x20
c002650f:	89 c2                	mov    edx,eax
c0026511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026515:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002651b:	b8 00 00 00 00       	mov    eax,0x0
c0026520:	83 c4 0c             	add    esp,0xc
c0026523:	c3                   	ret    

c0026524 <PIT::close(int, int, void*)>:
c0026524:	83 ec 0c             	sub    esp,0xc
c0026527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002652b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026539:	6a 01                	push   0x1
c002653b:	68 aa 64 02 c0       	push   0xc00264aa
c0026540:	6a 00                	push   0x0
c0026542:	50                   	push   eax
c0026543:	e8 74 dd fe ff       	call   c00142bc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026548:	83 c4 10             	add    esp,0x10
c002654b:	b8 00 00 00 00       	mov    eax,0x0
c0026550:	83 c4 0c             	add    esp,0xc
c0026553:	c3                   	ret    

c0026554 <PIT::PIT()>:
c0026554:	83 ec 0c             	sub    esp,0xc
c0026557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002655b:	83 ec 08             	sub    esp,0x8
c002655e:	68 ac d2 02 c0       	push   0xc002d2ac
c0026563:	50                   	push   eax
c0026564:	e8 a9 06 ff ff       	call   c0016c12 <Timer::Timer(char const*)>
c0026569:	83 c4 10             	add    esp,0x10
c002656c:	ba d4 d2 02 c0       	mov    edx,0xc002d2d4
c0026571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026575:	89 10                	mov    DWORD PTR [eax],edx
c0026577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002657b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026581:	0f b6 d0             	movzx  edx,al
c0026584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026588:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002658f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026593:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026599:	0f b6 d0             	movzx  edx,al
c002659c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265af:	8d 50 01             	lea    edx,[eax+0x1]
c00265b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265b6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265bc:	0f b6 d0             	movzx  edx,al
c00265bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00265c7:	83 e1 3f             	and    ecx,0x3f
c00265ca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00265ce:	90                   	nop
c00265cf:	83 c4 0c             	add    esp,0xc
c00265d2:	c3                   	ret    
c00265d3:	66 90                	xchg   ax,ax
c00265d5:	66 90                	xchg   ax,ax
c00265d7:	66 90                	xchg   ax,ax
c00265d9:	66 90                	xchg   ax,ax
c00265db:	66 90                	xchg   ax,ax
c00265dd:	66 90                	xchg   ax,ax
c00265df:	90                   	nop

c00265e0 <avxDetect>:
c00265e0:	b8 00 00 00 00       	mov    eax,0x0
c00265e5:	c3                   	ret    

c00265e6 <avxSave>:
c00265e6:	c3                   	ret    

c00265e7 <avxLoad>:
c00265e7:	c3                   	ret    

c00265e8 <avxInit>:
c00265e8:	c3                   	ret    

c00265e9 <avxClose>:
c00265e9:	c3                   	ret    

c00265ea <wouldSheSayYes>:
c00265ea:	c3                   	ret    
c00265eb:	49                   	dec    ecx
c00265ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00265f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00265f4:	75 20                	jne    c0026616 <sseDetect.noSSE+0x1>
c00265f6:	4e                   	dec    esi
c00265f7:	79 61                	jns    c002665a <x87Detect+0x14>
c00265f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00265fe:	66 90                	xchg   ax,ax

c0026600 <absolutelyNoChanceInHell>:
c0026600:	b8 01 00 00 00       	mov    eax,0x1
c0026605:	0f a2                	cpuid  
c0026607:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002660d:	74 06                	je     c0026615 <sseDetect.noSSE>
c002660f:	b8 01 00 00 00       	mov    eax,0x1
c0026614:	c3                   	ret    

c0026615 <sseDetect.noSSE>:
c0026615:	31 c0                	xor    eax,eax
c0026617:	c3                   	ret    

c0026618 <sseSave>:
c0026618:	0f ae 44 24 08       	fxsave [esp+0x8]
c002661d:	c3                   	ret    

c002661e <sseLoad>:
c002661e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026623:	c3                   	ret    

c0026624 <sseInit>:
c0026624:	e8 43 00 00 00       	call   c002666c <x87Init>
c0026629:	0f 20 e0             	mov    eax,cr4
c002662c:	66 0d 00 06          	or     ax,0x600
c0026630:	0f 22 e0             	mov    cr4,eax
c0026633:	c3                   	ret    

c0026634 <sseClose>:
c0026634:	c3                   	ret    
c0026635:	66 90                	xchg   ax,ax
c0026637:	66 90                	xchg   ax,ax
c0026639:	66 90                	xchg   ax,ax
c002663b:	66 90                	xchg   ax,ax
c002663d:	66 90                	xchg   ax,ax
c002663f:	90                   	nop

c0026640 <value_37F>:
c0026640:	7f 03                	jg     c0026645 <value_37A+0x1>

c0026642 <value_37E>:
c0026642:	7e 03                	jle    c0026647 <x87Detect+0x1>

c0026644 <value_37A>:
c0026644:	7a 03                	jp     c0026649 <x87Detect+0x3>

c0026646 <x87Detect>:
c0026646:	b8 01 00 00 00       	mov    eax,0x1
c002664b:	0f a2                	cpuid  
c002664d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026653:	74 06                	je     c002665b <x87Detect.nox87>
c0026655:	b8 01 00 00 00       	mov    eax,0x1
c002665a:	c3                   	ret    

c002665b <x87Detect.nox87>:
c002665b:	b8 00 00 00 00       	mov    eax,0x0
c0026660:	c3                   	ret    

c0026661 <x87Save>:
c0026661:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026666:	c3                   	ret    

c0026667 <x87Load>:
c0026667:	dd 64 24 08          	frstor [esp+0x8]
c002666b:	c3                   	ret    

c002666c <x87Init>:
c002666c:	9b db e3             	finit  
c002666f:	0f 20 c0             	mov    eax,cr0
c0026672:	66 25 fb ff          	and    ax,0xfffb
c0026676:	66 0d 22 00          	or     ax,0x22
c002667a:	0f 22 c0             	mov    cr0,eax
c002667d:	0f 06                	clts   
c002667f:	d9 2d 44 66 02 c0    	fldcw  WORD PTR ds:0xc0026644
c0026685:	c3                   	ret    

c0026686 <x87Close>:
c0026686:	c3                   	ret    
c0026687:	90                   	nop

c0026688 <__do_global_ctors_aux>:
c0026688:	a1 cc 91 02 c0       	mov    eax,ds:0xc00291cc
c002668d:	83 f8 ff             	cmp    eax,0xffffffff
c0026690:	74 1a                	je     c00266ac <__do_global_ctors_aux+0x24>
c0026692:	55                   	push   ebp
c0026693:	89 e5                	mov    ebp,esp
c0026695:	53                   	push   ebx
c0026696:	52                   	push   edx
c0026697:	bb cc 91 02 c0       	mov    ebx,0xc00291cc
c002669c:	ff d0                	call   eax
c002669e:	83 eb 04             	sub    ebx,0x4
c00266a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266a3:	83 f8 ff             	cmp    eax,0xffffffff
c00266a6:	75 f4                	jne    c002669c <__do_global_ctors_aux+0x14>
c00266a8:	58                   	pop    eax
c00266a9:	5b                   	pop    ebx
c00266aa:	5d                   	pop    ebp
c00266ab:	c3                   	ret    
c00266ac:	c3                   	ret    
c00266ad:	66 90                	xchg   ax,ax
c00266af:	90                   	nop

c00266b0 <__divdi3>:
c00266b0:	55                   	push   ebp
c00266b1:	57                   	push   edi
c00266b2:	56                   	push   esi
c00266b3:	53                   	push   ebx
c00266b4:	83 ec 1c             	sub    esp,0x1c
c00266b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266ce:	85 db                	test   ebx,ebx
c00266d0:	0f 88 8e 00 00 00    	js     c0026764 <__divdi3+0xb4>
c00266d6:	89 dd                	mov    ebp,ebx
c00266d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00266e0:	89 d3                	mov    ebx,edx
c00266e2:	85 d2                	test   edx,edx
c00266e4:	79 0d                	jns    c00266f3 <__divdi3+0x43>
c00266e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00266ea:	f7 d8                	neg    eax
c00266ec:	83 d2 00             	adc    edx,0x0
c00266ef:	f7 da                	neg    edx
c00266f1:	89 d3                	mov    ebx,edx
c00266f3:	89 c7                	mov    edi,eax
c00266f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266f8:	85 db                	test   ebx,ebx
c00266fa:	75 48                	jne    c0026744 <__divdi3+0x94>
c00266fc:	39 ef                	cmp    edi,ebp
c00266fe:	76 24                	jbe    c0026724 <__divdi3+0x74>
c0026700:	89 ea                	mov    edx,ebp
c0026702:	f7 f7                	div    edi
c0026704:	89 c1                	mov    ecx,eax
c0026706:	31 f6                	xor    esi,esi
c0026708:	89 c8                	mov    eax,ecx
c002670a:	89 f2                	mov    edx,esi
c002670c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026710:	85 c9                	test   ecx,ecx
c0026712:	74 07                	je     c002671b <__divdi3+0x6b>
c0026714:	f7 d8                	neg    eax
c0026716:	83 d2 00             	adc    edx,0x0
c0026719:	f7 da                	neg    edx
c002671b:	83 c4 1c             	add    esp,0x1c
c002671e:	5b                   	pop    ebx
c002671f:	5e                   	pop    esi
c0026720:	5f                   	pop    edi
c0026721:	5d                   	pop    ebp
c0026722:	c3                   	ret    
c0026723:	90                   	nop
c0026724:	85 ff                	test   edi,edi
c0026726:	75 0b                	jne    c0026733 <__divdi3+0x83>
c0026728:	b8 01 00 00 00       	mov    eax,0x1
c002672d:	31 d2                	xor    edx,edx
c002672f:	f7 f3                	div    ebx
c0026731:	89 c7                	mov    edi,eax
c0026733:	31 d2                	xor    edx,edx
c0026735:	89 e8                	mov    eax,ebp
c0026737:	f7 f7                	div    edi
c0026739:	89 c6                	mov    esi,eax
c002673b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002673e:	f7 f7                	div    edi
c0026740:	89 c1                	mov    ecx,eax
c0026742:	eb c4                	jmp    c0026708 <__divdi3+0x58>
c0026744:	39 eb                	cmp    ebx,ebp
c0026746:	77 3c                	ja     c0026784 <__divdi3+0xd4>
c0026748:	0f bd f3             	bsr    esi,ebx
c002674b:	83 f6 1f             	xor    esi,0x1f
c002674e:	75 40                	jne    c0026790 <__divdi3+0xe0>
c0026750:	39 eb                	cmp    ebx,ebp
c0026752:	72 09                	jb     c002675d <__divdi3+0xad>
c0026754:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026757:	0f 87 97 00 00 00    	ja     c00267f4 <__divdi3+0x144>
c002675d:	b9 01 00 00 00       	mov    ecx,0x1
c0026762:	eb a4                	jmp    c0026708 <__divdi3+0x58>
c0026764:	f7 d9                	neg    ecx
c0026766:	83 d3 00             	adc    ebx,0x0
c0026769:	f7 db                	neg    ebx
c002676b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002676e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026772:	89 dd                	mov    ebp,ebx
c0026774:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002677c:	e9 5f ff ff ff       	jmp    c00266e0 <__divdi3+0x30>
c0026781:	8d 76 00             	lea    esi,[esi+0x0]
c0026784:	31 f6                	xor    esi,esi
c0026786:	31 c9                	xor    ecx,ecx
c0026788:	e9 7b ff ff ff       	jmp    c0026708 <__divdi3+0x58>
c002678d:	8d 76 00             	lea    esi,[esi+0x0]
c0026790:	b8 20 00 00 00       	mov    eax,0x20
c0026795:	29 f0                	sub    eax,esi
c0026797:	89 f1                	mov    ecx,esi
c0026799:	d3 e3                	shl    ebx,cl
c002679b:	89 fa                	mov    edx,edi
c002679d:	88 c1                	mov    cl,al
c002679f:	d3 ea                	shr    edx,cl
c00267a1:	09 da                	or     edx,ebx
c00267a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267a7:	89 f1                	mov    ecx,esi
c00267a9:	d3 e7                	shl    edi,cl
c00267ab:	89 eb                	mov    ebx,ebp
c00267ad:	88 c1                	mov    cl,al
c00267af:	d3 eb                	shr    ebx,cl
c00267b1:	89 f1                	mov    ecx,esi
c00267b3:	d3 e5                	shl    ebp,cl
c00267b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267b8:	88 c1                	mov    cl,al
c00267ba:	d3 ea                	shr    edx,cl
c00267bc:	09 d5                	or     ebp,edx
c00267be:	89 e8                	mov    eax,ebp
c00267c0:	89 da                	mov    edx,ebx
c00267c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267c6:	89 d3                	mov    ebx,edx
c00267c8:	89 c5                	mov    ebp,eax
c00267ca:	f7 e7                	mul    edi
c00267cc:	39 d3                	cmp    ebx,edx
c00267ce:	72 18                	jb     c00267e8 <__divdi3+0x138>
c00267d0:	74 0a                	je     c00267dc <__divdi3+0x12c>
c00267d2:	89 e9                	mov    ecx,ebp
c00267d4:	31 f6                	xor    esi,esi
c00267d6:	e9 2d ff ff ff       	jmp    c0026708 <__divdi3+0x58>
c00267db:	90                   	nop
c00267dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00267df:	89 f1                	mov    ecx,esi
c00267e1:	d3 e7                	shl    edi,cl
c00267e3:	39 c7                	cmp    edi,eax
c00267e5:	73 eb                	jae    c00267d2 <__divdi3+0x122>
c00267e7:	90                   	nop
c00267e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00267eb:	31 f6                	xor    esi,esi
c00267ed:	e9 16 ff ff ff       	jmp    c0026708 <__divdi3+0x58>
c00267f2:	66 90                	xchg   ax,ax
c00267f4:	31 c9                	xor    ecx,ecx
c00267f6:	e9 0d ff ff ff       	jmp    c0026708 <__divdi3+0x58>
c00267fb:	90                   	nop

c00267fc <__moddi3>:
c00267fc:	55                   	push   ebp
c00267fd:	57                   	push   edi
c00267fe:	56                   	push   esi
c00267ff:	53                   	push   ebx
c0026800:	83 ec 2c             	sub    esp,0x2c
c0026803:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026807:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002680b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002680f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026813:	85 db                	test   ebx,ebx
c0026815:	0f 88 85 00 00 00    	js     c00268a0 <__moddi3+0xa4>
c002681b:	89 de                	mov    esi,ebx
c002681d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026825:	89 d7                	mov    edi,edx
c0026827:	85 d2                	test   edx,edx
c0026829:	79 09                	jns    c0026834 <__moddi3+0x38>
c002682b:	f7 d8                	neg    eax
c002682d:	83 d2 00             	adc    edx,0x0
c0026830:	f7 da                	neg    edx
c0026832:	89 d7                	mov    edi,edx
c0026834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026838:	89 cd                	mov    ebp,ecx
c002683a:	85 ff                	test   edi,edi
c002683c:	75 52                	jne    c0026890 <__moddi3+0x94>
c002683e:	89 c3                	mov    ebx,eax
c0026840:	39 f0                	cmp    eax,esi
c0026842:	76 24                	jbe    c0026868 <__moddi3+0x6c>
c0026844:	89 c8                	mov    eax,ecx
c0026846:	89 f2                	mov    edx,esi
c0026848:	f7 f3                	div    ebx
c002684a:	89 d6                	mov    esi,edx
c002684c:	89 f0                	mov    eax,esi
c002684e:	31 d2                	xor    edx,edx
c0026850:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026854:	85 c9                	test   ecx,ecx
c0026856:	74 07                	je     c002685f <__moddi3+0x63>
c0026858:	f7 d8                	neg    eax
c002685a:	83 d2 00             	adc    edx,0x0
c002685d:	f7 da                	neg    edx
c002685f:	83 c4 2c             	add    esp,0x2c
c0026862:	5b                   	pop    ebx
c0026863:	5e                   	pop    esi
c0026864:	5f                   	pop    edi
c0026865:	5d                   	pop    ebp
c0026866:	c3                   	ret    
c0026867:	90                   	nop
c0026868:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002686c:	85 db                	test   ebx,ebx
c002686e:	75 0d                	jne    c002687d <__moddi3+0x81>
c0026870:	b8 01 00 00 00       	mov    eax,0x1
c0026875:	31 d2                	xor    edx,edx
c0026877:	f7 f7                	div    edi
c0026879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002687d:	89 f0                	mov    eax,esi
c002687f:	31 d2                	xor    edx,edx
c0026881:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026885:	f7 f7                	div    edi
c0026887:	89 e8                	mov    eax,ebp
c0026889:	f7 f7                	div    edi
c002688b:	89 d6                	mov    esi,edx
c002688d:	eb bd                	jmp    c002684c <__moddi3+0x50>
c002688f:	90                   	nop
c0026890:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026894:	39 f7                	cmp    edi,esi
c0026896:	76 20                	jbe    c00268b8 <__moddi3+0xbc>
c0026898:	89 c8                	mov    eax,ecx
c002689a:	89 f2                	mov    edx,esi
c002689c:	eb b2                	jmp    c0026850 <__moddi3+0x54>
c002689e:	66 90                	xchg   ax,ax
c00268a0:	f7 d9                	neg    ecx
c00268a2:	83 d3 00             	adc    ebx,0x0
c00268a5:	f7 db                	neg    ebx
c00268a7:	89 de                	mov    esi,ebx
c00268a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268b1:	e9 6f ff ff ff       	jmp    c0026825 <__moddi3+0x29>
c00268b6:	66 90                	xchg   ax,ax
c00268b8:	0f bd c7             	bsr    eax,edi
c00268bb:	83 f0 1f             	xor    eax,0x1f
c00268be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268c2:	75 24                	jne    c00268e8 <__moddi3+0xec>
c00268c4:	39 f7                	cmp    edi,esi
c00268c6:	72 06                	jb     c00268ce <__moddi3+0xd2>
c00268c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268cc:	77 0c                	ja     c00268da <__moddi3+0xde>
c00268ce:	89 e9                	mov    ecx,ebp
c00268d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00268d4:	19 fe                	sbb    esi,edi
c00268d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268de:	89 f2                	mov    edx,esi
c00268e0:	e9 6b ff ff ff       	jmp    c0026850 <__moddi3+0x54>
c00268e5:	8d 76 00             	lea    esi,[esi+0x0]
c00268e8:	b8 20 00 00 00       	mov    eax,0x20
c00268ed:	89 c2                	mov    edx,eax
c00268ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00268f3:	29 da                	sub    edx,ebx
c00268f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00268f9:	88 d9                	mov    cl,bl
c00268fb:	d3 e7                	shl    edi,cl
c00268fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026901:	88 d1                	mov    cl,dl
c0026903:	d3 e8                	shr    eax,cl
c0026905:	09 c7                	or     edi,eax
c0026907:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002690b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002690f:	89 d8                	mov    eax,ebx
c0026911:	88 d9                	mov    cl,bl
c0026913:	d3 e7                	shl    edi,cl
c0026915:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026919:	89 f3                	mov    ebx,esi
c002691b:	88 d1                	mov    cl,dl
c002691d:	d3 eb                	shr    ebx,cl
c002691f:	89 c7                	mov    edi,eax
c0026921:	88 c1                	mov    cl,al
c0026923:	d3 e6                	shl    esi,cl
c0026925:	89 e8                	mov    eax,ebp
c0026927:	88 d1                	mov    cl,dl
c0026929:	d3 e8                	shr    eax,cl
c002692b:	09 f0                	or     eax,esi
c002692d:	89 f9                	mov    ecx,edi
c002692f:	d3 e5                	shl    ebp,cl
c0026931:	89 da                	mov    edx,ebx
c0026933:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026937:	89 d3                	mov    ebx,edx
c0026939:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002693d:	89 c6                	mov    esi,eax
c002693f:	89 d1                	mov    ecx,edx
c0026941:	39 d3                	cmp    ebx,edx
c0026943:	72 27                	jb     c002696c <__moddi3+0x170>
c0026945:	74 21                	je     c0026968 <__moddi3+0x16c>
c0026947:	29 f5                	sub    ebp,esi
c0026949:	19 cb                	sbb    ebx,ecx
c002694b:	89 de                	mov    esi,ebx
c002694d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026951:	d3 e6                	shl    esi,cl
c0026953:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026957:	89 f9                	mov    ecx,edi
c0026959:	d3 ed                	shr    ebp,cl
c002695b:	09 ee                	or     esi,ebp
c002695d:	89 f0                	mov    eax,esi
c002695f:	d3 eb                	shr    ebx,cl
c0026961:	89 da                	mov    edx,ebx
c0026963:	e9 e8 fe ff ff       	jmp    c0026850 <__moddi3+0x54>
c0026968:	39 c5                	cmp    ebp,eax
c002696a:	73 db                	jae    c0026947 <__moddi3+0x14b>
c002696c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026970:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026974:	89 d1                	mov    ecx,edx
c0026976:	89 c6                	mov    esi,eax
c0026978:	eb cd                	jmp    c0026947 <__moddi3+0x14b>
c002697a:	66 90                	xchg   ax,ax

c002697c <__udivdi3>:
c002697c:	55                   	push   ebp
c002697d:	57                   	push   edi
c002697e:	56                   	push   esi
c002697f:	53                   	push   ebx
c0026980:	83 ec 1c             	sub    esp,0x1c
c0026983:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026987:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002698b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002698f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026993:	85 d2                	test   edx,edx
c0026995:	75 41                	jne    c00269d8 <__udivdi3+0x5c>
c0026997:	39 f7                	cmp    edi,esi
c0026999:	76 15                	jbe    c00269b0 <__udivdi3+0x34>
c002699b:	89 e8                	mov    eax,ebp
c002699d:	89 f2                	mov    edx,esi
c002699f:	f7 f7                	div    edi
c00269a1:	31 db                	xor    ebx,ebx
c00269a3:	89 da                	mov    edx,ebx
c00269a5:	83 c4 1c             	add    esp,0x1c
c00269a8:	5b                   	pop    ebx
c00269a9:	5e                   	pop    esi
c00269aa:	5f                   	pop    edi
c00269ab:	5d                   	pop    ebp
c00269ac:	c3                   	ret    
c00269ad:	8d 76 00             	lea    esi,[esi+0x0]
c00269b0:	89 f9                	mov    ecx,edi
c00269b2:	85 ff                	test   edi,edi
c00269b4:	75 0b                	jne    c00269c1 <__udivdi3+0x45>
c00269b6:	b8 01 00 00 00       	mov    eax,0x1
c00269bb:	31 d2                	xor    edx,edx
c00269bd:	f7 f7                	div    edi
c00269bf:	89 c1                	mov    ecx,eax
c00269c1:	31 d2                	xor    edx,edx
c00269c3:	89 f0                	mov    eax,esi
c00269c5:	f7 f1                	div    ecx
c00269c7:	89 c3                	mov    ebx,eax
c00269c9:	89 e8                	mov    eax,ebp
c00269cb:	f7 f1                	div    ecx
c00269cd:	89 da                	mov    edx,ebx
c00269cf:	83 c4 1c             	add    esp,0x1c
c00269d2:	5b                   	pop    ebx
c00269d3:	5e                   	pop    esi
c00269d4:	5f                   	pop    edi
c00269d5:	5d                   	pop    ebp
c00269d6:	c3                   	ret    
c00269d7:	90                   	nop
c00269d8:	39 f2                	cmp    edx,esi
c00269da:	77 1c                	ja     c00269f8 <__udivdi3+0x7c>
c00269dc:	0f bd da             	bsr    ebx,edx
c00269df:	83 f3 1f             	xor    ebx,0x1f
c00269e2:	75 24                	jne    c0026a08 <__udivdi3+0x8c>
c00269e4:	39 f2                	cmp    edx,esi
c00269e6:	72 08                	jb     c00269f0 <__udivdi3+0x74>
c00269e8:	39 ef                	cmp    edi,ebp
c00269ea:	0f 87 84 00 00 00    	ja     c0026a74 <__udivdi3+0xf8>
c00269f0:	b8 01 00 00 00       	mov    eax,0x1
c00269f5:	eb ac                	jmp    c00269a3 <__udivdi3+0x27>
c00269f7:	90                   	nop
c00269f8:	31 db                	xor    ebx,ebx
c00269fa:	31 c0                	xor    eax,eax
c00269fc:	89 da                	mov    edx,ebx
c00269fe:	83 c4 1c             	add    esp,0x1c
c0026a01:	5b                   	pop    ebx
c0026a02:	5e                   	pop    esi
c0026a03:	5f                   	pop    edi
c0026a04:	5d                   	pop    ebp
c0026a05:	c3                   	ret    
c0026a06:	66 90                	xchg   ax,ax
c0026a08:	b8 20 00 00 00       	mov    eax,0x20
c0026a0d:	29 d8                	sub    eax,ebx
c0026a0f:	88 d9                	mov    cl,bl
c0026a11:	d3 e2                	shl    edx,cl
c0026a13:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a17:	89 fa                	mov    edx,edi
c0026a19:	88 c1                	mov    cl,al
c0026a1b:	d3 ea                	shr    edx,cl
c0026a1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a21:	09 d1                	or     ecx,edx
c0026a23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a27:	88 d9                	mov    cl,bl
c0026a29:	d3 e7                	shl    edi,cl
c0026a2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a2f:	89 f7                	mov    edi,esi
c0026a31:	88 c1                	mov    cl,al
c0026a33:	d3 ef                	shr    edi,cl
c0026a35:	88 d9                	mov    cl,bl
c0026a37:	d3 e6                	shl    esi,cl
c0026a39:	89 ea                	mov    edx,ebp
c0026a3b:	88 c1                	mov    cl,al
c0026a3d:	d3 ea                	shr    edx,cl
c0026a3f:	09 d6                	or     esi,edx
c0026a41:	89 f0                	mov    eax,esi
c0026a43:	89 fa                	mov    edx,edi
c0026a45:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a49:	89 d7                	mov    edi,edx
c0026a4b:	89 c6                	mov    esi,eax
c0026a4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a51:	39 d7                	cmp    edi,edx
c0026a53:	72 13                	jb     c0026a68 <__udivdi3+0xec>
c0026a55:	74 09                	je     c0026a60 <__udivdi3+0xe4>
c0026a57:	89 f0                	mov    eax,esi
c0026a59:	31 db                	xor    ebx,ebx
c0026a5b:	e9 43 ff ff ff       	jmp    c00269a3 <__udivdi3+0x27>
c0026a60:	88 d9                	mov    cl,bl
c0026a62:	d3 e5                	shl    ebp,cl
c0026a64:	39 c5                	cmp    ebp,eax
c0026a66:	73 ef                	jae    c0026a57 <__udivdi3+0xdb>
c0026a68:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a6b:	31 db                	xor    ebx,ebx
c0026a6d:	e9 31 ff ff ff       	jmp    c00269a3 <__udivdi3+0x27>
c0026a72:	66 90                	xchg   ax,ax
c0026a74:	31 c0                	xor    eax,eax
c0026a76:	e9 28 ff ff ff       	jmp    c00269a3 <__udivdi3+0x27>
c0026a7b:	90                   	nop

c0026a7c <__umoddi3>:
c0026a7c:	55                   	push   ebp
c0026a7d:	57                   	push   edi
c0026a7e:	56                   	push   esi
c0026a7f:	53                   	push   ebx
c0026a80:	83 ec 1c             	sub    esp,0x1c
c0026a83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026a87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a93:	89 da                	mov    edx,ebx
c0026a95:	85 c0                	test   eax,eax
c0026a97:	75 37                	jne    c0026ad0 <__umoddi3+0x54>
c0026a99:	39 df                	cmp    edi,ebx
c0026a9b:	76 13                	jbe    c0026ab0 <__umoddi3+0x34>
c0026a9d:	89 f0                	mov    eax,esi
c0026a9f:	f7 f7                	div    edi
c0026aa1:	89 d0                	mov    eax,edx
c0026aa3:	31 d2                	xor    edx,edx
c0026aa5:	83 c4 1c             	add    esp,0x1c
c0026aa8:	5b                   	pop    ebx
c0026aa9:	5e                   	pop    esi
c0026aaa:	5f                   	pop    edi
c0026aab:	5d                   	pop    ebp
c0026aac:	c3                   	ret    
c0026aad:	8d 76 00             	lea    esi,[esi+0x0]
c0026ab0:	89 fd                	mov    ebp,edi
c0026ab2:	85 ff                	test   edi,edi
c0026ab4:	75 0b                	jne    c0026ac1 <__umoddi3+0x45>
c0026ab6:	b8 01 00 00 00       	mov    eax,0x1
c0026abb:	31 d2                	xor    edx,edx
c0026abd:	f7 f7                	div    edi
c0026abf:	89 c5                	mov    ebp,eax
c0026ac1:	89 d8                	mov    eax,ebx
c0026ac3:	31 d2                	xor    edx,edx
c0026ac5:	f7 f5                	div    ebp
c0026ac7:	89 f0                	mov    eax,esi
c0026ac9:	f7 f5                	div    ebp
c0026acb:	89 d0                	mov    eax,edx
c0026acd:	eb d4                	jmp    c0026aa3 <__umoddi3+0x27>
c0026acf:	90                   	nop
c0026ad0:	89 f1                	mov    ecx,esi
c0026ad2:	39 d8                	cmp    eax,ebx
c0026ad4:	76 0a                	jbe    c0026ae0 <__umoddi3+0x64>
c0026ad6:	89 f0                	mov    eax,esi
c0026ad8:	83 c4 1c             	add    esp,0x1c
c0026adb:	5b                   	pop    ebx
c0026adc:	5e                   	pop    esi
c0026add:	5f                   	pop    edi
c0026ade:	5d                   	pop    ebp
c0026adf:	c3                   	ret    
c0026ae0:	0f bd e8             	bsr    ebp,eax
c0026ae3:	83 f5 1f             	xor    ebp,0x1f
c0026ae6:	75 1c                	jne    c0026b04 <__umoddi3+0x88>
c0026ae8:	39 d8                	cmp    eax,ebx
c0026aea:	72 04                	jb     c0026af0 <__umoddi3+0x74>
c0026aec:	39 f7                	cmp    edi,esi
c0026aee:	77 08                	ja     c0026af8 <__umoddi3+0x7c>
c0026af0:	89 da                	mov    edx,ebx
c0026af2:	29 fe                	sub    esi,edi
c0026af4:	19 c2                	sbb    edx,eax
c0026af6:	89 f1                	mov    ecx,esi
c0026af8:	89 c8                	mov    eax,ecx
c0026afa:	83 c4 1c             	add    esp,0x1c
c0026afd:	5b                   	pop    ebx
c0026afe:	5e                   	pop    esi
c0026aff:	5f                   	pop    edi
c0026b00:	5d                   	pop    ebp
c0026b01:	c3                   	ret    
c0026b02:	66 90                	xchg   ax,ax
c0026b04:	ba 20 00 00 00       	mov    edx,0x20
c0026b09:	29 ea                	sub    edx,ebp
c0026b0b:	89 e9                	mov    ecx,ebp
c0026b0d:	d3 e0                	shl    eax,cl
c0026b0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b13:	89 f8                	mov    eax,edi
c0026b15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b19:	88 d1                	mov    cl,dl
c0026b1b:	d3 e8                	shr    eax,cl
c0026b1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b21:	09 c1                	or     ecx,eax
c0026b23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b27:	89 e9                	mov    ecx,ebp
c0026b29:	d3 e7                	shl    edi,cl
c0026b2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b2f:	89 d8                	mov    eax,ebx
c0026b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b35:	88 d1                	mov    cl,dl
c0026b37:	d3 e8                	shr    eax,cl
c0026b39:	89 c7                	mov    edi,eax
c0026b3b:	89 e9                	mov    ecx,ebp
c0026b3d:	d3 e3                	shl    ebx,cl
c0026b3f:	89 f0                	mov    eax,esi
c0026b41:	88 d1                	mov    cl,dl
c0026b43:	d3 e8                	shr    eax,cl
c0026b45:	09 d8                	or     eax,ebx
c0026b47:	89 e9                	mov    ecx,ebp
c0026b49:	d3 e6                	shl    esi,cl
c0026b4b:	89 f3                	mov    ebx,esi
c0026b4d:	89 fa                	mov    edx,edi
c0026b4f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b53:	89 d1                	mov    ecx,edx
c0026b55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b59:	89 c6                	mov    esi,eax
c0026b5b:	89 d7                	mov    edi,edx
c0026b5d:	39 d1                	cmp    ecx,edx
c0026b5f:	72 27                	jb     c0026b88 <__umoddi3+0x10c>
c0026b61:	74 21                	je     c0026b84 <__umoddi3+0x108>
c0026b63:	89 ca                	mov    edx,ecx
c0026b65:	29 f3                	sub    ebx,esi
c0026b67:	19 fa                	sbb    edx,edi
c0026b69:	89 d0                	mov    eax,edx
c0026b6b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b6f:	d3 e0                	shl    eax,cl
c0026b71:	89 e9                	mov    ecx,ebp
c0026b73:	d3 eb                	shr    ebx,cl
c0026b75:	09 d8                	or     eax,ebx
c0026b77:	d3 ea                	shr    edx,cl
c0026b79:	83 c4 1c             	add    esp,0x1c
c0026b7c:	5b                   	pop    ebx
c0026b7d:	5e                   	pop    esi
c0026b7e:	5f                   	pop    edi
c0026b7f:	5d                   	pop    ebp
c0026b80:	c3                   	ret    
c0026b81:	8d 76 00             	lea    esi,[esi+0x0]
c0026b84:	39 c3                	cmp    ebx,eax
c0026b86:	73 db                	jae    c0026b63 <__umoddi3+0xe7>
c0026b88:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b8c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b90:	89 d7                	mov    edi,edx
c0026b92:	89 c6                	mov    esi,eax
c0026b94:	eb cd                	jmp    c0026b63 <__umoddi3+0xe7>

c0026b96 <__addsf3>:
c0026b96:	55                   	push   ebp
c0026b97:	89 e5                	mov    ebp,esp
c0026b99:	57                   	push   edi
c0026b9a:	56                   	push   esi
c0026b9b:	53                   	push   ebx
c0026b9c:	83 ec 08             	sub    esp,0x8
c0026b9f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026ba2:	89 fa                	mov    edx,edi
c0026ba4:	89 f8                	mov    eax,edi
c0026ba6:	c1 f8 17             	sar    eax,0x17
c0026ba9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bac:	c1 e2 08             	shl    edx,0x8
c0026baf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026bb5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026bb8:	89 de                	mov    esi,ebx
c0026bba:	c1 fe 17             	sar    esi,0x17
c0026bbd:	c1 e3 08             	shl    ebx,0x8
c0026bc0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026bc6:	31 f0                	xor    eax,esi
c0026bc8:	0f 88 3b 01 00 00    	js     c0026d09 <__addsf3+0x173>
c0026bce:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026bd1:	29 f1                	sub    ecx,esi
c0026bd3:	85 c9                	test   ecx,ecx
c0026bd5:	7e 54                	jle    c0026c2b <__addsf3+0x95>
c0026bd7:	89 f0                	mov    eax,esi
c0026bd9:	84 c0                	test   al,al
c0026bdb:	75 10                	jne    c0026bed <__addsf3+0x57>
c0026bdd:	85 db                	test   ebx,ebx
c0026bdf:	0f 84 aa 02 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026be5:	49                   	dec    ecx
c0026be6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026be9:	74 38                	je     c0026c23 <__addsf3+0x8d>
c0026beb:	eb 13                	jmp    c0026c00 <__addsf3+0x6a>
c0026bed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bf0:	f7 d0                	not    eax
c0026bf2:	84 c0                	test   al,al
c0026bf4:	0f 84 95 02 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026bfa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c00:	83 f9 1f             	cmp    ecx,0x1f
c0026c03:	0f 8f 86 02 00 00    	jg     c0026e8f <__addsf3+0x2f9>
c0026c09:	89 de                	mov    esi,ebx
c0026c0b:	d3 ee                	shr    esi,cl
c0026c0d:	b8 20 00 00 00       	mov    eax,0x20
c0026c12:	29 c8                	sub    eax,ecx
c0026c14:	89 c1                	mov    ecx,eax
c0026c16:	d3 e3                	shl    ebx,cl
c0026c18:	31 c0                	xor    eax,eax
c0026c1a:	85 db                	test   ebx,ebx
c0026c1c:	0f 95 c0             	setne  al
c0026c1f:	09 f0                	or     eax,esi
c0026c21:	01 d0                	add    eax,edx
c0026c23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c26:	e9 b6 00 00 00       	jmp    c0026ce1 <__addsf3+0x14b>
c0026c2b:	74 5c                	je     c0026c89 <__addsf3+0xf3>
c0026c2d:	89 f1                	mov    ecx,esi
c0026c2f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c35:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c39:	75 14                	jne    c0026c4f <__addsf3+0xb9>
c0026c3b:	85 d2                	test   edx,edx
c0026c3d:	0f 84 4c 02 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026c43:	49                   	dec    ecx
c0026c44:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c47:	0f 84 94 00 00 00    	je     c0026ce1 <__addsf3+0x14b>
c0026c4d:	eb 12                	jmp    c0026c61 <__addsf3+0xcb>
c0026c4f:	89 f0                	mov    eax,esi
c0026c51:	f7 d0                	not    eax
c0026c53:	84 c0                	test   al,al
c0026c55:	0f 84 34 02 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026c5b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c64:	83 f9 1f             	cmp    ecx,0x1f
c0026c67:	0f 8f 22 02 00 00    	jg     c0026e8f <__addsf3+0x2f9>
c0026c6d:	89 d7                	mov    edi,edx
c0026c6f:	d3 ef                	shr    edi,cl
c0026c71:	b8 20 00 00 00       	mov    eax,0x20
c0026c76:	29 c8                	sub    eax,ecx
c0026c78:	89 c1                	mov    ecx,eax
c0026c7a:	d3 e2                	shl    edx,cl
c0026c7c:	31 c0                	xor    eax,eax
c0026c7e:	85 d2                	test   edx,edx
c0026c80:	0f 95 c0             	setne  al
c0026c83:	09 f8                	or     eax,edi
c0026c85:	01 d8                	add    eax,ebx
c0026c87:	eb 58                	jmp    c0026ce1 <__addsf3+0x14b>
c0026c89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c8c:	8d 70 01             	lea    esi,[eax+0x1]
c0026c8f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c95:	75 32                	jne    c0026cc9 <__addsf3+0x133>
c0026c97:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c9b:	75 1f                	jne    c0026cbc <__addsf3+0x126>
c0026c9d:	85 d2                	test   edx,edx
c0026c9f:	0f 84 e0 01 00 00    	je     c0026e85 <__addsf3+0x2ef>
c0026ca5:	85 db                	test   ebx,ebx
c0026ca7:	0f 84 e2 01 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026cad:	89 d0                	mov    eax,edx
c0026caf:	01 d8                	add    eax,ebx
c0026cb1:	0f 89 a9 01 00 00    	jns    c0026e60 <__addsf3+0x2ca>
c0026cb7:	e9 9d 01 00 00       	jmp    c0026e59 <__addsf3+0x2c3>
c0026cbc:	85 d2                	test   edx,edx
c0026cbe:	0f 85 cb 01 00 00    	jne    c0026e8f <__addsf3+0x2f9>
c0026cc4:	e9 bc 01 00 00       	jmp    c0026e85 <__addsf3+0x2ef>
c0026cc9:	31 c0                	xor    eax,eax
c0026ccb:	89 f1                	mov    ecx,esi
c0026ccd:	f7 d1                	not    ecx
c0026ccf:	84 c9                	test   cl,cl
c0026cd1:	0f 84 90 01 00 00    	je     c0026e67 <__addsf3+0x2d1>
c0026cd7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cda:	d1 e8                	shr    eax,1
c0026cdc:	e9 86 01 00 00       	jmp    c0026e67 <__addsf3+0x2d1>
c0026ce1:	85 c0                	test   eax,eax
c0026ce3:	0f 89 7e 01 00 00    	jns    c0026e67 <__addsf3+0x2d1>
c0026ce9:	46                   	inc    esi
c0026cea:	89 f2                	mov    edx,esi
c0026cec:	f7 d2                	not    edx
c0026cee:	84 d2                	test   dl,dl
c0026cf0:	0f 84 6f 01 00 00    	je     c0026e65 <__addsf3+0x2cf>
c0026cf6:	89 c2                	mov    edx,eax
c0026cf8:	83 e2 01             	and    edx,0x1
c0026cfb:	d1 e8                	shr    eax,1
c0026cfd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d02:	09 d0                	or     eax,edx
c0026d04:	e9 5e 01 00 00       	jmp    c0026e67 <__addsf3+0x2d1>
c0026d09:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d10:	89 f0                	mov    eax,esi
c0026d12:	0f b6 c0             	movzx  eax,al
c0026d15:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d18:	29 c1                	sub    ecx,eax
c0026d1a:	85 c9                	test   ecx,ecx
c0026d1c:	7e 55                	jle    c0026d73 <__addsf3+0x1dd>
c0026d1e:	85 c0                	test   eax,eax
c0026d20:	75 11                	jne    c0026d33 <__addsf3+0x19d>
c0026d22:	85 db                	test   ebx,ebx
c0026d24:	0f 84 65 01 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026d2a:	49                   	dec    ecx
c0026d2b:	75 19                	jne    c0026d46 <__addsf3+0x1b0>
c0026d2d:	89 d0                	mov    eax,edx
c0026d2f:	29 d8                	sub    eax,ebx
c0026d31:	eb 38                	jmp    c0026d6b <__addsf3+0x1d5>
c0026d33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d36:	f7 d0                	not    eax
c0026d38:	84 c0                	test   al,al
c0026d3a:	0f 84 4f 01 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026d40:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d46:	83 f9 1f             	cmp    ecx,0x1f
c0026d49:	0f 8f 40 01 00 00    	jg     c0026e8f <__addsf3+0x2f9>
c0026d4f:	89 de                	mov    esi,ebx
c0026d51:	d3 ee                	shr    esi,cl
c0026d53:	b8 20 00 00 00       	mov    eax,0x20
c0026d58:	29 c8                	sub    eax,ecx
c0026d5a:	89 c1                	mov    ecx,eax
c0026d5c:	d3 e3                	shl    ebx,cl
c0026d5e:	31 c0                	xor    eax,eax
c0026d60:	85 db                	test   ebx,ebx
c0026d62:	0f 95 c0             	setne  al
c0026d65:	09 f0                	or     eax,esi
c0026d67:	29 c2                	sub    edx,eax
c0026d69:	89 d0                	mov    eax,edx
c0026d6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d6e:	e9 af 00 00 00       	jmp    c0026e22 <__addsf3+0x28c>
c0026d73:	74 5c                	je     c0026dd1 <__addsf3+0x23b>
c0026d75:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026d78:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d7b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d7f:	75 14                	jne    c0026d95 <__addsf3+0x1ff>
c0026d81:	85 d2                	test   edx,edx
c0026d83:	0f 84 06 01 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026d89:	48                   	dec    eax
c0026d8a:	75 1b                	jne    c0026da7 <__addsf3+0x211>
c0026d8c:	89 d8                	mov    eax,ebx
c0026d8e:	29 d0                	sub    eax,edx
c0026d90:	e9 8d 00 00 00       	jmp    c0026e22 <__addsf3+0x28c>
c0026d95:	89 f1                	mov    ecx,esi
c0026d97:	f7 d1                	not    ecx
c0026d99:	84 c9                	test   cl,cl
c0026d9b:	0f 84 ee 00 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026da1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026da7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026daa:	83 f8 1f             	cmp    eax,0x1f
c0026dad:	0f 8f dc 00 00 00    	jg     c0026e8f <__addsf3+0x2f9>
c0026db3:	89 d7                	mov    edi,edx
c0026db5:	88 c1                	mov    cl,al
c0026db7:	d3 ef                	shr    edi,cl
c0026db9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dbe:	29 c1                	sub    ecx,eax
c0026dc0:	d3 e2                	shl    edx,cl
c0026dc2:	31 c0                	xor    eax,eax
c0026dc4:	85 d2                	test   edx,edx
c0026dc6:	0f 95 c0             	setne  al
c0026dc9:	09 f8                	or     eax,edi
c0026dcb:	29 c3                	sub    ebx,eax
c0026dcd:	89 d8                	mov    eax,ebx
c0026dcf:	eb 51                	jmp    c0026e22 <__addsf3+0x28c>
c0026dd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dd4:	40                   	inc    eax
c0026dd5:	a8 fe                	test   al,0xfe
c0026dd7:	75 3d                	jne    c0026e16 <__addsf3+0x280>
c0026dd9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ddd:	0f 85 a7 00 00 00    	jne    c0026e8a <__addsf3+0x2f4>
c0026de3:	85 d2                	test   edx,edx
c0026de5:	75 12                	jne    c0026df9 <__addsf3+0x263>
c0026de7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dea:	85 db                	test   ebx,ebx
c0026dec:	0f 85 9d 00 00 00    	jne    c0026e8f <__addsf3+0x2f9>
c0026df2:	31 ff                	xor    edi,edi
c0026df4:	e9 96 00 00 00       	jmp    c0026e8f <__addsf3+0x2f9>
c0026df9:	85 db                	test   ebx,ebx
c0026dfb:	0f 84 8e 00 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026e01:	89 d0                	mov    eax,edx
c0026e03:	29 d8                	sub    eax,ebx
c0026e05:	79 06                	jns    c0026e0d <__addsf3+0x277>
c0026e07:	89 d8                	mov    eax,ebx
c0026e09:	29 d0                	sub    eax,edx
c0026e0b:	eb 5a                	jmp    c0026e67 <__addsf3+0x2d1>
c0026e0d:	bf 00 00 00 00       	mov    edi,0x0
c0026e12:	74 7b                	je     c0026e8f <__addsf3+0x2f9>
c0026e14:	eb 4a                	jmp    c0026e60 <__addsf3+0x2ca>
c0026e16:	89 d0                	mov    eax,edx
c0026e18:	29 d8                	sub    eax,ebx
c0026e1a:	79 12                	jns    c0026e2e <__addsf3+0x298>
c0026e1c:	89 d8                	mov    eax,ebx
c0026e1e:	29 d0                	sub    eax,edx
c0026e20:	eb 09                	jmp    c0026e2b <__addsf3+0x295>
c0026e22:	85 c0                	test   eax,eax
c0026e24:	79 41                	jns    c0026e67 <__addsf3+0x2d1>
c0026e26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e2b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e2e:	31 f6                	xor    esi,esi
c0026e30:	85 c0                	test   eax,eax
c0026e32:	74 33                	je     c0026e67 <__addsf3+0x2d1>
c0026e34:	0f bd c8             	bsr    ecx,eax
c0026e37:	83 f1 1f             	xor    ecx,0x1f
c0026e3a:	d3 e0                	shl    eax,cl
c0026e3c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e40:	39 ca                	cmp    edx,ecx
c0026e42:	7f 10                	jg     c0026e54 <__addsf3+0x2be>
c0026e44:	29 d1                	sub    ecx,edx
c0026e46:	41                   	inc    ecx
c0026e47:	d3 e8                	shr    eax,cl
c0026e49:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e4c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e52:	eb 13                	jmp    c0026e67 <__addsf3+0x2d1>
c0026e54:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e57:	29 ce                	sub    esi,ecx
c0026e59:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e5e:	eb 07                	jmp    c0026e67 <__addsf3+0x2d1>
c0026e60:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e63:	eb 02                	jmp    c0026e67 <__addsf3+0x2d1>
c0026e65:	31 c0                	xor    eax,eax
c0026e67:	89 c2                	mov    edx,eax
c0026e69:	c1 ea 08             	shr    edx,0x8
c0026e6c:	a8 7f                	test   al,0x7f
c0026e6e:	0f 95 c1             	setne  cl
c0026e71:	09 d1                	or     ecx,edx
c0026e73:	83 e1 01             	and    ecx,0x1
c0026e76:	c1 e8 07             	shr    eax,0x7
c0026e79:	21 c8                	and    eax,ecx
c0026e7b:	c1 e6 17             	shl    esi,0x17
c0026e7e:	09 d6                	or     esi,edx
c0026e80:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026e83:	eb 0a                	jmp    c0026e8f <__addsf3+0x2f9>
c0026e85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e88:	eb 05                	jmp    c0026e8f <__addsf3+0x2f9>
c0026e8a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e8f:	89 f8                	mov    eax,edi
c0026e91:	5a                   	pop    edx
c0026e92:	59                   	pop    ecx
c0026e93:	5b                   	pop    ebx
c0026e94:	5e                   	pop    esi
c0026e95:	5f                   	pop    edi
c0026e96:	5d                   	pop    ebp
c0026e97:	c3                   	ret    

c0026e98 <__subsf3>:
c0026e98:	55                   	push   ebp
c0026e99:	89 e5                	mov    ebp,esp
c0026e9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e9e:	05 00 00 00 80       	add    eax,0x80000000
c0026ea3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ea6:	5d                   	pop    ebp
c0026ea7:	e9 ea fc ff ff       	jmp    c0026b96 <__addsf3>

c0026eac <__negsf2>:
c0026eac:	55                   	push   ebp
c0026ead:	89 e5                	mov    ebp,esp
c0026eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026eb2:	05 00 00 00 80       	add    eax,0x80000000
c0026eb7:	5d                   	pop    ebp
c0026eb8:	c3                   	ret    

c0026eb9 <__mulsf3>:
c0026eb9:	55                   	push   ebp
c0026eba:	89 e5                	mov    ebp,esp
c0026ebc:	57                   	push   edi
c0026ebd:	56                   	push   esi
c0026ebe:	53                   	push   ebx
c0026ebf:	83 ec 1c             	sub    esp,0x1c
c0026ec2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026ec5:	89 f0                	mov    eax,esi
c0026ec7:	89 f1                	mov    ecx,esi
c0026ec9:	c1 f9 17             	sar    ecx,0x17
c0026ecc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026ecf:	c1 e0 08             	shl    eax,0x8
c0026ed2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ed7:	89 c1                	mov    ecx,eax
c0026ed9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026edc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026edf:	89 c7                	mov    edi,eax
c0026ee1:	c1 ff 17             	sar    edi,0x17
c0026ee4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ee8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026eeb:	89 f8                	mov    eax,edi
c0026eed:	0f b6 c0             	movzx  eax,al
c0026ef0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026ef3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026ef7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026efa:	42                   	inc    edx
c0026efb:	80 e2 fe             	and    dl,0xfe
c0026efe:	75 7b                	jne    c0026f7b <__mulsf3+0xc2>
c0026f00:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f04:	74 54                	je     c0026f5a <__mulsf3+0xa1>
c0026f06:	85 c9                	test   ecx,ecx
c0026f08:	0f 85 64 01 00 00    	jne    c0027072 <__mulsf3+0x1b9>
c0026f0e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f11:	80 e2 fe             	and    dl,0xfe
c0026f14:	75 1f                	jne    c0026f35 <__mulsf3+0x7c>
c0026f16:	85 c0                	test   eax,eax
c0026f18:	b8 00 00 00 00       	mov    eax,0x0
c0026f1d:	74 29                	je     c0026f48 <__mulsf3+0x8f>
c0026f1f:	53                   	push   ebx
c0026f20:	53                   	push   ebx
c0026f21:	50                   	push   eax
c0026f22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f25:	e8 96 05 00 00       	call   c00274c0 <__nesf2>
c0026f2a:	83 c4 10             	add    esp,0x10
c0026f2d:	85 c0                	test   eax,eax
c0026f2f:	0f 85 3a 01 00 00    	jne    c002706f <__mulsf3+0x1b6>
c0026f35:	85 ff                	test   edi,edi
c0026f37:	0f 89 35 01 00 00    	jns    c0027072 <__mulsf3+0x1b9>
c0026f3d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f43:	e9 2a 01 00 00       	jmp    c0027072 <__mulsf3+0x1b9>
c0026f48:	51                   	push   ecx
c0026f49:	51                   	push   ecx
c0026f4a:	50                   	push   eax
c0026f4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f4e:	e8 6d 05 00 00       	call   c00274c0 <__nesf2>
c0026f53:	83 c4 10             	add    esp,0x10
c0026f56:	85 c0                	test   eax,eax
c0026f58:	eb 15                	jmp    c0026f6f <__mulsf3+0xb6>
c0026f5a:	85 c9                	test   ecx,ecx
c0026f5c:	74 0b                	je     c0026f69 <__mulsf3+0xb0>
c0026f5e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f61:	01 c9                	add    ecx,ecx
c0026f63:	78 16                	js     c0026f7b <__mulsf3+0xc2>
c0026f65:	89 d3                	mov    ebx,edx
c0026f67:	eb f5                	jmp    c0026f5e <__mulsf3+0xa5>
c0026f69:	89 f8                	mov    eax,edi
c0026f6b:	f7 d0                	not    eax
c0026f6d:	84 c0                	test   al,al
c0026f6f:	75 c4                	jne    c0026f35 <__mulsf3+0x7c>
c0026f71:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f76:	e9 f7 00 00 00       	jmp    c0027072 <__mulsf3+0x1b9>
c0026f7b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026f7e:	c1 e6 08             	shl    esi,0x8
c0026f81:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026f87:	8d 57 01             	lea    edx,[edi+0x1]
c0026f8a:	80 e2 fe             	and    dl,0xfe
c0026f8d:	75 63                	jne    c0026ff2 <__mulsf3+0x139>
c0026f8f:	85 c0                	test   eax,eax
c0026f91:	74 2f                	je     c0026fc2 <__mulsf3+0x109>
c0026f93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f97:	0f 89 d2 00 00 00    	jns    c002706f <__mulsf3+0x1b6>
c0026f9d:	52                   	push   edx
c0026f9e:	52                   	push   edx
c0026f9f:	6a 00                	push   0x0
c0026fa1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fa4:	e8 dc 04 00 00       	call   c0027485 <__eqsf2>
c0026fa9:	83 c4 10             	add    esp,0x10
c0026fac:	85 c0                	test   eax,eax
c0026fae:	0f 85 bb 00 00 00    	jne    c002706f <__mulsf3+0x1b6>
c0026fb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fb7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026fbd:	e9 b0 00 00 00       	jmp    c0027072 <__mulsf3+0x1b9>
c0026fc2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026fc5:	50                   	push   eax
c0026fc6:	50                   	push   eax
c0026fc7:	6a 00                	push   0x0
c0026fc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fcc:	e8 b4 04 00 00       	call   c0027485 <__eqsf2>
c0026fd1:	83 c4 10             	add    esp,0x10
c0026fd4:	85 c0                	test   eax,eax
c0026fd6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fd9:	75 0c                	jne    c0026fe7 <__mulsf3+0x12e>
c0026fdb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fdf:	0f 89 8a 00 00 00    	jns    c002706f <__mulsf3+0x1b6>
c0026fe5:	eb cd                	jmp    c0026fb4 <__mulsf3+0xfb>
c0026fe7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026fea:	01 f6                	add    esi,esi
c0026fec:	78 04                	js     c0026ff2 <__mulsf3+0x139>
c0026fee:	89 c3                	mov    ebx,eax
c0026ff0:	eb f5                	jmp    c0026fe7 <__mulsf3+0x12e>
c0026ff2:	89 c8                	mov    eax,ecx
c0026ff4:	0d 00 00 00 80       	or     eax,0x80000000
c0026ff9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026fff:	f7 e6                	mul    esi
c0027001:	85 c0                	test   eax,eax
c0027003:	0f 95 c0             	setne  al
c0027006:	0f b6 c0             	movzx  eax,al
c0027009:	09 c2                	or     edx,eax
c002700b:	78 03                	js     c0027010 <__mulsf3+0x157>
c002700d:	01 d2                	add    edx,edx
c002700f:	4b                   	dec    ebx
c0027010:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027016:	7f 22                	jg     c002703a <__mulsf3+0x181>
c0027018:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002701e:	85 db                	test   ebx,ebx
c0027020:	7f 23                	jg     c0027045 <__mulsf3+0x18c>
c0027022:	83 fb e9             	cmp    ebx,0xffffffe9
c0027025:	7c 1a                	jl     c0027041 <__mulsf3+0x188>
c0027027:	81 ca 00 00 00 80    	or     edx,0x80000000
c002702d:	b9 01 00 00 00       	mov    ecx,0x1
c0027032:	29 d9                	sub    ecx,ebx
c0027034:	d3 ea                	shr    edx,cl
c0027036:	31 db                	xor    ebx,ebx
c0027038:	eb 0b                	jmp    c0027045 <__mulsf3+0x18c>
c002703a:	bb ff 00 00 00       	mov    ebx,0xff
c002703f:	eb 02                	jmp    c0027043 <__mulsf3+0x18a>
c0027041:	31 db                	xor    ebx,ebx
c0027043:	31 d2                	xor    edx,edx
c0027045:	89 d0                	mov    eax,edx
c0027047:	c1 e8 08             	shr    eax,0x8
c002704a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002704d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027053:	09 fb                	or     ebx,edi
c0027055:	c1 e3 17             	shl    ebx,0x17
c0027058:	09 c3                	or     ebx,eax
c002705a:	f6 c2 7f             	test   dl,0x7f
c002705d:	0f 95 c1             	setne  cl
c0027060:	09 c8                	or     eax,ecx
c0027062:	83 e0 01             	and    eax,0x1
c0027065:	c1 ea 07             	shr    edx,0x7
c0027068:	21 c2                	and    edx,eax
c002706a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002706d:	eb 03                	jmp    c0027072 <__mulsf3+0x1b9>
c002706f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027072:	89 f0                	mov    eax,esi
c0027074:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027077:	5b                   	pop    ebx
c0027078:	5e                   	pop    esi
c0027079:	5f                   	pop    edi
c002707a:	5d                   	pop    ebp
c002707b:	c3                   	ret    

c002707c <__divsf3>:
c002707c:	55                   	push   ebp
c002707d:	89 e5                	mov    ebp,esp
c002707f:	57                   	push   edi
c0027080:	56                   	push   esi
c0027081:	53                   	push   ebx
c0027082:	83 ec 1c             	sub    esp,0x1c
c0027085:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027088:	89 d8                	mov    eax,ebx
c002708a:	89 d9                	mov    ecx,ebx
c002708c:	c1 f9 17             	sar    ecx,0x17
c002708f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027092:	c1 e0 08             	shl    eax,0x8
c0027095:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002709a:	89 c1                	mov    ecx,eax
c002709c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002709f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270a2:	89 c7                	mov    edi,eax
c00270a4:	c1 ff 17             	sar    edi,0x17
c00270a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270ae:	89 f8                	mov    eax,edi
c00270b0:	0f b6 c0             	movzx  eax,al
c00270b3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270b6:	29 c6                	sub    esi,eax
c00270b8:	83 c6 7f             	add    esi,0x7f
c00270bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270be:	42                   	inc    edx
c00270bf:	80 e2 fe             	and    dl,0xfe
c00270c2:	0f 85 9c 00 00 00    	jne    c0027164 <__divsf3+0xe8>
c00270c8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270cc:	74 33                	je     c0027101 <__divsf3+0x85>
c00270ce:	85 c9                	test   ecx,ecx
c00270d0:	0f 85 c7 01 00 00    	jne    c002729d <__divsf3+0x221>
c00270d6:	8d 57 01             	lea    edx,[edi+0x1]
c00270d9:	80 e2 fe             	and    dl,0xfe
c00270dc:	75 2f                	jne    c002710d <__divsf3+0x91>
c00270de:	85 c0                	test   eax,eax
c00270e0:	74 2b                	je     c002710d <__divsf3+0x91>
c00270e2:	51                   	push   ecx
c00270e3:	51                   	push   ecx
c00270e4:	6a 00                	push   0x0
c00270e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270e9:	e8 d2 03 00 00       	call   c00274c0 <__nesf2>
c00270ee:	83 c4 10             	add    esp,0x10
c00270f1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270f4:	85 c0                	test   eax,eax
c00270f6:	0f 85 a1 01 00 00    	jne    c002729d <__divsf3+0x221>
c00270fc:	e9 92 01 00 00       	jmp    c0027293 <__divsf3+0x217>
c0027101:	85 c9                	test   ecx,ecx
c0027103:	75 1b                	jne    c0027120 <__divsf3+0xa4>
c0027105:	8d 57 01             	lea    edx,[edi+0x1]
c0027108:	80 e2 fe             	and    dl,0xfe
c002710b:	74 1e                	je     c002712b <__divsf3+0xaf>
c002710d:	85 ff                	test   edi,edi
c002710f:	0f 89 88 01 00 00    	jns    c002729d <__divsf3+0x221>
c0027115:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002711b:	e9 7d 01 00 00       	jmp    c002729d <__divsf3+0x221>
c0027120:	8d 56 ff             	lea    edx,[esi-0x1]
c0027123:	01 c9                	add    ecx,ecx
c0027125:	78 3d                	js     c0027164 <__divsf3+0xe8>
c0027127:	89 d6                	mov    esi,edx
c0027129:	eb f5                	jmp    c0027120 <__divsf3+0xa4>
c002712b:	85 c0                	test   eax,eax
c002712d:	b8 00 00 00 00       	mov    eax,0x0
c0027132:	74 18                	je     c002714c <__divsf3+0xd0>
c0027134:	52                   	push   edx
c0027135:	52                   	push   edx
c0027136:	50                   	push   eax
c0027137:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002713a:	e8 81 03 00 00       	call   c00274c0 <__nesf2>
c002713f:	83 c4 10             	add    esp,0x10
c0027142:	85 c0                	test   eax,eax
c0027144:	0f 85 50 01 00 00    	jne    c002729a <__divsf3+0x21e>
c002714a:	eb c1                	jmp    c002710d <__divsf3+0x91>
c002714c:	56                   	push   esi
c002714d:	56                   	push   esi
c002714e:	50                   	push   eax
c002714f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027152:	e8 69 03 00 00       	call   c00274c0 <__nesf2>
c0027157:	83 c4 10             	add    esp,0x10
c002715a:	85 c0                	test   eax,eax
c002715c:	0f 84 31 01 00 00    	je     c0027293 <__divsf3+0x217>
c0027162:	eb a9                	jmp    c002710d <__divsf3+0x91>
c0027164:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027167:	c1 e3 08             	shl    ebx,0x8
c002716a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027170:	8d 57 01             	lea    edx,[edi+0x1]
c0027173:	80 e2 fe             	and    dl,0xfe
c0027176:	75 71                	jne    c00271e9 <__divsf3+0x16d>
c0027178:	85 c0                	test   eax,eax
c002717a:	ba 00 00 00 00       	mov    edx,0x0
c002717f:	74 2f                	je     c00271b0 <__divsf3+0x134>
c0027181:	51                   	push   ecx
c0027182:	51                   	push   ecx
c0027183:	52                   	push   edx
c0027184:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027187:	e8 f9 02 00 00       	call   c0027485 <__eqsf2>
c002718c:	83 c4 10             	add    esp,0x10
c002718f:	85 c0                	test   eax,eax
c0027191:	0f 85 03 01 00 00    	jne    c002729a <__divsf3+0x21e>
c0027197:	31 d2                	xor    edx,edx
c0027199:	89 d3                	mov    ebx,edx
c002719b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002719e:	31 f8                	xor    eax,edi
c00271a0:	0f 89 f7 00 00 00    	jns    c002729d <__divsf3+0x221>
c00271a6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271ab:	e9 ed 00 00 00       	jmp    c002729d <__divsf3+0x221>
c00271b0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271b3:	50                   	push   eax
c00271b4:	50                   	push   eax
c00271b5:	52                   	push   edx
c00271b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271b9:	e8 c7 02 00 00       	call   c0027485 <__eqsf2>
c00271be:	83 c4 10             	add    esp,0x10
c00271c1:	85 c0                	test   eax,eax
c00271c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271c6:	75 16                	jne    c00271de <__divsf3+0x162>
c00271c8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271cb:	31 fb                	xor    ebx,edi
c00271cd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00271d3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00271d9:	e9 bf 00 00 00       	jmp    c002729d <__divsf3+0x221>
c00271de:	8d 46 01             	lea    eax,[esi+0x1]
c00271e1:	01 db                	add    ebx,ebx
c00271e3:	78 04                	js     c00271e9 <__divsf3+0x16d>
c00271e5:	89 c6                	mov    esi,eax
c00271e7:	eb f5                	jmp    c00271de <__divsf3+0x162>
c00271e9:	89 c8                	mov    eax,ecx
c00271eb:	0d 00 00 00 80       	or     eax,0x80000000
c00271f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271f6:	31 d2                	xor    edx,edx
c00271f8:	39 d8                	cmp    eax,ebx
c00271fa:	72 07                	jb     c0027203 <__divsf3+0x187>
c00271fc:	29 d8                	sub    eax,ebx
c00271fe:	ba 01 00 00 00       	mov    edx,0x1
c0027203:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002720a:	01 d2                	add    edx,edx
c002720c:	89 c1                	mov    ecx,eax
c002720e:	01 c0                	add    eax,eax
c0027210:	85 c9                	test   ecx,ecx
c0027212:	78 04                	js     c0027218 <__divsf3+0x19c>
c0027214:	39 c3                	cmp    ebx,eax
c0027216:	77 05                	ja     c002721d <__divsf3+0x1a1>
c0027218:	29 d8                	sub    eax,ebx
c002721a:	83 ca 01             	or     edx,0x1
c002721d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027220:	75 e8                	jne    c002720a <__divsf3+0x18e>
c0027222:	85 c0                	test   eax,eax
c0027224:	0f 95 c0             	setne  al
c0027227:	0f b6 c0             	movzx  eax,al
c002722a:	c1 e2 06             	shl    edx,0x6
c002722d:	09 c2                	or     edx,eax
c002722f:	78 03                	js     c0027234 <__divsf3+0x1b8>
c0027231:	01 d2                	add    edx,edx
c0027233:	4e                   	dec    esi
c0027234:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002723a:	7f 22                	jg     c002725e <__divsf3+0x1e2>
c002723c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027242:	85 f6                	test   esi,esi
c0027244:	7f 23                	jg     c0027269 <__divsf3+0x1ed>
c0027246:	83 fe e9             	cmp    esi,0xffffffe9
c0027249:	7c 1a                	jl     c0027265 <__divsf3+0x1e9>
c002724b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027251:	b9 01 00 00 00       	mov    ecx,0x1
c0027256:	29 f1                	sub    ecx,esi
c0027258:	d3 ea                	shr    edx,cl
c002725a:	31 f6                	xor    esi,esi
c002725c:	eb 0b                	jmp    c0027269 <__divsf3+0x1ed>
c002725e:	be ff 00 00 00       	mov    esi,0xff
c0027263:	eb 02                	jmp    c0027267 <__divsf3+0x1eb>
c0027265:	31 f6                	xor    esi,esi
c0027267:	31 d2                	xor    edx,edx
c0027269:	89 d0                	mov    eax,edx
c002726b:	c1 e8 08             	shr    eax,0x8
c002726e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027271:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027277:	09 fe                	or     esi,edi
c0027279:	c1 e6 17             	shl    esi,0x17
c002727c:	09 c6                	or     esi,eax
c002727e:	f6 c2 7f             	test   dl,0x7f
c0027281:	0f 95 c1             	setne  cl
c0027284:	09 c8                	or     eax,ecx
c0027286:	83 e0 01             	and    eax,0x1
c0027289:	c1 ea 07             	shr    edx,0x7
c002728c:	21 c2                	and    edx,eax
c002728e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027291:	eb 0a                	jmp    c002729d <__divsf3+0x221>
c0027293:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027298:	eb 03                	jmp    c002729d <__divsf3+0x221>
c002729a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002729d:	89 d8                	mov    eax,ebx
c002729f:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272a2:	5b                   	pop    ebx
c00272a3:	5e                   	pop    esi
c00272a4:	5f                   	pop    edi
c00272a5:	5d                   	pop    ebp
c00272a6:	c3                   	ret    

c00272a7 <__floatsisf>:
c00272a7:	55                   	push   ebp
c00272a8:	89 e5                	mov    ebp,esp
c00272aa:	53                   	push   ebx
c00272ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272ae:	85 d2                	test   edx,edx
c00272b0:	7e 2b                	jle    c00272dd <__floatsisf+0x36>
c00272b2:	0f bd ca             	bsr    ecx,edx
c00272b5:	83 f1 1f             	xor    ecx,0x1f
c00272b8:	d3 e2                	shl    edx,cl
c00272ba:	89 d0                	mov    eax,edx
c00272bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272c1:	89 c3                	mov    ebx,eax
c00272c3:	c1 eb 08             	shr    ebx,0x8
c00272c6:	80 e2 7f             	and    dl,0x7f
c00272c9:	0f 95 c2             	setne  dl
c00272cc:	09 da                	or     edx,ebx
c00272ce:	83 e2 01             	and    edx,0x1
c00272d1:	c1 e8 07             	shr    eax,0x7
c00272d4:	21 c2                	and    edx,eax
c00272d6:	b8 9e 00 00 00       	mov    eax,0x9e
c00272db:	eb 32                	jmp    c002730f <__floatsisf+0x68>
c00272dd:	b8 00 00 00 00       	mov    eax,0x0
c00272e2:	74 34                	je     c0027318 <__floatsisf+0x71>
c00272e4:	f7 da                	neg    edx
c00272e6:	0f bd ca             	bsr    ecx,edx
c00272e9:	83 f1 1f             	xor    ecx,0x1f
c00272ec:	d3 e2                	shl    edx,cl
c00272ee:	89 d0                	mov    eax,edx
c00272f0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272f5:	89 c3                	mov    ebx,eax
c00272f7:	c1 eb 08             	shr    ebx,0x8
c00272fa:	80 e2 7f             	and    dl,0x7f
c00272fd:	0f 95 c2             	setne  dl
c0027300:	09 da                	or     edx,ebx
c0027302:	83 e2 01             	and    edx,0x1
c0027305:	c1 e8 07             	shr    eax,0x7
c0027308:	21 c2                	and    edx,eax
c002730a:	b8 9e 01 00 00       	mov    eax,0x19e
c002730f:	29 c8                	sub    eax,ecx
c0027311:	c1 e0 17             	shl    eax,0x17
c0027314:	09 d8                	or     eax,ebx
c0027316:	01 d0                	add    eax,edx
c0027318:	5b                   	pop    ebx
c0027319:	5d                   	pop    ebp
c002731a:	c3                   	ret    

c002731b <__floatunsisf>:
c002731b:	55                   	push   ebp
c002731c:	89 e5                	mov    ebp,esp
c002731e:	53                   	push   ebx
c002731f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027322:	31 c0                	xor    eax,eax
c0027324:	85 d2                	test   edx,edx
c0027326:	74 32                	je     c002735a <__floatunsisf+0x3f>
c0027328:	0f bd ca             	bsr    ecx,edx
c002732b:	83 f1 1f             	xor    ecx,0x1f
c002732e:	d3 e2                	shl    edx,cl
c0027330:	89 d0                	mov    eax,edx
c0027332:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027337:	89 c3                	mov    ebx,eax
c0027339:	c1 eb 08             	shr    ebx,0x8
c002733c:	80 e2 7f             	and    dl,0x7f
c002733f:	0f 95 c2             	setne  dl
c0027342:	09 da                	or     edx,ebx
c0027344:	83 e2 01             	and    edx,0x1
c0027347:	c1 e8 07             	shr    eax,0x7
c002734a:	21 c2                	and    edx,eax
c002734c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027351:	29 c8                	sub    eax,ecx
c0027353:	c1 e0 17             	shl    eax,0x17
c0027356:	09 d8                	or     eax,ebx
c0027358:	01 d0                	add    eax,edx
c002735a:	5b                   	pop    ebx
c002735b:	5d                   	pop    ebp
c002735c:	c3                   	ret    

c002735d <__fixsfsi>:
c002735d:	55                   	push   ebp
c002735e:	89 e5                	mov    ebp,esp
c0027360:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027363:	89 d1                	mov    ecx,edx
c0027365:	c1 e1 08             	shl    ecx,0x8
c0027368:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002736e:	c1 fa 17             	sar    edx,0x17
c0027371:	78 1c                	js     c002738f <__fixsfsi+0x32>
c0027373:	83 ea 7f             	sub    edx,0x7f
c0027376:	31 c0                	xor    eax,eax
c0027378:	83 fa 1e             	cmp    edx,0x1e
c002737b:	77 40                	ja     c00273bd <__fixsfsi+0x60>
c002737d:	89 c8                	mov    eax,ecx
c002737f:	0d 00 00 00 80       	or     eax,0x80000000
c0027384:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027389:	29 d1                	sub    ecx,edx
c002738b:	d3 e8                	shr    eax,cl
c002738d:	eb 2e                	jmp    c00273bd <__fixsfsi+0x60>
c002738f:	31 c0                	xor    eax,eax
c0027391:	81 c2 81 00 00 00    	add    edx,0x81
c0027397:	78 24                	js     c00273bd <__fixsfsi+0x60>
c0027399:	83 fa 1e             	cmp    edx,0x1e
c002739c:	7e 09                	jle    c00273a7 <__fixsfsi+0x4a>
c002739e:	83 fa 1f             	cmp    edx,0x1f
c00273a1:	75 18                	jne    c00273bb <__fixsfsi+0x5e>
c00273a3:	85 c9                	test   ecx,ecx
c00273a5:	75 14                	jne    c00273bb <__fixsfsi+0x5e>
c00273a7:	89 c8                	mov    eax,ecx
c00273a9:	0d 00 00 00 80       	or     eax,0x80000000
c00273ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273b3:	29 d1                	sub    ecx,edx
c00273b5:	d3 e8                	shr    eax,cl
c00273b7:	f7 d8                	neg    eax
c00273b9:	eb 02                	jmp    c00273bd <__fixsfsi+0x60>
c00273bb:	31 c0                	xor    eax,eax
c00273bd:	5d                   	pop    ebp
c00273be:	c3                   	ret    

c00273bf <__fixunssfsi>:
c00273bf:	55                   	push   ebp
c00273c0:	89 e5                	mov    ebp,esp
c00273c2:	53                   	push   ebx
c00273c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273c6:	89 d3                	mov    ebx,edx
c00273c8:	c1 fb 17             	sar    ebx,0x17
c00273cb:	83 eb 7f             	sub    ebx,0x7f
c00273ce:	31 c0                	xor    eax,eax
c00273d0:	83 fb 1f             	cmp    ebx,0x1f
c00273d3:	77 18                	ja     c00273ed <__fixunssfsi+0x2e>
c00273d5:	89 d0                	mov    eax,edx
c00273d7:	c1 e0 08             	shl    eax,0x8
c00273da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273df:	0d 00 00 00 80       	or     eax,0x80000000
c00273e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273e9:	29 d9                	sub    ecx,ebx
c00273eb:	d3 e8                	shr    eax,cl
c00273ed:	5b                   	pop    ebx
c00273ee:	5d                   	pop    ebp
c00273ef:	c3                   	ret    

c00273f0 <__cmpsf2>:
c00273f0:	55                   	push   ebp
c00273f1:	89 e5                	mov    ebp,esp
c00273f3:	57                   	push   edi
c00273f4:	56                   	push   esi
c00273f5:	53                   	push   ebx
c00273f6:	83 ec 24             	sub    esp,0x24
c00273f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273ff:	e8 4f 10 00 00       	call   c0028453 <__truncdfsf2>
c0027404:	5a                   	pop    edx
c0027405:	59                   	pop    ecx
c0027406:	89 c3                	mov    ebx,eax
c0027408:	c1 e8 17             	shr    eax,0x17
c002740b:	0f b6 f0             	movzx  esi,al
c002740e:	89 d8                	mov    eax,ebx
c0027410:	c1 e8 1f             	shr    eax,0x1f
c0027413:	31 c6                	xor    esi,eax
c0027415:	c1 e3 08             	shl    ebx,0x8
c0027418:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002741b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002741e:	e8 30 10 00 00       	call   c0028453 <__truncdfsf2>
c0027423:	83 c4 10             	add    esp,0x10
c0027426:	89 c1                	mov    ecx,eax
c0027428:	c1 e9 17             	shr    ecx,0x17
c002742b:	0f b6 c9             	movzx  ecx,cl
c002742e:	89 c7                	mov    edi,eax
c0027430:	c1 ef 1f             	shr    edi,0x1f
c0027433:	89 ca                	mov    edx,ecx
c0027435:	31 fa                	xor    edx,edi
c0027437:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002743a:	c1 e0 08             	shl    eax,0x8
c002743d:	89 c2                	mov    edx,eax
c002743f:	89 d8                	mov    eax,ebx
c0027441:	09 d0                	or     eax,edx
c0027443:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027448:	09 f0                	or     eax,esi
c002744a:	75 08                	jne    c0027454 <__cmpsf2+0x64>
c002744c:	31 c0                	xor    eax,eax
c002744e:	39 f9                	cmp    ecx,edi
c0027450:	75 0c                	jne    c002745e <__cmpsf2+0x6e>
c0027452:	eb 29                	jmp    c002747d <__cmpsf2+0x8d>
c0027454:	b8 01 00 00 00       	mov    eax,0x1
c0027459:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002745c:	7f 1f                	jg     c002747d <__cmpsf2+0x8d>
c002745e:	83 c8 ff             	or     eax,0xffffffff
c0027461:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027464:	7c 17                	jl     c002747d <__cmpsf2+0x8d>
c0027466:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002746c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027472:	b8 01 00 00 00       	mov    eax,0x1
c0027477:	39 d3                	cmp    ebx,edx
c0027479:	77 02                	ja     c002747d <__cmpsf2+0x8d>
c002747b:	19 c0                	sbb    eax,eax
c002747d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027480:	5b                   	pop    ebx
c0027481:	5e                   	pop    esi
c0027482:	5f                   	pop    edi
c0027483:	5d                   	pop    ebp
c0027484:	c3                   	ret    

c0027485 <__eqsf2>:
c0027485:	55                   	push   ebp
c0027486:	89 e5                	mov    ebp,esp
c0027488:	83 ec 24             	sub    esp,0x24
c002748b:	6a 01                	push   0x1
c002748d:	83 ec 0c             	sub    esp,0xc
c0027490:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027493:	e8 df 10 00 00       	call   c0028577 <__extendsfdf2>
c0027498:	83 c4 10             	add    esp,0x10
c002749b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002749e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274a1:	52                   	push   edx
c00274a2:	50                   	push   eax
c00274a3:	50                   	push   eax
c00274a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274a7:	e8 cb 10 00 00       	call   c0028577 <__extendsfdf2>
c00274ac:	59                   	pop    ecx
c00274ad:	59                   	pop    ecx
c00274ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274b4:	52                   	push   edx
c00274b5:	50                   	push   eax
c00274b6:	e8 35 ff ff ff       	call   c00273f0 <__cmpsf2>
c00274bb:	83 c4 20             	add    esp,0x20
c00274be:	c9                   	leave  
c00274bf:	c3                   	ret    

c00274c0 <__nesf2>:
c00274c0:	eb c3                	jmp    c0027485 <__eqsf2>

c00274c2 <__gtsf2>:
c00274c2:	55                   	push   ebp
c00274c3:	89 e5                	mov    ebp,esp
c00274c5:	83 ec 24             	sub    esp,0x24
c00274c8:	6a ff                	push   0xffffffff
c00274ca:	83 ec 0c             	sub    esp,0xc
c00274cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274d0:	e8 a2 10 00 00       	call   c0028577 <__extendsfdf2>
c00274d5:	83 c4 10             	add    esp,0x10
c00274d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274de:	52                   	push   edx
c00274df:	50                   	push   eax
c00274e0:	50                   	push   eax
c00274e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274e4:	e8 8e 10 00 00       	call   c0028577 <__extendsfdf2>
c00274e9:	59                   	pop    ecx
c00274ea:	59                   	pop    ecx
c00274eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274f1:	52                   	push   edx
c00274f2:	50                   	push   eax
c00274f3:	e8 f8 fe ff ff       	call   c00273f0 <__cmpsf2>
c00274f8:	83 c4 20             	add    esp,0x20
c00274fb:	c9                   	leave  
c00274fc:	c3                   	ret    

c00274fd <__gesf2>:
c00274fd:	eb c3                	jmp    c00274c2 <__gtsf2>

c00274ff <__ltsf2>:
c00274ff:	eb 84                	jmp    c0027485 <__eqsf2>

c0027501 <__lesf2>:
c0027501:	eb 82                	jmp    c0027485 <__eqsf2>

c0027503 <__adddf3>:
c0027503:	55                   	push   ebp
c0027504:	89 e5                	mov    ebp,esp
c0027506:	57                   	push   edi
c0027507:	56                   	push   esi
c0027508:	53                   	push   ebx
c0027509:	83 ec 24             	sub    esp,0x24
c002750c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002750f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027512:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027515:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027518:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002751b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002751e:	89 c8                	mov    eax,ecx
c0027520:	89 ce                	mov    esi,ecx
c0027522:	c1 fe 14             	sar    esi,0x14
c0027525:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027528:	89 fb                	mov    ebx,edi
c002752a:	89 fa                	mov    edx,edi
c002752c:	c1 e2 0b             	shl    edx,0xb
c002752f:	c1 e0 0b             	shl    eax,0xb
c0027532:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027537:	c1 eb 15             	shr    ebx,0x15
c002753a:	09 d8                	or     eax,ebx
c002753c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002753f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027542:	c1 fe 14             	sar    esi,0x14
c0027545:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027548:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002754b:	89 f3                	mov    ebx,esi
c002754d:	c1 e3 0b             	shl    ebx,0xb
c0027550:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027553:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027556:	c1 e3 0b             	shl    ebx,0xb
c0027559:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002755f:	c1 ee 15             	shr    esi,0x15
c0027562:	09 f3                	or     ebx,esi
c0027564:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027567:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002756a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002756d:	0f 88 5f 02 00 00    	js     c00277d2 <__adddf3+0x2cf>
c0027573:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027576:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027579:	85 db                	test   ebx,ebx
c002757b:	0f 8e c7 00 00 00    	jle    c0027648 <__adddf3+0x145>
c0027581:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027588:	75 1a                	jne    c00275a4 <__adddf3+0xa1>
c002758a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002758d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027590:	0f 84 b2 05 00 00    	je     c0027b48 <__adddf3+0x645>
c0027596:	4b                   	dec    ebx
c0027597:	75 23                	jne    c00275bc <__adddf3+0xb9>
c0027599:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002759c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002759f:	e9 99 00 00 00       	jmp    c002763d <__adddf3+0x13a>
c00275a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275a7:	f7 d6                	not    esi
c00275a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275af:	0f 84 93 05 00 00    	je     c0027b48 <__adddf3+0x645>
c00275b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275bc:	83 fb 1f             	cmp    ebx,0x1f
c00275bf:	7e 42                	jle    c0027603 <__adddf3+0x100>
c00275c1:	83 fb 3f             	cmp    ebx,0x3f
c00275c4:	0f 8f 7e 05 00 00    	jg     c0027b48 <__adddf3+0x645>
c00275ca:	83 e3 1f             	and    ebx,0x1f
c00275cd:	89 d9                	mov    ecx,ebx
c00275cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275d2:	d3 ef                	shr    edi,cl
c00275d4:	31 db                	xor    ebx,ebx
c00275d6:	85 c9                	test   ecx,ecx
c00275d8:	74 15                	je     c00275ef <__adddf3+0xec>
c00275da:	be 20 00 00 00       	mov    esi,0x20
c00275df:	29 ce                	sub    esi,ecx
c00275e1:	89 f1                	mov    ecx,esi
c00275e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275e6:	d3 e6                	shl    esi,cl
c00275e8:	31 db                	xor    ebx,ebx
c00275ea:	85 f6                	test   esi,esi
c00275ec:	0f 95 c3             	setne  bl
c00275ef:	31 c9                	xor    ecx,ecx
c00275f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275f5:	0f 95 c1             	setne  cl
c00275f8:	09 cf                	or     edi,ecx
c00275fa:	09 fb                	or     ebx,edi
c00275fc:	01 da                	add    edx,ebx
c00275fe:	83 d0 00             	adc    eax,0x0
c0027601:	eb 3a                	jmp    c002763d <__adddf3+0x13a>
c0027603:	bf 20 00 00 00       	mov    edi,0x20
c0027608:	29 df                	sub    edi,ebx
c002760a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002760d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027610:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027613:	d3 e6                	shl    esi,cl
c0027615:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027618:	88 d9                	mov    cl,bl
c002761a:	d3 ef                	shr    edi,cl
c002761c:	09 fe                	or     esi,edi
c002761e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027621:	88 d9                	mov    cl,bl
c0027623:	d3 ef                	shr    edi,cl
c0027625:	89 fb                	mov    ebx,edi
c0027627:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002762a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002762d:	d3 e7                	shl    edi,cl
c002762f:	85 ff                	test   edi,edi
c0027631:	0f 95 c1             	setne  cl
c0027634:	0f b6 c9             	movzx  ecx,cl
c0027637:	09 ce                	or     esi,ecx
c0027639:	01 f2                	add    edx,esi
c002763b:	11 d8                	adc    eax,ebx
c002763d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027640:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027643:	e9 52 01 00 00       	jmp    c002779a <__adddf3+0x297>
c0027648:	0f 84 d5 00 00 00    	je     c0027723 <__adddf3+0x220>
c002764e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027651:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027654:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027657:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002765a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027661:	75 20                	jne    c0027683 <__adddf3+0x180>
c0027663:	89 d6                	mov    esi,edx
c0027665:	09 c6                	or     esi,eax
c0027667:	0f 84 db 04 00 00    	je     c0027b48 <__adddf3+0x645>
c002766d:	4b                   	dec    ebx
c002766e:	75 29                	jne    c0027699 <__adddf3+0x196>
c0027670:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027673:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027676:	01 d1                	add    ecx,edx
c0027678:	11 c6                	adc    esi,eax
c002767a:	89 f0                	mov    eax,esi
c002767c:	89 ca                	mov    edx,ecx
c002767e:	e9 17 01 00 00       	jmp    c002779a <__adddf3+0x297>
c0027683:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027686:	f7 d6                	not    esi
c0027688:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002768e:	0f 84 b4 04 00 00    	je     c0027b48 <__adddf3+0x645>
c0027694:	0d 00 00 00 80       	or     eax,0x80000000
c0027699:	83 fb 1f             	cmp    ebx,0x1f
c002769c:	7e 48                	jle    c00276e6 <__adddf3+0x1e3>
c002769e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276a4:	83 fb 3f             	cmp    ebx,0x3f
c00276a7:	0f 8f 9b 04 00 00    	jg     c0027b48 <__adddf3+0x645>
c00276ad:	83 e3 1f             	and    ebx,0x1f
c00276b0:	89 d9                	mov    ecx,ebx
c00276b2:	89 c7                	mov    edi,eax
c00276b4:	d3 ef                	shr    edi,cl
c00276b6:	31 db                	xor    ebx,ebx
c00276b8:	85 c9                	test   ecx,ecx
c00276ba:	74 12                	je     c00276ce <__adddf3+0x1cb>
c00276bc:	be 20 00 00 00       	mov    esi,0x20
c00276c1:	29 ce                	sub    esi,ecx
c00276c3:	89 f1                	mov    ecx,esi
c00276c5:	d3 e0                	shl    eax,cl
c00276c7:	31 db                	xor    ebx,ebx
c00276c9:	85 c0                	test   eax,eax
c00276cb:	0f 95 c3             	setne  bl
c00276ce:	31 c0                	xor    eax,eax
c00276d0:	85 d2                	test   edx,edx
c00276d2:	0f 95 c0             	setne  al
c00276d5:	09 c7                	or     edi,eax
c00276d7:	09 fb                	or     ebx,edi
c00276d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276df:	01 da                	add    edx,ebx
c00276e1:	83 d6 00             	adc    esi,0x0
c00276e4:	eb 39                	jmp    c002771f <__adddf3+0x21c>
c00276e6:	be 20 00 00 00       	mov    esi,0x20
c00276eb:	29 de                	sub    esi,ebx
c00276ed:	89 c7                	mov    edi,eax
c00276ef:	89 f1                	mov    ecx,esi
c00276f1:	d3 e7                	shl    edi,cl
c00276f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276f6:	89 d7                	mov    edi,edx
c00276f8:	88 d9                	mov    cl,bl
c00276fa:	d3 ef                	shr    edi,cl
c00276fc:	89 f9                	mov    ecx,edi
c00276fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027701:	09 cf                	or     edi,ecx
c0027703:	88 d9                	mov    cl,bl
c0027705:	d3 e8                	shr    eax,cl
c0027707:	89 f1                	mov    ecx,esi
c0027709:	d3 e2                	shl    edx,cl
c002770b:	85 d2                	test   edx,edx
c002770d:	0f 95 c2             	setne  dl
c0027710:	0f b6 d2             	movzx  edx,dl
c0027713:	09 d7                	or     edi,edx
c0027715:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027718:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002771b:	01 fa                	add    edx,edi
c002771d:	11 c6                	adc    esi,eax
c002771f:	89 f0                	mov    eax,esi
c0027721:	eb 77                	jmp    c002779a <__adddf3+0x297>
c0027723:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027726:	46                   	inc    esi
c0027727:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002772a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027730:	75 41                	jne    c0027773 <__adddf3+0x270>
c0027732:	89 d3                	mov    ebx,edx
c0027734:	09 c3                	or     ebx,eax
c0027736:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002773d:	75 27                	jne    c0027766 <__adddf3+0x263>
c002773f:	85 db                	test   ebx,ebx
c0027741:	0f 84 fb 03 00 00    	je     c0027b42 <__adddf3+0x63f>
c0027747:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002774a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002774d:	0f 84 f5 03 00 00    	je     c0027b48 <__adddf3+0x645>
c0027753:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027756:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027759:	85 c0                	test   eax,eax
c002775b:	0f 89 91 03 00 00    	jns    c0027af2 <__adddf3+0x5ef>
c0027761:	e9 85 03 00 00       	jmp    c0027aeb <__adddf3+0x5e8>
c0027766:	85 db                	test   ebx,ebx
c0027768:	0f 85 da 03 00 00    	jne    c0027b48 <__adddf3+0x645>
c002776e:	e9 cf 03 00 00       	jmp    c0027b42 <__adddf3+0x63f>
c0027773:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027776:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027779:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002777c:	f7 d1                	not    ecx
c002777e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027784:	0f 84 70 03 00 00    	je     c0027afa <__adddf3+0x5f7>
c002778a:	d1 ea                	shr    edx,1
c002778c:	89 c1                	mov    ecx,eax
c002778e:	c1 e1 1f             	shl    ecx,0x1f
c0027791:	09 ca                	or     edx,ecx
c0027793:	d1 e8                	shr    eax,1
c0027795:	e9 6f 03 00 00       	jmp    c0027b09 <__adddf3+0x606>
c002779a:	85 c0                	test   eax,eax
c002779c:	0f 89 67 03 00 00    	jns    c0027b09 <__adddf3+0x606>
c00277a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277a8:	f7 d1                	not    ecx
c00277aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277b0:	0f 84 44 03 00 00    	je     c0027afa <__adddf3+0x5f7>
c00277b6:	89 d1                	mov    ecx,edx
c00277b8:	d1 e9                	shr    ecx,1
c00277ba:	83 e2 01             	and    edx,0x1
c00277bd:	09 ca                	or     edx,ecx
c00277bf:	89 c1                	mov    ecx,eax
c00277c1:	c1 e1 1f             	shl    ecx,0x1f
c00277c4:	09 ca                	or     edx,ecx
c00277c6:	d1 e8                	shr    eax,1
c00277c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277cd:	e9 37 03 00 00       	jmp    c0027b09 <__adddf3+0x606>
c00277d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00277de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277e7:	29 de                	sub    esi,ebx
c00277e9:	85 f6                	test   esi,esi
c00277eb:	0f 8e bd 00 00 00    	jle    c00278ae <__adddf3+0x3ab>
c00277f1:	85 db                	test   ebx,ebx
c00277f3:	75 17                	jne    c002780c <__adddf3+0x309>
c00277f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277fb:	0f 84 47 03 00 00    	je     c0027b48 <__adddf3+0x645>
c0027801:	4e                   	dec    esi
c0027802:	75 20                	jne    c0027824 <__adddf3+0x321>
c0027804:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027807:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002780a:	eb 5b                	jmp    c0027867 <__adddf3+0x364>
c002780c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002780f:	f7 d3                	not    ebx
c0027811:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027817:	0f 84 2b 03 00 00    	je     c0027b48 <__adddf3+0x645>
c002781d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027824:	83 fe 1f             	cmp    esi,0x1f
c0027827:	7e 49                	jle    c0027872 <__adddf3+0x36f>
c0027829:	83 fe 3f             	cmp    esi,0x3f
c002782c:	0f 8f 16 03 00 00    	jg     c0027b48 <__adddf3+0x645>
c0027832:	83 e6 1f             	and    esi,0x1f
c0027835:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027838:	89 f1                	mov    ecx,esi
c002783a:	d3 ef                	shr    edi,cl
c002783c:	31 db                	xor    ebx,ebx
c002783e:	85 f6                	test   esi,esi
c0027840:	74 13                	je     c0027855 <__adddf3+0x352>
c0027842:	b9 20 00 00 00       	mov    ecx,0x20
c0027847:	29 f1                	sub    ecx,esi
c0027849:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002784c:	d3 e6                	shl    esi,cl
c002784e:	31 db                	xor    ebx,ebx
c0027850:	85 f6                	test   esi,esi
c0027852:	0f 95 c3             	setne  bl
c0027855:	31 c9                	xor    ecx,ecx
c0027857:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002785b:	0f 95 c1             	setne  cl
c002785e:	09 cf                	or     edi,ecx
c0027860:	09 fb                	or     ebx,edi
c0027862:	29 da                	sub    edx,ebx
c0027864:	83 d8 00             	sbb    eax,0x0
c0027867:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002786a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002786d:	e9 aa 01 00 00       	jmp    c0027a1c <__adddf3+0x519>
c0027872:	bf 20 00 00 00       	mov    edi,0x20
c0027877:	29 f7                	sub    edi,esi
c0027879:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002787c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002787f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027882:	d3 e3                	shl    ebx,cl
c0027884:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027887:	89 f1                	mov    ecx,esi
c0027889:	d3 ef                	shr    edi,cl
c002788b:	09 fb                	or     ebx,edi
c002788d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027890:	89 f1                	mov    ecx,esi
c0027892:	d3 ef                	shr    edi,cl
c0027894:	89 fe                	mov    esi,edi
c0027896:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027899:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002789c:	d3 e7                	shl    edi,cl
c002789e:	85 ff                	test   edi,edi
c00278a0:	0f 95 c1             	setne  cl
c00278a3:	0f b6 c9             	movzx  ecx,cl
c00278a6:	09 cb                	or     ebx,ecx
c00278a8:	29 da                	sub    edx,ebx
c00278aa:	19 f0                	sbb    eax,esi
c00278ac:	eb b9                	jmp    c0027867 <__adddf3+0x364>
c00278ae:	0f 84 cd 00 00 00    	je     c0027981 <__adddf3+0x47e>
c00278b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278c1:	75 1b                	jne    c00278de <__adddf3+0x3db>
c00278c3:	89 d6                	mov    esi,edx
c00278c5:	09 c6                	or     esi,eax
c00278c7:	0f 84 7b 02 00 00    	je     c0027b48 <__adddf3+0x645>
c00278cd:	4b                   	dec    ebx
c00278ce:	75 24                	jne    c00278f4 <__adddf3+0x3f1>
c00278d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278d6:	29 d1                	sub    ecx,edx
c00278d8:	19 c6                	sbb    esi,eax
c00278da:	89 ca                	mov    edx,ecx
c00278dc:	eb 61                	jmp    c002793f <__adddf3+0x43c>
c00278de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00278e1:	f7 d6                	not    esi
c00278e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278e9:	0f 84 59 02 00 00    	je     c0027b48 <__adddf3+0x645>
c00278ef:	0d 00 00 00 80       	or     eax,0x80000000
c00278f4:	83 fb 1f             	cmp    ebx,0x1f
c00278f7:	7e 4d                	jle    c0027946 <__adddf3+0x443>
c00278f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278ff:	83 fb 3f             	cmp    ebx,0x3f
c0027902:	0f 8f 40 02 00 00    	jg     c0027b48 <__adddf3+0x645>
c0027908:	83 e3 1f             	and    ebx,0x1f
c002790b:	89 d9                	mov    ecx,ebx
c002790d:	89 c7                	mov    edi,eax
c002790f:	d3 ef                	shr    edi,cl
c0027911:	31 db                	xor    ebx,ebx
c0027913:	85 c9                	test   ecx,ecx
c0027915:	74 12                	je     c0027929 <__adddf3+0x426>
c0027917:	be 20 00 00 00       	mov    esi,0x20
c002791c:	29 ce                	sub    esi,ecx
c002791e:	89 f1                	mov    ecx,esi
c0027920:	d3 e0                	shl    eax,cl
c0027922:	31 db                	xor    ebx,ebx
c0027924:	85 c0                	test   eax,eax
c0027926:	0f 95 c3             	setne  bl
c0027929:	31 c0                	xor    eax,eax
c002792b:	85 d2                	test   edx,edx
c002792d:	0f 95 c0             	setne  al
c0027930:	09 c7                	or     edi,eax
c0027932:	09 fb                	or     ebx,edi
c0027934:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027937:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002793a:	29 da                	sub    edx,ebx
c002793c:	83 de 00             	sbb    esi,0x0
c002793f:	89 f0                	mov    eax,esi
c0027941:	e9 d6 00 00 00       	jmp    c0027a1c <__adddf3+0x519>
c0027946:	be 20 00 00 00       	mov    esi,0x20
c002794b:	29 de                	sub    esi,ebx
c002794d:	89 c7                	mov    edi,eax
c002794f:	89 f1                	mov    ecx,esi
c0027951:	d3 e7                	shl    edi,cl
c0027953:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027956:	89 d7                	mov    edi,edx
c0027958:	88 d9                	mov    cl,bl
c002795a:	d3 ef                	shr    edi,cl
c002795c:	89 f9                	mov    ecx,edi
c002795e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027961:	09 cf                	or     edi,ecx
c0027963:	88 d9                	mov    cl,bl
c0027965:	d3 e8                	shr    eax,cl
c0027967:	89 f1                	mov    ecx,esi
c0027969:	d3 e2                	shl    edx,cl
c002796b:	85 d2                	test   edx,edx
c002796d:	0f 95 c2             	setne  dl
c0027970:	0f b6 d2             	movzx  edx,dl
c0027973:	09 d7                	or     edi,edx
c0027975:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027978:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002797b:	29 fa                	sub    edx,edi
c002797d:	19 c6                	sbb    esi,eax
c002797f:	eb be                	jmp    c002793f <__adddf3+0x43c>
c0027981:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027984:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027987:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002798d:	75 6a                	jne    c00279f9 <__adddf3+0x4f6>
c002798f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027993:	75 58                	jne    c00279ed <__adddf3+0x4ea>
c0027995:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027998:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002799b:	89 d6                	mov    esi,edx
c002799d:	09 c6                	or     esi,eax
c002799f:	75 17                	jne    c00279b8 <__adddf3+0x4b5>
c00279a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279a7:	85 db                	test   ebx,ebx
c00279a9:	0f 85 99 01 00 00    	jne    c0027b48 <__adddf3+0x645>
c00279af:	31 ff                	xor    edi,edi
c00279b1:	31 c9                	xor    ecx,ecx
c00279b3:	e9 90 01 00 00       	jmp    c0027b48 <__adddf3+0x645>
c00279b8:	85 db                	test   ebx,ebx
c00279ba:	0f 84 88 01 00 00    	je     c0027b48 <__adddf3+0x645>
c00279c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279c6:	85 c0                	test   eax,eax
c00279c8:	79 10                	jns    c00279da <__adddf3+0x4d7>
c00279ca:	31 c9                	xor    ecx,ecx
c00279cc:	f7 da                	neg    edx
c00279ce:	0f 95 c1             	setne  cl
c00279d1:	01 c8                	add    eax,ecx
c00279d3:	f7 d8                	neg    eax
c00279d5:	e9 2f 01 00 00       	jmp    c0027b09 <__adddf3+0x606>
c00279da:	31 ff                	xor    edi,edi
c00279dc:	31 c9                	xor    ecx,ecx
c00279de:	89 c3                	mov    ebx,eax
c00279e0:	09 d3                	or     ebx,edx
c00279e2:	0f 84 60 01 00 00    	je     c0027b48 <__adddf3+0x645>
c00279e8:	e9 05 01 00 00       	jmp    c0027af2 <__adddf3+0x5ef>
c00279ed:	31 ff                	xor    edi,edi
c00279ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00279f4:	e9 4f 01 00 00       	jmp    c0027b48 <__adddf3+0x645>
c00279f9:	89 c1                	mov    ecx,eax
c00279fb:	89 d0                	mov    eax,edx
c00279fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a00:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a03:	89 ca                	mov    edx,ecx
c0027a05:	85 c9                	test   ecx,ecx
c0027a07:	79 2c                	jns    c0027a35 <__adddf3+0x532>
c0027a09:	31 c9                	xor    ecx,ecx
c0027a0b:	f7 d8                	neg    eax
c0027a0d:	0f 95 c1             	setne  cl
c0027a10:	01 ca                	add    edx,ecx
c0027a12:	f7 da                	neg    edx
c0027a14:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a17:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a1a:	eb 19                	jmp    c0027a35 <__adddf3+0x532>
c0027a1c:	85 c0                	test   eax,eax
c0027a1e:	0f 89 e5 00 00 00    	jns    c0027b09 <__adddf3+0x606>
c0027a24:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a29:	89 c1                	mov    ecx,eax
c0027a2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a2e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a31:	89 d0                	mov    eax,edx
c0027a33:	89 ca                	mov    edx,ecx
c0027a35:	85 d2                	test   edx,edx
c0027a37:	74 59                	je     c0027a92 <__adddf3+0x58f>
c0027a39:	0f bd da             	bsr    ebx,edx
c0027a3c:	83 f3 1f             	xor    ebx,0x1f
c0027a3f:	88 d9                	mov    cl,bl
c0027a41:	d3 e2                	shl    edx,cl
c0027a43:	bf 20 00 00 00       	mov    edi,0x20
c0027a48:	89 f9                	mov    ecx,edi
c0027a4a:	29 d9                	sub    ecx,ebx
c0027a4c:	89 c6                	mov    esi,eax
c0027a4e:	d3 ee                	shr    esi,cl
c0027a50:	09 d6                	or     esi,edx
c0027a52:	88 d9                	mov    cl,bl
c0027a54:	d3 e0                	shl    eax,cl
c0027a56:	89 c2                	mov    edx,eax
c0027a58:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a5b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a60:	39 d8                	cmp    eax,ebx
c0027a62:	7f 22                	jg     c0027a86 <__adddf3+0x583>
c0027a64:	29 c3                	sub    ebx,eax
c0027a66:	43                   	inc    ebx
c0027a67:	88 d9                	mov    cl,bl
c0027a69:	d3 ea                	shr    edx,cl
c0027a6b:	29 df                	sub    edi,ebx
c0027a6d:	89 f9                	mov    ecx,edi
c0027a6f:	89 f0                	mov    eax,esi
c0027a71:	d3 e0                	shl    eax,cl
c0027a73:	09 c2                	or     edx,eax
c0027a75:	89 f0                	mov    eax,esi
c0027a77:	88 d9                	mov    cl,bl
c0027a79:	d3 e8                	shr    eax,cl
c0027a7b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a7e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027a84:	eb 6f                	jmp    c0027af5 <__adddf3+0x5f2>
c0027a86:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a89:	29 d8                	sub    eax,ebx
c0027a8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a8e:	89 f0                	mov    eax,esi
c0027a90:	eb 59                	jmp    c0027aeb <__adddf3+0x5e8>
c0027a92:	85 c0                	test   eax,eax
c0027a94:	74 6a                	je     c0027b00 <__adddf3+0x5fd>
c0027a96:	0f bd c8             	bsr    ecx,eax
c0027a99:	83 f1 1f             	xor    ecx,0x1f
c0027a9c:	d3 e0                	shl    eax,cl
c0027a9e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027aa1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027aa7:	83 c1 20             	add    ecx,0x20
c0027aaa:	39 cb                	cmp    ebx,ecx
c0027aac:	7f 35                	jg     c0027ae3 <__adddf3+0x5e0>
c0027aae:	29 d9                	sub    ecx,ebx
c0027ab0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ab3:	83 fe 1f             	cmp    esi,0x1f
c0027ab6:	7e 09                	jle    c0027ac1 <__adddf3+0x5be>
c0027ab8:	83 e9 1f             	sub    ecx,0x1f
c0027abb:	d3 e8                	shr    eax,cl
c0027abd:	89 c3                	mov    ebx,eax
c0027abf:	eb 11                	jmp    c0027ad2 <__adddf3+0x5cf>
c0027ac1:	b9 20 00 00 00       	mov    ecx,0x20
c0027ac6:	29 f1                	sub    ecx,esi
c0027ac8:	89 c3                	mov    ebx,eax
c0027aca:	d3 e3                	shl    ebx,cl
c0027acc:	89 f1                	mov    ecx,esi
c0027ace:	d3 e8                	shr    eax,cl
c0027ad0:	89 c2                	mov    edx,eax
c0027ad2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ad5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ada:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027add:	89 d0                	mov    eax,edx
c0027adf:	89 da                	mov    edx,ebx
c0027ae1:	eb 26                	jmp    c0027b09 <__adddf3+0x606>
c0027ae3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ae6:	29 cf                	sub    edi,ecx
c0027ae8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027aeb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027af0:	eb 17                	jmp    c0027b09 <__adddf3+0x606>
c0027af2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027af5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027af8:	eb 0f                	jmp    c0027b09 <__adddf3+0x606>
c0027afa:	31 d2                	xor    edx,edx
c0027afc:	31 c0                	xor    eax,eax
c0027afe:	eb 09                	jmp    c0027b09 <__adddf3+0x606>
c0027b00:	89 c2                	mov    edx,eax
c0027b02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b0c:	c1 e1 14             	shl    ecx,0x14
c0027b0f:	89 c3                	mov    ebx,eax
c0027b11:	c1 eb 0b             	shr    ebx,0xb
c0027b14:	09 d9                	or     ecx,ebx
c0027b16:	89 d3                	mov    ebx,edx
c0027b18:	c1 eb 0b             	shr    ebx,0xb
c0027b1b:	c1 e0 15             	shl    eax,0x15
c0027b1e:	09 d8                	or     eax,ebx
c0027b20:	89 c7                	mov    edi,eax
c0027b22:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b28:	0f 95 c0             	setne  al
c0027b2b:	89 c6                	mov    esi,eax
c0027b2d:	09 f3                	or     ebx,esi
c0027b2f:	83 e3 01             	and    ebx,0x1
c0027b32:	c1 ea 0a             	shr    edx,0xa
c0027b35:	21 da                	and    edx,ebx
c0027b37:	89 f8                	mov    eax,edi
c0027b39:	01 d0                	add    eax,edx
c0027b3b:	83 d1 00             	adc    ecx,0x0
c0027b3e:	89 c7                	mov    edi,eax
c0027b40:	eb 06                	jmp    c0027b48 <__adddf3+0x645>
c0027b42:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b45:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b48:	89 f8                	mov    eax,edi
c0027b4a:	89 ca                	mov    edx,ecx
c0027b4c:	83 c4 24             	add    esp,0x24
c0027b4f:	5b                   	pop    ebx
c0027b50:	5e                   	pop    esi
c0027b51:	5f                   	pop    edi
c0027b52:	5d                   	pop    ebp
c0027b53:	c3                   	ret    

c0027b54 <__subdf3>:
c0027b54:	55                   	push   ebp
c0027b55:	89 e5                	mov    ebp,esp
c0027b57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b5d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b66:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b69:	5d                   	pop    ebp
c0027b6a:	e9 94 f9 ff ff       	jmp    c0027503 <__adddf3>

c0027b6f <__negdf2>:
c0027b6f:	55                   	push   ebp
c0027b70:	89 e5                	mov    ebp,esp
c0027b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b7e:	5d                   	pop    ebp
c0027b7f:	c3                   	ret    

c0027b80 <__muldf3>:
c0027b80:	55                   	push   ebp
c0027b81:	89 e5                	mov    ebp,esp
c0027b83:	57                   	push   edi
c0027b84:	56                   	push   esi
c0027b85:	53                   	push   ebx
c0027b86:	83 ec 24             	sub    esp,0x24
c0027b89:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b9e:	89 c8                	mov    eax,ecx
c0027ba0:	c1 f8 14             	sar    eax,0x14
c0027ba3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ba6:	89 f8                	mov    eax,edi
c0027ba8:	89 fb                	mov    ebx,edi
c0027baa:	c1 e3 0b             	shl    ebx,0xb
c0027bad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027bb0:	c1 e1 0b             	shl    ecx,0xb
c0027bb3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027bb9:	c1 e8 15             	shr    eax,0x15
c0027bbc:	09 c1                	or     ecx,eax
c0027bbe:	89 d6                	mov    esi,edx
c0027bc0:	89 d0                	mov    eax,edx
c0027bc2:	c1 f8 14             	sar    eax,0x14
c0027bc5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027bc8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027bcb:	89 c3                	mov    ebx,eax
c0027bcd:	c1 e3 0b             	shl    ebx,0xb
c0027bd0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027bd3:	c1 e6 0b             	shl    esi,0xb
c0027bd6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027bdc:	c1 e8 15             	shr    eax,0x15
c0027bdf:	09 c6                	or     esi,eax
c0027be1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027be4:	25 ff 07 00 00       	and    eax,0x7ff
c0027be9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027bec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bef:	25 ff 07 00 00       	and    eax,0x7ff
c0027bf4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027bf7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027bfa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027bfd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c07:	40                   	inc    eax
c0027c08:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c0d:	0f 85 8d 00 00 00    	jne    c0027ca0 <__muldf3+0x120>
c0027c13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c16:	09 c8                	or     eax,ecx
c0027c18:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c1c:	74 44                	je     c0027c62 <__muldf3+0xe2>
c0027c1e:	85 c0                	test   eax,eax
c0027c20:	0f 85 31 02 00 00    	jne    c0027e57 <__muldf3+0x2d7>
c0027c26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c29:	40                   	inc    eax
c0027c2a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c2f:	75 13                	jne    c0027c44 <__muldf3+0xc4>
c0027c31:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c34:	09 f1                	or     ecx,esi
c0027c36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c3a:	74 22                	je     c0027c5e <__muldf3+0xde>
c0027c3c:	85 c9                	test   ecx,ecx
c0027c3e:	0f 85 0d 02 00 00    	jne    c0027e51 <__muldf3+0x2d1>
c0027c44:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c48:	0f 89 09 02 00 00    	jns    c0027e57 <__muldf3+0x2d7>
c0027c4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c51:	05 00 00 00 80       	add    eax,0x80000000
c0027c56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c59:	e9 f9 01 00 00       	jmp    c0027e57 <__muldf3+0x2d7>
c0027c5e:	85 c9                	test   ecx,ecx
c0027c60:	eb 2e                	jmp    c0027c90 <__muldf3+0x110>
c0027c62:	85 c0                	test   eax,eax
c0027c64:	74 20                	je     c0027c86 <__muldf3+0x106>
c0027c66:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c6f:	c1 ef 1f             	shr    edi,0x1f
c0027c72:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c75:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027c78:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c7e:	09 f9                	or     ecx,edi
c0027c80:	78 1e                	js     c0027ca0 <__muldf3+0x120>
c0027c82:	89 c3                	mov    ebx,eax
c0027c84:	eb e0                	jmp    c0027c66 <__muldf3+0xe6>
c0027c86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c89:	f7 d0                	not    eax
c0027c8b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c90:	75 b2                	jne    c0027c44 <__muldf3+0xc4>
c0027c92:	31 ff                	xor    edi,edi
c0027c94:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c9b:	e9 b7 01 00 00       	jmp    c0027e57 <__muldf3+0x2d7>
c0027ca0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ca3:	40                   	inc    eax
c0027ca4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ca9:	75 57                	jne    c0027d02 <__muldf3+0x182>
c0027cab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cae:	09 f0                	or     eax,esi
c0027cb0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cb4:	74 23                	je     c0027cd9 <__muldf3+0x159>
c0027cb6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cba:	0f 89 91 01 00 00    	jns    c0027e51 <__muldf3+0x2d1>
c0027cc0:	85 c0                	test   eax,eax
c0027cc2:	0f 85 89 01 00 00    	jne    c0027e51 <__muldf3+0x2d1>
c0027cc8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ccb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027cd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cd4:	e9 7e 01 00 00       	jmp    c0027e57 <__muldf3+0x2d7>
c0027cd9:	85 c0                	test   eax,eax
c0027cdb:	75 0c                	jne    c0027ce9 <__muldf3+0x169>
c0027cdd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ce1:	0f 89 6a 01 00 00    	jns    c0027e51 <__muldf3+0x2d1>
c0027ce7:	eb df                	jmp    c0027cc8 <__muldf3+0x148>
c0027ce9:	01 f6                	add    esi,esi
c0027ceb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027cee:	c1 ea 1f             	shr    edx,0x1f
c0027cf1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cf4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027cf7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cfa:	09 d6                	or     esi,edx
c0027cfc:	78 04                	js     c0027d02 <__muldf3+0x182>
c0027cfe:	89 c3                	mov    ebx,eax
c0027d00:	eb e7                	jmp    c0027ce9 <__muldf3+0x169>
c0027d02:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d08:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d0e:	89 c8                	mov    eax,ecx
c0027d10:	f7 e6                	mul    esi
c0027d12:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d15:	89 c7                	mov    edi,eax
c0027d17:	89 c8                	mov    eax,ecx
c0027d19:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d1c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d1f:	89 c1                	mov    ecx,eax
c0027d21:	89 f0                	mov    eax,esi
c0027d23:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d26:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d29:	89 c6                	mov    esi,eax
c0027d2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d2e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d34:	31 c0                	xor    eax,eax
c0027d36:	01 f1                	add    ecx,esi
c0027d38:	0f 92 c0             	setb   al
c0027d3b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d3e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d41:	83 d6 00             	adc    esi,0x0
c0027d44:	01 c7                	add    edi,eax
c0027d46:	83 d6 00             	adc    esi,0x0
c0027d49:	01 ca                	add    edx,ecx
c0027d4b:	0f 92 c1             	setb   cl
c0027d4e:	0f b6 c9             	movzx  ecx,cl
c0027d51:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d54:	83 d6 00             	adc    esi,0x0
c0027d57:	01 cf                	add    edi,ecx
c0027d59:	83 d6 00             	adc    esi,0x0
c0027d5c:	31 c9                	xor    ecx,ecx
c0027d5e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d61:	0f 95 c1             	setne  cl
c0027d64:	09 cf                	or     edi,ecx
c0027d66:	85 f6                	test   esi,esi
c0027d68:	78 0c                	js     c0027d76 <__muldf3+0x1f6>
c0027d6a:	01 f6                	add    esi,esi
c0027d6c:	89 f8                	mov    eax,edi
c0027d6e:	c1 e8 1f             	shr    eax,0x1f
c0027d71:	09 c6                	or     esi,eax
c0027d73:	01 ff                	add    edi,edi
c0027d75:	4b                   	dec    ebx
c0027d76:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027d7c:	0f 8f 85 00 00 00    	jg     c0027e07 <__muldf3+0x287>
c0027d82:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d88:	85 db                	test   ebx,ebx
c0027d8a:	0f 8f 84 00 00 00    	jg     c0027e14 <__muldf3+0x294>
c0027d90:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d93:	7c 79                	jl     c0027e0e <__muldf3+0x28e>
c0027d95:	ba 01 00 00 00       	mov    edx,0x1
c0027d9a:	29 da                	sub    edx,ebx
c0027d9c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027da2:	83 fa 1f             	cmp    edx,0x1f
c0027da5:	7e 30                	jle    c0027dd7 <__muldf3+0x257>
c0027da7:	83 fa 20             	cmp    edx,0x20
c0027daa:	75 0b                	jne    c0027db7 <__muldf3+0x237>
c0027dac:	31 c0                	xor    eax,eax
c0027dae:	85 ff                	test   edi,edi
c0027db0:	0f 95 c0             	setne  al
c0027db3:	89 c7                	mov    edi,eax
c0027db5:	eb 1a                	jmp    c0027dd1 <__muldf3+0x251>
c0027db7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027dba:	89 f0                	mov    eax,esi
c0027dbc:	d3 e0                	shl    eax,cl
c0027dbe:	09 f8                	or     eax,edi
c0027dc0:	0f 95 c0             	setne  al
c0027dc3:	0f b6 c0             	movzx  eax,al
c0027dc6:	89 c7                	mov    edi,eax
c0027dc8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dcd:	29 d9                	sub    ecx,ebx
c0027dcf:	d3 ee                	shr    esi,cl
c0027dd1:	09 f7                	or     edi,esi
c0027dd3:	31 db                	xor    ebx,ebx
c0027dd5:	eb 3b                	jmp    c0027e12 <__muldf3+0x292>
c0027dd7:	83 c3 1f             	add    ebx,0x1f
c0027dda:	89 f0                	mov    eax,esi
c0027ddc:	88 d9                	mov    cl,bl
c0027dde:	d3 e0                	shl    eax,cl
c0027de0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027de3:	89 f8                	mov    eax,edi
c0027de5:	88 d1                	mov    cl,dl
c0027de7:	d3 e8                	shr    eax,cl
c0027de9:	89 c1                	mov    ecx,eax
c0027deb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027dee:	09 c8                	or     eax,ecx
c0027df0:	88 d9                	mov    cl,bl
c0027df2:	d3 e7                	shl    edi,cl
c0027df4:	31 db                	xor    ebx,ebx
c0027df6:	85 ff                	test   edi,edi
c0027df8:	0f 95 c3             	setne  bl
c0027dfb:	89 df                	mov    edi,ebx
c0027dfd:	09 c7                	or     edi,eax
c0027dff:	88 d1                	mov    cl,dl
c0027e01:	d3 ee                	shr    esi,cl
c0027e03:	31 db                	xor    ebx,ebx
c0027e05:	eb 0d                	jmp    c0027e14 <__muldf3+0x294>
c0027e07:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e0c:	eb 02                	jmp    c0027e10 <__muldf3+0x290>
c0027e0e:	31 db                	xor    ebx,ebx
c0027e10:	31 ff                	xor    edi,edi
c0027e12:	31 f6                	xor    esi,esi
c0027e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e17:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e1a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e1f:	09 c3                	or     ebx,eax
c0027e21:	c1 e3 14             	shl    ebx,0x14
c0027e24:	89 f0                	mov    eax,esi
c0027e26:	c1 e8 0b             	shr    eax,0xb
c0027e29:	09 c3                	or     ebx,eax
c0027e2b:	89 f8                	mov    eax,edi
c0027e2d:	c1 e8 0b             	shr    eax,0xb
c0027e30:	c1 e6 15             	shl    esi,0x15
c0027e33:	09 c6                	or     esi,eax
c0027e35:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e3b:	0f 95 c1             	setne  cl
c0027e3e:	09 c8                	or     eax,ecx
c0027e40:	83 e0 01             	and    eax,0x1
c0027e43:	c1 ef 0a             	shr    edi,0xa
c0027e46:	21 c7                	and    edi,eax
c0027e48:	01 f7                	add    edi,esi
c0027e4a:	83 d3 00             	adc    ebx,0x0
c0027e4d:	89 da                	mov    edx,ebx
c0027e4f:	eb 03                	jmp    c0027e54 <__muldf3+0x2d4>
c0027e51:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e54:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e57:	89 f8                	mov    eax,edi
c0027e59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e5c:	83 c4 24             	add    esp,0x24
c0027e5f:	5b                   	pop    ebx
c0027e60:	5e                   	pop    esi
c0027e61:	5f                   	pop    edi
c0027e62:	5d                   	pop    ebp
c0027e63:	c3                   	ret    

c0027e64 <__divdf3>:
c0027e64:	55                   	push   ebp
c0027e65:	89 e5                	mov    ebp,esp
c0027e67:	57                   	push   edi
c0027e68:	56                   	push   esi
c0027e69:	53                   	push   ebx
c0027e6a:	83 ec 2c             	sub    esp,0x2c
c0027e6d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e76:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e7c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e7f:	89 ce                	mov    esi,ecx
c0027e81:	89 c8                	mov    eax,ecx
c0027e83:	c1 f8 14             	sar    eax,0x14
c0027e86:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e89:	89 f8                	mov    eax,edi
c0027e8b:	89 fb                	mov    ebx,edi
c0027e8d:	c1 e3 0b             	shl    ebx,0xb
c0027e90:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e93:	c1 e6 0b             	shl    esi,0xb
c0027e96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e9c:	c1 e8 15             	shr    eax,0x15
c0027e9f:	09 c6                	or     esi,eax
c0027ea1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ea4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ea7:	89 c2                	mov    edx,eax
c0027ea9:	c1 fa 14             	sar    edx,0x14
c0027eac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027eaf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027eb2:	89 de                	mov    esi,ebx
c0027eb4:	c1 e6 0b             	shl    esi,0xb
c0027eb7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eba:	c1 e0 0b             	shl    eax,0xb
c0027ebd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ec2:	c1 eb 15             	shr    ebx,0x15
c0027ec5:	09 d8                	or     eax,ebx
c0027ec7:	89 c2                	mov    edx,eax
c0027ec9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ecc:	25 ff 07 00 00       	and    eax,0x7ff
c0027ed1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027ed4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ed7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027edd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ee0:	29 d8                	sub    eax,ebx
c0027ee2:	05 ff 03 00 00       	add    eax,0x3ff
c0027ee7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027eea:	46                   	inc    esi
c0027eeb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ef1:	0f 85 a5 00 00 00    	jne    c0027f9c <__divdf3+0x138>
c0027ef7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027efa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027efd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f01:	74 2a                	je     c0027f2d <__divdf3+0xc9>
c0027f03:	85 f6                	test   esi,esi
c0027f05:	0f 85 cc 02 00 00    	jne    c00281d7 <__divdf3+0x373>
c0027f0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f0e:	40                   	inc    eax
c0027f0f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f14:	75 26                	jne    c0027f3c <__divdf3+0xd8>
c0027f16:	85 db                	test   ebx,ebx
c0027f18:	74 22                	je     c0027f3c <__divdf3+0xd8>
c0027f1a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f1d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f23:	09 d0                	or     eax,edx
c0027f25:	0f 85 ac 02 00 00    	jne    c00281d7 <__divdf3+0x373>
c0027f2b:	eb 63                	jmp    c0027f90 <__divdf3+0x12c>
c0027f2d:	85 f6                	test   esi,esi
c0027f2f:	75 22                	jne    c0027f53 <__divdf3+0xef>
c0027f31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f34:	40                   	inc    eax
c0027f35:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f3a:	74 36                	je     c0027f72 <__divdf3+0x10e>
c0027f3c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f40:	0f 89 91 02 00 00    	jns    c00281d7 <__divdf3+0x373>
c0027f46:	89 f8                	mov    eax,edi
c0027f48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f4e:	e9 80 02 00 00       	jmp    c00281d3 <__divdf3+0x36f>
c0027f53:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f56:	01 f6                	add    esi,esi
c0027f58:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f5b:	c1 ef 1f             	shr    edi,0x1f
c0027f5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f61:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f64:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f67:	09 f7                	or     edi,esi
c0027f69:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f6c:	78 2e                	js     c0027f9c <__divdf3+0x138>
c0027f6e:	89 c8                	mov    eax,ecx
c0027f70:	eb e1                	jmp    c0027f53 <__divdf3+0xef>
c0027f72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f75:	09 d0                	or     eax,edx
c0027f77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f7b:	74 0f                	je     c0027f8c <__divdf3+0x128>
c0027f7d:	85 c0                	test   eax,eax
c0027f7f:	74 bb                	je     c0027f3c <__divdf3+0xd8>
c0027f81:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f84:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f87:	e9 4b 02 00 00       	jmp    c00281d7 <__divdf3+0x373>
c0027f8c:	85 c0                	test   eax,eax
c0027f8e:	75 ac                	jne    c0027f3c <__divdf3+0xd8>
c0027f90:	31 ff                	xor    edi,edi
c0027f92:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f97:	e9 3b 02 00 00       	jmp    c00281d7 <__divdf3+0x373>
c0027f9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fa2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fa8:	75 6b                	jne    c0028015 <__divdf3+0x1b1>
c0027faa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fad:	09 d6                	or     esi,edx
c0027faf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fb3:	74 28                	je     c0027fdd <__divdf3+0x179>
c0027fb5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fb8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fbb:	85 f6                	test   esi,esi
c0027fbd:	0f 85 14 02 00 00    	jne    c00281d7 <__divdf3+0x373>
c0027fc3:	31 ff                	xor    edi,edi
c0027fc5:	31 c9                	xor    ecx,ecx
c0027fc7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fcd:	0f 89 04 02 00 00    	jns    c00281d7 <__divdf3+0x373>
c0027fd3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027fd8:	e9 fa 01 00 00       	jmp    c00281d7 <__divdf3+0x373>
c0027fdd:	85 f6                	test   esi,esi
c0027fdf:	75 1b                	jne    c0027ffc <__divdf3+0x198>
c0027fe1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fe4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fe7:	25 00 00 00 80       	and    eax,0x80000000
c0027fec:	31 c9                	xor    ecx,ecx
c0027fee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027ff3:	89 cf                	mov    edi,ecx
c0027ff5:	89 c1                	mov    ecx,eax
c0027ff7:	e9 db 01 00 00       	jmp    c00281d7 <__divdf3+0x373>
c0027ffc:	01 d2                	add    edx,edx
c0027ffe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028001:	c1 eb 1f             	shr    ebx,0x1f
c0028004:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028007:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002800a:	8d 48 01             	lea    ecx,[eax+0x1]
c002800d:	09 da                	or     edx,ebx
c002800f:	78 04                	js     c0028015 <__divdf3+0x1b1>
c0028011:	89 c8                	mov    eax,ecx
c0028013:	eb e7                	jmp    c0027ffc <__divdf3+0x198>
c0028015:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028018:	81 ce 00 00 00 80    	or     esi,0x80000000
c002801e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028024:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028027:	39 d6                	cmp    esi,edx
c0028029:	77 0d                	ja     c0028038 <__divdf3+0x1d4>
c002802b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002802e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028031:	72 1b                	jb     c002804e <__divdf3+0x1ea>
c0028033:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028036:	75 16                	jne    c002804e <__divdf3+0x1ea>
c0028038:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002803b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002803e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028041:	83 de 00             	sbb    esi,0x0
c0028044:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028047:	ba 01 00 00 00       	mov    edx,0x1
c002804c:	eb 02                	jmp    c0028050 <__divdf3+0x1ec>
c002804e:	31 d2                	xor    edx,edx
c0028050:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028057:	31 ff                	xor    edi,edi
c0028059:	01 ff                	add    edi,edi
c002805b:	89 d1                	mov    ecx,edx
c002805d:	c1 e9 1f             	shr    ecx,0x1f
c0028060:	09 cf                	or     edi,ecx
c0028062:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028065:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028068:	89 da                	mov    edx,ebx
c002806a:	89 f3                	mov    ebx,esi
c002806c:	8d 34 36             	lea    esi,[esi+esi*1]
c002806f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028072:	c1 e9 1f             	shr    ecx,0x1f
c0028075:	09 ce                	or     esi,ecx
c0028077:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002807a:	01 c9                	add    ecx,ecx
c002807c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002807f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028082:	85 db                	test   ebx,ebx
c0028084:	78 29                	js     c00280af <__divdf3+0x24b>
c0028086:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028089:	72 07                	jb     c0028092 <__divdf3+0x22e>
c002808b:	75 3c                	jne    c00280c9 <__divdf3+0x265>
c002808d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028090:	77 37                	ja     c00280c9 <__divdf3+0x265>
c0028092:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028095:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028098:	31 d2                	xor    edx,edx
c002809a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002809d:	0f 97 c2             	seta   dl
c00280a0:	29 d6                	sub    esi,edx
c00280a2:	89 d9                	mov    ecx,ebx
c00280a4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280aa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280ad:	eb 17                	jmp    c00280c6 <__divdf3+0x262>
c00280af:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280b2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280b8:	0f 97 c1             	seta   cl
c00280bb:	0f b6 c9             	movzx  ecx,cl
c00280be:	29 ce                	sub    esi,ecx
c00280c0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280c3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280c6:	83 ca 01             	or     edx,0x1
c00280c9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280cc:	75 8b                	jne    c0028059 <__divdf3+0x1f5>
c00280ce:	c1 e7 09             	shl    edi,0x9
c00280d1:	89 d1                	mov    ecx,edx
c00280d3:	c1 e9 17             	shr    ecx,0x17
c00280d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280d9:	09 f3                	or     ebx,esi
c00280db:	0f 95 c3             	setne  bl
c00280de:	0f b6 db             	movzx  ebx,bl
c00280e1:	c1 e2 09             	shl    edx,0x9
c00280e4:	09 d3                	or     ebx,edx
c00280e6:	89 ca                	mov    edx,ecx
c00280e8:	09 fa                	or     edx,edi
c00280ea:	78 0c                	js     c00280f8 <__divdf3+0x294>
c00280ec:	01 d2                	add    edx,edx
c00280ee:	89 d9                	mov    ecx,ebx
c00280f0:	c1 e9 1f             	shr    ecx,0x1f
c00280f3:	09 ca                	or     edx,ecx
c00280f5:	01 db                	add    ebx,ebx
c00280f7:	48                   	dec    eax
c00280f8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00280fd:	0f 8f 83 00 00 00    	jg     c0028186 <__divdf3+0x322>
c0028103:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028109:	85 c0                	test   eax,eax
c002810b:	0f 8f 82 00 00 00    	jg     c0028193 <__divdf3+0x32f>
c0028111:	83 f8 cc             	cmp    eax,0xffffffcc
c0028114:	7c 77                	jl     c002818d <__divdf3+0x329>
c0028116:	be 01 00 00 00       	mov    esi,0x1
c002811b:	29 c6                	sub    esi,eax
c002811d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028123:	83 fe 1f             	cmp    esi,0x1f
c0028126:	7e 2f                	jle    c0028157 <__divdf3+0x2f3>
c0028128:	83 fe 20             	cmp    esi,0x20
c002812b:	75 0a                	jne    c0028137 <__divdf3+0x2d3>
c002812d:	85 db                	test   ebx,ebx
c002812f:	0f 95 c3             	setne  bl
c0028132:	0f b6 db             	movzx  ebx,bl
c0028135:	eb 1a                	jmp    c0028151 <__divdf3+0x2ed>
c0028137:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002813a:	89 d7                	mov    edi,edx
c002813c:	d3 e7                	shl    edi,cl
c002813e:	89 f9                	mov    ecx,edi
c0028140:	09 d9                	or     ecx,ebx
c0028142:	0f 95 c3             	setne  bl
c0028145:	0f b6 db             	movzx  ebx,bl
c0028148:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002814d:	29 c1                	sub    ecx,eax
c002814f:	d3 ea                	shr    edx,cl
c0028151:	09 d3                	or     ebx,edx
c0028153:	31 c0                	xor    eax,eax
c0028155:	eb 3a                	jmp    c0028191 <__divdf3+0x32d>
c0028157:	83 c0 1f             	add    eax,0x1f
c002815a:	89 d7                	mov    edi,edx
c002815c:	88 c1                	mov    cl,al
c002815e:	d3 e7                	shl    edi,cl
c0028160:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028163:	89 df                	mov    edi,ebx
c0028165:	89 f1                	mov    ecx,esi
c0028167:	d3 ef                	shr    edi,cl
c0028169:	89 f9                	mov    ecx,edi
c002816b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002816e:	09 cf                	or     edi,ecx
c0028170:	88 c1                	mov    cl,al
c0028172:	d3 e3                	shl    ebx,cl
c0028174:	85 db                	test   ebx,ebx
c0028176:	0f 95 c3             	setne  bl
c0028179:	0f b6 db             	movzx  ebx,bl
c002817c:	09 fb                	or     ebx,edi
c002817e:	89 f1                	mov    ecx,esi
c0028180:	d3 ea                	shr    edx,cl
c0028182:	31 c0                	xor    eax,eax
c0028184:	eb 0d                	jmp    c0028193 <__divdf3+0x32f>
c0028186:	b8 ff 07 00 00       	mov    eax,0x7ff
c002818b:	eb 02                	jmp    c002818f <__divdf3+0x32b>
c002818d:	31 c0                	xor    eax,eax
c002818f:	31 db                	xor    ebx,ebx
c0028191:	31 d2                	xor    edx,edx
c0028193:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028196:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028199:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002819f:	09 c8                	or     eax,ecx
c00281a1:	c1 e0 14             	shl    eax,0x14
c00281a4:	89 d1                	mov    ecx,edx
c00281a6:	c1 e9 0b             	shr    ecx,0xb
c00281a9:	09 c8                	or     eax,ecx
c00281ab:	89 c6                	mov    esi,eax
c00281ad:	89 d9                	mov    ecx,ebx
c00281af:	c1 e9 0b             	shr    ecx,0xb
c00281b2:	c1 e2 15             	shl    edx,0x15
c00281b5:	09 ca                	or     edx,ecx
c00281b7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281bd:	0f 95 c0             	setne  al
c00281c0:	09 c1                	or     ecx,eax
c00281c2:	83 e1 01             	and    ecx,0x1
c00281c5:	c1 eb 0a             	shr    ebx,0xa
c00281c8:	21 cb                	and    ebx,ecx
c00281ca:	01 d3                	add    ebx,edx
c00281cc:	89 d8                	mov    eax,ebx
c00281ce:	83 d6 00             	adc    esi,0x0
c00281d1:	89 f2                	mov    edx,esi
c00281d3:	89 c7                	mov    edi,eax
c00281d5:	89 d1                	mov    ecx,edx
c00281d7:	89 f8                	mov    eax,edi
c00281d9:	89 ca                	mov    edx,ecx
c00281db:	83 c4 2c             	add    esp,0x2c
c00281de:	5b                   	pop    ebx
c00281df:	5e                   	pop    esi
c00281e0:	5f                   	pop    edi
c00281e1:	5d                   	pop    ebp
c00281e2:	c3                   	ret    

c00281e3 <__floatsidf>:
c00281e3:	55                   	push   ebp
c00281e4:	89 e5                	mov    ebp,esp
c00281e6:	56                   	push   esi
c00281e7:	53                   	push   ebx
c00281e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281eb:	85 db                	test   ebx,ebx
c00281ed:	7e 15                	jle    c0028204 <__floatsidf+0x21>
c00281ef:	0f bd cb             	bsr    ecx,ebx
c00281f2:	83 f1 1f             	xor    ecx,0x1f
c00281f5:	d3 e3                	shl    ebx,cl
c00281f7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281fd:	b8 1e 04 00 00       	mov    eax,0x41e
c0028202:	eb 21                	jmp    c0028225 <__floatsidf+0x42>
c0028204:	b8 00 00 00 00       	mov    eax,0x0
c0028209:	ba 00 00 00 00       	mov    edx,0x0
c002820e:	74 2a                	je     c002823a <__floatsidf+0x57>
c0028210:	f7 db                	neg    ebx
c0028212:	0f bd cb             	bsr    ecx,ebx
c0028215:	83 f1 1f             	xor    ecx,0x1f
c0028218:	d3 e3                	shl    ebx,cl
c002821a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028220:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028225:	29 c8                	sub    eax,ecx
c0028227:	c1 e0 14             	shl    eax,0x14
c002822a:	89 c1                	mov    ecx,eax
c002822c:	89 de                	mov    esi,ebx
c002822e:	c1 ee 0b             	shr    esi,0xb
c0028231:	09 f1                	or     ecx,esi
c0028233:	89 ca                	mov    edx,ecx
c0028235:	c1 e3 15             	shl    ebx,0x15
c0028238:	89 d8                	mov    eax,ebx
c002823a:	5b                   	pop    ebx
c002823b:	5e                   	pop    esi
c002823c:	5d                   	pop    ebp
c002823d:	c3                   	ret    

c002823e <__floatunsidf>:
c002823e:	55                   	push   ebp
c002823f:	89 e5                	mov    ebp,esp
c0028241:	56                   	push   esi
c0028242:	53                   	push   ebx
c0028243:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028246:	85 db                	test   ebx,ebx
c0028248:	74 2a                	je     c0028274 <__floatunsidf+0x36>
c002824a:	0f bd cb             	bsr    ecx,ebx
c002824d:	83 f1 1f             	xor    ecx,0x1f
c0028250:	d3 e3                	shl    ebx,cl
c0028252:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028258:	b8 1e 04 00 00       	mov    eax,0x41e
c002825d:	29 c8                	sub    eax,ecx
c002825f:	c1 e0 14             	shl    eax,0x14
c0028262:	89 c1                	mov    ecx,eax
c0028264:	89 de                	mov    esi,ebx
c0028266:	c1 ee 0b             	shr    esi,0xb
c0028269:	09 f1                	or     ecx,esi
c002826b:	89 ca                	mov    edx,ecx
c002826d:	c1 e3 15             	shl    ebx,0x15
c0028270:	89 d8                	mov    eax,ebx
c0028272:	eb 04                	jmp    c0028278 <__floatunsidf+0x3a>
c0028274:	31 c0                	xor    eax,eax
c0028276:	31 d2                	xor    edx,edx
c0028278:	5b                   	pop    ebx
c0028279:	5e                   	pop    esi
c002827a:	5d                   	pop    ebp
c002827b:	c3                   	ret    

c002827c <__fixdfsi>:
c002827c:	55                   	push   ebp
c002827d:	89 e5                	mov    ebp,esp
c002827f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028282:	89 d1                	mov    ecx,edx
c0028284:	c1 e1 0b             	shl    ecx,0xb
c0028287:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002828d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028290:	c1 e8 15             	shr    eax,0x15
c0028293:	09 c1                	or     ecx,eax
c0028295:	c1 fa 14             	sar    edx,0x14
c0028298:	78 1f                	js     c00282b9 <__fixdfsi+0x3d>
c002829a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282a0:	31 c0                	xor    eax,eax
c00282a2:	83 fa 1e             	cmp    edx,0x1e
c00282a5:	77 40                	ja     c00282e7 <__fixdfsi+0x6b>
c00282a7:	89 c8                	mov    eax,ecx
c00282a9:	0d 00 00 00 80       	or     eax,0x80000000
c00282ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282b3:	29 d1                	sub    ecx,edx
c00282b5:	d3 e8                	shr    eax,cl
c00282b7:	eb 2e                	jmp    c00282e7 <__fixdfsi+0x6b>
c00282b9:	31 c0                	xor    eax,eax
c00282bb:	81 c2 01 04 00 00    	add    edx,0x401
c00282c1:	78 24                	js     c00282e7 <__fixdfsi+0x6b>
c00282c3:	83 fa 1e             	cmp    edx,0x1e
c00282c6:	7e 09                	jle    c00282d1 <__fixdfsi+0x55>
c00282c8:	83 fa 1f             	cmp    edx,0x1f
c00282cb:	75 18                	jne    c00282e5 <__fixdfsi+0x69>
c00282cd:	85 c9                	test   ecx,ecx
c00282cf:	75 14                	jne    c00282e5 <__fixdfsi+0x69>
c00282d1:	89 c8                	mov    eax,ecx
c00282d3:	0d 00 00 00 80       	or     eax,0x80000000
c00282d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282dd:	29 d1                	sub    ecx,edx
c00282df:	d3 e8                	shr    eax,cl
c00282e1:	f7 d8                	neg    eax
c00282e3:	eb 02                	jmp    c00282e7 <__fixdfsi+0x6b>
c00282e5:	31 c0                	xor    eax,eax
c00282e7:	5d                   	pop    ebp
c00282e8:	c3                   	ret    

c00282e9 <__fixunsdfsi>:
c00282e9:	55                   	push   ebp
c00282ea:	89 e5                	mov    ebp,esp
c00282ec:	53                   	push   ebx
c00282ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00282f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282f3:	89 d3                	mov    ebx,edx
c00282f5:	c1 fb 14             	sar    ebx,0x14
c00282f8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00282fe:	31 c0                	xor    eax,eax
c0028300:	83 fb 1f             	cmp    ebx,0x1f
c0028303:	77 1d                	ja     c0028322 <__fixunsdfsi+0x39>
c0028305:	89 d0                	mov    eax,edx
c0028307:	c1 e0 0b             	shl    eax,0xb
c002830a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002830f:	c1 e9 15             	shr    ecx,0x15
c0028312:	09 c8                	or     eax,ecx
c0028314:	0d 00 00 00 80       	or     eax,0x80000000
c0028319:	b9 1f 00 00 00       	mov    ecx,0x1f
c002831e:	29 d9                	sub    ecx,ebx
c0028320:	d3 e8                	shr    eax,cl
c0028322:	5b                   	pop    ebx
c0028323:	5d                   	pop    ebp
c0028324:	c3                   	ret    

c0028325 <__cmpdf2>:
c0028325:	55                   	push   ebp
c0028326:	89 e5                	mov    ebp,esp
c0028328:	57                   	push   edi
c0028329:	56                   	push   esi
c002832a:	53                   	push   ebx
c002832b:	83 ec 0c             	sub    esp,0xc
c002832e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028331:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028334:	89 ca                	mov    edx,ecx
c0028336:	c1 ea 14             	shr    edx,0x14
c0028339:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002833f:	89 cb                	mov    ebx,ecx
c0028341:	c1 fb 1f             	sar    ebx,0x1f
c0028344:	31 da                	xor    edx,ebx
c0028346:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028349:	89 df                	mov    edi,ebx
c002834b:	c1 e7 0b             	shl    edi,0xb
c002834e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028351:	c1 e1 0b             	shl    ecx,0xb
c0028354:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002835a:	c1 eb 15             	shr    ebx,0x15
c002835d:	09 d9                	or     ecx,ebx
c002835f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028362:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028365:	89 ce                	mov    esi,ecx
c0028367:	c1 ee 14             	shr    esi,0x14
c002836a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028370:	89 cb                	mov    ebx,ecx
c0028372:	c1 fb 1f             	sar    ebx,0x1f
c0028375:	31 de                	xor    esi,ebx
c0028377:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002837a:	89 df                	mov    edi,ebx
c002837c:	c1 e7 0b             	shl    edi,0xb
c002837f:	c1 e1 0b             	shl    ecx,0xb
c0028382:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028388:	c1 eb 15             	shr    ebx,0x15
c002838b:	09 d9                	or     ecx,ebx
c002838d:	89 d3                	mov    ebx,edx
c002838f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028395:	43                   	inc    ebx
c0028396:	83 fb 01             	cmp    ebx,0x1
c0028399:	77 08                	ja     c00283a3 <__cmpdf2+0x7e>
c002839b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002839e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283a1:	75 68                	jne    c002840b <__cmpdf2+0xe6>
c00283a3:	89 f3                	mov    ebx,esi
c00283a5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283ab:	43                   	inc    ebx
c00283ac:	83 fb 01             	cmp    ebx,0x1
c00283af:	77 06                	ja     c00283b7 <__cmpdf2+0x92>
c00283b1:	89 fb                	mov    ebx,edi
c00283b3:	09 cb                	or     ebx,ecx
c00283b5:	75 54                	jne    c002840b <__cmpdf2+0xe6>
c00283b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283ba:	09 f8                	or     eax,edi
c00283bc:	09 c8                	or     eax,ecx
c00283be:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283c1:	75 12                	jne    c00283d5 <__cmpdf2+0xb0>
c00283c3:	8d 42 01             	lea    eax,[edx+0x1]
c00283c6:	83 f8 01             	cmp    eax,0x1
c00283c9:	77 0a                	ja     c00283d5 <__cmpdf2+0xb0>
c00283cb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283ce:	31 c0                	xor    eax,eax
c00283d0:	83 fb 01             	cmp    ebx,0x1
c00283d3:	76 36                	jbe    c002840b <__cmpdf2+0xe6>
c00283d5:	b8 01 00 00 00       	mov    eax,0x1
c00283da:	39 f2                	cmp    edx,esi
c00283dc:	7f 2d                	jg     c002840b <__cmpdf2+0xe6>
c00283de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00283e3:	7c 26                	jl     c002840b <__cmpdf2+0xe6>
c00283e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283e8:	77 07                	ja     c00283f1 <__cmpdf2+0xcc>
c00283ea:	72 16                	jb     c0028402 <__cmpdf2+0xdd>
c00283ec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00283ef:	76 0a                	jbe    c00283fb <__cmpdf2+0xd6>
c00283f1:	89 d0                	mov    eax,edx
c00283f3:	c1 f8 1f             	sar    eax,0x1f
c00283f6:	83 c8 01             	or     eax,0x1
c00283f9:	eb 10                	jmp    c002840b <__cmpdf2+0xe6>
c00283fb:	b8 00 00 00 00       	mov    eax,0x0
c0028400:	73 09                	jae    c002840b <__cmpdf2+0xe6>
c0028402:	89 d0                	mov    eax,edx
c0028404:	c1 f8 1f             	sar    eax,0x1f
c0028407:	83 e0 02             	and    eax,0x2
c002840a:	48                   	dec    eax
c002840b:	83 c4 0c             	add    esp,0xc
c002840e:	5b                   	pop    ebx
c002840f:	5e                   	pop    esi
c0028410:	5f                   	pop    edi
c0028411:	5d                   	pop    ebp
c0028412:	c3                   	ret    

c0028413 <__eqdf2>:
c0028413:	55                   	push   ebp
c0028414:	89 e5                	mov    ebp,esp
c0028416:	50                   	push   eax
c0028417:	6a 01                	push   0x1
c0028419:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002841c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002841f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028422:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028425:	e8 fb fe ff ff       	call   c0028325 <__cmpdf2>
c002842a:	83 c4 18             	add    esp,0x18
c002842d:	c9                   	leave  
c002842e:	c3                   	ret    

c002842f <__nedf2>:
c002842f:	eb e2                	jmp    c0028413 <__eqdf2>

c0028431 <__gtdf2>:
c0028431:	55                   	push   ebp
c0028432:	89 e5                	mov    ebp,esp
c0028434:	50                   	push   eax
c0028435:	6a ff                	push   0xffffffff
c0028437:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002843a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002843d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028440:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028443:	e8 dd fe ff ff       	call   c0028325 <__cmpdf2>
c0028448:	83 c4 18             	add    esp,0x18
c002844b:	c9                   	leave  
c002844c:	c3                   	ret    

c002844d <__gedf2>:
c002844d:	eb e2                	jmp    c0028431 <__gtdf2>

c002844f <__ltdf2>:
c002844f:	eb c2                	jmp    c0028413 <__eqdf2>

c0028451 <__ledf2>:
c0028451:	eb c0                	jmp    c0028413 <__eqdf2>

c0028453 <__truncdfsf2>:
c0028453:	55                   	push   ebp
c0028454:	89 e5                	mov    ebp,esp
c0028456:	57                   	push   edi
c0028457:	56                   	push   esi
c0028458:	53                   	push   ebx
c0028459:	83 ec 0c             	sub    esp,0xc
c002845c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002845f:	89 d1                	mov    ecx,edx
c0028461:	c1 f9 14             	sar    ecx,0x14
c0028464:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028467:	89 df                	mov    edi,ebx
c0028469:	c1 e7 0b             	shl    edi,0xb
c002846c:	89 d0                	mov    eax,edx
c002846e:	c1 e0 0b             	shl    eax,0xb
c0028471:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028476:	c1 eb 15             	shr    ebx,0x15
c0028479:	09 d8                	or     eax,ebx
c002847b:	89 cb                	mov    ebx,ecx
c002847d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028483:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028489:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002848f:	0f 86 9e 00 00 00    	jbe    c0028533 <__truncdfsf2+0xe0>
c0028495:	85 db                	test   ebx,ebx
c0028497:	75 0a                	jne    c00284a3 <__truncdfsf2+0x50>
c0028499:	c1 fa 17             	sar    edx,0x17
c002849c:	30 d2                	xor    dl,dl
c002849e:	e9 84 00 00 00       	jmp    c0028527 <__truncdfsf2+0xd4>
c00284a3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284a9:	83 fe 83             	cmp    esi,0xffffff83
c00284ac:	7d 4b                	jge    c00284f9 <__truncdfsf2+0xa6>
c00284ae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284b3:	29 f1                	sub    ecx,esi
c00284b5:	83 f9 1f             	cmp    ecx,0x1f
c00284b8:	7f 6b                	jg     c0028525 <__truncdfsf2+0xd2>
c00284ba:	0d 00 00 00 80       	or     eax,0x80000000
c00284bf:	89 c3                	mov    ebx,eax
c00284c1:	d3 eb                	shr    ebx,cl
c00284c3:	be 01 00 00 00       	mov    esi,0x1
c00284c8:	d3 e6                	shl    esi,cl
c00284ca:	4e                   	dec    esi
c00284cb:	21 f0                	and    eax,esi
c00284cd:	09 f8                	or     eax,edi
c00284cf:	0f 95 c0             	setne  al
c00284d2:	0f b6 c0             	movzx  eax,al
c00284d5:	09 c3                	or     ebx,eax
c00284d7:	89 d9                	mov    ecx,ebx
c00284d9:	c1 e9 08             	shr    ecx,0x8
c00284dc:	f6 c3 7f             	test   bl,0x7f
c00284df:	0f 95 c0             	setne  al
c00284e2:	09 c8                	or     eax,ecx
c00284e4:	83 e0 01             	and    eax,0x1
c00284e7:	c1 eb 07             	shr    ebx,0x7
c00284ea:	21 c3                	and    ebx,eax
c00284ec:	81 e2 00 00 00 80    	and    edx,0x80000000
c00284f2:	09 d1                	or     ecx,edx
c00284f4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00284f7:	eb 76                	jmp    c002856f <__truncdfsf2+0x11c>
c00284f9:	83 c6 80             	add    esi,0xffffff80
c00284fc:	7e 1d                	jle    c002851b <__truncdfsf2+0xc8>
c00284fe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028504:	75 0b                	jne    c0028511 <__truncdfsf2+0xbe>
c0028506:	09 f8                	or     eax,edi
c0028508:	74 09                	je     c0028513 <__truncdfsf2+0xc0>
c002850a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002850f:	eb 02                	jmp    c0028513 <__truncdfsf2+0xc0>
c0028511:	31 c0                	xor    eax,eax
c0028513:	c1 fa 17             	sar    edx,0x17
c0028516:	80 ca ff             	or     dl,0xff
c0028519:	eb 0e                	jmp    c0028529 <__truncdfsf2+0xd6>
c002851b:	c1 fa 1f             	sar    edx,0x1f
c002851e:	c1 e2 08             	shl    edx,0x8
c0028521:	09 ca                	or     edx,ecx
c0028523:	eb 04                	jmp    c0028529 <__truncdfsf2+0xd6>
c0028525:	31 d2                	xor    edx,edx
c0028527:	31 c0                	xor    eax,eax
c0028529:	c1 e2 17             	shl    edx,0x17
c002852c:	c1 e8 08             	shr    eax,0x8
c002852f:	09 d0                	or     eax,edx
c0028531:	eb 3c                	jmp    c002856f <__truncdfsf2+0x11c>
c0028533:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028539:	89 ca                	mov    edx,ecx
c002853b:	c1 fa 0b             	sar    edx,0xb
c002853e:	c1 e2 08             	shl    edx,0x8
c0028541:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028544:	31 db                	xor    ebx,ebx
c0028546:	85 ff                	test   edi,edi
c0028548:	0f 95 c3             	setne  bl
c002854b:	09 d8                	or     eax,ebx
c002854d:	89 c3                	mov    ebx,eax
c002854f:	c1 eb 08             	shr    ebx,0x8
c0028552:	a8 7f                	test   al,0x7f
c0028554:	0f 95 c2             	setne  dl
c0028557:	89 d6                	mov    esi,edx
c0028559:	09 de                	or     esi,ebx
c002855b:	83 e6 01             	and    esi,0x1
c002855e:	c1 e8 07             	shr    eax,0x7
c0028561:	21 f0                	and    eax,esi
c0028563:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028566:	09 ca                	or     edx,ecx
c0028568:	c1 e2 17             	shl    edx,0x17
c002856b:	09 da                	or     edx,ebx
c002856d:	01 d0                	add    eax,edx
c002856f:	83 c4 0c             	add    esp,0xc
c0028572:	5b                   	pop    ebx
c0028573:	5e                   	pop    esi
c0028574:	5f                   	pop    edi
c0028575:	5d                   	pop    ebp
c0028576:	c3                   	ret    

c0028577 <__extendsfdf2>:
c0028577:	55                   	push   ebp
c0028578:	89 e5                	mov    ebp,esp
c002857a:	57                   	push   edi
c002857b:	56                   	push   esi
c002857c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002857f:	89 d1                	mov    ecx,edx
c0028581:	c1 f9 17             	sar    ecx,0x17
c0028584:	c1 e2 08             	shl    edx,0x8
c0028587:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002858d:	89 c8                	mov    eax,ecx
c002858f:	80 e4 f8             	and    ah,0xf8
c0028592:	8d 71 01             	lea    esi,[ecx+0x1]
c0028595:	81 e6 fe 00 00 00    	and    esi,0xfe
c002859b:	75 27                	jne    c00285c4 <__extendsfdf2+0x4d>
c002859d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285a3:	75 18                	jne    c00285bd <__extendsfdf2+0x46>
c00285a5:	85 d2                	test   edx,edx
c00285a7:	74 20                	je     c00285c9 <__extendsfdf2+0x52>
c00285a9:	41                   	inc    ecx
c00285aa:	01 d2                	add    edx,edx
c00285ac:	79 fb                	jns    c00285a9 <__extendsfdf2+0x32>
c00285ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285b4:	29 c8                	sub    eax,ecx
c00285b6:	05 81 03 00 00       	add    eax,0x381
c00285bb:	eb 0c                	jmp    c00285c9 <__extendsfdf2+0x52>
c00285bd:	05 00 07 00 00       	add    eax,0x700
c00285c2:	eb 05                	jmp    c00285c9 <__extendsfdf2+0x52>
c00285c4:	05 80 03 00 00       	add    eax,0x380
c00285c9:	c1 e0 14             	shl    eax,0x14
c00285cc:	89 c1                	mov    ecx,eax
c00285ce:	89 d0                	mov    eax,edx
c00285d0:	c1 e8 0b             	shr    eax,0xb
c00285d3:	09 c1                	or     ecx,eax
c00285d5:	c1 e2 15             	shl    edx,0x15
c00285d8:	89 d0                	mov    eax,edx
c00285da:	89 ca                	mov    edx,ecx
c00285dc:	5e                   	pop    esi
c00285dd:	5f                   	pop    edi
c00285de:	5d                   	pop    ebp
c00285df:	c3                   	ret    

c00285e0 <fabs>:
c00285e0:	83 ec 0c             	sub    esp,0xc
c00285e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00285ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00285ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00285f7:	dd 04 24             	fld    QWORD PTR [esp]
c00285fa:	83 c4 0c             	add    esp,0xc
c00285fd:	c3                   	ret    
c00285fe:	66 90                	xchg   ax,ax

c0028600 <lrint>:
c0028600:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028604:	83 ec 04             	sub    esp,0x4
c0028607:	db 1c 24             	fistp  DWORD PTR [esp]
c002860a:	58                   	pop    eax
c002860b:	c3                   	ret    

c002860c <lrintf>:
c002860c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028610:	83 ec 04             	sub    esp,0x4
c0028613:	db 1c 24             	fistp  DWORD PTR [esp]
c0028616:	58                   	pop    eax
c0028617:	c3                   	ret    

Disassembly of section .init:

c0028618 <_init>:
c0028618:	55                   	push   ebp
c0028619:	89 e5                	mov    ebp,esp
c002861b:	e8 f8 7a fd ff       	call   c0000118 <frame_dummy>
c0028620:	e8 63 e0 ff ff       	call   c0026688 <__do_global_ctors_aux>
c0028625:	5d                   	pop    ebp
c0028626:	c3                   	ret    

Disassembly of section .fini:

c0028627 <_fini>:
c0028627:	55                   	push   ebp
c0028628:	89 e5                	mov    ebp,esp
c002862a:	e8 79 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002862f:	5d                   	pop    ebp
c0028630:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028632 <Computer::~Computer()>:
c0028632:	83 ec 0c             	sub    esp,0xc
c0028635:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c002863a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863e:	89 10                	mov    DWORD PTR [eax],edx
c0028640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028644:	83 ec 0c             	sub    esp,0xc
c0028647:	50                   	push   eax
c0028648:	e8 7f bb fe ff       	call   c00141cc <Device::~Device()>
c002864d:	83 c4 10             	add    esp,0x10
c0028650:	90                   	nop
c0028651:	83 c4 0c             	add    esp,0xc
c0028654:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028656 <Computer::~Computer()>:
c0028656:	83 ec 0c             	sub    esp,0xc
c0028659:	83 ec 0c             	sub    esp,0xc
c002865c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028660:	e8 cd ff ff ff       	call   c0028632 <Computer::~Computer()>
c0028665:	83 c4 10             	add    esp,0x10
c0028668:	83 ec 08             	sub    esp,0x8
c002866b:	68 ec 01 00 00       	push   0x1ec
c0028670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028674:	e8 7b a7 fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028679:	83 c4 10             	add    esp,0x10
c002867c:	83 c4 0c             	add    esp,0xc
c002867f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028680 <idleCommon()>:
c0028680:	83 ec 0c             	sub    esp,0xc
c0028683:	e8 12 57 ff ff       	call   c001dd9a <lockScheduler()>
c0028688:	e8 49 5a ff ff       	call   c001e0d6 <schedule()>
c002868d:	83 c4 0c             	add    esp,0xc
c0028690:	e9 07 57 ff ff       	jmp    c001dd9c <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028696 <LinkedList<UnixFile>::~LinkedList()>:
c0028696:	90                   	nop
c0028697:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028698 <LinkedList<UnixFile>::LinkedList()>:
c0028698:	83 ec 0c             	sub    esp,0xc
c002869b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286db:	83 ec 0c             	sub    esp,0xc
c00286de:	68 26 a4 02 c0       	push   0xc002a426
c00286e3:	e8 ec a7 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00286e8:	83 c4 10             	add    esp,0x10
c00286eb:	90                   	nop
c00286ec:	83 c4 0c             	add    esp,0xc
c00286ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00286f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00286f0:	83 ec 0c             	sub    esp,0xc
c00286f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286f8:	75 10                	jne    c002870a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00286fa:	83 ec 0c             	sub    esp,0xc
c00286fd:	68 40 a4 02 c0       	push   0xc002a440
c0028702:	e8 6e 1e ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028707:	83 c4 10             	add    esp,0x10
c002870a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028710:	85 c0                	test   eax,eax
c0028712:	74 34                	je     c0028748 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002871b:	85 c0                	test   eax,eax
c002871d:	74 29                	je     c0028748 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002871f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028726:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002872a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002872d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028731:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028735:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002873f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028746:	eb 65                	jmp    c00287ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874c:	8b 00                	mov    eax,DWORD PTR [eax]
c002874e:	85 c0                	test   eax,eax
c0028750:	75 4b                	jne    c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028759:	85 c0                	test   eax,eax
c002875b:	75 40                	jne    c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002875d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028761:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028765:	89 10                	mov    DWORD PTR [eax],edx
c0028767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002876f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028779:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028787:	85 c0                	test   eax,eax
c0028789:	74 22                	je     c00287ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002878b:	83 ec 0c             	sub    esp,0xc
c002878e:	68 62 a4 02 c0       	push   0xc002a462
c0028793:	e8 dd 1d ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028798:	83 c4 10             	add    esp,0x10
c002879b:	eb 10                	jmp    c00287ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002879d:	83 ec 0c             	sub    esp,0xc
c00287a0:	68 6c a4 02 c0       	push   0xc002a46c
c00287a5:	e8 cb 1d ff ff       	call   c001a575 <Krnl::panic(char const*)>
c00287aa:	83 c4 10             	add    esp,0x10
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b4:	8d 50 01             	lea    edx,[eax+0x1]
c00287b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287be:	90                   	nop
c00287bf:	83 c4 0c             	add    esp,0xc
c00287c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287c4 <LinkedList<UnixFile>::getFirstElement()>:
c00287c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287cc <LinkedList<UnixFile>::removeFirst()>:
c00287cc:	83 ec 0c             	sub    esp,0xc
c00287cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287d5:	85 c0                	test   eax,eax
c00287d7:	75 12                	jne    c00287eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00287d9:	83 ec 0c             	sub    esp,0xc
c00287dc:	68 78 a4 02 c0       	push   0xc002a478
c00287e1:	e8 8f 1d ff ff       	call   c001a575 <Krnl::panic(char const*)>
c00287e6:	83 c4 10             	add    esp,0x10
c00287e9:	eb 7e                	jmp    c0028869 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00287eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f5:	85 c0                	test   eax,eax
c00287f7:	74 10                	je     c0028809 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00287f9:	83 ec 0c             	sub    esp,0xc
c00287fc:	68 c3 a4 02 c0       	push   0xc002a4c3
c0028801:	e8 6f 1d ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028806:	83 c4 10             	add    esp,0x10
c0028809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880d:	8b 00                	mov    eax,DWORD PTR [eax]
c002880f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028812:	85 c0                	test   eax,eax
c0028814:	75 33                	jne    c0028849 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028824:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028832:	83 f8 01             	cmp    eax,0x1
c0028835:	74 21                	je     c0028858 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028837:	83 ec 0c             	sub    esp,0xc
c002883a:	68 9c a4 02 c0       	push   0xc002a49c
c002883f:	e8 31 1d ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028844:	83 c4 10             	add    esp,0x10
c0028847:	eb 0f                	jmp    c0028858 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884d:	8b 00                	mov    eax,DWORD PTR [eax]
c002884f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	89 10                	mov    DWORD PTR [eax],edx
c0028858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002885f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028866:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028869:	83 c4 0c             	add    esp,0xc
c002886c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002886e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002886e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028875:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028876 <DriverlessDevice::~DriverlessDevice()>:
c0028876:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c002887b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002887f:	89 10                	mov    DWORD PTR [eax],edx
c0028881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028885:	50                   	push   eax
c0028886:	e8 41 b9 fe ff       	call   c00141cc <Device::~Device()>
c002888b:	83 c4 04             	add    esp,0x4
c002888e:	90                   	nop
c002888f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028890 <DriverlessDevice::~DriverlessDevice()>:
c0028890:	83 ec 0c             	sub    esp,0xc
c0028893:	83 ec 0c             	sub    esp,0xc
c0028896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002889a:	e8 d7 ff ff ff       	call   c0028876 <DriverlessDevice::~DriverlessDevice()>
c002889f:	83 c4 10             	add    esp,0x10
c00288a2:	83 ec 08             	sub    esp,0x8
c00288a5:	68 58 01 00 00       	push   0x158
c00288aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ae:	e8 41 a5 fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00288b3:	83 c4 10             	add    esp,0x10
c00288b6:	83 c4 0c             	add    esp,0xc
c00288b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288ba <LinkedList<Device>::addElement(Device*)>:
c00288ba:	83 ec 0c             	sub    esp,0xc
c00288bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288c2:	75 10                	jne    c00288d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288c4:	83 ec 0c             	sub    esp,0xc
c00288c7:	68 40 a4 02 c0       	push   0xc002a440
c00288cc:	e8 a4 1c ff ff       	call   c001a575 <Krnl::panic(char const*)>
c00288d1:	83 c4 10             	add    esp,0x10
c00288d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288da:	85 c0                	test   eax,eax
c00288dc:	74 3a                	je     c0028918 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e5:	85 c0                	test   eax,eax
c00288e7:	74 2f                	je     c0028918 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00288fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028902:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028909:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002890c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028916:	eb 68                	jmp    c0028980 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891c:	8b 00                	mov    eax,DWORD PTR [eax]
c002891e:	85 c0                	test   eax,eax
c0028920:	75 4e                	jne    c0028970 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028929:	85 c0                	test   eax,eax
c002892b:	75 43                	jne    c0028970 <LinkedList<Device>::addElement(Device*)+0xb6>
c002892d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028931:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028935:	89 10                	mov    DWORD PTR [eax],edx
c0028937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002893f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028949:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028957:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002895a:	85 c0                	test   eax,eax
c002895c:	74 22                	je     c0028980 <LinkedList<Device>::addElement(Device*)+0xc6>
c002895e:	83 ec 0c             	sub    esp,0xc
c0028961:	68 62 a4 02 c0       	push   0xc002a462
c0028966:	e8 0a 1c ff ff       	call   c001a575 <Krnl::panic(char const*)>
c002896b:	83 c4 10             	add    esp,0x10
c002896e:	eb 10                	jmp    c0028980 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028970:	83 ec 0c             	sub    esp,0xc
c0028973:	68 6c a4 02 c0       	push   0xc002a46c
c0028978:	e8 f8 1b ff ff       	call   c001a575 <Krnl::panic(char const*)>
c002897d:	83 c4 10             	add    esp,0x10
c0028980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028987:	8d 50 01             	lea    edx,[eax+0x1]
c002898a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028991:	90                   	nop
c0028992:	83 c4 0c             	add    esp,0xc
c0028995:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028996 <LinkedList<Device>::LinkedList()>:
c0028996:	83 ec 0c             	sub    esp,0xc
c0028999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289d9:	83 ec 0c             	sub    esp,0xc
c00289dc:	68 26 a4 02 c0       	push   0xc002a426
c00289e1:	e8 ee a4 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c00289e6:	83 c4 10             	add    esp,0x10
c00289e9:	90                   	nop
c00289ea:	83 c4 0c             	add    esp,0xc
c00289ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00289ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00289f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fc:	85 c0                	test   eax,eax
c00289fe:	75 0e                	jne    c0028a0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a07:	85 c0                	test   eax,eax
c0028a09:	75 03                	jne    c0028a0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a0b:	b0 01                	mov    al,0x1
c0028a0d:	c3                   	ret    
c0028a0e:	b0 00                	mov    al,0x0
c0028a10:	90                   	nop
c0028a11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a12:	83 ec 0c             	sub    esp,0xc
c0028a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a19:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1b:	85 c0                	test   eax,eax
c0028a1d:	75 15                	jne    c0028a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a1f:	83 ec 0c             	sub    esp,0xc
c0028a22:	68 78 a4 02 c0       	push   0xc002a478
c0028a27:	e8 49 1b ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028a2c:	83 c4 10             	add    esp,0x10
c0028a2f:	e9 88 00 00 00       	jmp    c0028abc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a3e:	85 c0                	test   eax,eax
c0028a40:	0f 95 c0             	setne  al
c0028a43:	84 c0                	test   al,al
c0028a45:	74 10                	je     c0028a57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a47:	83 ec 0c             	sub    esp,0xc
c0028a4a:	68 c3 a4 02 c0       	push   0xc002a4c3
c0028a4f:	e8 21 1b ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028a54:	83 c4 10             	add    esp,0x10
c0028a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a60:	85 c0                	test   eax,eax
c0028a62:	0f 94 c0             	sete   al
c0028a65:	84 c0                	test   al,al
c0028a67:	74 33                	je     c0028a9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a85:	83 f8 01             	cmp    eax,0x1
c0028a88:	74 21                	je     c0028aab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a8a:	83 ec 0c             	sub    esp,0xc
c0028a8d:	68 9c a4 02 c0       	push   0xc002a49c
c0028a92:	e8 de 1a ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028a97:	83 c4 10             	add    esp,0x10
c0028a9a:	eb 0f                	jmp    c0028aab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aa2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	89 10                	mov    DWORD PTR [eax],edx
c0028aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028abc:	83 c4 0c             	add    esp,0xc
c0028abf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028ac0:	83 ec 0c             	sub    esp,0xc
c0028ac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ac8:	75 10                	jne    c0028ada <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028aca:	83 ec 0c             	sub    esp,0xc
c0028acd:	68 40 a4 02 c0       	push   0xc002a440
c0028ad2:	e8 9e 1a ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028ad7:	83 c4 10             	add    esp,0x10
c0028ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ae0:	85 c0                	test   eax,eax
c0028ae2:	74 34                	je     c0028b18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aeb:	85 c0                	test   eax,eax
c0028aed:	74 29                	je     c0028b18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028af6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028afa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b16:	eb 65                	jmp    c0028b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1e:	85 c0                	test   eax,eax
c0028b20:	75 4b                	jne    c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b29:	85 c0                	test   eax,eax
c0028b2b:	75 40                	jne    c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b35:	89 10                	mov    DWORD PTR [eax],edx
c0028b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b57:	85 c0                	test   eax,eax
c0028b59:	74 22                	je     c0028b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b5b:	83 ec 0c             	sub    esp,0xc
c0028b5e:	68 62 a4 02 c0       	push   0xc002a462
c0028b63:	e8 0d 1a ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028b68:	83 c4 10             	add    esp,0x10
c0028b6b:	eb 10                	jmp    c0028b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b6d:	83 ec 0c             	sub    esp,0xc
c0028b70:	68 6c a4 02 c0       	push   0xc002a46c
c0028b75:	e8 fb 19 ff ff       	call   c001a575 <Krnl::panic(char const*)>
c0028b7a:	83 c4 10             	add    esp,0x10
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b84:	8d 50 01             	lea    edx,[eax+0x1]
c0028b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b8e:	90                   	nop
c0028b8f:	83 c4 0c             	add    esp,0xc
c0028b92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028b94 <ACPI::~ACPI()>:
c0028b94:	83 ec 0c             	sub    esp,0xc
c0028b97:	ba 4c b5 02 c0       	mov    edx,0xc002b54c
c0028b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba0:	89 10                	mov    DWORD PTR [eax],edx
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	83 ec 0c             	sub    esp,0xc
c0028ba9:	50                   	push   eax
c0028baa:	e8 1d b6 fe ff       	call   c00141cc <Device::~Device()>
c0028baf:	83 c4 10             	add    esp,0x10
c0028bb2:	90                   	nop
c0028bb3:	83 c4 0c             	add    esp,0xc
c0028bb6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028bb8 <ACPI::~ACPI()>:
c0028bb8:	83 ec 0c             	sub    esp,0xc
c0028bbb:	83 ec 0c             	sub    esp,0xc
c0028bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc2:	e8 cd ff ff ff       	call   c0028b94 <ACPI::~ACPI()>
c0028bc7:	83 c4 10             	add    esp,0x10
c0028bca:	83 ec 08             	sub    esp,0x8
c0028bcd:	68 68 12 00 00       	push   0x1268
c0028bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd6:	e8 19 a2 fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028bdb:	83 c4 10             	add    esp,0x10
c0028bde:	83 c4 0c             	add    esp,0xc
c0028be1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028be2 <CPU::~CPU()>:
c0028be2:	83 ec 0c             	sub    esp,0xc
c0028be5:	ba 3c b9 02 c0       	mov    edx,0xc002b93c
c0028bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bee:	89 10                	mov    DWORD PTR [eax],edx
c0028bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf4:	83 ec 0c             	sub    esp,0xc
c0028bf7:	50                   	push   eax
c0028bf8:	e8 cf b5 fe ff       	call   c00141cc <Device::~Device()>
c0028bfd:	83 c4 10             	add    esp,0x10
c0028c00:	90                   	nop
c0028c01:	83 c4 0c             	add    esp,0xc
c0028c04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c06 <CPU::~CPU()>:
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	83 ec 0c             	sub    esp,0xc
c0028c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c10:	e8 cd ff ff ff       	call   c0028be2 <CPU::~CPU()>
c0028c15:	83 c4 10             	add    esp,0x10
c0028c18:	83 ec 08             	sub    esp,0x8
c0028c1b:	68 98 11 00 00       	push   0x1198
c0028c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c24:	e8 cb a1 fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028c29:	83 c4 10             	add    esp,0x10
c0028c2c:	83 c4 0c             	add    esp,0xc
c0028c2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c30:	90                   	nop
c0028c31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c32 <ThreadControlBlock::ThreadControlBlock()>:
c0028c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c62:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c6a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c6e:	90                   	nop
c0028c6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028c70:	83 ec 0c             	sub    esp,0xc
c0028c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cb3:	83 ec 0c             	sub    esp,0xc
c0028cb6:	68 26 a4 02 c0       	push   0xc002a426
c0028cbb:	e8 14 a2 fe ff       	call   c0012ed4 <Dbg::kprintf(char const*, ...)>
c0028cc0:	83 c4 10             	add    esp,0x10
c0028cc3:	90                   	nop
c0028cc4:	83 c4 0c             	add    esp,0xc
c0028cc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028cc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ccc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ccf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028cd0 <Vm::_FPUState::_FPUState()>:
c0028cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028cdb:	90                   	nop
c0028cdc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028cde <PCI::~PCI()>:
c0028cde:	83 ec 0c             	sub    esp,0xc
c0028ce1:	ba 30 ca 02 c0       	mov    edx,0xc002ca30
c0028ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cea:	89 10                	mov    DWORD PTR [eax],edx
c0028cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	50                   	push   eax
c0028cf4:	e8 ab ae fe ff       	call   c0013ba4 <Bus::~Bus()>
c0028cf9:	83 c4 10             	add    esp,0x10
c0028cfc:	90                   	nop
c0028cfd:	83 c4 0c             	add    esp,0xc
c0028d00:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d02 <PCI::~PCI()>:
c0028d02:	83 ec 0c             	sub    esp,0xc
c0028d05:	83 ec 0c             	sub    esp,0xc
c0028d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0c:	e8 cd ff ff ff       	call   c0028cde <PCI::~PCI()>
c0028d11:	83 c4 10             	add    esp,0x10
c0028d14:	83 ec 08             	sub    esp,0x8
c0028d17:	68 58 01 00 00       	push   0x158
c0028d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d20:	e8 cf a0 fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028d25:	83 c4 10             	add    esp,0x10
c0028d28:	83 c4 0c             	add    esp,0xc
c0028d2b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d2c <IDE::~IDE()>:
c0028d2c:	83 ec 0c             	sub    esp,0xc
c0028d2f:	ba 94 cc 02 c0       	mov    edx,0xc002cc94
c0028d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d38:	89 10                	mov    DWORD PTR [eax],edx
c0028d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	50                   	push   eax
c0028d42:	e8 75 b9 fe ff       	call   c00146bc <HardDiskController::~HardDiskController()>
c0028d47:	83 c4 10             	add    esp,0x10
c0028d4a:	90                   	nop
c0028d4b:	83 c4 0c             	add    esp,0xc
c0028d4e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d50 <IDE::~IDE()>:
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	83 ec 0c             	sub    esp,0xc
c0028d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5a:	e8 cd ff ff ff       	call   c0028d2c <IDE::~IDE()>
c0028d5f:	83 c4 10             	add    esp,0x10
c0028d62:	83 ec 08             	sub    esp,0x8
c0028d65:	68 70 02 00 00       	push   0x270
c0028d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6e:	e8 81 a0 fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028d73:	83 c4 10             	add    esp,0x10
c0028d76:	83 c4 0c             	add    esp,0xc
c0028d79:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028d7a <SATABus::~SATABus()>:
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	ba 74 cd 02 c0       	mov    edx,0xc002cd74
c0028d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d86:	89 10                	mov    DWORD PTR [eax],edx
c0028d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	50                   	push   eax
c0028d90:	e8 27 b9 fe ff       	call   c00146bc <HardDiskController::~HardDiskController()>
c0028d95:	83 c4 10             	add    esp,0x10
c0028d98:	90                   	nop
c0028d99:	83 c4 0c             	add    esp,0xc
c0028d9c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028d9e <SATABus::~SATABus()>:
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	83 ec 0c             	sub    esp,0xc
c0028da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da8:	e8 cd ff ff ff       	call   c0028d7a <SATABus::~SATABus()>
c0028dad:	83 c4 10             	add    esp,0x10
c0028db0:	83 ec 08             	sub    esp,0x8
c0028db3:	68 64 01 00 00       	push   0x164
c0028db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dbc:	e8 33 a0 fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	83 c4 0c             	add    esp,0xc
c0028dc7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028dc8 <ATA::~ATA()>:
c0028dc8:	83 ec 0c             	sub    esp,0xc
c0028dcb:	ba c0 cd 02 c0       	mov    edx,0xc002cdc0
c0028dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd4:	89 10                	mov    DWORD PTR [eax],edx
c0028dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	50                   	push   eax
c0028dde:	e8 cb b9 fe ff       	call   c00147ae <PhysicalDisk::~PhysicalDisk()>
c0028de3:	83 c4 10             	add    esp,0x10
c0028de6:	90                   	nop
c0028de7:	83 c4 0c             	add    esp,0xc
c0028dea:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028dec <ATA::~ATA()>:
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	83 ec 0c             	sub    esp,0xc
c0028df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df6:	e8 cd ff ff ff       	call   c0028dc8 <ATA::~ATA()>
c0028dfb:	83 c4 10             	add    esp,0x10
c0028dfe:	83 ec 08             	sub    esp,0x8
c0028e01:	68 7c 01 00 00       	push   0x17c
c0028e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0a:	e8 e5 9f fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028e0f:	83 c4 10             	add    esp,0x10
c0028e12:	83 c4 0c             	add    esp,0xc
c0028e15:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e16 <ATAPI::~ATAPI()>:
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	ba f8 cd 02 c0       	mov    edx,0xc002cdf8
c0028e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e22:	89 10                	mov    DWORD PTR [eax],edx
c0028e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	50                   	push   eax
c0028e2c:	e8 7d b9 fe ff       	call   c00147ae <PhysicalDisk::~PhysicalDisk()>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	90                   	nop
c0028e35:	83 c4 0c             	add    esp,0xc
c0028e38:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e3a <ATAPI::~ATAPI()>:
c0028e3a:	83 ec 0c             	sub    esp,0xc
c0028e3d:	83 ec 0c             	sub    esp,0xc
c0028e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e44:	e8 cd ff ff ff       	call   c0028e16 <ATAPI::~ATAPI()>
c0028e49:	83 c4 10             	add    esp,0x10
c0028e4c:	83 ec 08             	sub    esp,0x8
c0028e4f:	68 80 01 00 00       	push   0x180
c0028e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e58:	e8 97 9f fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028e5d:	83 c4 10             	add    esp,0x10
c0028e60:	83 c4 0c             	add    esp,0xc
c0028e63:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e64 <SATA::~SATA()>:
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	ba ac ce 02 c0       	mov    edx,0xc002ceac
c0028e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e70:	89 10                	mov    DWORD PTR [eax],edx
c0028e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	50                   	push   eax
c0028e7a:	e8 2f b9 fe ff       	call   c00147ae <PhysicalDisk::~PhysicalDisk()>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	90                   	nop
c0028e83:	83 c4 0c             	add    esp,0xc
c0028e86:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028e88 <SATA::~SATA()>:
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	83 ec 0c             	sub    esp,0xc
c0028e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e92:	e8 cd ff ff ff       	call   c0028e64 <SATA::~SATA()>
c0028e97:	83 c4 10             	add    esp,0x10
c0028e9a:	83 ec 08             	sub    esp,0x8
c0028e9d:	68 7c 01 00 00       	push   0x17c
c0028ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea6:	e8 49 9f fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	83 c4 0c             	add    esp,0xc
c0028eb1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028eb2 <SATAPI::~SATAPI()>:
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	ba 88 cf 02 c0       	mov    edx,0xc002cf88
c0028eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebe:	89 10                	mov    DWORD PTR [eax],edx
c0028ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	50                   	push   eax
c0028ec8:	e8 e1 b8 fe ff       	call   c00147ae <PhysicalDisk::~PhysicalDisk()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	90                   	nop
c0028ed1:	83 c4 0c             	add    esp,0xc
c0028ed4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ed6 <SATAPI::~SATAPI()>:
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	83 ec 0c             	sub    esp,0xc
c0028edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee0:	e8 cd ff ff ff       	call   c0028eb2 <SATAPI::~SATAPI()>
c0028ee5:	83 c4 10             	add    esp,0x10
c0028ee8:	83 ec 08             	sub    esp,0x8
c0028eeb:	68 80 01 00 00       	push   0x180
c0028ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef4:	e8 fb 9e fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	83 c4 0c             	add    esp,0xc
c0028eff:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f00 <AVX::~AVX()>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	ba c8 cf 02 c0       	mov    edx,0xc002cfc8
c0028f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0c:	89 10                	mov    DWORD PTR [eax],edx
c0028f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	50                   	push   eax
c0028f16:	e8 17 b9 fe ff       	call   c0014832 <FPU::~FPU()>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	90                   	nop
c0028f1f:	83 c4 0c             	add    esp,0xc
c0028f22:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f24 <AVX::~AVX()>:
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	83 ec 0c             	sub    esp,0xc
c0028f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2e:	e8 cd ff ff ff       	call   c0028f00 <AVX::~AVX()>
c0028f33:	83 c4 10             	add    esp,0x10
c0028f36:	83 ec 08             	sub    esp,0x8
c0028f39:	68 58 01 00 00       	push   0x158
c0028f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f42:	e8 ad 9e fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028f47:	83 c4 10             	add    esp,0x10
c0028f4a:	83 c4 0c             	add    esp,0xc
c0028f4d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f4e <MMX::~MMX()>:
c0028f4e:	83 ec 0c             	sub    esp,0xc
c0028f51:	ba 08 d0 02 c0       	mov    edx,0xc002d008
c0028f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5a:	89 10                	mov    DWORD PTR [eax],edx
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	50                   	push   eax
c0028f64:	e8 c9 b8 fe ff       	call   c0014832 <FPU::~FPU()>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	90                   	nop
c0028f6d:	83 c4 0c             	add    esp,0xc
c0028f70:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f72 <MMX::~MMX()>:
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	83 ec 0c             	sub    esp,0xc
c0028f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7c:	e8 cd ff ff ff       	call   c0028f4e <MMX::~MMX()>
c0028f81:	83 c4 10             	add    esp,0x10
c0028f84:	83 ec 08             	sub    esp,0x8
c0028f87:	68 58 01 00 00       	push   0x158
c0028f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f90:	e8 5f 9e fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028f95:	83 c4 10             	add    esp,0x10
c0028f98:	83 c4 0c             	add    esp,0xc
c0028f9b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028f9c <SSE::~SSE()>:
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	ba 48 d0 02 c0       	mov    edx,0xc002d048
c0028fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa8:	89 10                	mov    DWORD PTR [eax],edx
c0028faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	50                   	push   eax
c0028fb2:	e8 7b b8 fe ff       	call   c0014832 <FPU::~FPU()>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	90                   	nop
c0028fbb:	83 c4 0c             	add    esp,0xc
c0028fbe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028fc0 <SSE::~SSE()>:
c0028fc0:	83 ec 0c             	sub    esp,0xc
c0028fc3:	83 ec 0c             	sub    esp,0xc
c0028fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fca:	e8 cd ff ff ff       	call   c0028f9c <SSE::~SSE()>
c0028fcf:	83 c4 10             	add    esp,0x10
c0028fd2:	83 ec 08             	sub    esp,0x8
c0028fd5:	68 58 01 00 00       	push   0x158
c0028fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fde:	e8 11 9e fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0028fe3:	83 c4 10             	add    esp,0x10
c0028fe6:	83 c4 0c             	add    esp,0xc
c0028fe9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028fea <x87::~x87()>:
c0028fea:	83 ec 0c             	sub    esp,0xc
c0028fed:	ba 88 d0 02 c0       	mov    edx,0xc002d088
c0028ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff6:	89 10                	mov    DWORD PTR [eax],edx
c0028ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffc:	83 ec 0c             	sub    esp,0xc
c0028fff:	50                   	push   eax
c0029000:	e8 2d b8 fe ff       	call   c0014832 <FPU::~FPU()>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	90                   	nop
c0029009:	83 c4 0c             	add    esp,0xc
c002900c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002900e <x87::~x87()>:
c002900e:	83 ec 0c             	sub    esp,0xc
c0029011:	83 ec 0c             	sub    esp,0xc
c0029014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029018:	e8 cd ff ff ff       	call   c0028fea <x87::~x87()>
c002901d:	83 c4 10             	add    esp,0x10
c0029020:	83 ec 08             	sub    esp,0x8
c0029023:	68 58 01 00 00       	push   0x158
c0029028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902c:	e8 c3 9d fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0029031:	83 c4 10             	add    esp,0x10
c0029034:	83 c4 0c             	add    esp,0xc
c0029037:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029038 <IOAPIC::~IOAPIC()>:
c0029038:	83 ec 0c             	sub    esp,0xc
c002903b:	ba e0 d1 02 c0       	mov    edx,0xc002d1e0
c0029040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029044:	89 10                	mov    DWORD PTR [eax],edx
c0029046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904a:	83 ec 0c             	sub    esp,0xc
c002904d:	50                   	push   eax
c002904e:	e8 79 b1 fe ff       	call   c00141cc <Device::~Device()>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	90                   	nop
c0029057:	83 c4 0c             	add    esp,0xc
c002905a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002905c <IOAPIC::~IOAPIC()>:
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	83 ec 0c             	sub    esp,0xc
c0029062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029066:	e8 cd ff ff ff       	call   c0029038 <IOAPIC::~IOAPIC()>
c002906b:	83 c4 10             	add    esp,0x10
c002906e:	83 ec 08             	sub    esp,0x8
c0029071:	68 68 01 00 00       	push   0x168
c0029076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907a:	e8 75 9d fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c002907f:	83 c4 10             	add    esp,0x10
c0029082:	83 c4 0c             	add    esp,0xc
c0029085:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029086 <APIC::~APIC()>:
c0029086:	83 ec 0c             	sub    esp,0xc
c0029089:	ba 98 d1 02 c0       	mov    edx,0xc002d198
c002908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029092:	89 10                	mov    DWORD PTR [eax],edx
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	83 ec 0c             	sub    esp,0xc
c002909b:	50                   	push   eax
c002909c:	e8 5b bc fe ff       	call   c0014cfc <InterruptController::~InterruptController()>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	90                   	nop
c00290a5:	83 c4 0c             	add    esp,0xc
c00290a8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290aa <APIC::~APIC()>:
c00290aa:	83 ec 0c             	sub    esp,0xc
c00290ad:	83 ec 0c             	sub    esp,0xc
c00290b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b4:	e8 cd ff ff ff       	call   c0029086 <APIC::~APIC()>
c00290b9:	83 c4 10             	add    esp,0x10
c00290bc:	83 ec 08             	sub    esp,0x8
c00290bf:	68 58 21 00 00       	push   0x2158
c00290c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c8:	e8 27 9d fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00290cd:	83 c4 10             	add    esp,0x10
c00290d0:	83 c4 0c             	add    esp,0xc
c00290d3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00290d4 <PIC::~PIC()>:
c00290d4:	83 ec 0c             	sub    esp,0xc
c00290d7:	ba 30 d2 02 c0       	mov    edx,0xc002d230
c00290dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e0:	89 10                	mov    DWORD PTR [eax],edx
c00290e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e6:	83 ec 0c             	sub    esp,0xc
c00290e9:	50                   	push   eax
c00290ea:	e8 0d bc fe ff       	call   c0014cfc <InterruptController::~InterruptController()>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	90                   	nop
c00290f3:	83 c4 0c             	add    esp,0xc
c00290f6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00290f8 <PIC::~PIC()>:
c00290f8:	83 ec 0c             	sub    esp,0xc
c00290fb:	83 ec 0c             	sub    esp,0xc
c00290fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029102:	e8 cd ff ff ff       	call   c00290d4 <PIC::~PIC()>
c0029107:	83 c4 10             	add    esp,0x10
c002910a:	83 ec 08             	sub    esp,0x8
c002910d:	68 58 21 00 00       	push   0x2158
c0029112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029116:	e8 d9 9c fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c002911b:	83 c4 10             	add    esp,0x10
c002911e:	83 c4 0c             	add    esp,0xc
c0029121:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029122 <APICTimer::~APICTimer()>:
c0029122:	83 ec 0c             	sub    esp,0xc
c0029125:	ba 84 d2 02 c0       	mov    edx,0xc002d284
c002912a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912e:	89 10                	mov    DWORD PTR [eax],edx
c0029130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029134:	83 ec 0c             	sub    esp,0xc
c0029137:	50                   	push   eax
c0029138:	e8 0b db fe ff       	call   c0016c48 <Timer::~Timer()>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	90                   	nop
c0029141:	83 c4 0c             	add    esp,0xc
c0029144:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029146 <APICTimer::~APICTimer()>:
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	83 ec 0c             	sub    esp,0xc
c002914c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029150:	e8 cd ff ff ff       	call   c0029122 <APICTimer::~APICTimer()>
c0029155:	83 c4 10             	add    esp,0x10
c0029158:	83 ec 08             	sub    esp,0x8
c002915b:	68 60 01 00 00       	push   0x160
c0029160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029164:	e8 8b 9c fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c0029169:	83 c4 10             	add    esp,0x10
c002916c:	83 c4 0c             	add    esp,0xc
c002916f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029170 <PIT::~PIT()>:
c0029170:	83 ec 0c             	sub    esp,0xc
c0029173:	ba d4 d2 02 c0       	mov    edx,0xc002d2d4
c0029178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917c:	89 10                	mov    DWORD PTR [eax],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	83 ec 0c             	sub    esp,0xc
c0029185:	50                   	push   eax
c0029186:	e8 bd da fe ff       	call   c0016c48 <Timer::~Timer()>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	90                   	nop
c002918f:	83 c4 0c             	add    esp,0xc
c0029192:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029194 <PIT::~PIT()>:
c0029194:	83 ec 0c             	sub    esp,0xc
c0029197:	83 ec 0c             	sub    esp,0xc
c002919a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002919e:	e8 cd ff ff ff       	call   c0029170 <PIT::~PIT()>
c00291a3:	83 c4 10             	add    esp,0x10
c00291a6:	83 ec 08             	sub    esp,0x8
c00291a9:	68 5c 01 00 00       	push   0x15c
c00291ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b2:	e8 3d 9c fe ff       	call   c0012df4 <operator delete(void*, unsigned long)>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	83 c4 0c             	add    esp,0xc
c00291bd:	c3                   	ret    
