
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b0 fb 00 00       	call   c000fbd0 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 86 02 00       	call   c0028648 <_init>
c0000025:	c3                   	ret    
c0000026:	bb fe 91 02 c0       	mov    ebx,0xc00291fe
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 0c 92 02 c0    	cmp    ebx,0xc002920c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 d9 02 c0       	mov    eax,0xc002d9d8
c0000049:	3d d8 d9 02 c0       	cmp    eax,0xc002d9d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 d9 02 c0       	push   0xc002d9d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 d9 02 c0       	mov    eax,0xc002d9d8
c0000075:	2d d8 d9 02 c0       	sub    eax,0xc002d9d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 d9 02 c0       	push   0xc002d9d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e008,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 14 92 02 c0       	mov    ebx,0xc0029214
c00000bb:	81 eb 10 92 02 c0    	sub    ebx,0xc0029210
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 10 92 02 c0       	mov    esi,0xc0029210
c00000ca:	a1 0c e0 02 c0       	mov    eax,ds:0xc002e00c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c e0 02 c0       	mov    ds:0xc002e00c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c e0 02 c0       	mov    eax,ds:0xc002e00c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 d9 02 c0       	push   0xc002d9d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e008,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 e0 02 c0       	push   0xc002e010
c000012c:	68 d8 d9 02 c0       	push   0xc002d9d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 df d4 01 00       	call   c001d882 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 c6 27 01 00       	call   c0012b81 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 bd d4 01 00       	call   c001d882 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 0b d9 01 00       	call   c001dcef <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 f3 de 01 00       	call   c001e2e0 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 50 e4 02 c0 	lgdtd  ds:0xc002e450
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 aa 44 01 00       	call   c0014a8b <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>
c0000645:	66 90                	xchg   ax,ax
c0000647:	90                   	nop

c0000648 <memcmp>:
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000656:	85 f6                	test   esi,esi
c0000658:	74 1d                	je     c0000677 <memcmp+0x2f>
c000065a:	8a 08                	mov    cl,BYTE PTR [eax]
c000065c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000065f:	38 cb                	cmp    bl,cl
c0000661:	75 19                	jne    c000067c <memcmp+0x34>
c0000663:	01 c6                	add    esi,eax
c0000665:	eb 0a                	jmp    c0000671 <memcmp+0x29>
c0000667:	90                   	nop
c0000668:	8a 08                	mov    cl,BYTE PTR [eax]
c000066a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000066d:	38 d9                	cmp    cl,bl
c000066f:	75 0b                	jne    c000067c <memcmp+0x34>
c0000671:	40                   	inc    eax
c0000672:	42                   	inc    edx
c0000673:	39 f0                	cmp    eax,esi
c0000675:	75 f1                	jne    c0000668 <memcmp+0x20>
c0000677:	31 c0                	xor    eax,eax
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    
c000067c:	0f b6 c1             	movzx  eax,cl
c000067f:	29 d8                	sub    eax,ebx
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memmove>:
c0000684:	55                   	push   ebp
c0000685:	57                   	push   edi
c0000686:	56                   	push   esi
c0000687:	53                   	push   ebx
c0000688:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000694:	39 dd                	cmp    ebp,ebx
c0000696:	0f 83 80 00 00 00    	jae    c000071c <memmove+0x98>
c000069c:	85 d2                	test   edx,edx
c000069e:	74 74                	je     c0000714 <memmove+0x90>
c00006a0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006a6:	39 cd                	cmp    ebp,ecx
c00006a8:	0f 93 c1             	setae  cl
c00006ab:	39 f3                	cmp    ebx,esi
c00006ad:	0f 93 c0             	setae  al
c00006b0:	89 c6                	mov    esi,eax
c00006b2:	09 ce                	or     esi,ecx
c00006b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006b7:	89 f0                	mov    eax,esi
c00006b9:	83 f9 0c             	cmp    ecx,0xc
c00006bc:	0f 97 c1             	seta   cl
c00006bf:	84 c8                	test   al,cl
c00006c1:	74 75                	je     c0000738 <memmove+0xb4>
c00006c3:	89 e9                	mov    ecx,ebp
c00006c5:	09 d9                	or     ecx,ebx
c00006c7:	83 e1 03             	and    ecx,0x3
c00006ca:	75 6c                	jne    c0000738 <memmove+0xb4>
c00006cc:	89 d7                	mov    edi,edx
c00006ce:	89 d9                	mov    ecx,ebx
c00006d0:	83 e7 fc             	and    edi,0xfffffffc
c00006d3:	89 ee                	mov    esi,ebp
c00006d5:	01 df                	add    edi,ebx
c00006d7:	90                   	nop
c00006d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006da:	83 c6 04             	add    esi,0x4
c00006dd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e0:	83 c1 04             	add    ecx,0x4
c00006e3:	39 f9                	cmp    ecx,edi
c00006e5:	75 f1                	jne    c00006d8 <memmove+0x54>
c00006e7:	89 d1                	mov    ecx,edx
c00006e9:	89 d7                	mov    edi,edx
c00006eb:	83 e1 fc             	and    ecx,0xfffffffc
c00006ee:	29 cf                	sub    edi,ecx
c00006f0:	01 cb                	add    ebx,ecx
c00006f2:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006f6:	39 ca                	cmp    edx,ecx
c00006f8:	74 1a                	je     c0000714 <memmove+0x90>
c00006fa:	8a 03                	mov    al,BYTE PTR [ebx]
c00006fc:	83 ff 01             	cmp    edi,0x1
c00006ff:	88 06                	mov    BYTE PTR [esi],al
c0000701:	74 11                	je     c0000714 <memmove+0x90>
c0000703:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000706:	83 ff 02             	cmp    edi,0x2
c0000709:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000070c:	74 06                	je     c0000714 <memmove+0x90>
c000070e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000711:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000714:	5b                   	pop    ebx
c0000715:	89 e8                	mov    eax,ebp
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	76 f6                	jbe    c0000714 <memmove+0x90>
c000071e:	85 d2                	test   edx,edx
c0000720:	74 f2                	je     c0000714 <memmove+0x90>
c0000722:	4b                   	dec    ebx
c0000723:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000726:	66 90                	xchg   ax,ax
c0000728:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000072e:	4a                   	dec    edx
c000072f:	75 f7                	jne    c0000728 <memmove+0xa4>
c0000731:	5b                   	pop    ebx
c0000732:	89 e8                	mov    eax,ebp
c0000734:	5e                   	pop    esi
c0000735:	5f                   	pop    edi
c0000736:	5d                   	pop    ebp
c0000737:	c3                   	ret    
c0000738:	01 ea                	add    edx,ebp
c000073a:	89 e9                	mov    ecx,ebp
c000073c:	8a 03                	mov    al,BYTE PTR [ebx]
c000073e:	41                   	inc    ecx
c000073f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000742:	43                   	inc    ebx
c0000743:	39 d1                	cmp    ecx,edx
c0000745:	75 f5                	jne    c000073c <memmove+0xb8>
c0000747:	eb cb                	jmp    c0000714 <memmove+0x90>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]

c000074c <memcpy>:
c000074c:	57                   	push   edi
c000074d:	56                   	push   esi
c000074e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000752:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000756:	a8 03                	test   al,0x3
c0000758:	74 12                	je     c000076c <memcpy+0x20>
c000075a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075e:	89 c1                	mov    ecx,eax
c0000760:	fc                   	cld    
c0000761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000763:	29 c7                	sub    edi,eax
c0000765:	5e                   	pop    esi
c0000766:	89 f8                	mov    eax,edi
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax
c000076c:	89 c1                	mov    ecx,eax
c000076e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000772:	c1 e9 02             	shr    ecx,0x2
c0000775:	fc                   	cld    
c0000776:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000778:	29 c7                	sub    edi,eax
c000077a:	5e                   	pop    esi
c000077b:	89 f8                	mov    eax,edi
c000077d:	5f                   	pop    edi
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 28 e0 02 c0       	mov    ds:0xc002e028,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 28 e0 02 c0    	mov    DWORD PTR ds:0xc002e028,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d 28 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e028
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 3c fc ff ff       	call   c0000648 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 20 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6de0],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 20 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6de0],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 20 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6de0],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d 40 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e040
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 44 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1fbc]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 44 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fbc],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 6c e0 02 c0    	cmp    DWORD PTR ds:0xc002e06c,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d 7c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e07c
c0000e68:	c7 42 0c 74 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e074
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 7c e0 02 c0    	mov    DWORD PTR ds:0xc002e07c,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 6c e0 02 c0    	mov    DWORD PTR ds:0xc002e06c,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 40 e0 02 c0 02 	test   BYTE PTR ds:0xc002e040,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 56 e7 00 00       	call   c000f69f <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 98 e6 00 00       	call   c000f69f <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 82 e6 00 00       	call   c000f69f <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 5e e6 00 00       	call   c000f69f <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d 40 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e040
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 44 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1fbc]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 44 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1fbc],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 74 e0 02 c0 	lea    edx,[eax*8-0x3ffd1f8c]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d 80 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e080
c00011ea:	81 fb 74 e0 02 c0    	cmp    ebx,0xc002e074
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d 74 e0 02 c0       	cmp    eax,0xc002e074
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d 70 e0 02 c0    	cmp    DWORD PTR ds:0xc002e070,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 7c e0 02 c0       	mov    ds:0xc002e07c,eax
c0001226:	a3 80 e0 02 c0       	mov    ds:0xc002e080,eax
c000122b:	a3 70 e0 02 c0       	mov    ds:0xc002e070,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 74 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e074
c0001239:	c7 40 0c 74 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e074
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 80 e0 02 c0       	mov    ds:0xc002e080,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 74 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e074
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 38 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1fc8]
c000128a:	8b 14 95 40 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fc0]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 40 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1fc0]
c00012a5:	8b 14 95 40 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fc0]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd 74 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1c8c],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 74 e0 02 c0 	lea    eax,[eax*8-0x3ffd1f8c]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d 7c e0 02 c0    	mov    DWORD PTR ds:0xc002e07c,ecx
c000135f:	89 0d 80 e0 02 c0    	mov    DWORD PTR ds:0xc002e080,ecx
c0001365:	c7 41 08 74 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e074
c000136c:	c7 41 0c 74 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e074
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd 6c e0 02 c0 	lea    edx,[ecx*8-0x3ffd1f94]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d 74 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c8c]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d 74 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c8c]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 6c e0 02 c0 	lea    edx,[eax*4-0x3ffd1f94]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d 74 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1c8c],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d 7c e0 02 c0    	mov    DWORD PTR ds:0xc002e07c,edi
c0001432:	89 3d 80 e0 02 c0    	mov    DWORD PTR ds:0xc002e080,edi
c0001438:	c7 47 08 74 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e074
c000143f:	c7 47 0c 74 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e074
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d 70 e0 02 c0    	mov    DWORD PTR ds:0xc002e070,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 6c e0 02 c0       	mov    eax,ds:0xc002e06c
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d 6c e0 02 c0    	mov    DWORD PTR ds:0xc002e06c,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba 40 e0 02 c0       	mov    edx,0xc002e040
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d 40 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e040,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d 94 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e394
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 94 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e394,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d 94 e3 02 c0    	mov    DWORD PTR ds:0xc002e394,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 6c e0 02 c0    	cmp    DWORD PTR ds:0xc002e06c,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d 6c e0 02 c0    	mov    DWORD PTR ds:0xc002e06c,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 e7 ef ff ff       	call   c000074c <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d 40 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e040,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 9c e3 02 c0    	push   DWORD PTR ds:0xc002e39c
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d 40 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e040,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 9c e3 02 c0       	mov    eax,ds:0xc002e39c
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d 6c e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e06c,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 6c e0 02 c0       	mov    eax,ds:0xc002e06c
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 44 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1fbc]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 74 e0 02 c0       	mov    eax,0xc002e074
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d 6c e3 02 c0       	cmp    eax,0xc002e36c
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 90 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e390
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 a4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3a4
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 b4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3b4
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 24 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cdc]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 40 e0 02 c0       	mov    eax,ds:0xc002e040
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 40 e0 02 c0       	mov    ds:0xc002e040,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d 84 e3 02 c0    	mov    DWORD PTR ds:0xc002e384,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d 88 e3 02 c0    	mov    DWORD PTR ds:0xc002e388,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d 8c e3 02 c0    	mov    DWORD PTR ds:0xc002e38c,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 94 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e394,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 20 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4e0]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 66 f1 01 00       	jmp    c0020d9a <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 20 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4e0]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 97 f1 01 00       	jmp    c0020de1 <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 20 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4e0]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 bf f1 01 00       	jmp    c0020e28 <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 58 4a 02 00       	call   c00269a4 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 40 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6bc0]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 40 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6bc0]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba 40 c8 02 c0       	mov    edx,0xc002c840
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba 6c 94 02 c0       	mov    edx,0xc002946c
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba 50 94 02 c0       	mov    edx,0xc0029450
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 e0 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1c20]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 c0 e3 02 c0    	mov    ax,ds:0xc002e3c0
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 c0 e3 02 c0    	mov    ds:0xc002e3c0,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 55 38 02 00       	call   c00269a4 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 72 94 02 c0       	mov    eax,0xc0029472
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad c0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c40]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 7b 94 02 c0       	mov    eax,0xc002947b
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 40 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6bc0]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 20 22 02 00       	call   c00269a4 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba 50 94 02 c0       	mov    edx,0xc0029450
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 e0 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c20]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 e0 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c20],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 e7 0b 02 00       	call   c00269a4 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 cd 0b 02 00       	call   c00269a4 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 97 93 02 c0       	mov    eax,0xc0029397
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 90 93 02 c0       	mov    eax,0xc0029390
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 e0 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c20]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be 80 93 02 c0       	mov    esi,0xc0029380
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 10 f3 01 00       	call   c00269a4 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba 60 93 02 c0       	mov    edx,0xc0029360
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba 82 94 02 c0       	mov    edx,0xc0029482
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba 8e 94 02 c0       	mov    edx,0xc002948e
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 a0 73 00 00       	call   c000f84b <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 9a 73 00 00       	call   c000f85b <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c c0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297c0
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 c0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297c0
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 00 95 02 c0       	mov    eax,0xc0029500
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 df 70 00 00       	call   c000f85b <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 c9 70 00 00       	call   c000f85b <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 64 fc 01 00       	call   c0028477 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 27 fc 01 00       	call   c0028459 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 fb fb 01 00       	call   c0028477 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 ae f2 01 00       	call   c0027b7c <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 30 fd 01 00       	call   c0028610 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 75 fb 01 00       	call   c0028477 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 b7 fa 01 00       	call   c0028477 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 84 fa 01 00       	call   c0028459 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 71 f9 01 00       	call   c0028477 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 39 f9 01 00       	call   c0028459 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 a8 6c 00 00       	call   c000f87b <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 43 6c 00 00       	call   c000f85b <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 45 f7 01 00       	call   c0028477 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 0a f7 01 00       	call   c0028459 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 20 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62e0]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 1a f4 01 00       	call   c002820b <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 98 ed 01 00       	call   c0027ba8 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 54 f6 01 00       	call   c002847b <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 42 f7 01 00       	call   c002859f <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 2c ed 01 00       	call   c0027ba8 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 d7 f5 01 00       	call   c0028475 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 b8 f5 01 00       	call   c0028479 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 4e f7 01 00       	call   c0028630 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 f8 f2 01 00       	call   c002820b <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 76 ec 01 00       	call   c0027ba8 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 32 f5 01 00       	call   c002847b <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 20 f6 01 00       	call   c002859f <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 0a ec 01 00       	call   c0027ba8 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 b5 f4 01 00       	call   c0028475 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 95 f4 01 00       	call   c0028479 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 2a f6 01 00       	call   c0028630 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 d0 f3 01 00       	call   c0028477 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 8e f3 01 00       	call   c0028459 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 76 f3 01 00       	call   c0028477 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 e8 f0 01 00       	call   c002820b <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 ea e3 01 00       	call   c002752b <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 4d ea 01 00       	call   c0027ba8 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 9f f0 01 00       	call   c002820b <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 a5 e3 01 00       	call   c002752b <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 74 f0 01 00       	call   c002820b <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 c4 f2 01 00       	call   c0028475 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 a1 e9 01 00       	call   c0027b7c <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 23 f4 01 00       	call   c0028610 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 4a f2 01 00       	call   c0028459 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 45 e9 01 00       	call   c0027b7c <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 c3 ef 01 00       	call   c002820b <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 46 e9 01 00       	call   c0027ba8 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 98 ef 01 00       	call   c002820b <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 ff eb 01 00       	call   c0027e8c <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 7e e2 01 00       	call   c002752b <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 de db 01 00       	call   c0026ec0 <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 b5 f2 01 00       	call   c002859f <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 9e e8 01 00       	call   c0027ba8 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 85 f2 01 00       	call   c002859f <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 f7 e1 01 00       	call   c002752b <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 30 f1 01 00       	call   c002847b <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 18 eb 01 00       	call   c0027e8c <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 9e e1 01 00       	call   c002752b <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 8c f2 01 00       	call   c0028630 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 5e ee 01 00       	call   c002820b <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 b5 e7 01 00       	call   c0027b7c <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 94 f0 01 00       	call   c0028477 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 2d e1 01 00       	call   c002752b <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 59 e7 01 00       	call   c0027b7c <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 fb f1 01 00       	call   c0028630 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 ac ed 01 00       	call   c002820b <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 29 e7 01 00       	call   c0027ba8 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 7c ed 01 00       	call   c002820b <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 82 e0 01 00       	call   c002752b <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 52 ed 01 00       	call   c002820b <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 a4 ef 01 00       	call   c0028477 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 7b e6 01 00       	call   c0027b7c <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 fd f0 01 00       	call   c0028610 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 24 ef 01 00       	call   c0028459 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 1e e6 01 00       	call   c0027b7c <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 9c ec 01 00       	call   c002820b <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 1f e6 01 00       	call   c0027ba8 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 71 ec 01 00       	call   c002820b <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 d8 e8 01 00       	call   c0027e8c <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 57 df 01 00       	call   c002752b <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 a7 d8 01 00       	call   c0026ec0 <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 7e ef 01 00       	call   c002859f <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 67 e5 01 00       	call   c0027ba8 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 4e ef 01 00       	call   c002859f <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 c0 de 01 00       	call   c002752b <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 f9 ed 01 00       	call   c002847b <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 e0 e7 01 00       	call   c0027e8c <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 5f de 01 00       	call   c002752b <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 4d ef 01 00       	call   c0028630 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 1f eb 01 00       	call   c002820b <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 76 e4 01 00       	call   c0027b7c <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 55 ed 01 00       	call   c0028477 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 ee dd 01 00       	call   c002752b <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 1a e4 01 00       	call   c0027b7c <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 8f ea 01 00       	call   c002820b <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 95 dd 01 00       	call   c002752b <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 94 9d 02 c0       	mov    eax,0xc0029d94
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 dc 5f 00 00       	call   c000f85b <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 de 5f 00 00       	call   c000f87b <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 0a e9 01 00       	call   c002820b <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 88 e2 01 00       	call   c0027ba8 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 1a d5 01 00       	call   c0026ec0 <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 f1 eb 01 00       	call   c002859f <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 da e1 01 00       	call   c0027ba8 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 bd eb 01 00       	call   c002859f <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 2f db 01 00       	call   c002752b <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 8f eb 01 00       	call   c002859f <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 7e e1 01 00       	call   c0027ba8 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 e7 da 01 00       	call   c002752b <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 08 d4 01 00       	call   c0026ec0 <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 df ea 01 00       	call   c002859f <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 c8 e0 01 00       	call   c0027ba8 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 ab ea 01 00       	call   c002859f <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 1d da 01 00       	call   c002752b <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 7d ea 01 00       	call   c002859f <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 6c e0 01 00       	call   c0027ba8 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 d5 d9 01 00       	call   c002752b <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 b3 d9 01 00       	call   c002752b <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 8f d2 01 00       	call   c0026ec0 <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 66 e9 01 00       	call   c002859f <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 4f df 01 00       	call   c0027ba8 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 32 e9 01 00       	call   c002859f <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 a4 d8 01 00       	call   c002752b <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 04 e9 01 00       	call   c002859f <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 ed de 01 00       	call   c0027ba8 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 56 d8 01 00       	call   c002752b <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 b6 e8 01 00       	call   c002859f <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 9f de 01 00       	call   c0027ba8 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 08 d8 01 00       	call   c002752b <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 1d d1 01 00       	call   c0026ec0 <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 f4 e7 01 00       	call   c002859f <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 dd dd 01 00       	call   c0027ba8 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 c4 e7 01 00       	call   c002859f <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 36 d7 01 00       	call   c002752b <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 96 e7 01 00       	call   c002859f <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 7f dd 01 00       	call   c0027ba8 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 e8 d6 01 00       	call   c002752b <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 48 e7 01 00       	call   c002859f <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 31 dd 01 00       	call   c0027ba8 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 9a d6 01 00       	call   c002752b <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 6e d6 01 00       	call   c002752b <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 cb dc 01 00       	call   c0027ba8 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 87 e5 01 00       	call   c002847b <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 16 d6 01 00       	call   c002752b <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 73 dc 01 00       	call   c0027ba8 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 2f e5 01 00       	call   c002847b <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 a9 ce 01 00       	call   c0026ec0 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 80 e5 01 00       	call   c002859f <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 69 db 01 00       	call   c0027ba8 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 4c e5 01 00       	call   c002859f <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 be d4 01 00       	call   c002752b <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 1e e5 01 00       	call   c002859f <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 07 db 01 00       	call   c0027ba8 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 70 d4 01 00       	call   c002752b <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 d0 e4 01 00       	call   c002859f <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 b9 da 01 00       	call   c0027ba8 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 22 d4 01 00       	call   c002752b <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 82 e4 01 00       	call   c002859f <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 6b da 01 00       	call   c0027ba8 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 d4 d3 01 00       	call   c002752b <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 34 e4 01 00       	call   c002859f <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 1d da 01 00       	call   c0027ba8 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 86 d3 01 00       	call   c002752b <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 88 cc 01 00       	call   c0026ec0 <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 5f e3 01 00       	call   c002859f <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 48 d9 01 00       	call   c0027ba8 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 2f e3 01 00       	call   c002859f <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 a1 d2 01 00       	call   c002752b <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 01 e3 01 00       	call   c002859f <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 ea d8 01 00       	call   c0027ba8 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 53 d2 01 00       	call   c002752b <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 b3 e2 01 00       	call   c002859f <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 9c d8 01 00       	call   c0027ba8 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 05 d2 01 00       	call   c002752b <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 65 e2 01 00       	call   c002859f <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 4e d8 01 00       	call   c0027ba8 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 b7 d1 01 00       	call   c002752b <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 17 e2 01 00       	call   c002859f <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 00 d8 01 00       	call   c0027ba8 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 69 d1 01 00       	call   c002752b <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 3d d1 01 00       	call   c002752b <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 9a d7 01 00       	call   c0027ba8 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 56 e0 01 00       	call   c002847b <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 e5 d0 01 00       	call   c002752b <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 42 d7 01 00       	call   c0027ba8 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 fe df 01 00       	call   c002847b <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 8c d0 01 00       	call   c002752b <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 e9 d6 01 00       	call   c0027ba8 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 a5 df 01 00       	call   c002847b <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 33 d0 01 00       	call   c002752b <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 90 d6 01 00       	call   c0027ba8 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 4c df 01 00       	call   c002847b <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 aa c8 01 00       	call   c0026ec0 <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 81 df 01 00       	call   c002859f <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 6a d5 01 00       	call   c0027ba8 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 4d df 01 00       	call   c002859f <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 bf ce 01 00       	call   c002752b <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 1f df 01 00       	call   c002859f <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 08 d5 01 00       	call   c0027ba8 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 71 ce 01 00       	call   c002752b <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 d1 de 01 00       	call   c002859f <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 ba d4 01 00       	call   c0027ba8 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 23 ce 01 00       	call   c002752b <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 83 de 01 00       	call   c002859f <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 6c d4 01 00       	call   c0027ba8 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 d5 cd 01 00       	call   c002752b <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 35 de 01 00       	call   c002859f <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 1e d4 01 00       	call   c0027ba8 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 87 cd 01 00       	call   c002752b <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 e7 dd 01 00       	call   c002859f <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 d0 d3 01 00       	call   c0027ba8 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 36 cd 01 00       	call   c002752b <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 96 dd 01 00       	call   c002859f <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 7f d3 01 00       	call   c0027ba8 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 e8 cc 01 00       	call   c002752b <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 e2 c5 01 00       	call   c0026ec0 <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 b9 dc 01 00       	call   c002859f <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 a2 d2 01 00       	call   c0027ba8 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 82 dc 01 00       	call   c002859f <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 f4 cb 01 00       	call   c002752b <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 54 dc 01 00       	call   c002859f <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 3d d2 01 00       	call   c0027ba8 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 a6 cb 01 00       	call   c002752b <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 06 dc 01 00       	call   c002859f <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 ef d1 01 00       	call   c0027ba8 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 58 cb 01 00       	call   c002752b <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 b8 db 01 00       	call   c002859f <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 a1 d1 01 00       	call   c0027ba8 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 0a cb 01 00       	call   c002752b <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 6a db 01 00       	call   c002859f <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 53 d1 01 00       	call   c0027ba8 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 bc ca 01 00       	call   c002752b <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 1c db 01 00       	call   c002859f <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 05 d1 01 00       	call   c0027ba8 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 6b ca 01 00       	call   c002752b <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 cb da 01 00       	call   c002859f <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 b4 d0 01 00       	call   c0027ba8 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 23 ca 01 00       	call   c002752b <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 fc c9 01 00       	call   c002752b <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 5a d0 01 00       	call   c0027ba8 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 16 d9 01 00       	call   c002847b <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 a5 c9 01 00       	call   c002752b <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 03 d0 01 00       	call   c0027ba8 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 bf d8 01 00       	call   c002847b <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 4d c9 01 00       	call   c002752b <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 ab cf 01 00       	call   c0027ba8 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 67 d8 01 00       	call   c002847b <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 f5 c8 01 00       	call   c002752b <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 53 cf 01 00       	call   c0027ba8 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 0f d8 01 00       	call   c002847b <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 9d c8 01 00       	call   c002752b <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 fb ce 01 00       	call   c0027ba8 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 b7 d7 01 00       	call   c002847b <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 4b c8 01 00       	call   c002752b <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 a9 ce 01 00       	call   c0027ba8 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 65 d7 01 00       	call   c002847b <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 79 c0 01 00       	call   c0026ec0 <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 50 d7 01 00       	call   c002859f <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 39 cd 01 00       	call   c0027ba8 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 20 d7 01 00       	call   c002859f <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 92 c6 01 00       	call   c002752b <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 c4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd623c]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 c6 d6 01 00       	call   c002859f <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 af cc 01 00       	call   c0027ba8 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 1a c6 01 00       	call   c002752b <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 67 d6 01 00       	call   c002859f <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 50 cc 01 00       	call   c0027ba8 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 bb c5 01 00       	call   c002752b <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 08 d6 01 00       	call   c002859f <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 f1 cb 01 00       	call   c0027ba8 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 5c c5 01 00       	call   c002752b <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 a9 d5 01 00       	call   c002859f <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 92 cb 01 00       	call   c0027ba8 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 fd c4 01 00       	call   c002752b <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 4a d5 01 00       	call   c002859f <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 33 cb 01 00       	call   c0027ba8 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 9e c4 01 00       	call   c002752b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 eb d4 01 00       	call   c002859f <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 d4 ca 01 00       	call   c0027ba8 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 3f c4 01 00       	call   c002752b <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 8c d4 01 00       	call   c002859f <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 75 ca 01 00       	call   c0027ba8 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 e0 c3 01 00       	call   c002752b <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 2d d4 01 00       	call   c002859f <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 16 ca 01 00       	call   c0027ba8 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 81 c3 01 00       	call   c002752b <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 8b bc 01 00       	call   c0026ec0 <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 62 d3 01 00       	call   c002859f <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 4b c9 01 00       	call   c0027ba8 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 32 d3 01 00       	call   c002859f <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 a4 c2 01 00       	call   c002752b <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 e0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6220]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 d7 d2 01 00       	call   c002859f <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 c0 c8 01 00       	call   c0027ba8 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 2b c2 01 00       	call   c002752b <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 77 d2 01 00       	call   c002859f <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 60 c8 01 00       	call   c0027ba8 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 cb c1 01 00       	call   c002752b <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 17 d2 01 00       	call   c002859f <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 00 c8 01 00       	call   c0027ba8 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 6b c1 01 00       	call   c002752b <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 b7 d1 01 00       	call   c002859f <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 a0 c7 01 00       	call   c0027ba8 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 0b c1 01 00       	call   c002752b <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 57 d1 01 00       	call   c002859f <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 40 c7 01 00       	call   c0027ba8 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 ab c0 01 00       	call   c002752b <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 f7 d0 01 00       	call   c002859f <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 e0 c6 01 00       	call   c0027ba8 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 4b c0 01 00       	call   c002752b <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 97 d0 01 00       	call   c002859f <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 80 c6 01 00       	call   c0027ba8 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 eb bf 01 00       	call   c002752b <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 37 d0 01 00       	call   c002859f <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 20 c6 01 00       	call   c0027ba8 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 8b bf 01 00       	call   c002752b <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 fc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6204]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 30 bf 01 00       	call   c002752b <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 8d c5 01 00       	call   c0027ba8 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 49 ce 01 00       	call   c002847b <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 d3 be 01 00       	call   c002752b <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 30 c5 01 00       	call   c0027ba8 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 ec cd 01 00       	call   c002847b <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 76 be 01 00       	call   c002752b <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 d3 c4 01 00       	call   c0027ba8 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 8f cd 01 00       	call   c002847b <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 19 be 01 00       	call   c002752b <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 76 c4 01 00       	call   c0027ba8 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 32 cd 01 00       	call   c002847b <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 bc bd 01 00       	call   c002752b <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 19 c4 01 00       	call   c0027ba8 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 d5 cc 01 00       	call   c002847b <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 5f bd 01 00       	call   c002752b <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 bc c3 01 00       	call   c0027ba8 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 78 cc 01 00       	call   c002847b <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 02 bd 01 00       	call   c002752b <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 5f c3 01 00       	call   c0027ba8 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 1b cc 01 00       	call   c002847b <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 a5 bc 01 00       	call   c002752b <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 02 c3 01 00       	call   c0027ba8 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 be cb 01 00       	call   c002847b <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 ba c2 01 00       	call   c0027ba8 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 32 cd 01 00       	jmp    c0028630 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 26 4d ff ff       	call   c0000684 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 84 4d ff ff       	call   c000074c <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 56 4c ff ff       	call   c0000684 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 9c c9 01 00       	call   c0028477 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 5a c9 01 00       	call   c0028459 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 f1 c6 01 00       	call   c002820b <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 f2 b9 01 00       	call   c002752b <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 c1 c6 01 00       	call   c002820b <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 28 c3 01 00       	call   c0027e8c <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 c7 c8 01 00       	call   c0028459 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 ca c8 01 00       	call   c0028477 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 9d c8 01 00       	call   c0028477 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 96 c2 01 00       	call   c0027e8c <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 20 ca 01 00       	call   c0028630 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 fb c9 01 00       	call   c0028630 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 cd c5 01 00       	call   c002820b <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 24 bf 01 00       	call   c0027b7c <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 03 c8 01 00       	call   c0028477 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 9c b8 01 00       	call   c002752b <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 c0 be 01 00       	call   c0027b7c <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 62 c9 01 00       	call   c0028630 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 9a c1 01 00       	call   c0027e8c <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 17 b8 01 00       	call   c002752b <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 43 c4 01 00       	call   c002820b <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 43 b7 01 00       	call   c002752b <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 23 b7 01 00       	call   c002752b <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 f3 c3 01 00       	call   c002820b <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 43 c6 01 00       	call   c0028475 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 22 bd 01 00       	call   c0027b7c <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 a4 c7 01 00       	call   c0028610 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 cb c5 01 00       	call   c0028459 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 c9 bc 01 00       	call   c0027b7c <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 47 c3 01 00       	call   c002820b <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 ca bc 01 00       	call   c0027ba8 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 1c c3 01 00       	call   c002820b <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 83 bf 01 00       	call   c0027e8c <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 02 b6 01 00       	call   c002752b <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 cc c2 01 00       	call   c002820b <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 18 c5 01 00       	call   c0028477 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 0d bc 01 00       	call   c0027ba8 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 df bb 01 00       	call   c0027ba8 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 18 c2 01 00       	call   c002820b <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 7c be 01 00       	call   c0027e8c <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 44 be 01 00       	call   c0027e8c <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 c3 b4 01 00       	call   c002752b <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 b0 c5 01 00       	call   c0028630 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 82 c1 01 00       	call   c002820b <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 d9 ba 01 00       	call   c0027b7c <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 b8 c3 01 00       	call   c0028477 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 50 b4 01 00       	call   c002752b <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 74 ba 01 00       	call   c0027b7c <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 16 c5 01 00       	call   c0028630 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 d7 c2 01 00       	call   c0028477 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 95 c2 01 00       	call   c0028459 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 2c c0 01 00       	call   c002820b <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 2d b3 01 00       	call   c002752b <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 fc bf 01 00       	call   c002820b <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 63 bc 01 00       	call   c0027e8c <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 02 c2 01 00       	call   c0028459 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 05 c2 01 00       	call   c0028477 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 d8 c1 01 00       	call   c0028477 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 d1 bb 01 00       	call   c0027e8c <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 5b c3 01 00       	call   c0028630 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 36 c3 01 00       	call   c0028630 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 08 bf 01 00       	call   c002820b <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 5f b8 01 00       	call   c0027b7c <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 3e c1 01 00       	call   c0028477 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 d7 b1 01 00       	call   c002752b <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 fb b7 01 00       	call   c0027b7c <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 9d c2 01 00       	call   c0028630 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 d5 ba 01 00       	call   c0027e8c <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 52 b1 01 00       	call   c002752b <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 7d bd 01 00       	call   c002820b <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 7d b0 01 00       	call   c002752b <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 5d b0 01 00       	call   c002752b <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 2d bd 01 00       	call   c002820b <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 7d bf 01 00       	call   c0028475 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 5b b6 01 00       	call   c0027b7c <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 dd c0 01 00       	call   c0028610 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 04 bf 01 00       	call   c0028459 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 01 b6 01 00       	call   c0027b7c <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 7f bc 01 00       	call   c002820b <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 02 b6 01 00       	call   c0027ba8 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 54 bc 01 00       	call   c002820b <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 bb b8 01 00       	call   c0027e8c <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 3a af 01 00       	call   c002752b <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 04 bc 01 00       	call   c002820b <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 50 be 01 00       	call   c0028477 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 45 b5 01 00       	call   c0027ba8 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 17 b5 01 00       	call   c0027ba8 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 4e bb 01 00       	call   c002820b <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 b2 b7 01 00       	call   c0027e8c <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 7f b7 01 00       	call   c0027e8c <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 fe ad 01 00       	call   c002752b <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 eb be 01 00       	call   c0028630 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 bd ba 01 00       	call   c002820b <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 14 b4 01 00       	call   c0027b7c <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 f3 bc 01 00       	call   c0028477 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 8b ad 01 00       	call   c002752b <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 af b3 01 00       	call   c0027b7c <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 51 be 01 00       	call   c0028630 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 12 bc 01 00       	call   c0028477 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 d0 bb 01 00       	call   c0028459 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 67 b9 01 00       	call   c002820b <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 68 ac 01 00       	call   c002752b <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 37 b9 01 00       	call   c002820b <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 9e b5 01 00       	call   c0027e8c <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 3d bb 01 00       	call   c0028459 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 40 bb 01 00       	call   c0028477 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 13 bb 01 00       	call   c0028477 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 0c b5 01 00       	call   c0027e8c <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 96 bc 01 00       	call   c0028630 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 71 bc 01 00       	call   c0028630 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 43 b8 01 00       	call   c002820b <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 9a b1 01 00       	call   c0027b7c <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 79 ba 01 00       	call   c0028477 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 12 ab 01 00       	call   c002752b <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 36 b1 01 00       	call   c0027b7c <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 d8 bb 01 00       	call   c0028630 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 10 b4 01 00       	call   c0027e8c <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 8d aa 01 00       	call   c002752b <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 b8 b6 01 00       	call   c002820b <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 b8 a9 01 00       	call   c002752b <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 98 a9 01 00       	call   c002752b <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 68 b6 01 00       	call   c002820b <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 b8 b8 01 00       	call   c0028475 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 96 af 01 00       	call   c0027b7c <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 18 ba 01 00       	call   c0028610 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 3f b8 01 00       	call   c0028459 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 3c af 01 00       	call   c0027b7c <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 ba b5 01 00       	call   c002820b <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 3d af 01 00       	call   c0027ba8 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 8f b5 01 00       	call   c002820b <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 f6 b1 01 00       	call   c0027e8c <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 75 a8 01 00       	call   c002752b <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 3f b5 01 00       	call   c002820b <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 8b b7 01 00       	call   c0028477 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 80 ae 01 00       	call   c0027ba8 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 52 ae 01 00       	call   c0027ba8 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 89 b4 01 00       	call   c002820b <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 ed b0 01 00       	call   c0027e8c <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 ba b0 01 00       	call   c0027e8c <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 39 a7 01 00       	call   c002752b <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 26 b8 01 00       	call   c0028630 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 f8 b3 01 00       	call   c002820b <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 4f ad 01 00       	call   c0027b7c <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 2e b6 01 00       	call   c0028477 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 c6 a6 01 00       	call   c002752b <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 ea ac 01 00       	call   c0027b7c <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 8c b7 01 00       	call   c0028630 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 4d b5 01 00       	call   c0028477 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 0b b5 01 00       	call   c0028459 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 a2 b2 01 00       	call   c002820b <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 a3 a5 01 00       	call   c002752b <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 72 b2 01 00       	call   c002820b <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 d9 ae 01 00       	call   c0027e8c <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 78 b4 01 00       	call   c0028459 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 7b b4 01 00       	call   c0028477 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 4e b4 01 00       	call   c0028477 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 47 ae 01 00       	call   c0027e8c <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 d1 b5 01 00       	call   c0028630 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 ac b5 01 00       	call   c0028630 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 7e b1 01 00       	call   c002820b <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 d5 aa 01 00       	call   c0027b7c <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 b4 b3 01 00       	call   c0028477 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 4d a4 01 00       	call   c002752b <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 71 aa 01 00       	call   c0027b7c <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 13 b5 01 00       	call   c0028630 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 4b ad 01 00       	call   c0027e8c <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 c8 a3 01 00       	call   c002752b <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 f3 af 01 00       	call   c002820b <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 f3 a2 01 00       	call   c002752b <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 d3 a2 01 00       	call   c002752b <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 a3 af 01 00       	call   c002820b <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 f3 b1 01 00       	call   c0028475 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 d1 a8 01 00       	call   c0027b7c <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 53 b3 01 00       	call   c0028610 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 7a b1 01 00       	call   c0028459 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 77 a8 01 00       	call   c0027b7c <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 f5 ae 01 00       	call   c002820b <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 78 a8 01 00       	call   c0027ba8 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 ca ae 01 00       	call   c002820b <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 31 ab 01 00       	call   c0027e8c <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 b0 a1 01 00       	call   c002752b <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 7a ae 01 00       	call   c002820b <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 c6 b0 01 00       	call   c0028477 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 bb a7 01 00       	call   c0027ba8 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 8d a7 01 00       	call   c0027ba8 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 c4 ad 01 00       	call   c002820b <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 28 aa 01 00       	call   c0027e8c <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 f5 a9 01 00       	call   c0027e8c <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 74 a0 01 00       	call   c002752b <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 61 b1 01 00       	call   c0028630 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 33 ad 01 00       	call   c002820b <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 8a a6 01 00       	call   c0027b7c <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 69 af 01 00       	call   c0028477 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 01 a0 01 00       	call   c002752b <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 25 a6 01 00       	call   c0027b7c <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 c7 b0 01 00       	call   c0028630 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 85 ae 01 00       	call   c0028477 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 43 ae 01 00       	call   c0028459 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 da ab 01 00       	call   c002820b <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 db 9e 01 00       	call   c002752b <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 aa ab 01 00       	call   c002820b <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 11 a8 01 00       	call   c0027e8c <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 b0 ad 01 00       	call   c0028459 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 b3 ad 01 00       	call   c0028477 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 86 ad 01 00       	call   c0028477 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 7f a7 01 00       	call   c0027e8c <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 09 af 01 00       	call   c0028630 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 e0 ae 01 00       	call   c0028630 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 b2 aa 01 00       	call   c002820b <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 09 a4 01 00       	call   c0027b7c <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 e8 ac 01 00       	call   c0028477 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 81 9d 01 00       	call   c002752b <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 a9 a3 01 00       	call   c0027b7c <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 4b ae 01 00       	call   c0028630 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 84 a6 01 00       	call   c0027e8c <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 01 9d 01 00       	call   c002752b <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 2d a9 01 00       	call   c002820b <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 2d 9c 01 00       	call   c002752b <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 0d 9c 01 00       	call   c002752b <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 dd a8 01 00       	call   c002820b <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 11 ab 01 00       	call   c0028459 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 08 a2 01 00       	call   c0027b7c <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 8a ac 01 00       	call   c0028610 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 b1 aa 01 00       	call   c0028459 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 ab a1 01 00       	call   c0027b7c <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 29 a8 01 00       	call   c002820b <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 ac a1 01 00       	call   c0027ba8 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 fe a7 01 00       	call   c002820b <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 65 a4 01 00       	call   c0027e8c <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 e4 9a 01 00       	call   c002752b <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 ae a7 01 00       	call   c002820b <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 fa a9 01 00       	call   c0028477 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 ef a0 01 00       	call   c0027ba8 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 c1 a0 01 00       	call   c0027ba8 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 05 a7 01 00       	call   c002820b <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 6c a3 01 00       	call   c0027e8c <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 55 a0 01 00       	call   c0027ba8 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 11 a9 01 00       	call   c002847b <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 04 a3 01 00       	call   c0027e8c <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 83 99 01 00       	call   c002752b <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 70 aa 01 00       	call   c0028630 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 42 a6 01 00       	call   c002820b <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 99 9f 01 00       	call   c0027b7c <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 78 a8 01 00       	call   c0028477 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 10 99 01 00       	call   c002752b <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 38 9f 01 00       	call   c0027b7c <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 da a9 01 00       	call   c0028630 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 24 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61dc]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 18 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e8]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 a2 1b 00 00       	call   c000f85b <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 8d a6 01 00       	call   c0028477 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 4b a6 01 00       	call   c0028459 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 37 a6 01 00       	call   c0028477 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 a9 a3 01 00       	call   c002820b <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 27 9d 01 00       	call   c0027ba8 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 79 a3 01 00       	call   c002820b <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 7f 96 01 00       	call   c002752b <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 4e a3 01 00       	call   c002820b <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 9e a5 01 00       	call   c0028475 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 7f 9c 01 00       	call   c0027b7c <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 01 a7 01 00       	call   c0028610 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 28 a5 01 00       	call   c0028459 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 27 9c 01 00       	call   c0027b7c <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 a5 a2 01 00       	call   c002820b <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 28 9c 01 00       	call   c0027ba8 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 7a a2 01 00       	call   c002820b <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 e1 9e 01 00       	call   c0027e8c <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 60 95 01 00       	call   c002752b <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 88 9e 01 00       	call   c0027e8c <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 0e 95 01 00       	call   c002752b <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 fc a5 01 00       	call   c0028630 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 ce a1 01 00       	call   c002820b <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 25 9b 01 00       	call   c0027b7c <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 04 a4 01 00       	call   c0028477 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 9d 94 01 00       	call   c002752b <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 c9 9a 01 00       	call   c0027b7c <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 6b a5 01 00       	call   c0028630 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 18 a1 01 00       	call   c002820b <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 95 9a 01 00       	call   c0027ba8 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 e6 a0 01 00       	call   c002820b <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 ec 93 01 00       	call   c002752b <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 bc a0 01 00       	call   c002820b <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 10 a3 01 00       	call   c0028479 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 e9 99 01 00       	call   c0027b7c <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 6b a4 01 00       	call   c0028610 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 92 a2 01 00       	call   c0028459 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 90 99 01 00       	call   c0027b7c <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 0e a0 01 00       	call   c002820b <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 91 99 01 00       	call   c0027ba8 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 e3 9f 01 00       	call   c002820b <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 4a 9c 01 00       	call   c0027e8c <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 c9 92 01 00       	call   c002752b <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 e5 9b 01 00       	call   c0027e8c <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 64 92 01 00       	call   c002752b <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 52 a3 01 00       	call   c0028630 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 24 9f 01 00       	call   c002820b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 7b 98 01 00       	call   c0027b7c <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 5a a1 01 00       	call   c0028477 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 f3 91 01 00       	call   c002752b <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 1f 98 01 00       	call   c0027b7c <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 90 9e 01 00       	call   c002820b <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 96 91 01 00       	call   c002752b <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 3e 9f 02 c0       	mov    eax,0xc0029f3e
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 4f 9f 02 c0       	mov    eax,0xc0029f4f
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 e4 13 00 00       	call   c000f85b <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 e6 13 00 00       	call   c000f87b <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 55 13 00 00       	call   c000f84b <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	68 86 9f 02 c0       	push   0xc0029f86
c000e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50c:	e8 b7 23 ff ff       	call   c00008c8 <strcmp>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	0f 94 c0             	sete   al
c000e519:	84 c0                	test   al,al
c000e51b:	74 0a                	je     c000e527 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e51d:	b8 48 e4 02 c0       	mov    eax,0xc002e448
c000e522:	e9 e3 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e533:	e8 90 23 ff ff       	call   c00008c8 <strcmp>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	85 c0                	test   eax,eax
c000e53d:	0f 94 c0             	sete   al
c000e540:	84 c0                	test   al,al
c000e542:	74 0a                	je     c000e54e <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e544:	b8 a4 69 02 c0       	mov    eax,0xc00269a4
c000e549:	e9 bc 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	68 99 9f 02 c0       	push   0xc0029f99
c000e556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55a:	e8 69 23 ff ff       	call   c00008c8 <strcmp>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	85 c0                	test   eax,eax
c000e564:	0f 94 c0             	sete   al
c000e567:	84 c0                	test   al,al
c000e569:	74 0a                	je     c000e575 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e56b:	b8 d8 66 02 c0       	mov    eax,0xc00266d8
c000e570:	e9 95 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 42 23 ff ff       	call   c00008c8 <strcmp>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	85 c0                	test   eax,eax
c000e58b:	0f 94 c0             	sete   al
c000e58e:	84 c0                	test   al,al
c000e590:	74 07                	je     c000e599 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e592:	b8 a4 6a 02 c0       	mov    eax,0xc0026aa4
c000e597:	eb 71                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	68 ac 9f 02 c0       	push   0xc0029fac
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	e8 1e 23 ff ff       	call   c00008c8 <strcmp>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	85 c0                	test   eax,eax
c000e5af:	0f 94 c0             	sete   al
c000e5b2:	84 c0                	test   al,al
c000e5b4:	74 07                	je     c000e5bd <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5b6:	b8 24 68 02 c0       	mov    eax,0xc0026824
c000e5bb:	eb 4d                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	68 b5 9f 02 c0       	push   0xc0029fb5
c000e5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c9:	e8 fa 22 ff ff       	call   c00008c8 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	0f 94 c0             	sete   al
c000e5d6:	84 c0                	test   al,al
c000e5d8:	74 07                	je     c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5da:	b8 4c e4 02 c0       	mov    eax,0xc002e44c
c000e5df:	eb 29                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5e1:	83 ec 08             	sub    esp,0x8
c000e5e4:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ed:	e8 d6 22 ff ff       	call   c00008c8 <strcmp>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	85 c0                	test   eax,eax
c000e5f7:	0f 94 c0             	sete   al
c000e5fa:	84 c0                	test   al,al
c000e5fc:	74 07                	je     c000e605 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5fe:	b8 4d e4 02 c0       	mov    eax,0xc002e44d
c000e603:	eb 05                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e605:	b8 00 00 00 00       	mov    eax,0x0
c000e60a:	83 c4 0c             	add    esp,0xc
c000e60d:	c3                   	ret    

c000e60e <Computer::close(int, int, void*)>:
c000e60e:	57                   	push   edi
c000e60f:	56                   	push   esi
c000e610:	53                   	push   ebx
c000e611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e626:	e8 1b 5d 00 00       	call   c0014346 <Device::closeAll()>
c000e62b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e63a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e642:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e64a:	5b                   	pop    ebx
c000e64b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	ff e0                	jmp    eax

c000e652 <Krnl::firstTask()>:
c000e652:	53                   	push   ebx
c000e653:	83 ec 14             	sub    esp,0x14
c000e656:	fb                   	sti    
c000e657:	68 3f 07 00 00       	push   0x73f
c000e65c:	e8 ea 11 00 00       	call   c000f84b <malloc>
c000e661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c000e670:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e675:	6a 01                	push   0x1
c000e677:	50                   	push   eax
c000e678:	e8 73 f4 00 00       	call   c001daf0 <Process::Process(bool, char const*, Process*, char**)>
c000e67d:	83 c4 20             	add    esp,0x20
c000e680:	68 ff 00 00 00       	push   0xff
c000e685:	6a 00                	push   0x0
c000e687:	68 dd f1 00 c0       	push   0xc000f1dd
c000e68c:	53                   	push   ebx
c000e68d:	e8 5c f7 00 00       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c000e692:	6a 7a                	push   0x7a
c000e694:	6a 00                	push   0x0
c000e696:	68 86 e6 01 c0       	push   0xc001e686
c000e69b:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c000e6a1:	e8 48 f7 00 00       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	a3 68 19 03 c0       	mov    ds:0xc0031968,eax
c000e6ae:	c6 05 4d e4 02 c0 01 	mov    BYTE PTR ds:0xc002e44d,0x1
c000e6b5:	e8 4d 03 01 00       	call   c001ea07 <Vm::initialise8086()>
c000e6ba:	e8 6f 4a 00 00       	call   c001312e <Fs::initVFS()>
c000e6bf:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c000e6c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6cc:	6a 00                	push   0x0
c000e6ce:	6a 00                	push   0x0
c000e6d0:	6a 00                	push   0x0
c000e6d2:	50                   	push   eax
c000e6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6d6:	e8 a5 dd 00 00       	call   c001c480 <Sys::loadSyscalls()>
c000e6db:	e8 c8 bc 00 00       	call   c001a3a8 <Krnl::loadSystemEnv()>
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	6a 3a                	push   0x3a
c000e6e5:	68 dc 9f 02 c0       	push   0xc0029fdc
c000e6ea:	68 e5 9f 02 c0       	push   0xc0029fe5
c000e6ef:	e8 da c9 00 00       	call   c001b0ce <Reg::readIntWithDefault(char*, char*, int)>
c000e6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6f7:	e8 1a 55 00 00       	call   c0013c16 <User::loadClockSettings(int)>
c000e6fc:	58                   	pop    eax
c000e6fd:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c000e702:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e708:	e8 0d 5c 00 00       	call   c001431a <Device::loadDriversForAll()>
c000e70d:	e8 dc b7 00 00       	call   c0019eee <Krnl::startCPUs()>
c000e712:	5a                   	pop    edx
c000e713:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c000e719:	59                   	pop    ecx
c000e71a:	6a 01                	push   0x1
c000e71c:	68 ed 9f 02 c0       	push   0xc0029fed
c000e721:	e8 ee ee 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c000e726:	5a                   	pop    edx
c000e727:	59                   	pop    ecx
c000e728:	53                   	push   ebx
c000e729:	50                   	push   eax
c000e72a:	e8 19 f1 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	6a 02                	push   0x2
c000e737:	e8 50 fa 00 00       	call   c001e18c <blockTask(TaskState)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	eb f1                	jmp    c000e732 <Krnl::firstTask()+0xe0>
c000e741:	90                   	nop

c000e742 <Computer::Computer()>:
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	68 09 a0 02 c0       	push   0xc002a009
c000e751:	50                   	push   eax
c000e752:	e8 69 5c 00 00       	call   c00143c0 <Device::Device(char const*)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	89 10                	mov    DWORD PTR [eax],edx
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e78b:	83 ca 04             	or     edx,0x4
c000e78e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79e:	0f b6 d0             	movzx  edx,al
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b6:	0f b6 d0             	movzx  edx,al
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d9:	0f b6 d0             	movzx  edx,al
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e4:	83 e1 3f             	and    ecx,0x3f
c000e7e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f5:	0f b6 d0             	movzx  edx,al
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e823:	8d 50 01             	lea    edx,[eax+0x1]
c000e826:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e830:	0f b6 d0             	movzx  edx,al
c000e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e837:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e83b:	83 e1 3f             	and    ecx,0x3f
c000e83e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84c:	0f b6 d0             	movzx  edx,al
c000e84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e853:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87a:	8d 50 01             	lea    edx,[eax+0x1]
c000e87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e881:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e887:	0f b6 d0             	movzx  edx,al
c000e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e892:	83 e1 3f             	and    ecx,0x3f
c000e895:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e899:	90                   	nop
c000e89a:	83 c4 0c             	add    esp,0xc
c000e89d:	c3                   	ret    

c000e89e <Computer::setBootMessage(char const*)>:
c000e89e:	c3                   	ret    
c000e89f:	90                   	nop

c000e8a0 <Computer::detectFeatures()>:
c000e8a0:	55                   	push   ebp
c000e8a1:	57                   	push   edi
c000e8a2:	56                   	push   esi
c000e8a3:	53                   	push   ebx
c000e8a4:	83 ec 1c             	sub    esp,0x1c
c000e8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ab:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b5:	e8 2a 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ba:	85 c0                	test   eax,eax
c000e8bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c2:	0f 95 c2             	setne  dl
c000e8c5:	83 e0 fd             	and    eax,0xfffffffd
c000e8c8:	d1 e2                	shl    edx,1
c000e8ca:	09 d0                	or     eax,edx
c000e8cc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d2:	a8 02                	test   al,0x2
c000e8d4:	75 46                	jne    c000e91c <Computer::detectFeatures()+0x7c>
c000e8d6:	f6 05 61 e4 02 c0 04 	test   BYTE PTR ds:0xc002e461,0x4
c000e8dd:	74 07                	je     c000e8e6 <Computer::detectFeatures()+0x46>
c000e8df:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e6:	e8 7b 7d 01 00       	call   c0026666 <x87Detect>
c000e8eb:	83 e0 01             	and    eax,0x1
c000e8ee:	c1 e0 04             	shl    eax,0x4
c000e8f1:	88 c2                	mov    dl,al
c000e8f3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f9:	83 e0 ef             	and    eax,0xffffffef
c000e8fc:	09 d0                	or     eax,edx
c000e8fe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e904:	a8 10                	test   al,0x10
c000e906:	0f 85 2a 01 00 00    	jne    c000ea36 <Computer::detectFeatures()+0x196>
c000e90c:	84 c0                	test   al,al
c000e90e:	0f 88 45 01 00 00    	js     c000ea59 <Computer::detectFeatures()+0x1b9>
c000e914:	83 c4 1c             	add    esp,0x1c
c000e917:	5b                   	pop    ebx
c000e918:	5e                   	pop    esi
c000e919:	5f                   	pop    edi
c000e91a:	5d                   	pop    ebp
c000e91b:	c3                   	ret    
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	6a 20                	push   0x20
c000e921:	e8 da a2 00 00       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c000e926:	83 e0 01             	and    eax,0x1
c000e929:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e930:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e936:	83 e0 f7             	and    eax,0xfffffff7
c000e939:	09 d0                	or     eax,edx
c000e93b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e941:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e948:	e8 b3 a2 00 00       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c000e94d:	83 e0 01             	and    eax,0x1
c000e950:	88 c2                	mov    dl,al
c000e952:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e958:	83 e0 fe             	and    eax,0xfffffffe
c000e95b:	09 d0                	or     eax,edx
c000e95d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e963:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e96a:	e8 91 a2 00 00       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c000e96f:	c1 e0 07             	shl    eax,0x7
c000e972:	88 c2                	mov    dl,al
c000e974:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e97a:	83 e0 7f             	and    eax,0x7f
c000e97d:	09 d0                	or     eax,edx
c000e97f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e985:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98c:	e8 6f a2 00 00       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	83 e0 01             	and    eax,0x1
c000e997:	c1 e0 05             	shl    eax,0x5
c000e99a:	88 c2                	mov    dl,al
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	83 e0 df             	and    eax,0xffffffdf
c000e9a5:	09 d0                	or     eax,edx
c000e9a7:	f7 05 60 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e460,0x401
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	0f 84 c2 00 00 00    	je     c000ea7f <Computer::detectFeatures()+0x1df>
c000e9bd:	83 e0 fe             	and    eax,0xfffffffe
c000e9c0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cc:	88 c2                	mov    dl,al
c000e9ce:	83 e2 09             	and    edx,0x9
c000e9d1:	fe ca                	dec    dl
c000e9d3:	75 09                	jne    c000e9de <Computer::detectFeatures()+0x13e>
c000e9d5:	83 e0 fe             	and    eax,0xfffffffe
c000e9d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e5:	50                   	push   eax
c000e9e6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9ea:	55                   	push   ebp
c000e9eb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ef:	57                   	push   edi
c000e9f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f4:	56                   	push   esi
c000e9f5:	68 00 00 00 80       	push   0x80000000
c000e9fa:	e8 7d a1 00 00       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9ff:	83 c4 20             	add    esp,0x20
c000ea02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0d:	0f 86 c3 fe ff ff    	jbe    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea13:	83 ec 0c             	sub    esp,0xc
c000ea16:	50                   	push   eax
c000ea17:	55                   	push   ebp
c000ea18:	57                   	push   edi
c000ea19:	56                   	push   esi
c000ea1a:	68 01 00 00 80       	push   0x80000001
c000ea1f:	e8 58 a1 00 00       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea24:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2e:	83 c4 20             	add    esp,0x20
c000ea31:	e9 a0 fe ff ff       	jmp    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea36:	e8 e5 7b 01 00       	call   c0026620 <absolutelyNoChanceInHell>
c000ea3b:	88 c2                	mov    dl,al
c000ea3d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea43:	c1 e2 07             	shl    edx,0x7
c000ea46:	83 e0 7f             	and    eax,0x7f
c000ea49:	09 d0                	or     eax,edx
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	84 c0                	test   al,al
c000ea53:	0f 89 bb fe ff ff    	jns    c000e914 <Computer::detectFeatures()+0x74>
c000ea59:	e8 a2 7b 01 00       	call   c0026600 <avxDetect>
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 00 02 00 00       	push   0x200
c000ea87:	e8 74 a1 00 00       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	83 e0 01             	and    eax,0x1
c000ea92:	88 c2                	mov    dl,al
c000ea94:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9a:	83 e0 fe             	and    eax,0xfffffffe
c000ea9d:	09 d0                	or     eax,edx
c000ea9f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa5:	e9 1c ff ff ff       	jmp    c000e9c6 <Computer::detectFeatures()+0x126>

c000eaaa <Computer::displayFeatures()>:
c000eaaa:	53                   	push   ebx
c000eaab:	83 ec 14             	sub    esp,0x14
c000eaae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab2:	68 19 a0 02 c0       	push   0xc002a019
c000eab7:	e8 e7 42 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac6:	0f 85 73 02 00 00    	jne    c000ed3f <Computer::displayFeatures()+0x295>
c000eacc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 2c a0 02 c0       	push   0xc002a02c
c000eada:	e8 c4 42 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae9:	0f 85 8c 02 00 00    	jne    c000ed7b <Computer::displayFeatures()+0x2d1>
c000eaef:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 3d a0 02 c0       	push   0xc002a03d
c000eafd:	e8 a1 42 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0c:	0f 85 5f 02 00 00    	jne    c000ed71 <Computer::displayFeatures()+0x2c7>
c000eb12:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb17:	83 ec 08             	sub    esp,0x8
c000eb1a:	50                   	push   eax
c000eb1b:	68 4e a0 02 c0       	push   0xc002a04e
c000eb20:	e8 7e 42 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2f:	0f 85 32 02 00 00    	jne    c000ed67 <Computer::displayFeatures()+0x2bd>
c000eb35:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb3a:	83 ec 08             	sub    esp,0x8
c000eb3d:	50                   	push   eax
c000eb3e:	68 5f a0 02 c0       	push   0xc002a05f
c000eb43:	e8 5b 42 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb52:	0f 85 05 02 00 00    	jne    c000ed5d <Computer::displayFeatures()+0x2b3>
c000eb58:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb5d:	83 ec 08             	sub    esp,0x8
c000eb60:	50                   	push   eax
c000eb61:	68 70 a0 02 c0       	push   0xc002a070
c000eb66:	e8 38 42 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb75:	0f 85 d8 01 00 00    	jne    c000ed53 <Computer::displayFeatures()+0x2a9>
c000eb7b:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	50                   	push   eax
c000eb84:	68 81 a0 02 c0       	push   0xc002a081
c000eb89:	e8 15 42 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb98:	0f 85 ab 01 00 00    	jne    c000ed49 <Computer::displayFeatures()+0x29f>
c000eb9e:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 92 a0 02 c0       	push   0xc002a092
c000ebac:	e8 f2 41 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebbb:	0f 88 1b 02 00 00    	js     c000eddc <Computer::displayFeatures()+0x332>
c000ebc1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 a3 a0 02 c0       	push   0xc002a0a3
c000ebcf:	e8 cf 41 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebde:	0f 85 a1 01 00 00    	jne    c000ed85 <Computer::displayFeatures()+0x2db>
c000ebe4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 b4 a0 02 c0       	push   0xc002a0b4
c000ebf2:	e8 ac 41 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec01:	0f 85 cb 01 00 00    	jne    c000edd2 <Computer::displayFeatures()+0x328>
c000ec07:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 c5 a0 02 c0       	push   0xc002a0c5
c000ec15:	e8 89 41 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec24:	0f 85 9e 01 00 00    	jne    c000edc8 <Computer::displayFeatures()+0x31e>
c000ec2a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 d6 a0 02 c0       	push   0xc002a0d6
c000ec38:	e8 66 41 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec47:	0f 85 71 01 00 00    	jne    c000edbe <Computer::displayFeatures()+0x314>
c000ec4d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 e7 a0 02 c0       	push   0xc002a0e7
c000ec5b:	e8 43 41 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec6a:	0f 85 44 01 00 00    	jne    c000edb4 <Computer::displayFeatures()+0x30a>
c000ec70:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 f8 a0 02 c0       	push   0xc002a0f8
c000ec7e:	e8 20 41 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8d:	0f 85 17 01 00 00    	jne    c000edaa <Computer::displayFeatures()+0x300>
c000ec93:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 09 a1 02 c0       	push   0xc002a109
c000eca1:	e8 fd 40 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecb0:	0f 85 ea 00 00 00    	jne    c000eda0 <Computer::displayFeatures()+0x2f6>
c000ecb6:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 1a a1 02 c0       	push   0xc002a11a
c000ecc4:	e8 da 40 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd3:	0f 88 0d 01 00 00    	js     c000ede6 <Computer::displayFeatures()+0x33c>
c000ecd9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 2b a1 02 c0       	push   0xc002a12b
c000ece7:	e8 b7 40 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf6:	0f 85 9a 00 00 00    	jne    c000ed96 <Computer::displayFeatures()+0x2ec>
c000ecfc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 3c a1 02 c0       	push   0xc002a13c
c000ed0a:	e8 94 40 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed19:	75 74                	jne    c000ed8f <Computer::displayFeatures()+0x2e5>
c000ed1b:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 4d a1 02 c0       	push   0xc002a14d
c000ed29:	e8 75 40 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ed2e:	c7 44 24 20 00 bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bb00
c000ed36:	83 c4 18             	add    esp,0x18
c000ed39:	5b                   	pop    ebx
c000ed3a:	e9 64 40 00 00       	jmp    c0012da3 <Dbg::kprintf(char const*, ...)>
c000ed3f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed44:	e9 88 fd ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x27>
c000ed49:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed4e:	e9 50 fe ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0xf9>
c000ed53:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed58:	e9 23 fe ff ff       	jmp    c000eb80 <Computer::displayFeatures()+0xd6>
c000ed5d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed62:	e9 f6 fd ff ff       	jmp    c000eb5d <Computer::displayFeatures()+0xb3>
c000ed67:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed6c:	e9 c9 fd ff ff       	jmp    c000eb3a <Computer::displayFeatures()+0x90>
c000ed71:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed76:	e9 9c fd ff ff       	jmp    c000eb17 <Computer::displayFeatures()+0x6d>
c000ed7b:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed80:	e9 6f fd ff ff       	jmp    c000eaf4 <Computer::displayFeatures()+0x4a>
c000ed85:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed8a:	e9 5a fe ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x13f>
c000ed8f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed94:	eb 8a                	jmp    c000ed20 <Computer::displayFeatures()+0x276>
c000ed96:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed9b:	e9 61 ff ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x257>
c000eda0:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000eda5:	e9 11 ff ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x211>
c000edaa:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edaf:	e9 e4 fe ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x1ee>
c000edb4:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edb9:	e9 b7 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0x1cb>
c000edbe:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edc3:	e9 8a fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0x1a8>
c000edc8:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edcd:	e9 5d fe ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0x185>
c000edd2:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edd7:	e9 30 fe ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x162>
c000eddc:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ede1:	e9 e0 fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x11c>
c000ede6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edeb:	e9 ee fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x234>

c000edf0 <Computer::rdmsr(unsigned int)>:
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfe:	74 0a                	je     c000ee0a <Computer::rdmsr(unsigned int)+0x1a>
c000ee00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee04:	0f 32                	rdmsr  
c000ee06:	83 c4 0c             	add    esp,0xc
c000ee09:	c3                   	ret    
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 5e a1 02 c0       	push   0xc002a15e
c000ee12:	e8 ca b6 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	eb e4                	jmp    c000ee00 <Computer::rdmsr(unsigned int)+0x10>

c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1c:	57                   	push   edi
c000ee1d:	56                   	push   esi
c000ee1e:	52                   	push   edx
c000ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0e                	je     c000ee42 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	89 f0                	mov    eax,esi
c000ee3a:	89 fa                	mov    edx,edi
c000ee3c:	0f 30                	wrmsr  
c000ee3e:	58                   	pop    eax
c000ee3f:	5e                   	pop    esi
c000ee40:	5f                   	pop    edi
c000ee41:	c3                   	ret    
c000ee42:	83 ec 0c             	sub    esp,0xc
c000ee45:	68 64 a1 02 c0       	push   0xc002a164
c000ee4a:	e8 92 b6 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	eb e0                	jmp    c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee54 <Computer::nmiEnabled()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <Computer::readCMOS(unsigned char)>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee6b:	19 c0                	sbb    eax,eax
c000ee6d:	83 e0 80             	and    eax,0xffffff80
c000ee70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee74:	e6 70                	out    0x70,al
c000ee76:	e4 71                	in     al,0x71
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <Computer::enableNMI(bool)>:
c000ee7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee90:	eb ce                	jmp    c000ee60 <Computer::readCMOS(unsigned char)>

c000ee92 <Computer::open(int, int, void*)>:
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 10             	sub    esp,0x10
c000ee97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee9b:	f6 05 60 e4 02 c0 04 	test   BYTE PTR ds:0xc002e460,0x4
c000eea2:	68 68 12 00 00       	push   0x1268
c000eea7:	0f 94 05 84 d3 02 c0 	sete   BYTE PTR ds:0xc002d384
c000eeae:	e8 98 09 00 00       	call   c000f84b <malloc>
c000eeb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb6:	89 c6                	mov    esi,eax
c000eeb8:	e8 07 92 00 00       	call   c00180c4 <ACPI::ACPI()>
c000eebd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec3:	58                   	pop    eax
c000eec4:	5a                   	pop    edx
c000eec5:	56                   	push   esi
c000eec6:	53                   	push   ebx
c000eec7:	e8 04 53 00 00       	call   c00141d0 <Device::addChild(Device*)>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 cc f9 ff ff       	call   c000e8a0 <Computer::detectFeatures()>
c000eed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed7:	e8 ce fb ff ff       	call   c000eaaa <Computer::displayFeatures()>
c000eedc:	59                   	pop    ecx
c000eedd:	5e                   	pop    esi
c000eede:	6a 01                	push   0x1
c000eee0:	53                   	push   ebx
c000eee1:	e8 94 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000eee6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeed:	e8 59 09 00 00       	call   c000f84b <malloc>
c000eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef5:	89 c6                	mov    esi,eax
c000eef7:	e8 bc 9d 00 00       	call   c0018cb8 <CPU::CPU()>
c000eefc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef02:	58                   	pop    eax
c000ef03:	5a                   	pop    edx
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	e8 c5 52 00 00       	call   c00141d0 <Device::addChild(Device*)>
c000ef0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef17:	6a 00                	push   0x0
c000ef19:	6a 00                	push   0x0
c000ef1b:	50                   	push   eax
c000ef1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1f:	83 c4 20             	add    esp,0x20
c000ef22:	e8 2f 58 00 00       	call   c0014756 <setupFPU()>
c000ef27:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	74 1f                	je     c000ef50 <Computer::open(int, int, void*)+0xbe>
c000ef31:	83 ec 08             	sub    esp,0x8
c000ef34:	50                   	push   eax
c000ef35:	53                   	push   ebx
c000ef36:	e8 95 52 00 00       	call   c00141d0 <Device::addChild(Device*)>
c000ef3b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	6a 00                	push   0x0
c000ef49:	50                   	push   eax
c000ef4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 52 e6 00 c0       	push   0xc000e652
c000ef58:	e8 b3 ef 00 00       	call   c001df10 <setupMultitasking(void (*)())>
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    

c000ef68 <Computer::disableNMI()>:
c000ef68:	6a 00                	push   0x0
c000ef6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6e:	e8 07 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000ef73:	58                   	pop    eax
c000ef74:	5a                   	pop    edx
c000ef75:	c3                   	ret    

c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef81:	19 c0                	sbb    eax,eax
c000ef83:	83 e0 80             	and    eax,0xffffff80
c000ef86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef8a:	e6 70                	out    0x70,al
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	e6 71                	out    0x71,al
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <Computer::handleNMI()>:
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	83 ec 10             	sub    esp,0x10
c000ef99:	e4 92                	in     al,0x92
c000ef9b:	89 c6                	mov    esi,eax
c000ef9d:	e4 61                	in     al,0x61
c000ef9f:	68 6a a1 02 c0       	push   0xc002a16a
c000efa4:	88 c3                	mov    bl,al
c000efa6:	e8 f8 3d 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 e6 10             	and    esi,0x10
c000efb1:	75 0d                	jne    c000efc0 <Computer::handleNMI()+0x2c>
c000efb3:	f6 c3 40             	test   bl,0x40
c000efb6:	75 1d                	jne    c000efd5 <Computer::handleNMI()+0x41>
c000efb8:	84 db                	test   bl,bl
c000efba:	78 2d                	js     c000efe9 <Computer::handleNMI()+0x55>
c000efbc:	58                   	pop    eax
c000efbd:	5b                   	pop    ebx
c000efbe:	5e                   	pop    esi
c000efbf:	c3                   	ret    
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 7b a1 02 c0       	push   0xc002a17b
c000efc8:	e8 14 b5 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	f6 c3 40             	test   bl,0x40
c000efd3:	74 e3                	je     c000efb8 <Computer::handleNMI()+0x24>
c000efd5:	83 ec 0c             	sub    esp,0xc
c000efd8:	68 88 a1 02 c0       	push   0xc002a188
c000efdd:	e8 ff b4 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	84 db                	test   bl,bl
c000efe7:	79 d3                	jns    c000efbc <Computer::handleNMI()+0x28>
c000efe9:	c7 44 24 10 92 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a192
c000eff1:	5a                   	pop    edx
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	e9 e8 b4 00 00       	jmp    c001a4e1 <Krnl::panic(char const*)>
c000eff9:	90                   	nop

c000effa <Computer::setDiskActivityLight(int, bool)>:
c000effa:	56                   	push   esi
c000effb:	53                   	push   ebx
c000effc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f000:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f005:	77 1b                	ja     c000f022 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f007:	e4 92                	in     al,0x92
c000f009:	bb 40 00 00 00       	mov    ebx,0x40
c000f00e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f012:	89 da                	mov    edx,ebx
c000f014:	d3 e2                	shl    edx,cl
c000f016:	89 f1                	mov    ecx,esi
c000f018:	f7 d2                	not    edx
c000f01a:	d3 e3                	shl    ebx,cl
c000f01c:	21 d0                	and    eax,edx
c000f01e:	09 d8                	or     eax,ebx
c000f020:	e6 92                	out    0x92,al
c000f022:	5b                   	pop    ebx
c000f023:	5e                   	pop    esi
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <GDTEntry::setBase(unsigned int)>:
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02e:	89 c1                	mov    ecx,eax
c000f030:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f034:	c1 e9 10             	shr    ecx,0x10
c000f037:	c1 e8 18             	shr    eax,0x18
c000f03a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDTEntry::setLimit(unsigned int)>:
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f050:	83 e2 f0             	and    edx,0xfffffff0
c000f053:	c1 e8 10             	shr    eax,0x10
c000f056:	83 e0 0f             	and    eax,0xf
c000f059:	09 d0                	or     eax,edx
c000f05b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05e:	c3                   	ret    
c000f05f:	90                   	nop

c000f060 <GDT::GDT()>:
c000f060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f074:	90                   	nop
c000f075:	c3                   	ret    

c000f076 <GDT::addEntry(GDTEntry)>:
c000f076:	53                   	push   ebx
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f080:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f087:	52                   	push   edx
c000f088:	50                   	push   eax
c000f089:	68 cc a1 02 c0       	push   0xc002a1cc
c000f08e:	e8 10 3d 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000f093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f095:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f099:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0a1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a5:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a8:	c1 e0 03             	shl    eax,0x3
c000f0ab:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ad:	83 c4 18             	add    esp,0x18
c000f0b0:	5b                   	pop    ebx
c000f0b1:	c3                   	ret    

c000f0b2 <GDT::getNumberOfEntries()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <GDT::flush()>:
c000f0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0be:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0c0:	83 c0 04             	add    eax,0x4
c000f0c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ca:	a3 52 e4 02 c0       	mov    ds:0xc002e452,eax
c000f0cf:	66 89 15 50 e4 02 c0 	mov    WORD PTR ds:0xc002e450,dx
c000f0d6:	e9 75 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0db:	90                   	nop

c000f0dc <GDT::setup()>:
c000f0dc:	55                   	push   ebp
c000f0dd:	57                   	push   edi
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	83 ec 3c             	sub    esp,0x3c
c000f0e3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e7:	6a 00                	push   0x0
c000f0e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 33 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 47 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f0fb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f103:	6a 00                	push   0x0
c000f105:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f109:	53                   	push   ebx
c000f10a:	e8 17 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f10f:	68 ff ff ff 00       	push   0xffffff
c000f114:	53                   	push   ebx
c000f115:	e8 28 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f11a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f123:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f128:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f135:	53                   	push   ebx
c000f136:	e8 eb fe ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f13b:	68 ff ff ff 00       	push   0xffffff
c000f140:	53                   	push   ebx
c000f141:	e8 fc fe ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f146:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f14a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f156:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f15a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f168:	89 d8                	mov    eax,ebx
c000f16a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16e:	80 cc 60             	or     ah,0x60
c000f171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	89 f8                	mov    eax,edi
c000f17a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17e:	80 cc 60             	or     ah,0x60
c000f181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f185:	89 c7                	mov    edi,eax
c000f187:	55                   	push   ebp
c000f188:	e8 e9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f198:	55                   	push   ebp
c000f199:	e8 d8 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f19e:	83 c4 0c             	add    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c7 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1af:	83 c4 0c             	add    esp,0xc
c000f1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ba:	53                   	push   ebx
c000f1bb:	51                   	push   ecx
c000f1bc:	55                   	push   ebp
c000f1bd:	e8 b4 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	57                   	push   edi
c000f1c6:	56                   	push   esi
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 a9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1d0:	e8 e5 fe ff ff       	call   c000f0ba <GDT::flush()>
c000f1d5:	83 c4 4c             	add    esp,0x4c
c000f1d8:	5b                   	pop    ebx
c000f1d9:	5e                   	pop    esi
c000f1da:	5f                   	pop    edi
c000f1db:	5d                   	pop    ebp
c000f1dc:	c3                   	ret    

c000f1dd <idleFunction(void*)>:
c000f1dd:	53                   	push   ebx
c000f1de:	83 ec 08             	sub    esp,0x8
c000f1e1:	e8 d8 ea 00 00       	call   c001dcbe <unlockScheduler()>
c000f1e6:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c000f1eb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1f1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f8:	74 3c                	je     c000f236 <idleFunction(void*)+0x59>
c000f1fa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f201:	74 33                	je     c000f236 <idleFunction(void*)+0x59>
c000f203:	31 db                	xor    ebx,ebx
c000f205:	52                   	push   edx
c000f206:	52                   	push   edx
c000f207:	68 e1 00 00 00       	push   0xe1
c000f20c:	50                   	push   eax
c000f20d:	e8 de fb ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c000f212:	53                   	push   ebx
c000f213:	83 e0 02             	and    eax,0x2
c000f216:	50                   	push   eax
c000f217:	68 e1 00 00 00       	push   0xe1
c000f21c:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c000f222:	e8 f5 fb ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	e8 50 10 ff ff       	call   c000027f <doTPAUSE>
c000f22f:	e8 7c 94 01 00       	call   c00286b0 <idleCommon()>
c000f234:	eb f4                	jmp    c000f22a <idleFunction(void*)+0x4d>
c000f236:	fb                   	sti    
c000f237:	f4                   	hlt    
c000f238:	e8 73 94 01 00       	call   c00286b0 <idleCommon()>
c000f23d:	eb f7                	jmp    c000f236 <idleFunction(void*)+0x59>
c000f23f:	90                   	nop

c000f240 <IDTEntry::IDTEntry(bool)>:
c000f240:	83 ec 04             	sub    esp,0x4
c000f243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f247:	88 04 24             	mov    BYTE PTR [esp],al
c000f24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f263:	83 e2 f0             	and    edx,0xfffffff0
c000f266:	83 ca 0e             	or     edx,0xe
c000f269:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f270:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f273:	83 e2 ef             	and    edx,0xffffffef
c000f276:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f279:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27d:	74 04                	je     c000f283 <IDTEntry::IDTEntry(bool)+0x43>
c000f27f:	b2 03                	mov    dl,0x3
c000f281:	eb 02                	jmp    c000f285 <IDTEntry::IDTEntry(bool)+0x45>
c000f283:	b2 00                	mov    dl,0x0
c000f285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f289:	83 e2 03             	and    edx,0x3
c000f28c:	88 d1                	mov    cl,dl
c000f28e:	c1 e1 05             	shl    ecx,0x5
c000f291:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f294:	83 e2 9f             	and    edx,0xffffff9f
c000f297:	09 ca                	or     edx,ecx
c000f299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a3:	83 ca 80             	or     edx,0xffffff80
c000f2a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a9:	90                   	nop
c000f2aa:	83 c4 04             	add    esp,0x4
c000f2ad:	c3                   	ret    

c000f2ae <IDTEntry::setOffset(unsigned int)>:
c000f2ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	c1 e8 10             	shr    eax,0x10
c000f2bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <IDT::IDT()>:
c000f2c2:	90                   	nop
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c8:	83 c0 30             	add    eax,0x30
c000f2cb:	c3                   	ret    

c000f2cc <IDT::addEntry(IDTEntry, int)>:
c000f2cc:	53                   	push   ebx
c000f2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2dd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2e0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e4:	5b                   	pop    ebx
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 10             	sub    esp,0x10
c000f2ea:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ef:	50                   	push   eax
c000f2f0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f4:	53                   	push   ebx
c000f2f5:	e8 46 ff ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f2fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fe:	53                   	push   ebx
c000f2ff:	e8 aa ff ff ff       	call   c000f2ae <IDTEntry::setOffset(unsigned int)>
c000f304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f314:	e8 b3 ff ff ff       	call   c000f2cc <IDT::addEntry(IDTEntry, int)>
c000f319:	83 c4 30             	add    esp,0x30
c000f31c:	5b                   	pop    ebx
c000f31d:	c3                   	ret    

c000f31e <IDT::flush()>:
c000f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f322:	66 c7 05 58 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e458,0x7ff
c000f32b:	a3 5a e4 02 c0       	mov    ds:0xc002e45a,eax
c000f330:	0f 01 1d 58 e4 02 c0 	lidtd  ds:0xc002e458
c000f337:	c3                   	ret    

c000f338 <IDT::setup()>:
c000f338:	57                   	push   edi
c000f339:	56                   	push   esi
c000f33a:	53                   	push   ebx
c000f33b:	83 ec 10             	sub    esp,0x10
c000f33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f342:	6a 00                	push   0x0
c000f344:	68 70 04 00 c0       	push   0xc0000470
c000f349:	6a 00                	push   0x0
c000f34b:	53                   	push   ebx
c000f34c:	e8 95 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f351:	6a 00                	push   0x0
c000f353:	68 80 04 00 c0       	push   0xc0000480
c000f358:	6a 01                	push   0x1
c000f35a:	53                   	push   ebx
c000f35b:	e8 86 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	83 c4 20             	add    esp,0x20
c000f363:	6a 00                	push   0x0
c000f365:	68 8a 04 00 c0       	push   0xc000048a
c000f36a:	6a 02                	push   0x2
c000f36c:	53                   	push   ebx
c000f36d:	e8 74 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f372:	6a 00                	push   0x0
c000f374:	68 94 04 00 c0       	push   0xc0000494
c000f379:	6a 03                	push   0x3
c000f37b:	53                   	push   ebx
c000f37c:	e8 65 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	83 c4 20             	add    esp,0x20
c000f384:	6a 00                	push   0x0
c000f386:	68 9e 04 00 c0       	push   0xc000049e
c000f38b:	6a 04                	push   0x4
c000f38d:	53                   	push   ebx
c000f38e:	e8 53 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f393:	6a 00                	push   0x0
c000f395:	68 a8 04 00 c0       	push   0xc00004a8
c000f39a:	6a 05                	push   0x5
c000f39c:	53                   	push   ebx
c000f39d:	e8 44 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	83 c4 20             	add    esp,0x20
c000f3a5:	6a 00                	push   0x0
c000f3a7:	68 b2 04 00 c0       	push   0xc00004b2
c000f3ac:	6a 06                	push   0x6
c000f3ae:	53                   	push   ebx
c000f3af:	e8 32 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 bc 04 00 c0       	push   0xc00004bc
c000f3bb:	6a 07                	push   0x7
c000f3bd:	53                   	push   ebx
c000f3be:	e8 23 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	83 c4 20             	add    esp,0x20
c000f3c6:	6a 00                	push   0x0
c000f3c8:	68 c6 04 00 c0       	push   0xc00004c6
c000f3cd:	6a 08                	push   0x8
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 11 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 ce 04 00 c0       	push   0xc00004ce
c000f3dc:	6a 09                	push   0x9
c000f3de:	53                   	push   ebx
c000f3df:	e8 02 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	83 c4 20             	add    esp,0x20
c000f3e7:	6a 00                	push   0x0
c000f3e9:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ee:	6a 0a                	push   0xa
c000f3f0:	53                   	push   ebx
c000f3f1:	e8 f0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f3fd:	6a 0b                	push   0xb
c000f3ff:	53                   	push   ebx
c000f400:	e8 e1 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	6a 00                	push   0x0
c000f40a:	68 e8 04 00 c0       	push   0xc00004e8
c000f40f:	6a 0c                	push   0xc
c000f411:	53                   	push   ebx
c000f412:	e8 cf fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f417:	6a 00                	push   0x0
c000f419:	68 f0 04 00 c0       	push   0xc00004f0
c000f41e:	6a 0d                	push   0xd
c000f420:	53                   	push   ebx
c000f421:	e8 c0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	83 c4 20             	add    esp,0x20
c000f429:	6a 00                	push   0x0
c000f42b:	68 f8 04 00 c0       	push   0xc00004f8
c000f430:	6a 0e                	push   0xe
c000f432:	53                   	push   ebx
c000f433:	e8 ae fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f438:	6a 00                	push   0x0
c000f43a:	68 00 05 00 c0       	push   0xc0000500
c000f43f:	6a 0f                	push   0xf
c000f441:	53                   	push   ebx
c000f442:	e8 9f fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	83 c4 20             	add    esp,0x20
c000f44a:	6a 00                	push   0x0
c000f44c:	68 0a 05 00 c0       	push   0xc000050a
c000f451:	6a 10                	push   0x10
c000f453:	53                   	push   ebx
c000f454:	e8 8d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f459:	6a 00                	push   0x0
c000f45b:	68 14 05 00 c0       	push   0xc0000514
c000f460:	6a 11                	push   0x11
c000f462:	53                   	push   ebx
c000f463:	e8 7e fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	6a 00                	push   0x0
c000f46d:	68 1e 05 00 c0       	push   0xc000051e
c000f472:	6a 12                	push   0x12
c000f474:	53                   	push   ebx
c000f475:	e8 6c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f47a:	6a 01                	push   0x1
c000f47c:	68 b8 05 00 c0       	push   0xc00005b8
c000f481:	6a 60                	push   0x60
c000f483:	53                   	push   ebx
c000f484:	e8 5d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	83 c4 20             	add    esp,0x20
c000f48c:	6a 00                	push   0x0
c000f48e:	68 bf 05 00 c0       	push   0xc00005bf
c000f493:	6a 20                	push   0x20
c000f495:	53                   	push   ebx
c000f496:	e8 4b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f49b:	6a 00                	push   0x0
c000f49d:	68 aa 05 00 c0       	push   0xc00005aa
c000f4a2:	6a 21                	push   0x21
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 3c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b1 05 00 c0       	push   0xc00005b1
c000f4b4:	6a 22                	push   0x22
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 2a fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 28 05 00 c0       	push   0xc0000528
c000f4c3:	6a 23                	push   0x23
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 1b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	83 c4 20             	add    esp,0x20
c000f4ce:	6a 00                	push   0x0
c000f4d0:	68 32 05 00 c0       	push   0xc0000532
c000f4d5:	6a 24                	push   0x24
c000f4d7:	53                   	push   ebx
c000f4d8:	e8 09 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 3c 05 00 c0       	push   0xc000053c
c000f4e4:	6a 25                	push   0x25
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 fa fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	83 c4 20             	add    esp,0x20
c000f4ef:	6a 00                	push   0x0
c000f4f1:	68 46 05 00 c0       	push   0xc0000546
c000f4f6:	6a 26                	push   0x26
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 e8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4fe:	6a 00                	push   0x0
c000f500:	68 50 05 00 c0       	push   0xc0000550
c000f505:	6a 27                	push   0x27
c000f507:	53                   	push   ebx
c000f508:	e8 d9 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	83 c4 20             	add    esp,0x20
c000f510:	6a 00                	push   0x0
c000f512:	68 5a 05 00 c0       	push   0xc000055a
c000f517:	6a 28                	push   0x28
c000f519:	53                   	push   ebx
c000f51a:	e8 c7 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f51f:	6a 00                	push   0x0
c000f521:	68 64 05 00 c0       	push   0xc0000564
c000f526:	6a 29                	push   0x29
c000f528:	53                   	push   ebx
c000f529:	e8 b8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	83 c4 20             	add    esp,0x20
c000f531:	6a 00                	push   0x0
c000f533:	68 6e 05 00 c0       	push   0xc000056e
c000f538:	6a 2a                	push   0x2a
c000f53a:	53                   	push   ebx
c000f53b:	e8 a6 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f540:	6a 00                	push   0x0
c000f542:	68 78 05 00 c0       	push   0xc0000578
c000f547:	6a 2b                	push   0x2b
c000f549:	53                   	push   ebx
c000f54a:	e8 97 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	83 c4 20             	add    esp,0x20
c000f552:	6a 00                	push   0x0
c000f554:	68 82 05 00 c0       	push   0xc0000582
c000f559:	6a 2c                	push   0x2c
c000f55b:	53                   	push   ebx
c000f55c:	e8 85 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f561:	6a 00                	push   0x0
c000f563:	68 8c 05 00 c0       	push   0xc000058c
c000f568:	6a 2d                	push   0x2d
c000f56a:	53                   	push   ebx
c000f56b:	e8 76 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	83 c4 20             	add    esp,0x20
c000f573:	6a 00                	push   0x0
c000f575:	68 96 05 00 c0       	push   0xc0000596
c000f57a:	6a 2e                	push   0x2e
c000f57c:	53                   	push   ebx
c000f57d:	e8 64 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f582:	6a 00                	push   0x0
c000f584:	68 a0 05 00 c0       	push   0xc00005a0
c000f589:	6a 2f                	push   0x2f
c000f58b:	53                   	push   ebx
c000f58c:	e8 55 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	83 c4 20             	add    esp,0x20
c000f594:	6a 00                	push   0x0
c000f596:	68 f5 05 00 c0       	push   0xc00005f5
c000f59b:	6a 30                	push   0x30
c000f59d:	53                   	push   ebx
c000f59e:	e8 43 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 ff 05 00 c0       	push   0xc00005ff
c000f5aa:	6a 31                	push   0x31
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 34 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	83 c4 20             	add    esp,0x20
c000f5b5:	6a 00                	push   0x0
c000f5b7:	68 09 06 00 c0       	push   0xc0000609
c000f5bc:	6a 32                	push   0x32
c000f5be:	53                   	push   ebx
c000f5bf:	e8 22 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 13 06 00 c0       	push   0xc0000613
c000f5cb:	6a 33                	push   0x33
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 13 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	83 c4 20             	add    esp,0x20
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 1d 06 00 c0       	push   0xc000061d
c000f5dd:	6a 34                	push   0x34
c000f5df:	53                   	push   ebx
c000f5e0:	e8 01 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 27 06 00 c0       	push   0xc0000627
c000f5ec:	6a 35                	push   0x35
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 f2 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	83 c4 20             	add    esp,0x20
c000f5f7:	6a 00                	push   0x0
c000f5f9:	68 31 06 00 c0       	push   0xc0000631
c000f5fe:	6a 36                	push   0x36
c000f600:	53                   	push   ebx
c000f601:	e8 e0 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f606:	6a 00                	push   0x0
c000f608:	68 3b 06 00 c0       	push   0xc000063b
c000f60d:	6a 37                	push   0x37
c000f60f:	53                   	push   ebx
c000f610:	e8 d1 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	83 c4 20             	add    esp,0x20
c000f618:	e8 f1 25 00 00       	call   c0011c0e <Virt::getAKernelVAS()>
c000f61d:	52                   	push   edx
c000f61e:	6a 03                	push   0x3
c000f620:	6a 02                	push   0x2
c000f622:	50                   	push   eax
c000f623:	e8 d4 2c 00 00       	call   c00122fc <VAS::allocatePages(int, int)>
c000f628:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62f:	89 c6                	mov    esi,eax
c000f631:	e8 15 02 00 00       	call   c000f84b <malloc>
c000f636:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63f:	89 c7                	mov    edi,eax
c000f641:	e8 ba 1c 00 00       	call   c0011300 <TSS::TSS()>
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	68 c6 04 00 c0       	push   0xc00004c6
c000f64e:	56                   	push   esi
c000f64f:	57                   	push   edi
c000f650:	e8 eb 1c 00 00       	call   c0011340 <TSS::setup(unsigned long, unsigned long)>
c000f655:	59                   	pop    ecx
c000f656:	89 c6                	mov    esi,eax
c000f658:	5f                   	pop    edi
c000f659:	6a 00                	push   0x0
c000f65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65f:	50                   	push   eax
c000f660:	e8 db fb ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f665:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f669:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f675:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67f:	80 ce 05             	or     dh,0x5
c000f682:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f693:	e8 86 fc ff ff       	call   c000f31e <IDT::flush()>
c000f698:	83 c4 20             	add    esp,0x20
c000f69b:	5b                   	pop    ebx
c000f69c:	5e                   	pop    esi
c000f69d:	5f                   	pop    edi
c000f69e:	c3                   	ret    

c000f69f <sbrk>:
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	56                   	push   esi
c000f6a2:	53                   	push   ebx
c000f6a3:	83 ec 1c             	sub    esp,0x1c
c000f6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 3e                	je     c000f6ec <sbrk+0x4d>
c000f6ae:	78 43                	js     c000f6f3 <sbrk+0x54>
c000f6b0:	8b 15 48 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e448
c000f6b6:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6bc:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c2:	83 e2 01             	and    edx,0x1
c000f6c5:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c9:	8b 0d 68 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d368
c000f6cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d3:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d8:	89 c2                	mov    edx,eax
c000f6da:	78 2f                	js     c000f70b <sbrk+0x6c>
c000f6dc:	c1 fa 0c             	sar    edx,0xc
c000f6df:	89 d7                	mov    edi,edx
c000f6e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e5:	be 00 00 00 00       	mov    esi,0x0
c000f6ea:	eb 36                	jmp    c000f722 <sbrk+0x83>
c000f6ec:	a1 68 d3 02 c0       	mov    eax,ds:0xc002d368
c000f6f1:	eb 74                	jmp    c000f767 <sbrk+0xc8>
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	50                   	push   eax
c000f6f7:	68 e8 a1 02 c0       	push   0xc002a1e8
c000f6fc:	e8 a2 36 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f709:	eb 5c                	jmp    c000f767 <sbrk+0xc8>
c000f70b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f711:	eb c9                	jmp    c000f6dc <sbrk+0x3d>
c000f713:	81 05 68 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d368,0x1000
c000f71d:	46                   	inc    esi
c000f71e:	39 f7                	cmp    edi,esi
c000f720:	74 34                	je     c000f756 <sbrk+0xb7>
c000f722:	e8 e7 24 00 00       	call   c0011c0e <Virt::getAKernelVAS()>
c000f727:	89 c3                	mov    ebx,eax
c000f729:	8b 2d 68 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d368
c000f72f:	e8 83 07 00 00       	call   c000feb7 <Phys::allocatePage()>
c000f734:	68 01 0c 00 00       	push   0xc01
c000f739:	55                   	push   ebp
c000f73a:	50                   	push   eax
c000f73b:	53                   	push   ebx
c000f73c:	e8 bb 2a 00 00       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f749:	74 c8                	je     c000f713 <sbrk+0x74>
c000f74b:	8b 1d 68 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d368
c000f751:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f754:	eb bd                	jmp    c000f713 <sbrk+0x74>
c000f756:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f75b:	75 12                	jne    c000f76f <sbrk+0xd0>
c000f75d:	0f 20 d8             	mov    eax,cr3
c000f760:	0f 22 d8             	mov    cr3,eax
c000f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f767:	83 c4 1c             	add    esp,0x1c
c000f76a:	5b                   	pop    ebx
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	5d                   	pop    ebp
c000f76e:	c3                   	ret    
c000f76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f773:	89 cb                	mov    ebx,ecx
c000f775:	c1 eb 0a             	shr    ebx,0xa
c000f778:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f788:	c1 e0 0c             	shl    eax,0xc
c000f78b:	01 c8                	add    eax,ecx
c000f78d:	c1 e8 0a             	shr    eax,0xa
c000f790:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f795:	2d 00 00 40 00       	sub    eax,0x400000
c000f79a:	39 c3                	cmp    ebx,eax
c000f79c:	77 c5                	ja     c000f763 <sbrk+0xc4>
c000f79e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a7:	39 d8                	cmp    eax,ebx
c000f7a9:	73 f3                	jae    c000f79e <sbrk+0xff>
c000f7ab:	eb b6                	jmp    c000f763 <sbrk+0xc4>

c000f7ad <mmap>:
c000f7ad:	83 ec 18             	sub    esp,0x18
c000f7b0:	68 18 a2 02 c0       	push   0xc002a218
c000f7b5:	e8 27 ad 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	83 c4 1c             	add    esp,0x1c
c000f7c2:	c3                   	ret    

c000f7c3 <munmap>:
c000f7c3:	83 ec 18             	sub    esp,0x18
c000f7c6:	68 1d a2 02 c0       	push   0xc002a21d
c000f7cb:	e8 11 ad 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000f7d0:	b8 00 00 00 00       	mov    eax,0x0
c000f7d5:	83 c4 1c             	add    esp,0x1c
c000f7d8:	c3                   	ret    

c000f7d9 <liballoc_lock()>:
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	e8 db e4 00 00       	call   c001dcbc <lockScheduler()>
c000f7e1:	b8 00 00 00 00       	mov    eax,0x0
c000f7e6:	83 c4 0c             	add    esp,0xc
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_unlock()>:
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	e8 cc e4 00 00       	call   c001dcbe <unlockScheduler()>
c000f7f2:	b8 00 00 00 00       	mov    eax,0x0
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    

c000f7fb <liballoc_alloc(int)>:
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	e8 0b 24 00 00       	call   c0011c0e <Virt::getAKernelVAS()>
c000f803:	83 ec 04             	sub    esp,0x4
c000f806:	68 01 08 00 00       	push   0x801
c000f80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80f:	50                   	push   eax
c000f810:	e8 e7 2a 00 00       	call   c00122fc <VAS::allocatePages(int, int)>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <liballoc_free(void*, int)>:
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	e8 ed 23 00 00       	call   c0011c0e <Virt::getAKernelVAS()>
c000f821:	83 ec 08             	sub    esp,0x8
c000f824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f828:	50                   	push   eax
c000f829:	e8 8a 27 00 00       	call   c0011fb8 <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 15 1e ff ff       	call   c000165c <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c8 18 ff ff       	call   c000111f <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 5d 15 ff ff       	call   c0000dc4 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 4d 15 ff ff       	call   c0000dc4 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 e3 0e ff ff       	call   c0000780 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    

c000f8a5 <hwTextMode_loadInData(VgaText*)>:
c000f8a5:	55                   	push   ebp
c000f8a6:	a1 80 d3 02 c0       	mov    eax,ds:0xc002d380
c000f8ab:	57                   	push   edi
c000f8ac:	56                   	push   esi
c000f8ad:	53                   	push   ebx
c000f8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8b2:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8b5:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8b8:	85 d2                	test   edx,edx
c000f8ba:	7e 29                	jle    c000f8e5 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8bc:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f8c2:	31 f6                	xor    esi,esi
c000f8c4:	29 cd                	sub    ebp,ecx
c000f8c6:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c9:	31 c0                	xor    eax,eax
c000f8cb:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8cf:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d3:	40                   	inc    eax
c000f8d4:	83 f8 50             	cmp    eax,0x50
c000f8d7:	75 f2                	jne    c000f8cb <hwTextMode_loadInData(VgaText*)+0x26>
c000f8d9:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8df:	46                   	inc    esi
c000f8e0:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f8e3:	7f e1                	jg     c000f8c6 <hwTextMode_loadInData(VgaText*)+0x21>
c000f8e5:	5b                   	pop    ebx
c000f8e6:	5e                   	pop    esi
c000f8e7:	5f                   	pop    edi
c000f8e8:	5d                   	pop    ebp
c000f8e9:	c3                   	ret    

c000f8ea <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8ea:	55                   	push   ebp
c000f8eb:	80 3d e0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4e0,0x0
c000f8f2:	57                   	push   edi
c000f8f3:	56                   	push   esi
c000f8f4:	53                   	push   ebx
c000f8f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f9:	75 44                	jne    c000f93f <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f8fb:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f8fe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f901:	8b 15 80 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d380
c000f907:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90b:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f911:	eb 08                	jmp    c000f91b <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f913:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f916:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f919:	89 da                	mov    edx,ebx
c000f91b:	83 e5 0f             	and    ebp,0xf
c000f91e:	c1 e0 04             	shl    eax,0x4
c000f921:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f924:	0f b6 c0             	movzx  eax,al
c000f927:	41                   	inc    ecx
c000f928:	09 e8                	or     eax,ebp
c000f92a:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f92e:	c1 e0 08             	shl    eax,0x8
c000f931:	09 e8                	or     eax,ebp
c000f933:	39 fb                	cmp    ebx,edi
c000f935:	66 89 02             	mov    WORD PTR [edx],ax
c000f938:	75 d9                	jne    c000f913 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f93a:	5b                   	pop    ebx
c000f93b:	5e                   	pop    esi
c000f93c:	5f                   	pop    edi
c000f93d:	5d                   	pop    ebp
c000f93e:	c3                   	ret    
c000f93f:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f946:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f94d:	31 c0                	xor    eax,eax
c000f94f:	bd 02 00 00 00       	mov    ebp,0x2
c000f954:	eb ab                	jmp    c000f901 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f956 <hwTextMode_showCursor(VgaText*, bool)>:
c000f956:	56                   	push   esi
c000f957:	80 3d e0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4e0,0x0
c000f95e:	53                   	push   ebx
c000f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f963:	75 36                	jne    c000f99b <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f965:	84 c0                	test   al,al
c000f967:	74 35                	je     c000f99e <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f969:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f96e:	b0 0a                	mov    al,0xa
c000f970:	89 da                	mov    edx,ebx
c000f972:	ee                   	out    dx,al
c000f973:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f978:	89 ca                	mov    edx,ecx
c000f97a:	ec                   	in     al,dx
c000f97b:	b2 0f                	mov    dl,0xf
c000f97d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f981:	83 e0 c0             	and    eax,0xffffffc0
c000f984:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f987:	09 d0                	or     eax,edx
c000f989:	89 ca                	mov    edx,ecx
c000f98b:	ee                   	out    dx,al
c000f98c:	b0 0b                	mov    al,0xb
c000f98e:	89 da                	mov    edx,ebx
c000f990:	ee                   	out    dx,al
c000f991:	89 ca                	mov    edx,ecx
c000f993:	ec                   	in     al,dx
c000f994:	83 e0 e0             	and    eax,0xffffffe0
c000f997:	83 c8 0f             	or     eax,0xf
c000f99a:	ee                   	out    dx,al
c000f99b:	5b                   	pop    ebx
c000f99c:	5e                   	pop    esi
c000f99d:	c3                   	ret    
c000f99e:	b0 0a                	mov    al,0xa
c000f9a0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9a5:	ee                   	out    dx,al
c000f9a6:	b0 20                	mov    al,0x20
c000f9a8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    

c000f9b1 <hwTextMode_update(VgaText*)>:
c000f9b1:	c3                   	ret    

c000f9b2 <hwTextMode_updateCursor(VgaText*)>:
c000f9b2:	56                   	push   esi
c000f9b3:	80 3d e0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4e0,0x0
c000f9ba:	53                   	push   ebx
c000f9bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9bf:	75 36                	jne    c000f9f7 <hwTextMode_updateCursor(VgaText*)+0x45>
c000f9c1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9c6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9cb:	89 f2                	mov    edx,esi
c000f9cd:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000f9d0:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000f9d3:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9d6:	c1 e1 04             	shl    ecx,0x4
c000f9d9:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000f9dc:	b0 0f                	mov    al,0xf
c000f9de:	ee                   	out    dx,al
c000f9df:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9e4:	88 c8                	mov    al,cl
c000f9e6:	89 da                	mov    edx,ebx
c000f9e8:	ee                   	out    dx,al
c000f9e9:	b0 0e                	mov    al,0xe
c000f9eb:	89 f2                	mov    edx,esi
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 c8                	mov    eax,ecx
c000f9f0:	89 da                	mov    edx,ebx
c000f9f2:	66 c1 e8 08          	shr    ax,0x8
c000f9f6:	ee                   	out    dx,al
c000f9f7:	5b                   	pop    ebx
c000f9f8:	5e                   	pop    esi
c000f9f9:	c3                   	ret    

c000f9fa <hwTextMode_disableBlink(VgaText*, bool)>:
c000f9fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9fe:	80 3d e0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4e0,0x0
c000fa05:	75 38                	jne    c000fa3f <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa07:	ba da 03 00 00       	mov    edx,0x3da
c000fa0c:	84 c0                	test   al,al
c000fa0e:	75 18                	jne    c000fa28 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa10:	ec                   	in     al,dx
c000fa11:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa16:	b0 30                	mov    al,0x30
c000fa18:	89 ca                	mov    edx,ecx
c000fa1a:	ee                   	out    dx,al
c000fa1b:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa20:	ec                   	in     al,dx
c000fa21:	83 c8 08             	or     eax,0x8
c000fa24:	89 ca                	mov    edx,ecx
c000fa26:	ee                   	out    dx,al
c000fa27:	c3                   	ret    
c000fa28:	ec                   	in     al,dx
c000fa29:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2e:	b0 30                	mov    al,0x30
c000fa30:	89 ca                	mov    edx,ecx
c000fa32:	ee                   	out    dx,al
c000fa33:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa38:	ec                   	in     al,dx
c000fa39:	83 e0 f7             	and    eax,0xfffffff7
c000fa3c:	89 ca                	mov    edx,ecx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	c3                   	ret    

c000fa40 <hwTextMode_scrollScreen(VgaText*)>:
c000fa40:	55                   	push   ebp
c000fa41:	57                   	push   edi
c000fa42:	56                   	push   esi
c000fa43:	53                   	push   ebx
c000fa44:	83 ec 1c             	sub    esp,0x1c
c000fa47:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa4b:	80 3d e0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4e0,0x0
c000fa52:	74 0e                	je     c000fa62 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fa54:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fa5b:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fa62:	a1 80 d3 02 c0       	mov    eax,ds:0xc002d380
c000fa67:	bd 02 00 00 00       	mov    ebp,0x2
c000fa6c:	05 a0 00 00 00       	add    eax,0xa0
c000fa71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa79:	31 c0                	xor    eax,eax
c000fa7b:	eb 0b                	jmp    c000fa88 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fa7d:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fa83:	74 51                	je     c000fad6 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fa85:	43                   	inc    ebx
c000fa86:	89 f0                	mov    eax,esi
c000fa88:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fa8e:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fa94:	88 13                	mov    BYTE PTR [ebx],dl
c000fa96:	8d 70 01             	lea    esi,[eax+0x1]
c000fa99:	83 fd 18             	cmp    ebp,0x18
c000fa9c:	75 df                	jne    c000fa7d <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fa9e:	a8 01                	test   al,0x1
c000faa0:	75 13                	jne    c000fab5 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000faa2:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000faa5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faab:	75 d8                	jne    c000fa85 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000faad:	83 c4 1c             	add    esp,0x1c
c000fab0:	5b                   	pop    ebx
c000fab1:	5e                   	pop    esi
c000fab2:	5f                   	pop    edi
c000fab3:	5d                   	pop    ebp
c000fab4:	c3                   	ret    
c000fab5:	83 ec 08             	sub    esp,0x8
c000fab8:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fabc:	50                   	push   eax
c000fabd:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fac1:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fac5:	50                   	push   eax
c000fac6:	e8 09 0c 00 00       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c000facb:	83 c4 10             	add    esp,0x10
c000face:	88 07                	mov    BYTE PTR [edi],al
c000fad0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fad4:	eb cf                	jmp    c000faa5 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fad6:	45                   	inc    ebp
c000fad7:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fadf:	eb 94                	jmp    c000fa75 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fae1 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fae1:	57                   	push   edi
c000fae2:	80 3d e0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4e0,0x0
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000faef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000faf3:	75 62                	jne    c000fb57 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000faf5:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fafa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000faff:	83 ec 08             	sub    esp,0x8
c000fb02:	52                   	push   edx
c000fb03:	50                   	push   eax
c000fb04:	e8 cb 0b 00 00       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb09:	5a                   	pop    edx
c000fb0a:	0f b6 c0             	movzx  eax,al
c000fb0d:	59                   	pop    ecx
c000fb0e:	50                   	push   eax
c000fb0f:	0f be c3             	movsx  eax,bl
c000fb12:	50                   	push   eax
c000fb13:	e8 62 0c 00 00       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	8b 35 80 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d380
c000fb21:	80 3d e0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4e0,0x0
c000fb28:	74 07                	je     c000fb31 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb2a:	66 0f be c3          	movsx  ax,bl
c000fb2e:	80 cc 02             	or     ah,0x2
c000fb31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb35:	ba 19 00 00 00       	mov    edx,0x19
c000fb3a:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb3d:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb40:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb43:	c1 e1 04             	shl    ecx,0x4
c000fb46:	c1 e2 04             	shl    edx,0x4
c000fb49:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb4d:	01 ca                	add    edx,ecx
c000fb4f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb53:	5b                   	pop    ebx
c000fb54:	5e                   	pop    esi
c000fb55:	5f                   	pop    edi
c000fb56:	c3                   	ret    
c000fb57:	b8 02 00 00 00       	mov    eax,0x2
c000fb5c:	31 d2                	xor    edx,edx
c000fb5e:	eb 9f                	jmp    c000faff <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb60 <setupTextMode()>:
c000fb60:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb65:	83 e0 30             	and    eax,0x30
c000fb68:	66 83 f8 30          	cmp    ax,0x30
c000fb6c:	75 11                	jne    c000fb7f <setupTextMode()+0x1f>
c000fb6e:	81 2d 80 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d380,0x8000
c000fb78:	c6 05 e0 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4e0,0x1
c000fb7f:	c7 05 18 e5 02 c0 fa f9 00 c0 	mov    DWORD PTR ds:0xc002e518,0xc000f9fa
c000fb89:	c7 05 04 e5 02 c0 a5 f8 00 c0 	mov    DWORD PTR ds:0xc002e504,0xc000f8a5
c000fb93:	c7 05 00 e5 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002e500,0xc000f8ea
c000fb9d:	c7 05 0c e5 02 c0 40 fa 00 c0 	mov    DWORD PTR ds:0xc002e50c,0xc000fa40
c000fba7:	c7 05 14 e5 02 c0 56 f9 00 c0 	mov    DWORD PTR ds:0xc002e514,0xc000f956
c000fbb1:	c7 05 08 e5 02 c0 b1 f9 00 c0 	mov    DWORD PTR ds:0xc002e508,0xc000f9b1
c000fbbb:	c7 05 10 e5 02 c0 b2 f9 00 c0 	mov    DWORD PTR ds:0xc002e510,0xc000f9b2
c000fbc5:	c7 05 1c e5 02 c0 e1 fa 00 c0 	mov    DWORD PTR ds:0xc002e51c,0xc000fae1
c000fbcf:	c3                   	ret    

c000fbd0 <kernel_main>:
c000fbd0:	57                   	push   edi
c000fbd1:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbd6:	56                   	push   esi
c000fbd7:	89 fa                	mov    edx,edi
c000fbd9:	53                   	push   ebx
c000fbda:	31 f6                	xor    esi,esi
c000fbdc:	83 ec 2c             	sub    esp,0x2c
c000fbdf:	89 f0                	mov    eax,esi
c000fbe1:	ee                   	out    dx,al
c000fbe2:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fbe7:	b0 80                	mov    al,0x80
c000fbe9:	89 da                	mov    edx,ebx
c000fbeb:	ee                   	out    dx,al
c000fbec:	b1 03                	mov    cl,0x3
c000fbee:	ba f8 03 00 00       	mov    edx,0x3f8
c000fbf3:	88 c8                	mov    al,cl
c000fbf5:	ee                   	out    dx,al
c000fbf6:	89 f0                	mov    eax,esi
c000fbf8:	89 fa                	mov    edx,edi
c000fbfa:	ee                   	out    dx,al
c000fbfb:	88 c8                	mov    al,cl
c000fbfd:	89 da                	mov    edx,ebx
c000fbff:	ee                   	out    dx,al
c000fc00:	b0 c7                	mov    al,0xc7
c000fc02:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc07:	ee                   	out    dx,al
c000fc08:	b0 0b                	mov    al,0xb
c000fc0a:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc0f:	ee                   	out    dx,al
c000fc10:	68 24 a2 02 c0       	push   0xc002a224
c000fc15:	e8 89 31 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000fc1a:	e8 47 09 00 00       	call   c0010566 <installVgaTextImplementation()>
c000fc1f:	e8 3c ff ff ff       	call   c000fb60 <setupTextMode()>
c000fc24:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc29:	05 ff 0f 00 00       	add    eax,0xfff
c000fc2e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc33:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc36:	e8 f3 03 00 00       	call   c001002e <Phys::physicalMemorySetup(unsigned int)>
c000fc3b:	e8 4e 1f 00 00       	call   c0011b8e <Virt::virtualMemorySetup()>
c000fc40:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc46:	83 c4 10             	add    esp,0x10
c000fc49:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc4f:	75 0e                	jne    c000fc5f <kernel_main+0x8f>
c000fc51:	89 d8                	mov    eax,ebx
c000fc53:	25 48 03 00 00       	and    eax,0x348
c000fc58:	3d 00 03 00 00       	cmp    eax,0x300
c000fc5d:	74 10                	je     c000fc6f <kernel_main+0x9f>
c000fc5f:	83 ec 0c             	sub    esp,0xc
c000fc62:	68 01 bb 02 c0       	push   0xc002bb01
c000fc67:	e8 75 a8 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000fc6c:	83 c4 10             	add    esp,0x10
c000fc6f:	83 ec 0c             	sub    esp,0xc
c000fc72:	89 1d 60 e4 02 c0    	mov    DWORD PTR ds:0xc002e460,ebx
c000fc78:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fc7c:	53                   	push   ebx
c000fc7d:	e8 5e 21 00 00       	call   c0011de0 <VAS::VAS()>
c000fc82:	89 1d d0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5d0,ebx
c000fc88:	e8 93 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fc8d:	c7 04 24 3b a2 02 c0 	mov    DWORD PTR [esp],0xc002a23b
c000fc94:	e8 0a 31 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000fc99:	e8 6f 1f 00 00       	call   c0011c0d <Virt::swappingSetup()>
c000fc9e:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fca5:	e8 a1 fb ff ff       	call   c000f84b <malloc>
c000fcaa:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcad:	89 c6                	mov    esi,eax
c000fcaf:	e8 8e ea ff ff       	call   c000e742 <Computer::Computer()>
c000fcb4:	58                   	pop    eax
c000fcb5:	89 35 48 e4 02 c0    	mov    DWORD PTR ds:0xc002e448,esi
c000fcbb:	5a                   	pop    edx
c000fcbc:	56                   	push   esi
c000fcbd:	68 58 a2 02 c0       	push   0xc002a258
c000fcc2:	e8 dc 30 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000fcc7:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c000fccc:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcce:	6a 00                	push   0x0
c000fcd0:	6a 00                	push   0x0
c000fcd2:	6a 00                	push   0x0
c000fcd4:	50                   	push   eax
c000fcd5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcd8:	83 c4 14             	add    esp,0x14
c000fcdb:	53                   	push   ebx
c000fcdc:	e8 af 23 00 00       	call   c0012090 <VAS::~VAS()>
c000fce1:	c7 04 24 6b a2 02 c0 	mov    DWORD PTR [esp],0xc002a26b
c000fce8:	e8 f4 a7 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000fced:	83 c4 30             	add    esp,0x30
c000fcf0:	5b                   	pop    ebx
c000fcf1:	5e                   	pop    esi
c000fcf2:	5f                   	pop    edi
c000fcf3:	c3                   	ret    

c000fcf4 <Phys::allocateDMA(unsigned long)>:
c000fcf4:	55                   	push   ebp
c000fcf5:	31 d2                	xor    edx,edx
c000fcf7:	57                   	push   edi
c000fcf8:	31 ed                	xor    ebp,ebp
c000fcfa:	56                   	push   esi
c000fcfb:	31 c9                	xor    ecx,ecx
c000fcfd:	53                   	push   ebx
c000fcfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd02:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd08:	31 c0                	xor    eax,eax
c000fd0a:	c1 ee 0c             	shr    esi,0xc
c000fd0d:	eb 17                	jmp    c000fd26 <Phys::allocateDMA(unsigned long)+0x32>
c000fd0f:	85 c9                	test   ecx,ecx
c000fd11:	75 04                	jne    c000fd17 <Phys::allocateDMA(unsigned long)+0x23>
c000fd13:	89 d5                	mov    ebp,edx
c000fd15:	89 d0                	mov    eax,edx
c000fd17:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd1a:	39 de                	cmp    esi,ebx
c000fd1c:	74 20                	je     c000fd3e <Phys::allocateDMA(unsigned long)+0x4a>
c000fd1e:	42                   	inc    edx
c000fd1f:	89 d9                	mov    ecx,ebx
c000fd21:	83 fa 2f             	cmp    edx,0x2f
c000fd24:	7f 11                	jg     c000fd37 <Phys::allocateDMA(unsigned long)+0x43>
c000fd26:	80 ba a0 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1b60],0x0
c000fd2d:	74 e0                	je     c000fd0f <Phys::allocateDMA(unsigned long)+0x1b>
c000fd2f:	31 c9                	xor    ecx,ecx
c000fd31:	42                   	inc    edx
c000fd32:	83 fa 2f             	cmp    edx,0x2f
c000fd35:	7e ef                	jle    c000fd26 <Phys::allocateDMA(unsigned long)+0x32>
c000fd37:	5b                   	pop    ebx
c000fd38:	31 c0                	xor    eax,eax
c000fd3a:	5e                   	pop    esi
c000fd3b:	5f                   	pop    edi
c000fd3c:	5d                   	pop    ebp
c000fd3d:	c3                   	ret    
c000fd3e:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd41:	89 d7                	mov    edi,edx
c000fd43:	4f                   	dec    edi
c000fd44:	79 03                	jns    c000fd49 <Phys::allocateDMA(unsigned long)+0x55>
c000fd46:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd49:	c1 ff 04             	sar    edi,0x4
c000fd4c:	89 c2                	mov    edx,eax
c000fd4e:	c1 fa 04             	sar    edx,0x4
c000fd51:	39 fa                	cmp    edx,edi
c000fd53:	75 2f                	jne    c000fd84 <Phys::allocateDMA(unsigned long)+0x90>
c000fd55:	85 db                	test   ebx,ebx
c000fd57:	74 1a                	je     c000fd73 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd59:	be a0 e4 02 c0       	mov    esi,0xc002e4a0
c000fd5e:	8d 90 a0 e4 02 c0    	lea    edx,[eax-0x3ffd1b60]
c000fd64:	f7 d6                	not    esi
c000fd66:	29 c6                	sub    esi,eax
c000fd68:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd6b:	42                   	inc    edx
c000fd6c:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd6f:	39 d9                	cmp    ecx,ebx
c000fd71:	7f f5                	jg     c000fd68 <Phys::allocateDMA(unsigned long)+0x74>
c000fd73:	85 ff                	test   edi,edi
c000fd75:	74 13                	je     c000fd8a <Phys::allocateDMA(unsigned long)+0x96>
c000fd77:	5b                   	pop    ebx
c000fd78:	05 50 20 0c 00       	add    eax,0xc2050
c000fd7d:	5e                   	pop    esi
c000fd7e:	c1 e0 0c             	shl    eax,0xc
c000fd81:	5f                   	pop    edi
c000fd82:	5d                   	pop    ebp
c000fd83:	c3                   	ret    
c000fd84:	89 ea                	mov    edx,ebp
c000fd86:	31 c9                	xor    ecx,ecx
c000fd88:	eb a7                	jmp    c000fd31 <Phys::allocateDMA(unsigned long)+0x3d>
c000fd8a:	5b                   	pop    ebx
c000fd8b:	c1 e0 0c             	shl    eax,0xc
c000fd8e:	5e                   	pop    esi
c000fd8f:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fd94:	5f                   	pop    edi
c000fd95:	5d                   	pop    ebp
c000fd96:	c3                   	ret    

c000fd97 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fd97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fd9f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fda5:	c1 e9 0c             	shr    ecx,0xc
c000fda8:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdad:	76 25                	jbe    c000fdd4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdaf:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdb4:	c1 e8 0c             	shr    eax,0xc
c000fdb7:	8d 50 10             	lea    edx,[eax+0x10]
c000fdba:	85 c9                	test   ecx,ecx
c000fdbc:	74 15                	je     c000fdd3 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdbe:	8d 82 a0 e4 02 c0    	lea    eax,[edx-0x3ffd1b60]
c000fdc4:	8d 94 11 a0 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1b60]
c000fdcb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdce:	40                   	inc    eax
c000fdcf:	39 d0                	cmp    eax,edx
c000fdd1:	75 f8                	jne    c000fdcb <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdd3:	c3                   	ret    
c000fdd4:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fdda:	c1 ea 0c             	shr    edx,0xc
c000fddd:	eb db                	jmp    c000fdba <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fddf <Phys::setPageState(unsigned long, bool)>:
c000fddf:	56                   	push   esi
c000fde0:	ba 01 00 00 00       	mov    edx,0x1
c000fde5:	53                   	push   ebx
c000fde6:	8b 35 6c d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d36c
c000fdec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdf4:	89 c8                	mov    eax,ecx
c000fdf6:	83 e1 07             	and    ecx,0x7
c000fdf9:	c1 e8 03             	shr    eax,0x3
c000fdfc:	d3 e3                	shl    ebx,cl
c000fdfe:	01 c6                	add    esi,eax
c000fe00:	d3 e2                	shl    edx,cl
c000fe02:	f7 d2                	not    edx
c000fe04:	20 16                	and    BYTE PTR [esi],dl
c000fe06:	03 05 6c d3 02 c0    	add    eax,DWORD PTR ds:0xc002d36c
c000fe0c:	08 18                	or     BYTE PTR [eax],bl
c000fe0e:	5b                   	pop    ebx
c000fe0f:	5e                   	pop    esi
c000fe10:	c3                   	ret    

c000fe11 <Phys::getPageState(unsigned long)>:
c000fe11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe15:	8b 15 6c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d36c
c000fe1b:	89 c8                	mov    eax,ecx
c000fe1d:	83 e1 07             	and    ecx,0x7
c000fe20:	c1 e8 03             	shr    eax,0x3
c000fe23:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe27:	d3 f8                	sar    eax,cl
c000fe29:	83 e0 01             	and    eax,0x1
c000fe2c:	c3                   	ret    

c000fe2d <Phys::freePage(unsigned long)>:
c000fe2d:	53                   	push   ebx
c000fe2e:	83 ec 08             	sub    esp,0x8
c000fe31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe35:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe3b:	76 57                	jbe    c000fe94 <Phys::freePage(unsigned long)+0x67>
c000fe3d:	c1 eb 0c             	shr    ebx,0xc
c000fe40:	53                   	push   ebx
c000fe41:	e8 cb ff ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000fe46:	5a                   	pop    edx
c000fe47:	84 c0                	test   al,al
c000fe49:	74 5b                	je     c000fea6 <Phys::freePage(unsigned long)+0x79>
c000fe4b:	a1 90 e4 02 c0       	mov    eax,ds:0xc002e490
c000fe50:	48                   	dec    eax
c000fe51:	a3 90 e4 02 c0       	mov    ds:0xc002e490,eax
c000fe56:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe59:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe5c:	c1 e0 02             	shl    eax,0x2
c000fe5f:	99                   	cdq    
c000fe60:	f7 3d 94 e4 02 c0    	idiv   DWORD PTR ds:0xc002e494
c000fe66:	39 05 8c e4 02 c0    	cmp    DWORD PTR ds:0xc002e48c,eax
c000fe6c:	75 13                	jne    c000fe81 <Phys::freePage(unsigned long)+0x54>
c000fe6e:	83 ec 08             	sub    esp,0x8
c000fe71:	6a 00                	push   0x0
c000fe73:	53                   	push   ebx
c000fe74:	e8 66 ff ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	83 c4 08             	add    esp,0x8
c000fe7f:	5b                   	pop    ebx
c000fe80:	c3                   	ret    
c000fe81:	83 ec 0c             	sub    esp,0xc
c000fe84:	a3 8c e4 02 c0       	mov    ds:0xc002e48c,eax
c000fe89:	50                   	push   eax
c000fe8a:	e8 05 0a 00 00       	call   c0010894 <VgaText::updateRAMUsageDisplay(int)>
c000fe8f:	83 c4 10             	add    esp,0x10
c000fe92:	eb da                	jmp    c000fe6e <Phys::freePage(unsigned long)+0x41>
c000fe94:	68 00 10 00 00       	push   0x1000
c000fe99:	53                   	push   ebx
c000fe9a:	e8 f8 fe ff ff       	call   c000fd97 <Phys::freeDMA(unsigned long, unsigned long)>
c000fe9f:	59                   	pop    ecx
c000fea0:	5b                   	pop    ebx
c000fea1:	83 c4 08             	add    esp,0x8
c000fea4:	5b                   	pop    ebx
c000fea5:	c3                   	ret    
c000fea6:	c7 44 24 10 86 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a286
c000feae:	83 c4 08             	add    esp,0x8
c000feb1:	5b                   	pop    ebx
c000feb2:	e9 2a a6 00 00       	jmp    c001a4e1 <Krnl::panic(char const*)>

c000feb7 <Phys::allocatePage()>:
c000feb7:	56                   	push   esi
c000feb8:	53                   	push   ebx
c000feb9:	51                   	push   ecx
c000feba:	8b 35 84 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e484
c000fec0:	89 f3                	mov    ebx,esi
c000fec2:	eb 0a                	jmp    c000fece <Phys::allocatePage()+0x17>
c000fec4:	89 1d 84 e4 02 c0    	mov    DWORD PTR ds:0xc002e484,ebx
c000feca:	39 de                	cmp    esi,ebx
c000fecc:	74 24                	je     c000fef2 <Phys::allocatePage()+0x3b>
c000fece:	53                   	push   ebx
c000fecf:	e8 3d ff ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000fed4:	5a                   	pop    edx
c000fed5:	84 c0                	test   al,al
c000fed7:	74 77                	je     c000ff50 <Phys::allocatePage()+0x99>
c000fed9:	43                   	inc    ebx
c000feda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fee0:	75 e2                	jne    c000fec4 <Phys::allocatePage()+0xd>
c000fee2:	31 db                	xor    ebx,ebx
c000fee4:	c7 05 84 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e484,0x0
c000feee:	39 de                	cmp    esi,ebx
c000fef0:	75 dc                	jne    c000fece <Phys::allocatePage()+0x17>
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fefa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fefd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff03:	e8 c8 2b 00 00       	call   c0012ad0 <VAS::scanForEviction()>
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	85 c0                	test   eax,eax
c000ff0d:	75 76                	jne    c000ff85 <Phys::allocatePage()+0xce>
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	68 9c a2 02 c0       	push   0xc002a29c
c000ff17:	e8 87 2e 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c000ff1c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff23:	e8 cc fd ff ff       	call   c000fcf4 <Phys::allocateDMA(unsigned long)>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	85 c0                	test   eax,eax
c000ff2d:	75 56                	jne    c000ff85 <Phys::allocatePage()+0xce>
c000ff2f:	83 ec 0c             	sub    esp,0xc
c000ff32:	68 ad a2 02 c0       	push   0xc002a2ad
c000ff37:	e8 a5 a5 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	8b 1d 84 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e484
c000ff45:	53                   	push   ebx
c000ff46:	e8 c6 fe ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000ff4b:	5a                   	pop    edx
c000ff4c:	84 c0                	test   al,al
c000ff4e:	75 89                	jne    c000fed9 <Phys::allocatePage()+0x22>
c000ff50:	6a 01                	push   0x1
c000ff52:	53                   	push   ebx
c000ff53:	e8 87 fe ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c000ff58:	a1 90 e4 02 c0       	mov    eax,ds:0xc002e490
c000ff5d:	59                   	pop    ecx
c000ff5e:	40                   	inc    eax
c000ff5f:	5b                   	pop    ebx
c000ff60:	a3 90 e4 02 c0       	mov    ds:0xc002e490,eax
c000ff65:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff68:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff6b:	c1 e0 02             	shl    eax,0x2
c000ff6e:	99                   	cdq    
c000ff6f:	f7 3d 94 e4 02 c0    	idiv   DWORD PTR ds:0xc002e494
c000ff75:	39 05 8c e4 02 c0    	cmp    DWORD PTR ds:0xc002e48c,eax
c000ff7b:	75 0c                	jne    c000ff89 <Phys::allocatePage()+0xd2>
c000ff7d:	a1 84 e4 02 c0       	mov    eax,ds:0xc002e484
c000ff82:	c1 e0 0c             	shl    eax,0xc
c000ff85:	5a                   	pop    edx
c000ff86:	5b                   	pop    ebx
c000ff87:	5e                   	pop    esi
c000ff88:	c3                   	ret    
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	a3 8c e4 02 c0       	mov    ds:0xc002e48c,eax
c000ff91:	50                   	push   eax
c000ff92:	e8 fd 08 00 00       	call   c0010894 <VgaText::updateRAMUsageDisplay(int)>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	eb e1                	jmp    c000ff7d <Phys::allocatePage()+0xc6>

c000ff9c <Phys::allocateContiguousPages(int)>:
c000ff9c:	57                   	push   edi
c000ff9d:	56                   	push   esi
c000ff9e:	53                   	push   ebx
c000ff9f:	31 db                	xor    ebx,ebx
c000ffa1:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffa5:	e8 12 dd 00 00       	call   c001dcbc <lockScheduler()>
c000ffaa:	85 db                	test   ebx,ebx
c000ffac:	75 11                	jne    c000ffbf <Phys::allocateContiguousPages(int)+0x23>
c000ffae:	e8 04 ff ff ff       	call   c000feb7 <Phys::allocatePage()>
c000ffb3:	83 ff 01             	cmp    edi,0x1
c000ffb6:	89 c6                	mov    esi,eax
c000ffb8:	74 21                	je     c000ffdb <Phys::allocateContiguousPages(int)+0x3f>
c000ffba:	bb 01 00 00 00       	mov    ebx,0x1
c000ffbf:	e8 f3 fe ff ff       	call   c000feb7 <Phys::allocatePage()>
c000ffc4:	89 da                	mov    edx,ebx
c000ffc6:	c1 e2 0c             	shl    edx,0xc
c000ffc9:	01 f2                	add    edx,esi
c000ffcb:	39 c2                	cmp    edx,eax
c000ffcd:	74 17                	je     c000ffe6 <Phys::allocateContiguousPages(int)+0x4a>
c000ffcf:	bb 01 00 00 00       	mov    ebx,0x1
c000ffd4:	89 c6                	mov    esi,eax
c000ffd6:	83 ff 01             	cmp    edi,0x1
c000ffd9:	75 e4                	jne    c000ffbf <Phys::allocateContiguousPages(int)+0x23>
c000ffdb:	e8 de dc 00 00       	call   c001dcbe <unlockScheduler()>
c000ffe0:	89 f0                	mov    eax,esi
c000ffe2:	5b                   	pop    ebx
c000ffe3:	5e                   	pop    esi
c000ffe4:	5f                   	pop    edi
c000ffe5:	c3                   	ret    
c000ffe6:	43                   	inc    ebx
c000ffe7:	39 fb                	cmp    ebx,edi
c000ffe9:	75 bf                	jne    c000ffaa <Phys::allocateContiguousPages(int)+0xe>
c000ffeb:	e8 ce dc 00 00       	call   c001dcbe <unlockScheduler()>
c000fff0:	89 f0                	mov    eax,esi
c000fff2:	5b                   	pop    ebx
c000fff3:	5e                   	pop    esi
c000fff4:	5f                   	pop    edi
c000fff5:	c3                   	ret    

c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fff6:	56                   	push   esi
c000fff7:	53                   	push   ebx
c000fff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fffc:	39 1d 88 e4 02 c0    	cmp    DWORD PTR ds:0xc002e488,ebx
c0010002:	73 06                	jae    c001000a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010004:	89 1d 88 e4 02 c0    	mov    DWORD PTR ds:0xc002e488,ebx
c001000a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000e:	c1 eb 0c             	shr    ebx,0xc
c0010011:	c1 e8 0c             	shr    eax,0xc
c0010014:	39 d8                	cmp    eax,ebx
c0010016:	73 13                	jae    c001002b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010018:	6a 00                	push   0x0
c001001a:	8d 70 01             	lea    esi,[eax+0x1]
c001001d:	50                   	push   eax
c001001e:	e8 bc fd ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010023:	5a                   	pop    edx
c0010024:	89 f0                	mov    eax,esi
c0010026:	59                   	pop    ecx
c0010027:	39 f3                	cmp    ebx,esi
c0010029:	75 ed                	jne    c0010018 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001002b:	5b                   	pop    ebx
c001002c:	5e                   	pop    esi
c001002d:	c3                   	ret    

c001002e <Phys::physicalMemorySetup(unsigned int)>:
c001002e:	55                   	push   ebp
c001002f:	57                   	push   edi
c0010030:	56                   	push   esi
c0010031:	53                   	push   ebx
c0010032:	31 db                	xor    ebx,ebx
c0010034:	83 ec 40             	sub    esp,0x40
c0010037:	6a 30                	push   0x30
c0010039:	6a 00                	push   0x0
c001003b:	68 a0 e4 02 c0       	push   0xc002e4a0
c0010040:	e8 3b 07 ff ff       	call   c0000780 <memset>
c0010045:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010049:	25 00 f0 ff ff       	and    eax,0xfffff000
c001004e:	05 00 10 00 00       	add    eax,0x1000
c0010053:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	83 ec 08             	sub    esp,0x8
c001005d:	6a 01                	push   0x1
c001005f:	53                   	push   ebx
c0010060:	43                   	inc    ebx
c0010061:	e8 79 fd ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001006f:	75 e9                	jne    c001005a <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010071:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010078:	66 85 c0             	test   ax,ax
c001007b:	0f 84 8e 01 00 00    	je     c001020f <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010081:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010085:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001008d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010091:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010096:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001009a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100a2:	eb 15                	jmp    c00100b9 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100a4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100a8:	83 c3 18             	add    ebx,0x18
c00100ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100af:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100b3:	0f 84 66 01 00 00    	je     c001021f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100b9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100bf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100ca:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100cc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100cf:	01 f0                	add    eax,esi
c00100d1:	55                   	push   ebp
c00100d2:	11 fa                	adc    edx,edi
c00100d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100d8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100e0:	56                   	push   esi
c00100e1:	68 e8 a2 02 c0       	push   0xc002a2e8
c00100e6:	e8 b8 2c 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00100eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	09 f8                	or     eax,edi
c00100f4:	0f 85 25 01 00 00    	jne    c001021f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100fa:	4d                   	dec    ebp
c00100fb:	75 a7                	jne    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00100fd:	ba 00 00 08 00       	mov    edx,0x80000
c0010102:	89 c1                	mov    ecx,eax
c0010104:	39 f2                	cmp    edx,esi
c0010106:	19 f9                	sbb    ecx,edi
c0010108:	0f 82 a7 00 00 00    	jb     c00101b5 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001010e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010112:	89 c1                	mov    ecx,eax
c0010114:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010118:	0f 83 97 00 00 00    	jae    c00101b5 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001011e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010123:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010127:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001012b:	39 fa                	cmp    edx,edi
c001012d:	19 e8                	sbb    eax,ebp
c001012f:	0f 82 14 01 00 00    	jb     c0010249 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010135:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010139:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001013d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010143:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010148:	83 d5 ff             	adc    ebp,0xffffffff
c001014b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001014f:	31 c0                	xor    eax,eax
c0010151:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010155:	39 fa                	cmp    edx,edi
c0010157:	89 c1                	mov    ecx,eax
c0010159:	19 e9                	sbb    ecx,ebp
c001015b:	0f 83 43 ff ff ff    	jae    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010161:	be 00 00 08 00       	mov    esi,0x80000
c0010166:	50                   	push   eax
c0010167:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001016b:	57                   	push   edi
c001016c:	56                   	push   esi
c001016d:	68 0c a3 02 c0       	push   0xc002a30c
c0010172:	e8 2c 2c 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0010177:	5a                   	pop    edx
c0010178:	59                   	pop    ecx
c0010179:	57                   	push   edi
c001017a:	56                   	push   esi
c001017b:	e8 76 fe ff ff       	call   c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010180:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010188:	83 c4 0c             	add    esp,0xc
c001018b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001018f:	03 05 94 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e494
c0010195:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001019c:	a3 94 e4 02 c0       	mov    ds:0xc002e494,eax
c00101a1:	52                   	push   edx
c00101a2:	50                   	push   eax
c00101a3:	68 c9 a2 02 c0       	push   0xc002a2c9
c00101a8:	e8 f6 2b 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	e9 ef fe ff ff       	jmp    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101b5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101c1:	39 ea                	cmp    edx,ebp
c00101c3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101c7:	0f 82 d7 fe ff ff    	jb     c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101cd:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101d6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101da:	0f 83 c4 fe ff ff    	jae    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e0:	39 ee                	cmp    esi,ebp
c00101e2:	89 f8                	mov    eax,edi
c00101e4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101e8:	0f 83 78 ff ff ff    	jae    c0010166 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101f6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00101fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00101fe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010202:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010206:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001020a:	e9 57 ff ff ff       	jmp    c0010166 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	68 bb a2 02 c0       	push   0xc002a2bb
c0010217:	e8 c5 a2 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	bb 40 01 00 00       	mov    ebx,0x140
c0010224:	83 ec 08             	sub    esp,0x8
c0010227:	6a 00                	push   0x0
c0010229:	53                   	push   ebx
c001022a:	43                   	inc    ebx
c001022b:	e8 af fb ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010230:	ff 05 94 e4 02 c0    	inc    DWORD PTR ds:0xc002e494
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001023f:	75 e3                	jne    c0010224 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010241:	83 c4 3c             	add    esp,0x3c
c0010244:	5b                   	pop    ebx
c0010245:	5e                   	pop    esi
c0010246:	5f                   	pop    edi
c0010247:	5d                   	pop    ebp
c0010248:	c3                   	ret    
c0010249:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010251:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010259:	e9 d7 fe ff ff       	jmp    c0010135 <Phys::physicalMemorySetup(unsigned int)+0x107>

c001025e <Pipe::isAtty()>:
c001025e:	31 c0                	xor    eax,eax
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <Pipe::~Pipe()>:
c0010262:	83 ec 0c             	sub    esp,0xc
c0010265:	ba 78 a3 02 c0       	mov    edx,0xc002a378
c001026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026e:	89 10                	mov    DWORD PTR [eax],edx
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	50                   	push   eax
c0010278:	e8 f1 14 00 00       	call   c001176e <UnixFile::~UnixFile()>
c001027d:	83 c4 10             	add    esp,0x10
c0010280:	90                   	nop
c0010281:	83 c4 0c             	add    esp,0xc
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <Pipe::~Pipe()>:
c0010286:	83 ec 0c             	sub    esp,0xc
c0010289:	83 ec 0c             	sub    esp,0xc
c001028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010290:	e8 cd ff ff ff       	call   c0010262 <Pipe::~Pipe()>
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	83 ec 08             	sub    esp,0x8
c001029b:	6a 20                	push   0x20
c001029d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a1:	e8 1d 2a 00 00       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	83 c4 0c             	add    esp,0xc
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <Pipe::read(unsigned long long, void*, int*)>:
c00102ae:	55                   	push   ebp
c00102af:	57                   	push   edi
c00102b0:	56                   	push   esi
c00102b1:	53                   	push   ebx
c00102b2:	83 ec 1c             	sub    esp,0x1c
c00102b5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102c1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102c4:	89 c8                	mov    eax,ecx
c00102c6:	99                   	cdq    
c00102c7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102cb:	74 19                	je     c00102e6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102cd:	39 f9                	cmp    ecx,edi
c00102cf:	89 d1                	mov    ecx,edx
c00102d1:	19 f1                	sbb    ecx,esi
c00102d3:	73 11                	jae    c00102e6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d5:	e8 e2 d9 00 00       	call   c001dcbc <lockScheduler()>
c00102da:	e8 53 dd 00 00       	call   c001e032 <schedule()>
c00102df:	e8 da d9 00 00       	call   c001dcbe <unlockScheduler()>
c00102e4:	eb db                	jmp    c00102c1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102e6:	39 f8                	cmp    eax,edi
c00102e8:	89 d1                	mov    ecx,edx
c00102ea:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102ee:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102f2:	19 f1                	sbb    ecx,esi
c00102f4:	73 08                	jae    c00102fe <Pipe::read(unsigned long long, void*, int*)+0x50>
c00102f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00102fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010301:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010304:	29 c6                	sub    esi,eax
c0010306:	89 f1                	mov    ecx,esi
c0010308:	c1 f9 1f             	sar    ecx,0x1f
c001030b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001030f:	89 ca                	mov    edx,ecx
c0010311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010315:	19 d1                	sbb    ecx,edx
c0010317:	73 04                	jae    c001031d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010319:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001031d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010321:	89 fd                	mov    ebp,edi
c0010323:	29 f5                	sub    ebp,esi
c0010325:	85 f6                	test   esi,esi
c0010327:	74 12                	je     c001033b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010329:	52                   	push   edx
c001032a:	56                   	push   esi
c001032b:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001032e:	50                   	push   eax
c001032f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010333:	e8 14 04 ff ff       	call   c000074c <memcpy>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	85 ed                	test   ebp,ebp
c001033d:	74 12                	je     c0010351 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001033f:	50                   	push   eax
c0010340:	55                   	push   ebp
c0010341:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010344:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010348:	56                   	push   esi
c0010349:	e8 fe 03 ff ff       	call   c000074c <memcpy>
c001034e:	83 c4 10             	add    esp,0x10
c0010351:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010354:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010357:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001035a:	99                   	cdq    
c001035b:	89 f7                	mov    edi,esi
c001035d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010361:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010365:	c1 ff 1f             	sar    edi,0x1f
c0010368:	57                   	push   edi
c0010369:	56                   	push   esi
c001036a:	52                   	push   edx
c001036b:	50                   	push   eax
c001036c:	e8 33 67 01 00       	call   c0026aa4 <__umoddi3>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010377:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001037c:	75 10                	jne    c001038e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001037e:	83 ec 0c             	sub    esp,0xc
c0010381:	68 35 a3 02 c0       	push   0xc002a335
c0010386:	e8 56 a1 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c001038b:	83 c4 10             	add    esp,0x10
c001038e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010396:	89 10                	mov    DWORD PTR [eax],edx
c0010398:	83 c4 1c             	add    esp,0x1c
c001039b:	31 c0                	xor    eax,eax
c001039d:	5b                   	pop    ebx
c001039e:	5e                   	pop    esi
c001039f:	5f                   	pop    edi
c00103a0:	5d                   	pop    ebp
c00103a1:	c3                   	ret    

c00103a2 <Pipe::write(unsigned long long, void*, int*)>:
c00103a2:	55                   	push   ebp
c00103a3:	57                   	push   edi
c00103a4:	56                   	push   esi
c00103a5:	53                   	push   ebx
c00103a6:	83 ec 1c             	sub    esp,0x1c
c00103a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00103b8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103bb:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103c2:	89 de                	mov    esi,ebx
c00103c4:	89 df                	mov    edi,ebx
c00103c6:	c1 ff 1f             	sar    edi,0x1f
c00103c9:	01 c6                	add    esi,eax
c00103cb:	89 c8                	mov    eax,ecx
c00103cd:	11 d7                	adc    edi,edx
c00103cf:	99                   	cdq    
c00103d0:	39 f1                	cmp    ecx,esi
c00103d2:	89 d0                	mov    eax,edx
c00103d4:	19 f8                	sbb    eax,edi
c00103d6:	b8 01 00 00 00       	mov    eax,0x1
c00103db:	0f 82 80 00 00 00    	jb     c0010461 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103e4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103e7:	01 d8                	add    eax,ebx
c00103e9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103ed:	99                   	cdq    
c00103ee:	f7 f9                	idiv   ecx
c00103f0:	29 d1                	sub    ecx,edx
c00103f2:	89 d7                	mov    edi,edx
c00103f4:	89 c8                	mov    eax,ecx
c00103f6:	99                   	cdq    
c00103f7:	39 ce                	cmp    esi,ecx
c00103f9:	19 d3                	sbb    ebx,edx
c00103fb:	bb 00 00 00 00       	mov    ebx,0x0
c0010400:	72 04                	jb     c0010406 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010402:	89 f3                	mov    ebx,esi
c0010404:	29 cb                	sub    ebx,ecx
c0010406:	89 f1                	mov    ecx,esi
c0010408:	29 d9                	sub    ecx,ebx
c001040a:	74 1a                	je     c0010426 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001040c:	52                   	push   edx
c001040d:	51                   	push   ecx
c001040e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010412:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010416:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010419:	57                   	push   edi
c001041a:	e8 2d 03 ff ff       	call   c000074c <memcpy>
c001041f:	83 c4 10             	add    esp,0x10
c0010422:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010426:	85 db                	test   ebx,ebx
c0010428:	74 12                	je     c001043c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001042a:	50                   	push   eax
c001042b:	53                   	push   ebx
c001042c:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010430:	51                   	push   ecx
c0010431:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010434:	e8 13 03 ff ff       	call   c000074c <memcpy>
c0010439:	83 c4 10             	add    esp,0x10
c001043c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001043f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010444:	75 10                	jne    c0010456 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	68 51 a3 02 c0       	push   0xc002a351
c001044e:	e8 8e a0 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001045a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001045d:	89 38                	mov    DWORD PTR [eax],edi
c001045f:	31 c0                	xor    eax,eax
c0010461:	83 c4 1c             	add    esp,0x1c
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	5d                   	pop    ebp
c0010468:	c3                   	ret    
c0010469:	90                   	nop

c001046a <Pipe::Pipe(int)>:
c001046a:	83 ec 0c             	sub    esp,0xc
c001046d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010471:	83 ec 08             	sub    esp,0x8
c0010474:	6a 00                	push   0x0
c0010476:	50                   	push   eax
c0010477:	e8 10 11 00 00       	call   c001158c <UnixFile::UnixFile(int)>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	ba 78 a3 02 c0       	mov    edx,0xc002a378
c0010484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010488:	89 10                	mov    DWORD PTR [eax],edx
c001048a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010492:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010499:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104af:	83 ec 0c             	sub    esp,0xc
c00104b2:	50                   	push   eax
c00104b3:	e8 93 f3 ff ff       	call   c000f84b <malloc>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	89 c2                	mov    edx,eax
c00104bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104cc:	90                   	nop
c00104cd:	83 c4 0c             	add    esp,0xc
c00104d0:	c3                   	ret    
c00104d1:	90                   	nop

c00104d2 <VgaText::isAtty()>:
c00104d2:	b0 01                	mov    al,0x1
c00104d4:	c3                   	ret    
c00104d5:	90                   	nop

c00104d6 <VgaText::~VgaText()>:
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	ba 34 a4 02 c0       	mov    edx,0xc002a434
c00104de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e2:	89 10                	mov    DWORD PTR [eax],edx
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	50                   	push   eax
c00104ec:	e8 7d 12 00 00       	call   c001176e <UnixFile::~UnixFile()>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	90                   	nop
c00104f5:	83 c4 0c             	add    esp,0xc
c00104f8:	c3                   	ret    
c00104f9:	90                   	nop

c00104fa <VgaText::~VgaText()>:
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	83 ec 0c             	sub    esp,0xc
c0010500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010504:	e8 cd ff ff ff       	call   c00104d6 <VgaText::~VgaText()>
c0010509:	83 c4 10             	add    esp,0x10
c001050c:	83 ec 08             	sub    esp,0x8
c001050f:	68 c4 02 00 00       	push   0x2c4
c0010514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010518:	e8 a6 27 00 00       	call   c0012cc3 <operator delete(void*, unsigned long)>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	83 c4 0c             	add    esp,0xc
c0010523:	c3                   	ret    

c0010524 <VgaText::read(unsigned long long, void*, int*)>:
c0010524:	83 ec 10             	sub    esp,0x10
c0010527:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001052f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010533:	e8 8e 5c 00 00       	call   c00161c6 <readKeyboard(VgaText*, char*, unsigned long)>
c0010538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001053c:	89 02                	mov    DWORD PTR [edx],eax
c001053e:	31 c0                	xor    eax,eax
c0010540:	83 c4 1c             	add    esp,0x1c
c0010543:	c3                   	ret    

c0010544 <setTerminalScrollLock(bool)>:
c0010544:	c3                   	ret    

c0010545 <addToTerminalCycle(VgaText*)>:
c0010545:	8b 15 20 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e520
c001054b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054f:	85 d2                	test   edx,edx
c0010551:	75 09                	jne    c001055c <addToTerminalCycle(VgaText*)+0x17>
c0010553:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010556:	a3 20 e5 02 c0       	mov    ds:0xc002e520,eax
c001055b:	c3                   	ret    
c001055c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001055f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010562:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010565:	c3                   	ret    

c0010566 <installVgaTextImplementation()>:
c0010566:	83 ec 10             	sub    esp,0x10
c0010569:	6a 20                	push   0x20
c001056b:	6a 00                	push   0x0
c001056d:	68 00 e5 02 c0       	push   0xc002e500
c0010572:	e8 09 02 ff ff       	call   c0000780 <memset>
c0010577:	83 c4 1c             	add    esp,0x1c
c001057a:	c3                   	ret    

c001057b <scrollTerminalScrollLock(int)>:
c001057b:	c3                   	ret    

c001057c <VgaText::load()>:
c001057c:	53                   	push   ebx
c001057d:	31 c0                	xor    eax,eax
c001057f:	83 ec 58             	sub    esp,0x58
c0010582:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010586:	89 e2                	mov    edx,esp
c0010588:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001058c:	40                   	inc    eax
c001058d:	83 f8 50             	cmp    eax,0x50
c0010590:	75 f6                	jne    c0010588 <VgaText::load()+0xc>
c0010592:	31 c0                	xor    eax,eax
c0010594:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001059b:	84 c9                	test   cl,cl
c001059d:	74 06                	je     c00105a5 <VgaText::load()+0x29>
c001059f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105a2:	40                   	inc    eax
c00105a3:	eb ef                	jmp    c0010594 <VgaText::load()+0x18>
c00105a5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105a8:	85 c0                	test   eax,eax
c00105aa:	74 09                	je     c00105b5 <VgaText::load()+0x39>
c00105ac:	51                   	push   ecx
c00105ad:	51                   	push   ecx
c00105ae:	52                   	push   edx
c00105af:	53                   	push   ebx
c00105b0:	ff d0                	call   eax
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00105b8:	85 c0                	test   eax,eax
c00105ba:	74 09                	je     c00105c5 <VgaText::load()+0x49>
c00105bc:	83 ec 0c             	sub    esp,0xc
c00105bf:	53                   	push   ebx
c00105c0:	ff d0                	call   eax
c00105c2:	83 c4 10             	add    esp,0x10
c00105c5:	83 c4 58             	add    esp,0x58
c00105c8:	5b                   	pop    ebx
c00105c9:	c3                   	ret    

c00105ca <VgaText::updateCursor()>:
c00105ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ce:	39 05 24 e5 02 c0    	cmp    DWORD PTR ds:0xc002e524,eax
c00105d4:	75 09                	jne    c00105df <VgaText::updateCursor()+0x15>
c00105d6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00105d9:	85 c0                	test   eax,eax
c00105db:	74 02                	je     c00105df <VgaText::updateCursor()+0x15>
c00105dd:	ff e0                	jmp    eax
c00105df:	c3                   	ret    

c00105e0 <VgaText::showCursor(bool)>:
c00105e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105e8:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00105eb:	c3                   	ret    

c00105ec <VgaText::disableBlink(bool)>:
c00105ec:	56                   	push   esi
c00105ed:	53                   	push   ebx
c00105ee:	51                   	push   ecx
c00105ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105f7:	39 1d 24 e5 02 c0    	cmp    DWORD PTR ds:0xc002e524,ebx
c00105fd:	75 15                	jne    c0010614 <VgaText::disableBlink(bool)+0x28>
c00105ff:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010602:	85 c0                	test   eax,eax
c0010604:	74 0e                	je     c0010614 <VgaText::disableBlink(bool)+0x28>
c0010606:	89 f1                	mov    ecx,esi
c0010608:	52                   	push   edx
c0010609:	52                   	push   edx
c001060a:	0f b6 d1             	movzx  edx,cl
c001060d:	52                   	push   edx
c001060e:	53                   	push   ebx
c001060f:	ff d0                	call   eax
c0010611:	83 c4 10             	add    esp,0x10
c0010614:	89 f0                	mov    eax,esi
c0010616:	83 f0 01             	xor    eax,0x1
c0010619:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001061c:	58                   	pop    eax
c001061d:	5b                   	pop    ebx
c001061e:	5e                   	pop    esi
c001061f:	c3                   	ret    

c0010620 <VgaText::doANSI_SGR(int)>:
c0010620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	85 d2                	test   edx,edx
c001062a:	75 0b                	jne    c0010637 <VgaText::doANSI_SGR(int)+0x17>
c001062c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001062f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010632:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010635:	eb 59                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c0010637:	83 fa 07             	cmp    edx,0x7
c001063a:	75 0b                	jne    c0010647 <VgaText::doANSI_SGR(int)+0x27>
c001063c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001063f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010642:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010645:	eb 49                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c0010647:	83 fa 1b             	cmp    edx,0x1b
c001064a:	74 e0                	je     c001062c <VgaText::doANSI_SGR(int)+0xc>
c001064c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001064f:	83 f9 07             	cmp    ecx,0x7
c0010652:	77 09                	ja     c001065d <VgaText::doANSI_SGR(int)+0x3d>
c0010654:	8b 14 8d a0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c60]
c001065b:	eb 20                	jmp    c001067d <VgaText::doANSI_SGR(int)+0x5d>
c001065d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010660:	83 f9 07             	cmp    ecx,0x7
c0010663:	77 09                	ja     c001066e <VgaText::doANSI_SGR(int)+0x4e>
c0010665:	8b 14 8d a0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c60]
c001066c:	eb 22                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c001066e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010671:	83 f9 07             	cmp    ecx,0x7
c0010674:	77 0b                	ja     c0010681 <VgaText::doANSI_SGR(int)+0x61>
c0010676:	8b 14 95 58 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2da8]
c001067d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010680:	c3                   	ret    
c0010681:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010684:	83 f9 07             	cmp    ecx,0x7
c0010687:	77 0a                	ja     c0010693 <VgaText::doANSI_SGR(int)+0x73>
c0010689:	8b 14 95 30 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2dd0]
c0010690:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010693:	c3                   	ret    

c0010694 <VgaText::setDefaultBgColour(VgaColour)>:
c0010694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001069c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001069f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106a2:	c3                   	ret    
c00106a3:	90                   	nop

c00106a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00106a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106b2:	c3                   	ret    
c00106b3:	90                   	nop

c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106b4:	53                   	push   ebx
c00106b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00106bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00106c1:	51                   	push   ecx
c00106c2:	e8 cd ff ff ff       	call   c0010694 <VgaText::setDefaultBgColour(VgaColour)>
c00106c7:	58                   	pop    eax
c00106c8:	5a                   	pop    edx
c00106c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00106cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00106d1:	5b                   	pop    ebx
c00106d2:	eb d0                	jmp    c00106a4 <VgaText::setDefaultFgColour(VgaColour)>

c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00106d4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00106d8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00106dd:	83 e0 0f             	and    eax,0xf
c00106e0:	c1 e2 04             	shl    edx,0x4
c00106e3:	09 d0                	or     eax,edx
c00106e5:	c3                   	ret    

c00106e6 <VgaText::scrollScreen()>:
c00106e6:	55                   	push   ebp
c00106e7:	b9 01 00 00 00       	mov    ecx,0x1
c00106ec:	57                   	push   edi
c00106ed:	56                   	push   esi
c00106ee:	53                   	push   ebx
c00106ef:	83 ec 0c             	sub    esp,0xc
c00106f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106f6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00106fc:	31 ff                	xor    edi,edi
c00106fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010701:	83 f9 17             	cmp    ecx,0x17
c0010704:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010707:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001070e:	75 27                	jne    c0010737 <VgaText::scrollScreen()+0x51>
c0010710:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010713:	01 f5                	add    ebp,esi
c0010715:	f7 c7 01 00 00 00    	test   edi,0x1
c001071b:	74 16                	je     c0010733 <VgaText::scrollScreen()+0x4d>
c001071d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010721:	50                   	push   eax
c0010722:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010726:	50                   	push   eax
c0010727:	e8 a8 ff ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c001072c:	5a                   	pop    edx
c001072d:	5a                   	pop    edx
c001072e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010731:	eb 04                	jmp    c0010737 <VgaText::scrollScreen()+0x51>
c0010733:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010737:	47                   	inc    edi
c0010738:	46                   	inc    esi
c0010739:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001073f:	75 bd                	jne    c00106fe <VgaText::scrollScreen()+0x18>
c0010741:	41                   	inc    ecx
c0010742:	83 f9 18             	cmp    ecx,0x18
c0010745:	75 af                	jne    c00106f6 <VgaText::scrollScreen()+0x10>
c0010747:	39 1d 24 e5 02 c0    	cmp    DWORD PTR ds:0xc002e524,ebx
c001074d:	75 1b                	jne    c001076a <VgaText::scrollScreen()+0x84>
c001074f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010753:	74 05                	je     c001075a <VgaText::scrollScreen()+0x74>
c0010755:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010758:	eb 10                	jmp    c001076a <VgaText::scrollScreen()+0x84>
c001075a:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001075d:	85 c0                	test   eax,eax
c001075f:	74 09                	je     c001076a <VgaText::scrollScreen()+0x84>
c0010761:	83 ec 0c             	sub    esp,0xc
c0010764:	53                   	push   ebx
c0010765:	ff d0                	call   eax
c0010767:	83 c4 10             	add    esp,0x10
c001076a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001076e:	83 c4 0c             	add    esp,0xc
c0010771:	5b                   	pop    ebx
c0010772:	5e                   	pop    esi
c0010773:	5f                   	pop    edi
c0010774:	5d                   	pop    ebp
c0010775:	e9 50 fe ff ff       	jmp    c00105ca <VgaText::updateCursor()>

c001077a <VgaText::combineCharAndColour(char, unsigned char)>:
c001077a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001077f:	c1 e0 08             	shl    eax,0x8
c0010782:	89 c2                	mov    edx,eax
c0010784:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010789:	09 d0                	or     eax,edx
c001078b:	c3                   	ret    

c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001078c:	56                   	push   esi
c001078d:	53                   	push   ebx
c001078e:	51                   	push   ecx
c001078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010793:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010798:	50                   	push   eax
c0010799:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001079e:	50                   	push   eax
c001079f:	e8 30 ff ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c00107a4:	5b                   	pop    ebx
c00107a5:	0f b6 c0             	movzx  eax,al
c00107a8:	5e                   	pop    esi
c00107a9:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107ae:	50                   	push   eax
c00107af:	53                   	push   ebx
c00107b0:	e8 c5 ff ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00107b5:	5a                   	pop    edx
c00107b6:	5e                   	pop    esi
c00107b7:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00107ba:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00107c0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00107c4:	0f b7 d2             	movzx  edx,dx
c00107c7:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00107cb:	39 0d 24 e5 02 c0    	cmp    DWORD PTR ds:0xc002e524,ecx
c00107d1:	75 10                	jne    c00107e3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107d3:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00107d6:	85 c0                	test   eax,eax
c00107d8:	74 09                	je     c00107e3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107da:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00107de:	5a                   	pop    edx
c00107df:	5b                   	pop    ebx
c00107e0:	5e                   	pop    esi
c00107e1:	ff e0                	jmp    eax
c00107e3:	58                   	pop    eax
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	c3                   	ret    
c00107e7:	90                   	nop

c00107e8 <VgaText::getCursorX()>:
c00107e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00107ef:	c3                   	ret    

c00107f0 <VgaText::getCursorY()>:
c00107f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00107f7:	c3                   	ret    

c00107f8 <VgaText::setCursor(int, int)>:
c00107f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010800:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010803:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010807:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001080a:	e9 bb fd ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c001080f:	90                   	nop

c0010810 <VgaText::setCursorX(int)>:
c0010810:	83 ec 10             	sub    esp,0x10
c0010813:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010817:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001081a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081e:	50                   	push   eax
c001081f:	e8 d4 ff ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010824:	83 c4 1c             	add    esp,0x1c
c0010827:	c3                   	ret    

c0010828 <VgaText::setCursorY(int)>:
c0010828:	83 ec 10             	sub    esp,0x10
c001082b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001082f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010833:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010836:	50                   	push   eax
c0010837:	e8 bc ff ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c001083c:	83 c4 1c             	add    esp,0x1c
c001083f:	c3                   	ret    

c0010840 <VgaText::incrementCursor(bool)>:
c0010840:	56                   	push   esi
c0010841:	53                   	push   ebx
c0010842:	51                   	push   ecx
c0010843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010847:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001084b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001084e:	40                   	inc    eax
c001084f:	83 f8 50             	cmp    eax,0x50
c0010852:	74 05                	je     c0010859 <VgaText::incrementCursor(bool)+0x19>
c0010854:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010857:	eb 24                	jmp    c001087d <VgaText::incrementCursor(bool)+0x3d>
c0010859:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001085c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010863:	8d 50 01             	lea    edx,[eax+0x1]
c0010866:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010869:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001086c:	75 0f                	jne    c001087d <VgaText::incrementCursor(bool)+0x3d>
c001086e:	83 ec 0c             	sub    esp,0xc
c0010871:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010874:	53                   	push   ebx
c0010875:	e8 6c fe ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	89 f0                	mov    eax,esi
c001087f:	84 c0                	test   al,al
c0010881:	74 0c                	je     c001088f <VgaText::incrementCursor(bool)+0x4f>
c0010883:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010887:	5a                   	pop    edx
c0010888:	5b                   	pop    ebx
c0010889:	5e                   	pop    esi
c001088a:	e9 3b fd ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c001088f:	58                   	pop    eax
c0010890:	5b                   	pop    ebx
c0010891:	5e                   	pop    esi
c0010892:	c3                   	ret    
c0010893:	90                   	nop

c0010894 <VgaText::updateRAMUsageDisplay(int)>:
c0010894:	56                   	push   esi
c0010895:	8b 35 80 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d380
c001089b:	53                   	push   ebx
c001089c:	bb 0a 00 00 00       	mov    ebx,0xa
c00108a1:	6a 0f                	push   0xf
c00108a3:	6a 00                	push   0x0
c00108a5:	e8 2a fe ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c00108aa:	5a                   	pop    edx
c00108ab:	59                   	pop    ecx
c00108ac:	0f b6 c8             	movzx  ecx,al
c00108af:	51                   	push   ecx
c00108b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b4:	99                   	cdq    
c00108b5:	f7 fb                	idiv   ebx
c00108b7:	89 d3                	mov    ebx,edx
c00108b9:	83 c0 30             	add    eax,0x30
c00108bc:	83 c3 30             	add    ebx,0x30
c00108bf:	0f be c0             	movsx  eax,al
c00108c2:	0f b6 db             	movzx  ebx,bl
c00108c5:	50                   	push   eax
c00108c6:	e8 af fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108cb:	5a                   	pop    edx
c00108cc:	5a                   	pop    edx
c00108cd:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00108d4:	51                   	push   ecx
c00108d5:	53                   	push   ebx
c00108d6:	e8 9f fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108db:	5b                   	pop    ebx
c00108dc:	5a                   	pop    edx
c00108dd:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00108e4:	51                   	push   ecx
c00108e5:	6a 25                	push   0x25
c00108e7:	e8 8e fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108ec:	59                   	pop    ecx
c00108ed:	5b                   	pop    ebx
c00108ee:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00108f5:	5b                   	pop    ebx
c00108f6:	5e                   	pop    esi
c00108f7:	c3                   	ret    

c00108f8 <VgaText::updateDiskUsage()>:
c00108f8:	55                   	push   ebp
c00108f9:	bd 10 27 00 00       	mov    ebp,0x2710
c00108fe:	57                   	push   edi
c00108ff:	8b 3d 80 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d380
c0010905:	56                   	push   esi
c0010906:	53                   	push   ebx
c0010907:	6a 0f                	push   0xf
c0010909:	6a 00                	push   0x0
c001090b:	e8 c4 fd ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010910:	5a                   	pop    edx
c0010911:	0f b6 d8             	movzx  ebx,al
c0010914:	59                   	pop    ecx
c0010915:	8b 35 a8 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327a8
c001091b:	53                   	push   ebx
c001091c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010921:	89 f0                	mov    eax,esi
c0010923:	99                   	cdq    
c0010924:	f7 fd                	idiv   ebp
c0010926:	99                   	cdq    
c0010927:	f7 f9                	idiv   ecx
c0010929:	8d 42 30             	lea    eax,[edx+0x30]
c001092c:	0f b6 c0             	movzx  eax,al
c001092f:	50                   	push   eax
c0010930:	e8 45 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010935:	5d                   	pop    ebp
c0010936:	bd e8 03 00 00       	mov    ebp,0x3e8
c001093b:	5a                   	pop    edx
c001093c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010940:	53                   	push   ebx
c0010941:	89 f0                	mov    eax,esi
c0010943:	99                   	cdq    
c0010944:	f7 fd                	idiv   ebp
c0010946:	99                   	cdq    
c0010947:	f7 f9                	idiv   ecx
c0010949:	8d 42 30             	lea    eax,[edx+0x30]
c001094c:	0f b6 c0             	movzx  eax,al
c001094f:	50                   	push   eax
c0010950:	e8 25 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010955:	5d                   	pop    ebp
c0010956:	bd 64 00 00 00       	mov    ebp,0x64
c001095b:	5a                   	pop    edx
c001095c:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010963:	53                   	push   ebx
c0010964:	89 f0                	mov    eax,esi
c0010966:	99                   	cdq    
c0010967:	f7 fd                	idiv   ebp
c0010969:	99                   	cdq    
c001096a:	f7 f9                	idiv   ecx
c001096c:	8d 42 30             	lea    eax,[edx+0x30]
c001096f:	0f b6 c0             	movzx  eax,al
c0010972:	50                   	push   eax
c0010973:	e8 02 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010978:	5d                   	pop    ebp
c0010979:	5a                   	pop    edx
c001097a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010981:	53                   	push   ebx
c0010982:	89 f0                	mov    eax,esi
c0010984:	99                   	cdq    
c0010985:	f7 f9                	idiv   ecx
c0010987:	89 d6                	mov    esi,edx
c0010989:	99                   	cdq    
c001098a:	f7 f9                	idiv   ecx
c001098c:	8d 42 30             	lea    eax,[edx+0x30]
c001098f:	0f b6 c0             	movzx  eax,al
c0010992:	50                   	push   eax
c0010993:	e8 e2 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010998:	5d                   	pop    ebp
c0010999:	5a                   	pop    edx
c001099a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109a1:	53                   	push   ebx
c00109a2:	8d 46 30             	lea    eax,[esi+0x30]
c00109a5:	0f b6 f0             	movzx  esi,al
c00109a8:	56                   	push   esi
c00109a9:	e8 cc fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109ae:	5e                   	pop    esi
c00109af:	8b 35 a4 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327a4
c00109b5:	5d                   	pop    ebp
c00109b6:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00109bd:	bd 10 27 00 00       	mov    ebp,0x2710
c00109c2:	53                   	push   ebx
c00109c3:	89 f0                	mov    eax,esi
c00109c5:	99                   	cdq    
c00109c6:	f7 fd                	idiv   ebp
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	8d 42 30             	lea    eax,[edx+0x30]
c00109ce:	0f b6 c0             	movzx  eax,al
c00109d1:	50                   	push   eax
c00109d2:	e8 a3 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5a                   	pop    edx
c00109d8:	5d                   	pop    ebp
c00109d9:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00109e0:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e5:	53                   	push   ebx
c00109e6:	89 f0                	mov    eax,esi
c00109e8:	99                   	cdq    
c00109e9:	f7 fd                	idiv   ebp
c00109eb:	99                   	cdq    
c00109ec:	f7 f9                	idiv   ecx
c00109ee:	8d 42 30             	lea    eax,[edx+0x30]
c00109f1:	0f b6 c0             	movzx  eax,al
c00109f4:	50                   	push   eax
c00109f5:	e8 80 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109fa:	5a                   	pop    edx
c00109fb:	5d                   	pop    ebp
c00109fc:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a03:	bd 64 00 00 00       	mov    ebp,0x64
c0010a08:	53                   	push   ebx
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	83 c2 30             	add    edx,0x30
c0010a14:	0f b6 d2             	movzx  edx,dl
c0010a17:	52                   	push   edx
c0010a18:	e8 5d fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5a                   	pop    edx
c0010a1e:	5d                   	pop    ebp
c0010a1f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a26:	53                   	push   ebx
c0010a27:	89 f0                	mov    eax,esi
c0010a29:	99                   	cdq    
c0010a2a:	f7 f9                	idiv   ecx
c0010a2c:	89 d6                	mov    esi,edx
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 3d fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5a                   	pop    edx
c0010a3e:	59                   	pop    ecx
c0010a3f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a46:	53                   	push   ebx
c0010a47:	8d 46 30             	lea    eax,[esi+0x30]
c0010a4a:	0f b6 f0             	movzx  esi,al
c0010a4d:	56                   	push   esi
c0010a4e:	e8 27 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a53:	5b                   	pop    ebx
c0010a54:	5e                   	pop    esi
c0010a55:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010a5c:	5b                   	pop    ebx
c0010a5d:	5e                   	pop    esi
c0010a5e:	5f                   	pop    edi
c0010a5f:	5d                   	pop    ebp
c0010a60:	c3                   	ret    
c0010a61:	90                   	nop

c0010a62 <VgaText::updateTitle()>:
c0010a62:	53                   	push   ebx
c0010a63:	31 c0                	xor    eax,eax
c0010a65:	83 ec 58             	sub    esp,0x58
c0010a68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010a6c:	89 e1                	mov    ecx,esp
c0010a6e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010a72:	40                   	inc    eax
c0010a73:	83 f8 50             	cmp    eax,0x50
c0010a76:	75 f6                	jne    c0010a6e <VgaText::updateTitle()+0xc>
c0010a78:	31 c0                	xor    eax,eax
c0010a7a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010a81:	84 db                	test   bl,bl
c0010a83:	74 06                	je     c0010a8b <VgaText::updateTitle()+0x29>
c0010a85:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010a88:	40                   	inc    eax
c0010a89:	eb ef                	jmp    c0010a7a <VgaText::updateTitle()+0x18>
c0010a8b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010a8e:	85 c0                	test   eax,eax
c0010a90:	74 09                	je     c0010a9b <VgaText::updateTitle()+0x39>
c0010a92:	53                   	push   ebx
c0010a93:	53                   	push   ebx
c0010a94:	51                   	push   ecx
c0010a95:	52                   	push   edx
c0010a96:	ff d0                	call   eax
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	e8 58 fe ff ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0010aa0:	83 c4 58             	add    esp,0x58
c0010aa3:	5b                   	pop    ebx
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <VgaText::setTitleTextColour(VgaColour)>:
c0010aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aae:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010ab1:	eb af                	jmp    c0010a62 <VgaText::updateTitle()>
c0010ab3:	90                   	nop

c0010ab4 <VgaText::setTitleColour(VgaColour)>:
c0010ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ab8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010abc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010abf:	eb a1                	jmp    c0010a62 <VgaText::updateTitle()>
c0010ac1:	90                   	nop

c0010ac2 <VgaText::setTitle(char*)>:
c0010ac2:	53                   	push   ebx
c0010ac3:	83 ec 10             	sub    esp,0x10
c0010ac6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ace:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010ad4:	50                   	push   eax
c0010ad5:	e8 62 fd fe ff       	call   c000083c <strcpy>
c0010ada:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010ade:	83 c4 18             	add    esp,0x18
c0010ae1:	5b                   	pop    ebx
c0010ae2:	e9 7b ff ff ff       	jmp    c0010a62 <VgaText::updateTitle()>
c0010ae7:	90                   	nop

c0010ae8 <VgaText::decrementCursor(bool)>:
c0010ae8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010aec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010af0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010af3:	85 c0                	test   eax,eax
c0010af5:	74 04                	je     c0010afb <VgaText::decrementCursor(bool)+0x13>
c0010af7:	48                   	dec    eax
c0010af8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010afb:	84 c9                	test   cl,cl
c0010afd:	74 09                	je     c0010b08 <VgaText::decrementCursor(bool)+0x20>
c0010aff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b03:	e9 c2 fa ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b0a:	53                   	push   ebx
c0010b0b:	83 ec 08             	sub    esp,0x8
c0010b0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b1a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b1e:	3c 07                	cmp    al,0x7
c0010b20:	75 2a                	jne    c0010b4c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b22:	a1 d8 e5 02 c0       	mov    eax,ds:0xc002e5d8
c0010b27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b2f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b37:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b43:	83 c4 08             	add    esp,0x8
c0010b46:	5b                   	pop    ebx
c0010b47:	e9 5c 30 00 00       	jmp    c0013ba8 <Buzzer::beep(int, int, bool)>
c0010b4c:	3c 0d                	cmp    al,0xd
c0010b4e:	75 09                	jne    c0010b59 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b50:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b57:	eb 2c                	jmp    c0010b85 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010b59:	3c 0a                	cmp    al,0xa
c0010b5b:	75 31                	jne    c0010b8e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010b5d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010b60:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b67:	8d 50 01             	lea    edx,[eax+0x1]
c0010b6a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010b6d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010b70:	75 0f                	jne    c0010b81 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010b72:	83 ec 0c             	sub    esp,0xc
c0010b75:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010b78:	53                   	push   ebx
c0010b79:	e8 68 fb ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c0010b7e:	83 c4 10             	add    esp,0x10
c0010b81:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b85:	83 c4 08             	add    esp,0x8
c0010b88:	5b                   	pop    ebx
c0010b89:	e9 3c fa ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c0010b8e:	3c 08                	cmp    al,0x8
c0010b90:	75 25                	jne    c0010bb7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010b92:	50                   	push   eax
c0010b93:	50                   	push   eax
c0010b94:	6a 01                	push   0x1
c0010b96:	53                   	push   ebx
c0010b97:	e8 4c ff ff ff       	call   c0010ae8 <VgaText::decrementCursor(bool)>
c0010b9c:	5a                   	pop    edx
c0010b9d:	59                   	pop    ecx
c0010b9e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ba1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ba4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ba7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010baa:	6a 20                	push   0x20
c0010bac:	53                   	push   ebx
c0010bad:	e8 da fb ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bb2:	83 c4 28             	add    esp,0x28
c0010bb5:	5b                   	pop    ebx
c0010bb6:	c3                   	ret    
c0010bb7:	83 ec 08             	sub    esp,0x8
c0010bba:	0f be c0             	movsx  eax,al
c0010bbd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010bc0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bc3:	51                   	push   ecx
c0010bc4:	52                   	push   edx
c0010bc5:	50                   	push   eax
c0010bc6:	53                   	push   ebx
c0010bc7:	e8 c0 fb ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bcc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010bd0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010bd8:	83 c4 28             	add    esp,0x28
c0010bdb:	5b                   	pop    ebx
c0010bdc:	e9 5f fc ff ff       	jmp    c0010840 <VgaText::incrementCursor(bool)>
c0010be1:	90                   	nop

c0010be2 <VgaText::isShowingCursor()>:
c0010be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010be9:	c3                   	ret    

c0010bea <VgaText::isBlinkDisabled()>:
c0010bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bee:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010bf1:	83 f0 01             	xor    eax,0x1
c0010bf4:	c3                   	ret    
c0010bf5:	90                   	nop

c0010bf6 <VgaText::setCursorHeight(int)>:
c0010bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bfe:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c01:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c09:	e9 d2 f9 ff ff       	jmp    c00105e0 <VgaText::showCursor(bool)>

c0010c0e <VgaText::getCursorHeight()>:
c0010c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c12:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c15:	c3                   	ret    

c0010c16 <setActiveTerminal(VgaText*)>:
c0010c16:	53                   	push   ebx
c0010c17:	83 ec 08             	sub    esp,0x8
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	85 db                	test   ebx,ebx
c0010c20:	75 11                	jne    c0010c33 <setActiveTerminal(VgaText*)+0x1d>
c0010c22:	c7 44 24 10 8c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a38c
c0010c2a:	83 c4 08             	add    esp,0x8
c0010c2d:	5b                   	pop    ebx
c0010c2e:	e9 ae 98 00 00       	jmp    c001a4e1 <Krnl::panic(char const*)>
c0010c33:	50                   	push   eax
c0010c34:	50                   	push   eax
c0010c35:	53                   	push   ebx
c0010c36:	68 9a a3 02 c0       	push   0xc002a39a
c0010c3b:	e8 63 21 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0010c40:	a1 24 e5 02 c0       	mov    eax,ds:0xc002e524
c0010c45:	83 c4 10             	add    esp,0x10
c0010c48:	85 c0                	test   eax,eax
c0010c4a:	74 0c                	je     c0010c58 <setActiveTerminal(VgaText*)+0x42>
c0010c4c:	83 ec 0c             	sub    esp,0xc
c0010c4f:	50                   	push   eax
c0010c50:	e8 75 f9 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010c55:	83 c4 10             	add    esp,0x10
c0010c58:	89 1d 24 e5 02 c0    	mov    DWORD PTR ds:0xc002e524,ebx
c0010c5e:	51                   	push   ecx
c0010c5f:	51                   	push   ecx
c0010c60:	53                   	push   ebx
c0010c61:	68 b2 a3 02 c0       	push   0xc002a3b2
c0010c66:	e8 38 21 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0010c6b:	83 c4 0c             	add    esp,0xc
c0010c6e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c71:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c74:	53                   	push   ebx
c0010c75:	e8 7e fb ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010c7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7d:	e8 68 ff ff ff       	call   c0010bea <VgaText::isBlinkDisabled()>
c0010c82:	5a                   	pop    edx
c0010c83:	0f b6 c0             	movzx  eax,al
c0010c86:	59                   	pop    ecx
c0010c87:	50                   	push   eax
c0010c88:	53                   	push   ebx
c0010c89:	e8 5e f9 ff ff       	call   c00105ec <VgaText::disableBlink(bool)>
c0010c8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c91:	e8 78 ff ff ff       	call   c0010c0e <VgaText::getCursorHeight()>
c0010c96:	5a                   	pop    edx
c0010c97:	59                   	pop    ecx
c0010c98:	50                   	push   eax
c0010c99:	53                   	push   ebx
c0010c9a:	e8 57 ff ff ff       	call   c0010bf6 <VgaText::setCursorHeight(int)>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010ca6:	75 07                	jne    c0010caf <setActiveTerminal(VgaText*)+0x99>
c0010ca8:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010caf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cb3:	83 c4 08             	add    esp,0x8
c0010cb6:	5b                   	pop    ebx
c0010cb7:	e9 c0 f8 ff ff       	jmp    c001057c <VgaText::load()>

c0010cbc <doTerminalCycle()>:
c0010cbc:	83 ec 18             	sub    esp,0x18
c0010cbf:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c0010cc4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010cc7:	50                   	push   eax
c0010cc8:	a3 20 e5 02 c0       	mov    ds:0xc002e520,eax
c0010ccd:	e8 44 ff ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c0010cd2:	83 c4 1c             	add    esp,0x1c
c0010cd5:	c3                   	ret    

c0010cd6 <VgaText::doUpdate()>:
c0010cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cda:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010cdd:	85 c0                	test   eax,eax
c0010cdf:	74 02                	je     c0010ce3 <VgaText::doUpdate()+0xd>
c0010ce1:	ff e0                	jmp    eax
c0010ce3:	c3                   	ret    

c0010ce4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010ce4:	55                   	push   ebp
c0010ce5:	31 ed                	xor    ebp,ebp
c0010ce7:	57                   	push   edi
c0010ce8:	56                   	push   esi
c0010ce9:	53                   	push   ebx
c0010cea:	83 ec 1c             	sub    esp,0x1c
c0010ced:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010cf1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010cf6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010cfd:	50                   	push   eax
c0010cfe:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d03:	50                   	push   eax
c0010d04:	e8 cb f9 ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d09:	59                   	pop    ecx
c0010d0a:	0f b6 c0             	movzx  eax,al
c0010d0d:	5e                   	pop    esi
c0010d0e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d17:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d1e:	0f b7 f6             	movzx  esi,si
c0010d21:	01 f6                	add    esi,esi
c0010d23:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d26:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d29:	84 c0                	test   al,al
c0010d2b:	0f 84 fd 00 00 00    	je     c0010e2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d31:	3c 0d                	cmp    al,0xd
c0010d33:	75 0c                	jne    c0010d41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d35:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d3c:	e9 e7 00 00 00       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d41:	3c 0a                	cmp    al,0xa
c0010d43:	75 47                	jne    c0010d8c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d45:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d48:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d52:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d55:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010d58:	75 0f                	jne    c0010d69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010d60:	53                   	push   ebx
c0010d61:	e8 80 f9 ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	83 ec 0c             	sub    esp,0xc
c0010d6c:	31 ed                	xor    ebp,ebp
c0010d6e:	53                   	push   ebx
c0010d6f:	e8 56 f8 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010d74:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d7f:	0f b7 f6             	movzx  esi,si
c0010d82:	01 f6                	add    esi,esi
c0010d84:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d87:	e9 9c 00 00 00       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d8c:	3c 08                	cmp    al,0x8
c0010d8e:	75 35                	jne    c0010dc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010d90:	56                   	push   esi
c0010d91:	56                   	push   esi
c0010d92:	6a 01                	push   0x1
c0010d94:	53                   	push   ebx
c0010d95:	e8 4e fd ff ff       	call   c0010ae8 <VgaText::decrementCursor(bool)>
c0010d9a:	58                   	pop    eax
c0010d9b:	5a                   	pop    edx
c0010d9c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d9f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010da2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010da5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010da8:	6a 20                	push   0x20
c0010daa:	53                   	push   ebx
c0010dab:	e8 dc f9 ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010db0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010db5:	83 c4 20             	add    esp,0x20
c0010db8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dbb:	0f b7 f6             	movzx  esi,si
c0010dbe:	01 f6                	add    esi,esi
c0010dc0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dc3:	eb 63                	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dc5:	51                   	push   ecx
c0010dc6:	51                   	push   ecx
c0010dc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010dcb:	50                   	push   eax
c0010dcc:	e8 a9 f9 ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	66 89 06             	mov    WORD PTR [esi],ax
c0010dd7:	39 1d 24 e5 02 c0    	cmp    DWORD PTR ds:0xc002e524,ebx
c0010ddd:	75 21                	jne    c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ddf:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010de2:	85 c0                	test   eax,eax
c0010de4:	74 1a                	je     c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010de6:	52                   	push   edx
c0010de7:	52                   	push   edx
c0010de8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010deb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010dee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010df2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010df6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010df9:	51                   	push   ecx
c0010dfa:	53                   	push   ebx
c0010dfb:	ff d0                	call   eax
c0010dfd:	83 c4 20             	add    esp,0x20
c0010e00:	83 c6 02             	add    esi,0x2
c0010e03:	50                   	push   eax
c0010e04:	50                   	push   eax
c0010e05:	6a 00                	push   0x0
c0010e07:	53                   	push   ebx
c0010e08:	e8 33 fa ff ff       	call   c0010840 <VgaText::incrementCursor(bool)>
c0010e0d:	83 c4 10             	add    esp,0x10
c0010e10:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e14:	75 0d                	jne    c0010e23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e16:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e1b:	0f b7 f6             	movzx  esi,si
c0010e1e:	01 f6                	add    esi,esi
c0010e20:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e23:	bd 01 00 00 00       	mov    ebp,0x1
c0010e28:	47                   	inc    edi
c0010e29:	e9 f8 fe ff ff       	jmp    c0010d26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e2e:	83 ec 0c             	sub    esp,0xc
c0010e31:	53                   	push   ebx
c0010e32:	e8 93 f7 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	89 e8                	mov    eax,ebp
c0010e3c:	84 c0                	test   al,al
c0010e3e:	74 0c                	je     c0010e4c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e40:	83 ec 0c             	sub    esp,0xc
c0010e43:	53                   	push   ebx
c0010e44:	e8 8d fe ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e53:	83 c4 1c             	add    esp,0x1c
c0010e56:	5b                   	pop    ebx
c0010e57:	5e                   	pop    esi
c0010e58:	5f                   	pop    edi
c0010e59:	5d                   	pop    ebp
c0010e5a:	c3                   	ret    
c0010e5b:	90                   	nop

c0010e5c <VgaText::clearScreen()>:
c0010e5c:	57                   	push   edi
c0010e5d:	56                   	push   esi
c0010e5e:	31 f6                	xor    esi,esi
c0010e60:	53                   	push   ebx
c0010e61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e65:	52                   	push   edx
c0010e66:	6a 00                	push   0x0
c0010e68:	6a 00                	push   0x0
c0010e6a:	53                   	push   ebx
c0010e6b:	e8 88 f9 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010e70:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010e7d:	7e 20                	jle    c0010e9f <VgaText::clearScreen()+0x43>
c0010e7f:	31 ff                	xor    edi,edi
c0010e81:	50                   	push   eax
c0010e82:	50                   	push   eax
c0010e83:	56                   	push   esi
c0010e84:	57                   	push   edi
c0010e85:	47                   	inc    edi
c0010e86:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e8c:	6a 20                	push   0x20
c0010e8e:	53                   	push   ebx
c0010e8f:	e8 f8 f8 ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e94:	83 c4 20             	add    esp,0x20
c0010e97:	83 ff 50             	cmp    edi,0x50
c0010e9a:	75 e5                	jne    c0010e81 <VgaText::clearScreen()+0x25>
c0010e9c:	46                   	inc    esi
c0010e9d:	eb db                	jmp    c0010e7a <VgaText::clearScreen()+0x1e>
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	53                   	push   ebx
c0010ea3:	e8 2e fe ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c0010ea8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	5b                   	pop    ebx
c0010eb3:	5e                   	pop    esi
c0010eb4:	5f                   	pop    edi
c0010eb5:	c3                   	ret    

c0010eb6 <VgaText::putchar(char)>:
c0010eb6:	56                   	push   esi
c0010eb7:	53                   	push   ebx
c0010eb8:	83 ec 14             	sub    esp,0x14
c0010ebb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ebf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ec3:	3c 5b                	cmp    al,0x5b
c0010ec5:	75 18                	jne    c0010edf <VgaText::putchar(char)+0x29>
c0010ec7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010ecb:	74 1f                	je     c0010eec <VgaText::putchar(char)+0x36>
c0010ecd:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010ed3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010eda:	e9 bd 00 00 00       	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010edf:	3c 1b                	cmp    al,0x1b
c0010ee1:	75 09                	jne    c0010eec <VgaText::putchar(char)+0x36>
c0010ee3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010ee7:	e9 b0 00 00 00       	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010eec:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010eef:	84 c9                	test   cl,cl
c0010ef1:	0f 84 92 00 00 00    	je     c0010f89 <VgaText::putchar(char)+0xd3>
c0010ef7:	8d 50 c0             	lea    edx,[eax-0x40]
c0010efa:	80 fa 3e             	cmp    dl,0x3e
c0010efd:	77 76                	ja     c0010f75 <VgaText::putchar(char)+0xbf>
c0010eff:	3c 6d                	cmp    al,0x6d
c0010f01:	75 47                	jne    c0010f4a <VgaText::putchar(char)+0x94>
c0010f03:	31 f6                	xor    esi,esi
c0010f05:	31 d2                	xor    edx,edx
c0010f07:	31 c0                	xor    eax,eax
c0010f09:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f0c:	7e 2d                	jle    c0010f3b <VgaText::putchar(char)+0x85>
c0010f0e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f13:	80 fa 3b             	cmp    dl,0x3b
c0010f16:	75 17                	jne    c0010f2f <VgaText::putchar(char)+0x79>
c0010f18:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f1c:	50                   	push   eax
c0010f1d:	53                   	push   ebx
c0010f1e:	e8 fd f6 ff ff       	call   c0010620 <VgaText::doANSI_SGR(int)>
c0010f23:	59                   	pop    ecx
c0010f24:	31 d2                	xor    edx,edx
c0010f26:	58                   	pop    eax
c0010f27:	31 c0                	xor    eax,eax
c0010f29:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2d:	eb 09                	jmp    c0010f38 <VgaText::putchar(char)+0x82>
c0010f2f:	6b c0 0a             	imul   eax,eax,0xa
c0010f32:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f36:	88 ca                	mov    dl,cl
c0010f38:	46                   	inc    esi
c0010f39:	eb ce                	jmp    c0010f09 <VgaText::putchar(char)+0x53>
c0010f3b:	84 d2                	test   dl,dl
c0010f3d:	74 2e                	je     c0010f6d <VgaText::putchar(char)+0xb7>
c0010f3f:	50                   	push   eax
c0010f40:	53                   	push   ebx
c0010f41:	e8 da f6 ff ff       	call   c0010620 <VgaText::doANSI_SGR(int)>
c0010f46:	58                   	pop    eax
c0010f47:	5a                   	pop    edx
c0010f48:	eb 23                	jmp    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f4a:	3c 4a                	cmp    al,0x4a
c0010f4c:	75 1f                	jne    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f4e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f52:	75 19                	jne    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	53                   	push   ebx
c0010f58:	e8 ff fe ff ff       	call   c0010e5c <VgaText::clearScreen()>
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	6a 00                	push   0x0
c0010f62:	6a 00                	push   0x0
c0010f64:	53                   	push   ebx
c0010f65:	e8 8e f8 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010f73:	eb 27                	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010f75:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010f78:	83 fa 0e             	cmp    edx,0xe
c0010f7b:	7f 1f                	jg     c0010f9c <VgaText::putchar(char)+0xe6>
c0010f7d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010f80:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010f83:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010f87:	eb 13                	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010f89:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f8c:	0f be c0             	movsx  eax,al
c0010f8f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f92:	50                   	push   eax
c0010f93:	53                   	push   ebx
c0010f94:	e8 71 fb ff ff       	call   c0010b0a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	83 c4 14             	add    esp,0x14
c0010f9f:	5b                   	pop    ebx
c0010fa0:	5e                   	pop    esi
c0010fa1:	c3                   	ret    

c0010fa2 <VgaText::puts(char const*)>:
c0010fa2:	53                   	push   ebx
c0010fa3:	83 ec 08             	sub    esp,0x8
c0010fa6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010faa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010fad:	84 c0                	test   al,al
c0010faf:	74 12                	je     c0010fc3 <VgaText::puts(char const*)+0x21>
c0010fb1:	43                   	inc    ebx
c0010fb2:	51                   	push   ecx
c0010fb3:	51                   	push   ecx
c0010fb4:	50                   	push   eax
c0010fb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb9:	e8 f8 fe ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0010fbe:	83 c4 10             	add    esp,0x10
c0010fc1:	eb e7                	jmp    c0010faa <VgaText::puts(char const*)+0x8>
c0010fc3:	83 c4 08             	add    esp,0x8
c0010fc6:	5b                   	pop    ebx
c0010fc7:	c3                   	ret    

c0010fc8 <VgaText::putx(unsigned int)>:
c0010fc8:	57                   	push   edi
c0010fc9:	b9 11 00 00 00       	mov    ecx,0x11
c0010fce:	56                   	push   esi
c0010fcf:	be ce a3 02 c0       	mov    esi,0xc002a3ce
c0010fd4:	53                   	push   ebx
c0010fd5:	83 ec 20             	sub    esp,0x20
c0010fd8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010fdc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010fe0:	fc                   	cld    
c0010fe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fe3:	be 08 00 00 00       	mov    esi,0x8
c0010fe8:	50                   	push   eax
c0010fe9:	50                   	push   eax
c0010fea:	89 d8                	mov    eax,ebx
c0010fec:	c1 e3 04             	shl    ebx,0x4
c0010fef:	c1 e8 1c             	shr    eax,0x1c
c0010ff2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ff7:	50                   	push   eax
c0010ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ffc:	e8 b5 fe ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	4e                   	dec    esi
c0011005:	75 e1                	jne    c0010fe8 <VgaText::putx(unsigned int)+0x20>
c0011007:	83 c4 20             	add    esp,0x20
c001100a:	5b                   	pop    ebx
c001100b:	5e                   	pop    esi
c001100c:	5f                   	pop    edi
c001100d:	c3                   	ret    

c001100e <VgaText::VgaText(char const*)>:
c001100e:	57                   	push   edi
c001100f:	56                   	push   esi
c0011010:	53                   	push   ebx
c0011011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011015:	83 ec 08             	sub    esp,0x8
c0011018:	6a 00                	push   0x0
c001101a:	50                   	push   eax
c001101b:	e8 6c 05 00 00       	call   c001158c <UnixFile::UnixFile(int)>
c0011020:	83 c4 10             	add    esp,0x10
c0011023:	ba 34 a4 02 c0       	mov    edx,0xc002a434
c0011028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102c:	89 10                	mov    DWORD PTR [eax],edx
c001102e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011032:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011048:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001104c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011050:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011058:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001105f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011063:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001106a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011079:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011084:	8d 50 60             	lea    edx,[eax+0x60]
c0011087:	bb 00 e5 02 c0       	mov    ebx,0xc002e500
c001108c:	b8 08 00 00 00       	mov    eax,0x8
c0011091:	fc                   	cld    
c0011092:	89 d7                	mov    edi,edx
c0011094:	89 de                	mov    esi,ebx
c0011096:	89 c1                	mov    ecx,eax
c0011098:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001109a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109e:	05 82 00 00 00       	add    eax,0x82
c00110a3:	83 ec 08             	sub    esp,0x8
c00110a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110aa:	50                   	push   eax
c00110ab:	e8 8c f7 fe ff       	call   c000083c <strcpy>
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b7:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00110be:	83 ec 0c             	sub    esp,0xc
c00110c1:	68 a0 0f 00 00       	push   0xfa0
c00110c6:	e8 80 e7 ff ff       	call   c000f84b <malloc>
c00110cb:	83 c4 10             	add    esp,0x10
c00110ce:	89 c2                	mov    edx,eax
c00110d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00110d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110de:	83 ec 04             	sub    esp,0x4
c00110e1:	68 00 0f 00 00       	push   0xf00
c00110e6:	6a 00                	push   0x0
c00110e8:	50                   	push   eax
c00110e9:	e8 92 f6 fe ff       	call   c0000780 <memset>
c00110ee:	83 c4 10             	add    esp,0x10
c00110f1:	83 ec 04             	sub    esp,0x4
c00110f4:	6a 00                	push   0x0
c00110f6:	6a 07                	push   0x7
c00110f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110fc:	e8 b3 f5 ff ff       	call   c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011101:	83 c4 10             	add    esp,0x10
c0011104:	83 ec 08             	sub    esp,0x8
c0011107:	6a 02                	push   0x2
c0011109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110d:	e8 e4 fa ff ff       	call   c0010bf6 <VgaText::setCursorHeight(int)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	83 ec 04             	sub    esp,0x4
c0011118:	6a 00                	push   0x0
c001111a:	6a 00                	push   0x0
c001111c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011120:	e8 d3 f6 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0011125:	83 c4 10             	add    esp,0x10
c0011128:	83 ec 08             	sub    esp,0x8
c001112b:	6a 01                	push   0x1
c001112d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011131:	e8 aa f4 ff ff       	call   c00105e0 <VgaText::showCursor(bool)>
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	83 ec 08             	sub    esp,0x8
c001113c:	6a 01                	push   0x1
c001113e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011142:	e8 a5 f4 ff ff       	call   c00105ec <VgaText::disableBlink(bool)>
c0011147:	83 c4 10             	add    esp,0x10
c001114a:	83 ec 0c             	sub    esp,0xc
c001114d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011151:	e8 06 fd ff ff       	call   c0010e5c <VgaText::clearScreen()>
c0011156:	83 c4 10             	add    esp,0x10
c0011159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001115d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011165:	05 02 01 00 00       	add    eax,0x102
c001116a:	83 ec 04             	sub    esp,0x4
c001116d:	68 96 00 00 00       	push   0x96
c0011172:	6a 00                	push   0x0
c0011174:	50                   	push   eax
c0011175:	e8 06 f6 fe ff       	call   c0000780 <memset>
c001117a:	83 c4 10             	add    esp,0x10
c001117d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011181:	05 98 01 00 00       	add    eax,0x198
c0011186:	83 ec 04             	sub    esp,0x4
c0011189:	68 2c 01 00 00       	push   0x12c
c001118e:	6a 00                	push   0x0
c0011190:	50                   	push   eax
c0011191:	e8 ea f5 fe ff       	call   c0000780 <memset>
c0011196:	83 c4 10             	add    esp,0x10
c0011199:	90                   	nop
c001119a:	5b                   	pop    ebx
c001119b:	5e                   	pop    esi
c001119c:	5f                   	pop    edi
c001119d:	c3                   	ret    

c001119e <VgaText::receiveKey(unsigned char)>:
c001119e:	55                   	push   ebp
c001119f:	57                   	push   edi
c00111a0:	56                   	push   esi
c00111a1:	53                   	push   ebx
c00111a2:	83 ec 1c             	sub    esp,0x1c
c00111a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111ad:	84 db                	test   bl,bl
c00111af:	0f 84 c9 00 00 00    	je     c001127e <VgaText::receiveKey(unsigned char)+0xe0>
c00111b5:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00111bb:	80 fb 08             	cmp    bl,0x8
c00111be:	75 2c                	jne    c00111ec <VgaText::receiveKey(unsigned char)+0x4e>
c00111c0:	83 ec 0c             	sub    esp,0xc
c00111c3:	57                   	push   edi
c00111c4:	e8 d3 f5 fe ff       	call   c000079c <strlen>
c00111c9:	83 c4 10             	add    esp,0x10
c00111cc:	85 c0                	test   eax,eax
c00111ce:	74 41                	je     c0011211 <VgaText::receiveKey(unsigned char)+0x73>
c00111d0:	50                   	push   eax
c00111d1:	50                   	push   eax
c00111d2:	6a 08                	push   0x8
c00111d4:	56                   	push   esi
c00111d5:	e8 dc fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00111da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111dd:	e8 ba f5 fe ff       	call   c000079c <strlen>
c00111e2:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00111ea:	eb 22                	jmp    c001120e <VgaText::receiveKey(unsigned char)+0x70>
c00111ec:	0f be c3             	movsx  eax,bl
c00111ef:	52                   	push   edx
c00111f0:	52                   	push   edx
c00111f1:	50                   	push   eax
c00111f2:	56                   	push   esi
c00111f3:	e8 be fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00111f8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00111fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011201:	59                   	pop    ecx
c0011202:	5d                   	pop    ebp
c0011203:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011207:	50                   	push   eax
c0011208:	57                   	push   edi
c0011209:	e8 6e f7 fe ff       	call   c000097c <strcat>
c001120e:	83 c4 10             	add    esp,0x10
c0011211:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011218:	75 05                	jne    c001121f <VgaText::receiveKey(unsigned char)+0x81>
c001121a:	80 fb 0a             	cmp    bl,0xa
c001121d:	75 53                	jne    c0011272 <VgaText::receiveKey(unsigned char)+0xd4>
c001121f:	83 ec 0c             	sub    esp,0xc
c0011222:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011228:	53                   	push   ebx
c0011229:	e8 6e f5 fe ff       	call   c000079c <strlen>
c001122e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011231:	89 c5                	mov    ebp,eax
c0011233:	e8 64 f5 fe ff       	call   c000079c <strlen>
c0011238:	83 c4 10             	add    esp,0x10
c001123b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001123f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011244:	76 10                	jbe    c0011256 <VgaText::receiveKey(unsigned char)+0xb8>
c0011246:	83 ec 0c             	sub    esp,0xc
c0011249:	68 df a3 02 c0       	push   0xc002a3df
c001124e:	e8 8e 92 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0011253:	83 c4 10             	add    esp,0x10
c0011256:	50                   	push   eax
c0011257:	50                   	push   eax
c0011258:	57                   	push   edi
c0011259:	53                   	push   ebx
c001125a:	e8 1d f7 fe ff       	call   c000097c <strcat>
c001125f:	83 c4 0c             	add    esp,0xc
c0011262:	68 96 00 00 00       	push   0x96
c0011267:	6a 00                	push   0x0
c0011269:	57                   	push   edi
c001126a:	e8 11 f5 fe ff       	call   c0000780 <memset>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	83 ec 0c             	sub    esp,0xc
c0011275:	56                   	push   esi
c0011276:	e8 5b fa ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c001127b:	83 c4 10             	add    esp,0x10
c001127e:	83 c4 1c             	add    esp,0x1c
c0011281:	5b                   	pop    ebx
c0011282:	5e                   	pop    esi
c0011283:	5f                   	pop    edi
c0011284:	5d                   	pop    ebp
c0011285:	c3                   	ret    

c0011286 <VgaText::write(unsigned long long, void*, int*)>:
c0011286:	55                   	push   ebp
c0011287:	57                   	push   edi
c0011288:	56                   	push   esi
c0011289:	53                   	push   ebx
c001128a:	83 ec 0c             	sub    esp,0xc
c001128d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011291:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011295:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011299:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00112a0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00112a3:	39 eb                	cmp    ebx,ebp
c00112a5:	74 13                	je     c00112ba <VgaText::write(unsigned long long, void*, int*)+0x34>
c00112a7:	43                   	inc    ebx
c00112a8:	50                   	push   eax
c00112a9:	50                   	push   eax
c00112aa:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00112ae:	50                   	push   eax
c00112af:	56                   	push   esi
c00112b0:	e8 01 fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00112b5:	83 c4 10             	add    esp,0x10
c00112b8:	eb e9                	jmp    c00112a3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00112ba:	83 ec 0c             	sub    esp,0xc
c00112bd:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00112c4:	56                   	push   esi
c00112c5:	e8 0c fa ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c00112ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112ce:	89 38                	mov    DWORD PTR [eax],edi
c00112d0:	83 c4 1c             	add    esp,0x1c
c00112d3:	31 c0                	xor    eax,eax
c00112d5:	5b                   	pop    ebx
c00112d6:	5e                   	pop    esi
c00112d7:	5f                   	pop    edi
c00112d8:	5d                   	pop    ebp
c00112d9:	c3                   	ret    

c00112da <newTerminal(char*)>:
c00112da:	83 ec 28             	sub    esp,0x28
c00112dd:	68 c4 02 00 00       	push   0x2c4
c00112e2:	e8 64 e5 ff ff       	call   c000f84b <malloc>
c00112e7:	5a                   	pop    edx
c00112e8:	59                   	pop    ecx
c00112e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00112ed:	50                   	push   eax
c00112ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112f2:	e8 17 fd ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c00112f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112fb:	83 c4 2c             	add    esp,0x2c
c00112fe:	c3                   	ret    
c00112ff:	90                   	nop

c0011300 <TSS::TSS()>:
c0011300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011304:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001130b:	90                   	nop
c001130c:	c3                   	ret    
c001130d:	90                   	nop

c001130e <TSS::setESP(unsigned long)>:
c001130e:	55                   	push   ebp
c001130f:	89 e5                	mov    ebp,esp
c0011311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011317:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001131a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001131d:	90                   	nop
c001131e:	5d                   	pop    ebp
c001131f:	c3                   	ret    

c0011320 <TSS::flush()>:
c0011320:	55                   	push   ebp
c0011321:	89 e5                	mov    ebp,esp
c0011323:	83 ec 10             	sub    esp,0x10
c0011326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011329:	8b 00                	mov    eax,DWORD PTR [eax]
c001132b:	83 c8 03             	or     eax,0x3
c001132e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011332:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011336:	66 89 d0             	mov    ax,dx
c0011339:	0f 00 d8             	ltr    ax
c001133c:	90                   	nop
c001133d:	c9                   	leave  
c001133e:	c3                   	ret    
c001133f:	90                   	nop

c0011340 <TSS::setup(unsigned long, unsigned long)>:
c0011340:	55                   	push   ebp
c0011341:	89 e5                	mov    ebp,esp
c0011343:	83 ec 18             	sub    esp,0x18
c0011346:	83 ec 0c             	sub    esp,0xc
c0011349:	6a 68                	push   0x68
c001134b:	e8 fb e4 ff ff       	call   c000f84b <malloc>
c0011350:	83 c4 10             	add    esp,0x10
c0011353:	89 c2                	mov    edx,eax
c0011355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011358:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001135b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001135e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011361:	83 ec 04             	sub    esp,0x4
c0011364:	6a 68                	push   0x68
c0011366:	6a 00                	push   0x0
c0011368:	50                   	push   eax
c0011369:	e8 12 f4 fe ff       	call   c0000780 <memset>
c001136e:	83 c4 10             	add    esp,0x10
c0011371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011377:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001137d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011380:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011383:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001138c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001138f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011392:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001139b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00113a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00113ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113b3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00113b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113bf:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00113c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113cb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00113d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00113dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00113e6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00113e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00113f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113fb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011405:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011408:	0f 20 da             	mov    edx,cr3
c001140b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001140e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011411:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141a:	83 ec 08             	sub    esp,0x8
c001141d:	50                   	push   eax
c001141e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011421:	50                   	push   eax
c0011422:	e8 ff db ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	83 ec 08             	sub    esp,0x8
c001142d:	6a 68                	push   0x68
c001142f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011432:	50                   	push   eax
c0011433:	e8 0a dc ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c0011438:	83 c4 10             	add    esp,0x10
c001143b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001143f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011442:	83 e0 0f             	and    eax,0xf
c0011445:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011448:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001144b:	83 c8 40             	or     eax,0x40
c001144e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011451:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0011456:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001145c:	05 78 01 00 00       	add    eax,0x178
c0011461:	83 ec 04             	sub    esp,0x4
c0011464:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011467:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001146a:	50                   	push   eax
c001146b:	e8 06 dc ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c0011470:	83 c4 10             	add    esp,0x10
c0011473:	89 c2                	mov    edx,eax
c0011475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011478:	89 10                	mov    DWORD PTR [eax],edx
c001147a:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001147f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011485:	05 78 01 00 00       	add    eax,0x178
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	50                   	push   eax
c001148e:	e8 27 dc ff ff       	call   c000f0ba <GDT::flush()>
c0011493:	83 c4 10             	add    esp,0x10
c0011496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011499:	8b 00                	mov    eax,DWORD PTR [eax]
c001149b:	83 ec 08             	sub    esp,0x8
c001149e:	50                   	push   eax
c001149f:	68 48 a4 02 c0       	push   0xc002a448
c00114a4:	e8 fa 18 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114af:	8b 00                	mov    eax,DWORD PTR [eax]
c00114b1:	c9                   	leave  
c00114b2:	c3                   	ret    
c00114b3:	90                   	nop

c00114b4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00114b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00114bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00114c4:	75 08                	jne    c00114ce <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00114c6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00114cc:	eb 38                	jmp    c0011506 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00114ce:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114d3:	75 17                	jne    c00114ec <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00114d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114dd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00114e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00114e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114e9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00114ec:	89 c1                	mov    ecx,eax
c00114ee:	83 e1 fd             	and    ecx,0xfffffffd
c00114f1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00114f7:	74 cd                	je     c00114c6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00114f9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00114fe:	83 e0 ef             	and    eax,0xffffffef
c0011501:	83 f8 08             	cmp    eax,0x8
c0011504:	76 c0                	jbe    c00114c6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011506:	31 c0                	xor    eax,eax
c0011508:	c3                   	ret    
c0011509:	90                   	nop

c001150a <ReservedFilename::isAtty()>:
c001150a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001150e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011511:	31 c0                	xor    eax,eax
c0011513:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011519:	74 09                	je     c0011524 <ReservedFilename::isAtty()+0x1a>
c001151b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011521:	0f 94 c0             	sete   al
c0011524:	c3                   	ret    
c0011525:	90                   	nop

c0011526 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001152a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001152e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011531:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011535:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001153a:	75 08                	jne    c0011544 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001153c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011542:	eb 3d                	jmp    c0011581 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011544:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011549:	75 17                	jne    c0011562 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001154b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011550:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011553:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011559:	8b 10                	mov    edx,DWORD PTR [eax]
c001155b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001155f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011562:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011567:	75 04                	jne    c001156d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011569:	89 0a                	mov    DWORD PTR [edx],ecx
c001156b:	eb 14                	jmp    c0011581 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001156d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011572:	74 c8                	je     c001153c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011574:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011579:	83 e0 ef             	and    eax,0xffffffef
c001157c:	83 f8 08             	cmp    eax,0x8
c001157f:	76 bb                	jbe    c001153c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011581:	31 c0                	xor    eax,eax
c0011583:	c3                   	ret    

c0011584 <UnixFile::getFileDescriptor()>:
c0011584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011588:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158b:	c3                   	ret    

c001158c <UnixFile::UnixFile(int)>:
c001158c:	53                   	push   ebx
c001158d:	83 ec 28             	sub    esp,0x28
c0011590:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c0011595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011599:	89 10                	mov    DWORD PTR [eax],edx
c001159b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00115a3:	0f 8f 8c 01 00 00    	jg     c0011735 <UnixFile::UnixFile(int)+0x1a9>
c00115a9:	a1 e0 d3 02 c0       	mov    eax,ds:0xc002d3e0
c00115ae:	8d 50 01             	lea    edx,[eax+0x1]
c00115b1:	89 15 e0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3e0,edx
c00115b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00115bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00115be:	83 ec 08             	sub    esp,0x8
c00115c1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00115c5:	68 b8 e5 02 c0       	push   0xc002e5b8
c00115ca:	e8 51 71 01 00       	call   c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	a0 b4 e5 02 c0       	mov    al,ds:0xc002e5b4
c00115d7:	83 f0 01             	xor    eax,0x1
c00115da:	84 c0                	test   al,al
c00115dc:	0f 84 54 01 00 00    	je     c0011736 <UnixFile::UnixFile(int)+0x1aa>
c00115e2:	c6 05 b4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5b4,0x1
c00115e9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00115f1:	83 ec 0c             	sub    esp,0xc
c00115f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00115f8:	e8 4e e2 ff ff       	call   c000f84b <malloc>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	89 c3                	mov    ebx,eax
c0011602:	83 ec 08             	sub    esp,0x8
c0011605:	68 03 ff ff 0f       	push   0xfffff03
c001160a:	53                   	push   ebx
c001160b:	e8 2c 01 00 00       	call   c001173c <ReservedFilename::ReservedFilename(int)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	89 1d ac e5 02 c0    	mov    DWORD PTR ds:0xc002e5ac,ebx
c0011619:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011621:	83 ec 0c             	sub    esp,0xc
c0011624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011628:	e8 1e e2 ff ff       	call   c000f84b <malloc>
c001162d:	83 c4 10             	add    esp,0x10
c0011630:	89 c3                	mov    ebx,eax
c0011632:	83 ec 08             	sub    esp,0x8
c0011635:	68 01 ff ff 0f       	push   0xfffff01
c001163a:	53                   	push   ebx
c001163b:	e8 fc 00 00 00       	call   c001173c <ReservedFilename::ReservedFilename(int)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 1d b0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5b0,ebx
c0011649:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011651:	83 ec 0c             	sub    esp,0xc
c0011654:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011658:	e8 ee e1 ff ff       	call   c000f84b <malloc>
c001165d:	83 c4 10             	add    esp,0x10
c0011660:	89 c3                	mov    ebx,eax
c0011662:	83 ec 08             	sub    esp,0x8
c0011665:	68 00 ff ff 0f       	push   0xfffff00
c001166a:	53                   	push   ebx
c001166b:	e8 cc 00 00 00       	call   c001173c <ReservedFilename::ReservedFilename(int)>
c0011670:	83 c4 10             	add    esp,0x10
c0011673:	89 1d a4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a4,ebx
c0011679:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011681:	83 ec 0c             	sub    esp,0xc
c0011684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011688:	e8 be e1 ff ff       	call   c000f84b <malloc>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	89 c3                	mov    ebx,eax
c0011692:	83 ec 08             	sub    esp,0x8
c0011695:	68 02 ff ff 0f       	push   0xfffff02
c001169a:	53                   	push   ebx
c001169b:	e8 9c 00 00 00       	call   c001173c <ReservedFilename::ReservedFilename(int)>
c00116a0:	83 c4 10             	add    esp,0x10
c00116a3:	89 1d a8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a8,ebx
c00116a9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00116b1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00116b6:	7f 7e                	jg     c0011736 <UnixFile::UnixFile(int)+0x1aa>
c00116b8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116c7:	e8 7f e1 ff ff       	call   c000f84b <malloc>
c00116cc:	83 c4 10             	add    esp,0x10
c00116cf:	89 c3                	mov    ebx,eax
c00116d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116d5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00116da:	83 ec 08             	sub    esp,0x8
c00116dd:	50                   	push   eax
c00116de:	53                   	push   ebx
c00116df:	e8 58 00 00 00       	call   c001173c <ReservedFilename::ReservedFilename(int)>
c00116e4:	83 c4 10             	add    esp,0x10
c00116e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116eb:	89 1c 85 80 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a80],ebx
c00116f2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00116fa:	83 ec 0c             	sub    esp,0xc
c00116fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011701:	e8 45 e1 ff ff       	call   c000f84b <malloc>
c0011706:	83 c4 10             	add    esp,0x10
c0011709:	89 c3                	mov    ebx,eax
c001170b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001170f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011714:	83 ec 08             	sub    esp,0x8
c0011717:	50                   	push   eax
c0011718:	53                   	push   ebx
c0011719:	e8 1e 00 00 00       	call   c001173c <ReservedFilename::ReservedFilename(int)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011725:	89 1c 85 40 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ac0],ebx
c001172c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011730:	e9 7c ff ff ff       	jmp    c00116b1 <UnixFile::UnixFile(int)+0x125>
c0011735:	90                   	nop
c0011736:	83 c4 28             	add    esp,0x28
c0011739:	5b                   	pop    ebx
c001173a:	c3                   	ret    
c001173b:	90                   	nop

c001173c <ReservedFilename::ReservedFilename(int)>:
c001173c:	83 ec 0c             	sub    esp,0xc
c001173f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011743:	83 ec 08             	sub    esp,0x8
c0011746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001174a:	50                   	push   eax
c001174b:	e8 3c fe ff ff       	call   c001158c <UnixFile::UnixFile(int)>
c0011750:	83 c4 10             	add    esp,0x10
c0011753:	ba 50 a5 02 c0       	mov    edx,0xc002a550
c0011758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001175c:	89 10                	mov    DWORD PTR [eax],edx
c001175e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011762:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011766:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011769:	90                   	nop
c001176a:	83 c4 0c             	add    esp,0xc
c001176d:	c3                   	ret    

c001176e <UnixFile::~UnixFile()>:
c001176e:	83 ec 1c             	sub    esp,0x1c
c0011771:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c0011776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001177a:	89 10                	mov    DWORD PTR [eax],edx
c001177c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011783:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011788:	7f 73                	jg     c00117fd <UnixFile::~UnixFile()+0x8f>
c001178a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011792:	83 ec 0c             	sub    esp,0xc
c0011795:	68 b8 e5 02 c0       	push   0xc002e5b8
c001179a:	e8 55 70 01 00       	call   c00287f4 <LinkedList<UnixFile>::getFirstElement()>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117a6:	83 ec 0c             	sub    esp,0xc
c00117a9:	68 b8 e5 02 c0       	push   0xc002e5b8
c00117ae:	e8 49 70 01 00       	call   c00287fc <LinkedList<UnixFile>::removeFirst()>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00117ba:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00117be:	74 40                	je     c0011800 <UnixFile::~UnixFile()+0x92>
c00117c0:	83 ec 08             	sub    esp,0x8
c00117c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117c7:	68 b8 e5 02 c0       	push   0xc002e5b8
c00117cc:	e8 4f 6f 01 00       	call   c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117d8:	8d 50 01             	lea    edx,[eax+0x1]
c00117db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00117df:	3d 88 13 00 00       	cmp    eax,0x1388
c00117e4:	0f 94 c0             	sete   al
c00117e7:	84 c0                	test   al,al
c00117e9:	74 a7                	je     c0011792 <UnixFile::~UnixFile()+0x24>
c00117eb:	83 ec 0c             	sub    esp,0xc
c00117ee:	68 0c a5 02 c0       	push   0xc002a50c
c00117f3:	e8 e9 8c 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c00117f8:	83 c4 10             	add    esp,0x10
c00117fb:	eb 95                	jmp    c0011792 <UnixFile::~UnixFile()+0x24>
c00117fd:	90                   	nop
c00117fe:	eb 01                	jmp    c0011801 <UnixFile::~UnixFile()+0x93>
c0011800:	90                   	nop
c0011801:	90                   	nop
c0011802:	83 c4 1c             	add    esp,0x1c
c0011805:	c3                   	ret    

c0011806 <UnixFile::~UnixFile()>:
c0011806:	83 ec 0c             	sub    esp,0xc
c0011809:	83 ec 0c             	sub    esp,0xc
c001180c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011810:	e8 59 ff ff ff       	call   c001176e <UnixFile::~UnixFile()>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	83 ec 08             	sub    esp,0x8
c001181b:	6a 0c                	push   0xc
c001181d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011821:	e8 9d 14 00 00       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0011826:	83 c4 10             	add    esp,0x10
c0011829:	83 c4 0c             	add    esp,0xc
c001182c:	c3                   	ret    
c001182d:	90                   	nop

c001182e <ReservedFilename::~ReservedFilename()>:
c001182e:	83 ec 0c             	sub    esp,0xc
c0011831:	ba 50 a5 02 c0       	mov    edx,0xc002a550
c0011836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001183a:	89 10                	mov    DWORD PTR [eax],edx
c001183c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011840:	83 ec 0c             	sub    esp,0xc
c0011843:	50                   	push   eax
c0011844:	e8 25 ff ff ff       	call   c001176e <UnixFile::~UnixFile()>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	90                   	nop
c001184d:	83 c4 0c             	add    esp,0xc
c0011850:	c3                   	ret    
c0011851:	90                   	nop

c0011852 <ReservedFilename::~ReservedFilename()>:
c0011852:	83 ec 0c             	sub    esp,0xc
c0011855:	83 ec 0c             	sub    esp,0xc
c0011858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001185c:	e8 cd ff ff ff       	call   c001182e <ReservedFilename::~ReservedFilename()>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	83 ec 08             	sub    esp,0x8
c0011867:	6a 0c                	push   0xc
c0011869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001186d:	e8 51 14 00 00       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0011872:	83 c4 10             	add    esp,0x10
c0011875:	83 c4 0c             	add    esp,0xc
c0011878:	c3                   	ret    

c0011879 <getFromFileDescriptor(int)>:
c0011879:	53                   	push   ebx
c001187a:	83 ec 08             	sub    esp,0x8
c001187d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011881:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011887:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001188d:	7f 2c                	jg     c00118bb <getFromFileDescriptor(int)+0x42>
c001188f:	83 ec 0c             	sub    esp,0xc
c0011892:	68 b8 e5 02 c0       	push   0xc002e5b8
c0011897:	e8 58 6f 01 00       	call   c00287f4 <LinkedList<UnixFile>::getFirstElement()>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	85 c0                	test   eax,eax
c00118a1:	75 04                	jne    c00118a7 <getFromFileDescriptor(int)+0x2e>
c00118a3:	31 c0                	xor    eax,eax
c00118a5:	eb 6e                	jmp    c0011915 <getFromFileDescriptor(int)+0x9c>
c00118a7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00118aa:	74 69                	je     c0011915 <getFromFileDescriptor(int)+0x9c>
c00118ac:	52                   	push   edx
c00118ad:	52                   	push   edx
c00118ae:	50                   	push   eax
c00118af:	68 b8 e5 02 c0       	push   0xc002e5b8
c00118b4:	e8 e5 6f 01 00       	call   c002889e <LinkedList<UnixFile>::getNext(UnixFile*)>
c00118b9:	eb e1                	jmp    c001189c <getFromFileDescriptor(int)+0x23>
c00118bb:	a1 ac e5 02 c0       	mov    eax,ds:0xc002e5ac
c00118c0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00118c6:	74 4d                	je     c0011915 <getFromFileDescriptor(int)+0x9c>
c00118c8:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c00118cd:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00118d3:	74 40                	je     c0011915 <getFromFileDescriptor(int)+0x9c>
c00118d5:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c00118da:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00118e0:	74 33                	je     c0011915 <getFromFileDescriptor(int)+0x9c>
c00118e2:	a1 a4 e5 02 c0       	mov    eax,ds:0xc002e5a4
c00118e7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00118ed:	74 26                	je     c0011915 <getFromFileDescriptor(int)+0x9c>
c00118ef:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00118f5:	83 f8 08             	cmp    eax,0x8
c00118f8:	77 09                	ja     c0011903 <getFromFileDescriptor(int)+0x8a>
c00118fa:	8b 04 85 80 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a80]
c0011901:	eb 12                	jmp    c0011915 <getFromFileDescriptor(int)+0x9c>
c0011903:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011909:	83 fb 08             	cmp    ebx,0x8
c001190c:	77 95                	ja     c00118a3 <getFromFileDescriptor(int)+0x2a>
c001190e:	8b 04 9d 40 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1ac0]
c0011915:	83 c4 08             	add    esp,0x8
c0011918:	5b                   	pop    ebx
c0011919:	c3                   	ret    

c001191a <__static_initialization_and_destruction_0(int, int)>:
c001191a:	83 ec 0c             	sub    esp,0xc
c001191d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011922:	75 34                	jne    c0011958 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011924:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001192c:	75 2a                	jne    c0011958 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001192e:	83 ec 0c             	sub    esp,0xc
c0011931:	68 b8 e5 02 c0       	push   0xc002e5b8
c0011936:	e8 8d 6d 01 00       	call   c00286c8 <LinkedList<UnixFile>::LinkedList()>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	83 ec 04             	sub    esp,0x4
c0011941:	68 64 d3 02 c0       	push   0xc002d364
c0011946:	68 b8 e5 02 c0       	push   0xc002e5b8
c001194b:	68 c6 86 02 c0       	push   0xc00286c6
c0011950:	e8 e8 12 00 00       	call   c0012c3d <__cxa_atexit>
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	90                   	nop
c0011959:	83 c4 0c             	add    esp,0xc
c001195c:	c3                   	ret    

c001195d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001195d:	83 ec 0c             	sub    esp,0xc
c0011960:	83 ec 08             	sub    esp,0x8
c0011963:	68 ff ff 00 00       	push   0xffff
c0011968:	6a 01                	push   0x1
c001196a:	e8 ab ff ff ff       	call   c001191a <__static_initialization_and_destruction_0(int, int)>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	83 c4 0c             	add    esp,0xc
c0011975:	c3                   	ret    

c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011976:	53                   	push   ebx
c0011977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001197b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001197f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011985:	89 c8                	mov    eax,ecx
c0011987:	d1 e8                	shr    eax,1
c0011989:	03 05 e8 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3e8
c001198f:	83 e1 01             	and    ecx,0x1
c0011992:	8a 10                	mov    dl,BYTE PTR [eax]
c0011994:	75 09                	jne    c001199f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011996:	83 e2 f0             	and    edx,0xfffffff0
c0011999:	09 da                	or     edx,ebx
c001199b:	88 10                	mov    BYTE PTR [eax],dl
c001199d:	5b                   	pop    ebx
c001199e:	c3                   	ret    
c001199f:	c1 e3 04             	shl    ebx,0x4
c00119a2:	83 e2 0f             	and    edx,0xf
c00119a5:	09 da                	or     edx,ebx
c00119a7:	88 10                	mov    BYTE PTR [eax],dl
c00119a9:	5b                   	pop    ebx
c00119aa:	c3                   	ret    

c00119ab <Virt::getPageState(unsigned long)>:
c00119ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119af:	8b 0d e8 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3e8
c00119b5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00119bb:	89 d0                	mov    eax,edx
c00119bd:	d1 e8                	shr    eax,1
c00119bf:	83 e2 01             	and    edx,0x1
c00119c2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00119c5:	75 04                	jne    c00119cb <Virt::getPageState(unsigned long)+0x20>
c00119c7:	83 e0 0f             	and    eax,0xf
c00119ca:	c3                   	ret    
c00119cb:	c0 e8 04             	shr    al,0x4
c00119ce:	c3                   	ret    

c00119cf <Virt::allocateKernelVirtualPages(int)>:
c00119cf:	55                   	push   ebp
c00119d0:	31 ed                	xor    ebp,ebp
c00119d2:	57                   	push   edi
c00119d3:	56                   	push   esi
c00119d4:	53                   	push   ebx
c00119d5:	31 db                	xor    ebx,ebx
c00119d7:	83 ec 1c             	sub    esp,0x1c
c00119da:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119de:	8b 3d e4 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3e4
c00119e4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00119e9:	57                   	push   edi
c00119ea:	e8 bc ff ff ff       	call   c00119ab <Virt::getPageState(unsigned long)>
c00119ef:	5a                   	pop    edx
c00119f0:	84 c0                	test   al,al
c00119f2:	75 3a                	jne    c0011a2e <Virt::allocateKernelVirtualPages(int)+0x5f>
c00119f4:	85 db                	test   ebx,ebx
c00119f6:	75 02                	jne    c00119fa <Virt::allocateKernelVirtualPages(int)+0x2b>
c00119f8:	89 fd                	mov    ebp,edi
c00119fa:	43                   	inc    ebx
c00119fb:	39 f3                	cmp    ebx,esi
c00119fd:	74 5a                	je     c0011a59 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00119ff:	47                   	inc    edi
c0011a00:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a06:	76 31                	jbe    c0011a39 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a08:	c7 05 e4 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d3e4,0xc8000
c0011a12:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a17:	75 28                	jne    c0011a41 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a19:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a1e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a23:	57                   	push   edi
c0011a24:	e8 82 ff ff ff       	call   c00119ab <Virt::getPageState(unsigned long)>
c0011a29:	5a                   	pop    edx
c0011a2a:	84 c0                	test   al,al
c0011a2c:	74 c6                	je     c00119f4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a2e:	31 db                	xor    ebx,ebx
c0011a30:	47                   	inc    edi
c0011a31:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a37:	77 cf                	ja     c0011a08 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011a39:	89 3d e4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3e4,edi
c0011a3f:	eb a8                	jmp    c00119e9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a41:	83 ec 0c             	sub    esp,0xc
c0011a44:	68 64 a5 02 c0       	push   0xc002a564
c0011a49:	e8 93 8a 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0011a4e:	8b 3d e4 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3e4
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	eb 90                	jmp    c00119e9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a59:	89 2d e4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3e4,ebp
c0011a5f:	4b                   	dec    ebx
c0011a60:	74 5f                	je     c0011ac1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011a62:	85 f6                	test   esi,esi
c0011a64:	74 3d                	je     c0011aa3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a66:	89 e8                	mov    eax,ebp
c0011a68:	31 db                	xor    ebx,ebx
c0011a6a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011a6d:	eb 14                	jmp    c0011a83 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011a6f:	6a 01                	push   0x1
c0011a71:	43                   	inc    ebx
c0011a72:	50                   	push   eax
c0011a73:	e8 fe fe ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a78:	58                   	pop    eax
c0011a79:	39 f3                	cmp    ebx,esi
c0011a7b:	5a                   	pop    edx
c0011a7c:	74 25                	je     c0011aa3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a7e:	a1 e4 d3 02 c0       	mov    eax,ds:0xc002d3e4
c0011a83:	8d 50 01             	lea    edx,[eax+0x1]
c0011a86:	85 db                	test   ebx,ebx
c0011a88:	89 15 e4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3e4,edx
c0011a8e:	74 20                	je     c0011ab0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011a90:	39 df                	cmp    edi,ebx
c0011a92:	75 db                	jne    c0011a6f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011a94:	6a 03                	push   0x3
c0011a96:	43                   	inc    ebx
c0011a97:	50                   	push   eax
c0011a98:	e8 d9 fe ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a9d:	59                   	pop    ecx
c0011a9e:	39 f3                	cmp    ebx,esi
c0011aa0:	58                   	pop    eax
c0011aa1:	75 db                	jne    c0011a7e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011aa3:	83 c4 1c             	add    esp,0x1c
c0011aa6:	89 e8                	mov    eax,ebp
c0011aa8:	5b                   	pop    ebx
c0011aa9:	c1 e0 0c             	shl    eax,0xc
c0011aac:	5e                   	pop    esi
c0011aad:	5f                   	pop    edi
c0011aae:	5d                   	pop    ebp
c0011aaf:	c3                   	ret    
c0011ab0:	6a 02                	push   0x2
c0011ab2:	bb 01 00 00 00       	mov    ebx,0x1
c0011ab7:	50                   	push   eax
c0011ab8:	e8 b9 fe ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011abd:	58                   	pop    eax
c0011abe:	5a                   	pop    edx
c0011abf:	eb bd                	jmp    c0011a7e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ac1:	6a 04                	push   0x4
c0011ac3:	8d 45 01             	lea    eax,[ebp+0x1]
c0011ac6:	55                   	push   ebp
c0011ac7:	a3 e4 d3 02 c0       	mov    ds:0xc002d3e4,eax
c0011acc:	e8 a5 fe ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ad1:	59                   	pop    ecx
c0011ad2:	89 e8                	mov    eax,ebp
c0011ad4:	5b                   	pop    ebx
c0011ad5:	c1 e0 0c             	shl    eax,0xc
c0011ad8:	83 c4 1c             	add    esp,0x1c
c0011adb:	5b                   	pop    ebx
c0011adc:	5e                   	pop    esi
c0011add:	5f                   	pop    edi
c0011ade:	5d                   	pop    ebp
c0011adf:	c3                   	ret    

c0011ae0 <Virt::freeSwapfilePage(unsigned long)>:
c0011ae0:	53                   	push   ebx
c0011ae1:	8b 15 cc e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5cc
c0011ae7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011aeb:	b8 01 00 00 00       	mov    eax,0x1
c0011af0:	89 cb                	mov    ebx,ecx
c0011af2:	d3 e0                	shl    eax,cl
c0011af4:	c1 eb 05             	shr    ebx,0x5
c0011af7:	f7 d0                	not    eax
c0011af9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011afc:	5b                   	pop    ebx
c0011afd:	c3                   	ret    

c0011afe <Virt::swapIDToSector(unsigned long)>:
c0011afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b02:	0f af 05 ec d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d3ec
c0011b09:	03 05 f4 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3f4
c0011b0f:	c3                   	ret    

c0011b10 <Virt::allocateSwapfilePage()>:
c0011b10:	55                   	push   ebp
c0011b11:	31 d2                	xor    edx,edx
c0011b13:	57                   	push   edi
c0011b14:	56                   	push   esi
c0011b15:	53                   	push   ebx
c0011b16:	83 ec 0c             	sub    esp,0xc
c0011b19:	8b 0d ec d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3ec
c0011b1f:	a1 f0 d3 02 c0       	mov    eax,ds:0xc002d3f0
c0011b24:	f7 f1                	div    ecx
c0011b26:	39 0d f0 d3 02 c0    	cmp    DWORD PTR ds:0xc002d3f0,ecx
c0011b2c:	72 2d                	jb     c0011b5b <Virt::allocateSwapfilePage()+0x4b>
c0011b2e:	8b 35 cc e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5cc
c0011b34:	8b 16                	mov    edx,DWORD PTR [esi]
c0011b36:	f6 c2 01             	test   dl,0x1
c0011b39:	74 3c                	je     c0011b77 <Virt::allocateSwapfilePage()+0x67>
c0011b3b:	31 c9                	xor    ecx,ecx
c0011b3d:	bf 01 00 00 00       	mov    edi,0x1
c0011b42:	eb 12                	jmp    c0011b56 <Virt::allocateSwapfilePage()+0x46>
c0011b44:	89 fd                	mov    ebp,edi
c0011b46:	89 ca                	mov    edx,ecx
c0011b48:	d3 e5                	shl    ebp,cl
c0011b4a:	c1 ea 05             	shr    edx,0x5
c0011b4d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011b50:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011b52:	85 ea                	test   edx,ebp
c0011b54:	74 2a                	je     c0011b80 <Virt::allocateSwapfilePage()+0x70>
c0011b56:	41                   	inc    ecx
c0011b57:	39 c8                	cmp    eax,ecx
c0011b59:	77 e9                	ja     c0011b44 <Virt::allocateSwapfilePage()+0x34>
c0011b5b:	83 ec 0c             	sub    esp,0xc
c0011b5e:	68 eb a6 02 c0       	push   0xc002a6eb
c0011b63:	e8 79 89 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	31 c9                	xor    ecx,ecx
c0011b6d:	83 c4 0c             	add    esp,0xc
c0011b70:	89 c8                	mov    eax,ecx
c0011b72:	5b                   	pop    ebx
c0011b73:	5e                   	pop    esi
c0011b74:	5f                   	pop    edi
c0011b75:	5d                   	pop    ebp
c0011b76:	c3                   	ret    
c0011b77:	89 f3                	mov    ebx,esi
c0011b79:	bd 01 00 00 00       	mov    ebp,0x1
c0011b7e:	31 c9                	xor    ecx,ecx
c0011b80:	09 ea                	or     edx,ebp
c0011b82:	89 c8                	mov    eax,ecx
c0011b84:	89 13                	mov    DWORD PTR [ebx],edx
c0011b86:	83 c4 0c             	add    esp,0xc
c0011b89:	5b                   	pop    ebx
c0011b8a:	5e                   	pop    esi
c0011b8b:	5f                   	pop    edi
c0011b8c:	5d                   	pop    ebp
c0011b8d:	c3                   	ret    

c0011b8e <Virt::virtualMemorySetup()>:
c0011b8e:	53                   	push   ebx
c0011b8f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011b94:	83 ec 08             	sub    esp,0x8
c0011b97:	6a 0f                	push   0xf
c0011b99:	53                   	push   ebx
c0011b9a:	43                   	inc    ebx
c0011b9b:	e8 d6 fd ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ba0:	59                   	pop    ecx
c0011ba1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011ba7:	58                   	pop    eax
c0011ba8:	75 ed                	jne    c0011b97 <Virt::virtualMemorySetup()+0x9>
c0011baa:	83 ec 08             	sub    esp,0x8
c0011bad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bb2:	68 00 00 00 c8       	push   0xc8000000
c0011bb7:	68 02 a7 02 c0       	push   0xc002a702
c0011bbc:	e8 e2 11 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0011bc1:	58                   	pop    eax
c0011bc2:	5a                   	pop    edx
c0011bc3:	68 00 f0 ff ef       	push   0xeffff000
c0011bc8:	68 16 a7 02 c0       	push   0xc002a716
c0011bcd:	e8 d1 11 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0011bd2:	83 c4 10             	add    esp,0x10
c0011bd5:	83 ec 08             	sub    esp,0x8
c0011bd8:	6a 00                	push   0x0
c0011bda:	53                   	push   ebx
c0011bdb:	43                   	inc    ebx
c0011bdc:	e8 95 fd ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be1:	83 c4 10             	add    esp,0x10
c0011be4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011bea:	75 e9                	jne    c0011bd5 <Virt::virtualMemorySetup()+0x47>
c0011bec:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011bf1:	83 ec 08             	sub    esp,0x8
c0011bf4:	6a 0f                	push   0xf
c0011bf6:	53                   	push   ebx
c0011bf7:	43                   	inc    ebx
c0011bf8:	e8 79 fd ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bfd:	83 c4 10             	add    esp,0x10
c0011c00:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c06:	75 e9                	jne    c0011bf1 <Virt::virtualMemorySetup()+0x63>
c0011c08:	83 c4 08             	add    esp,0x8
c0011c0b:	5b                   	pop    ebx
c0011c0c:	c3                   	ret    

c0011c0d <Virt::swappingSetup()>:
c0011c0d:	c3                   	ret    

c0011c0e <Virt::getAKernelVAS()>:
c0011c0e:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c0011c13:	c3                   	ret    

c0011c14 <Virt::setupPageSwapping(int)>:
c0011c14:	57                   	push   edi
c0011c15:	56                   	push   esi
c0011c16:	53                   	push   ebx
c0011c17:	83 ec 1c             	sub    esp,0x1c
c0011c1a:	68 2a a7 02 c0       	push   0xc002a72a
c0011c1f:	e8 7f 11 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0011c24:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c2b:	e8 1b dc ff ff       	call   c000f84b <malloc>
c0011c30:	83 c4 0c             	add    esp,0xc
c0011c33:	89 c6                	mov    esi,eax
c0011c35:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c0011c3b:	68 3e a7 02 c0       	push   0xc002a73e
c0011c40:	50                   	push   eax
c0011c41:	e8 bc 16 00 00       	call   c0013302 <File::File(char const*, Process*)>
c0011c46:	89 34 24             	mov    DWORD PTR [esp],esi
c0011c49:	e8 90 18 00 00       	call   c00134de <File::unlink()>
c0011c4e:	59                   	pop    ecx
c0011c4f:	5b                   	pop    ebx
c0011c50:	6a 12                	push   0x12
c0011c52:	56                   	push   esi
c0011c53:	e8 0e 17 00 00       	call   c0013366 <File::open(FileOpenMode)>
c0011c58:	83 c4 10             	add    esp,0x10
c0011c5b:	85 c0                	test   eax,eax
c0011c5d:	0f 85 5b 01 00 00    	jne    c0011dbe <Virt::setupPageSwapping(int)+0x1aa>
c0011c63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c6f:	c1 e3 08             	shl    ebx,0x8
c0011c72:	83 ec 0c             	sub    esp,0xc
c0011c75:	68 00 00 01 00       	push   0x10000
c0011c7a:	e8 cc db ff ff       	call   c000f84b <malloc>
c0011c7f:	83 c4 0c             	add    esp,0xc
c0011c82:	89 c7                	mov    edi,eax
c0011c84:	68 00 00 01 00       	push   0x10000
c0011c89:	68 ee 00 00 00       	push   0xee
c0011c8e:	50                   	push   eax
c0011c8f:	e8 ec ea fe ff       	call   c0000780 <memset>
c0011c94:	83 c4 10             	add    esp,0x10
c0011c97:	85 db                	test   ebx,ebx
c0011c99:	79 03                	jns    c0011c9e <Virt::setupPageSwapping(int)+0x8a>
c0011c9b:	83 c3 0f             	add    ebx,0xf
c0011c9e:	c1 fb 04             	sar    ebx,0x4
c0011ca1:	4b                   	dec    ebx
c0011ca2:	83 fb ff             	cmp    ebx,0xffffffff
c0011ca5:	74 4f                	je     c0011cf6 <Virt::setupPageSwapping(int)+0xe2>
c0011ca7:	83 ec 0c             	sub    esp,0xc
c0011caa:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cac:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011cb0:	52                   	push   edx
c0011cb1:	57                   	push   edi
c0011cb2:	6a 00                	push   0x0
c0011cb4:	68 00 00 01 00       	push   0x10000
c0011cb9:	56                   	push   esi
c0011cba:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011cbd:	83 c4 20             	add    esp,0x20
c0011cc0:	85 c0                	test   eax,eax
c0011cc2:	0f 85 e0 00 00 00    	jne    c0011da8 <Virt::setupPageSwapping(int)+0x194>
c0011cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ccc:	3d 00 00 01 00       	cmp    eax,0x10000
c0011cd1:	74 ce                	je     c0011ca1 <Virt::setupPageSwapping(int)+0x8d>
c0011cd3:	83 ec 08             	sub    esp,0x8
c0011cd6:	4b                   	dec    ebx
c0011cd7:	50                   	push   eax
c0011cd8:	68 91 a7 02 c0       	push   0xc002a791
c0011cdd:	e8 c1 10 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0011ce2:	c7 04 24 9a a7 02 c0 	mov    DWORD PTR [esp],0xc002a79a
c0011ce9:	e8 f3 87 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0011cee:	83 c4 10             	add    esp,0x10
c0011cf1:	83 fb ff             	cmp    ebx,0xffffffff
c0011cf4:	75 b1                	jne    c0011ca7 <Virt::setupPageSwapping(int)+0x93>
c0011cf6:	83 ec 0c             	sub    esp,0xc
c0011cf9:	56                   	push   esi
c0011cfa:	e8 c5 16 00 00       	call   c00133c4 <File::close()>
c0011cff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d02:	e8 64 db ff ff       	call   c000f86b <rfree>
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	85 f6                	test   esi,esi
c0011d0c:	74 0c                	je     c0011d1a <Virt::setupPageSwapping(int)+0x106>
c0011d0e:	83 ec 0c             	sub    esp,0xc
c0011d11:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d13:	56                   	push   esi
c0011d14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d17:	83 c4 10             	add    esp,0x10
c0011d1a:	83 ec 08             	sub    esp,0x8
c0011d1d:	a1 68 ea 02 c0       	mov    eax,ds:0xc002ea68
c0011d22:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d28:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d2a:	68 3e a7 02 c0       	push   0xc002a73e
c0011d2f:	50                   	push   eax
c0011d30:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d37:	c6 05 f8 d3 02 c0 43 	mov    BYTE PTR ds:0xc002d3f8,0x43
c0011d3e:	c1 e2 0b             	shl    edx,0xb
c0011d41:	a3 f4 d3 02 c0       	mov    ds:0xc002d3f4,eax
c0011d46:	89 15 f0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3f0,edx
c0011d4c:	c7 05 ec d3 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d3ec,0x8
c0011d56:	c1 ea 08             	shr    edx,0x8
c0011d59:	89 14 24             	mov    DWORD PTR [esp],edx
c0011d5c:	e8 ea da ff ff       	call   c000f84b <malloc>
c0011d61:	83 c4 0c             	add    esp,0xc
c0011d64:	89 c1                	mov    ecx,eax
c0011d66:	a3 cc e5 02 c0       	mov    ds:0xc002e5cc,eax
c0011d6b:	31 d2                	xor    edx,edx
c0011d6d:	a1 f0 d3 02 c0       	mov    eax,ds:0xc002d3f0
c0011d72:	f7 35 ec d3 02 c0    	div    DWORD PTR ds:0xc002d3ec
c0011d78:	c1 e8 05             	shr    eax,0x5
c0011d7b:	50                   	push   eax
c0011d7c:	6a 00                	push   0x0
c0011d7e:	51                   	push   ecx
c0011d7f:	e8 fc e9 fe ff       	call   c0000780 <memset>
c0011d84:	58                   	pop    eax
c0011d85:	a1 f0 d3 02 c0       	mov    eax,ds:0xc002d3f0
c0011d8a:	5a                   	pop    edx
c0011d8b:	31 d2                	xor    edx,edx
c0011d8d:	f7 35 ec d3 02 c0    	div    DWORD PTR ds:0xc002d3ec
c0011d93:	c1 e8 05             	shr    eax,0x5
c0011d96:	50                   	push   eax
c0011d97:	68 a0 a7 02 c0       	push   0xc002a7a0
c0011d9c:	e8 02 10 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0011da1:	83 c4 20             	add    esp,0x20
c0011da4:	5b                   	pop    ebx
c0011da5:	5e                   	pop    esi
c0011da6:	5f                   	pop    edi
c0011da7:	c3                   	ret    
c0011da8:	83 ec 08             	sub    esp,0x8
c0011dab:	50                   	push   eax
c0011dac:	68 79 a7 02 c0       	push   0xc002a779
c0011db1:	e8 ed 0f 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0011db6:	83 c4 10             	add    esp,0x10
c0011db9:	e9 0a ff ff ff       	jmp    c0011cc8 <Virt::setupPageSwapping(int)+0xb4>
c0011dbe:	83 ec 08             	sub    esp,0x8
c0011dc1:	50                   	push   eax
c0011dc2:	68 55 a7 02 c0       	push   0xc002a755
c0011dc7:	e8 d7 0f 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0011dcc:	c7 04 24 5e a7 02 c0 	mov    DWORD PTR [esp],0xc002a75e
c0011dd3:	e8 09 87 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0011dd8:	83 c4 10             	add    esp,0x10
c0011ddb:	e9 83 fe ff ff       	jmp    c0011c63 <Virt::setupPageSwapping(int)+0x4f>

c0011de0 <VAS::VAS()>:
c0011de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011deb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011def:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfa:	a3 d0 e5 02 c0       	mov    ds:0xc002e5d0,eax
c0011dff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e03:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e12:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e19:	90                   	nop
c0011e1a:	c3                   	ret    
c0011e1b:	90                   	nop

c0011e1c <VAS::VAS(VAS*)>:
c0011e1c:	83 ec 0c             	sub    esp,0xc
c0011e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e35:	83 ec 0c             	sub    esp,0xc
c0011e38:	68 84 a5 02 c0       	push   0xc002a584
c0011e3d:	e8 9f 86 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0011e42:	83 c4 10             	add    esp,0x10
c0011e45:	90                   	nop
c0011e46:	83 c4 0c             	add    esp,0xc
c0011e49:	c3                   	ret    

c0011e4a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e4e:	89 c2                	mov    edx,eax
c0011e50:	c1 e8 0a             	shr    eax,0xa
c0011e53:	c1 ea 16             	shr    edx,0x16
c0011e56:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e5b:	19 c9                	sbb    ecx,ecx
c0011e5d:	c1 e2 0c             	shl    edx,0xc
c0011e60:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e66:	25 fc 0f 00 00       	and    eax,0xffc
c0011e6b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e72:	01 d0                	add    eax,edx
c0011e74:	c3                   	ret    
c0011e75:	90                   	nop

c0011e76 <VAS::getPageTableEntry(unsigned long)>:
c0011e76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e7a:	89 ca                	mov    edx,ecx
c0011e7c:	c1 e9 0a             	shr    ecx,0xa
c0011e7f:	c1 ea 16             	shr    edx,0x16
c0011e82:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e88:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e8e:	c1 e0 0c             	shl    eax,0xc
c0011e91:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e94:	c3                   	ret    

c0011e95 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e95:	57                   	push   edi
c0011e96:	56                   	push   esi
c0011e97:	be 01 00 00 00       	mov    esi,0x1
c0011e9c:	53                   	push   ebx
c0011e9d:	83 ec 10             	sub    esp,0x10
c0011ea0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ea4:	c1 eb 0c             	shr    ebx,0xc
c0011ea7:	eb 3f                	jmp    c0011ee8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011ea9:	e8 60 fd ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c0011eae:	83 ec 08             	sub    esp,0x8
c0011eb1:	57                   	push   edi
c0011eb2:	50                   	push   eax
c0011eb3:	e8 be ff ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c0011eb8:	83 c4 10             	add    esp,0x10
c0011ebb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ec1:	f6 c4 04             	test   ah,0x4
c0011ec4:	75 5f                	jne    c0011f25 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ec6:	80 fa 04             	cmp    dl,0x4
c0011ec9:	74 78                	je     c0011f43 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ecb:	80 fa 02             	cmp    dl,0x2
c0011ece:	0f 84 88 00 00 00    	je     c0011f5c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ed4:	80 fa 03             	cmp    dl,0x3
c0011ed7:	0f 84 ad 00 00 00    	je     c0011f8a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011edd:	fe ca                	dec    dl
c0011edf:	0f 84 92 00 00 00    	je     c0011f77 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ee5:	43                   	inc    ebx
c0011ee6:	31 f6                	xor    esi,esi
c0011ee8:	53                   	push   ebx
c0011ee9:	e8 bd fa ff ff       	call   c00119ab <Virt::getPageState(unsigned long)>
c0011eee:	5f                   	pop    edi
c0011eef:	89 df                	mov    edi,ebx
c0011ef1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ef5:	c1 e7 0c             	shl    edi,0xc
c0011ef8:	84 c0                	test   al,al
c0011efa:	75 ad                	jne    c0011ea9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	68 bb a7 02 c0       	push   0xc002a7bb
c0011f04:	e8 d8 85 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0011f09:	e8 00 fd ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c0011f0e:	5a                   	pop    edx
c0011f0f:	59                   	pop    ecx
c0011f10:	57                   	push   edi
c0011f11:	50                   	push   eax
c0011f12:	e8 5f ff ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c0011f17:	83 c4 10             	add    esp,0x10
c0011f1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f1c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f20:	f6 c4 04             	test   ah,0x4
c0011f23:	74 c0                	je     c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f25:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f2e:	83 ec 0c             	sub    esp,0xc
c0011f31:	50                   	push   eax
c0011f32:	e8 f6 de ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f3e:	80 fa 04             	cmp    dl,0x4
c0011f41:	75 88                	jne    c0011ecb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f43:	89 f0                	mov    eax,esi
c0011f45:	84 c0                	test   al,al
c0011f47:	75 47                	jne    c0011f90 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f49:	c7 44 24 20 a8 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5a8
c0011f51:	83 c4 10             	add    esp,0x10
c0011f54:	5b                   	pop    ebx
c0011f55:	5e                   	pop    esi
c0011f56:	5f                   	pop    edi
c0011f57:	e9 85 85 00 00       	jmp    c001a4e1 <Krnl::panic(char const*)>
c0011f5c:	89 f0                	mov    eax,esi
c0011f5e:	84 c0                	test   al,al
c0011f60:	75 15                	jne    c0011f77 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f62:	83 ec 0c             	sub    esp,0xc
c0011f65:	68 d7 a7 02 c0       	push   0xc002a7d7
c0011f6a:	e8 72 85 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0011f6f:	83 c4 10             	add    esp,0x10
c0011f72:	e9 6e ff ff ff       	jmp    c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f77:	83 ec 08             	sub    esp,0x8
c0011f7a:	6a 00                	push   0x0
c0011f7c:	53                   	push   ebx
c0011f7d:	e8 f4 f9 ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f82:	83 c4 10             	add    esp,0x10
c0011f85:	e9 5b ff ff ff       	jmp    c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f8a:	89 f0                	mov    eax,esi
c0011f8c:	84 c0                	test   al,al
c0011f8e:	75 15                	jne    c0011fa5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f90:	83 ec 08             	sub    esp,0x8
c0011f93:	6a 00                	push   0x0
c0011f95:	53                   	push   ebx
c0011f96:	e8 db f9 ff ff       	call   c0011976 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f9b:	83 c4 10             	add    esp,0x10
c0011f9e:	83 c4 10             	add    esp,0x10
c0011fa1:	5b                   	pop    ebx
c0011fa2:	5e                   	pop    esi
c0011fa3:	5f                   	pop    edi
c0011fa4:	c3                   	ret    
c0011fa5:	c7 44 24 20 f3 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7f3
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	5b                   	pop    ebx
c0011fb1:	5e                   	pop    esi
c0011fb2:	5f                   	pop    edi
c0011fb3:	e9 29 85 00 00       	jmp    c001a4e1 <Krnl::panic(char const*)>

c0011fb8 <VAS::freeAllocatedPages(unsigned long)>:
c0011fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fc0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fc4:	74 09                	je     c0011fcf <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fca:	e9 c6 fe ff ff       	jmp    c0011e95 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fcf:	c7 44 24 04 cc a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5cc
c0011fd7:	e9 c7 0d 00 00       	jmp    c0012da3 <Dbg::kprintf(char const*, ...)>

c0011fdc <VAS::virtualToPhysical(unsigned long)>:
c0011fdc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fe0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fe4:	e8 8d fe ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c0011fe9:	5a                   	pop    edx
c0011fea:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fec:	59                   	pop    ecx
c0011fed:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ff2:	c3                   	ret    
c0011ff3:	90                   	nop

c0011ff4 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011ff4:	55                   	push   ebp
c0011ff5:	57                   	push   edi
c0011ff6:	56                   	push   esi
c0011ff7:	53                   	push   ebx
c0011ff8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011ffc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012000:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012004:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012008:	85 db                	test   ebx,ebx
c001200a:	7e 22                	jle    c001202e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001200c:	c1 e3 0c             	shl    ebx,0xc
c001200f:	01 f3                	add    ebx,esi
c0012011:	56                   	push   esi
c0012012:	81 c6 00 10 00 00    	add    esi,0x1000
c0012018:	55                   	push   ebp
c0012019:	e8 58 fe ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c001201e:	5a                   	pop    edx
c001201f:	59                   	pop    ecx
c0012020:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012022:	21 f9                	and    ecx,edi
c0012024:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012028:	39 f3                	cmp    ebx,esi
c001202a:	89 08                	mov    DWORD PTR [eax],ecx
c001202c:	75 e3                	jne    c0012011 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001202e:	5b                   	pop    ebx
c001202f:	5e                   	pop    esi
c0012030:	5f                   	pop    edi
c0012031:	5d                   	pop    ebp
c0012032:	c3                   	ret    
c0012033:	90                   	nop

c0012034 <VAS::setToWriteCombining(unsigned long, int)>:
c0012034:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0012039:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001203f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012046:	75 01                	jne    c0012049 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012048:	c3                   	ret    
c0012049:	68 80 00 00 00       	push   0x80
c001204e:	6a ff                	push   0xffffffff
c0012050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001205c:	e8 93 ff ff ff       	call   c0011ff4 <VAS::reflagRange(unsigned long, int, int, int)>
c0012061:	83 c4 14             	add    esp,0x14
c0012064:	c3                   	ret    
c0012065:	90                   	nop

c0012066 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012066:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001206b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001206f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012076:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012079:	19 c0                	sbb    eax,eax
c001207b:	83 ca 03             	or     edx,0x3
c001207e:	83 e0 fc             	and    eax,0xfffffffc
c0012081:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012088:	0f 20 d8             	mov    eax,cr3
c001208b:	0f 22 d8             	mov    cr3,eax
c001208e:	c3                   	ret    
c001208f:	90                   	nop

c0012090 <VAS::~VAS()>:
c0012090:	83 ec 2c             	sub    esp,0x2c
c0012093:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001209b:	e8 1c bc 00 00       	call   c001dcbc <lockScheduler()>
c00120a0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00120a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120aa:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120b0:	83 ec 04             	sub    esp,0x4
c00120b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120b7:	6a 01                	push   0x1
c00120b9:	50                   	push   eax
c00120ba:	e8 a7 ff ff ff       	call   c0012066 <VAS::mapOtherVASIn(bool, VAS*)>
c00120bf:	83 c4 10             	add    esp,0x10
c00120c2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120ca:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120d2:	0f 8f d7 00 00 00    	jg     c00121af <VAS::~VAS()+0x11f>
c00120d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120e3:	c1 e2 02             	shl    edx,0x2
c00120e6:	01 d0                	add    eax,edx
c00120e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f2:	83 e0 01             	and    eax,0x1
c00120f5:	0f 84 ab 00 00 00    	je     c00121a6 <VAS::~VAS()+0x116>
c00120fb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012103:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001210b:	7f 75                	jg     c0012182 <VAS::~VAS()+0xf2>
c001210d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012111:	c1 e0 0a             	shl    eax,0xa
c0012114:	89 c2                	mov    edx,eax
c0012116:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001211a:	01 d0                	add    eax,edx
c001211c:	c1 e0 0c             	shl    eax,0xc
c001211f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012123:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012128:	8b 00                	mov    eax,DWORD PTR [eax]
c001212a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001212d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012133:	83 ec 04             	sub    esp,0x4
c0012136:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001213a:	6a 01                	push   0x1
c001213c:	50                   	push   eax
c001213d:	e8 08 fd ff ff       	call   c0011e4a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001214d:	8b 00                	mov    eax,DWORD PTR [eax]
c001214f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012157:	25 01 04 00 00       	and    eax,0x401
c001215c:	3d 01 04 00 00       	cmp    eax,0x401
c0012161:	75 19                	jne    c001217c <VAS::~VAS()+0xec>
c0012163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012167:	25 00 f0 ff ff       	and    eax,0xfffff000
c001216c:	83 ec 0c             	sub    esp,0xc
c001216f:	50                   	push   eax
c0012170:	e8 b8 dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001217c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012180:	eb 81                	jmp    c0012103 <VAS::~VAS()+0x73>
c0012182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012186:	25 00 04 00 00       	and    eax,0x400
c001218b:	74 19                	je     c00121a6 <VAS::~VAS()+0x116>
c001218d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012191:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012196:	83 ec 0c             	sub    esp,0xc
c0012199:	50                   	push   eax
c001219a:	e8 8e dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121a6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121aa:	e9 1b ff ff ff       	jmp    c00120ca <VAS::~VAS()+0x3a>
c00121af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121b6:	83 ec 0c             	sub    esp,0xc
c00121b9:	50                   	push   eax
c00121ba:	e8 d6 fc ff ff       	call   c0011e95 <Virt::freeKernelVirtualPages(unsigned long)>
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121c9:	83 ec 0c             	sub    esp,0xc
c00121cc:	50                   	push   eax
c00121cd:	e8 5b dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c00121d2:	83 c4 10             	add    esp,0x10
c00121d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121dd:	c1 e0 02             	shl    eax,0x2
c00121e0:	83 ec 08             	sub    esp,0x8
c00121e3:	50                   	push   eax
c00121e4:	68 f0 a5 02 c0       	push   0xc002a5f0
c00121e9:	e8 b5 0b 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00121ee:	83 c4 10             	add    esp,0x10
c00121f1:	e8 c8 ba 00 00       	call   c001dcbe <unlockScheduler()>
c00121f6:	90                   	nop
c00121f7:	83 c4 2c             	add    esp,0x2c
c00121fa:	c3                   	ret    
c00121fb:	90                   	nop

c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00121fc:	55                   	push   ebp
c00121fd:	57                   	push   edi
c00121fe:	56                   	push   esi
c00121ff:	53                   	push   ebx
c0012200:	83 ec 1c             	sub    esp,0x1c
c0012203:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012207:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001220b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012211:	77 08                	ja     c001221b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012213:	0f 20 d8             	mov    eax,cr3
c0012216:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012219:	75 47                	jne    c0012262 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001221b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001221f:	09 d8                	or     eax,ebx
c0012221:	a9 ff 0f 00 00       	test   eax,0xfff
c0012226:	75 57                	jne    c001227f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012228:	89 de                	mov    esi,ebx
c001222a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001222d:	c1 ee 16             	shr    esi,0x16
c0012230:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012237:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001223b:	74 54                	je     c0012291 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001223d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012241:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012247:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001224b:	c1 e6 0c             	shl    esi,0xc
c001224e:	c1 eb 0a             	shr    ebx,0xa
c0012251:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012257:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001225a:	83 c4 1c             	add    esp,0x1c
c001225d:	5b                   	pop    ebx
c001225e:	5e                   	pop    esi
c001225f:	5f                   	pop    edi
c0012260:	5d                   	pop    ebp
c0012261:	c3                   	ret    
c0012262:	83 ec 0c             	sub    esp,0xc
c0012265:	68 10 a6 02 c0       	push   0xc002a610
c001226a:	e8 34 0b 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001226f:	83 c4 10             	add    esp,0x10
c0012272:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012276:	09 d8                	or     eax,ebx
c0012278:	a9 ff 0f 00 00       	test   eax,0xfff
c001227d:	74 a9                	je     c0012228 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001227f:	83 ec 0c             	sub    esp,0xc
c0012282:	68 78 a6 02 c0       	push   0xc002a678
c0012287:	e8 55 82 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	eb 97                	jmp    c0012228 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012291:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012295:	e8 1d dc ff ff       	call   c000feb7 <Phys::allocatePage()>
c001229a:	89 c5                	mov    ebp,eax
c001229c:	e8 6d f9 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c00122a1:	83 ec 0c             	sub    esp,0xc
c00122a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122a8:	6a 01                	push   0x1
c00122aa:	e8 20 f7 ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c00122af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122b6:	6a 01                	push   0x1
c00122b8:	50                   	push   eax
c00122b9:	55                   	push   ebp
c00122ba:	81 cd 07 04 00 00    	or     ebp,0x407
c00122c0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122c4:	51                   	push   ecx
c00122c5:	e8 26 02 00 00       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ca:	83 c4 1c             	add    esp,0x1c
c00122cd:	68 00 10 00 00       	push   0x1000
c00122d2:	6a 00                	push   0x0
c00122d4:	50                   	push   eax
c00122d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122d9:	e8 a2 e4 fe ff       	call   c0000780 <memset>
c00122de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122e2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122e5:	e8 ab fb ff ff       	call   c0011e95 <Virt::freeKernelVirtualPages(unsigned long)>
c00122ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122f1:	83 c4 10             	add    esp,0x10
c00122f4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122f7:	e9 41 ff ff ff       	jmp    c001223d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00122fc <VAS::allocatePages(int, int)>:
c00122fc:	55                   	push   ebp
c00122fd:	57                   	push   edi
c00122fe:	56                   	push   esi
c00122ff:	53                   	push   ebx
c0012300:	83 ec 1c             	sub    esp,0x1c
c0012303:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012307:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001230c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012312:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012318:	83 e0 01             	and    eax,0x1
c001231b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001231f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012323:	0f 85 cc 00 00 00    	jne    c00123f5 <VAS::allocatePages(int, int)+0xf9>
c0012329:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001232c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012330:	85 c0                	test   eax,eax
c0012332:	0f 84 a1 00 00 00    	je     c00123d9 <VAS::allocatePages(int, int)+0xdd>
c0012338:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001233c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012340:	c1 e6 0c             	shl    esi,0xc
c0012343:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012347:	85 c0                	test   eax,eax
c0012349:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001234c:	7e 33                	jle    c0012381 <VAS::allocatePages(int, int)+0x85>
c001234e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012352:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012356:	81 cd 00 04 00 00    	or     ebp,0x400
c001235c:	e8 56 db ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012361:	55                   	push   ebp
c0012362:	53                   	push   ebx
c0012363:	50                   	push   eax
c0012364:	57                   	push   edi
c0012365:	e8 92 fe ff ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c001236a:	83 c4 10             	add    esp,0x10
c001236d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012372:	74 03                	je     c0012377 <VAS::allocatePages(int, int)+0x7b>
c0012374:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012377:	81 c3 00 10 00 00    	add    ebx,0x1000
c001237d:	39 de                	cmp    esi,ebx
c001237f:	75 db                	jne    c001235c <VAS::allocatePages(int, int)+0x60>
c0012381:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012386:	75 12                	jne    c001239a <VAS::allocatePages(int, int)+0x9e>
c0012388:	0f 20 d8             	mov    eax,cr3
c001238b:	0f 22 d8             	mov    cr3,eax
c001238e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012392:	83 c4 1c             	add    esp,0x1c
c0012395:	5b                   	pop    ebx
c0012396:	5e                   	pop    esi
c0012397:	5f                   	pop    edi
c0012398:	5d                   	pop    ebp
c0012399:	c3                   	ret    
c001239a:	c1 ee 0a             	shr    esi,0xa
c001239d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123a1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123a7:	c1 eb 0a             	shr    ebx,0xa
c00123aa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123b0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123b6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123bc:	39 c3                	cmp    ebx,eax
c00123be:	77 ce                	ja     c001238e <VAS::allocatePages(int, int)+0x92>
c00123c0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123c3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123c9:	39 d8                	cmp    eax,ebx
c00123cb:	73 f3                	jae    c00123c0 <VAS::allocatePages(int, int)+0xc4>
c00123cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123d1:	83 c4 1c             	add    esp,0x1c
c00123d4:	5b                   	pop    ebx
c00123d5:	5e                   	pop    esi
c00123d6:	5f                   	pop    edi
c00123d7:	5d                   	pop    ebp
c00123d8:	c3                   	ret    
c00123d9:	83 ec 0c             	sub    esp,0xc
c00123dc:	68 9c a6 02 c0       	push   0xc002a69c
c00123e1:	e8 fb 80 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c00123e6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123ed:	83 c4 10             	add    esp,0x10
c00123f0:	e9 43 ff ff ff       	jmp    c0012338 <VAS::allocatePages(int, int)+0x3c>
c00123f5:	83 ec 0c             	sub    esp,0xc
c00123f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123fc:	e8 ce f5 ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c0012401:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012405:	83 c4 10             	add    esp,0x10
c0012408:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001240d:	0f 87 9b 00 00 00    	ja     c00124ae <VAS::allocatePages(int, int)+0x1b2>
c0012413:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012417:	85 d2                	test   edx,edx
c0012419:	7e 3c                	jle    c0012457 <VAS::allocatePages(int, int)+0x15b>
c001241b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001241f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012423:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012427:	c1 e5 0c             	shl    ebp,0xc
c001242a:	81 ce 00 04 00 00    	or     esi,0x400
c0012430:	01 dd                	add    ebp,ebx
c0012432:	e8 80 da ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012437:	56                   	push   esi
c0012438:	53                   	push   ebx
c0012439:	50                   	push   eax
c001243a:	57                   	push   edi
c001243b:	e8 bc fd ff ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012448:	74 03                	je     c001244d <VAS::allocatePages(int, int)+0x151>
c001244a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001244d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012453:	39 dd                	cmp    ebp,ebx
c0012455:	75 db                	jne    c0012432 <VAS::allocatePages(int, int)+0x136>
c0012457:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001245c:	0f 84 26 ff ff ff    	je     c0012388 <VAS::allocatePages(int, int)+0x8c>
c0012462:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012466:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001246a:	89 d3                	mov    ebx,edx
c001246c:	c1 e0 0c             	shl    eax,0xc
c001246f:	c1 eb 0a             	shr    ebx,0xa
c0012472:	01 d0                	add    eax,edx
c0012474:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001247a:	c1 e8 0a             	shr    eax,0xa
c001247d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012483:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012488:	2d 00 00 40 00       	sub    eax,0x400000
c001248d:	39 c3                	cmp    ebx,eax
c001248f:	0f 87 f9 fe ff ff    	ja     c001238e <VAS::allocatePages(int, int)+0x92>
c0012495:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012498:	81 c3 00 10 00 00    	add    ebx,0x1000
c001249e:	39 d8                	cmp    eax,ebx
c00124a0:	73 f3                	jae    c0012495 <VAS::allocatePages(int, int)+0x199>
c00124a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124a6:	83 c4 1c             	add    esp,0x1c
c00124a9:	5b                   	pop    ebx
c00124aa:	5e                   	pop    esi
c00124ab:	5f                   	pop    edi
c00124ac:	5d                   	pop    ebp
c00124ad:	c3                   	ret    
c00124ae:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00124b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124b9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124c0:	0f 84 4d ff ff ff    	je     c0012413 <VAS::allocatePages(int, int)+0x117>
c00124c6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124ce:	e9 40 ff ff ff       	jmp    c0012413 <VAS::allocatePages(int, int)+0x117>
c00124d3:	90                   	nop

c00124d4 <VAS::setCPUSpecific(unsigned long)>:
c00124d4:	83 ec 0c             	sub    esp,0xc
c00124d7:	6a 05                	push   0x5
c00124d9:	68 00 00 40 c2       	push   0xc2400000
c00124de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124e6:	e8 11 fd ff ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c00124eb:	83 c4 1c             	add    esp,0x1c
c00124ee:	c3                   	ret    
c00124ef:	90                   	nop

c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124f0:	55                   	push   ebp
c00124f1:	57                   	push   edi
c00124f2:	56                   	push   esi
c00124f3:	53                   	push   ebx
c00124f4:	83 ec 1c             	sub    esp,0x1c
c00124f7:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00124fc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012500:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012506:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001250a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012510:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012514:	83 e0 01             	and    eax,0x1
c0012517:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001251b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001251f:	85 c0                	test   eax,eax
c0012521:	7e 39                	jle    c001255c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012523:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012527:	89 f3                	mov    ebx,esi
c0012529:	c1 e0 0c             	shl    eax,0xc
c001252c:	01 f0                	add    eax,esi
c001252e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012532:	55                   	push   ebp
c0012533:	53                   	push   ebx
c0012534:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012538:	29 f0                	sub    eax,esi
c001253a:	01 d8                	add    eax,ebx
c001253c:	50                   	push   eax
c001253d:	57                   	push   edi
c001253e:	e8 b9 fc ff ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012543:	83 c4 10             	add    esp,0x10
c0012546:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001254b:	74 03                	je     c0012550 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001254d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012550:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012556:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001255a:	75 d6                	jne    c0012532 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001255c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012561:	75 10                	jne    c0012573 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012563:	0f 20 d8             	mov    eax,cr3
c0012566:	0f 22 d8             	mov    cr3,eax
c0012569:	83 c4 1c             	add    esp,0x1c
c001256c:	89 f0                	mov    eax,esi
c001256e:	5b                   	pop    ebx
c001256f:	5e                   	pop    esi
c0012570:	5f                   	pop    edi
c0012571:	5d                   	pop    ebp
c0012572:	c3                   	ret    
c0012573:	89 f3                	mov    ebx,esi
c0012575:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012579:	c1 eb 0a             	shr    ebx,0xa
c001257c:	c1 e0 0c             	shl    eax,0xc
c001257f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012585:	01 f0                	add    eax,esi
c0012587:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001258d:	c1 e8 0a             	shr    eax,0xa
c0012590:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012595:	2d 00 00 40 00       	sub    eax,0x400000
c001259a:	39 c3                	cmp    ebx,eax
c001259c:	77 cb                	ja     c0012569 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001259e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125a7:	39 d8                	cmp    eax,ebx
c00125a9:	73 f3                	jae    c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125ab:	83 c4 1c             	add    esp,0x1c
c00125ae:	89 f0                	mov    eax,esi
c00125b0:	5b                   	pop    ebx
c00125b1:	5e                   	pop    esi
c00125b2:	5f                   	pop    edi
c00125b3:	5d                   	pop    ebp
c00125b4:	c3                   	ret    
c00125b5:	90                   	nop

c00125b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125b6:	55                   	push   ebp
c00125b7:	57                   	push   edi
c00125b8:	56                   	push   esi
c00125b9:	53                   	push   ebx
c00125ba:	83 ec 1c             	sub    esp,0x1c
c00125bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125c1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125c5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125c9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125cd:	a9 ff 0f 00 00       	test   eax,0xfff
c00125d2:	75 4a                	jne    c001261e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125d4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125d8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00125db:	c1 eb 16             	shr    ebx,0x16
c00125de:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125e5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125e9:	74 4d                	je     c0012638 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125ef:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125f3:	c1 e8 0a             	shr    eax,0xa
c00125f6:	80 fa 01             	cmp    dl,0x1
c00125f9:	19 d2                	sbb    edx,edx
c00125fb:	c1 e3 0c             	shl    ebx,0xc
c00125fe:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012602:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012608:	25 fc 0f 00 00       	and    eax,0xffc
c001260d:	01 d8                	add    eax,ebx
c001260f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012616:	83 c4 1c             	add    esp,0x1c
c0012619:	5b                   	pop    ebx
c001261a:	5e                   	pop    esi
c001261b:	5f                   	pop    edi
c001261c:	5d                   	pop    ebp
c001261d:	c3                   	ret    
c001261e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012622:	83 ec 0c             	sub    esp,0xc
c0012625:	68 c8 a6 02 c0       	push   0xc002a6c8
c001262a:	e8 b2 7e 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c001262f:	83 c4 10             	add    esp,0x10
c0012632:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012636:	eb 9c                	jmp    c00125d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001263c:	e8 76 d8 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012641:	89 c5                	mov    ebp,eax
c0012643:	e8 c6 f5 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c0012648:	83 ec 0c             	sub    esp,0xc
c001264b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001264f:	6a 01                	push   0x1
c0012651:	e8 79 f3 ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c0012656:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001265d:	6a 01                	push   0x1
c001265f:	50                   	push   eax
c0012660:	55                   	push   ebp
c0012661:	81 cd 07 04 00 00    	or     ebp,0x407
c0012667:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001266b:	51                   	push   ecx
c001266c:	e8 7f fe ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012671:	83 c4 1c             	add    esp,0x1c
c0012674:	68 00 10 00 00       	push   0x1000
c0012679:	6a 00                	push   0x0
c001267b:	50                   	push   eax
c001267c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012680:	e8 fb e0 fe ff       	call   c0000780 <memset>
c0012685:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012689:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001268c:	e8 04 f8 ff ff       	call   c0011e95 <Virt::freeKernelVirtualPages(unsigned long)>
c0012691:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001269a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001269e:	e9 48 ff ff ff       	jmp    c00125eb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126a3:	90                   	nop

c00126a4 <VAS::VAS(bool)>:
c00126a4:	53                   	push   ebx
c00126a5:	83 ec 28             	sub    esp,0x28
c00126a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00126c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126ce:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126d1:	e8 e1 d7 ff ff       	call   c000feb7 <Phys::allocatePage()>
c00126d6:	89 c2                	mov    edx,eax
c00126d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00126df:	e8 2a f5 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c00126e4:	89 c3                	mov    ebx,eax
c00126e6:	83 ec 0c             	sub    esp,0xc
c00126e9:	6a 01                	push   0x1
c00126eb:	e8 df f2 ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	89 c2                	mov    edx,eax
c00126f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00126fc:	83 ec 0c             	sub    esp,0xc
c00126ff:	6a 03                	push   0x3
c0012701:	6a 01                	push   0x1
c0012703:	52                   	push   edx
c0012704:	50                   	push   eax
c0012705:	53                   	push   ebx
c0012706:	e8 e5 fd ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001270b:	83 c4 20             	add    esp,0x20
c001270e:	89 c2                	mov    edx,eax
c0012710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012714:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012717:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001271f:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012727:	7f 1c                	jg     c0012745 <VAS::VAS(bool)+0xa1>
c0012729:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012730:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012734:	c1 e2 02             	shl    edx,0x2
c0012737:	01 d0                	add    eax,edx
c0012739:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001273f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012743:	eb da                	jmp    c001271f <VAS::VAS(bool)+0x7b>
c0012745:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001274d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012755:	7f 7a                	jg     c00127d1 <VAS::VAS(bool)+0x12d>
c0012757:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001275b:	2d 00 02 00 00       	sub    eax,0x200
c0012760:	c1 e0 0c             	shl    eax,0xc
c0012763:	83 c8 03             	or     eax,0x3
c0012766:	89 c2                	mov    edx,eax
c0012768:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001276d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012773:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012779:	83 e0 10             	and    eax,0x10
c001277c:	84 c0                	test   al,al
c001277e:	74 07                	je     c0012787 <VAS::VAS(bool)+0xe3>
c0012780:	b8 00 01 00 00       	mov    eax,0x100
c0012785:	eb 05                	jmp    c001278c <VAS::VAS(bool)+0xe8>
c0012787:	b8 00 00 00 00       	mov    eax,0x0
c001278c:	09 d0                	or     eax,edx
c001278e:	89 c1                	mov    ecx,eax
c0012790:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012794:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012797:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001279b:	c1 e2 02             	shl    edx,0x2
c001279e:	01 d0                	add    eax,edx
c00127a0:	89 ca                	mov    edx,ecx
c00127a2:	89 10                	mov    DWORD PTR [eax],edx
c00127a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127a8:	2d 40 03 00 00       	sub    eax,0x340
c00127ad:	83 f8 7f             	cmp    eax,0x7f
c00127b0:	77 16                	ja     c00127c8 <VAS::VAS(bool)+0x124>
c00127b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127bd:	c1 e2 02             	shl    edx,0x2
c00127c0:	01 d0                	add    eax,edx
c00127c2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127c8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127cc:	e9 7c ff ff ff       	jmp    c001274d <VAS::VAS(bool)+0xa9>
c00127d1:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00127d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127dc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127e2:	83 e0 10             	and    eax,0x10
c00127e5:	84 c0                	test   al,al
c00127e7:	74 07                	je     c00127f0 <VAS::VAS(bool)+0x14c>
c00127e9:	b8 03 41 00 00       	mov    eax,0x4103
c00127ee:	eb 05                	jmp    c00127f5 <VAS::VAS(bool)+0x151>
c00127f0:	b8 03 40 00 00       	mov    eax,0x4003
c00127f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127f9:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00127fc:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012802:	89 02                	mov    DWORD PTR [edx],eax
c0012804:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0012809:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001280f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012815:	83 ec 08             	sub    esp,0x8
c0012818:	50                   	push   eax
c0012819:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001281d:	e8 b2 fc ff ff       	call   c00124d4 <VAS::setCPUSpecific(unsigned long)>
c0012822:	83 c4 10             	add    esp,0x10
c0012825:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012829:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001282c:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0012831:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012837:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001283d:	83 e0 10             	and    eax,0x10
c0012840:	84 c0                	test   al,al
c0012842:	74 07                	je     c001284b <VAS::VAS(bool)+0x1a7>
c0012844:	b8 00 01 00 00       	mov    eax,0x100
c0012849:	eb 05                	jmp    c0012850 <VAS::VAS(bool)+0x1ac>
c001284b:	b8 00 00 00 00       	mov    eax,0x0
c0012850:	09 c2                	or     edx,eax
c0012852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012856:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012859:	05 fc 0f 00 00       	add    eax,0xffc
c001285e:	83 ca 03             	or     edx,0x3
c0012861:	89 10                	mov    DWORD PTR [eax],edx
c0012863:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0012868:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001286e:	83 ec 0c             	sub    esp,0xc
c0012871:	50                   	push   eax
c0012872:	e8 45 1c 00 00       	call   c00144bc <Device::getName()>
c0012877:	83 c4 10             	add    esp,0x10
c001287a:	83 ec 08             	sub    esp,0x8
c001287d:	68 0d a8 02 c0       	push   0xc002a80d
c0012882:	50                   	push   eax
c0012883:	e8 40 e0 fe ff       	call   c00008c8 <strcmp>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	85 c0                	test   eax,eax
c001288d:	0f 94 c0             	sete   al
c0012890:	84 c0                	test   al,al
c0012892:	74 70                	je     c0012904 <VAS::VAS(bool)+0x260>
c0012894:	e8 06 b4 00 00       	call   c001dc9f <disableIRQs()>
c0012899:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001289e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a4:	05 7c 09 00 00       	add    eax,0x97c
c00128a9:	83 ec 0c             	sub    esp,0xc
c00128ac:	50                   	push   eax
c00128ad:	e8 12 ca ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128ba:	89 c3                	mov    ebx,eax
c00128bc:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00128c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128c7:	05 7c 09 00 00       	add    eax,0x97c
c00128cc:	83 ec 0c             	sub    esp,0xc
c00128cf:	50                   	push   eax
c00128d0:	e8 ef c9 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128d5:	83 c4 10             	add    esp,0x10
c00128d8:	83 ec 08             	sub    esp,0x8
c00128db:	50                   	push   eax
c00128dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128e0:	e8 91 f5 ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c00128e5:	83 c4 10             	add    esp,0x10
c00128e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128ef:	6a 11                	push   0x11
c00128f1:	53                   	push   ebx
c00128f2:	50                   	push   eax
c00128f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128f7:	e8 00 f9 ff ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	e8 a9 b3 00 00       	call   c001dcad <enableIRQs()>
c0012904:	90                   	nop
c0012905:	83 c4 28             	add    esp,0x28
c0012908:	5b                   	pop    ebx
c0012909:	c3                   	ret    

c001290a <VAS::evict(unsigned long)>:
c001290a:	55                   	push   ebp
c001290b:	57                   	push   edi
c001290c:	56                   	push   esi
c001290d:	53                   	push   ebx
c001290e:	83 ec 1c             	sub    esp,0x1c
c0012911:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012915:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012919:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001291d:	e8 ee f1 ff ff       	call   c0011b10 <Virt::allocateSwapfilePage()>
c0012922:	89 c7                	mov    edi,eax
c0012924:	a1 ec d3 02 c0       	mov    eax,ds:0xc002d3ec
c0012929:	85 c0                	test   eax,eax
c001292b:	7e 3d                	jle    c001296a <VAS::evict(unsigned long)+0x60>
c001292d:	89 ee                	mov    esi,ebp
c001292f:	31 db                	xor    ebx,ebx
c0012931:	83 ec 0c             	sub    esp,0xc
c0012934:	57                   	push   edi
c0012935:	e8 c4 f1 ff ff       	call   c0011afe <Virt::swapIDToSector(unsigned long)>
c001293a:	89 34 24             	mov    DWORD PTR [esp],esi
c001293d:	01 d8                	add    eax,ebx
c001293f:	6a 01                	push   0x1
c0012941:	31 d2                	xor    edx,edx
c0012943:	43                   	inc    ebx
c0012944:	52                   	push   edx
c0012945:	81 c6 00 02 00 00    	add    esi,0x200
c001294b:	50                   	push   eax
c001294c:	0f be 05 f8 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d3f8
c0012953:	ff 34 85 5c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16a4]
c001295a:	e8 41 3d 00 00       	call   c00166a0 <LogicalDisk::write(unsigned long long, int, void*)>
c001295f:	83 c4 20             	add    esp,0x20
c0012962:	39 1d ec d3 02 c0    	cmp    DWORD PTR ds:0xc002d3ec,ebx
c0012968:	7f c7                	jg     c0012931 <VAS::evict(unsigned long)+0x27>
c001296a:	83 ec 08             	sub    esp,0x8
c001296d:	c1 e7 0b             	shl    edi,0xb
c0012970:	55                   	push   ebp
c0012971:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012975:	e8 fc f4 ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c001297a:	83 c4 0c             	add    esp,0xc
c001297d:	8b 10                	mov    edx,DWORD PTR [eax]
c001297f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012985:	09 d7                	or     edi,edx
c0012987:	89 38                	mov    DWORD PTR [eax],edi
c0012989:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001298e:	40                   	inc    eax
c001298f:	a3 c8 e5 02 c0       	mov    ds:0xc002e5c8,eax
c0012994:	0f 20 da             	mov    edx,cr3
c0012997:	0f 22 da             	mov    cr3,edx
c001299a:	50                   	push   eax
c001299b:	55                   	push   ebp
c001299c:	68 1b a8 02 c0       	push   0xc002a81b
c00129a1:	e8 fd 03 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00129a6:	a1 c4 e5 02 c0       	mov    eax,ds:0xc002e5c4
c00129ab:	c7 44 24 40 30 a8 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a830
c00129b3:	8d 50 01             	lea    edx,[eax+0x1]
c00129b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00129ba:	89 15 c4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c4,edx
c00129c0:	83 c4 2c             	add    esp,0x2c
c00129c3:	5b                   	pop    ebx
c00129c4:	5e                   	pop    esi
c00129c5:	5f                   	pop    edi
c00129c6:	5d                   	pop    ebp
c00129c7:	e9 d7 03 00 00       	jmp    c0012da3 <Dbg::kprintf(char const*, ...)>

c00129cc <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129cc:	55                   	push   ebp
c00129cd:	57                   	push   edi
c00129ce:	56                   	push   esi
c00129cf:	53                   	push   ebx
c00129d0:	83 ec 0c             	sub    esp,0xc
c00129d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00129d7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00129dd:	0f 84 d1 00 00 00    	je     c0012ab4 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c00129e3:	56                   	push   esi
c00129e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00129e8:	e8 89 f4 ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c00129ed:	5b                   	pop    ebx
c00129ee:	85 c0                	test   eax,eax
c00129f0:	5f                   	pop    edi
c00129f1:	89 c3                	mov    ebx,eax
c00129f3:	0f 84 bb 00 00 00    	je     c0012ab4 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c00129f9:	8b 38                	mov    edi,DWORD PTR [eax]
c00129fb:	31 c0                	xor    eax,eax
c00129fd:	89 fa                	mov    edx,edi
c00129ff:	81 e2 01 04 00 00    	and    edx,0x401
c0012a05:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a0b:	0f 85 a5 00 00 00    	jne    c0012ab6 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012a11:	e8 a1 d4 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012a16:	c1 ef 0b             	shr    edi,0xb
c0012a19:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012a1b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a21:	09 c2                	or     edx,eax
c0012a23:	81 ca 01 08 00 00    	or     edx,0x801
c0012a29:	89 13                	mov    DWORD PTR [ebx],edx
c0012a2b:	8b 0d ec d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3ec
c0012a31:	85 c9                	test   ecx,ecx
c0012a33:	7e 3d                	jle    c0012a72 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012a35:	89 f5                	mov    ebp,esi
c0012a37:	31 db                	xor    ebx,ebx
c0012a39:	83 ec 0c             	sub    esp,0xc
c0012a3c:	57                   	push   edi
c0012a3d:	e8 bc f0 ff ff       	call   c0011afe <Virt::swapIDToSector(unsigned long)>
c0012a42:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a45:	01 d8                	add    eax,ebx
c0012a47:	6a 01                	push   0x1
c0012a49:	31 d2                	xor    edx,edx
c0012a4b:	43                   	inc    ebx
c0012a4c:	52                   	push   edx
c0012a4d:	81 c5 00 02 00 00    	add    ebp,0x200
c0012a53:	50                   	push   eax
c0012a54:	0f be 05 f8 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d3f8
c0012a5b:	ff 34 85 5c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16a4]
c0012a62:	e8 cd 3b 00 00       	call   c0016634 <LogicalDisk::read(unsigned long long, int, void*)>
c0012a67:	83 c4 20             	add    esp,0x20
c0012a6a:	39 1d ec d3 02 c0    	cmp    DWORD PTR ds:0xc002d3ec,ebx
c0012a70:	7f c7                	jg     c0012a39 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012a72:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012a77:	48                   	dec    eax
c0012a78:	52                   	push   edx
c0012a79:	a3 c8 e5 02 c0       	mov    ds:0xc002e5c8,eax
c0012a7e:	50                   	push   eax
c0012a7f:	56                   	push   esi
c0012a80:	68 41 a8 02 c0       	push   0xc002a841
c0012a85:	e8 19 03 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0012a8a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012a8d:	e8 4e f0 ff ff       	call   c0011ae0 <Virt::freeSwapfilePage(unsigned long)>
c0012a92:	e8 27 b2 00 00       	call   c001dcbe <unlockScheduler()>
c0012a97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a9b:	83 c4 10             	add    esp,0x10
c0012a9e:	25 ff 0f 00 00       	and    eax,0xfff
c0012aa3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012aa8:	77 14                	ja     c0012abe <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012aaa:	0f 20 d8             	mov    eax,cr3
c0012aad:	0f 22 d8             	mov    cr3,eax
c0012ab0:	b0 01                	mov    al,0x1
c0012ab2:	eb 02                	jmp    c0012ab6 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012ab4:	31 c0                	xor    eax,eax
c0012ab6:	83 c4 0c             	add    esp,0xc
c0012ab9:	5b                   	pop    ebx
c0012aba:	5e                   	pop    esi
c0012abb:	5f                   	pop    edi
c0012abc:	5d                   	pop    ebp
c0012abd:	c3                   	ret    
c0012abe:	83 ec 0c             	sub    esp,0xc
c0012ac1:	68 56 a8 02 c0       	push   0xc002a856
c0012ac6:	e8 d8 02 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0012acb:	83 c4 10             	add    esp,0x10
c0012ace:	eb da                	jmp    c0012aaa <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012ad0 <VAS::scanForEviction()>:
c0012ad0:	57                   	push   edi
c0012ad1:	56                   	push   esi
c0012ad2:	53                   	push   ebx
c0012ad3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ad7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012ada:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012ae0:	75 0e                	jne    c0012af0 <VAS::scanForEviction()+0x20>
c0012ae2:	89 da                	mov    edx,ebx
c0012ae4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012ae7:	c1 ea 16             	shr    edx,0x16
c0012aea:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012aee:	74 48                	je     c0012b38 <VAS::scanForEviction()+0x68>
c0012af0:	53                   	push   ebx
c0012af1:	56                   	push   esi
c0012af2:	e8 7f f3 ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c0012af7:	5a                   	pop    edx
c0012af8:	8b 38                	mov    edi,DWORD PTR [eax]
c0012afa:	59                   	pop    ecx
c0012afb:	89 fa                	mov    edx,edi
c0012afd:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012b03:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012b09:	74 3d                	je     c0012b48 <VAS::scanForEviction()+0x78>
c0012b0b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012b11:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012b17:	76 2a                	jbe    c0012b43 <VAS::scanForEviction()+0x73>
c0012b19:	31 db                	xor    ebx,ebx
c0012b1b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012b22:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b28:	75 c6                	jne    c0012af0 <VAS::scanForEviction()+0x20>
c0012b2a:	89 da                	mov    edx,ebx
c0012b2c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b2f:	c1 ea 16             	shr    edx,0x16
c0012b32:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b36:	75 b8                	jne    c0012af0 <VAS::scanForEviction()+0x20>
c0012b38:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012b3e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b41:	eb 97                	jmp    c0012ada <VAS::scanForEviction()+0xa>
c0012b43:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b46:	eb 92                	jmp    c0012ada <VAS::scanForEviction()+0xa>
c0012b48:	f7 c7 01 00 00 00    	test   edi,0x1
c0012b4e:	74 bb                	je     c0012b0b <VAS::scanForEviction()+0x3b>
c0012b50:	f7 c7 20 00 00 00    	test   edi,0x20
c0012b56:	74 0a                	je     c0012b62 <VAS::scanForEviction()+0x92>
c0012b58:	83 e7 df             	and    edi,0xffffffdf
c0012b5b:	89 38                	mov    DWORD PTR [eax],edi
c0012b5d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b60:	eb a9                	jmp    c0012b0b <VAS::scanForEviction()+0x3b>
c0012b62:	83 ec 08             	sub    esp,0x8
c0012b65:	53                   	push   ebx
c0012b66:	56                   	push   esi
c0012b67:	e8 9e fd ff ff       	call   c001290a <VAS::evict(unsigned long)>
c0012b6c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	89 f8                	mov    eax,edi
c0012b78:	5b                   	pop    ebx
c0012b79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b7e:	5e                   	pop    esi
c0012b7f:	5f                   	pop    edi
c0012b80:	c3                   	ret    

c0012b81 <mapVASFirstTime>:
c0012b81:	55                   	push   ebp
c0012b82:	57                   	push   edi
c0012b83:	56                   	push   esi
c0012b84:	53                   	push   ebx
c0012b85:	83 ec 0c             	sub    esp,0xc
c0012b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b8d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012b90:	4a                   	dec    edx
c0012b91:	0f 84 8e 00 00 00    	je     c0012c25 <mapVASFirstTime+0xa4>
c0012b97:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012b9a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012b9d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012ba2:	c1 e5 15             	shl    ebp,0x15
c0012ba5:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012baa:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012bb0:	29 eb                	sub    ebx,ebp
c0012bb2:	29 ee                	sub    esi,ebp
c0012bb4:	e8 fe d2 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012bb9:	83 ec 0c             	sub    esp,0xc
c0012bbc:	68 03 04 00 00       	push   0x403
c0012bc1:	6a 01                	push   0x1
c0012bc3:	53                   	push   ebx
c0012bc4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bca:	50                   	push   eax
c0012bcb:	57                   	push   edi
c0012bcc:	e8 1f f9 ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012bd1:	83 c4 20             	add    esp,0x20
c0012bd4:	39 f3                	cmp    ebx,esi
c0012bd6:	75 dc                	jne    c0012bb4 <mapVASFirstTime+0x33>
c0012bd8:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012bdd:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012be2:	29 ee                	sub    esi,ebp
c0012be4:	29 e8                	sub    eax,ebp
c0012be6:	89 c5                	mov    ebp,eax
c0012be8:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012bec:	19 db                	sbb    ebx,ebx
c0012bee:	e8 c4 d2 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012bf3:	83 e3 04             	and    ebx,0x4
c0012bf6:	83 ec 0c             	sub    esp,0xc
c0012bf9:	81 c3 03 04 00 00    	add    ebx,0x403
c0012bff:	53                   	push   ebx
c0012c00:	6a 01                	push   0x1
c0012c02:	56                   	push   esi
c0012c03:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c09:	50                   	push   eax
c0012c0a:	57                   	push   edi
c0012c0b:	e8 e0 f8 ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c10:	83 c4 20             	add    esp,0x20
c0012c13:	39 f5                	cmp    ebp,esi
c0012c15:	75 d1                	jne    c0012be8 <mapVASFirstTime+0x67>
c0012c17:	0f 20 d8             	mov    eax,cr3
c0012c1a:	0f 22 d8             	mov    cr3,eax
c0012c1d:	83 c4 0c             	add    esp,0xc
c0012c20:	5b                   	pop    ebx
c0012c21:	5e                   	pop    esi
c0012c22:	5f                   	pop    edi
c0012c23:	5d                   	pop    ebp
c0012c24:	c3                   	ret    
c0012c25:	83 ec 0c             	sub    esp,0xc
c0012c28:	68 66 a8 02 c0       	push   0xc002a866
c0012c2d:	e8 71 01 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	83 c4 0c             	add    esp,0xc
c0012c38:	5b                   	pop    ebx
c0012c39:	5e                   	pop    esi
c0012c3a:	5f                   	pop    edi
c0012c3b:	5d                   	pop    ebp
c0012c3c:	c3                   	ret    

c0012c3d <__cxa_atexit>:
c0012c3d:	31 c0                	xor    eax,eax
c0012c3f:	c3                   	ret    

c0012c40 <__cxa_finalize>:
c0012c40:	c3                   	ret    

c0012c41 <__stack_chk_fail>:
c0012c41:	55                   	push   ebp
c0012c42:	89 e5                	mov    ebp,esp
c0012c44:	83 ec 14             	sub    esp,0x14
c0012c47:	68 7f a8 02 c0       	push   0xc002a87f
c0012c4c:	e8 52 01 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0012c51:	58                   	pop    eax
c0012c52:	5a                   	pop    edx
c0012c53:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c56:	68 cf a8 02 c0       	push   0xc002a8cf
c0012c5b:	e8 43 01 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0012c60:	59                   	pop    ecx
c0012c61:	58                   	pop    eax
c0012c62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c65:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c68:	68 cf a8 02 c0       	push   0xc002a8cf
c0012c6d:	e8 31 01 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0012c72:	5a                   	pop    edx
c0012c73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c76:	59                   	pop    ecx
c0012c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c7c:	68 cf a8 02 c0       	push   0xc002a8cf
c0012c81:	e8 1d 01 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0012c86:	5a                   	pop    edx
c0012c87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c8a:	59                   	pop    ecx
c0012c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c8f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c92:	68 cf a8 02 c0       	push   0xc002a8cf
c0012c97:	e8 07 01 00 00       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0012c9c:	c7 04 24 d7 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8d7
c0012ca3:	e8 39 78 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0012ca8:	83 c4 10             	add    esp,0x10
c0012cab:	c9                   	leave  
c0012cac:	c3                   	ret    

c0012cad <__cxa_pure_virtual>:
c0012cad:	83 ec 18             	sub    esp,0x18
c0012cb0:	68 ef a8 02 c0       	push   0xc002a8ef
c0012cb5:	e8 27 78 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0012cba:	83 c4 1c             	add    esp,0x1c
c0012cbd:	c3                   	ret    

c0012cbe <operator new[](unsigned long)>:
c0012cbe:	e9 88 cb ff ff       	jmp    c000f84b <malloc>

c0012cc3 <operator delete(void*, unsigned long)>:
c0012cc3:	e9 a3 cb ff ff       	jmp    c000f86b <rfree>

c0012cc8 <operator delete[](void*)>:
c0012cc8:	e9 9e cb ff ff       	jmp    c000f86b <rfree>

c0012ccd <operator delete[](void*, unsigned long)>:
c0012ccd:	e9 99 cb ff ff       	jmp    c000f86b <rfree>

c0012cd2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012cd2:	57                   	push   edi
c0012cd3:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012cd8:	56                   	push   esi
c0012cd9:	be 04 a9 02 c0       	mov    esi,0xc002a904
c0012cde:	53                   	push   ebx
c0012cdf:	83 ec 40             	sub    esp,0x40
c0012ce2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012ce6:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012cea:	fc                   	cld    
c0012ceb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ced:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012cf1:	83 f9 3e             	cmp    ecx,0x3e
c0012cf4:	7e 05                	jle    c0012cfb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012cf6:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012cfb:	89 df                	mov    edi,ebx
c0012cfd:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d01:	eb 02                	jmp    c0012d05 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d03:	89 c7                	mov    edi,eax
c0012d05:	31 d2                	xor    edx,edx
c0012d07:	46                   	inc    esi
c0012d08:	89 f8                	mov    eax,edi
c0012d0a:	f7 f1                	div    ecx
c0012d0c:	39 cf                	cmp    edi,ecx
c0012d0e:	73 f3                	jae    c0012d03 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d10:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d13:	eb 02                	jmp    c0012d17 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d15:	89 c3                	mov    ebx,eax
c0012d17:	31 d2                	xor    edx,edx
c0012d19:	4e                   	dec    esi
c0012d1a:	89 d8                	mov    eax,ebx
c0012d1c:	f7 f1                	div    ecx
c0012d1e:	39 cb                	cmp    ebx,ecx
c0012d20:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d24:	88 16                	mov    BYTE PTR [esi],dl
c0012d26:	73 ed                	jae    c0012d15 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d28:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d2c:	83 c4 40             	add    esp,0x40
c0012d2f:	5b                   	pop    ebx
c0012d30:	5e                   	pop    esi
c0012d31:	5f                   	pop    edi
c0012d32:	c3                   	ret    

c0012d33 <Dbg::logc(char)>:
c0012d33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d37:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d3c:	ec                   	in     al,dx
c0012d3d:	a8 20                	test   al,0x20
c0012d3f:	74 fb                	je     c0012d3c <Dbg::logc(char)+0x9>
c0012d41:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d46:	88 c8                	mov    al,cl
c0012d48:	ee                   	out    dx,al
c0012d49:	c3                   	ret    

c0012d4a <Dbg::logs(char*)>:
c0012d4a:	53                   	push   ebx
c0012d4b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d4f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d52:	84 c0                	test   al,al
c0012d54:	74 0f                	je     c0012d65 <Dbg::logs(char*)+0x1b>
c0012d56:	50                   	push   eax
c0012d57:	43                   	inc    ebx
c0012d58:	e8 d6 ff ff ff       	call   c0012d33 <Dbg::logc(char)>
c0012d5d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d60:	5a                   	pop    edx
c0012d61:	84 c0                	test   al,al
c0012d63:	75 f1                	jne    c0012d56 <Dbg::logs(char*)+0xc>
c0012d65:	5b                   	pop    ebx
c0012d66:	c3                   	ret    

c0012d67 <Dbg::logWriteInt(unsigned int)>:
c0012d67:	83 ec 10             	sub    esp,0x10
c0012d6a:	6a 0a                	push   0xa
c0012d6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d70:	50                   	push   eax
c0012d71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d75:	e8 58 ff ff ff       	call   c0012cd2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d7a:	50                   	push   eax
c0012d7b:	e8 ca ff ff ff       	call   c0012d4a <Dbg::logs(char*)>
c0012d80:	83 c4 20             	add    esp,0x20
c0012d83:	c3                   	ret    

c0012d84 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012d84:	83 ec 10             	sub    esp,0x10
c0012d87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d8f:	50                   	push   eax
c0012d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d94:	e8 39 ff ff ff       	call   c0012cd2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d99:	50                   	push   eax
c0012d9a:	e8 ab ff ff ff       	call   c0012d4a <Dbg::logs(char*)>
c0012d9f:	83 c4 20             	add    esp,0x20
c0012da2:	c3                   	ret    

c0012da3 <Dbg::kprintf(char const*, ...)>:
c0012da3:	55                   	push   ebp
c0012da4:	57                   	push   edi
c0012da5:	56                   	push   esi
c0012da6:	53                   	push   ebx
c0012da7:	83 ec 0c             	sub    esp,0xc
c0012daa:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012dae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012db2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012db6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012db9:	84 c0                	test   al,al
c0012dbb:	74 4a                	je     c0012e07 <Dbg::kprintf(char const*, ...)+0x64>
c0012dbd:	31 db                	xor    ebx,ebx
c0012dbf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012dc2:	3c 25                	cmp    al,0x25
c0012dc4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012dc7:	0f 85 e4 00 00 00    	jne    c0012eb1 <Dbg::kprintf(char const*, ...)+0x10e>
c0012dcd:	83 c3 02             	add    ebx,0x2
c0012dd0:	8a 07                	mov    al,BYTE PTR [edi]
c0012dd2:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012dd5:	83 e8 25             	sub    eax,0x25
c0012dd8:	3c 53                	cmp    al,0x53
c0012dda:	0f 87 ba 00 00 00    	ja     c0012e9a <Dbg::kprintf(char const*, ...)+0xf7>
c0012de0:	0f b6 c0             	movzx  eax,al
c0012de3:	ff 24 85 44 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd56bc]
c0012dea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012dee:	89 c8                	mov    eax,ecx
c0012df0:	83 c1 04             	add    ecx,0x4
c0012df3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012df7:	ff 30                	push   DWORD PTR [eax]
c0012df9:	e8 4c ff ff ff       	call   c0012d4a <Dbg::logs(char*)>
c0012dfe:	58                   	pop    eax
c0012dff:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e03:	84 c0                	test   al,al
c0012e05:	75 b8                	jne    c0012dbf <Dbg::kprintf(char const*, ...)+0x1c>
c0012e07:	83 c4 0c             	add    esp,0xc
c0012e0a:	5b                   	pop    ebx
c0012e0b:	5e                   	pop    esi
c0012e0c:	5f                   	pop    edi
c0012e0d:	5d                   	pop    ebp
c0012e0e:	c3                   	ret    
c0012e0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e13:	89 d0                	mov    eax,edx
c0012e15:	83 c2 04             	add    edx,0x4
c0012e18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e1c:	ff 30                	push   DWORD PTR [eax]
c0012e1e:	e8 44 ff ff ff       	call   c0012d67 <Dbg::logWriteInt(unsigned int)>
c0012e23:	58                   	pop    eax
c0012e24:	eb d9                	jmp    c0012dff <Dbg::kprintf(char const*, ...)+0x5c>
c0012e26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e2a:	89 d0                	mov    eax,edx
c0012e2c:	83 c2 04             	add    edx,0x4
c0012e2f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e36:	50                   	push   eax
c0012e37:	e8 f7 fe ff ff       	call   c0012d33 <Dbg::logc(char)>
c0012e3c:	58                   	pop    eax
c0012e3d:	eb c0                	jmp    c0012dff <Dbg::kprintf(char const*, ...)+0x5c>
c0012e3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e43:	89 c8                	mov    eax,ecx
c0012e45:	83 c1 04             	add    ecx,0x4
c0012e48:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e4c:	ff 30                	push   DWORD PTR [eax]
c0012e4e:	e8 14 ff ff ff       	call   c0012d67 <Dbg::logWriteInt(unsigned int)>
c0012e53:	5f                   	pop    edi
c0012e54:	eb a9                	jmp    c0012dff <Dbg::kprintf(char const*, ...)+0x5c>
c0012e56:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e5a:	89 c8                	mov    eax,ecx
c0012e5c:	83 c1 04             	add    ecx,0x4
c0012e5f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e63:	6a 10                	push   0x10
c0012e65:	ff 30                	push   DWORD PTR [eax]
c0012e67:	e8 18 ff ff ff       	call   c0012d84 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e6c:	59                   	pop    ecx
c0012e6d:	5f                   	pop    edi
c0012e6e:	eb 8f                	jmp    c0012dff <Dbg::kprintf(char const*, ...)+0x5c>
c0012e70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e74:	89 d0                	mov    eax,edx
c0012e76:	83 c2 08             	add    edx,0x8
c0012e79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e7d:	6a 10                	push   0x10
c0012e7f:	ff 30                	push   DWORD PTR [eax]
c0012e81:	e8 fe fe ff ff       	call   c0012d84 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e86:	58                   	pop    eax
c0012e87:	5a                   	pop    edx
c0012e88:	e9 72 ff ff ff       	jmp    c0012dff <Dbg::kprintf(char const*, ...)+0x5c>
c0012e8d:	6a 25                	push   0x25
c0012e8f:	e8 9f fe ff ff       	call   c0012d33 <Dbg::logc(char)>
c0012e94:	58                   	pop    eax
c0012e95:	e9 65 ff ff ff       	jmp    c0012dff <Dbg::kprintf(char const*, ...)+0x5c>
c0012e9a:	6a 25                	push   0x25
c0012e9c:	e8 92 fe ff ff       	call   c0012d33 <Dbg::logc(char)>
c0012ea1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ea4:	50                   	push   eax
c0012ea5:	e8 89 fe ff ff       	call   c0012d33 <Dbg::logc(char)>
c0012eaa:	5a                   	pop    edx
c0012eab:	59                   	pop    ecx
c0012eac:	e9 4e ff ff ff       	jmp    c0012dff <Dbg::kprintf(char const*, ...)+0x5c>
c0012eb1:	50                   	push   eax
c0012eb2:	89 eb                	mov    ebx,ebp
c0012eb4:	e8 7a fe ff ff       	call   c0012d33 <Dbg::logc(char)>
c0012eb9:	89 fd                	mov    ebp,edi
c0012ebb:	58                   	pop    eax
c0012ebc:	e9 3e ff ff ff       	jmp    c0012dff <Dbg::kprintf(char const*, ...)+0x5c>
c0012ec1:	90                   	nop

c0012ec2 <File::read(unsigned long long, void*, int*)>:
c0012ec2:	53                   	push   ebx
c0012ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ec7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ecb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ed2:	3c 19                	cmp    al,0x19
c0012ed4:	77 35                	ja     c0012f0b <File::read(unsigned long long, void*, int*)+0x49>
c0012ed6:	8b 04 85 60 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15a0]
c0012edd:	85 c0                	test   eax,eax
c0012edf:	74 2a                	je     c0012f0b <File::read(unsigned long long, void*, int*)+0x49>
c0012ee1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ee7:	85 c0                	test   eax,eax
c0012ee9:	74 20                	je     c0012f0b <File::read(unsigned long long, void*, int*)+0x49>
c0012eeb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eef:	74 21                	je     c0012f12 <File::read(unsigned long long, void*, int*)+0x50>
c0012ef1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ef3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ef7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012efd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f05:	5b                   	pop    ebx
c0012f06:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f09:	ff e0                	jmp    eax
c0012f0b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f10:	eb 05                	jmp    c0012f17 <File::read(unsigned long long, void*, int*)+0x55>
c0012f12:	b8 05 00 00 00       	mov    eax,0x5
c0012f17:	5b                   	pop    ebx
c0012f18:	c3                   	ret    
c0012f19:	90                   	nop

c0012f1a <File::write(unsigned long long, void*, int*)>:
c0012f1a:	53                   	push   ebx
c0012f1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f2a:	3c 19                	cmp    al,0x19
c0012f2c:	77 35                	ja     c0012f63 <File::write(unsigned long long, void*, int*)+0x49>
c0012f2e:	8b 04 85 60 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15a0]
c0012f35:	85 c0                	test   eax,eax
c0012f37:	74 2a                	je     c0012f63 <File::write(unsigned long long, void*, int*)+0x49>
c0012f39:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f3f:	85 c0                	test   eax,eax
c0012f41:	74 20                	je     c0012f63 <File::write(unsigned long long, void*, int*)+0x49>
c0012f43:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f47:	74 21                	je     c0012f6a <File::write(unsigned long long, void*, int*)+0x50>
c0012f49:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f4b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f4f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f5d:	5b                   	pop    ebx
c0012f5e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f61:	ff e0                	jmp    eax
c0012f63:	b8 0b 00 00 00       	mov    eax,0xb
c0012f68:	eb 05                	jmp    c0012f6f <File::write(unsigned long long, void*, int*)+0x55>
c0012f6a:	b8 05 00 00 00       	mov    eax,0x5
c0012f6f:	5b                   	pop    ebx
c0012f70:	c3                   	ret    
c0012f71:	90                   	nop

c0012f72 <Directory::read(unsigned long long, void*, int*)>:
c0012f72:	53                   	push   ebx
c0012f73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f77:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f7b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f82:	3c 19                	cmp    al,0x19
c0012f84:	77 35                	ja     c0012fbb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f86:	8b 04 85 60 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15a0]
c0012f8d:	85 c0                	test   eax,eax
c0012f8f:	74 2a                	je     c0012fbb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f91:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f97:	85 c0                	test   eax,eax
c0012f99:	74 20                	je     c0012fbb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f9b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f9f:	74 21                	je     c0012fc2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012fa1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fa3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fa7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fb5:	5b                   	pop    ebx
c0012fb6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fb9:	ff e0                	jmp    eax
c0012fbb:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc0:	eb 05                	jmp    c0012fc7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012fc2:	b8 05 00 00 00       	mov    eax,0x5
c0012fc7:	5b                   	pop    ebx
c0012fc8:	c3                   	ret    
c0012fc9:	90                   	nop

c0012fca <Directory::write(unsigned long long, void*, int*)>:
c0012fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fce:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012fd5:	b8 0b 00 00 00       	mov    eax,0xb
c0012fda:	80 fa 19             	cmp    dl,0x19
c0012fdd:	77 18                	ja     c0012ff7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fdf:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c0012fe6:	85 d2                	test   edx,edx
c0012fe8:	74 0d                	je     c0012ff7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fea:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012ff1:	19 c0                	sbb    eax,eax
c0012ff3:	83 e0 0a             	and    eax,0xa
c0012ff6:	40                   	inc    eax
c0012ff7:	c3                   	ret    

c0012ff8 <File::isAtty()>:
c0012ff8:	31 c0                	xor    eax,eax
c0012ffa:	c3                   	ret    
c0012ffb:	90                   	nop

c0012ffc <Directory::isAtty()>:
c0012ffc:	31 c0                	xor    eax,eax
c0012ffe:	c3                   	ret    
c0012fff:	90                   	nop

c0013000 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013000:	b8 0a 00 00 00       	mov    eax,0xa
c0013005:	c3                   	ret    

c0013006 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013006:	b8 0a 00 00 00       	mov    eax,0xa
c001300b:	c3                   	ret    

c001300c <Filesystem::getFileFirstSector(char const*)>:
c001300c:	31 c0                	xor    eax,eax
c001300e:	31 d2                	xor    edx,edx
c0013010:	c3                   	ret    
c0013011:	90                   	nop

c0013012 <File::~File()>:
c0013012:	83 ec 0c             	sub    esp,0xc
c0013015:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c001301a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301e:	89 10                	mov    DWORD PTR [eax],edx
c0013020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013024:	83 ec 0c             	sub    esp,0xc
c0013027:	50                   	push   eax
c0013028:	e8 41 e7 ff ff       	call   c001176e <UnixFile::~UnixFile()>
c001302d:	83 c4 10             	add    esp,0x10
c0013030:	90                   	nop
c0013031:	83 c4 0c             	add    esp,0xc
c0013034:	c3                   	ret    
c0013035:	90                   	nop

c0013036 <File::~File()>:
c0013036:	83 ec 0c             	sub    esp,0xc
c0013039:	83 ec 0c             	sub    esp,0xc
c001303c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013040:	e8 cd ff ff ff       	call   c0013012 <File::~File()>
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	83 ec 08             	sub    esp,0x8
c001304b:	68 14 01 00 00       	push   0x114
c0013050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013054:	e8 6a fc ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	83 c4 0c             	add    esp,0xc
c001305f:	c3                   	ret    

c0013060 <Directory::~Directory()>:
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	ba 20 ab 02 c0       	mov    edx,0xc002ab20
c0013068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306c:	89 10                	mov    DWORD PTR [eax],edx
c001306e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013072:	83 ec 0c             	sub    esp,0xc
c0013075:	50                   	push   eax
c0013076:	e8 f3 e6 ff ff       	call   c001176e <UnixFile::~UnixFile()>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	90                   	nop
c001307f:	83 c4 0c             	add    esp,0xc
c0013082:	c3                   	ret    
c0013083:	90                   	nop

c0013084 <Directory::~Directory()>:
c0013084:	83 ec 0c             	sub    esp,0xc
c0013087:	83 ec 0c             	sub    esp,0xc
c001308a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001308e:	e8 cd ff ff ff       	call   c0013060 <Directory::~Directory()>
c0013093:	83 c4 10             	add    esp,0x10
c0013096:	83 ec 08             	sub    esp,0x8
c0013099:	68 14 01 00 00       	push   0x114
c001309e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a2:	e8 1c fc ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00130a7:	83 c4 10             	add    esp,0x10
c00130aa:	83 c4 0c             	add    esp,0xc
c00130ad:	c3                   	ret    

c00130ae <Filesystem::Filesystem()>:
c00130ae:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c00130b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b7:	89 10                	mov    DWORD PTR [eax],edx
c00130b9:	8b 15 d4 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5d4
c00130bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ca:	a3 d4 e5 02 c0       	mov    ds:0xc002e5d4,eax
c00130cf:	90                   	nop
c00130d0:	c3                   	ret    
c00130d1:	90                   	nop

c00130d2 <Filesystem::~Filesystem()>:
c00130d2:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c00130d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130db:	89 10                	mov    DWORD PTR [eax],edx
c00130dd:	90                   	nop
c00130de:	c3                   	ret    
c00130df:	90                   	nop

c00130e0 <Filesystem::~Filesystem()>:
c00130e0:	83 ec 0c             	sub    esp,0xc
c00130e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130e7:	e8 e6 ff ff ff       	call   c00130d2 <Filesystem::~Filesystem()>
c00130ec:	83 c4 04             	add    esp,0x4
c00130ef:	83 ec 08             	sub    esp,0x8
c00130f2:	6a 08                	push   0x8
c00130f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f8:	e8 c6 fb ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00130fd:	83 c4 10             	add    esp,0x10
c0013100:	83 c4 0c             	add    esp,0xc
c0013103:	c3                   	ret    

c0013104 <Fs::getcwd(Process*, char*, int)>:
c0013104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013108:	31 c0                	xor    eax,eax
c001310a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001310d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013111:	7d 15                	jge    c0013128 <Fs::getcwd(Process*, char*, int)+0x24>
c0013113:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013117:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001311e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013121:	84 c9                	test   cl,cl
c0013123:	74 06                	je     c001312b <Fs::getcwd(Process*, char*, int)+0x27>
c0013125:	40                   	inc    eax
c0013126:	eb e2                	jmp    c001310a <Fs::getcwd(Process*, char*, int)+0x6>
c0013128:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001312b:	31 c0                	xor    eax,eax
c001312d:	c3                   	ret    

c001312e <Fs::initVFS()>:
c001312e:	83 ec 18             	sub    esp,0x18
c0013131:	6a 08                	push   0x8
c0013133:	e8 13 c7 ff ff       	call   c000f84b <malloc>
c0013138:	89 04 24             	mov    DWORD PTR [esp],eax
c001313b:	e8 ec dd 00 00       	call   c0020f2c <FAT::FAT()>
c0013140:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013147:	e8 ff c6 ff ff       	call   c000f84b <malloc>
c001314c:	89 04 24             	mov    DWORD PTR [esp],eax
c001314f:	e8 30 f0 00 00       	call   c0022184 <ISO9660::ISO9660()>
c0013154:	83 c4 1c             	add    esp,0x1c
c0013157:	c3                   	ret    

c0013158 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013158:	55                   	push   ebp
c0013159:	57                   	push   edi
c001315a:	56                   	push   esi
c001315b:	53                   	push   ebx
c001315c:	81 ec 10 04 00 00    	sub    esp,0x410
c0013162:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013169:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013170:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013177:	68 00 04 00 00       	push   0x400
c001317c:	6a 00                	push   0x0
c001317e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013182:	56                   	push   esi
c0013183:	e8 f8 d5 fe ff       	call   c0000780 <memset>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001318f:	75 0b                	jne    c001319c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013191:	50                   	push   eax
c0013192:	50                   	push   eax
c0013193:	57                   	push   edi
c0013194:	56                   	push   esi
c0013195:	e8 a2 d6 fe ff       	call   c000083c <strcpy>
c001319a:	eb 41                	jmp    c00131dd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001319c:	8a 07                	mov    al,BYTE PTR [edi]
c001319e:	3c 5c                	cmp    al,0x5c
c00131a0:	74 04                	je     c00131a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00131a2:	3c 2f                	cmp    al,0x2f
c00131a4:	75 18                	jne    c00131be <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00131a6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00131a9:	3c 60                	cmp    al,0x60
c00131ab:	7e 03                	jle    c00131b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00131ad:	83 e8 20             	sub    eax,0x20
c00131b0:	88 04 24             	mov    BYTE PTR [esp],al
c00131b3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131ba:	50                   	push   eax
c00131bb:	50                   	push   eax
c00131bc:	eb 18                	jmp    c00131d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131be:	50                   	push   eax
c00131bf:	50                   	push   eax
c00131c0:	55                   	push   ebp
c00131c1:	56                   	push   esi
c00131c2:	e8 75 d6 fe ff       	call   c000083c <strcpy>
c00131c7:	5a                   	pop    edx
c00131c8:	59                   	pop    ecx
c00131c9:	68 f1 c1 02 c0       	push   0xc002c1f1
c00131ce:	56                   	push   esi
c00131cf:	e8 a8 d7 fe ff       	call   c000097c <strcat>
c00131d4:	5d                   	pop    ebp
c00131d5:	58                   	pop    eax
c00131d6:	57                   	push   edi
c00131d7:	56                   	push   esi
c00131d8:	e8 9f d7 fe ff       	call   c000097c <strcat>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	8a 04 24             	mov    al,BYTE PTR [esp]
c00131e3:	3c 60                	cmp    al,0x60
c00131e5:	7e 03                	jle    c00131ea <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00131e7:	83 e8 20             	sub    eax,0x20
c00131ea:	88 04 24             	mov    BYTE PTR [esp],al
c00131ed:	88 03                	mov    BYTE PTR [ebx],al
c00131ef:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131f6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00131fc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013200:	bf 03 00 00 00       	mov    edi,0x3
c0013205:	b8 03 00 00 00       	mov    eax,0x3
c001320a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001320d:	84 d2                	test   dl,dl
c001320f:	0f 84 91 00 00 00    	je     c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013215:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013218:	80 fa 5c             	cmp    dl,0x5c
c001321b:	74 05                	je     c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001321d:	80 fa 2f             	cmp    dl,0x2f
c0013220:	75 12                	jne    c0013234 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013222:	89 c5                	mov    ebp,eax
c0013224:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013229:	74 09                	je     c0013234 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001322b:	40                   	inc    eax
c001322c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013230:	89 cf                	mov    edi,ecx
c0013232:	eb d6                	jmp    c001320a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013234:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013239:	75 5b                	jne    c0013296 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001323b:	80 fa 2e             	cmp    dl,0x2e
c001323e:	75 56                	jne    c0013296 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013240:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013244:	74 19                	je     c001325f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013246:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001324b:	74 53                	je     c00132a0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001324d:	89 f9                	mov    ecx,edi
c001324f:	41                   	inc    ecx
c0013250:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013253:	80 fa 2f             	cmp    dl,0x2f
c0013256:	74 f7                	je     c001324f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013258:	80 fa 5c             	cmp    dl,0x5c
c001325b:	74 f2                	je     c001324f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001325d:	eb d1                	jmp    c0013230 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001325f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013264:	74 3a                	je     c00132a0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013266:	83 f8 03             	cmp    eax,0x3
c0013269:	74 c5                	je     c0013230 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001326b:	41                   	inc    ecx
c001326c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001326f:	80 fa 2f             	cmp    dl,0x2f
c0013272:	74 f7                	je     c001326b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013274:	80 fa 5c             	cmp    dl,0x5c
c0013277:	74 f2                	je     c001326b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013279:	48                   	dec    eax
c001327a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001327e:	75 06                	jne    c0013286 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013280:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013284:	eb f3                	jmp    c0013279 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013286:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001328a:	74 07                	je     c0013293 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001328c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013290:	48                   	dec    eax
c0013291:	eb f3                	jmp    c0013286 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013293:	40                   	inc    eax
c0013294:	eb 9a                	jmp    c0013230 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013296:	80 fa 2f             	cmp    dl,0x2f
c0013299:	74 95                	je     c0013230 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001329b:	80 fa 5c             	cmp    dl,0x5c
c001329e:	74 90                	je     c0013230 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132a0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00132a3:	40                   	inc    eax
c00132a4:	eb 8a                	jmp    c0013230 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132a6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132aa:	83 ec 0c             	sub    esp,0xc
c00132ad:	53                   	push   ebx
c00132ae:	e8 e9 d4 fe ff       	call   c000079c <strlen>
c00132b3:	83 c4 10             	add    esp,0x10
c00132b6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132bb:	75 26                	jne    c00132e3 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132bd:	83 ec 0c             	sub    esp,0xc
c00132c0:	53                   	push   ebx
c00132c1:	e8 d6 d4 fe ff       	call   c000079c <strlen>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132ce:	74 26                	je     c00132f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	53                   	push   ebx
c00132d4:	e8 c3 d4 fe ff       	call   c000079c <strlen>
c00132d9:	83 c4 10             	add    esp,0x10
c00132dc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00132e1:	eb c7                	jmp    c00132aa <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00132e3:	83 ec 0c             	sub    esp,0xc
c00132e6:	53                   	push   ebx
c00132e7:	e8 b0 d4 fe ff       	call   c000079c <strlen>
c00132ec:	83 c4 10             	add    esp,0x10
c00132ef:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132f4:	74 c7                	je     c00132bd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00132f6:	81 c4 0c 04 00 00    	add    esp,0x40c
c00132fc:	5b                   	pop    ebx
c00132fd:	5e                   	pop    esi
c00132fe:	5f                   	pop    edi
c00132ff:	5d                   	pop    ebp
c0013300:	c3                   	ret    
c0013301:	90                   	nop

c0013302 <File::File(char const*, Process*)>:
c0013302:	83 ec 0c             	sub    esp,0xc
c0013305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013309:	83 ec 08             	sub    esp,0x8
c001330c:	6a 00                	push   0x0
c001330e:	50                   	push   eax
c001330f:	e8 78 e2 ff ff       	call   c001158c <UnixFile::UnixFile(int)>
c0013314:	83 c4 10             	add    esp,0x10
c0013317:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c001331c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013320:	89 10                	mov    DWORD PTR [eax],edx
c0013322:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013326:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001332c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013330:	83 c0 0d             	add    eax,0xd
c0013333:	83 ec 04             	sub    esp,0x4
c0013336:	52                   	push   edx
c0013337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001333b:	50                   	push   eax
c001333c:	e8 17 fe ff ff       	call   c0013158 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013341:	83 c4 10             	add    esp,0x10
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001334b:	8d 50 bf             	lea    edx,[eax-0x41]
c001334e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013352:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013360:	90                   	nop
c0013361:	83 c4 0c             	add    esp,0xc
c0013364:	c3                   	ret    
c0013365:	90                   	nop

c0013366 <File::open(FileOpenMode)>:
c0013366:	53                   	push   ebx
c0013367:	b8 0b 00 00 00       	mov    eax,0xb
c001336c:	83 ec 08             	sub    esp,0x8
c001336f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013373:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001337a:	80 fa 19             	cmp    dl,0x19
c001337d:	77 40                	ja     c00133bf <File::open(FileOpenMode)+0x59>
c001337f:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c0013386:	85 d2                	test   edx,edx
c0013388:	74 35                	je     c00133bf <File::open(FileOpenMode)+0x59>
c001338a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013390:	85 d2                	test   edx,edx
c0013392:	74 2b                	je     c00133bf <File::open(FileOpenMode)+0x59>
c0013394:	b8 06 00 00 00       	mov    eax,0x6
c0013399:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001339d:	75 20                	jne    c00133bf <File::open(FileOpenMode)+0x59>
c001339f:	8b 02                	mov    eax,DWORD PTR [edx]
c00133a1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133ab:	51                   	push   ecx
c00133ac:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133af:	51                   	push   ecx
c00133b0:	52                   	push   edx
c00133b1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133b4:	83 c4 10             	add    esp,0x10
c00133b7:	85 c0                	test   eax,eax
c00133b9:	75 04                	jne    c00133bf <File::open(FileOpenMode)+0x59>
c00133bb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133bf:	83 c4 08             	add    esp,0x8
c00133c2:	5b                   	pop    ebx
c00133c3:	c3                   	ret    

c00133c4 <File::close()>:
c00133c4:	53                   	push   ebx
c00133c5:	b8 0b 00 00 00       	mov    eax,0xb
c00133ca:	83 ec 08             	sub    esp,0x8
c00133cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133d1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133d8:	80 fa 19             	cmp    dl,0x19
c00133db:	77 41                	ja     c001341e <File::close()+0x5a>
c00133dd:	8b 1c 95 60 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd15a0]
c00133e4:	85 db                	test   ebx,ebx
c00133e6:	74 36                	je     c001341e <File::close()+0x5a>
c00133e8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133ef:	74 2d                	je     c001341e <File::close()+0x5a>
c00133f1:	b8 05 00 00 00       	mov    eax,0x5
c00133f6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133fa:	74 22                	je     c001341e <File::close()+0x5a>
c00133fc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013400:	8b 04 95 60 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15a0]
c0013407:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001340d:	53                   	push   ebx
c001340e:	53                   	push   ebx
c001340f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013411:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013417:	50                   	push   eax
c0013418:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001341b:	83 c4 10             	add    esp,0x10
c001341e:	83 c4 08             	add    esp,0x8
c0013421:	5b                   	pop    ebx
c0013422:	c3                   	ret    
c0013423:	90                   	nop

c0013424 <File::seek(unsigned long long)>:
c0013424:	56                   	push   esi
c0013425:	53                   	push   ebx
c0013426:	b8 0b 00 00 00       	mov    eax,0xb
c001342b:	51                   	push   ecx
c001342c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013430:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013434:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001343b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001343f:	80 fa 19             	cmp    dl,0x19
c0013442:	77 31                	ja     c0013475 <File::seek(unsigned long long)+0x51>
c0013444:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c001344b:	85 d2                	test   edx,edx
c001344d:	74 26                	je     c0013475 <File::seek(unsigned long long)+0x51>
c001344f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013455:	85 d2                	test   edx,edx
c0013457:	74 1c                	je     c0013475 <File::seek(unsigned long long)+0x51>
c0013459:	b8 05 00 00 00       	mov    eax,0x5
c001345e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013462:	74 11                	je     c0013475 <File::seek(unsigned long long)+0x51>
c0013464:	8b 02                	mov    eax,DWORD PTR [edx]
c0013466:	53                   	push   ebx
c0013467:	51                   	push   ecx
c0013468:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001346e:	52                   	push   edx
c001346f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013472:	83 c4 10             	add    esp,0x10
c0013475:	5a                   	pop    edx
c0013476:	5b                   	pop    ebx
c0013477:	5e                   	pop    esi
c0013478:	c3                   	ret    
c0013479:	90                   	nop

c001347a <File::tell(unsigned long long*)>:
c001347a:	83 ec 0c             	sub    esp,0xc
c001347d:	b8 0b 00 00 00       	mov    eax,0xb
c0013482:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013486:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001348d:	80 fa 19             	cmp    dl,0x19
c0013490:	77 34                	ja     c00134c6 <File::tell(unsigned long long*)+0x4c>
c0013492:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c0013499:	85 d2                	test   edx,edx
c001349b:	74 29                	je     c00134c6 <File::tell(unsigned long long*)+0x4c>
c001349d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134a3:	85 d2                	test   edx,edx
c00134a5:	74 1f                	je     c00134c6 <File::tell(unsigned long long*)+0x4c>
c00134a7:	b8 05 00 00 00       	mov    eax,0x5
c00134ac:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134b0:	74 14                	je     c00134c6 <File::tell(unsigned long long*)+0x4c>
c00134b2:	50                   	push   eax
c00134b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00134b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134b9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134bf:	52                   	push   edx
c00134c0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134c3:	83 c4 10             	add    esp,0x10
c00134c6:	83 c4 0c             	add    esp,0xc
c00134c9:	c3                   	ret    

c00134ca <File::rewind()>:
c00134ca:	83 ec 10             	sub    esp,0x10
c00134cd:	6a 00                	push   0x0
c00134cf:	6a 00                	push   0x0
c00134d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d5:	e8 4a ff ff ff       	call   c0013424 <File::seek(unsigned long long)>
c00134da:	83 c4 1c             	add    esp,0x1c
c00134dd:	c3                   	ret    

c00134de <File::unlink()>:
c00134de:	83 ec 0c             	sub    esp,0xc
c00134e1:	b8 0b 00 00 00       	mov    eax,0xb
c00134e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134f1:	80 f9 19             	cmp    cl,0x19
c00134f4:	77 2f                	ja     c0013525 <File::unlink()+0x47>
c00134f6:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c00134fd:	85 c9                	test   ecx,ecx
c00134ff:	74 24                	je     c0013525 <File::unlink()+0x47>
c0013501:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013507:	85 c9                	test   ecx,ecx
c0013509:	74 1a                	je     c0013525 <File::unlink()+0x47>
c001350b:	b8 06 00 00 00       	mov    eax,0x6
c0013510:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013514:	75 0f                	jne    c0013525 <File::unlink()+0x47>
c0013516:	83 c2 0d             	add    edx,0xd
c0013519:	50                   	push   eax
c001351a:	50                   	push   eax
c001351b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001351d:	52                   	push   edx
c001351e:	51                   	push   ecx
c001351f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	83 c4 0c             	add    esp,0xc
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <File::rename(char const*)>:
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	b8 0b 00 00 00       	mov    eax,0xb
c0013532:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013536:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001353d:	80 f9 19             	cmp    cl,0x19
c0013540:	77 32                	ja     c0013574 <File::rename(char const*)+0x4a>
c0013542:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c0013549:	85 c9                	test   ecx,ecx
c001354b:	74 27                	je     c0013574 <File::rename(char const*)+0x4a>
c001354d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013553:	85 c9                	test   ecx,ecx
c0013555:	74 1d                	je     c0013574 <File::rename(char const*)+0x4a>
c0013557:	b8 06 00 00 00       	mov    eax,0x6
c001355c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013560:	75 12                	jne    c0013574 <File::rename(char const*)+0x4a>
c0013562:	83 c2 0d             	add    edx,0xd
c0013565:	50                   	push   eax
c0013566:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001356c:	52                   	push   edx
c001356d:	51                   	push   ecx
c001356e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013571:	83 c4 10             	add    esp,0x10
c0013574:	83 c4 0c             	add    esp,0xc
c0013577:	c3                   	ret    

c0013578 <File::chfatattr(unsigned char, unsigned char)>:
c0013578:	57                   	push   edi
c0013579:	b8 0b 00 00 00       	mov    eax,0xb
c001357e:	56                   	push   esi
c001357f:	53                   	push   ebx
c0013580:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013584:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013588:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001358f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013593:	80 f9 19             	cmp    cl,0x19
c0013596:	77 37                	ja     c00135cf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013598:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c001359f:	85 c9                	test   ecx,ecx
c00135a1:	74 2c                	je     c00135cf <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135a9:	85 c9                	test   ecx,ecx
c00135ab:	74 22                	je     c00135cf <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135ad:	b8 06 00 00 00       	mov    eax,0x6
c00135b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135b6:	75 17                	jne    c00135cf <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135b8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135ba:	89 f0                	mov    eax,esi
c00135bc:	83 c2 0d             	add    edx,0xd
c00135bf:	0f b6 f0             	movzx  esi,al
c00135c2:	0f b6 db             	movzx  ebx,bl
c00135c5:	56                   	push   esi
c00135c6:	53                   	push   ebx
c00135c7:	52                   	push   edx
c00135c8:	51                   	push   ecx
c00135c9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135cc:	83 c4 10             	add    esp,0x10
c00135cf:	5b                   	pop    ebx
c00135d0:	5e                   	pop    esi
c00135d1:	5f                   	pop    edi
c00135d2:	c3                   	ret    
c00135d3:	90                   	nop

c00135d4 <File::exists()>:
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	31 c0                	xor    eax,eax
c00135d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135dd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135e4:	80 f9 19             	cmp    cl,0x19
c00135e7:	77 24                	ja     c001360d <File::exists()+0x39>
c00135e9:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c00135f0:	85 c9                	test   ecx,ecx
c00135f2:	74 19                	je     c001360d <File::exists()+0x39>
c00135f4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135fa:	85 c9                	test   ecx,ecx
c00135fc:	74 0f                	je     c001360d <File::exists()+0x39>
c00135fe:	83 c2 0d             	add    edx,0xd
c0013601:	50                   	push   eax
c0013602:	50                   	push   eax
c0013603:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013605:	52                   	push   edx
c0013606:	51                   	push   ecx
c0013607:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001360a:	83 c4 10             	add    esp,0x10
c001360d:	83 c4 0c             	add    esp,0xc
c0013610:	c3                   	ret    
c0013611:	90                   	nop

c0013612 <File::stat(unsigned long long*, bool*)>:
c0013612:	56                   	push   esi
c0013613:	53                   	push   ebx
c0013614:	50                   	push   eax
c0013615:	b8 0b 00 00 00       	mov    eax,0xb
c001361a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001361e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013622:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013629:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001362d:	80 f9 19             	cmp    cl,0x19
c0013630:	77 3d                	ja     c001366f <File::stat(unsigned long long*, bool*)+0x5d>
c0013632:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c0013639:	85 c9                	test   ecx,ecx
c001363b:	74 32                	je     c001366f <File::stat(unsigned long long*, bool*)+0x5d>
c001363d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013643:	85 c9                	test   ecx,ecx
c0013645:	74 28                	je     c001366f <File::stat(unsigned long long*, bool*)+0x5d>
c0013647:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013649:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001364d:	74 13                	je     c0013662 <File::stat(unsigned long long*, bool*)+0x50>
c001364f:	83 ec 04             	sub    esp,0x4
c0013652:	56                   	push   esi
c0013653:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013659:	51                   	push   ecx
c001365a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001365d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013660:	eb 0a                	jmp    c001366c <File::stat(unsigned long long*, bool*)+0x5a>
c0013662:	53                   	push   ebx
c0013663:	83 c2 0d             	add    edx,0xd
c0013666:	56                   	push   esi
c0013667:	52                   	push   edx
c0013668:	51                   	push   ecx
c0013669:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001366c:	83 c4 10             	add    esp,0x10
c001366f:	5a                   	pop    edx
c0013670:	5b                   	pop    ebx
c0013671:	5e                   	pop    esi
c0013672:	c3                   	ret    

c0013673 <Fs::setcwd(Process*, char*)>:
c0013673:	55                   	push   ebp
c0013674:	57                   	push   edi
c0013675:	56                   	push   esi
c0013676:	53                   	push   ebx
c0013677:	81 ec 20 02 00 00    	sub    esp,0x220
c001367d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013684:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001368a:	57                   	push   edi
c001368b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013692:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013696:	56                   	push   esi
c0013697:	e8 bc fa ff ff       	call   c0013158 <Fs::standardiseFiles(char*, char const*, char const*)>
c001369c:	89 34 24             	mov    DWORD PTR [esp],esi
c001369f:	e8 f8 d0 fe ff       	call   c000079c <strlen>
c00136a4:	83 c4 10             	add    esp,0x10
c00136a7:	83 f8 02             	cmp    eax,0x2
c00136aa:	77 17                	ja     c00136c3 <Fs::setcwd(Process*, char*)+0x50>
c00136ac:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136b1:	83 e8 41             	sub    eax,0x41
c00136b4:	83 f8 19             	cmp    eax,0x19
c00136b7:	76 24                	jbe    c00136dd <Fs::setcwd(Process*, char*)+0x6a>
c00136b9:	b8 03 00 00 00       	mov    eax,0x3
c00136be:	e9 e0 00 00 00       	jmp    c00137a3 <Fs::setcwd(Process*, char*)+0x130>
c00136c3:	83 ec 0c             	sub    esp,0xc
c00136c6:	56                   	push   esi
c00136c7:	e8 d0 d0 fe ff       	call   c000079c <strlen>
c00136cc:	83 c4 10             	add    esp,0x10
c00136cf:	83 f8 03             	cmp    eax,0x3
c00136d2:	75 34                	jne    c0013708 <Fs::setcwd(Process*, char*)+0x95>
c00136d4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00136d9:	75 2d                	jne    c0013708 <Fs::setcwd(Process*, char*)+0x95>
c00136db:	eb cf                	jmp    c00136ac <Fs::setcwd(Process*, char*)+0x39>
c00136dd:	8b 14 85 60 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15a0]
c00136e4:	b8 05 00 00 00       	mov    eax,0x5
c00136e9:	85 d2                	test   edx,edx
c00136eb:	0f 84 b2 00 00 00    	je     c00137a3 <Fs::setcwd(Process*, char*)+0x130>
c00136f1:	b8 06 00 00 00       	mov    eax,0x6
c00136f6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00136fd:	0f 85 92 00 00 00    	jne    c0013795 <Fs::setcwd(Process*, char*)+0x122>
c0013703:	e9 9b 00 00 00       	jmp    c00137a3 <Fs::setcwd(Process*, char*)+0x130>
c0013708:	83 ec 0c             	sub    esp,0xc
c001370b:	68 14 01 00 00       	push   0x114
c0013710:	e8 36 c1 ff ff       	call   c000f84b <malloc>
c0013715:	83 c4 0c             	add    esp,0xc
c0013718:	89 c3                	mov    ebx,eax
c001371a:	55                   	push   ebp
c001371b:	56                   	push   esi
c001371c:	50                   	push   eax
c001371d:	e8 e0 fb ff ff       	call   c0013302 <File::File(char const*, Process*)>
c0013722:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013727:	83 c4 0c             	add    esp,0xc
c001372a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001372e:	50                   	push   eax
c001372f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013733:	50                   	push   eax
c0013734:	53                   	push   ebx
c0013735:	e8 d8 fe ff ff       	call   c0013612 <File::stat(unsigned long long*, bool*)>
c001373a:	83 c4 10             	add    esp,0x10
c001373d:	83 f8 02             	cmp    eax,0x2
c0013740:	74 04                	je     c0013746 <Fs::setcwd(Process*, char*)+0xd3>
c0013742:	85 c0                	test   eax,eax
c0013744:	74 1c                	je     c0013762 <Fs::setcwd(Process*, char*)+0xef>
c0013746:	b8 01 00 00 00       	mov    eax,0x1
c001374b:	85 db                	test   ebx,ebx
c001374d:	74 54                	je     c00137a3 <Fs::setcwd(Process*, char*)+0x130>
c001374f:	83 ec 0c             	sub    esp,0xc
c0013752:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013754:	53                   	push   ebx
c0013755:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	b8 01 00 00 00       	mov    eax,0x1
c0013760:	eb 41                	jmp    c00137a3 <Fs::setcwd(Process*, char*)+0x130>
c0013762:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013767:	75 1c                	jne    c0013785 <Fs::setcwd(Process*, char*)+0x112>
c0013769:	b8 02 00 00 00       	mov    eax,0x2
c001376e:	85 db                	test   ebx,ebx
c0013770:	74 31                	je     c00137a3 <Fs::setcwd(Process*, char*)+0x130>
c0013772:	83 ec 0c             	sub    esp,0xc
c0013775:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013777:	53                   	push   ebx
c0013778:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001377b:	83 c4 10             	add    esp,0x10
c001377e:	b8 02 00 00 00       	mov    eax,0x2
c0013783:	eb 1e                	jmp    c00137a3 <Fs::setcwd(Process*, char*)+0x130>
c0013785:	85 db                	test   ebx,ebx
c0013787:	74 0c                	je     c0013795 <Fs::setcwd(Process*, char*)+0x122>
c0013789:	83 ec 0c             	sub    esp,0xc
c001378c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001378e:	53                   	push   ebx
c001378f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013792:	83 c4 10             	add    esp,0x10
c0013795:	50                   	push   eax
c0013796:	50                   	push   eax
c0013797:	56                   	push   esi
c0013798:	57                   	push   edi
c0013799:	e8 9e d0 fe ff       	call   c000083c <strcpy>
c001379e:	83 c4 10             	add    esp,0x10
c00137a1:	31 c0                	xor    eax,eax
c00137a3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00137a9:	5b                   	pop    ebx
c00137aa:	5e                   	pop    esi
c00137ab:	5f                   	pop    edi
c00137ac:	5d                   	pop    ebp
c00137ad:	c3                   	ret    

c00137ae <Directory::Directory(char const*, Process*)>:
c00137ae:	83 ec 0c             	sub    esp,0xc
c00137b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b5:	83 ec 08             	sub    esp,0x8
c00137b8:	6a 00                	push   0x0
c00137ba:	50                   	push   eax
c00137bb:	e8 cc dd ff ff       	call   c001158c <UnixFile::UnixFile(int)>
c00137c0:	83 c4 10             	add    esp,0x10
c00137c3:	ba 20 ab 02 c0       	mov    edx,0xc002ab20
c00137c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137cc:	89 10                	mov    DWORD PTR [eax],edx
c00137ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137dc:	83 c0 0d             	add    eax,0xd
c00137df:	83 ec 04             	sub    esp,0x4
c00137e2:	52                   	push   edx
c00137e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137e7:	50                   	push   eax
c00137e8:	e8 6b f9 ff ff       	call   c0013158 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137ed:	83 c4 10             	add    esp,0x10
c00137f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00137f7:	8d 50 bf             	lea    edx,[eax-0x41]
c00137fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013808:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001380c:	90                   	nop
c001380d:	83 c4 0c             	add    esp,0xc
c0013810:	c3                   	ret    
c0013811:	90                   	nop

c0013812 <Directory::open()>:
c0013812:	53                   	push   ebx
c0013813:	b8 0b 00 00 00       	mov    eax,0xb
c0013818:	83 ec 08             	sub    esp,0x8
c001381b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001381f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013826:	80 fa 19             	cmp    dl,0x19
c0013829:	77 3d                	ja     c0013868 <Directory::open()+0x56>
c001382b:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c0013832:	85 d2                	test   edx,edx
c0013834:	74 32                	je     c0013868 <Directory::open()+0x56>
c0013836:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001383c:	85 d2                	test   edx,edx
c001383e:	74 28                	je     c0013868 <Directory::open()+0x56>
c0013840:	b8 06 00 00 00       	mov    eax,0x6
c0013845:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013849:	75 1d                	jne    c0013868 <Directory::open()+0x56>
c001384b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013851:	50                   	push   eax
c0013852:	8b 02                	mov    eax,DWORD PTR [edx]
c0013854:	51                   	push   ecx
c0013855:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013858:	51                   	push   ecx
c0013859:	52                   	push   edx
c001385a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001385d:	83 c4 10             	add    esp,0x10
c0013860:	85 c0                	test   eax,eax
c0013862:	75 04                	jne    c0013868 <Directory::open()+0x56>
c0013864:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013868:	83 c4 08             	add    esp,0x8
c001386b:	5b                   	pop    ebx
c001386c:	c3                   	ret    
c001386d:	90                   	nop

c001386e <Directory::close()>:
c001386e:	53                   	push   ebx
c001386f:	b8 0b 00 00 00       	mov    eax,0xb
c0013874:	83 ec 08             	sub    esp,0x8
c0013877:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001387b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013882:	80 fa 19             	cmp    dl,0x19
c0013885:	77 41                	ja     c00138c8 <Directory::close()+0x5a>
c0013887:	8b 1c 95 60 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd15a0]
c001388e:	85 db                	test   ebx,ebx
c0013890:	74 36                	je     c00138c8 <Directory::close()+0x5a>
c0013892:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013899:	74 2d                	je     c00138c8 <Directory::close()+0x5a>
c001389b:	b8 05 00 00 00       	mov    eax,0x5
c00138a0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138a4:	74 22                	je     c00138c8 <Directory::close()+0x5a>
c00138a6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138aa:	8b 04 95 60 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15a0]
c00138b1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138b7:	53                   	push   ebx
c00138b8:	53                   	push   ebx
c00138b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00138bb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138c1:	50                   	push   eax
c00138c2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138c5:	83 c4 10             	add    esp,0x10
c00138c8:	83 c4 08             	add    esp,0x8
c00138cb:	5b                   	pop    ebx
c00138cc:	c3                   	ret    
c00138cd:	90                   	nop

c00138ce <Directory::unlink()>:
c00138ce:	83 ec 0c             	sub    esp,0xc
c00138d1:	b8 0b 00 00 00       	mov    eax,0xb
c00138d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00138e1:	80 f9 19             	cmp    cl,0x19
c00138e4:	77 2f                	ja     c0013915 <Directory::unlink()+0x47>
c00138e6:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c00138ed:	85 c9                	test   ecx,ecx
c00138ef:	74 24                	je     c0013915 <Directory::unlink()+0x47>
c00138f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138f7:	85 c9                	test   ecx,ecx
c00138f9:	74 1a                	je     c0013915 <Directory::unlink()+0x47>
c00138fb:	b8 06 00 00 00       	mov    eax,0x6
c0013900:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013904:	75 0f                	jne    c0013915 <Directory::unlink()+0x47>
c0013906:	83 c2 0d             	add    edx,0xd
c0013909:	50                   	push   eax
c001390a:	50                   	push   eax
c001390b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001390d:	52                   	push   edx
c001390e:	51                   	push   ecx
c001390f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013912:	83 c4 10             	add    esp,0x10
c0013915:	83 c4 0c             	add    esp,0xc
c0013918:	c3                   	ret    
c0013919:	90                   	nop

c001391a <Directory::rename(char const*)>:
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	b8 0b 00 00 00       	mov    eax,0xb
c0013922:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013926:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001392d:	80 f9 19             	cmp    cl,0x19
c0013930:	77 32                	ja     c0013964 <Directory::rename(char const*)+0x4a>
c0013932:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c0013939:	85 c9                	test   ecx,ecx
c001393b:	74 27                	je     c0013964 <Directory::rename(char const*)+0x4a>
c001393d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013943:	85 c9                	test   ecx,ecx
c0013945:	74 1d                	je     c0013964 <Directory::rename(char const*)+0x4a>
c0013947:	b8 06 00 00 00       	mov    eax,0x6
c001394c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013950:	75 12                	jne    c0013964 <Directory::rename(char const*)+0x4a>
c0013952:	83 c2 0d             	add    edx,0xd
c0013955:	50                   	push   eax
c0013956:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001395c:	52                   	push   edx
c001395d:	51                   	push   ecx
c001395e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013961:	83 c4 10             	add    esp,0x10
c0013964:	83 c4 0c             	add    esp,0xc
c0013967:	c3                   	ret    

c0013968 <Directory::exists()>:
c0013968:	83 ec 0c             	sub    esp,0xc
c001396b:	31 c0                	xor    eax,eax
c001396d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013971:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013978:	80 f9 19             	cmp    cl,0x19
c001397b:	77 24                	ja     c00139a1 <Directory::exists()+0x39>
c001397d:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c0013984:	85 c9                	test   ecx,ecx
c0013986:	74 19                	je     c00139a1 <Directory::exists()+0x39>
c0013988:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001398e:	85 c9                	test   ecx,ecx
c0013990:	74 0f                	je     c00139a1 <Directory::exists()+0x39>
c0013992:	83 c2 0d             	add    edx,0xd
c0013995:	50                   	push   eax
c0013996:	50                   	push   eax
c0013997:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013999:	52                   	push   edx
c001399a:	51                   	push   ecx
c001399b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001399e:	83 c4 10             	add    esp,0x10
c00139a1:	83 c4 0c             	add    esp,0xc
c00139a4:	c3                   	ret    
c00139a5:	90                   	nop

c00139a6 <Directory::read(dirent*)>:
c00139a6:	83 ec 1c             	sub    esp,0x1c
c00139a9:	b8 0b 00 00 00       	mov    eax,0xb
c00139ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139b2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139b9:	80 fa 19             	cmp    dl,0x19
c00139bc:	77 30                	ja     c00139ee <Directory::read(dirent*)+0x48>
c00139be:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c00139c5:	85 d2                	test   edx,edx
c00139c7:	74 25                	je     c00139ee <Directory::read(dirent*)+0x48>
c00139c9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139d0:	74 1c                	je     c00139ee <Directory::read(dirent*)+0x48>
c00139d2:	83 ec 0c             	sub    esp,0xc
c00139d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139d7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139db:	52                   	push   edx
c00139dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00139e0:	6a 00                	push   0x0
c00139e2:	68 10 01 00 00       	push   0x110
c00139e7:	51                   	push   ecx
c00139e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139eb:	83 c4 20             	add    esp,0x20
c00139ee:	83 c4 1c             	add    esp,0x1c
c00139f1:	c3                   	ret    

c00139f2 <Directory::create()>:
c00139f2:	83 ec 0c             	sub    esp,0xc
c00139f5:	b8 0b 00 00 00       	mov    eax,0xb
c00139fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a05:	80 f9 19             	cmp    cl,0x19
c0013a08:	77 2f                	ja     c0013a39 <Directory::create()+0x47>
c0013a0a:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c0013a11:	85 c9                	test   ecx,ecx
c0013a13:	74 24                	je     c0013a39 <Directory::create()+0x47>
c0013a15:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a1b:	85 c9                	test   ecx,ecx
c0013a1d:	74 1a                	je     c0013a39 <Directory::create()+0x47>
c0013a1f:	b8 06 00 00 00       	mov    eax,0x6
c0013a24:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a28:	75 0f                	jne    c0013a39 <Directory::create()+0x47>
c0013a2a:	83 c2 0d             	add    edx,0xd
c0013a2d:	50                   	push   eax
c0013a2e:	50                   	push   eax
c0013a2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a31:	52                   	push   edx
c0013a32:	51                   	push   ecx
c0013a33:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a36:	83 c4 10             	add    esp,0x10
c0013a39:	83 c4 0c             	add    esp,0xc
c0013a3c:	c3                   	ret    
c0013a3d:	90                   	nop

c0013a3e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a3e:	b8 0a 00 00 00       	mov    eax,0xa
c0013a43:	c3                   	ret    

c0013a44 <Bus::Bus(char const*)>:
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4b:	83 ec 08             	sub    esp,0x8
c0013a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a52:	50                   	push   eax
c0013a53:	e8 68 09 00 00       	call   c00143c0 <Device::Device(char const*)>
c0013a58:	83 c4 10             	add    esp,0x10
c0013a5b:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c0013a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a64:	89 10                	mov    DWORD PTR [eax],edx
c0013a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a74:	90                   	nop
c0013a75:	83 c4 0c             	add    esp,0xc
c0013a78:	c3                   	ret    
c0013a79:	90                   	nop

c0013a7a <Bus::~Bus()>:
c0013a7a:	83 ec 0c             	sub    esp,0xc
c0013a7d:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c0013a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a86:	89 10                	mov    DWORD PTR [eax],edx
c0013a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8c:	83 ec 0c             	sub    esp,0xc
c0013a8f:	50                   	push   eax
c0013a90:	e8 0d 06 00 00       	call   c00140a2 <Device::~Device()>
c0013a95:	83 c4 10             	add    esp,0x10
c0013a98:	90                   	nop
c0013a99:	83 c4 0c             	add    esp,0xc
c0013a9c:	c3                   	ret    
c0013a9d:	90                   	nop

c0013a9e <Bus::~Bus()>:
c0013a9e:	83 ec 0c             	sub    esp,0xc
c0013aa1:	83 ec 0c             	sub    esp,0xc
c0013aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aa8:	e8 cd ff ff ff       	call   c0013a7a <Bus::~Bus()>
c0013aad:	83 c4 10             	add    esp,0x10
c0013ab0:	83 ec 08             	sub    esp,0x8
c0013ab3:	68 58 01 00 00       	push   0x158
c0013ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013abc:	e8 02 f2 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0013ac1:	83 c4 10             	add    esp,0x10
c0013ac4:	83 c4 0c             	add    esp,0xc
c0013ac7:	c3                   	ret    

c0013ac8 <Buzzer::Buzzer(char const*)>:
c0013ac8:	83 ec 0c             	sub    esp,0xc
c0013acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013acf:	83 ec 08             	sub    esp,0x8
c0013ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ad6:	50                   	push   eax
c0013ad7:	e8 e4 08 00 00       	call   c00143c0 <Device::Device(char const*)>
c0013adc:	83 c4 10             	add    esp,0x10
c0013adf:	ba 68 ab 02 c0       	mov    edx,0xc002ab68
c0013ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae8:	89 10                	mov    DWORD PTR [eax],edx
c0013aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b06:	90                   	nop
c0013b07:	83 c4 0c             	add    esp,0xc
c0013b0a:	c3                   	ret    
c0013b0b:	90                   	nop

c0013b0c <Buzzer::~Buzzer()>:
c0013b0c:	83 ec 0c             	sub    esp,0xc
c0013b0f:	ba 68 ab 02 c0       	mov    edx,0xc002ab68
c0013b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b18:	89 10                	mov    DWORD PTR [eax],edx
c0013b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1e:	83 ec 0c             	sub    esp,0xc
c0013b21:	50                   	push   eax
c0013b22:	e8 7b 05 00 00       	call   c00140a2 <Device::~Device()>
c0013b27:	83 c4 10             	add    esp,0x10
c0013b2a:	90                   	nop
c0013b2b:	83 c4 0c             	add    esp,0xc
c0013b2e:	c3                   	ret    
c0013b2f:	90                   	nop

c0013b30 <Buzzer::~Buzzer()>:
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	83 ec 0c             	sub    esp,0xc
c0013b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3a:	e8 cd ff ff ff       	call   c0013b0c <Buzzer::~Buzzer()>
c0013b3f:	83 c4 10             	add    esp,0x10
c0013b42:	83 ec 08             	sub    esp,0x8
c0013b45:	68 5c 01 00 00       	push   0x15c
c0013b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4e:	e8 70 f1 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0013b53:	83 c4 10             	add    esp,0x10
c0013b56:	83 c4 0c             	add    esp,0xc
c0013b59:	c3                   	ret    

c0013b5a <Buzzer::stop()>:
c0013b5a:	83 ec 14             	sub    esp,0x14
c0013b5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b61:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b63:	6a 00                	push   0x0
c0013b65:	50                   	push   eax
c0013b66:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b69:	83 c4 1c             	add    esp,0x1c
c0013b6c:	c3                   	ret    

c0013b6d <beepThread(void*)>:
c0013b6d:	53                   	push   ebx
c0013b6e:	83 ec 08             	sub    esp,0x8
c0013b71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b75:	e8 44 a1 00 00       	call   c001dcbe <unlockScheduler()>
c0013b7a:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013b7f:	52                   	push   edx
c0013b80:	52                   	push   edx
c0013b81:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013b87:	52                   	push   edx
c0013b88:	50                   	push   eax
c0013b89:	e8 b8 a6 00 00       	call   c001e246 <nanoSleep(unsigned long long)>
c0013b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b91:	e8 c4 ff ff ff       	call   c0013b5a <Buzzer::stop()>
c0013b96:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013b9e:	83 c4 18             	add    esp,0x18
c0013ba1:	5b                   	pop    ebx
c0013ba2:	e9 e5 a5 00 00       	jmp    c001e18c <blockTask(TaskState)>
c0013ba7:	90                   	nop

c0013ba8 <Buzzer::beep(int, int, bool)>:
c0013ba8:	57                   	push   edi
c0013ba9:	56                   	push   esi
c0013baa:	53                   	push   ebx
c0013bab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013baf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bb7:	52                   	push   edx
c0013bb8:	52                   	push   edx
c0013bb9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bbf:	56                   	push   esi
c0013bc0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013bc3:	83 c4 10             	add    esp,0x10
c0013bc6:	89 f8                	mov    eax,edi
c0013bc8:	84 c0                	test   al,al
c0013bca:	74 1f                	je     c0013beb <Buzzer::beep(int, int, bool)+0x43>
c0013bcc:	50                   	push   eax
c0013bcd:	50                   	push   eax
c0013bce:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bd4:	99                   	cdq    
c0013bd5:	52                   	push   edx
c0013bd6:	50                   	push   eax
c0013bd7:	e8 6a a6 00 00       	call   c001e246 <nanoSleep(unsigned long long)>
c0013bdc:	83 c4 10             	add    esp,0x10
c0013bdf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013be3:	5b                   	pop    ebx
c0013be4:	5e                   	pop    esi
c0013be5:	5f                   	pop    edi
c0013be6:	e9 6f ff ff ff       	jmp    c0013b5a <Buzzer::stop()>
c0013beb:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013bf1:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0013bf6:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013bfe:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c02:	c7 44 24 14 6d 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b6d
c0013c0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c0e:	5b                   	pop    ebx
c0013c0f:	5e                   	pop    esi
c0013c10:	5f                   	pop    edi
c0013c11:	e9 d8 a1 00 00       	jmp    c001ddee <Process::createThread(void (*)(void*), void*, int)>

c0013c16 <User::loadClockSettings(int)>:
c0013c16:	53                   	push   ebx
c0013c17:	83 ec 14             	sub    esp,0x14
c0013c1a:	68 14 01 00 00       	push   0x114
c0013c1f:	e8 27 bc ff ff       	call   c000f84b <malloc>
c0013c24:	83 c4 0c             	add    esp,0xc
c0013c27:	89 c3                	mov    ebx,eax
c0013c29:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c0013c2f:	68 90 ab 02 c0       	push   0xc002ab90
c0013c34:	50                   	push   eax
c0013c35:	e8 c8 f6 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c0013c3a:	58                   	pop    eax
c0013c3b:	5a                   	pop    edx
c0013c3c:	6a 01                	push   0x1
c0013c3e:	53                   	push   ebx
c0013c3f:	e8 22 f7 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c0013c44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c47:	e8 78 f7 ff ff       	call   c00133c4 <File::close()>
c0013c4c:	83 c4 10             	add    esp,0x10
c0013c4f:	85 db                	test   ebx,ebx
c0013c51:	74 0f                	je     c0013c62 <User::loadClockSettings(int)+0x4c>
c0013c53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c55:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c5c:	83 c4 08             	add    esp,0x8
c0013c5f:	5b                   	pop    ebx
c0013c60:	ff e0                	jmp    eax
c0013c62:	83 c4 08             	add    esp,0x8
c0013c65:	5b                   	pop    ebx
c0013c66:	c3                   	ret    
c0013c67:	90                   	nop

c0013c68 <Clock::Clock(char const*)>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6f:	83 ec 08             	sub    esp,0x8
c0013c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c76:	50                   	push   eax
c0013c77:	e8 44 07 00 00       	call   c00143c0 <Device::Device(char const*)>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	ba b8 ab 02 c0       	mov    edx,0xc002abb8
c0013c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c88:	89 10                	mov    DWORD PTR [eax],edx
c0013c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013c98:	90                   	nop
c0013c99:	83 c4 0c             	add    esp,0xc
c0013c9c:	c3                   	ret    
c0013c9d:	90                   	nop

c0013c9e <Clock::~Clock()>:
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	ba b8 ab 02 c0       	mov    edx,0xc002abb8
c0013ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013caa:	89 10                	mov    DWORD PTR [eax],edx
c0013cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb0:	83 ec 0c             	sub    esp,0xc
c0013cb3:	50                   	push   eax
c0013cb4:	e8 e9 03 00 00       	call   c00140a2 <Device::~Device()>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	90                   	nop
c0013cbd:	83 c4 0c             	add    esp,0xc
c0013cc0:	c3                   	ret    
c0013cc1:	90                   	nop

c0013cc2 <Clock::~Clock()>:
c0013cc2:	83 ec 0c             	sub    esp,0xc
c0013cc5:	83 ec 0c             	sub    esp,0xc
c0013cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ccc:	e8 cd ff ff ff       	call   c0013c9e <Clock::~Clock()>
c0013cd1:	83 c4 10             	add    esp,0x10
c0013cd4:	83 ec 08             	sub    esp,0x8
c0013cd7:	68 58 01 00 00       	push   0x158
c0013cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce0:	e8 de ef ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	83 c4 0c             	add    esp,0xc
c0013ceb:	c3                   	ret    

c0013cec <Clock::timeInSecondsLocal()>:
c0013cec:	53                   	push   ebx
c0013ced:	83 ec 14             	sub    esp,0x14
c0013cf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cf4:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cf6:	50                   	push   eax
c0013cf7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cfa:	0f b6 0d dc e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e5dc
c0013d01:	03 0d e0 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e5e0
c0013d07:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d0d:	89 cb                	mov    ebx,ecx
c0013d0f:	c1 fb 1f             	sar    ebx,0x1f
c0013d12:	01 c8                	add    eax,ecx
c0013d14:	11 da                	adc    edx,ebx
c0013d16:	83 c4 10             	add    esp,0x10
c0013d19:	31 c9                	xor    ecx,ecx
c0013d1b:	80 3d dd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5dd,0x0
c0013d22:	74 05                	je     c0013d29 <Clock::timeInSecondsLocal()+0x3d>
c0013d24:	b9 08 07 00 00       	mov    ecx,0x708
c0013d29:	31 db                	xor    ebx,ebx
c0013d2b:	01 c8                	add    eax,ecx
c0013d2d:	11 da                	adc    edx,ebx
c0013d2f:	83 c4 08             	add    esp,0x8
c0013d32:	5b                   	pop    ebx
c0013d33:	c3                   	ret    

c0013d34 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d34:	57                   	push   edi
c0013d35:	56                   	push   esi
c0013d36:	53                   	push   ebx
c0013d37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d3b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d45:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d48:	0f b6 05 dc e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e5dc
c0013d4f:	03 05 e0 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e5e0
c0013d55:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d5b:	99                   	cdq    
c0013d5c:	29 c6                	sub    esi,eax
c0013d5e:	19 d7                	sbb    edi,edx
c0013d60:	89 f0                	mov    eax,esi
c0013d62:	89 fa                	mov    edx,edi
c0013d64:	31 f6                	xor    esi,esi
c0013d66:	80 3d dd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5dd,0x0
c0013d6d:	74 05                	je     c0013d74 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d6f:	be 08 07 00 00       	mov    esi,0x708
c0013d74:	31 ff                	xor    edi,edi
c0013d76:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013d7a:	29 f0                	sub    eax,esi
c0013d7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d80:	19 fa                	sbb    edx,edi
c0013d82:	89 d8                	mov    eax,ebx
c0013d84:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013d88:	5b                   	pop    ebx
c0013d89:	5e                   	pop    esi
c0013d8a:	5f                   	pop    edi
c0013d8b:	ff e0                	jmp    eax

c0013d8d <datetimeToSeconds(datetime_t)>:
c0013d8d:	55                   	push   ebp
c0013d8e:	57                   	push   edi
c0013d8f:	56                   	push   esi
c0013d90:	53                   	push   ebx
c0013d91:	83 ec 14             	sub    esp,0x14
c0013d94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013d98:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013d9c:	89 d3                	mov    ebx,edx
c0013d9e:	0f b6 c6             	movzx  eax,dh
c0013da1:	c1 eb 10             	shr    ebx,0x10
c0013da4:	48                   	dec    eax
c0013da5:	66 81 eb 6c 07       	sub    bx,0x76c
c0013daa:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013dae:	0f b6 f5             	movzx  esi,ch
c0013db1:	89 cf                	mov    edi,ecx
c0013db3:	6b f6 3c             	imul   esi,esi,0x3c
c0013db6:	c1 ef 10             	shr    edi,0x10
c0013db9:	0f b6 c9             	movzx  ecx,cl
c0013dbc:	89 f8                	mov    eax,edi
c0013dbe:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013dc4:	0f b6 f8             	movzx  edi,al
c0013dc7:	0f b6 d2             	movzx  edx,dl
c0013dca:	01 fe                	add    esi,edi
c0013dcc:	01 f1                	add    ecx,esi
c0013dce:	0f b7 f3             	movzx  esi,bx
c0013dd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013dd5:	c1 f9 1f             	sar    ecx,0x1f
c0013dd8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ddd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013de1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013de6:	8b 0c 8d 00 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5400]
c0013ded:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013df1:	76 29                	jbe    c0013e1c <datetimeToSeconds(datetime_t)+0x8f>
c0013df3:	f6 c3 03             	test   bl,0x3
c0013df6:	75 24                	jne    c0013e1c <datetimeToSeconds(datetime_t)+0x8f>
c0013df8:	31 d2                	xor    edx,edx
c0013dfa:	bf 64 00 00 00       	mov    edi,0x64
c0013dff:	89 d8                	mov    eax,ebx
c0013e01:	66 f7 f7             	div    di
c0013e04:	66 85 d2             	test   dx,dx
c0013e07:	75 12                	jne    c0013e1b <datetimeToSeconds(datetime_t)+0x8e>
c0013e09:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e0f:	bf 90 01 00 00       	mov    edi,0x190
c0013e14:	99                   	cdq    
c0013e15:	f7 ff                	idiv   edi
c0013e17:	85 d2                	test   edx,edx
c0013e19:	75 01                	jne    c0013e1c <datetimeToSeconds(datetime_t)+0x8f>
c0013e1b:	41                   	inc    ecx
c0013e1c:	66 83 fb 46          	cmp    bx,0x46
c0013e20:	76 45                	jbe    c0013e67 <datetimeToSeconds(datetime_t)+0xda>
c0013e22:	bb 46 00 00 00       	mov    ebx,0x46
c0013e27:	bf 64 00 00 00       	mov    edi,0x64
c0013e2c:	bd 90 01 00 00       	mov    ebp,0x190
c0013e31:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e36:	f6 c3 03             	test   bl,0x3
c0013e39:	75 23                	jne    c0013e5e <datetimeToSeconds(datetime_t)+0xd1>
c0013e3b:	89 d8                	mov    eax,ebx
c0013e3d:	99                   	cdq    
c0013e3e:	f7 ff                	idiv   edi
c0013e40:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e45:	85 d2                	test   edx,edx
c0013e47:	75 15                	jne    c0013e5e <datetimeToSeconds(datetime_t)+0xd1>
c0013e49:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e4f:	99                   	cdq    
c0013e50:	f7 fd                	idiv   ebp
c0013e52:	83 fa 01             	cmp    edx,0x1
c0013e55:	19 c0                	sbb    eax,eax
c0013e57:	f7 d0                	not    eax
c0013e59:	05 6e 01 00 00       	add    eax,0x16e
c0013e5e:	01 c1                	add    ecx,eax
c0013e60:	43                   	inc    ebx
c0013e61:	39 f3                	cmp    ebx,esi
c0013e63:	7c cc                	jl     c0013e31 <datetimeToSeconds(datetime_t)+0xa4>
c0013e65:	eb 35                	jmp    c0013e9c <datetimeToSeconds(datetime_t)+0x10f>
c0013e67:	74 33                	je     c0013e9c <datetimeToSeconds(datetime_t)+0x10f>
c0013e69:	b8 45 00 00 00       	mov    eax,0x45
c0013e6e:	89 c2                	mov    edx,eax
c0013e70:	83 e2 03             	and    edx,0x3
c0013e73:	39 f0                	cmp    eax,esi
c0013e75:	7e 0f                	jle    c0013e86 <datetimeToSeconds(datetime_t)+0xf9>
c0013e77:	83 fa 01             	cmp    edx,0x1
c0013e7a:	19 d2                	sbb    edx,edx
c0013e7c:	48                   	dec    eax
c0013e7d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013e84:	eb e8                	jmp    c0013e6e <datetimeToSeconds(datetime_t)+0xe1>
c0013e86:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e8b:	85 d2                	test   edx,edx
c0013e8d:	75 0b                	jne    c0013e9a <datetimeToSeconds(datetime_t)+0x10d>
c0013e8f:	66 83 fb 01          	cmp    bx,0x1
c0013e93:	19 c0                	sbb    eax,eax
c0013e95:	05 6e 01 00 00       	add    eax,0x16e
c0013e9a:	29 c1                	sub    ecx,eax
c0013e9c:	b8 80 51 01 00       	mov    eax,0x15180
c0013ea1:	f7 e9                	imul   ecx
c0013ea3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ea7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013eab:	83 c4 14             	add    esp,0x14
c0013eae:	5b                   	pop    ebx
c0013eaf:	5e                   	pop    esi
c0013eb0:	5f                   	pop    edi
c0013eb1:	5d                   	pop    ebp
c0013eb2:	c3                   	ret    
c0013eb3:	90                   	nop

c0013eb4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013eb4:	57                   	push   edi
c0013eb5:	56                   	push   esi
c0013eb6:	53                   	push   ebx
c0013eb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ebb:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ebd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ec0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ec4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ec8:	e8 c0 fe ff ff       	call   c0013d8d <datetimeToSeconds(datetime_t)>
c0013ecd:	59                   	pop    ecx
c0013ece:	0f b6 0d dc e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e5dc
c0013ed5:	5b                   	pop    ebx
c0013ed6:	03 0d e0 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e5e0
c0013edc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ee2:	89 cb                	mov    ebx,ecx
c0013ee4:	c1 fb 1f             	sar    ebx,0x1f
c0013ee7:	29 c8                	sub    eax,ecx
c0013ee9:	19 da                	sbb    edx,ebx
c0013eeb:	31 c9                	xor    ecx,ecx
c0013eed:	80 3d dd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5dd,0x0
c0013ef4:	74 05                	je     c0013efb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013ef6:	b9 08 07 00 00       	mov    ecx,0x708
c0013efb:	31 db                	xor    ebx,ebx
c0013efd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f01:	29 c8                	sub    eax,ecx
c0013f03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f07:	19 da                	sbb    edx,ebx
c0013f09:	89 f8                	mov    eax,edi
c0013f0b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f0f:	5b                   	pop    ebx
c0013f10:	5e                   	pop    esi
c0013f11:	5f                   	pop    edi
c0013f12:	ff e0                	jmp    eax

c0013f14 <secondsToDatetime(unsigned long long)>:
c0013f14:	55                   	push   ebp
c0013f15:	57                   	push   edi
c0013f16:	56                   	push   esi
c0013f17:	53                   	push   ebx
c0013f18:	83 ec 1c             	sub    esp,0x1c
c0013f1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f1f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f23:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f27:	6a 00                	push   0x0
c0013f29:	68 80 51 01 00       	push   0x15180
c0013f2e:	55                   	push   ebp
c0013f2f:	57                   	push   edi
c0013f30:	e8 6f 2a 01 00       	call   c00269a4 <__udivdi3>
c0013f35:	83 c4 10             	add    esp,0x10
c0013f38:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f42:	6a 00                	push   0x0
c0013f44:	68 80 51 01 00       	push   0x15180
c0013f49:	55                   	push   ebp
c0013f4a:	57                   	push   edi
c0013f4b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f50:	e8 4f 2b 01 00       	call   c0026aa4 <__umoddi3>
c0013f55:	83 c4 10             	add    esp,0x10
c0013f58:	99                   	cdq    
c0013f59:	f7 ff                	idiv   edi
c0013f5b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f60:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f63:	89 d0                	mov    eax,edx
c0013f65:	99                   	cdq    
c0013f66:	f7 ff                	idiv   edi
c0013f68:	85 db                	test   ebx,ebx
c0013f6a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f6d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f70:	79 11                	jns    c0013f83 <secondsToDatetime(unsigned long long)+0x6f>
c0013f72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f76:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013f7c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f81:	eb 07                	jmp    c0013f8a <secondsToDatetime(unsigned long long)+0x76>
c0013f83:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f88:	89 d8                	mov    eax,ebx
c0013f8a:	bf b4 05 00 00       	mov    edi,0x5b4
c0013f8f:	99                   	cdq    
c0013f90:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013f95:	f7 f9                	idiv   ecx
c0013f97:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013f9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fa0:	31 d2                	xor    edx,edx
c0013fa2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013faa:	01 c3                	add    ebx,eax
c0013fac:	89 d8                	mov    eax,ebx
c0013fae:	f7 f1                	div    ecx
c0013fb0:	31 d2                	xor    edx,edx
c0013fb2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013fb5:	89 d8                	mov    eax,ebx
c0013fb7:	f7 f7                	div    edi
c0013fb9:	31 d2                	xor    edx,edx
c0013fbb:	29 c1                	sub    ecx,eax
c0013fbd:	89 d8                	mov    eax,ebx
c0013fbf:	f7 f5                	div    ebp
c0013fc1:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013fc6:	29 c1                	sub    ecx,eax
c0013fc8:	31 d2                	xor    edx,edx
c0013fca:	89 c8                	mov    eax,ecx
c0013fcc:	f7 f5                	div    ebp
c0013fce:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fd7:	31 d2                	xor    edx,edx
c0013fd9:	89 c8                	mov    eax,ecx
c0013fdb:	f7 f5                	div    ebp
c0013fdd:	31 d2                	xor    edx,edx
c0013fdf:	01 c3                	add    ebx,eax
c0013fe1:	89 c8                	mov    eax,ecx
c0013fe3:	f7 f7                	div    edi
c0013fe5:	bf 99 00 00 00       	mov    edi,0x99
c0013fea:	29 c3                	sub    ebx,eax
c0013fec:	31 d2                	xor    edx,edx
c0013fee:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013ff6:	29 c3                	sub    ebx,eax
c0013ff8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013ffb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013ffe:	bb 05 00 00 00       	mov    ebx,0x5
c0014003:	83 c1 02             	add    ecx,0x2
c0014006:	89 c8                	mov    eax,ecx
c0014008:	f7 f7                	div    edi
c001400a:	31 d2                	xor    edx,edx
c001400c:	89 c7                	mov    edi,eax
c001400e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014014:	83 c0 02             	add    eax,0x2
c0014017:	f7 f3                	div    ebx
c0014019:	89 eb                	mov    ebx,ebp
c001401b:	29 c3                	sub    ebx,eax
c001401d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014023:	88 1e                	mov    BYTE PTR [esi],bl
c0014025:	19 c0                	sbb    eax,eax
c0014027:	31 d2                	xor    edx,edx
c0014029:	83 e0 0c             	and    eax,0xc
c001402c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014030:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014038:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001403c:	83 f9 01             	cmp    ecx,0x1
c001403f:	0f 96 c2             	setbe  dl
c0014042:	41                   	inc    ecx
c0014043:	01 d0                	add    eax,edx
c0014045:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014048:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001404c:	83 c4 1c             	add    esp,0x1c
c001404f:	89 f0                	mov    eax,esi
c0014051:	5b                   	pop    ebx
c0014052:	5e                   	pop    esi
c0014053:	5f                   	pop    edi
c0014054:	5d                   	pop    ebp
c0014055:	c2 04 00             	ret    0x4

c0014058 <Clock::timeInDatetimeLocal()>:
c0014058:	53                   	push   ebx
c0014059:	83 ec 14             	sub    esp,0x14
c001405c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014060:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014064:	e8 83 fc ff ff       	call   c0013cec <Clock::timeInSecondsLocal()>
c0014069:	83 c4 0c             	add    esp,0xc
c001406c:	52                   	push   edx
c001406d:	50                   	push   eax
c001406e:	53                   	push   ebx
c001406f:	e8 a0 fe ff ff       	call   c0013f14 <secondsToDatetime(unsigned long long)>
c0014074:	89 d8                	mov    eax,ebx
c0014076:	83 c4 14             	add    esp,0x14
c0014079:	5b                   	pop    ebx
c001407a:	c2 04 00             	ret    0x4
c001407d:	90                   	nop

c001407e <Device::hibernate()>:
c001407e:	c3                   	ret    
c001407f:	90                   	nop

c0014080 <Device::wake()>:
c0014080:	c3                   	ret    
c0014081:	90                   	nop

c0014082 <Device::detect()>:
c0014082:	c3                   	ret    
c0014083:	90                   	nop

c0014084 <Device::disableLegacy()>:
c0014084:	c3                   	ret    
c0014085:	90                   	nop

c0014086 <Device::powerSaving(PowerSavingLevel)>:
c0014086:	c3                   	ret    
c0014087:	90                   	nop

c0014088 <DriverlessDevice::close(int, int, void*)>:
c0014088:	31 c0                	xor    eax,eax
c001408a:	c3                   	ret    
c001408b:	90                   	nop

c001408c <DriverlessDevice::detect()>:
c001408c:	c3                   	ret    
c001408d:	90                   	nop

c001408e <DriverlessDevice::open(int, int, void*)>:
c001408e:	83 ec 18             	sub    esp,0x18
c0014091:	68 30 ac 02 c0       	push   0xc002ac30
c0014096:	e8 46 64 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c001409b:	83 c8 ff             	or     eax,0xffffffff
c001409e:	83 c4 1c             	add    esp,0x1c
c00140a1:	c3                   	ret    

c00140a2 <Device::~Device()>:
c00140a2:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c00140a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ab:	89 10                	mov    DWORD PTR [eax],edx
c00140ad:	90                   	nop
c00140ae:	c3                   	ret    
c00140af:	90                   	nop

c00140b0 <Device::~Device()>:
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140b7:	e8 e6 ff ff ff       	call   c00140a2 <Device::~Device()>
c00140bc:	83 c4 04             	add    esp,0x4
c00140bf:	83 ec 08             	sub    esp,0x8
c00140c2:	68 58 01 00 00       	push   0x158
c00140c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140cb:	e8 f3 eb ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00140d0:	83 c4 10             	add    esp,0x10
c00140d3:	83 c4 0c             	add    esp,0xc
c00140d6:	c3                   	ret    
c00140d7:	90                   	nop

c00140d8 <Device::findAndLoadDriver()>:
c00140d8:	c3                   	ret    
c00140d9:	90                   	nop

c00140da <Device::preOpenPCI(PCIDeviceInfo)>:
c00140da:	57                   	push   edi
c00140db:	b9 09 00 00 00       	mov    ecx,0x9
c00140e0:	56                   	push   esi
c00140e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00140e5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00140e9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00140f3:	81 c7 18 01 00 00    	add    edi,0x118
c00140f9:	fc                   	cld    
c00140fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140fc:	5e                   	pop    esi
c00140fd:	5f                   	pop    edi
c00140fe:	c3                   	ret    
c00140ff:	90                   	nop

c0014100 <Device::preOpenACPI(void*, char*, char*)>:
c0014100:	56                   	push   esi
c0014101:	53                   	push   ebx
c0014102:	83 ec 08             	sub    esp,0x8
c0014105:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014109:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001410d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014117:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001411b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014121:	6a 1e                	push   0x1e
c0014123:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014129:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001412d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014133:	50                   	push   eax
c0014134:	e8 13 c6 fe ff       	call   c000074c <memcpy>
c0014139:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001413d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014141:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014149:	83 c4 14             	add    esp,0x14
c001414c:	5b                   	pop    ebx
c001414d:	5e                   	pop    esi
c001414e:	e9 f9 c5 fe ff       	jmp    c000074c <memcpy>
c0014153:	90                   	nop

c0014154 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014158:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001415d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014164:	75 0b                	jne    c0014171 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014166:	8b 00                	mov    eax,DWORD PTR [eax]
c0014168:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001416c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001416f:	eb 1e                	jmp    c001418f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014171:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0014176:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001417c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014182:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014184:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014188:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001418c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001418f:	ff e0                	jmp    eax
c0014191:	90                   	nop

c0014192 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014196:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001419b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141a2:	75 0b                	jne    c00141af <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00141a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00141a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141aa:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00141ad:	eb 1e                	jmp    c00141cd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141af:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00141b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141ba:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141ca:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141cd:	ff e0                	jmp    eax
c00141cf:	90                   	nop

c00141d0 <Device::addChild(Device*)>:
c00141d0:	53                   	push   ebx
c00141d1:	83 ec 08             	sub    esp,0x8
c00141d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141dc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00141e2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00141e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141ea:	85 d2                	test   edx,edx
c00141ec:	74 04                	je     c00141f2 <Device::addChild(Device*)+0x22>
c00141ee:	89 d3                	mov    ebx,edx
c00141f0:	eb f6                	jmp    c00141e8 <Device::addChild(Device*)+0x18>
c00141f2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141f5:	83 ec 0c             	sub    esp,0xc
c00141f8:	6a 08                	push   0x8
c00141fa:	e8 4c b6 ff ff       	call   c000f84b <malloc>
c00141ff:	89 03                	mov    DWORD PTR [ebx],eax
c0014201:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014207:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001420e:	83 c4 18             	add    esp,0x18
c0014211:	5b                   	pop    ebx
c0014212:	c3                   	ret    
c0014213:	90                   	nop

c0014214 <Device::removeAllChildren()>:
c0014214:	56                   	push   esi
c0014215:	53                   	push   ebx
c0014216:	52                   	push   edx
c0014217:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001421b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014221:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014224:	74 17                	je     c001423d <Device::removeAllChildren()+0x29>
c0014226:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014229:	85 c0                	test   eax,eax
c001422b:	74 0c                	je     c0014239 <Device::removeAllChildren()+0x25>
c001422d:	83 ec 0c             	sub    esp,0xc
c0014230:	8b 10                	mov    edx,DWORD PTR [eax]
c0014232:	50                   	push   eax
c0014233:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001423b:	eb e4                	jmp    c0014221 <Device::removeAllChildren()+0xd>
c001423d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014243:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014249:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001424f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014256:	58                   	pop    eax
c0014257:	5b                   	pop    ebx
c0014258:	5e                   	pop    esi
c0014259:	c3                   	ret    

c001425a <Device::hibernateAll()>:
c001425a:	53                   	push   ebx
c001425b:	83 ec 14             	sub    esp,0x14
c001425e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014262:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014264:	53                   	push   ebx
c0014265:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014268:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001426e:	83 c4 10             	add    esp,0x10
c0014271:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014274:	74 0f                	je     c0014285 <Device::hibernateAll()+0x2b>
c0014276:	83 ec 0c             	sub    esp,0xc
c0014279:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001427c:	e8 d9 ff ff ff       	call   c001425a <Device::hibernateAll()>
c0014281:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014283:	eb e9                	jmp    c001426e <Device::hibernateAll()+0x14>
c0014285:	83 c4 08             	add    esp,0x8
c0014288:	5b                   	pop    ebx
c0014289:	c3                   	ret    

c001428a <Device::wakeAll()>:
c001428a:	53                   	push   ebx
c001428b:	83 ec 14             	sub    esp,0x14
c001428e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014292:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014294:	53                   	push   ebx
c0014295:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014298:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001429e:	83 c4 10             	add    esp,0x10
c00142a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142a4:	74 0f                	je     c00142b5 <Device::wakeAll()+0x2b>
c00142a6:	83 ec 0c             	sub    esp,0xc
c00142a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142ac:	e8 d9 ff ff ff       	call   c001428a <Device::wakeAll()>
c00142b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142b3:	eb e9                	jmp    c001429e <Device::wakeAll()+0x14>
c00142b5:	83 c4 08             	add    esp,0x8
c00142b8:	5b                   	pop    ebx
c00142b9:	c3                   	ret    

c00142ba <Device::detectAll()>:
c00142ba:	53                   	push   ebx
c00142bb:	83 ec 14             	sub    esp,0x14
c00142be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142c4:	53                   	push   ebx
c00142c5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142c8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142ce:	83 c4 10             	add    esp,0x10
c00142d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142d4:	74 0f                	je     c00142e5 <Device::detectAll()+0x2b>
c00142d6:	83 ec 0c             	sub    esp,0xc
c00142d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142dc:	e8 d9 ff ff ff       	call   c00142ba <Device::detectAll()>
c00142e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142e3:	eb e9                	jmp    c00142ce <Device::detectAll()+0x14>
c00142e5:	83 c4 08             	add    esp,0x8
c00142e8:	5b                   	pop    ebx
c00142e9:	c3                   	ret    

c00142ea <Device::disableLegacyAll()>:
c00142ea:	53                   	push   ebx
c00142eb:	83 ec 14             	sub    esp,0x14
c00142ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142f4:	53                   	push   ebx
c00142f5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00142f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142fe:	83 c4 10             	add    esp,0x10
c0014301:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014304:	74 0f                	je     c0014315 <Device::disableLegacyAll()+0x2b>
c0014306:	83 ec 0c             	sub    esp,0xc
c0014309:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001430c:	e8 d9 ff ff ff       	call   c00142ea <Device::disableLegacyAll()>
c0014311:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014313:	eb e9                	jmp    c00142fe <Device::disableLegacyAll()+0x14>
c0014315:	83 c4 08             	add    esp,0x8
c0014318:	5b                   	pop    ebx
c0014319:	c3                   	ret    

c001431a <Device::loadDriversForAll()>:
c001431a:	53                   	push   ebx
c001431b:	83 ec 08             	sub    esp,0x8
c001431e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014322:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014328:	8b 18                	mov    ebx,DWORD PTR [eax]
c001432a:	85 db                	test   ebx,ebx
c001432c:	74 12                	je     c0014340 <Device::loadDriversForAll()+0x26>
c001432e:	83 ec 0c             	sub    esp,0xc
c0014331:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014334:	e8 e1 ff ff ff       	call   c001431a <Device::loadDriversForAll()>
c0014339:	83 c4 10             	add    esp,0x10
c001433c:	89 d8                	mov    eax,ebx
c001433e:	eb e8                	jmp    c0014328 <Device::loadDriversForAll()+0xe>
c0014340:	83 c4 08             	add    esp,0x8
c0014343:	5b                   	pop    ebx
c0014344:	c3                   	ret    
c0014345:	90                   	nop

c0014346 <Device::closeAll()>:
c0014346:	53                   	push   ebx
c0014347:	83 ec 08             	sub    esp,0x8
c001434a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001434e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014350:	6a 00                	push   0x0
c0014352:	6a 00                	push   0x0
c0014354:	6a 00                	push   0x0
c0014356:	53                   	push   ebx
c0014357:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001435a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014360:	83 c4 10             	add    esp,0x10
c0014363:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014366:	74 0f                	je     c0014377 <Device::closeAll()+0x31>
c0014368:	83 ec 0c             	sub    esp,0xc
c001436b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001436e:	e8 d3 ff ff ff       	call   c0014346 <Device::closeAll()>
c0014373:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014375:	eb e9                	jmp    c0014360 <Device::closeAll()+0x1a>
c0014377:	83 c4 08             	add    esp,0x8
c001437a:	5b                   	pop    ebx
c001437b:	c3                   	ret    

c001437c <Device::powerSavingAll(PowerSavingLevel)>:
c001437c:	56                   	push   esi
c001437d:	53                   	push   ebx
c001437e:	83 ec 0c             	sub    esp,0xc
c0014381:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014385:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014389:	8b 03                	mov    eax,DWORD PTR [ebx]
c001438b:	56                   	push   esi
c001438c:	53                   	push   ebx
c001438d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014390:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001439c:	74 0f                	je     c00143ad <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001439e:	52                   	push   edx
c001439f:	52                   	push   edx
c00143a0:	56                   	push   esi
c00143a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143a4:	e8 d3 ff ff ff       	call   c001437c <Device::powerSavingAll(PowerSavingLevel)>
c00143a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ab:	eb e9                	jmp    c0014396 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00143ad:	58                   	pop    eax
c00143ae:	5b                   	pop    ebx
c00143af:	5e                   	pop    esi
c00143b0:	c3                   	ret    
c00143b1:	90                   	nop

c00143b2 <Device::setName(char const*)>:
c00143b2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143ba:	e9 7d c4 fe ff       	jmp    c000083c <strcpy>
c00143bf:	90                   	nop

c00143c0 <Device::Device(char const*)>:
c00143c0:	83 ec 1c             	sub    esp,0x1c
c00143c3:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c00143c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143cc:	89 10                	mov    DWORD PTR [eax],edx
c00143ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143d2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00143dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00143ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00143f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014406:	83 ec 08             	sub    esp,0x8
c0014409:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001440d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014411:	e8 9c ff ff ff       	call   c00143b2 <Device::setName(char const*)>
c0014416:	83 c4 10             	add    esp,0x10
c0014419:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014421:	83 ec 0c             	sub    esp,0xc
c0014424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014428:	e8 1e b4 ff ff       	call   c000f84b <malloc>
c001442d:	83 c4 10             	add    esp,0x10
c0014430:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014436:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001443d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014441:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001444b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014451:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001445b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014461:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014477:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001447e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014482:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001448c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014490:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001449a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001449e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ac:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00144b6:	90                   	nop
c00144b7:	83 c4 1c             	add    esp,0x1c
c00144ba:	c3                   	ret    
c00144bb:	90                   	nop

c00144bc <Device::getName()>:
c00144bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144c0:	05 d0 00 00 00       	add    eax,0xd0
c00144c5:	c3                   	ret    

c00144c6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144c6:	83 ec 0c             	sub    esp,0xc
c00144c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144cd:	83 ec 08             	sub    esp,0x8
c00144d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144d4:	50                   	push   eax
c00144d5:	e8 e6 fe ff ff       	call   c00143c0 <Device::Device(char const*)>
c00144da:	83 c4 10             	add    esp,0x10
c00144dd:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c00144e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e6:	89 10                	mov    DWORD PTR [eax],edx
c00144e8:	90                   	nop
c00144e9:	83 c4 0c             	add    esp,0xc
c00144ec:	c3                   	ret    
c00144ed:	90                   	nop

c00144ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00144ee:	57                   	push   edi
c00144ef:	56                   	push   esi
c00144f0:	53                   	push   ebx
c00144f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144fd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014503:	75 0c                	jne    c0014511 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014505:	52                   	push   edx
c0014506:	52                   	push   edx
c0014507:	53                   	push   ebx
c0014508:	56                   	push   esi
c0014509:	e8 dc 43 01 00       	call   c00288ea <LinkedList<Device>::addElement(Device*)>
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014517:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001451a:	74 12                	je     c001452e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001451c:	50                   	push   eax
c001451d:	57                   	push   edi
c001451e:	56                   	push   esi
c001451f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014522:	e8 c7 ff ff ff       	call   c00144ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014527:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014529:	83 c4 10             	add    esp,0x10
c001452c:	eb e9                	jmp    c0014517 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001452e:	5b                   	pop    ebx
c001452f:	5e                   	pop    esi
c0014530:	5f                   	pop    edi
c0014531:	c3                   	ret    

c0014532 <getDevicesOfType(DeviceType)>:
c0014532:	53                   	push   ebx
c0014533:	83 ec 14             	sub    esp,0x14
c0014536:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001453a:	53                   	push   ebx
c001453b:	e8 86 44 01 00       	call   c00289c6 <LinkedList<Device>::LinkedList()>
c0014540:	83 c4 0c             	add    esp,0xc
c0014543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014547:	53                   	push   ebx
c0014548:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c001454e:	e8 9b ff ff ff       	call   c00144ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014553:	89 d8                	mov    eax,ebx
c0014555:	83 c4 18             	add    esp,0x18
c0014558:	5b                   	pop    ebx
c0014559:	c2 04 00             	ret    0x4

c001455c <HardDiskController::HardDiskController(char const*)>:
c001455c:	83 ec 0c             	sub    esp,0xc
c001455f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014563:	83 ec 08             	sub    esp,0x8
c0014566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001456a:	50                   	push   eax
c001456b:	e8 50 fe ff ff       	call   c00143c0 <Device::Device(char const*)>
c0014570:	83 c4 10             	add    esp,0x10
c0014573:	ba b0 ac 02 c0       	mov    edx,0xc002acb0
c0014578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001457c:	89 10                	mov    DWORD PTR [eax],edx
c001457e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014582:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001458c:	90                   	nop
c001458d:	83 c4 0c             	add    esp,0xc
c0014590:	c3                   	ret    
c0014591:	90                   	nop

c0014592 <HardDiskController::~HardDiskController()>:
c0014592:	83 ec 0c             	sub    esp,0xc
c0014595:	ba b0 ac 02 c0       	mov    edx,0xc002acb0
c001459a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001459e:	89 10                	mov    DWORD PTR [eax],edx
c00145a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a4:	83 ec 0c             	sub    esp,0xc
c00145a7:	50                   	push   eax
c00145a8:	e8 f5 fa ff ff       	call   c00140a2 <Device::~Device()>
c00145ad:	83 c4 10             	add    esp,0x10
c00145b0:	90                   	nop
c00145b1:	83 c4 0c             	add    esp,0xc
c00145b4:	c3                   	ret    
c00145b5:	90                   	nop

c00145b6 <HardDiskController::~HardDiskController()>:
c00145b6:	83 ec 0c             	sub    esp,0xc
c00145b9:	83 ec 0c             	sub    esp,0xc
c00145bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145c0:	e8 cd ff ff ff       	call   c0014592 <HardDiskController::~HardDiskController()>
c00145c5:	83 c4 10             	add    esp,0x10
c00145c8:	83 ec 08             	sub    esp,0x8
c00145cb:	68 58 01 00 00       	push   0x158
c00145d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145d4:	e8 ea e6 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00145d9:	83 c4 10             	add    esp,0x10
c00145dc:	83 c4 0c             	add    esp,0xc
c00145df:	c3                   	ret    

c00145e0 <PhysicalDisk::eject()>:
c00145e0:	83 ec 18             	sub    esp,0x18
c00145e3:	68 d4 ac 02 c0       	push   0xc002acd4
c00145e8:	e8 b6 e7 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00145ed:	83 c8 ff             	or     eax,0xffffffff
c00145f0:	83 c4 1c             	add    esp,0x1c
c00145f3:	c3                   	ret    

c00145f4 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00145f4:	83 ec 0c             	sub    esp,0xc
c00145f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145fb:	83 ec 08             	sub    esp,0x8
c00145fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014602:	50                   	push   eax
c0014603:	e8 b8 fd ff ff       	call   c00143c0 <Device::Device(char const*)>
c0014608:	83 c4 10             	add    esp,0x10
c001460b:	ba 04 ad 02 c0       	mov    edx,0xc002ad04
c0014610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014614:	89 10                	mov    DWORD PTR [eax],edx
c0014616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014625:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001462c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014630:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001463a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014642:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014656:	90                   	nop
c0014657:	83 c4 0c             	add    esp,0xc
c001465a:	c3                   	ret    
c001465b:	90                   	nop

c001465c <PhysicalDisk::startCache()>:
c001465c:	56                   	push   esi
c001465d:	53                   	push   ebx
c001465e:	83 ec 10             	sub    esp,0x10
c0014661:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014665:	6a 44                	push   0x44
c0014667:	e8 df b1 ff ff       	call   c000f84b <malloc>
c001466c:	89 c6                	mov    esi,eax
c001466e:	58                   	pop    eax
c001466f:	5a                   	pop    edx
c0014670:	53                   	push   ebx
c0014671:	56                   	push   esi
c0014672:	e8 a3 27 00 00       	call   c0016e1a <VCache::VCache(PhysicalDisk*)>
c0014677:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001467d:	83 c4 14             	add    esp,0x14
c0014680:	5b                   	pop    ebx
c0014681:	5e                   	pop    esi
c0014682:	c3                   	ret    
c0014683:	90                   	nop

c0014684 <PhysicalDisk::~PhysicalDisk()>:
c0014684:	83 ec 0c             	sub    esp,0xc
c0014687:	ba 04 ad 02 c0       	mov    edx,0xc002ad04
c001468c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014690:	89 10                	mov    DWORD PTR [eax],edx
c0014692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014696:	83 ec 0c             	sub    esp,0xc
c0014699:	50                   	push   eax
c001469a:	e8 03 fa ff ff       	call   c00140a2 <Device::~Device()>
c001469f:	83 c4 10             	add    esp,0x10
c00146a2:	90                   	nop
c00146a3:	83 c4 0c             	add    esp,0xc
c00146a6:	c3                   	ret    
c00146a7:	90                   	nop

c00146a8 <PhysicalDisk::~PhysicalDisk()>:
c00146a8:	83 ec 0c             	sub    esp,0xc
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b2:	e8 cd ff ff ff       	call   c0014684 <PhysicalDisk::~PhysicalDisk()>
c00146b7:	83 c4 10             	add    esp,0x10
c00146ba:	83 ec 08             	sub    esp,0x8
c00146bd:	68 6c 01 00 00       	push   0x16c
c00146c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c6:	e8 f8 e5 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00146cb:	83 c4 10             	add    esp,0x10
c00146ce:	83 c4 0c             	add    esp,0xc
c00146d1:	c3                   	ret    

c00146d2 <FPU::FPU(char const*)>:
c00146d2:	83 ec 0c             	sub    esp,0xc
c00146d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d9:	83 ec 08             	sub    esp,0x8
c00146dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146e0:	50                   	push   eax
c00146e1:	e8 da fc ff ff       	call   c00143c0 <Device::Device(char const*)>
c00146e6:	83 c4 10             	add    esp,0x10
c00146e9:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c00146ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f2:	89 10                	mov    DWORD PTR [eax],edx
c00146f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f8:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014702:	90                   	nop
c0014703:	83 c4 0c             	add    esp,0xc
c0014706:	c3                   	ret    
c0014707:	90                   	nop

c0014708 <FPU::~FPU()>:
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c0014710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014714:	89 10                	mov    DWORD PTR [eax],edx
c0014716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	50                   	push   eax
c001471e:	e8 7f f9 ff ff       	call   c00140a2 <Device::~Device()>
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	90                   	nop
c0014727:	83 c4 0c             	add    esp,0xc
c001472a:	c3                   	ret    
c001472b:	90                   	nop

c001472c <FPU::~FPU()>:
c001472c:	83 ec 0c             	sub    esp,0xc
c001472f:	83 ec 0c             	sub    esp,0xc
c0014732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014736:	e8 cd ff ff ff       	call   c0014708 <FPU::~FPU()>
c001473b:	83 c4 10             	add    esp,0x10
c001473e:	83 ec 08             	sub    esp,0x8
c0014741:	68 58 01 00 00       	push   0x158
c0014746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001474a:	e8 74 e5 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c001474f:	83 c4 10             	add    esp,0x10
c0014752:	83 c4 0c             	add    esp,0xc
c0014755:	c3                   	ret    

c0014756 <setupFPU()>:
c0014756:	53                   	push   ebx
c0014757:	83 ec 08             	sub    esp,0x8
c001475a:	8b 15 48 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e448
c0014760:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014767:	74 19                	je     c0014782 <setupFPU()+0x2c>
c0014769:	83 ec 0c             	sub    esp,0xc
c001476c:	68 58 01 00 00       	push   0x158
c0014771:	e8 d5 b0 ff ff       	call   c000f84b <malloc>
c0014776:	89 c3                	mov    ebx,eax
c0014778:	89 04 24             	mov    DWORD PTR [esp],eax
c001477b:	e8 9e 0d 01 00       	call   c002551e <AVX::AVX()>
c0014780:	eb 5b                	jmp    c00147dd <setupFPU()+0x87>
c0014782:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014788:	84 c0                	test   al,al
c001478a:	79 19                	jns    c00147a5 <setupFPU()+0x4f>
c001478c:	83 ec 0c             	sub    esp,0xc
c001478f:	68 58 01 00 00       	push   0x158
c0014794:	e8 b2 b0 ff ff       	call   c000f84b <malloc>
c0014799:	89 c3                	mov    ebx,eax
c001479b:	89 04 24             	mov    DWORD PTR [esp],eax
c001479e:	e8 a1 0e 01 00       	call   c0025644 <SSE::SSE()>
c00147a3:	eb 38                	jmp    c00147dd <setupFPU()+0x87>
c00147a5:	a8 20                	test   al,0x20
c00147a7:	74 19                	je     c00147c2 <setupFPU()+0x6c>
c00147a9:	83 ec 0c             	sub    esp,0xc
c00147ac:	68 58 01 00 00       	push   0x158
c00147b1:	e8 95 b0 ff ff       	call   c000f84b <malloc>
c00147b6:	89 c3                	mov    ebx,eax
c00147b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00147bb:	e8 ee 0d 01 00       	call   c00255ae <MMX::MMX()>
c00147c0:	eb 1b                	jmp    c00147dd <setupFPU()+0x87>
c00147c2:	a8 10                	test   al,0x10
c00147c4:	74 1c                	je     c00147e2 <setupFPU()+0x8c>
c00147c6:	83 ec 0c             	sub    esp,0xc
c00147c9:	68 58 01 00 00       	push   0x158
c00147ce:	e8 78 b0 ff ff       	call   c000f84b <malloc>
c00147d3:	89 c3                	mov    ebx,eax
c00147d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00147d8:	e8 f5 0e 01 00       	call   c00256d2 <x87::x87()>
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	eb 24                	jmp    c0014806 <setupFPU()+0xb0>
c00147e2:	83 e0 ef             	and    eax,0xffffffef
c00147e5:	83 ec 0c             	sub    esp,0xc
c00147e8:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00147ee:	68 34 ad 02 c0       	push   0xc002ad34
c00147f3:	e8 ab e5 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00147f8:	0f 20 c0             	mov    eax,cr0
c00147fb:	83 c8 04             	or     eax,0x4
c00147fe:	0f 22 c0             	mov    cr0,eax
c0014801:	31 db                	xor    ebx,ebx
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	89 d8                	mov    eax,ebx
c0014808:	83 c4 08             	add    esp,0x8
c001480b:	5b                   	pop    ebx
c001480c:	c3                   	ret    
c001480d:	90                   	nop

c001480e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001480e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014812:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014816:	c1 e0 04             	shl    eax,0x4
c0014819:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001481d:	8d 50 10             	lea    edx,[eax+0x10]
c0014820:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014826:	74 08                	je     c0014830 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014828:	83 c0 04             	add    eax,0x4
c001482b:	39 d0                	cmp    eax,edx
c001482d:	75 f1                	jne    c0014820 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001482f:	c3                   	ret    
c0014830:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001483a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014844:	eb e2                	jmp    c0014828 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014846 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014846:	57                   	push   edi
c0014847:	31 c0                	xor    eax,eax
c0014849:	56                   	push   esi
c001484a:	53                   	push   ebx
c001484b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001484f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014853:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014857:	89 da                	mov    edx,ebx
c0014859:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001485d:	c1 e2 04             	shl    edx,0x4
c0014860:	01 ca                	add    edx,ecx
c0014862:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001486a:	74 16                	je     c0014882 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001486c:	40                   	inc    eax
c001486d:	83 f8 04             	cmp    eax,0x4
c0014870:	75 f0                	jne    c0014862 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014872:	c7 44 24 10 78 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad78
c001487a:	5b                   	pop    ebx
c001487b:	5e                   	pop    esi
c001487c:	5f                   	pop    edi
c001487d:	e9 5f 5c 00 00       	jmp    c001a4e1 <Krnl::panic(char const*)>
c0014882:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014885:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014888:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001488e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014894:	5b                   	pop    ebx
c0014895:	5e                   	pop    esi
c0014896:	5f                   	pop    edi
c0014897:	c3                   	ret    

c0014898 <doubleFault(regs*, void*)>:
c0014898:	55                   	push   ebp
c0014899:	89 e5                	mov    ebp,esp
c001489b:	83 ec 08             	sub    esp,0x8
c001489e:	83 ec 0c             	sub    esp,0xc
c00148a1:	68 b3 ad 02 c0       	push   0xc002adb3
c00148a6:	e8 36 5c 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c00148ab:	83 c4 10             	add    esp,0x10
c00148ae:	90                   	nop
c00148af:	c9                   	leave  
c00148b0:	c3                   	ret    
c00148b1:	90                   	nop

c00148b2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148b2:	56                   	push   esi
c00148b3:	53                   	push   ebx
c00148b4:	50                   	push   eax
c00148b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148bd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148c2:	75 35                	jne    c00148f9 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148c4:	8d 43 20             	lea    eax,[ebx+0x20]
c00148c7:	31 d2                	xor    edx,edx
c00148c9:	89 c1                	mov    ecx,eax
c00148cb:	c1 e1 04             	shl    ecx,0x4
c00148ce:	01 f1                	add    ecx,esi
c00148d0:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00148d8:	74 3e                	je     c0014918 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00148da:	42                   	inc    edx
c00148db:	83 fa 04             	cmp    edx,0x4
c00148de:	75 f0                	jne    c00148d0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00148e0:	83 ec 0c             	sub    esp,0xc
c00148e3:	68 f8 ad 02 c0       	push   0xc002adf8
c00148e8:	e8 f4 5b 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c00148ed:	83 c4 10             	add    esp,0x10
c00148f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00148f5:	5a                   	pop    edx
c00148f6:	5b                   	pop    ebx
c00148f7:	5e                   	pop    esi
c00148f8:	c3                   	ret    
c00148f9:	83 ec 0c             	sub    esp,0xc
c00148fc:	56                   	push   esi
c00148fd:	e8 ba fb ff ff       	call   c00144bc <Device::getName()>
c0014902:	83 c4 10             	add    esp,0x10
c0014905:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014908:	75 ba                	jne    c00148c4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001490a:	83 fb 0f             	cmp    ebx,0xf
c001490d:	7f 29                	jg     c0014938 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001490f:	0f b6 9b a0 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2960]
c0014916:	eb ac                	jmp    c00148c4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014918:	8d 04 82             	lea    eax,[edx+eax*4]
c001491b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001491f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014922:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014928:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001492c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014932:	89 d8                	mov    eax,ebx
c0014934:	5a                   	pop    edx
c0014935:	5b                   	pop    ebx
c0014936:	5e                   	pop    esi
c0014937:	c3                   	ret    
c0014938:	83 ec 0c             	sub    esp,0xc
c001493b:	68 c0 ad 02 c0       	push   0xc002adc0
c0014940:	e8 9c 5b 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0014945:	83 c4 10             	add    esp,0x10
c0014948:	e9 77 ff ff ff       	jmp    c00148c4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001494d:	90                   	nop

c001494e <InterruptController::clearAllHandlers(int, bool)>:
c001494e:	56                   	push   esi
c001494f:	53                   	push   ebx
c0014950:	52                   	push   edx
c0014951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014955:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014959:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001495e:	75 61                	jne    c00149c1 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014960:	8d 46 20             	lea    eax,[esi+0x20]
c0014963:	c1 e6 04             	shl    esi,0x4
c0014966:	c1 e0 04             	shl    eax,0x4
c0014969:	01 de                	add    esi,ebx
c001496b:	01 d8                	add    eax,ebx
c001496d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014977:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014981:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001498b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014995:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001499f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00149a9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149b3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149bd:	58                   	pop    eax
c00149be:	5b                   	pop    ebx
c00149bf:	5e                   	pop    esi
c00149c0:	c3                   	ret    
c00149c1:	83 ec 0c             	sub    esp,0xc
c00149c4:	53                   	push   ebx
c00149c5:	e8 f2 fa ff ff       	call   c00144bc <Device::getName()>
c00149ca:	83 c4 10             	add    esp,0x10
c00149cd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149d0:	75 8e                	jne    c0014960 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149d2:	83 fe 0f             	cmp    esi,0xf
c00149d5:	7f 09                	jg     c00149e0 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00149d7:	0f b6 b6 a0 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2960]
c00149de:	eb 80                	jmp    c0014960 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149e0:	83 ec 0c             	sub    esp,0xc
c00149e3:	68 34 ae 02 c0       	push   0xc002ae34
c00149e8:	e8 f4 5a 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c00149ed:	83 c4 10             	add    esp,0x10
c00149f0:	e9 6b ff ff ff       	jmp    c0014960 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149f5:	90                   	nop

c00149f6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00149f6:	56                   	push   esi
c00149f7:	53                   	push   ebx
c00149f8:	52                   	push   edx
c00149f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a01:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a06:	75 3a                	jne    c0014a42 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a0c:	8d 50 20             	lea    edx,[eax+0x20]
c0014a0f:	c1 e2 04             	shl    edx,0x4
c0014a12:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a15:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a19:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a1f:	74 0b                	je     c0014a2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a21:	83 c0 04             	add    eax,0x4
c0014a24:	39 d0                	cmp    eax,edx
c0014a26:	75 f1                	jne    c0014a19 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a28:	58                   	pop    eax
c0014a29:	5b                   	pop    ebx
c0014a2a:	5e                   	pop    esi
c0014a2b:	c3                   	ret    
c0014a2c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a36:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a40:	eb df                	jmp    c0014a21 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a42:	83 ec 0c             	sub    esp,0xc
c0014a45:	56                   	push   esi
c0014a46:	e8 71 fa ff ff       	call   c00144bc <Device::getName()>
c0014a4b:	83 c4 10             	add    esp,0x10
c0014a4e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a51:	75 b5                	jne    c0014a08 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a53:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a58:	7f 11                	jg     c0014a6b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a5e:	0f b6 80 a0 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2960]
c0014a65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a69:	eb 9d                	jmp    c0014a08 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a6b:	83 ec 0c             	sub    esp,0xc
c0014a6e:	68 34 ae 02 c0       	push   0xc002ae34
c0014a73:	e8 69 5a 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0014a78:	83 c4 10             	add    esp,0x10
c0014a7b:	eb 8b                	jmp    c0014a08 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014a7d <nmiHandler(regs*, void*)>:
c0014a7d:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0014a82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a86:	e9 09 a5 ff ff       	jmp    c000ef94 <Computer::handleNMI()>

c0014a8b <int_handler>:
c0014a8b:	55                   	push   ebp
c0014a8c:	57                   	push   edi
c0014a8d:	56                   	push   esi
c0014a8e:	53                   	push   ebx
c0014a8f:	83 ec 0c             	sub    esp,0xc
c0014a92:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014a96:	80 3d a4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fa4,0x0
c0014a9d:	74 0b                	je     c0014aaa <int_handler+0x1f>
c0014a9f:	fa                   	cli    
c0014aa0:	f4                   	hlt    
c0014aa1:	80 3d a4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fa4,0x0
c0014aa8:	75 f5                	jne    c0014a9f <int_handler+0x14>
c0014aaa:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0014aaf:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014ab2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ab8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014abe:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ac1:	83 f8 17             	cmp    eax,0x17
c0014ac4:	77 13                	ja     c0014ad9 <int_handler+0x4e>
c0014ac6:	83 ec 08             	sub    esp,0x8
c0014ac9:	8b 17                	mov    edx,DWORD PTR [edi]
c0014acb:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ace:	0f b6 c0             	movzx  eax,al
c0014ad1:	50                   	push   eax
c0014ad2:	57                   	push   edi
c0014ad3:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014ad6:	83 c4 10             	add    esp,0x10
c0014ad9:	83 c3 15             	add    ebx,0x15
c0014adc:	c1 e3 04             	shl    ebx,0x4
c0014adf:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014ae3:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014aea:	31 db                	xor    ebx,ebx
c0014aec:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014af0:	85 c0                	test   eax,eax
c0014af2:	74 13                	je     c0014b07 <int_handler+0x7c>
c0014af4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014af7:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014afb:	74 1c                	je     c0014b19 <int_handler+0x8e>
c0014afd:	83 ec 08             	sub    esp,0x8
c0014b00:	52                   	push   edx
c0014b01:	56                   	push   esi
c0014b02:	ff d0                	call   eax
c0014b04:	83 c4 10             	add    esp,0x10
c0014b07:	43                   	inc    ebx
c0014b08:	83 fb 04             	cmp    ebx,0x4
c0014b0b:	75 df                	jne    c0014aec <int_handler+0x61>
c0014b0d:	83 c4 0c             	add    esp,0xc
c0014b10:	31 c0                	xor    eax,eax
c0014b12:	5b                   	pop    ebx
c0014b13:	31 d2                	xor    edx,edx
c0014b15:	5e                   	pop    esi
c0014b16:	5f                   	pop    edi
c0014b17:	5d                   	pop    ebp
c0014b18:	c3                   	ret    
c0014b19:	83 ec 08             	sub    esp,0x8
c0014b1c:	52                   	push   edx
c0014b1d:	56                   	push   esi
c0014b1e:	ff d0                	call   eax
c0014b20:	83 c4 10             	add    esp,0x10
c0014b23:	83 c4 0c             	add    esp,0xc
c0014b26:	5b                   	pop    ebx
c0014b27:	5e                   	pop    esi
c0014b28:	5f                   	pop    edi
c0014b29:	5d                   	pop    ebp
c0014b2a:	c3                   	ret    
c0014b2b:	90                   	nop

c0014b2c <InterruptController::InterruptController(char const*)>:
c0014b2c:	83 ec 1c             	sub    esp,0x1c
c0014b2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b33:	83 ec 08             	sub    esp,0x8
c0014b36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b3a:	50                   	push   eax
c0014b3b:	e8 80 f8 ff ff       	call   c00143c0 <Device::Device(char const*)>
c0014b40:	83 c4 10             	add    esp,0x10
c0014b43:	ba f4 b0 02 c0       	mov    edx,0xc002b0f4
c0014b48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b4c:	89 10                	mov    DWORD PTR [eax],edx
c0014b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b52:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b64:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b6c:	7f 5e                	jg     c0014bcc <InterruptController::InterruptController(char const*)+0xa0>
c0014b6e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b76:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014b7b:	7f 49                	jg     c0014bc6 <InterruptController::InterruptController(char const*)+0x9a>
c0014b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b85:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b90:	01 ca                	add    edx,ecx
c0014b92:	83 c2 54             	add    edx,0x54
c0014b95:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ba1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ba5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bb0:	01 ca                	add    edx,ecx
c0014bb2:	81 c2 54 04 00 00    	add    edx,0x454
c0014bb8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bc0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014bc4:	eb b0                	jmp    c0014b76 <InterruptController::InterruptController(char const*)+0x4a>
c0014bc6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bca:	eb 98                	jmp    c0014b64 <InterruptController::InterruptController(char const*)+0x38>
c0014bcc:	90                   	nop
c0014bcd:	83 c4 1c             	add    esp,0x1c
c0014bd0:	c3                   	ret    
c0014bd1:	90                   	nop

c0014bd2 <InterruptController::~InterruptController()>:
c0014bd2:	83 ec 0c             	sub    esp,0xc
c0014bd5:	ba f4 b0 02 c0       	mov    edx,0xc002b0f4
c0014bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bde:	89 10                	mov    DWORD PTR [eax],edx
c0014be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014be4:	83 ec 0c             	sub    esp,0xc
c0014be7:	50                   	push   eax
c0014be8:	e8 b5 f4 ff ff       	call   c00140a2 <Device::~Device()>
c0014bed:	83 c4 10             	add    esp,0x10
c0014bf0:	90                   	nop
c0014bf1:	83 c4 0c             	add    esp,0xc
c0014bf4:	c3                   	ret    
c0014bf5:	90                   	nop

c0014bf6 <InterruptController::~InterruptController()>:
c0014bf6:	83 ec 0c             	sub    esp,0xc
c0014bf9:	83 ec 0c             	sub    esp,0xc
c0014bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c00:	e8 cd ff ff ff       	call   c0014bd2 <InterruptController::~InterruptController()>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	83 ec 08             	sub    esp,0x8
c0014c0b:	68 58 21 00 00       	push   0x2158
c0014c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c14:	e8 aa e0 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0014c19:	83 c4 10             	add    esp,0x10
c0014c1c:	83 c4 0c             	add    esp,0xc
c0014c1f:	c3                   	ret    

c0014c20 <displayDebugInfo(regs*)>:
c0014c20:	55                   	push   ebp
c0014c21:	57                   	push   edi
c0014c22:	56                   	push   esi
c0014c23:	53                   	push   ebx
c0014c24:	83 ec 24             	sub    esp,0x24
c0014c27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c2b:	0f 20 c2             	mov    edx,cr0
c0014c2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c32:	0f 20 d7             	mov    edi,cr2
c0014c35:	0f 20 de             	mov    esi,cr3
c0014c38:	0f 20 e5             	mov    ebp,cr4
c0014c3b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c3e:	68 6e ae 02 c0       	push   0xc002ae6e
c0014c43:	e8 5b e1 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014c48:	59                   	pop    ecx
c0014c49:	58                   	pop    eax
c0014c4a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c4d:	68 79 ae 02 c0       	push   0xc002ae79
c0014c52:	e8 4c e1 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014c57:	58                   	pop    eax
c0014c58:	5a                   	pop    edx
c0014c59:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c5c:	68 84 ae 02 c0       	push   0xc002ae84
c0014c61:	e8 3d e1 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014c66:	59                   	pop    ecx
c0014c67:	58                   	pop    eax
c0014c68:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c6b:	68 8f ae 02 c0       	push   0xc002ae8f
c0014c70:	e8 2e e1 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014c75:	58                   	pop    eax
c0014c76:	5a                   	pop    edx
c0014c77:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014c7a:	68 9a ae 02 c0       	push   0xc002ae9a
c0014c7f:	e8 1f e1 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014c84:	59                   	pop    ecx
c0014c85:	58                   	pop    eax
c0014c86:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014c89:	68 a5 ae 02 c0       	push   0xc002aea5
c0014c8e:	e8 10 e1 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014c93:	58                   	pop    eax
c0014c94:	5a                   	pop    edx
c0014c95:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014c98:	68 b0 ae 02 c0       	push   0xc002aeb0
c0014c9d:	e8 01 e1 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014ca2:	59                   	pop    ecx
c0014ca3:	58                   	pop    eax
c0014ca4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ca7:	68 bb ae 02 c0       	push   0xc002aebb
c0014cac:	e8 f2 e0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014cb1:	58                   	pop    eax
c0014cb2:	5a                   	pop    edx
c0014cb3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014cb6:	68 c6 ae 02 c0       	push   0xc002aec6
c0014cbb:	e8 e3 e0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014cc0:	59                   	pop    ecx
c0014cc1:	58                   	pop    eax
c0014cc2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cc5:	68 d5 ae 02 c0       	push   0xc002aed5
c0014cca:	e8 d4 e0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014ccf:	58                   	pop    eax
c0014cd0:	5a                   	pop    edx
c0014cd1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014cd4:	68 e0 ae 02 c0       	push   0xc002aee0
c0014cd9:	e8 c5 e0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014cde:	59                   	pop    ecx
c0014cdf:	58                   	pop    eax
c0014ce0:	57                   	push   edi
c0014ce1:	68 eb ae 02 c0       	push   0xc002aeeb
c0014ce6:	e8 b8 e0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014ceb:	58                   	pop    eax
c0014cec:	5a                   	pop    edx
c0014ced:	56                   	push   esi
c0014cee:	68 f6 ae 02 c0       	push   0xc002aef6
c0014cf3:	e8 ab e0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0014cf8:	59                   	pop    ecx
c0014cf9:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014cfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d04:	e8 0d bf ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c0014d09:	58                   	pop    eax
c0014d0a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d0d:	5a                   	pop    edx
c0014d0e:	c1 e0 05             	shl    eax,0x5
c0014d11:	05 00 d4 02 c0       	add    eax,0xc002d400
c0014d16:	50                   	push   eax
c0014d17:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014d1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d22:	e8 7b c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d27:	59                   	pop    ecx
c0014d28:	58                   	pop    eax
c0014d29:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014d2e:	68 01 af 02 c0       	push   0xc002af01
c0014d33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d39:	e8 64 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d3e:	58                   	pop    eax
c0014d3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d44:	5a                   	pop    edx
c0014d45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d48:	83 c0 0c             	add    eax,0xc
c0014d4b:	50                   	push   eax
c0014d4c:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014d51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d57:	e8 46 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d5c:	59                   	pop    ecx
c0014d5d:	58                   	pop    eax
c0014d5e:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014d63:	68 0a af 02 c0       	push   0xc002af0a
c0014d68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d6e:	e8 2f c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d73:	58                   	pop    eax
c0014d74:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014d79:	5a                   	pop    edx
c0014d7a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d83:	e8 40 c2 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014d88:	59                   	pop    ecx
c0014d89:	58                   	pop    eax
c0014d8a:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014d8f:	68 12 af 02 c0       	push   0xc002af12
c0014d94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d9a:	e8 03 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d9f:	58                   	pop    eax
c0014da0:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014da5:	5a                   	pop    edx
c0014da6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014da9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014daf:	e8 14 c2 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014db4:	59                   	pop    ecx
c0014db5:	58                   	pop    eax
c0014db6:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014dbb:	68 1a af 02 c0       	push   0xc002af1a
c0014dc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc6:	e8 d7 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014dcb:	58                   	pop    eax
c0014dcc:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014dd1:	5a                   	pop    edx
c0014dd2:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dd5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ddb:	e8 e8 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014de0:	59                   	pop    ecx
c0014de1:	58                   	pop    eax
c0014de2:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014de7:	68 22 af 02 c0       	push   0xc002af22
c0014dec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df2:	e8 ab c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014df7:	58                   	pop    eax
c0014df8:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014dfd:	5a                   	pop    edx
c0014dfe:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e07:	e8 bc c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e0c:	59                   	pop    ecx
c0014e0d:	58                   	pop    eax
c0014e0e:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014e13:	68 2a af 02 c0       	push   0xc002af2a
c0014e18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e1e:	e8 7f c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e23:	58                   	pop    eax
c0014e24:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014e29:	5a                   	pop    edx
c0014e2a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e33:	e8 90 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e38:	59                   	pop    ecx
c0014e39:	58                   	pop    eax
c0014e3a:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014e3f:	68 32 af 02 c0       	push   0xc002af32
c0014e44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4a:	e8 53 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e4f:	58                   	pop    eax
c0014e50:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014e55:	5a                   	pop    edx
c0014e56:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e5f:	e8 64 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e64:	59                   	pop    ecx
c0014e65:	58                   	pop    eax
c0014e66:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014e6b:	68 3a af 02 c0       	push   0xc002af3a
c0014e70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e76:	e8 27 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e7b:	58                   	pop    eax
c0014e7c:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014e81:	5a                   	pop    edx
c0014e82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e86:	52                   	push   edx
c0014e87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8d:	e8 36 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e92:	59                   	pop    ecx
c0014e93:	58                   	pop    eax
c0014e94:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014e99:	68 43 af 02 c0       	push   0xc002af43
c0014e9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea4:	e8 f9 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ea9:	58                   	pop    eax
c0014eaa:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014eaf:	5a                   	pop    edx
c0014eb0:	57                   	push   edi
c0014eb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb7:	e8 0c c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014ebc:	59                   	pop    ecx
c0014ebd:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014ec2:	5f                   	pop    edi
c0014ec3:	68 4b af 02 c0       	push   0xc002af4b
c0014ec8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ece:	e8 cf c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ed3:	58                   	pop    eax
c0014ed4:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014ed9:	5a                   	pop    edx
c0014eda:	56                   	push   esi
c0014edb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee1:	e8 e2 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014ee6:	59                   	pop    ecx
c0014ee7:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014eec:	5e                   	pop    esi
c0014eed:	68 53 af 02 c0       	push   0xc002af53
c0014ef2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef8:	e8 a5 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014efd:	5f                   	pop    edi
c0014efe:	58                   	pop    eax
c0014eff:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014f04:	55                   	push   ebp
c0014f05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0b:	e8 b8 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f10:	58                   	pop    eax
c0014f11:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014f16:	5a                   	pop    edx
c0014f17:	68 5b af 02 c0       	push   0xc002af5b
c0014f1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f22:	e8 7b c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f27:	0f 21 c0             	mov    eax,db0
c0014f2a:	59                   	pop    ecx
c0014f2b:	5e                   	pop    esi
c0014f2c:	50                   	push   eax
c0014f2d:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014f32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f38:	e8 8b c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f3d:	5f                   	pop    edi
c0014f3e:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014f43:	5d                   	pop    ebp
c0014f44:	68 64 af 02 c0       	push   0xc002af64
c0014f49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4f:	e8 4e c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f54:	0f 21 c8             	mov    eax,db1
c0014f57:	5a                   	pop    edx
c0014f58:	59                   	pop    ecx
c0014f59:	50                   	push   eax
c0014f5a:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014f5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f65:	e8 5e c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f6a:	5e                   	pop    esi
c0014f6b:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014f70:	5f                   	pop    edi
c0014f71:	68 6c af 02 c0       	push   0xc002af6c
c0014f76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7c:	e8 21 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f81:	0f 21 d0             	mov    eax,db2
c0014f84:	5d                   	pop    ebp
c0014f85:	5a                   	pop    edx
c0014f86:	50                   	push   eax
c0014f87:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014f8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f92:	e8 31 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f97:	59                   	pop    ecx
c0014f98:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014f9d:	5e                   	pop    esi
c0014f9e:	68 74 af 02 c0       	push   0xc002af74
c0014fa3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa9:	e8 f4 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014fae:	0f 21 d8             	mov    eax,db3
c0014fb1:	5f                   	pop    edi
c0014fb2:	5d                   	pop    ebp
c0014fb3:	50                   	push   eax
c0014fb4:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014fb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbf:	e8 04 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014fc4:	58                   	pop    eax
c0014fc5:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014fca:	5a                   	pop    edx
c0014fcb:	68 7c af 02 c0       	push   0xc002af7c
c0014fd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd6:	e8 c7 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014fdb:	0f 21 f0             	mov    eax,db6
c0014fde:	59                   	pop    ecx
c0014fdf:	5e                   	pop    esi
c0014fe0:	50                   	push   eax
c0014fe1:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014fe6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fec:	e8 d7 bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014ff1:	5f                   	pop    edi
c0014ff2:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0014ff7:	5d                   	pop    ebp
c0014ff8:	68 84 af 02 c0       	push   0xc002af84
c0014ffd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015003:	e8 9a bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015008:	0f 21 f8             	mov    eax,db7
c001500b:	5a                   	pop    edx
c001500c:	59                   	pop    ecx
c001500d:	50                   	push   eax
c001500e:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0015013:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015019:	e8 aa bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001501e:	5e                   	pop    esi
c001501f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015022:	e8 9c 85 00 00       	call   c001d5c3 <Thr::getDriverNameFromAddress(unsigned long)>
c0015027:	83 c4 10             	add    esp,0x10
c001502a:	85 c0                	test   eax,eax
c001502c:	74 7d                	je     c00150ab <displayDebugInfo(regs*)+0x48b>
c001502e:	89 c6                	mov    esi,eax
c0015030:	50                   	push   eax
c0015031:	50                   	push   eax
c0015032:	56                   	push   esi
c0015033:	68 8c af 02 c0       	push   0xc002af8c
c0015038:	e8 66 dd ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001503d:	5a                   	pop    edx
c001503e:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0015043:	59                   	pop    ecx
c0015044:	68 9a af 02 c0       	push   0xc002af9a
c0015049:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504f:	e8 4e bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015054:	5f                   	pop    edi
c0015055:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001505a:	5d                   	pop    ebp
c001505b:	56                   	push   esi
c001505c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015062:	e8 3b bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015067:	58                   	pop    eax
c0015068:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001506d:	5a                   	pop    edx
c001506e:	68 a6 af 02 c0       	push   0xc002afa6
c0015073:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015079:	e8 24 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001507e:	59                   	pop    ecx
c001507f:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0015084:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001508a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001508d:	e8 68 85 00 00       	call   c001d5fa <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015092:	5b                   	pop    ebx
c0015093:	5d                   	pop    ebp
c0015094:	50                   	push   eax
c0015095:	57                   	push   edi
c0015096:	e8 2d bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001509b:	58                   	pop    eax
c001509c:	5a                   	pop    edx
c001509d:	56                   	push   esi
c001509e:	68 b2 af 02 c0       	push   0xc002afb2
c00150a3:	e8 fb dc ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00150a8:	83 c4 10             	add    esp,0x10
c00150ab:	fa                   	cli    
c00150ac:	f4                   	hlt    
c00150ad:	eb fe                	jmp    c00150ad <displayDebugInfo(regs*)+0x48d>

c00150af <x87EmulHandler(regs*, void*)>:
c00150af:	83 ec 0c             	sub    esp,0xc
c00150b2:	0f 20 c2             	mov    edx,cr0
c00150b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150ba:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00150be:	75 4b                	jne    c001510b <x87EmulHandler(regs*, void*)+0x5c>
c00150c0:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00150c5:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00150cb:	85 c0                	test   eax,eax
c00150cd:	74 05                	je     c00150d4 <x87EmulHandler(regs*, void*)+0x25>
c00150cf:	83 e2 08             	and    edx,0x8
c00150d2:	75 17                	jne    c00150eb <x87EmulHandler(regs*, void*)+0x3c>
c00150d4:	83 ec 0c             	sub    esp,0xc
c00150d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150db:	e8 aa a8 00 00       	call   c001f98a <Vm::x87Handler(regs*)>
c00150e0:	83 c4 10             	add    esp,0x10
c00150e3:	84 c0                	test   al,al
c00150e5:	74 24                	je     c001510b <x87EmulHandler(regs*, void*)+0x5c>
c00150e7:	83 c4 0c             	add    esp,0xc
c00150ea:	c3                   	ret    
c00150eb:	83 ec 0c             	sub    esp,0xc
c00150ee:	68 d8 af 02 c0       	push   0xc002afd8
c00150f3:	e8 ab dc ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00150f8:	0f 06                	clts   
c00150fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150ff:	83 c4 10             	add    esp,0x10
c0015102:	a3 e8 e5 02 c0       	mov    ds:0xc002e5e8,eax
c0015107:	83 c4 0c             	add    esp,0xc
c001510a:	c3                   	ret    
c001510b:	83 ec 0c             	sub    esp,0xc
c001510e:	68 c2 af 02 c0       	push   0xc002afc2
c0015113:	e8 8b dc ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0015118:	5a                   	pop    edx
c0015119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001511d:	e8 fe fa ff ff       	call   c0014c20 <displayDebugInfo(regs*)>

c0015122 <gpFault(regs*, void*)>:
c0015122:	53                   	push   ebx
c0015123:	83 ec 14             	sub    esp,0x14
c0015126:	c7 05 e4 e5 02 c0 07 ed 01 c0 	mov    DWORD PTR ds:0xc002e5e4,0xc001ed07
c0015130:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015134:	53                   	push   ebx
c0015135:	e8 cd 9b 00 00       	call   c001ed07 <Vm::faultHandler(regs*)>
c001513a:	83 c4 10             	add    esp,0x10
c001513d:	84 c0                	test   al,al
c001513f:	74 05                	je     c0015146 <gpFault(regs*, void*)+0x24>
c0015141:	83 c4 08             	add    esp,0x8
c0015144:	5b                   	pop    ebx
c0015145:	c3                   	ret    
c0015146:	83 ec 0c             	sub    esp,0xc
c0015149:	68 e5 af 02 c0       	push   0xc002afe5
c001514e:	e8 50 dc ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0015153:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015156:	e8 c5 fa ff ff       	call   c0014c20 <displayDebugInfo(regs*)>

c001515b <pgFault(regs*, void*)>:
c001515b:	83 ec 14             	sub    esp,0x14
c001515e:	0f 20 d0             	mov    eax,cr2
c0015161:	50                   	push   eax
c0015162:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015167:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001516a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015170:	e8 57 d8 ff ff       	call   c00129cc <VAS::tryLoadBackOffDisk(unsigned long)>
c0015175:	83 c4 10             	add    esp,0x10
c0015178:	84 c0                	test   al,al
c001517a:	74 04                	je     c0015180 <pgFault(regs*, void*)+0x25>
c001517c:	83 c4 0c             	add    esp,0xc
c001517f:	c3                   	ret    
c0015180:	83 ec 0c             	sub    esp,0xc
c0015183:	68 00 b0 02 c0       	push   0xc002b000
c0015188:	e8 16 dc ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001518d:	58                   	pop    eax
c001518e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015192:	e8 89 fa ff ff       	call   c0014c20 <displayDebugInfo(regs*)>

c0015197 <otherISRHandler(regs*, void*)>:
c0015197:	53                   	push   ebx
c0015198:	83 ec 0c             	sub    esp,0xc
c001519b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001519f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00151a2:	50                   	push   eax
c00151a3:	50                   	push   eax
c00151a4:	68 0d b0 02 c0       	push   0xc002b00d
c00151a9:	e8 f5 db ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00151ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151b1:	e8 6a fa ff ff       	call   c0014c20 <displayDebugInfo(regs*)>

c00151b6 <opcodeFault(regs*, void*)>:
c00151b6:	55                   	push   ebp
c00151b7:	89 e5                	mov    ebp,esp
c00151b9:	56                   	push   esi
c00151ba:	53                   	push   ebx
c00151bb:	83 ec 40             	sub    esp,0x40
c00151be:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00151c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151c9:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00151cf:	84 c0                	test   al,al
c00151d1:	74 24                	je     c00151f7 <opcodeFault(regs*, void*)+0x41>
c00151d3:	83 ec 0c             	sub    esp,0xc
c00151d6:	68 2c b0 02 c0       	push   0xc002b02c
c00151db:	e8 c3 db ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00151e0:	83 c4 10             	add    esp,0x10
c00151e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151e9:	8d 50 19             	lea    edx,[eax+0x19]
c00151ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151f2:	e9 be 05 00 00       	jmp    c00157b5 <opcodeFault(regs*, void*)+0x5ff>
c00151f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151fd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015200:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015204:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001520e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015211:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015214:	8a 00                	mov    al,BYTE PTR [eax]
c0015216:	3c f0                	cmp    al,0xf0
c0015218:	75 17                	jne    c0015231 <opcodeFault(regs*, void*)+0x7b>
c001521a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001521d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015220:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015223:	8d 50 01             	lea    edx,[eax+0x1]
c0015226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015229:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001522c:	e9 da 00 00 00       	jmp    c001530b <opcodeFault(regs*, void*)+0x155>
c0015231:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015234:	8a 00                	mov    al,BYTE PTR [eax]
c0015236:	3c f2                	cmp    al,0xf2
c0015238:	74 09                	je     c0015243 <opcodeFault(regs*, void*)+0x8d>
c001523a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523d:	8a 00                	mov    al,BYTE PTR [eax]
c001523f:	3c f3                	cmp    al,0xf3
c0015241:	75 1b                	jne    c001525e <opcodeFault(regs*, void*)+0xa8>
c0015243:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015247:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001524a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015250:	8d 50 01             	lea    edx,[eax+0x1]
c0015253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015256:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015259:	e9 ad 00 00 00       	jmp    c001530b <opcodeFault(regs*, void*)+0x155>
c001525e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015261:	8a 00                	mov    al,BYTE PTR [eax]
c0015263:	3c 66                	cmp    al,0x66
c0015265:	75 1f                	jne    c0015286 <opcodeFault(regs*, void*)+0xd0>
c0015267:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001526b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001526f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015275:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015278:	8d 50 01             	lea    edx,[eax+0x1]
c001527b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015281:	e9 85 00 00 00       	jmp    c001530b <opcodeFault(regs*, void*)+0x155>
c0015286:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015289:	8a 00                	mov    al,BYTE PTR [eax]
c001528b:	3c 67                	cmp    al,0x67
c001528d:	75 18                	jne    c00152a7 <opcodeFault(regs*, void*)+0xf1>
c001528f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015293:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015299:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001529c:	8d 50 01             	lea    edx,[eax+0x1]
c001529f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152a5:	eb 64                	jmp    c001530b <opcodeFault(regs*, void*)+0x155>
c00152a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152aa:	8a 00                	mov    al,BYTE PTR [eax]
c00152ac:	3c 2e                	cmp    al,0x2e
c00152ae:	74 09                	je     c00152b9 <opcodeFault(regs*, void*)+0x103>
c00152b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b3:	8a 00                	mov    al,BYTE PTR [eax]
c00152b5:	3c 3e                	cmp    al,0x3e
c00152b7:	75 18                	jne    c00152d1 <opcodeFault(regs*, void*)+0x11b>
c00152b9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152bd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c6:	8d 50 01             	lea    edx,[eax+0x1]
c00152c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152cf:	eb 3a                	jmp    c001530b <opcodeFault(regs*, void*)+0x155>
c00152d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d4:	8a 00                	mov    al,BYTE PTR [eax]
c00152d6:	3c 36                	cmp    al,0x36
c00152d8:	74 1b                	je     c00152f5 <opcodeFault(regs*, void*)+0x13f>
c00152da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152dd:	8a 00                	mov    al,BYTE PTR [eax]
c00152df:	3c 26                	cmp    al,0x26
c00152e1:	74 12                	je     c00152f5 <opcodeFault(regs*, void*)+0x13f>
c00152e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e6:	8a 00                	mov    al,BYTE PTR [eax]
c00152e8:	3c 64                	cmp    al,0x64
c00152ea:	74 09                	je     c00152f5 <opcodeFault(regs*, void*)+0x13f>
c00152ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ef:	8a 00                	mov    al,BYTE PTR [eax]
c00152f1:	3c 65                	cmp    al,0x65
c00152f3:	75 16                	jne    c001530b <opcodeFault(regs*, void*)+0x155>
c00152f5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152f9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015302:	8d 50 01             	lea    edx,[eax+0x1]
c0015305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015308:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001530b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530e:	8a 00                	mov    al,BYTE PTR [eax]
c0015310:	3c 0f                	cmp    al,0xf
c0015312:	0f 85 ad 00 00 00    	jne    c00153c5 <opcodeFault(regs*, void*)+0x20f>
c0015318:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531b:	40                   	inc    eax
c001531c:	8a 00                	mov    al,BYTE PTR [eax]
c001531e:	3c c2                	cmp    al,0xc2
c0015320:	74 0e                	je     c0015330 <opcodeFault(regs*, void*)+0x17a>
c0015322:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015325:	40                   	inc    eax
c0015326:	8a 00                	mov    al,BYTE PTR [eax]
c0015328:	3c c3                	cmp    al,0xc3
c001532a:	0f 85 95 00 00 00    	jne    c00153c5 <opcodeFault(regs*, void*)+0x20f>
c0015330:	83 ec 0c             	sub    esp,0xc
c0015333:	68 4f b0 02 c0       	push   0xc002b04f
c0015338:	e8 66 da ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001533d:	83 c4 10             	add    esp,0x10
c0015340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015343:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015346:	8d 50 01             	lea    edx,[eax+0x1]
c0015349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001534f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015352:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015355:	8a 00                	mov    al,BYTE PTR [eax]
c0015357:	8d 50 fe             	lea    edx,[eax-0x2]
c001535a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535d:	88 10                	mov    BYTE PTR [eax],dl
c001535f:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015362:	50                   	push   eax
c0015363:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015366:	50                   	push   eax
c0015367:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001536a:	50                   	push   eax
c001536b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001536e:	e8 35 48 00 00       	call   c0019ba8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015379:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001537f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015382:	01 d0                	add    eax,edx
c0015384:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001538d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015390:	48                   	dec    eax
c0015391:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015397:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001539a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001539d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a0:	83 ec 04             	sub    esp,0x4
c00153a3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153a6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153a9:	50                   	push   eax
c00153aa:	e8 05 ae fe ff       	call   c00001b4 <voodooXADD>
c00153af:	83 c4 10             	add    esp,0x10
c00153b2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00153b5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00153b8:	01 c2                	add    edx,eax
c00153ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c0:	e9 f0 03 00 00       	jmp    c00157b5 <opcodeFault(regs*, void*)+0x5ff>
c00153c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ca:	3c 0f                	cmp    al,0xf
c00153cc:	0f 85 8b 01 00 00    	jne    c001555d <opcodeFault(regs*, void*)+0x3a7>
c00153d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d5:	40                   	inc    eax
c00153d6:	8a 00                	mov    al,BYTE PTR [eax]
c00153d8:	3c c7                	cmp    al,0xc7
c00153da:	0f 86 7d 01 00 00    	jbe    c001555d <opcodeFault(regs*, void*)+0x3a7>
c00153e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e3:	40                   	inc    eax
c00153e4:	8a 00                	mov    al,BYTE PTR [eax]
c00153e6:	3c cf                	cmp    al,0xcf
c00153e8:	0f 87 6f 01 00 00    	ja     c001555d <opcodeFault(regs*, void*)+0x3a7>
c00153ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f1:	40                   	inc    eax
c00153f2:	8a 00                	mov    al,BYTE PTR [eax]
c00153f4:	83 c0 38             	add    eax,0x38
c00153f7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00153fa:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00153fe:	75 0b                	jne    c001540b <opcodeFault(regs*, void*)+0x255>
c0015400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015403:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015406:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015409:	eb 75                	jmp    c0015480 <opcodeFault(regs*, void*)+0x2ca>
c001540b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001540f:	75 0b                	jne    c001541c <opcodeFault(regs*, void*)+0x266>
c0015411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015414:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015417:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001541a:	eb 64                	jmp    c0015480 <opcodeFault(regs*, void*)+0x2ca>
c001541c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015420:	75 0b                	jne    c001542d <opcodeFault(regs*, void*)+0x277>
c0015422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015425:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015428:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001542b:	eb 53                	jmp    c0015480 <opcodeFault(regs*, void*)+0x2ca>
c001542d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015431:	75 0b                	jne    c001543e <opcodeFault(regs*, void*)+0x288>
c0015433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015436:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015439:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001543c:	eb 42                	jmp    c0015480 <opcodeFault(regs*, void*)+0x2ca>
c001543e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015442:	75 0b                	jne    c001544f <opcodeFault(regs*, void*)+0x299>
c0015444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015447:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001544a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001544d:	eb 31                	jmp    c0015480 <opcodeFault(regs*, void*)+0x2ca>
c001544f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015453:	75 0b                	jne    c0015460 <opcodeFault(regs*, void*)+0x2aa>
c0015455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015458:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001545b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001545e:	eb 20                	jmp    c0015480 <opcodeFault(regs*, void*)+0x2ca>
c0015460:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015464:	75 0b                	jne    c0015471 <opcodeFault(regs*, void*)+0x2bb>
c0015466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015469:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001546c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001546f:	eb 0f                	jmp    c0015480 <opcodeFault(regs*, void*)+0x2ca>
c0015471:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015475:	75 09                	jne    c0015480 <opcodeFault(regs*, void*)+0x2ca>
c0015477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001547d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015480:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015484:	74 10                	je     c0015496 <opcodeFault(regs*, void*)+0x2e0>
c0015486:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001548d:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015494:	eb 2d                	jmp    c00154c3 <opcodeFault(regs*, void*)+0x30d>
c0015496:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015499:	c1 e0 18             	shl    eax,0x18
c001549c:	89 c2                	mov    edx,eax
c001549e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154a1:	c1 e0 08             	shl    eax,0x8
c00154a4:	25 00 00 ff 00       	and    eax,0xff0000
c00154a9:	09 c2                	or     edx,eax
c00154ab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154ae:	c1 e8 08             	shr    eax,0x8
c00154b1:	25 00 ff 00 00       	and    eax,0xff00
c00154b6:	09 c2                	or     edx,eax
c00154b8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154bb:	c1 e8 18             	shr    eax,0x18
c00154be:	09 d0                	or     eax,edx
c00154c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154c3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154c7:	75 0b                	jne    c00154d4 <opcodeFault(regs*, void*)+0x31e>
c00154c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154cf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00154d2:	eb 75                	jmp    c0015549 <opcodeFault(regs*, void*)+0x393>
c00154d4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154d8:	75 0b                	jne    c00154e5 <opcodeFault(regs*, void*)+0x32f>
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154e0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00154e3:	eb 64                	jmp    c0015549 <opcodeFault(regs*, void*)+0x393>
c00154e5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154e9:	75 0b                	jne    c00154f6 <opcodeFault(regs*, void*)+0x340>
c00154eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154f1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00154f4:	eb 53                	jmp    c0015549 <opcodeFault(regs*, void*)+0x393>
c00154f6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154fa:	75 0b                	jne    c0015507 <opcodeFault(regs*, void*)+0x351>
c00154fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ff:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015502:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015505:	eb 42                	jmp    c0015549 <opcodeFault(regs*, void*)+0x393>
c0015507:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001550b:	75 0b                	jne    c0015518 <opcodeFault(regs*, void*)+0x362>
c001550d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015510:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015513:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015516:	eb 31                	jmp    c0015549 <opcodeFault(regs*, void*)+0x393>
c0015518:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001551c:	75 0b                	jne    c0015529 <opcodeFault(regs*, void*)+0x373>
c001551e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015521:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015524:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015527:	eb 20                	jmp    c0015549 <opcodeFault(regs*, void*)+0x393>
c0015529:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001552d:	75 0b                	jne    c001553a <opcodeFault(regs*, void*)+0x384>
c001552f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015532:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015535:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015538:	eb 0f                	jmp    c0015549 <opcodeFault(regs*, void*)+0x393>
c001553a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001553e:	75 09                	jne    c0015549 <opcodeFault(regs*, void*)+0x393>
c0015540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015543:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015546:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001554f:	8d 50 02             	lea    edx,[eax+0x2]
c0015552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015555:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015558:	e9 58 02 00 00       	jmp    c00157b5 <opcodeFault(regs*, void*)+0x5ff>
c001555d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015560:	8a 00                	mov    al,BYTE PTR [eax]
c0015562:	3c 0f                	cmp    al,0xf
c0015564:	0f 85 76 01 00 00    	jne    c00156e0 <opcodeFault(regs*, void*)+0x52a>
c001556a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556d:	40                   	inc    eax
c001556e:	8a 00                	mov    al,BYTE PTR [eax]
c0015570:	3c c7                	cmp    al,0xc7
c0015572:	0f 85 68 01 00 00    	jne    c00156e0 <opcodeFault(regs*, void*)+0x52a>
c0015578:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001557b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015581:	8d 50 01             	lea    edx,[eax+0x1]
c0015584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015587:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001558a:	8d 45 ba             	lea    eax,[ebp-0x46]
c001558d:	50                   	push   eax
c001558e:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015591:	50                   	push   eax
c0015592:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015595:	50                   	push   eax
c0015596:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015599:	e8 0a 46 00 00       	call   c0019ba8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001559e:	83 c4 10             	add    esp,0x10
c00155a1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00155a4:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00155a7:	83 f0 01             	xor    eax,0x1
c00155aa:	84 c0                	test   al,al
c00155ac:	0f 84 2e 01 00 00    	je     c00156e0 <opcodeFault(regs*, void*)+0x52a>
c00155b2:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00155b5:	3c 01                	cmp    al,0x1
c00155b7:	0f 85 23 01 00 00    	jne    c00156e0 <opcodeFault(regs*, void*)+0x52a>
c00155bd:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00155c0:	83 f0 01             	xor    eax,0x1
c00155c3:	84 c0                	test   al,al
c00155c5:	0f 84 15 01 00 00    	je     c00156e0 <opcodeFault(regs*, void*)+0x52a>
c00155cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ce:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155d1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155d4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00155db:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00155de:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00155e1:	89 c2                	mov    edx,eax
c00155e3:	b8 00 00 00 00       	mov    eax,0x0
c00155e8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155eb:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00155ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155f4:	ba 00 00 00 00       	mov    edx,0x0
c00155f9:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00155fc:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00155ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015602:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015605:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015608:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001560f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015612:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015615:	89 c2                	mov    edx,eax
c0015617:	b8 00 00 00 00       	mov    eax,0x0
c001561c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001561f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015625:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015628:	ba 00 00 00 00       	mov    edx,0x0
c001562d:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015630:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015633:	e8 84 86 00 00       	call   c001dcbc <lockScheduler()>
c0015638:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001563b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001563e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015640:	89 c1                	mov    ecx,eax
c0015642:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015645:	89 cb                	mov    ebx,ecx
c0015647:	89 d0                	mov    eax,edx
c0015649:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001564c:	89 c6                	mov    esi,eax
c001564e:	89 f0                	mov    eax,esi
c0015650:	09 d8                	or     eax,ebx
c0015652:	85 c0                	test   eax,eax
c0015654:	75 21                	jne    c0015677 <opcodeFault(regs*, void*)+0x4c1>
c0015656:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015659:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001565c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001565f:	89 01                	mov    DWORD PTR [ecx],eax
c0015661:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015667:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001566a:	83 c8 40             	or     eax,0x40
c001566d:	89 c2                	mov    edx,eax
c001566f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015672:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015675:	eb 3e                	jmp    c00156b5 <opcodeFault(regs*, void*)+0x4ff>
c0015677:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001567a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001567d:	8b 00                	mov    eax,DWORD PTR [eax]
c001567f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015682:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015685:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001568e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015691:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015694:	89 d0                	mov    eax,edx
c0015696:	31 d2                	xor    edx,edx
c0015698:	89 c3                	mov    ebx,eax
c001569a:	89 d6                	mov    esi,edx
c001569c:	89 da                	mov    edx,ebx
c001569e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156aa:	83 e0 bf             	and    eax,0xffffffbf
c00156ad:	89 c2                	mov    edx,eax
c00156af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b2:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00156b5:	e8 04 86 00 00       	call   c001dcbe <unlockScheduler()>
c00156ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156c0:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00156c3:	01 c2                	add    edx,eax
c00156c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156cb:	83 ec 0c             	sub    esp,0xc
c00156ce:	68 5e b0 02 c0       	push   0xc002b05e
c00156d3:	e8 cb d6 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00156d8:	83 c4 10             	add    esp,0x10
c00156db:	e9 d5 00 00 00       	jmp    c00157b5 <opcodeFault(regs*, void*)+0x5ff>
c00156e0:	83 ec 0c             	sub    esp,0xc
c00156e3:	68 71 b0 02 c0       	push   0xc002b071
c00156e8:	e8 b6 d6 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156fc:	c1 e0 04             	shl    eax,0x4
c00156ff:	01 d0                	add    eax,edx
c0015701:	83 c0 03             	add    eax,0x3
c0015704:	8a 00                	mov    al,BYTE PTR [eax]
c0015706:	0f b6 d8             	movzx  ebx,al
c0015709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001570f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015712:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015715:	c1 e0 04             	shl    eax,0x4
c0015718:	01 d0                	add    eax,edx
c001571a:	83 c0 02             	add    eax,0x2
c001571d:	8a 00                	mov    al,BYTE PTR [eax]
c001571f:	0f b6 c8             	movzx  ecx,al
c0015722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015725:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001572e:	c1 e0 04             	shl    eax,0x4
c0015731:	01 d0                	add    eax,edx
c0015733:	40                   	inc    eax
c0015734:	8a 00                	mov    al,BYTE PTR [eax]
c0015736:	0f b6 d0             	movzx  edx,al
c0015739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573c:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001573f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015742:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015745:	c1 e0 04             	shl    eax,0x4
c0015748:	01 f0                	add    eax,esi
c001574a:	8a 00                	mov    al,BYTE PTR [eax]
c001574c:	0f b6 c0             	movzx  eax,al
c001574f:	83 ec 0c             	sub    esp,0xc
c0015752:	53                   	push   ebx
c0015753:	51                   	push   ecx
c0015754:	52                   	push   edx
c0015755:	50                   	push   eax
c0015756:	68 84 b0 02 c0       	push   0xc002b084
c001575b:	e8 43 d6 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0015760:	83 c4 20             	add    esp,0x20
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015769:	83 c0 03             	add    eax,0x3
c001576c:	8a 00                	mov    al,BYTE PTR [eax]
c001576e:	0f b6 d8             	movzx  ebx,al
c0015771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015774:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015777:	83 c0 02             	add    eax,0x2
c001577a:	8a 00                	mov    al,BYTE PTR [eax]
c001577c:	0f b6 c8             	movzx  ecx,al
c001577f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015782:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015785:	40                   	inc    eax
c0015786:	8a 00                	mov    al,BYTE PTR [eax]
c0015788:	0f b6 d0             	movzx  edx,al
c001578b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015791:	8a 00                	mov    al,BYTE PTR [eax]
c0015793:	0f b6 c0             	movzx  eax,al
c0015796:	83 ec 0c             	sub    esp,0xc
c0015799:	53                   	push   ebx
c001579a:	51                   	push   ecx
c001579b:	52                   	push   edx
c001579c:	50                   	push   eax
c001579d:	68 ac b0 02 c0       	push   0xc002b0ac
c00157a2:	e8 fc d5 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00157a7:	83 c4 20             	add    esp,0x20
c00157aa:	83 ec 0c             	sub    esp,0xc
c00157ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157b0:	e8 6b f4 ff ff       	call   c0014c20 <displayDebugInfo(regs*)>
c00157b5:	8d 65 f8             	lea    esp,[ebp-0x8]
c00157b8:	5b                   	pop    ebx
c00157b9:	5e                   	pop    esi
c00157ba:	5d                   	pop    ebp
c00157bb:	c3                   	ret    

c00157bc <displayProgramFault(char const*)>:
c00157bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157c4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00157ca:	85 c0                	test   eax,eax
c00157cc:	74 15                	je     c00157e3 <displayProgramFault(char const*)+0x27>
c00157ce:	83 ec 0c             	sub    esp,0xc
c00157d1:	6a 04                	push   0x4
c00157d3:	6a 0f                	push   0xf
c00157d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157d9:	50                   	push   eax
c00157da:	e8 05 b5 ff ff       	call   c0010ce4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00157df:	83 c4 1c             	add    esp,0x1c
c00157e2:	c3                   	ret    
c00157e3:	c3                   	ret    

c00157e4 <setupInterruptController()>:
c00157e4:	55                   	push   ebp
c00157e5:	89 e5                	mov    ebp,esp
c00157e7:	53                   	push   ebx
c00157e8:	83 ec 24             	sub    esp,0x24
c00157eb:	b8 00 00 00 00       	mov    eax,0x0
c00157f0:	85 c0                	test   eax,eax
c00157f2:	0f 95 c0             	setne  al
c00157f5:	84 c0                	test   al,al
c00157f7:	74 5b                	je     c0015854 <setupInterruptController()+0x70>
c00157f9:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015800:	83 ec 0c             	sub    esp,0xc
c0015803:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015806:	e8 40 a0 ff ff       	call   c000f84b <malloc>
c001580b:	83 c4 10             	add    esp,0x10
c001580e:	89 c3                	mov    ebx,eax
c0015810:	83 ec 0c             	sub    esp,0xc
c0015813:	53                   	push   ebx
c0015814:	e8 f7 00 01 00       	call   c0025910 <APIC::APIC()>
c0015819:	83 c4 10             	add    esp,0x10
c001581c:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001581f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015822:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015825:	8b 00                	mov    eax,DWORD PTR [eax]
c0015827:	83 c0 08             	add    eax,0x8
c001582a:	8b 00                	mov    eax,DWORD PTR [eax]
c001582c:	6a 00                	push   0x0
c001582e:	6a 00                	push   0x0
c0015830:	6a 00                	push   0x0
c0015832:	52                   	push   edx
c0015833:	ff d0                	call   eax
c0015835:	83 c4 10             	add    esp,0x10
c0015838:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001583d:	83 ec 08             	sub    esp,0x8
c0015840:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015843:	50                   	push   eax
c0015844:	e8 87 e9 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0015849:	83 c4 10             	add    esp,0x10
c001584c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001584f:	e9 89 03 00 00       	jmp    c0015bdd <setupInterruptController()+0x3f9>
c0015854:	a0 e0 0d 03 c0       	mov    al,ds:0xc0030de0
c0015859:	84 c0                	test   al,al
c001585b:	75 24                	jne    c0015881 <setupInterruptController()+0x9d>
c001585d:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0015862:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015868:	83 e2 fe             	and    edx,0xfffffffe
c001586b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015871:	83 ec 0c             	sub    esp,0xc
c0015874:	68 d1 b0 02 c0       	push   0xc002b0d1
c0015879:	e8 25 d5 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001587e:	83 c4 10             	add    esp,0x10
c0015881:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0015886:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001588c:	83 e0 01             	and    eax,0x1
c001588f:	84 c0                	test   al,al
c0015891:	0f 95 c0             	setne  al
c0015894:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015897:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001589e:	83 ec 0c             	sub    esp,0xc
c00158a1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00158a4:	e8 a2 9f ff ff       	call   c000f84b <malloc>
c00158a9:	83 c4 10             	add    esp,0x10
c00158ac:	89 c3                	mov    ebx,eax
c00158ae:	83 ec 0c             	sub    esp,0xc
c00158b1:	53                   	push   ebx
c00158b2:	e8 b1 05 01 00       	call   c0025e68 <PIC::PIC()>
c00158b7:	83 c4 10             	add    esp,0x10
c00158ba:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158bd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c5:	83 c0 08             	add    eax,0x8
c00158c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ca:	6a 00                	push   0x0
c00158cc:	6a 00                	push   0x0
c00158ce:	6a 00                	push   0x0
c00158d0:	52                   	push   edx
c00158d1:	ff d0                	call   eax
c00158d3:	83 c4 10             	add    esp,0x10
c00158d6:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00158da:	74 73                	je     c001594f <setupInterruptController()+0x16b>
c00158dc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e4:	83 c0 0c             	add    eax,0xc
c00158e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e9:	6a 00                	push   0x0
c00158eb:	6a 00                	push   0x0
c00158ed:	6a 00                	push   0x0
c00158ef:	52                   	push   edx
c00158f0:	ff d0                	call   eax
c00158f2:	83 c4 10             	add    esp,0x10
c00158f5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158f9:	74 15                	je     c0015910 <setupInterruptController()+0x12c>
c00158fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015900:	83 c0 04             	add    eax,0x4
c0015903:	8b 00                	mov    eax,DWORD PTR [eax]
c0015905:	83 ec 0c             	sub    esp,0xc
c0015908:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001590b:	ff d0                	call   eax
c001590d:	83 c4 10             	add    esp,0x10
c0015910:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015917:	83 ec 0c             	sub    esp,0xc
c001591a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001591d:	e8 29 9f ff ff       	call   c000f84b <malloc>
c0015922:	83 c4 10             	add    esp,0x10
c0015925:	89 c3                	mov    ebx,eax
c0015927:	83 ec 0c             	sub    esp,0xc
c001592a:	53                   	push   ebx
c001592b:	e8 e0 ff 00 00       	call   c0025910 <APIC::APIC()>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015936:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015939:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001593c:	8b 00                	mov    eax,DWORD PTR [eax]
c001593e:	83 c0 08             	add    eax,0x8
c0015941:	8b 00                	mov    eax,DWORD PTR [eax]
c0015943:	6a 00                	push   0x0
c0015945:	6a 00                	push   0x0
c0015947:	6a 00                	push   0x0
c0015949:	52                   	push   edx
c001594a:	ff d0                	call   eax
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0015954:	83 ec 08             	sub    esp,0x8
c0015957:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001595a:	50                   	push   eax
c001595b:	e8 70 e8 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	c7 05 e8 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5e8,0x0
c001596d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015970:	8b 00                	mov    eax,DWORD PTR [eax]
c0015972:	83 c0 24             	add    eax,0x24
c0015975:	8b 00                	mov    eax,DWORD PTR [eax]
c0015977:	6a 00                	push   0x0
c0015979:	68 97 51 01 c0       	push   0xc0015197
c001597e:	6a 00                	push   0x0
c0015980:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015983:	ff d0                	call   eax
c0015985:	83 c4 10             	add    esp,0x10
c0015988:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001598b:	8b 00                	mov    eax,DWORD PTR [eax]
c001598d:	83 c0 24             	add    eax,0x24
c0015990:	8b 00                	mov    eax,DWORD PTR [eax]
c0015992:	6a 00                	push   0x0
c0015994:	68 97 51 01 c0       	push   0xc0015197
c0015999:	6a 01                	push   0x1
c001599b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001599e:	ff d0                	call   eax
c00159a0:	83 c4 10             	add    esp,0x10
c00159a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a8:	83 c0 24             	add    eax,0x24
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	6a 00                	push   0x0
c00159af:	68 7d 4a 01 c0       	push   0xc0014a7d
c00159b4:	6a 02                	push   0x2
c00159b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b9:	ff d0                	call   eax
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c3:	83 c0 24             	add    eax,0x24
c00159c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c8:	6a 00                	push   0x0
c00159ca:	68 97 51 01 c0       	push   0xc0015197
c00159cf:	6a 03                	push   0x3
c00159d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159d4:	ff d0                	call   eax
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159de:	83 c0 24             	add    eax,0x24
c00159e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e3:	6a 00                	push   0x0
c00159e5:	68 97 51 01 c0       	push   0xc0015197
c00159ea:	6a 04                	push   0x4
c00159ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ef:	ff d0                	call   eax
c00159f1:	83 c4 10             	add    esp,0x10
c00159f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f9:	83 c0 24             	add    eax,0x24
c00159fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fe:	6a 00                	push   0x0
c0015a00:	68 97 51 01 c0       	push   0xc0015197
c0015a05:	6a 05                	push   0x5
c0015a07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a0a:	ff d0                	call   eax
c0015a0c:	83 c4 10             	add    esp,0x10
c0015a0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a14:	83 c0 24             	add    eax,0x24
c0015a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a19:	6a 00                	push   0x0
c0015a1b:	68 b6 51 01 c0       	push   0xc00151b6
c0015a20:	6a 06                	push   0x6
c0015a22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a25:	ff d0                	call   eax
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2f:	83 c0 24             	add    eax,0x24
c0015a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a34:	6a 00                	push   0x0
c0015a36:	68 af 50 01 c0       	push   0xc00150af
c0015a3b:	6a 07                	push   0x7
c0015a3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a40:	ff d0                	call   eax
c0015a42:	83 c4 10             	add    esp,0x10
c0015a45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4a:	83 c0 24             	add    eax,0x24
c0015a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4f:	6a 00                	push   0x0
c0015a51:	68 98 48 01 c0       	push   0xc0014898
c0015a56:	6a 08                	push   0x8
c0015a58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5b:	ff d0                	call   eax
c0015a5d:	83 c4 10             	add    esp,0x10
c0015a60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a65:	83 c0 24             	add    eax,0x24
c0015a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6a:	6a 00                	push   0x0
c0015a6c:	68 97 51 01 c0       	push   0xc0015197
c0015a71:	6a 09                	push   0x9
c0015a73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a76:	ff d0                	call   eax
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a80:	83 c0 24             	add    eax,0x24
c0015a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a85:	6a 00                	push   0x0
c0015a87:	68 97 51 01 c0       	push   0xc0015197
c0015a8c:	6a 0a                	push   0xa
c0015a8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a91:	ff d0                	call   eax
c0015a93:	83 c4 10             	add    esp,0x10
c0015a96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9b:	83 c0 24             	add    eax,0x24
c0015a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa0:	6a 00                	push   0x0
c0015aa2:	68 97 51 01 c0       	push   0xc0015197
c0015aa7:	6a 0b                	push   0xb
c0015aa9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aac:	ff d0                	call   eax
c0015aae:	83 c4 10             	add    esp,0x10
c0015ab1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab6:	83 c0 24             	add    eax,0x24
c0015ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abb:	6a 00                	push   0x0
c0015abd:	68 97 51 01 c0       	push   0xc0015197
c0015ac2:	6a 0c                	push   0xc
c0015ac4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac7:	ff d0                	call   eax
c0015ac9:	83 c4 10             	add    esp,0x10
c0015acc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad1:	83 c0 24             	add    eax,0x24
c0015ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad6:	6a 00                	push   0x0
c0015ad8:	68 22 51 01 c0       	push   0xc0015122
c0015add:	6a 0d                	push   0xd
c0015adf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae2:	ff d0                	call   eax
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aec:	83 c0 24             	add    eax,0x24
c0015aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af1:	6a 00                	push   0x0
c0015af3:	68 5b 51 01 c0       	push   0xc001515b
c0015af8:	6a 0e                	push   0xe
c0015afa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afd:	ff d0                	call   eax
c0015aff:	83 c4 10             	add    esp,0x10
c0015b02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b07:	83 c0 24             	add    eax,0x24
c0015b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0c:	6a 00                	push   0x0
c0015b0e:	68 97 51 01 c0       	push   0xc0015197
c0015b13:	6a 0f                	push   0xf
c0015b15:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b18:	ff d0                	call   eax
c0015b1a:	83 c4 10             	add    esp,0x10
c0015b1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b22:	83 c0 24             	add    eax,0x24
c0015b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b27:	6a 00                	push   0x0
c0015b29:	68 97 51 01 c0       	push   0xc0015197
c0015b2e:	6a 10                	push   0x10
c0015b30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b33:	ff d0                	call   eax
c0015b35:	83 c4 10             	add    esp,0x10
c0015b38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3d:	83 c0 24             	add    eax,0x24
c0015b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b42:	6a 00                	push   0x0
c0015b44:	68 97 51 01 c0       	push   0xc0015197
c0015b49:	6a 11                	push   0x11
c0015b4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4e:	ff d0                	call   eax
c0015b50:	83 c4 10             	add    esp,0x10
c0015b53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b58:	83 c0 24             	add    eax,0x24
c0015b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5d:	6a 00                	push   0x0
c0015b5f:	68 97 51 01 c0       	push   0xc0015197
c0015b64:	6a 12                	push   0x12
c0015b66:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b69:	ff d0                	call   eax
c0015b6b:	83 c4 10             	add    esp,0x10
c0015b6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b73:	83 c0 24             	add    eax,0x24
c0015b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b78:	6a 00                	push   0x0
c0015b7a:	68 97 51 01 c0       	push   0xc0015197
c0015b7f:	6a 13                	push   0x13
c0015b81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b84:	ff d0                	call   eax
c0015b86:	83 c4 10             	add    esp,0x10
c0015b89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8e:	83 c0 24             	add    eax,0x24
c0015b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b93:	6a 00                	push   0x0
c0015b95:	68 97 51 01 c0       	push   0xc0015197
c0015b9a:	6a 14                	push   0x14
c0015b9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9f:	ff d0                	call   eax
c0015ba1:	83 c4 10             	add    esp,0x10
c0015ba4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba9:	83 c0 24             	add    eax,0x24
c0015bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bae:	6a 00                	push   0x0
c0015bb0:	68 97 51 01 c0       	push   0xc0015197
c0015bb5:	6a 1e                	push   0x1e
c0015bb7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bba:	ff d0                	call   eax
c0015bbc:	83 c4 10             	add    esp,0x10
c0015bbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc4:	83 c0 24             	add    eax,0x24
c0015bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc9:	6a 00                	push   0x0
c0015bcb:	68 6b c6 01 c0       	push   0xc001c66b
c0015bd0:	6a 60                	push   0x60
c0015bd2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd5:	ff d0                	call   eax
c0015bd7:	83 c4 10             	add    esp,0x10
c0015bda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bdd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015be0:	c9                   	leave  
c0015be1:	c3                   	ret    

c0015be2 <InterruptController::convertLegacyIRQNumber(int)>:
c0015be2:	55                   	push   ebp
c0015be3:	89 e5                	mov    ebp,esp
c0015be5:	83 ec 08             	sub    esp,0x8
c0015be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015beb:	83 ec 0c             	sub    esp,0xc
c0015bee:	50                   	push   eax
c0015bef:	e8 c8 e8 ff ff       	call   c00144bc <Device::getName()>
c0015bf4:	83 c4 10             	add    esp,0x10
c0015bf7:	8a 00                	mov    al,BYTE PTR [eax]
c0015bf9:	3c 41                	cmp    al,0x41
c0015bfb:	0f 94 c0             	sete   al
c0015bfe:	84 c0                	test   al,al
c0015c00:	74 28                	je     c0015c2a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c02:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015c06:	7f 12                	jg     c0015c1a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015c08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c0b:	05 a0 d6 02 c0       	add    eax,0xc002d6a0
c0015c10:	8a 00                	mov    al,BYTE PTR [eax]
c0015c12:	0f b6 c0             	movzx  eax,al
c0015c15:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015c18:	eb 10                	jmp    c0015c2a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c1a:	83 ec 0c             	sub    esp,0xc
c0015c1d:	68 c0 ad 02 c0       	push   0xc002adc0
c0015c22:	e8 ba 48 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0015c27:	83 c4 10             	add    esp,0x10
c0015c2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c2d:	c9                   	leave  
c0015c2e:	c3                   	ret    
c0015c2f:	90                   	nop

c0015c30 <startGUI(void*)>:
c0015c30:	55                   	push   ebp
c0015c31:	89 e5                	mov    ebp,esp
c0015c33:	53                   	push   ebx
c0015c34:	83 ec 04             	sub    esp,0x4
c0015c37:	e8 82 80 00 00       	call   c001dcbe <unlockScheduler()>
c0015c3c:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c0015c42:	83 ec 08             	sub    esp,0x8
c0015c45:	6a 01                	push   0x1
c0015c47:	68 34 b1 02 c0       	push   0xc002b134
c0015c4c:	e8 c3 79 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0015c51:	83 c4 10             	add    esp,0x10
c0015c54:	83 ec 08             	sub    esp,0x8
c0015c57:	53                   	push   ebx
c0015c58:	50                   	push   eax
c0015c59:	e8 ea 7b 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0015c5e:	83 c4 10             	add    esp,0x10
c0015c61:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c0015c67:	83 ec 08             	sub    esp,0x8
c0015c6a:	6a 01                	push   0x1
c0015c6c:	68 4e b1 02 c0       	push   0xc002b14e
c0015c71:	e8 9e 79 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	83 ec 08             	sub    esp,0x8
c0015c7c:	53                   	push   ebx
c0015c7d:	50                   	push   eax
c0015c7e:	e8 c5 7b 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	90                   	nop
c0015c87:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c8a:	c9                   	leave  
c0015c8b:	c3                   	ret    

c0015c8c <startGUIVESA(void*)>:
c0015c8c:	55                   	push   ebp
c0015c8d:	89 e5                	mov    ebp,esp
c0015c8f:	53                   	push   ebx
c0015c90:	83 ec 04             	sub    esp,0x4
c0015c93:	e8 26 80 00 00       	call   c001dcbe <unlockScheduler()>
c0015c98:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c0015c9e:	83 ec 08             	sub    esp,0x8
c0015ca1:	6a 01                	push   0x1
c0015ca3:	68 68 b1 02 c0       	push   0xc002b168
c0015ca8:	e8 67 79 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0015cad:	83 c4 10             	add    esp,0x10
c0015cb0:	83 ec 08             	sub    esp,0x8
c0015cb3:	53                   	push   ebx
c0015cb4:	50                   	push   eax
c0015cb5:	e8 8e 7b 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0015cba:	83 c4 10             	add    esp,0x10
c0015cbd:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c0015cc3:	83 ec 08             	sub    esp,0x8
c0015cc6:	6a 01                	push   0x1
c0015cc8:	68 4e b1 02 c0       	push   0xc002b14e
c0015ccd:	e8 42 79 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	83 ec 08             	sub    esp,0x8
c0015cd8:	53                   	push   ebx
c0015cd9:	50                   	push   eax
c0015cda:	e8 69 7b 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	90                   	nop
c0015ce3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ce6:	c9                   	leave  
c0015ce7:	c3                   	ret    

c0015ce8 <sendKeyToTerminal(unsigned char)>:
c0015ce8:	55                   	push   ebp
c0015ce9:	89 e5                	mov    ebp,esp
c0015ceb:	83 ec 28             	sub    esp,0x28
c0015cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015cf4:	a1 24 e5 02 c0       	mov    eax,ds:0xc002e524
c0015cf9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015cfd:	83 ec 08             	sub    esp,0x8
c0015d00:	52                   	push   edx
c0015d01:	50                   	push   eax
c0015d02:	e8 97 b4 ff ff       	call   c001119e <VgaText::receiveKey(unsigned char)>
c0015d07:	83 c4 10             	add    esp,0x10
c0015d0a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015d0e:	75 41                	jne    c0015d51 <sendKeyToTerminal(unsigned char)+0x69>
c0015d10:	e8 ce 7f 00 00       	call   c001dce3 <lockStuff()>
c0015d15:	a1 00 e6 02 c0       	mov    eax,ds:0xc002e600
c0015d1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d1d:	c7 05 00 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e600,0x0
c0015d27:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015d2b:	74 1f                	je     c0015d4c <sendKeyToTerminal(unsigned char)+0x64>
c0015d2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015d33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d39:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015d42:	e8 c7 85 00 00       	call   c001e30e <unblockTask(ThreadControlBlock*)>
c0015d47:	83 c4 10             	add    esp,0x10
c0015d4a:	eb db                	jmp    c0015d27 <sendKeyToTerminal(unsigned char)+0x3f>
c0015d4c:	e8 66 83 00 00       	call   c001e0b7 <unlockStuff()>
c0015d51:	90                   	nop
c0015d52:	c9                   	leave  
c0015d53:	c3                   	ret    

c0015d54 <sendKeyboardToken(KeyboardToken)>:
c0015d54:	55                   	push   ebp
c0015d55:	89 e5                	mov    ebp,esp
c0015d57:	83 ec 18             	sub    esp,0x18
c0015d5a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d60:	0f b7 c0             	movzx  eax,ax
c0015d63:	83 f2 01             	xor    edx,0x1
c0015d66:	88 90 20 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd19e0],dl
c0015d6c:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0015d71:	85 c0                	test   eax,eax
c0015d73:	74 24                	je     c0015d99 <sendKeyboardToken(KeyboardToken)+0x45>
c0015d75:	8b 0d 08 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e608
c0015d7b:	83 ec 04             	sub    esp,0x4
c0015d7e:	68 20 e6 02 c0       	push   0xc002e620
c0015d83:	83 ec 08             	sub    esp,0x8
c0015d86:	89 e2                	mov    edx,esp
c0015d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8b:	89 02                	mov    DWORD PTR [edx],eax
c0015d8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d90:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d94:	ff d1                	call   ecx
c0015d96:	83 c4 10             	add    esp,0x10
c0015d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d9c:	66 3d 03 02          	cmp    ax,0x203
c0015da0:	75 07                	jne    c0015da9 <sendKeyboardToken(KeyboardToken)+0x55>
c0015da2:	a0 20 e7 02 c0       	mov    al,ds:0xc002e720
c0015da7:	84 c0                	test   al,al
c0015da9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015dad:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015db0:	a0 28 ea 02 c0       	mov    al,ds:0xc002ea28
c0015db5:	38 c2                	cmp    dl,al
c0015db7:	74 1c                	je     c0015dd5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015db9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015dbc:	a2 28 ea 02 c0       	mov    ds:0xc002ea28,al
c0015dc1:	a0 28 ea 02 c0       	mov    al,ds:0xc002ea28
c0015dc6:	0f b6 c0             	movzx  eax,al
c0015dc9:	83 ec 0c             	sub    esp,0xc
c0015dcc:	50                   	push   eax
c0015dcd:	e8 72 a7 ff ff       	call   c0010544 <setTerminalScrollLock(bool)>
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015dd8:	84 c0                	test   al,al
c0015dda:	0f 84 ae 00 00 00    	je     c0015e8e <sendKeyboardToken(KeyboardToken)+0x13a>
c0015de0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de3:	66 3d 10 03          	cmp    ax,0x310
c0015de7:	75 06                	jne    c0015def <sendKeyboardToken(KeyboardToken)+0x9b>
c0015de9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df2:	66 3d 11 03          	cmp    ax,0x311
c0015df6:	75 06                	jne    c0015dfe <sendKeyboardToken(KeyboardToken)+0xaa>
c0015df8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e01:	66 3d 12 03          	cmp    ax,0x312
c0015e05:	75 06                	jne    c0015e0d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015e07:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e10:	66 3d 13 03          	cmp    ax,0x313
c0015e14:	75 06                	jne    c0015e1c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015e16:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1f:	66 3d 14 03          	cmp    ax,0x314
c0015e23:	75 06                	jne    c0015e2b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015e25:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2e:	66 3d 15 03          	cmp    ax,0x315
c0015e32:	75 06                	jne    c0015e3a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015e34:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3d:	66 3d 16 03          	cmp    ax,0x316
c0015e41:	75 06                	jne    c0015e49 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015e43:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4c:	66 3d 17 03          	cmp    ax,0x317
c0015e50:	75 06                	jne    c0015e58 <sendKeyboardToken(KeyboardToken)+0x104>
c0015e52:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5b:	66 3d 18 03          	cmp    ax,0x318
c0015e5f:	75 06                	jne    c0015e67 <sendKeyboardToken(KeyboardToken)+0x113>
c0015e61:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6a:	66 3d 19 03          	cmp    ax,0x319
c0015e6e:	75 06                	jne    c0015e76 <sendKeyboardToken(KeyboardToken)+0x122>
c0015e70:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e79:	66 3d 1a 03          	cmp    ax,0x31a
c0015e7d:	0f 85 c9 00 00 00    	jne    c0015f4c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e83:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015e89:	e9 be 00 00 00       	jmp    c0015f4c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e91:	66 3d 10 03          	cmp    ax,0x310
c0015e95:	75 0a                	jne    c0015ea1 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015e97:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015e9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea4:	66 3d 11 03          	cmp    ax,0x311
c0015ea8:	75 0a                	jne    c0015eb4 <sendKeyboardToken(KeyboardToken)+0x160>
c0015eaa:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015eb0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb7:	66 3d 12 03          	cmp    ax,0x312
c0015ebb:	75 0a                	jne    c0015ec7 <sendKeyboardToken(KeyboardToken)+0x173>
c0015ebd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ec3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eca:	66 3d 13 03          	cmp    ax,0x313
c0015ece:	75 0a                	jne    c0015eda <sendKeyboardToken(KeyboardToken)+0x186>
c0015ed0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ed6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edd:	66 3d 14 03          	cmp    ax,0x314
c0015ee1:	75 0a                	jne    c0015eed <sendKeyboardToken(KeyboardToken)+0x199>
c0015ee3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015ee9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef0:	66 3d 15 03          	cmp    ax,0x315
c0015ef4:	75 0a                	jne    c0015f00 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ef6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015efc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f03:	66 3d 16 03          	cmp    ax,0x316
c0015f07:	75 0a                	jne    c0015f13 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015f09:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015f0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f16:	66 3d 17 03          	cmp    ax,0x317
c0015f1a:	75 0a                	jne    c0015f26 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015f1c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015f22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f29:	66 3d 18 03          	cmp    ax,0x318
c0015f2d:	75 0a                	jne    c0015f39 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015f2f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015f35:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3c:	66 3d 19 03          	cmp    ax,0x319
c0015f40:	75 0a                	jne    c0015f4c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f42:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015f48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4f:	66 3d 00 02          	cmp    ax,0x200
c0015f53:	75 2c                	jne    c0015f81 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f55:	a0 20 ea 02 c0       	mov    al,ds:0xc002ea20
c0015f5a:	83 f0 01             	xor    eax,0x1
c0015f5d:	84 c0                	test   al,al
c0015f5f:	74 20                	je     c0015f81 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f61:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0015f66:	6a 01                	push   0x1
c0015f68:	6a 00                	push   0x0
c0015f6a:	68 30 5c 01 c0       	push   0xc0015c30
c0015f6f:	50                   	push   eax
c0015f70:	e8 79 7e 00 00       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c0015f75:	83 c4 10             	add    esp,0x10
c0015f78:	c6 05 20 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea20,0x1
c0015f7f:	eb 33                	jmp    c0015fb4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f84:	66 3d 01 02          	cmp    ax,0x201
c0015f88:	75 2a                	jne    c0015fb4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f8a:	a0 20 ea 02 c0       	mov    al,ds:0xc002ea20
c0015f8f:	83 f0 01             	xor    eax,0x1
c0015f92:	84 c0                	test   al,al
c0015f94:	74 1e                	je     c0015fb4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f96:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0015f9b:	6a 01                	push   0x1
c0015f9d:	6a 00                	push   0x0
c0015f9f:	68 8c 5c 01 c0       	push   0xc0015c8c
c0015fa4:	50                   	push   eax
c0015fa5:	e8 44 7e 00 00       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c0015faa:	83 c4 10             	add    esp,0x10
c0015fad:	c6 05 20 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea20,0x1
c0015fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb7:	66 3d 1d 03          	cmp    ax,0x31d
c0015fbb:	75 06                	jne    c0015fc3 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015fbd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc6:	66 3d 1c 03          	cmp    ax,0x31c
c0015fca:	75 06                	jne    c0015fd2 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015fcc:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd5:	66 3d 1b 03          	cmp    ax,0x31b
c0015fd9:	75 06                	jne    c0015fe1 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015fdb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe4:	66 3d 1e 03          	cmp    ax,0x31e
c0015fe8:	75 06                	jne    c0015ff0 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015fea:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff3:	66 3d 1f 03          	cmp    ax,0x31f
c0015ff7:	75 06                	jne    c0015fff <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015ff9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016002:	66 3d 1a 03          	cmp    ax,0x31a
c0016006:	75 06                	jne    c001600e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016008:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001600e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016012:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016015:	83 f0 01             	xor    eax,0x1
c0016018:	84 c0                	test   al,al
c001601a:	74 77                	je     c0016093 <sendKeyboardToken(KeyboardToken)+0x33f>
c001601c:	a0 21 e7 02 c0       	mov    al,ds:0xc002e721
c0016021:	84 c0                	test   al,al
c0016023:	74 41                	je     c0016066 <sendKeyboardToken(KeyboardToken)+0x312>
c0016025:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016029:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001602d:	74 2b                	je     c001605a <sendKeyboardToken(KeyboardToken)+0x306>
c001602f:	8b 15 24 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea24
c0016035:	89 d0                	mov    eax,edx
c0016037:	c1 e0 02             	shl    eax,0x2
c001603a:	01 d0                	add    eax,edx
c001603c:	01 c0                	add    eax,eax
c001603e:	a3 24 ea 02 c0       	mov    ds:0xc002ea24,eax
c0016043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016046:	0f b7 c0             	movzx  eax,ax
c0016049:	8d 50 d0             	lea    edx,[eax-0x30]
c001604c:	a1 24 ea 02 c0       	mov    eax,ds:0xc002ea24
c0016051:	01 d0                	add    eax,edx
c0016053:	a3 24 ea 02 c0       	mov    ds:0xc002ea24,eax
c0016058:	eb 6d                	jmp    c00160c7 <sendKeyboardToken(KeyboardToken)+0x373>
c001605a:	c7 05 24 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea24,0x0
c0016064:	eb 61                	jmp    c00160c7 <sendKeyboardToken(KeyboardToken)+0x373>
c0016066:	a1 24 ea 02 c0       	mov    eax,ds:0xc002ea24
c001606b:	85 c0                	test   eax,eax
c001606d:	74 18                	je     c0016087 <sendKeyboardToken(KeyboardToken)+0x333>
c001606f:	a1 24 ea 02 c0       	mov    eax,ds:0xc002ea24
c0016074:	0f b6 c0             	movzx  eax,al
c0016077:	83 ec 0c             	sub    esp,0xc
c001607a:	50                   	push   eax
c001607b:	e8 68 fc ff ff       	call   c0015ce8 <sendKeyToTerminal(unsigned char)>
c0016080:	83 c4 10             	add    esp,0x10
c0016083:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016087:	c7 05 24 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea24,0x0
c0016091:	eb 34                	jmp    c00160c7 <sendKeyboardToken(KeyboardToken)+0x373>
c0016093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016096:	66 3d 01 01          	cmp    ax,0x101
c001609a:	75 2b                	jne    c00160c7 <sendKeyboardToken(KeyboardToken)+0x373>
c001609c:	a1 24 ea 02 c0       	mov    eax,ds:0xc002ea24
c00160a1:	85 c0                	test   eax,eax
c00160a3:	74 18                	je     c00160bd <sendKeyboardToken(KeyboardToken)+0x369>
c00160a5:	a1 24 ea 02 c0       	mov    eax,ds:0xc002ea24
c00160aa:	0f b6 c0             	movzx  eax,al
c00160ad:	83 ec 0c             	sub    esp,0xc
c00160b0:	50                   	push   eax
c00160b1:	e8 32 fc ff ff       	call   c0015ce8 <sendKeyToTerminal(unsigned char)>
c00160b6:	83 c4 10             	add    esp,0x10
c00160b9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160bd:	c7 05 24 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea24,0x0
c00160c7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160ca:	83 f0 01             	xor    eax,0x1
c00160cd:	84 c0                	test   al,al
c00160cf:	74 4c                	je     c001611d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160d4:	83 f0 01             	xor    eax,0x1
c00160d7:	84 c0                	test   al,al
c00160d9:	74 42                	je     c001611d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160db:	a0 20 e7 02 c0       	mov    al,ds:0xc002e720
c00160e0:	83 f0 01             	xor    eax,0x1
c00160e3:	84 c0                	test   al,al
c00160e5:	74 36                	je     c001611d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ea:	66 83 f8 1f          	cmp    ax,0x1f
c00160ee:	76 09                	jbe    c00160f9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00160f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f3:	66 83 f8 7e          	cmp    ax,0x7e
c00160f7:	76 12                	jbe    c001610b <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fc:	66 83 f8 0a          	cmp    ax,0xa
c0016100:	74 09                	je     c001610b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016105:	66 83 f8 08          	cmp    ax,0x8
c0016109:	75 12                	jne    c001611d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001610b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610e:	0f b6 c0             	movzx  eax,al
c0016111:	83 ec 0c             	sub    esp,0xc
c0016114:	50                   	push   eax
c0016115:	e8 ce fb ff ff       	call   c0015ce8 <sendKeyToTerminal(unsigned char)>
c001611a:	83 c4 10             	add    esp,0x10
c001611d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016120:	83 f0 01             	xor    eax,0x1
c0016123:	84 c0                	test   al,al
c0016125:	74 4f                	je     c0016176 <sendKeyboardToken(KeyboardToken)+0x422>
c0016127:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001612a:	83 f0 01             	xor    eax,0x1
c001612d:	84 c0                	test   al,al
c001612f:	74 45                	je     c0016176 <sendKeyboardToken(KeyboardToken)+0x422>
c0016131:	a0 20 e7 02 c0       	mov    al,ds:0xc002e720
c0016136:	84 c0                	test   al,al
c0016138:	74 3c                	je     c0016176 <sendKeyboardToken(KeyboardToken)+0x422>
c001613a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613d:	66 83 f8 3f          	cmp    ax,0x3f
c0016141:	76 33                	jbe    c0016176 <sendKeyboardToken(KeyboardToken)+0x422>
c0016143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016146:	66 83 f8 7f          	cmp    ax,0x7f
c001614a:	77 2a                	ja     c0016176 <sendKeyboardToken(KeyboardToken)+0x422>
c001614c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614f:	88 c2                	mov    dl,al
c0016151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016154:	66 83 f8 5f          	cmp    ax,0x5f
c0016158:	76 04                	jbe    c001615e <sendKeyboardToken(KeyboardToken)+0x40a>
c001615a:	b0 20                	mov    al,0x20
c001615c:	eb 02                	jmp    c0016160 <sendKeyboardToken(KeyboardToken)+0x40c>
c001615e:	b0 00                	mov    al,0x0
c0016160:	29 c2                	sub    edx,eax
c0016162:	88 d0                	mov    al,dl
c0016164:	83 e8 40             	sub    eax,0x40
c0016167:	0f b6 c0             	movzx  eax,al
c001616a:	83 ec 0c             	sub    esp,0xc
c001616d:	50                   	push   eax
c001616e:	e8 75 fb ff ff       	call   c0015ce8 <sendKeyToTerminal(unsigned char)>
c0016173:	83 c4 10             	add    esp,0x10
c0016176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016179:	66 3d 00 03          	cmp    ax,0x300
c001617d:	75 0f                	jne    c001618e <sendKeyboardToken(KeyboardToken)+0x43a>
c001617f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016182:	83 f0 01             	xor    eax,0x1
c0016185:	84 c0                	test   al,al
c0016187:	74 05                	je     c001618e <sendKeyboardToken(KeyboardToken)+0x43a>
c0016189:	e8 2e ab ff ff       	call   c0010cbc <doTerminalCycle()>
c001618e:	90                   	nop
c001618f:	c9                   	leave  
c0016190:	c3                   	ret    

c0016191 <clearInternalKeybuffer(VgaText*)>:
c0016191:	55                   	push   ebp
c0016192:	89 e5                	mov    ebp,esp
c0016194:	83 ec 08             	sub    esp,0x8
c0016197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619a:	05 98 01 00 00       	add    eax,0x198
c001619f:	83 ec 0c             	sub    esp,0xc
c00161a2:	50                   	push   eax
c00161a3:	e8 f4 a5 fe ff       	call   c000079c <strlen>
c00161a8:	83 c4 10             	add    esp,0x10
c00161ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161ae:	81 c2 98 01 00 00    	add    edx,0x198
c00161b4:	83 ec 04             	sub    esp,0x4
c00161b7:	50                   	push   eax
c00161b8:	6a 00                	push   0x0
c00161ba:	52                   	push   edx
c00161bb:	e8 c0 a5 fe ff       	call   c0000780 <memset>
c00161c0:	83 c4 10             	add    esp,0x10
c00161c3:	90                   	nop
c00161c4:	c9                   	leave  
c00161c5:	c3                   	ret    

c00161c6 <readKeyboard(VgaText*, char*, unsigned long)>:
c00161c6:	55                   	push   ebp
c00161c7:	89 e5                	mov    ebp,esp
c00161c9:	83 ec 18             	sub    esp,0x18
c00161cc:	fb                   	sti    
c00161cd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00161d4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00161d8:	0f 84 8a 00 00 00    	je     c0016268 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00161de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e1:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00161e7:	84 c0                	test   al,al
c00161e9:	75 11                	jne    c00161fc <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00161eb:	e8 cc 7a 00 00       	call   c001dcbc <lockScheduler()>
c00161f0:	e8 3d 7e 00 00       	call   c001e032 <schedule()>
c00161f5:	e8 c4 7a 00 00       	call   c001dcbe <unlockScheduler()>
c00161fa:	eb e2                	jmp    c00161de <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00161fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00161ff:	8d 50 01             	lea    edx,[eax+0x1]
c0016202:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016205:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016208:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c001620e:	88 10                	mov    BYTE PTR [eax],dl
c0016210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016213:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016219:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001621c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621f:	05 98 01 00 00       	add    eax,0x198
c0016224:	83 ec 0c             	sub    esp,0xc
c0016227:	50                   	push   eax
c0016228:	e8 6f a5 fe ff       	call   c000079c <strlen>
c001622d:	83 c4 10             	add    esp,0x10
c0016230:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016233:	81 c2 98 01 00 00    	add    edx,0x198
c0016239:	8d 4a 01             	lea    ecx,[edx+0x1]
c001623c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001623f:	81 c2 98 01 00 00    	add    edx,0x198
c0016245:	83 ec 04             	sub    esp,0x4
c0016248:	50                   	push   eax
c0016249:	51                   	push   ecx
c001624a:	52                   	push   edx
c001624b:	e8 34 a4 fe ff       	call   c0000684 <memmove>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016256:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016259:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001625d:	0f 85 71 ff ff ff    	jne    c00161d4 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016263:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016266:	eb 03                	jmp    c001626b <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016268:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001626b:	c9                   	leave  
c001626c:	c3                   	ret    
c001626d:	90                   	nop

c001626e <Keyboard::Keyboard(char const*)>:
c001626e:	83 ec 0c             	sub    esp,0xc
c0016271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016275:	83 ec 08             	sub    esp,0x8
c0016278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001627c:	50                   	push   eax
c001627d:	e8 3e e1 ff ff       	call   c00143c0 <Device::Device(char const*)>
c0016282:	83 c4 10             	add    esp,0x10
c0016285:	ba 8c b1 02 c0       	mov    edx,0xc002b18c
c001628a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001628e:	89 10                	mov    DWORD PTR [eax],edx
c0016290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016294:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001629e:	c6 05 04 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e604,0x1
c00162a5:	90                   	nop
c00162a6:	83 c4 0c             	add    esp,0xc
c00162a9:	c3                   	ret    

c00162aa <Keyboard::~Keyboard()>:
c00162aa:	83 ec 0c             	sub    esp,0xc
c00162ad:	ba 8c b1 02 c0       	mov    edx,0xc002b18c
c00162b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b6:	89 10                	mov    DWORD PTR [eax],edx
c00162b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162bc:	83 ec 0c             	sub    esp,0xc
c00162bf:	50                   	push   eax
c00162c0:	e8 dd dd ff ff       	call   c00140a2 <Device::~Device()>
c00162c5:	83 c4 10             	add    esp,0x10
c00162c8:	90                   	nop
c00162c9:	83 c4 0c             	add    esp,0xc
c00162cc:	c3                   	ret    
c00162cd:	90                   	nop

c00162ce <Keyboard::~Keyboard()>:
c00162ce:	83 ec 0c             	sub    esp,0xc
c00162d1:	83 ec 0c             	sub    esp,0xc
c00162d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162d8:	e8 cd ff ff ff       	call   c00162aa <Keyboard::~Keyboard()>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	83 ec 08             	sub    esp,0x8
c00162e3:	68 5c 01 00 00       	push   0x15c
c00162e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162ec:	e8 d2 c9 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	83 c4 0c             	add    esp,0xc
c00162f7:	c3                   	ret    

c00162f8 <LogicalDisk::close(int, int, void*)>:
c00162f8:	83 c8 ff             	or     eax,0xffffffff
c00162fb:	c3                   	ret    

c00162fc <LogicalDisk::~LogicalDisk()>:
c00162fc:	83 ec 0c             	sub    esp,0xc
c00162ff:	ba 3c b2 02 c0       	mov    edx,0xc002b23c
c0016304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016308:	89 10                	mov    DWORD PTR [eax],edx
c001630a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001630e:	83 ec 0c             	sub    esp,0xc
c0016311:	50                   	push   eax
c0016312:	e8 8b dd ff ff       	call   c00140a2 <Device::~Device()>
c0016317:	83 c4 10             	add    esp,0x10
c001631a:	90                   	nop
c001631b:	83 c4 0c             	add    esp,0xc
c001631e:	c3                   	ret    
c001631f:	90                   	nop

c0016320 <LogicalDisk::~LogicalDisk()>:
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	83 ec 0c             	sub    esp,0xc
c0016326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001632a:	e8 cd ff ff ff       	call   c00162fc <LogicalDisk::~LogicalDisk()>
c001632f:	83 c4 10             	add    esp,0x10
c0016332:	83 ec 08             	sub    esp,0x8
c0016335:	68 74 01 00 00       	push   0x174
c001633a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001633e:	e8 80 c9 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0016343:	83 c4 10             	add    esp,0x10
c0016346:	83 c4 0c             	add    esp,0xc
c0016349:	c3                   	ret    

c001634a <LogicalDisk::open(int, int, void*)>:
c001634a:	83 ec 18             	sub    esp,0x18
c001634d:	68 b8 b1 02 c0       	push   0xc002b1b8
c0016352:	e8 8a 41 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0016357:	83 c8 ff             	or     eax,0xffffffff
c001635a:	83 c4 1c             	add    esp,0x1c
c001635d:	c3                   	ret    

c001635e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001635e:	53                   	push   ebx
c001635f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016363:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016367:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001636b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016371:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016377:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001637d:	77 10                	ja     c001638f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001637f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016385:	89 d3                	mov    ebx,edx
c0016387:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001638d:	72 05                	jb     c0016394 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001638f:	83 c8 ff             	or     eax,0xffffffff
c0016392:	89 c2                	mov    edx,eax
c0016394:	5b                   	pop    ebx
c0016395:	c3                   	ret    

c0016396 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016396:	56                   	push   esi
c0016397:	83 c8 ff             	or     eax,0xffffffff
c001639a:	53                   	push   ebx
c001639b:	89 c2                	mov    edx,eax
c001639d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00163a1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00163a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00163a9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163af:	77 27                	ja     c00163d8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00163b1:	89 d8                	mov    eax,ebx
c00163b3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00163b9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00163bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163c4:	89 c2                	mov    edx,eax
c00163c6:	73 10                	jae    c00163d8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00163c8:	89 c8                	mov    eax,ecx
c00163ca:	89 da                	mov    edx,ebx
c00163cc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00163d2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00163d8:	5b                   	pop    ebx
c00163d9:	5e                   	pop    esi
c00163da:	c3                   	ret    
c00163db:	90                   	nop

c00163dc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163dc:	83 ec 1c             	sub    esp,0x1c
c00163df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00163f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00163f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00163fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016402:	83 ec 08             	sub    esp,0x8
c0016405:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016409:	50                   	push   eax
c001640a:	e8 b1 df ff ff       	call   c00143c0 <Device::Device(char const*)>
c001640f:	83 c4 10             	add    esp,0x10
c0016412:	ba 3c b2 02 c0       	mov    edx,0xc002b23c
c0016417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001641b:	89 10                	mov    DWORD PTR [eax],edx
c001641d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016421:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001642c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016437:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016441:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016445:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016449:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001644d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016453:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016459:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001645d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016460:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016464:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001646a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016474:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016478:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001647e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016482:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001648c:	90                   	nop
c001648d:	83 c4 1c             	add    esp,0x1c
c0016490:	c3                   	ret    
c0016491:	90                   	nop

c0016492 <LogicalDisk::assignDriveLetter()>:
c0016492:	55                   	push   ebp
c0016493:	57                   	push   edi
c0016494:	56                   	push   esi
c0016495:	53                   	push   ebx
c0016496:	83 ec 14             	sub    esp,0x14
c0016499:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001649d:	8b 3d 40 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea40
c00164a3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00164a9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00164ad:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00164b3:	8b 3d 44 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea44
c00164b9:	3c 01                	cmp    al,0x1
c00164bb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00164bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00164c3:	19 c0                	sbb    eax,eax
c00164c5:	83 e0 02             	and    eax,0x2
c00164c8:	83 c0 41             	add    eax,0x41
c00164cb:	0f be e8             	movsx  ebp,al
c00164ce:	3c 43                	cmp    al,0x43
c00164d0:	75 10                	jne    c00164e2 <LogicalDisk::assignDriveLetter()+0x50>
c00164d2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00164d9:	75 5d                	jne    c0016538 <LogicalDisk::assignDriveLetter()+0xa6>
c00164db:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00164e0:	75 56                	jne    c0016538 <LogicalDisk::assignDriveLetter()+0xa6>
c00164e2:	8d 75 bf             	lea    esi,[ebp-0x41]
c00164e5:	ba 01 00 00 00       	mov    edx,0x1
c00164ea:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00164ee:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00164f2:	d3 e2                	shl    edx,cl
c00164f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164f8:	89 d7                	mov    edi,edx
c00164fa:	89 d6                	mov    esi,edx
c00164fc:	c1 ff 1f             	sar    edi,0x1f
c00164ff:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016503:	21 f9                	and    ecx,edi
c0016505:	09 d1                	or     ecx,edx
c0016507:	75 2f                	jne    c0016538 <LogicalDisk::assignDriveLetter()+0xa6>
c0016509:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001650d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016511:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016517:	09 f2                	or     edx,esi
c0016519:	89 15 40 ea 02 c0    	mov    DWORD PTR ds:0xc002ea40,edx
c001651f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016523:	09 fa                	or     edx,edi
c0016525:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016529:	89 15 44 ea 02 c0    	mov    DWORD PTR ds:0xc002ea44,edx
c001652f:	89 1c bd 60 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd15a0],ebx
c0016536:	eb 08                	jmp    c0016540 <LogicalDisk::assignDriveLetter()+0xae>
c0016538:	45                   	inc    ebp
c0016539:	40                   	inc    eax
c001653a:	3c 5b                	cmp    al,0x5b
c001653c:	75 90                	jne    c00164ce <LogicalDisk::assignDriveLetter()+0x3c>
c001653e:	31 c0                	xor    eax,eax
c0016540:	83 c4 14             	add    esp,0x14
c0016543:	5b                   	pop    ebx
c0016544:	5e                   	pop    esi
c0016545:	5f                   	pop    edi
c0016546:	5d                   	pop    ebp
c0016547:	c3                   	ret    

c0016548 <LogicalDisk::mount()>:
c0016548:	56                   	push   esi
c0016549:	53                   	push   ebx
c001654a:	51                   	push   ecx
c001654b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001654f:	8b 1d d4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5d4
c0016555:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001655f:	85 db                	test   ebx,ebx
c0016561:	74 50                	je     c00165b3 <LogicalDisk::mount()+0x6b>
c0016563:	e8 3f 77 00 00       	call   c001dca7 <getIRQNestingLevel()>
c0016568:	52                   	push   edx
c0016569:	52                   	push   edx
c001656a:	50                   	push   eax
c001656b:	68 dc b1 02 c0       	push   0xc002b1dc
c0016570:	e8 2e c8 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0016575:	83 c4 0c             	add    esp,0xc
c0016578:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001657f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016581:	83 e8 41             	sub    eax,0x41
c0016584:	50                   	push   eax
c0016585:	56                   	push   esi
c0016586:	53                   	push   ebx
c0016587:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001658a:	83 c4 10             	add    esp,0x10
c001658d:	84 c0                	test   al,al
c001658f:	74 08                	je     c0016599 <LogicalDisk::mount()+0x51>
c0016591:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016597:	eb 1c                	jmp    c00165b5 <LogicalDisk::mount()+0x6d>
c0016599:	e8 09 77 00 00       	call   c001dca7 <getIRQNestingLevel()>
c001659e:	51                   	push   ecx
c001659f:	51                   	push   ecx
c00165a0:	50                   	push   eax
c00165a1:	68 f7 b1 02 c0       	push   0xc002b1f7
c00165a6:	e8 f8 c7 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00165ab:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00165ae:	83 c4 10             	add    esp,0x10
c00165b1:	eb ac                	jmp    c001655f <LogicalDisk::mount()+0x17>
c00165b3:	31 c0                	xor    eax,eax
c00165b5:	5a                   	pop    edx
c00165b6:	5b                   	pop    ebx
c00165b7:	5e                   	pop    esi
c00165b8:	c3                   	ret    
c00165b9:	90                   	nop

c00165ba <LogicalDisk::unmount()>:
c00165ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165be:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165c8:	c3                   	ret    
c00165c9:	90                   	nop

c00165ca <LogicalDisk::eject()>:
c00165ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00165d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00165d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165da:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00165dd:	90                   	nop

c00165de <LogicalDisk::unassignDriveLetter()>:
c00165de:	57                   	push   edi
c00165df:	56                   	push   esi
c00165e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165e4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00165eb:	84 c9                	test   cl,cl
c00165ed:	75 0f                	jne    c00165fe <LogicalDisk::unassignDriveLetter()+0x20>
c00165ef:	c7 44 24 0c 12 b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b212
c00165f7:	5e                   	pop    esi
c00165f8:	5f                   	pop    edi
c00165f9:	e9 e3 3e 00 00       	jmp    c001a4e1 <Krnl::panic(char const*)>
c00165fe:	83 e9 41             	sub    ecx,0x41
c0016601:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016608:	b8 01 00 00 00       	mov    eax,0x1
c001660d:	c7 04 8d 60 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd15a0],0x0
c0016618:	d3 e0                	shl    eax,cl
c001661a:	89 c7                	mov    edi,eax
c001661c:	f7 d0                	not    eax
c001661e:	c1 ff 1f             	sar    edi,0x1f
c0016621:	21 05 40 ea 02 c0    	and    DWORD PTR ds:0xc002ea40,eax
c0016627:	89 fe                	mov    esi,edi
c0016629:	f7 d6                	not    esi
c001662b:	21 35 44 ea 02 c0    	and    DWORD PTR ds:0xc002ea44,esi
c0016631:	5e                   	pop    esi
c0016632:	5f                   	pop    edi
c0016633:	c3                   	ret    

c0016634 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016634:	57                   	push   edi
c0016635:	56                   	push   esi
c0016636:	53                   	push   ebx
c0016637:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001663b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001663f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016647:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001664d:	77 41                	ja     c0016690 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001664f:	99                   	cdq    
c0016650:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016656:	01 c8                	add    eax,ecx
c0016658:	11 da                	adc    edx,ebx
c001665a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016660:	19 d7                	sbb    edi,edx
c0016662:	72 33                	jb     c0016697 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016664:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001666a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016670:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016674:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016678:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001667e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016684:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016688:	5b                   	pop    ebx
c0016689:	5e                   	pop    esi
c001668a:	5f                   	pop    edi
c001668b:	e9 b0 0a 00 00       	jmp    c0017140 <VCache::read(unsigned long long, int, void*)>
c0016690:	b8 05 00 00 00       	mov    eax,0x5
c0016695:	eb 05                	jmp    c001669c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016697:	b8 07 00 00 00       	mov    eax,0x7
c001669c:	5b                   	pop    ebx
c001669d:	5e                   	pop    esi
c001669e:	5f                   	pop    edi
c001669f:	c3                   	ret    

c00166a0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00166a0:	57                   	push   edi
c00166a1:	56                   	push   esi
c00166a2:	53                   	push   ebx
c00166a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166ab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166b3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00166b9:	77 41                	ja     c00166fc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00166bb:	99                   	cdq    
c00166bc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00166c2:	01 c8                	add    eax,ecx
c00166c4:	11 da                	adc    edx,ebx
c00166c6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00166cc:	19 d7                	sbb    edi,edx
c00166ce:	72 33                	jb     c0016703 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00166d0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00166d6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00166dc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00166e0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00166e4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00166ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166f4:	5b                   	pop    ebx
c00166f5:	5e                   	pop    esi
c00166f6:	5f                   	pop    edi
c00166f7:	e9 4e 09 00 00       	jmp    c001704a <VCache::write(unsigned long long, int, void*)>
c00166fc:	b8 05 00 00 00       	mov    eax,0x5
c0016701:	eb 05                	jmp    c0016708 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016703:	b8 07 00 00 00       	mov    eax,0x7
c0016708:	5b                   	pop    ebx
c0016709:	5e                   	pop    esi
c001670a:	5f                   	pop    edi
c001670b:	c3                   	ret    

c001670c <Mouse::Mouse(char const*)>:
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016713:	83 ec 08             	sub    esp,0x8
c0016716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001671a:	50                   	push   eax
c001671b:	e8 a0 dc ff ff       	call   c00143c0 <Device::Device(char const*)>
c0016720:	83 c4 10             	add    esp,0x10
c0016723:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0016728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001672c:	89 10                	mov    DWORD PTR [eax],edx
c001672e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016732:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001673c:	90                   	nop
c001673d:	83 c4 0c             	add    esp,0xc
c0016740:	c3                   	ret    
c0016741:	90                   	nop

c0016742 <Mouse::~Mouse()>:
c0016742:	83 ec 0c             	sub    esp,0xc
c0016745:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c001674a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674e:	89 10                	mov    DWORD PTR [eax],edx
c0016750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016754:	83 ec 0c             	sub    esp,0xc
c0016757:	50                   	push   eax
c0016758:	e8 45 d9 ff ff       	call   c00140a2 <Device::~Device()>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	90                   	nop
c0016761:	83 c4 0c             	add    esp,0xc
c0016764:	c3                   	ret    
c0016765:	90                   	nop

c0016766 <Mouse::~Mouse()>:
c0016766:	83 ec 0c             	sub    esp,0xc
c0016769:	83 ec 0c             	sub    esp,0xc
c001676c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016770:	e8 cd ff ff ff       	call   c0016742 <Mouse::~Mouse()>
c0016775:	83 c4 10             	add    esp,0x10
c0016778:	83 ec 08             	sub    esp,0x8
c001677b:	68 58 01 00 00       	push   0x158
c0016780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016784:	e8 3a c5 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0016789:	83 c4 10             	add    esp,0x10
c001678c:	83 c4 0c             	add    esp,0xc
c001678f:	c3                   	ret    

c0016790 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016790:	55                   	push   ebp
c0016791:	57                   	push   edi
c0016792:	56                   	push   esi
c0016793:	53                   	push   ebx
c0016794:	81 ec 28 01 00 00    	sub    esp,0x128
c001679a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00167a1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00167a8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00167af:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00167b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167ba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00167be:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00167c5:	e8 f2 dc ff ff       	call   c00144bc <Device::getName()>
c00167ca:	5a                   	pop    edx
c00167cb:	59                   	pop    ecx
c00167cc:	50                   	push   eax
c00167cd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00167d1:	55                   	push   ebp
c00167d2:	e8 65 a0 fe ff       	call   c000083c <strcpy>
c00167d7:	5b                   	pop    ebx
c00167d8:	58                   	pop    eax
c00167d9:	68 8c b2 02 c0       	push   0xc002b28c
c00167de:	55                   	push   ebp
c00167df:	e8 98 a1 fe ff       	call   c000097c <strcat>
c00167e4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00167eb:	e8 5b 90 ff ff       	call   c000f84b <malloc>
c00167f0:	83 c4 0c             	add    esp,0xc
c00167f3:	89 c3                	mov    ebx,eax
c00167f5:	57                   	push   edi
c00167f6:	56                   	push   esi
c00167f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167ff:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016806:	55                   	push   ebp
c0016807:	50                   	push   eax
c0016808:	e8 cf fb ff ff       	call   c00163dc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001680d:	83 c4 14             	add    esp,0x14
c0016810:	53                   	push   ebx
c0016811:	e8 7c fc ff ff       	call   c0016492 <LogicalDisk::assignDriveLetter()>
c0016816:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016819:	89 c6                	mov    esi,eax
c001681b:	e8 28 fd ff ff       	call   c0016548 <LogicalDisk::mount()>
c0016820:	58                   	pop    eax
c0016821:	5a                   	pop    edx
c0016822:	53                   	push   ebx
c0016823:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001682a:	e8 a1 d9 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c001682f:	59                   	pop    ecx
c0016830:	89 f0                	mov    eax,esi
c0016832:	5b                   	pop    ebx
c0016833:	0f be f0             	movsx  esi,al
c0016836:	56                   	push   esi
c0016837:	68 97 b2 02 c0       	push   0xc002b297
c001683c:	e8 62 c5 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0016841:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016847:	5b                   	pop    ebx
c0016848:	5e                   	pop    esi
c0016849:	5f                   	pop    edi
c001684a:	5d                   	pop    ebp
c001684b:	c3                   	ret    

c001684c <createPartitionsForDisk(PhysicalDisk*)>:
c001684c:	55                   	push   ebp
c001684d:	57                   	push   edi
c001684e:	56                   	push   esi
c001684f:	53                   	push   ebx
c0016850:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016856:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001685d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016863:	3d 00 02 00 00       	cmp    eax,0x200
c0016868:	74 27                	je     c0016891 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001686a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016870:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016876:	83 ec 10             	sub    esp,0x10
c0016879:	0f a4 f7 0a          	shld   edi,esi,0xa
c001687d:	99                   	cdq    
c001687e:	c1 e6 0a             	shl    esi,0xa
c0016881:	52                   	push   edx
c0016882:	89 fd                	mov    ebp,edi
c0016884:	50                   	push   eax
c0016885:	55                   	push   ebp
c0016886:	56                   	push   esi
c0016887:	e8 18 01 01 00       	call   c00269a4 <__udivdi3>
c001688c:	e9 b1 00 00 00       	jmp    c0016942 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016891:	83 ec 0c             	sub    esp,0xc
c0016894:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016896:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001689a:	56                   	push   esi
c001689b:	6a 01                	push   0x1
c001689d:	6a 00                	push   0x0
c001689f:	6a 00                	push   0x0
c00168a1:	53                   	push   ebx
c00168a2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00168a5:	83 c4 20             	add    esp,0x20
c00168a8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00168b0:	75 0a                	jne    c00168bc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00168b2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00168ba:	74 2c                	je     c00168e8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00168bc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168c2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168c8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168ce:	83 ec 10             	sub    esp,0x10
c00168d1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168d5:	89 f7                	mov    edi,esi
c00168d7:	c1 e0 0a             	shl    eax,0xa
c00168da:	c1 ff 1f             	sar    edi,0x1f
c00168dd:	57                   	push   edi
c00168de:	56                   	push   esi
c00168df:	52                   	push   edx
c00168e0:	50                   	push   eax
c00168e1:	e8 be 00 01 00       	call   c00269a4 <__udivdi3>
c00168e6:	eb 5a                	jmp    c0016942 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00168e8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00168ef:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00168f6:	83 e1 7f             	and    ecx,0x7f
c00168f9:	83 e0 7f             	and    eax,0x7f
c00168fc:	01 c1                	add    ecx,eax
c00168fe:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016905:	83 e0 7f             	and    eax,0x7f
c0016908:	01 c1                	add    ecx,eax
c001690a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016911:	83 e0 7f             	and    eax,0x7f
c0016914:	00 c1                	add    cl,al
c0016916:	74 41                	je     c0016959 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016918:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001691e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016924:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001692a:	83 ec 10             	sub    esp,0x10
c001692d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016931:	89 f7                	mov    edi,esi
c0016933:	c1 e0 0a             	shl    eax,0xa
c0016936:	c1 ff 1f             	sar    edi,0x1f
c0016939:	57                   	push   edi
c001693a:	56                   	push   esi
c001693b:	52                   	push   edx
c001693c:	50                   	push   eax
c001693d:	e8 62 00 01 00       	call   c00269a4 <__udivdi3>
c0016942:	83 c4 14             	add    esp,0x14
c0016945:	52                   	push   edx
c0016946:	50                   	push   eax
c0016947:	6a 00                	push   0x0
c0016949:	6a 00                	push   0x0
c001694b:	53                   	push   ebx
c001694c:	e8 3f fe ff ff       	call   c0016790 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016951:	83 c4 20             	add    esp,0x20
c0016954:	e9 79 01 00 00       	jmp    c0016ad2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016959:	89 f0                	mov    eax,esi
c001695b:	31 f6                	xor    esi,esi
c001695d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016964:	75 02                	jne    c0016968 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016966:	89 f1                	mov    ecx,esi
c0016968:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001696f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016976:	c1 e2 08             	shl    edx,0x8
c0016979:	c1 e7 10             	shl    edi,0x10
c001697c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016984:	09 fa                	or     edx,edi
c0016986:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001698e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016995:	83 c0 10             	add    eax,0x10
c0016998:	09 fa                	or     edx,edi
c001699a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00169a1:	c1 e7 18             	shl    edi,0x18
c00169a4:	09 fa                	or     edx,edi
c00169a6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00169ad:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00169b1:	c1 e7 10             	shl    edi,0x10
c00169b4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00169bb:	c1 e2 08             	shl    edx,0x8
c00169be:	09 fa                	or     edx,edi
c00169c0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00169c7:	09 fa                	or     edx,edi
c00169c9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00169d0:	c1 e7 18             	shl    edi,0x18
c00169d3:	09 fa                	or     edx,edi
c00169d5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00169d9:	46                   	inc    esi
c00169da:	83 fe 04             	cmp    esi,0x4
c00169dd:	0f 85 7a ff ff ff    	jne    c001695d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00169e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169e7:	83 f0 01             	xor    eax,0x1
c00169ea:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00169ee:	75 57                	jne    c0016a47 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169f4:	83 f0 01             	xor    eax,0x1
c00169f7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00169fb:	75 4a                	jne    c0016a47 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169fd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016a01:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016a09:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016a11:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a17:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a1d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a23:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a27:	89 f7                	mov    edi,esi
c0016a29:	c1 e0 0a             	shl    eax,0xa
c0016a2c:	c1 ff 1f             	sar    edi,0x1f
c0016a2f:	57                   	push   edi
c0016a30:	56                   	push   esi
c0016a31:	52                   	push   edx
c0016a32:	50                   	push   eax
c0016a33:	e8 6c ff 00 00       	call   c00269a4 <__udivdi3>
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a43:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016a47:	84 c9                	test   cl,cl
c0016a49:	74 53                	je     c0016a9e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016a4b:	0f b6 c9             	movzx  ecx,cl
c0016a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a56:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a5a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a66:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016a6a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016a6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016a76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a7e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016a82:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016a86:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016a8a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016a8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a96:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016a9a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016a9e:	31 ed                	xor    ebp,ebp
c0016aa0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016aa4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016aa8:	89 f8                	mov    eax,edi
c0016aaa:	09 f0                	or     eax,esi
c0016aac:	74 1e                	je     c0016acc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016aae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016ab2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016ab6:	89 d1                	mov    ecx,edx
c0016ab8:	09 c1                	or     ecx,eax
c0016aba:	74 10                	je     c0016acc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016abc:	83 ec 0c             	sub    esp,0xc
c0016abf:	57                   	push   edi
c0016ac0:	56                   	push   esi
c0016ac1:	52                   	push   edx
c0016ac2:	50                   	push   eax
c0016ac3:	53                   	push   ebx
c0016ac4:	e8 c7 fc ff ff       	call   c0016790 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ac9:	83 c4 20             	add    esp,0x20
c0016acc:	45                   	inc    ebp
c0016acd:	83 fd 04             	cmp    ebp,0x4
c0016ad0:	75 ce                	jne    c0016aa0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016ad2:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016ad8:	5b                   	pop    ebx
c0016ad9:	5e                   	pop    esi
c0016ada:	5f                   	pop    edi
c0016adb:	5d                   	pop    ebp
c0016adc:	c3                   	ret    
c0016add:	90                   	nop

c0016ade <Serial::Serial(char const*)>:
c0016ade:	83 ec 0c             	sub    esp,0xc
c0016ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ae5:	83 ec 08             	sub    esp,0x8
c0016ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aec:	50                   	push   eax
c0016aed:	e8 ce d8 ff ff       	call   c00143c0 <Device::Device(char const*)>
c0016af2:	83 c4 10             	add    esp,0x10
c0016af5:	ba c4 b2 02 c0       	mov    edx,0xc002b2c4
c0016afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016afe:	89 10                	mov    DWORD PTR [eax],edx
c0016b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b04:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016b0e:	90                   	nop
c0016b0f:	83 c4 0c             	add    esp,0xc
c0016b12:	c3                   	ret    
c0016b13:	90                   	nop

c0016b14 <Serial::~Serial()>:
c0016b14:	83 ec 0c             	sub    esp,0xc
c0016b17:	ba c4 b2 02 c0       	mov    edx,0xc002b2c4
c0016b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b20:	89 10                	mov    DWORD PTR [eax],edx
c0016b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b26:	83 ec 0c             	sub    esp,0xc
c0016b29:	50                   	push   eax
c0016b2a:	e8 73 d5 ff ff       	call   c00140a2 <Device::~Device()>
c0016b2f:	83 c4 10             	add    esp,0x10
c0016b32:	90                   	nop
c0016b33:	83 c4 0c             	add    esp,0xc
c0016b36:	c3                   	ret    
c0016b37:	90                   	nop

c0016b38 <Serial::~Serial()>:
c0016b38:	83 ec 0c             	sub    esp,0xc
c0016b3b:	83 ec 0c             	sub    esp,0xc
c0016b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b42:	e8 cd ff ff ff       	call   c0016b14 <Serial::~Serial()>
c0016b47:	83 c4 10             	add    esp,0x10
c0016b4a:	83 ec 08             	sub    esp,0x8
c0016b4d:	68 58 01 00 00       	push   0x158
c0016b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b56:	e8 68 c1 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	83 c4 0c             	add    esp,0xc
c0016b61:	c3                   	ret    

c0016b62 <Timer::Timer(char const*)>:
c0016b62:	83 ec 0c             	sub    esp,0xc
c0016b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b69:	83 ec 08             	sub    esp,0x8
c0016b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b70:	50                   	push   eax
c0016b71:	e8 4a d8 ff ff       	call   c00143c0 <Device::Device(char const*)>
c0016b76:	83 c4 10             	add    esp,0x10
c0016b79:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0016b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b82:	89 10                	mov    DWORD PTR [eax],edx
c0016b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b88:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016b92:	90                   	nop
c0016b93:	83 c4 0c             	add    esp,0xc
c0016b96:	c3                   	ret    
c0016b97:	90                   	nop

c0016b98 <Timer::~Timer()>:
c0016b98:	83 ec 0c             	sub    esp,0xc
c0016b9b:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0016ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba4:	89 10                	mov    DWORD PTR [eax],edx
c0016ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016baa:	83 ec 0c             	sub    esp,0xc
c0016bad:	50                   	push   eax
c0016bae:	e8 ef d4 ff ff       	call   c00140a2 <Device::~Device()>
c0016bb3:	83 c4 10             	add    esp,0x10
c0016bb6:	90                   	nop
c0016bb7:	83 c4 0c             	add    esp,0xc
c0016bba:	c3                   	ret    
c0016bbb:	90                   	nop

c0016bbc <Timer::~Timer()>:
c0016bbc:	83 ec 0c             	sub    esp,0xc
c0016bbf:	83 ec 0c             	sub    esp,0xc
c0016bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bc6:	e8 cd ff ff ff       	call   c0016b98 <Timer::~Timer()>
c0016bcb:	83 c4 10             	add    esp,0x10
c0016bce:	83 ec 08             	sub    esp,0x8
c0016bd1:	68 5c 01 00 00       	push   0x15c
c0016bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bda:	e8 e4 c0 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0016bdf:	83 c4 10             	add    esp,0x10
c0016be2:	83 c4 0c             	add    esp,0xc
c0016be5:	c3                   	ret    

c0016be6 <Timer::read()>:
c0016be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016bf0:	c3                   	ret    

c0016bf1 <timerHandler(unsigned long long)>:
c0016bf1:	55                   	push   ebp
c0016bf2:	57                   	push   edi
c0016bf3:	56                   	push   esi
c0016bf4:	53                   	push   ebx
c0016bf5:	83 ec 0c             	sub    esp,0xc
c0016bf8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016bfc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016c00:	01 35 d0 ea 02 c0    	add    DWORD PTR ds:0xc002ead0,esi
c0016c06:	11 3d d4 ea 02 c0    	adc    DWORD PTR ds:0xc002ead4,edi
c0016c0c:	80 3d 4d e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e44d,0x0
c0016c13:	0f 84 07 01 00 00    	je     c0016d20 <timerHandler(unsigned long long)+0x12f>
c0016c19:	e8 c5 70 00 00       	call   c001dce3 <lockStuff()>
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	68 9c 19 03 c0       	push   0xc003199c
c0016c26:	e8 f3 1d 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c2b:	c7 04 24 9c 19 03 c0 	mov    DWORD PTR [esp],0xc003199c
c0016c32:	89 c3                	mov    ebx,eax
c0016c34:	e8 ed 1d 01 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c39:	83 c4 10             	add    esp,0x10
c0016c3c:	84 c0                	test   al,al
c0016c3e:	74 60                	je     c0016ca0 <timerHandler(unsigned long long)+0xaf>
c0016c40:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c46:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016c49:	85 c0                	test   eax,eax
c0016c4b:	0f 85 91 00 00 00    	jne    c0016ce2 <timerHandler(unsigned long long)+0xf1>
c0016c51:	e9 be 00 00 00       	jmp    c0016d14 <timerHandler(unsigned long long)+0x123>
c0016c56:	83 ec 0c             	sub    esp,0xc
c0016c59:	55                   	push   ebp
c0016c5a:	e8 af 76 00 00       	call   c001e30e <unblockTask(ThreadControlBlock*)>
c0016c5f:	83 c4 10             	add    esp,0x10
c0016c62:	39 eb                	cmp    ebx,ebp
c0016c64:	75 12                	jne    c0016c78 <timerHandler(unsigned long long)+0x87>
c0016c66:	83 ec 0c             	sub    esp,0xc
c0016c69:	68 9c 19 03 c0       	push   0xc003199c
c0016c6e:	e8 ab 1d 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c73:	89 c3                	mov    ebx,eax
c0016c75:	83 c4 10             	add    esp,0x10
c0016c78:	83 ec 0c             	sub    esp,0xc
c0016c7b:	68 9c 19 03 c0       	push   0xc003199c
c0016c80:	e8 a1 1d 01 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c85:	83 c4 10             	add    esp,0x10
c0016c88:	84 c0                	test   al,al
c0016c8a:	75 b4                	jne    c0016c40 <timerHandler(unsigned long long)+0x4f>
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	68 9c 19 03 c0       	push   0xc003199c
c0016c94:	e8 85 1d 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	39 d8                	cmp    eax,ebx
c0016c9e:	74 a0                	je     c0016c40 <timerHandler(unsigned long long)+0x4f>
c0016ca0:	83 ec 0c             	sub    esp,0xc
c0016ca3:	68 9c 19 03 c0       	push   0xc003199c
c0016ca8:	e8 71 1d 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cad:	c7 04 24 9c 19 03 c0 	mov    DWORD PTR [esp],0xc003199c
c0016cb4:	89 c5                	mov    ebp,eax
c0016cb6:	e8 87 1d 01 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016cbb:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016cbe:	83 c4 10             	add    esp,0x10
c0016cc1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016cc4:	39 15 d0 ea 02 c0    	cmp    DWORD PTR ds:0xc002ead0,edx
c0016cca:	a1 d4 ea 02 c0       	mov    eax,ds:0xc002ead4
c0016ccf:	19 c8                	sbb    eax,ecx
c0016cd1:	73 83                	jae    c0016c56 <timerHandler(unsigned long long)+0x65>
c0016cd3:	50                   	push   eax
c0016cd4:	50                   	push   eax
c0016cd5:	55                   	push   ebp
c0016cd6:	68 9c 19 03 c0       	push   0xc003199c
c0016cdb:	e8 10 1e 01 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ce0:	eb 93                	jmp    c0016c75 <timerHandler(unsigned long long)+0x84>
c0016ce2:	80 3d 4c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e44c,0x0
c0016ce9:	74 29                	je     c0016d14 <timerHandler(unsigned long long)+0x123>
c0016ceb:	39 c6                	cmp    esi,eax
c0016ced:	bb 00 00 00 00       	mov    ebx,0x0
c0016cf2:	19 df                	sbb    edi,ebx
c0016cf4:	72 19                	jb     c0016d0f <timerHandler(unsigned long long)+0x11e>
c0016cf6:	e8 c1 6f 00 00       	call   c001dcbc <lockScheduler()>
c0016cfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d00:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016d03:	e8 2a 73 00 00       	call   c001e032 <schedule()>
c0016d08:	e8 b1 6f 00 00       	call   c001dcbe <unlockScheduler()>
c0016d0d:	eb 05                	jmp    c0016d14 <timerHandler(unsigned long long)+0x123>
c0016d0f:	29 f0                	sub    eax,esi
c0016d11:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016d14:	83 c4 0c             	add    esp,0xc
c0016d17:	5b                   	pop    ebx
c0016d18:	5e                   	pop    esi
c0016d19:	5f                   	pop    edi
c0016d1a:	5d                   	pop    ebp
c0016d1b:	e9 97 73 00 00       	jmp    c001e0b7 <unlockStuff()>
c0016d20:	83 c4 0c             	add    esp,0xc
c0016d23:	5b                   	pop    ebx
c0016d24:	5e                   	pop    esi
c0016d25:	5f                   	pop    edi
c0016d26:	5d                   	pop    ebp
c0016d27:	c3                   	ret    

c0016d28 <setupTimer(int)>:
c0016d28:	57                   	push   edi
c0016d29:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0016d2e:	56                   	push   esi
c0016d2f:	53                   	push   ebx
c0016d30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d43:	e8 74 d7 ff ff       	call   c00144bc <Device::getName()>
c0016d48:	83 c4 10             	add    esp,0x10
c0016d4b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016d4e:	0f 85 8d 00 00 00    	jne    c0016de1 <setupTimer(int)+0xb9>
c0016d54:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0016d59:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016d60:	74 7f                	je     c0016de1 <setupTimer(int)+0xb9>
c0016d62:	83 ec 0c             	sub    esp,0xc
c0016d65:	68 5c 01 00 00       	push   0x15c
c0016d6a:	e8 dc 8a ff ff       	call   c000f84b <malloc>
c0016d6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d72:	89 c3                	mov    ebx,eax
c0016d74:	e8 f9 f7 00 00       	call   c0026572 <PIT::PIT()>
c0016d79:	59                   	pop    ecx
c0016d7a:	5f                   	pop    edi
c0016d7b:	53                   	push   ebx
c0016d7c:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c0016d82:	e8 49 d4 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0016d87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d89:	6a 00                	push   0x0
c0016d8b:	6a 00                	push   0x0
c0016d8d:	56                   	push   esi
c0016d8e:	53                   	push   ebx
c0016d8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d92:	83 c4 14             	add    esp,0x14
c0016d95:	68 60 01 00 00       	push   0x160
c0016d9a:	e8 ac 8a ff ff       	call   c000f84b <malloc>
c0016d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016da2:	89 c7                	mov    edi,eax
c0016da4:	e8 79 f6 00 00       	call   c0026422 <APICTimer::APICTimer()>
c0016da9:	6a 00                	push   0x0
c0016dab:	6a 00                	push   0x0
c0016dad:	56                   	push   esi
c0016dae:	57                   	push   edi
c0016daf:	e8 70 f5 00 00       	call   c0026324 <APICTimer::open(int, int, void*)>
c0016db4:	83 c4 20             	add    esp,0x20
c0016db7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016db9:	6a 00                	push   0x0
c0016dbb:	6a 00                	push   0x0
c0016dbd:	6a 00                	push   0x0
c0016dbf:	53                   	push   ebx
c0016dc0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dc3:	58                   	pop    eax
c0016dc4:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0016dc9:	5a                   	pop    edx
c0016dca:	57                   	push   edi
c0016dcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016dd1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016dd7:	e8 f4 d3 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0016ddc:	83 c4 10             	add    esp,0x10
c0016ddf:	eb 33                	jmp    c0016e14 <setupTimer(int)+0xec>
c0016de1:	83 ec 0c             	sub    esp,0xc
c0016de4:	68 5c 01 00 00       	push   0x15c
c0016de9:	e8 5d 8a ff ff       	call   c000f84b <malloc>
c0016dee:	89 04 24             	mov    DWORD PTR [esp],eax
c0016df1:	89 c3                	mov    ebx,eax
c0016df3:	e8 7a f7 00 00       	call   c0026572 <PIT::PIT()>
c0016df8:	58                   	pop    eax
c0016df9:	5a                   	pop    edx
c0016dfa:	53                   	push   ebx
c0016dfb:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c0016e01:	e8 ca d3 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0016e06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e08:	6a 00                	push   0x0
c0016e0a:	6a 00                	push   0x0
c0016e0c:	56                   	push   esi
c0016e0d:	53                   	push   ebx
c0016e0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e11:	83 c4 20             	add    esp,0x20
c0016e14:	89 d8                	mov    eax,ebx
c0016e16:	5b                   	pop    ebx
c0016e17:	5e                   	pop    esi
c0016e18:	5f                   	pop    edi
c0016e19:	c3                   	ret    

c0016e1a <VCache::VCache(PhysicalDisk*)>:
c0016e1a:	53                   	push   ebx
c0016e1b:	83 ec 18             	sub    esp,0x18
c0016e1e:	ba 38 b3 02 c0       	mov    edx,0xc002b338
c0016e23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e27:	89 10                	mov    DWORD PTR [eax],edx
c0016e29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e2d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e38:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e43:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016e4a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e55:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016e5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016e63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e72:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e7a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016e81:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e8c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e94:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e9c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016eab:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016eb3:	83 ec 0c             	sub    esp,0xc
c0016eb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eba:	e8 8c 89 ff ff       	call   c000f84b <malloc>
c0016ebf:	83 c4 10             	add    esp,0x10
c0016ec2:	89 c3                	mov    ebx,eax
c0016ec4:	83 ec 0c             	sub    esp,0xc
c0016ec7:	53                   	push   ebx
c0016ec8:	e8 0f 6f 00 00       	call   c001dddc <Mutex::Mutex()>
c0016ecd:	83 c4 10             	add    esp,0x10
c0016ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016edb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016edf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016eed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ef1:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016efb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016efe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f02:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016f08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f0e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016f12:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016f15:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f2a:	05 00 01 00 00       	add    eax,0x100
c0016f2f:	c1 e0 04             	shl    eax,0x4
c0016f32:	83 ec 0c             	sub    esp,0xc
c0016f35:	50                   	push   eax
c0016f36:	e8 10 89 ff ff       	call   c000f84b <malloc>
c0016f3b:	83 c4 10             	add    esp,0x10
c0016f3e:	89 c2                	mov    edx,eax
c0016f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f44:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f56:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f5e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f64:	c1 e0 07             	shl    eax,0x7
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	50                   	push   eax
c0016f6b:	e8 db 88 ff ff       	call   c000f84b <malloc>
c0016f70:	83 c4 10             	add    esp,0x10
c0016f73:	89 c2                	mov    edx,eax
c0016f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f79:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f7c:	90                   	nop
c0016f7d:	83 c4 18             	add    esp,0x18
c0016f80:	5b                   	pop    ebx
c0016f81:	c3                   	ret    

c0016f82 <VCache::invalidateReadBuffer()>:
c0016f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f86:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016f8c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f90:	c3                   	ret    
c0016f91:	90                   	nop

c0016f92 <VCache::writeWriteBuffer()>:
c0016f92:	53                   	push   ebx
c0016f93:	83 ec 14             	sub    esp,0x14
c0016f96:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f9a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f9d:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f9f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016fa2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fa5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016fa8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016fab:	50                   	push   eax
c0016fac:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016faf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016fb6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016fbd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016fc1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016fc8:	83 c4 28             	add    esp,0x28
c0016fcb:	5b                   	pop    ebx
c0016fcc:	c3                   	ret    
c0016fcd:	90                   	nop

c0016fce <VCache::~VCache()>:
c0016fce:	83 ec 0c             	sub    esp,0xc
c0016fd1:	ba 38 b3 02 c0       	mov    edx,0xc002b338
c0016fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fda:	89 10                	mov    DWORD PTR [eax],edx
c0016fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016fe3:	84 c0                	test   al,al
c0016fe5:	74 0f                	je     c0016ff6 <VCache::~VCache()+0x28>
c0016fe7:	83 ec 0c             	sub    esp,0xc
c0016fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fee:	e8 9f ff ff ff       	call   c0016f92 <VCache::writeWriteBuffer()>
c0016ff3:	83 c4 10             	add    esp,0x10
c0016ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ffa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016ffd:	83 ec 0c             	sub    esp,0xc
c0017000:	50                   	push   eax
c0017001:	e8 55 88 ff ff       	call   c000f85b <free>
c0017006:	83 c4 10             	add    esp,0x10
c0017009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017010:	83 ec 0c             	sub    esp,0xc
c0017013:	50                   	push   eax
c0017014:	e8 42 88 ff ff       	call   c000f85b <free>
c0017019:	83 c4 10             	add    esp,0x10
c001701c:	90                   	nop
c001701d:	83 c4 0c             	add    esp,0xc
c0017020:	c3                   	ret    
c0017021:	90                   	nop

c0017022 <VCache::~VCache()>:
c0017022:	83 ec 0c             	sub    esp,0xc
c0017025:	83 ec 0c             	sub    esp,0xc
c0017028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001702c:	e8 9d ff ff ff       	call   c0016fce <VCache::~VCache()>
c0017031:	83 c4 10             	add    esp,0x10
c0017034:	83 ec 08             	sub    esp,0x8
c0017037:	6a 44                	push   0x44
c0017039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001703d:	e8 81 bc ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0017042:	83 c4 10             	add    esp,0x10
c0017045:	83 c4 0c             	add    esp,0xc
c0017048:	c3                   	ret    
c0017049:	90                   	nop

c001704a <VCache::write(unsigned long long, int, void*)>:
c001704a:	55                   	push   ebp
c001704b:	57                   	push   edi
c001704c:	56                   	push   esi
c001704d:	53                   	push   ebx
c001704e:	83 ec 28             	sub    esp,0x28
c0017051:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017055:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017059:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001705d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017061:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017064:	e8 0f 72 00 00       	call   c001e278 <Semaphore::acquire()>
c0017069:	83 c4 10             	add    esp,0x10
c001706c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017070:	74 0c                	je     c001707e <VCache::write(unsigned long long, int, void*)+0x34>
c0017072:	83 ec 0c             	sub    esp,0xc
c0017075:	53                   	push   ebx
c0017076:	e8 07 ff ff ff       	call   c0016f82 <VCache::invalidateReadBuffer()>
c001707b:	83 c4 10             	add    esp,0x10
c001707e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017082:	74 66                	je     c00170ea <VCache::write(unsigned long long, int, void*)+0xa0>
c0017084:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017087:	99                   	cdq    
c0017088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001708c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001708f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017092:	89 c1                	mov    ecx,eax
c0017094:	89 d0                	mov    eax,edx
c0017096:	31 f1                	xor    ecx,esi
c0017098:	31 f8                	xor    eax,edi
c001709a:	89 ca                	mov    edx,ecx
c001709c:	09 c2                	or     edx,eax
c001709e:	75 3e                	jne    c00170de <VCache::write(unsigned long long, int, void*)+0x94>
c00170a0:	83 fd 01             	cmp    ebp,0x1
c00170a3:	75 39                	jne    c00170de <VCache::write(unsigned long long, int, void*)+0x94>
c00170a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ae:	51                   	push   ecx
c00170af:	50                   	push   eax
c00170b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00170b8:	0f af c8             	imul   ecx,eax
c00170bb:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00170be:	51                   	push   ecx
c00170bf:	e8 88 96 fe ff       	call   c000074c <memcpy>
c00170c4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170c7:	83 c4 10             	add    esp,0x10
c00170ca:	40                   	inc    eax
c00170cb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00170ce:	83 c0 80             	add    eax,0xffffff80
c00170d1:	75 57                	jne    c001712a <VCache::write(unsigned long long, int, void*)+0xe0>
c00170d3:	83 ec 0c             	sub    esp,0xc
c00170d6:	53                   	push   ebx
c00170d7:	e8 b6 fe ff ff       	call   c0016f92 <VCache::writeWriteBuffer()>
c00170dc:	eb 34                	jmp    c0017112 <VCache::write(unsigned long long, int, void*)+0xc8>
c00170de:	83 ec 0c             	sub    esp,0xc
c00170e1:	53                   	push   ebx
c00170e2:	e8 ab fe ff ff       	call   c0016f92 <VCache::writeWriteBuffer()>
c00170e7:	83 c4 10             	add    esp,0x10
c00170ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170ed:	83 fd 7f             	cmp    ebp,0x7f
c00170f0:	7f 25                	jg     c0017117 <VCache::write(unsigned long long, int, void*)+0xcd>
c00170f2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00170f5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00170f8:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00170fb:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00170ff:	52                   	push   edx
c0017100:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017106:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001710a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001710d:	e8 3a 96 fe ff       	call   c000074c <memcpy>
c0017112:	83 c4 10             	add    esp,0x10
c0017115:	eb 13                	jmp    c001712a <VCache::write(unsigned long long, int, void*)+0xe0>
c0017117:	83 ec 0c             	sub    esp,0xc
c001711a:	8b 10                	mov    edx,DWORD PTR [eax]
c001711c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017120:	55                   	push   ebp
c0017121:	57                   	push   edi
c0017122:	56                   	push   esi
c0017123:	50                   	push   eax
c0017124:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017127:	83 c4 20             	add    esp,0x20
c001712a:	83 ec 0c             	sub    esp,0xc
c001712d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017130:	e8 f1 76 00 00       	call   c001e826 <Semaphore::release()>
c0017135:	83 c4 2c             	add    esp,0x2c
c0017138:	31 c0                	xor    eax,eax
c001713a:	5b                   	pop    ebx
c001713b:	5e                   	pop    esi
c001713c:	5f                   	pop    edi
c001713d:	5d                   	pop    ebp
c001713e:	c3                   	ret    
c001713f:	90                   	nop

c0017140 <VCache::read(unsigned long long, int, void*)>:
c0017140:	55                   	push   ebp
c0017141:	57                   	push   edi
c0017142:	56                   	push   esi
c0017143:	53                   	push   ebx
c0017144:	83 ec 28             	sub    esp,0x28
c0017147:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001714b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001714f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017153:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017157:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001715b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001715f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017163:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017166:	e8 0d 71 00 00       	call   c001e278 <Semaphore::acquire()>
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017172:	74 0c                	je     c0017180 <VCache::read(unsigned long long, int, void*)+0x40>
c0017174:	83 ec 0c             	sub    esp,0xc
c0017177:	53                   	push   ebx
c0017178:	e8 15 fe ff ff       	call   c0016f92 <VCache::writeWriteBuffer()>
c001717d:	83 c4 10             	add    esp,0x10
c0017180:	83 fe 01             	cmp    esi,0x1
c0017183:	0f 85 80 00 00 00    	jne    c0017209 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017189:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001718c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017193:	75 74                	jne    c0017209 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017195:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017198:	89 d1                	mov    ecx,edx
c001719a:	f7 d9                	neg    ecx
c001719c:	89 cf                	mov    edi,ecx
c001719e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171a2:	c1 ff 1f             	sar    edi,0x1f
c00171a5:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00171a8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00171ac:	89 ce                	mov    esi,ecx
c00171ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171b2:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00171b6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171ba:	89 cf                	mov    edi,ecx
c00171bc:	74 0a                	je     c00171c8 <VCache::read(unsigned long long, int, void*)+0x88>
c00171be:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00171c1:	75 05                	jne    c00171c8 <VCache::read(unsigned long long, int, void*)+0x88>
c00171c3:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00171c6:	74 1c                	je     c00171e4 <VCache::read(unsigned long long, int, void*)+0xa4>
c00171c8:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00171cc:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00171cf:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00171d2:	83 ec 0c             	sub    esp,0xc
c00171d5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00171d7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00171da:	52                   	push   edx
c00171db:	57                   	push   edi
c00171dc:	56                   	push   esi
c00171dd:	50                   	push   eax
c00171de:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00171e1:	83 c4 20             	add    esp,0x20
c00171e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171e7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00171ed:	50                   	push   eax
c00171ee:	52                   	push   edx
c00171ef:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171f2:	48                   	dec    eax
c00171f3:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00171f7:	0f af c2             	imul   eax,edx
c00171fa:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00171fd:	50                   	push   eax
c00171fe:	55                   	push   ebp
c00171ff:	e8 48 95 fe ff       	call   c000074c <memcpy>
c0017204:	83 c4 10             	add    esp,0x10
c0017207:	eb 21                	jmp    c001722a <VCache::read(unsigned long long, int, void*)+0xea>
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	53                   	push   ebx
c001720d:	e8 70 fd ff ff       	call   c0016f82 <VCache::invalidateReadBuffer()>
c0017212:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017215:	8b 10                	mov    edx,DWORD PTR [eax]
c0017217:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001721a:	56                   	push   esi
c001721b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001721f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017223:	50                   	push   eax
c0017224:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017227:	83 c4 20             	add    esp,0x20
c001722a:	83 ec 0c             	sub    esp,0xc
c001722d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017230:	e8 f1 75 00 00       	call   c001e826 <Semaphore::release()>
c0017235:	83 c4 2c             	add    esp,0x2c
c0017238:	31 c0                	xor    eax,eax
c001723a:	5b                   	pop    ebx
c001723b:	5e                   	pop    esi
c001723c:	5f                   	pop    edi
c001723d:	5d                   	pop    ebp
c001723e:	c3                   	ret    
c001723f:	90                   	nop

c0017240 <Video::putrect(int, int, int, int, unsigned int)>:
c0017240:	55                   	push   ebp
c0017241:	57                   	push   edi
c0017242:	56                   	push   esi
c0017243:	53                   	push   ebx
c0017244:	83 ec 1c             	sub    esp,0x1c
c0017247:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001724b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001724f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017253:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017257:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001725b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001725f:	01 df                	add    edi,ebx
c0017261:	39 fb                	cmp    ebx,edi
c0017263:	7d 1f                	jge    c0017284 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017265:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017269:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001726d:	7d 12                	jge    c0017281 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001726f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017271:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017275:	53                   	push   ebx
c0017276:	55                   	push   ebp
c0017277:	45                   	inc    ebp
c0017278:	56                   	push   esi
c0017279:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001727c:	83 c4 10             	add    esp,0x10
c001727f:	eb e8                	jmp    c0017269 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017281:	43                   	inc    ebx
c0017282:	eb dd                	jmp    c0017261 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017284:	83 c4 1c             	add    esp,0x1c
c0017287:	5b                   	pop    ebx
c0017288:	5e                   	pop    esi
c0017289:	5f                   	pop    edi
c001728a:	5d                   	pop    ebp
c001728b:	c3                   	ret    

c001728c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001728c:	55                   	push   ebp
c001728d:	57                   	push   edi
c001728e:	31 ff                	xor    edi,edi
c0017290:	56                   	push   esi
c0017291:	53                   	push   ebx
c0017292:	83 ec 1c             	sub    esp,0x1c
c0017295:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017299:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001729d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00172a4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00172a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172ad:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00172b1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00172b5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00172b8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172bc:	01 f9                	add    ecx,edi
c00172be:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00172c2:	7d 2f                	jge    c00172f3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00172c4:	31 f6                	xor    esi,esi
c00172c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172ca:	01 f2                	add    edx,esi
c00172cc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00172d0:	7d 1a                	jge    c00172ec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00172d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172d5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00172d8:	46                   	inc    esi
c00172d9:	51                   	push   ecx
c00172da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00172de:	52                   	push   edx
c00172df:	55                   	push   ebp
c00172e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00172e3:	83 c4 10             	add    esp,0x10
c00172e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172ea:	eb da                	jmp    c00172c6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00172ec:	47                   	inc    edi
c00172ed:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00172f1:	eb c5                	jmp    c00172b8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00172f3:	83 c4 1c             	add    esp,0x1c
c00172f6:	5b                   	pop    ebx
c00172f7:	5e                   	pop    esi
c00172f8:	5f                   	pop    edi
c00172f9:	5d                   	pop    ebp
c00172fa:	c3                   	ret    
c00172fb:	90                   	nop

c00172fc <Video::blit(unsigned int*, int, int, int, int)>:
c00172fc:	55                   	push   ebp
c00172fd:	57                   	push   edi
c00172fe:	56                   	push   esi
c00172ff:	53                   	push   ebx
c0017300:	83 ec 1c             	sub    esp,0x1c
c0017303:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017307:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001730b:	85 c0                	test   eax,eax
c001730d:	79 02                	jns    c0017311 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001730f:	31 c0                	xor    eax,eax
c0017311:	c1 e0 02             	shl    eax,0x2
c0017314:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017318:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001731c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017320:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017324:	39 d8                	cmp    eax,ebx
c0017326:	7e 49                	jle    c0017371 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017328:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001732e:	7c 41                	jl     c0017371 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017330:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017334:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017338:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001733c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017340:	39 f9                	cmp    ecx,edi
c0017342:	7e 22                	jle    c0017366 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017344:	83 c5 04             	add    ebp,0x4
c0017347:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001734d:	7c 14                	jl     c0017363 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001734f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017351:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017354:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017358:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001735c:	56                   	push   esi
c001735d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017360:	83 c4 10             	add    esp,0x10
c0017363:	47                   	inc    edi
c0017364:	eb d2                	jmp    c0017338 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001736a:	43                   	inc    ebx
c001736b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001736f:	eb ab                	jmp    c001731c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017371:	83 c4 1c             	add    esp,0x1c
c0017374:	5b                   	pop    ebx
c0017375:	5e                   	pop    esi
c0017376:	5f                   	pop    edi
c0017377:	5d                   	pop    ebp
c0017378:	c3                   	ret    
c0017379:	90                   	nop

c001737a <Video::clearScreen(unsigned int)>:
c001737a:	57                   	push   edi
c001737b:	56                   	push   esi
c001737c:	53                   	push   ebx
c001737d:	31 db                	xor    ebx,ebx
c001737f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017383:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017389:	7e 1f                	jle    c00173aa <Video::clearScreen(unsigned int)+0x30>
c001738b:	31 ff                	xor    edi,edi
c001738d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017393:	7e 12                	jle    c00173a7 <Video::clearScreen(unsigned int)+0x2d>
c0017395:	8b 06                	mov    eax,DWORD PTR [esi]
c0017397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001739b:	53                   	push   ebx
c001739c:	57                   	push   edi
c001739d:	47                   	inc    edi
c001739e:	56                   	push   esi
c001739f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173a2:	83 c4 10             	add    esp,0x10
c00173a5:	eb e6                	jmp    c001738d <Video::clearScreen(unsigned int)+0x13>
c00173a7:	43                   	inc    ebx
c00173a8:	eb d9                	jmp    c0017383 <Video::clearScreen(unsigned int)+0x9>
c00173aa:	5b                   	pop    ebx
c00173ab:	5e                   	pop    esi
c00173ac:	5f                   	pop    edi
c00173ad:	c3                   	ret    

c00173ae <Video::putpixel(int, int, unsigned int)>:
c00173ae:	c7 44 24 04 40 b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b340
c00173b6:	e9 26 31 00 00       	jmp    c001a4e1 <Krnl::panic(char const*)>
c00173bb:	90                   	nop

c00173bc <Video::Video(char const*)>:
c00173bc:	83 ec 0c             	sub    esp,0xc
c00173bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173c3:	83 ec 08             	sub    esp,0x8
c00173c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173ca:	50                   	push   eax
c00173cb:	e8 f0 cf ff ff       	call   c00143c0 <Device::Device(char const*)>
c00173d0:	83 c4 10             	add    esp,0x10
c00173d3:	ba c4 b3 02 c0       	mov    edx,0xc002b3c4
c00173d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173dc:	89 10                	mov    DWORD PTR [eax],edx
c00173de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173e2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00173ec:	90                   	nop
c00173ed:	83 c4 0c             	add    esp,0xc
c00173f0:	c3                   	ret    
c00173f1:	90                   	nop

c00173f2 <Video::~Video()>:
c00173f2:	83 ec 0c             	sub    esp,0xc
c00173f5:	ba c4 b3 02 c0       	mov    edx,0xc002b3c4
c00173fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173fe:	89 10                	mov    DWORD PTR [eax],edx
c0017400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017404:	83 ec 0c             	sub    esp,0xc
c0017407:	50                   	push   eax
c0017408:	e8 95 cc ff ff       	call   c00140a2 <Device::~Device()>
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	90                   	nop
c0017411:	83 c4 0c             	add    esp,0xc
c0017414:	c3                   	ret    
c0017415:	90                   	nop

c0017416 <Video::~Video()>:
c0017416:	83 ec 0c             	sub    esp,0xc
c0017419:	83 ec 0c             	sub    esp,0xc
c001741c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017420:	e8 cd ff ff ff       	call   c00173f2 <Video::~Video()>
c0017425:	83 c4 10             	add    esp,0x10
c0017428:	83 ec 08             	sub    esp,0x8
c001742b:	68 64 01 00 00       	push   0x164
c0017430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017434:	e8 8a b8 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0017439:	83 c4 10             	add    esp,0x10
c001743c:	83 c4 0c             	add    esp,0xc
c001743f:	c3                   	ret    

c0017440 <Video::isMonochrome()>:
c0017440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017444:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001744a:	c3                   	ret    
c001744b:	90                   	nop

c001744c <Video::getWidth()>:
c001744c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017450:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017456:	c3                   	ret    
c0017457:	90                   	nop

c0017458 <Video::getHeight()>:
c0017458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001745c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017462:	c3                   	ret    
c0017463:	90                   	nop

c0017464 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017464:	55                   	push   ebp
c0017465:	57                   	push   edi
c0017466:	56                   	push   esi
c0017467:	53                   	push   ebx
c0017468:	83 ec 2c             	sub    esp,0x2c
c001746b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001746f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017473:	83 f8 01             	cmp    eax,0x1
c0017476:	19 c9                	sbb    ecx,ecx
c0017478:	31 db                	xor    ebx,ebx
c001747a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001747e:	89 cd                	mov    ebp,ecx
c0017480:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017488:	f7 d5                	not    ebp
c001748a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017490:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017494:	01 d8                	add    eax,ebx
c0017496:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001749a:	56                   	push   esi
c001749b:	e8 b8 ff ff ff       	call   c0017458 <Video::getHeight()>
c00174a0:	59                   	pop    ecx
c00174a1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00174a5:	7e 70                	jle    c0017517 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00174a7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174ab:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00174af:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00174b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00174b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174ba:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00174c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174c5:	89 f8                	mov    eax,edi
c00174c7:	83 c0 20             	add    eax,0x20
c00174ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174ce:	56                   	push   esi
c00174cf:	e8 78 ff ff ff       	call   c001744c <Video::getWidth()>
c00174d4:	5a                   	pop    edx
c00174d5:	39 c7                	cmp    edi,eax
c00174d7:	7d 34                	jge    c001750d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00174d9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00174de:	74 05                	je     c00174e5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00174e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00174e2:	55                   	push   ebp
c00174e3:	eb 0d                	jmp    c00174f2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00174e5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00174ea:	74 12                	je     c00174fe <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00174ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00174ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174f6:	57                   	push   edi
c00174f7:	56                   	push   esi
c00174f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174fb:	83 c4 10             	add    esp,0x10
c00174fe:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017502:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017506:	47                   	inc    edi
c0017507:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001750b:	75 c1                	jne    c00174ce <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001750d:	43                   	inc    ebx
c001750e:	83 fb 20             	cmp    ebx,0x20
c0017511:	0f 85 79 ff ff ff    	jne    c0017490 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017517:	83 c4 2c             	add    esp,0x2c
c001751a:	5b                   	pop    ebx
c001751b:	5e                   	pop    esi
c001751c:	5f                   	pop    edi
c001751d:	5d                   	pop    ebp
c001751e:	c3                   	ret    
c001751f:	90                   	nop

c0017520 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017520:	55                   	push   ebp
c0017521:	57                   	push   edi
c0017522:	56                   	push   esi
c0017523:	53                   	push   ebx
c0017524:	83 ec 28             	sub    esp,0x28
c0017527:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001752b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001752f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017533:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017537:	c1 e7 08             	shl    edi,0x8
c001753a:	01 c7                	add    edi,eax
c001753c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017540:	c1 e0 08             	shl    eax,0x8
c0017543:	01 d0                	add    eax,edx
c0017545:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001754d:	0f af c7             	imul   eax,edi
c0017550:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017557:	50                   	push   eax
c0017558:	e8 ee 82 ff ff       	call   c000f84b <malloc>
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	89 c5                	mov    ebp,eax
c0017562:	85 c0                	test   eax,eax
c0017564:	75 15                	jne    c001757b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017566:	83 ec 0c             	sub    esp,0xc
c0017569:	68 61 b3 02 c0       	push   0xc002b361
c001756e:	e8 30 b8 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0017573:	83 c4 10             	add    esp,0x10
c0017576:	e9 1c 01 00 00       	jmp    c0017697 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001757b:	be 12 00 00 00       	mov    esi,0x12
c0017580:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017584:	74 11                	je     c0017597 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017586:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001758a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001758e:	c1 fe 03             	sar    esi,0x3
c0017591:	0f af f0             	imul   esi,eax
c0017594:	83 c6 12             	add    esi,0x12
c0017597:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001759b:	74 04                	je     c00175a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001759d:	85 ff                	test   edi,edi
c001759f:	75 12                	jne    c00175b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00175a1:	83 ec 0c             	sub    esp,0xc
c00175a4:	68 78 b3 02 c0       	push   0xc002b378
c00175a9:	e8 f5 b7 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00175ae:	e9 ce 00 00 00       	jmp    c0017681 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00175b3:	52                   	push   edx
c00175b4:	52                   	push   edx
c00175b5:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00175b9:	50                   	push   eax
c00175ba:	68 8d b3 02 c0       	push   0xc002b38d
c00175bf:	e8 df b7 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00175c4:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	80 fa 02             	cmp    dl,0x2
c00175ce:	0f 85 98 00 00 00    	jne    c001766c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00175d4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00175d9:	75 10                	jne    c00175eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00175db:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00175df:	75 0a                	jne    c00175eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00175e1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00175e4:	83 e8 18             	sub    eax,0x18
c00175e7:	a8 f7                	test   al,0xf7
c00175e9:	74 0a                	je     c00175f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00175eb:	83 ec 0c             	sub    esp,0xc
c00175ee:	68 9a b3 02 c0       	push   0xc002b39a
c00175f3:	eb 7f                	jmp    c0017674 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00175f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017605:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017609:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017611:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017615:	75 0c                	jne    c0017623 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017617:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001761c:	c1 e0 18             	shl    eax,0x18
c001761f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017623:	41                   	inc    ecx
c0017624:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017629:	c1 e2 10             	shl    edx,0x10
c001762c:	89 d0                	mov    eax,edx
c001762e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017633:	c1 e2 08             	shl    edx,0x8
c0017636:	09 c2                	or     edx,eax
c0017638:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001763c:	09 c2                	or     edx,eax
c001763e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017642:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017646:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001764a:	c1 f8 03             	sar    eax,0x3
c001764d:	01 c6                	add    esi,eax
c001764f:	89 c8                	mov    eax,ecx
c0017651:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017655:	39 c7                	cmp    edi,eax
c0017657:	7f b0                	jg     c0017609 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017659:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001765d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017661:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017664:	7e 22                	jle    c0017688 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017666:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001766a:	eb 99                	jmp    c0017605 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001766c:	50                   	push   eax
c001766d:	50                   	push   eax
c001766e:	52                   	push   edx
c001766f:	68 a8 b3 02 c0       	push   0xc002b3a8
c0017674:	e8 2a b7 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0017679:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001767c:	e8 da 81 ff ff       	call   c000f85b <free>
c0017681:	83 c4 10             	add    esp,0x10
c0017684:	31 ed                	xor    ebp,ebp
c0017686:	eb 0f                	jmp    c0017697 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017688:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001768c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001768f:	89 38                	mov    DWORD PTR [eax],edi
c0017691:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017695:	89 08                	mov    DWORD PTR [eax],ecx
c0017697:	83 c4 1c             	add    esp,0x1c
c001769a:	89 e8                	mov    eax,ebp
c001769c:	5b                   	pop    ebx
c001769d:	5e                   	pop    esi
c001769e:	5f                   	pop    edi
c001769f:	5d                   	pop    ebp
c00176a0:	c3                   	ret    
c00176a1:	90                   	nop

c00176a2 <Video::putTGA(int, int, unsigned char*, int)>:
c00176a2:	55                   	push   ebp
c00176a3:	57                   	push   edi
c00176a4:	56                   	push   esi
c00176a5:	53                   	push   ebx
c00176a6:	83 ec 28             	sub    esp,0x28
c00176a9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00176ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176b1:	50                   	push   eax
c00176b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176b6:	50                   	push   eax
c00176b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00176bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00176bf:	56                   	push   esi
c00176c0:	e8 5b fe ff ff       	call   c0017520 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00176c5:	83 c4 20             	add    esp,0x20
c00176c8:	85 c0                	test   eax,eax
c00176ca:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00176ce:	74 35                	je     c0017705 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00176d0:	89 c7                	mov    edi,eax
c00176d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176d6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00176da:	39 d8                	cmp    eax,ebx
c00176dc:	7e 27                	jle    c0017705 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00176de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00176e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00176ea:	39 e8                	cmp    eax,ebp
c00176ec:	7e 14                	jle    c0017702 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00176ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00176f0:	83 c7 04             	add    edi,0x4
c00176f3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00176f6:	53                   	push   ebx
c00176f7:	55                   	push   ebp
c00176f8:	45                   	inc    ebp
c00176f9:	56                   	push   esi
c00176fa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	eb e0                	jmp    c00176e2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017702:	43                   	inc    ebx
c0017703:	eb cd                	jmp    c00176d2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017705:	83 c4 1c             	add    esp,0x1c
c0017708:	5b                   	pop    ebx
c0017709:	5e                   	pop    esi
c001770a:	5f                   	pop    edi
c001770b:	5d                   	pop    ebp
c001770c:	c3                   	ret    
c001770d:	90                   	nop

c001770e <ACPI::close(int, int, void*)>:
c001770e:	83 ec 1c             	sub    esp,0x1c
c0017711:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017719:	74 0a                	je     c0017725 <ACPI::close(int, int, void*)+0x17>
c001771b:	b8 00 00 00 00       	mov    eax,0x0
c0017720:	e9 9a 00 00 00       	jmp    c00177bf <ACPI::close(int, int, void*)+0xb1>
c0017725:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001772a:	75 37                	jne    c0017763 <ACPI::close(int, int, void*)+0x55>
c001772c:	83 ec 0c             	sub    esp,0xc
c001772f:	68 04 b4 02 c0       	push   0xc002b404
c0017734:	e8 6a b6 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0017741:	85 c0                	test   eax,eax
c0017743:	74 07                	je     c001774c <ACPI::close(int, int, void*)+0x3e>
c0017745:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001774a:	ff d0                	call   eax
c001774c:	83 ec 0c             	sub    esp,0xc
c001774f:	68 34 b5 02 c0       	push   0xc002b534
c0017754:	e8 88 2d 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017761:	eb 5c                	jmp    c00177bf <ACPI::close(int, int, void*)+0xb1>
c0017763:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017768:	75 50                	jne    c00177ba <ACPI::close(int, int, void*)+0xac>
c001776a:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001776f:	85 c0                	test   eax,eax
c0017771:	74 07                	je     c001777a <ACPI::close(int, int, void*)+0x6c>
c0017773:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c0017778:	ff d0                	call   eax
c001777a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001777f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017784:	83 e0 02             	and    eax,0x2
c0017787:	74 1c                	je     c00177a5 <ACPI::close(int, int, void*)+0x97>
c0017789:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017794:	89 c2                	mov    edx,eax
c0017796:	ec                   	in     al,dx
c0017797:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001779b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001779f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00177a3:	eb da                	jmp    c001777f <ACPI::close(int, int, void*)+0x71>
c00177a5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00177ac:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00177b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00177b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177b9:	ee                   	out    dx,al
c00177ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00177bf:	83 c4 1c             	add    esp,0x1c
c00177c2:	c3                   	ret    

c00177c3 <findRSDP()>:
c00177c3:	83 ec 1c             	sub    esp,0x1c
c00177c6:	83 ec 0c             	sub    esp,0xc
c00177c9:	68 11 b4 02 c0       	push   0xc002b411
c00177ce:	e8 d0 b5 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00177d3:	83 c4 10             	add    esp,0x10
c00177d6:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00177db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177e1:	83 e0 04             	and    eax,0x4
c00177e4:	84 c0                	test   al,al
c00177e6:	75 07                	jne    c00177ef <findRSDP()+0x2c>
c00177e8:	b8 00 00 00 00       	mov    eax,0x0
c00177ed:	eb 6a                	jmp    c0017859 <findRSDP()+0x96>
c00177ef:	a1 94 e4 02 c0       	mov    eax,ds:0xc002e494
c00177f4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00177f9:	7f 1b                	jg     c0017816 <findRSDP()+0x53>
c00177fb:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017800:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017806:	83 e2 fb             	and    edx,0xfffffffb
c0017809:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001780f:	b8 00 00 00 00       	mov    eax,0x0
c0017814:	eb 43                	jmp    c0017859 <findRSDP()+0x96>
c0017816:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001781e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017826:	77 2c                	ja     c0017854 <findRSDP()+0x91>
c0017828:	83 ec 04             	sub    esp,0x4
c001782b:	6a 08                	push   0x8
c001782d:	68 1f b4 02 c0       	push   0xc002b41f
c0017832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017836:	e8 0d 8e fe ff       	call   c0000648 <memcmp>
c001783b:	83 c4 10             	add    esp,0x10
c001783e:	85 c0                	test   eax,eax
c0017840:	0f 94 c0             	sete   al
c0017843:	84 c0                	test   al,al
c0017845:	74 06                	je     c001784d <findRSDP()+0x8a>
c0017847:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001784b:	eb 0c                	jmp    c0017859 <findRSDP()+0x96>
c001784d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017852:	eb ca                	jmp    c001781e <findRSDP()+0x5b>
c0017854:	b8 00 00 00 00       	mov    eax,0x0
c0017859:	83 c4 1c             	add    esp,0x1c
c001785c:	c3                   	ret    

c001785d <loadACPITables(unsigned char*)>:
c001785d:	56                   	push   esi
c001785e:	53                   	push   ebx
c001785f:	83 ec 44             	sub    esp,0x44
c0017862:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017867:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001786d:	83 e0 04             	and    eax,0x4
c0017870:	84 c0                	test   al,al
c0017872:	0f 84 05 02 00 00    	je     c0017a7d <loadACPITables(unsigned char*)+0x220>
c0017878:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c001787d:	84 c0                	test   al,al
c001787f:	74 75                	je     c00178f6 <loadACPITables(unsigned char*)+0x99>
c0017881:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017885:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017889:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001788d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017890:	83 e8 24             	sub    eax,0x24
c0017893:	c1 e8 03             	shr    eax,0x3
c0017896:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001789a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00178a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178a6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00178aa:	0f 8d b2 00 00 00    	jge    c0017962 <loadACPITables(unsigned char*)+0x105>
c00178b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178b4:	83 c0 24             	add    eax,0x24
c00178b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178c7:	c1 e0 03             	shl    eax,0x3
c00178ca:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00178ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00178d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00178d7:	89 c1                	mov    ecx,eax
c00178d9:	a1 0c 0b 03 c0       	mov    eax,ds:0xc0030b0c
c00178de:	8d 50 01             	lea    edx,[eax+0x1]
c00178e1:	89 15 0c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b0c,edx
c00178e7:	89 ca                	mov    edx,ecx
c00178e9:	89 14 c5 24 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4dc],edx
c00178f0:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00178f4:	eb ac                	jmp    c00178a2 <loadACPITables(unsigned char*)+0x45>
c00178f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017902:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017905:	83 e8 24             	sub    eax,0x24
c0017908:	c1 e8 02             	shr    eax,0x2
c001790b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001790f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017917:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001791b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001791f:	7d 41                	jge    c0017962 <loadACPITables(unsigned char*)+0x105>
c0017921:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017925:	83 c0 24             	add    eax,0x24
c0017928:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001792c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017930:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017934:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017938:	c1 e0 02             	shl    eax,0x2
c001793b:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001793f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017943:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017945:	a1 0c 0b 03 c0       	mov    eax,ds:0xc0030b0c
c001794a:	8d 50 01             	lea    edx,[eax+0x1]
c001794d:	89 15 0c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b0c,edx
c0017953:	89 ca                	mov    edx,ecx
c0017955:	89 14 c5 24 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4dc],edx
c001795c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017960:	eb b5                	jmp    c0017917 <loadACPITables(unsigned char*)+0xba>
c0017962:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001796a:	a1 0c 0b 03 c0       	mov    eax,ds:0xc0030b0c
c001796f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017973:	0f 8d 05 01 00 00    	jge    c0017a7e <loadACPITables(unsigned char*)+0x221>
c0017979:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001797d:	8b 04 c5 24 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf4dc]
c0017984:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001798c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017994:	25 ff 0f 00 00       	and    eax,0xfff
c0017999:	89 c6                	mov    esi,eax
c001799b:	e8 6e a2 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c00179a0:	89 c3                	mov    ebx,eax
c00179a2:	83 ec 0c             	sub    esp,0xc
c00179a5:	6a 01                	push   0x1
c00179a7:	e8 23 a0 ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c00179ac:	83 c4 10             	add    esp,0x10
c00179af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179b3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179b9:	83 ec 0c             	sub    esp,0xc
c00179bc:	6a 01                	push   0x1
c00179be:	6a 01                	push   0x1
c00179c0:	50                   	push   eax
c00179c1:	52                   	push   edx
c00179c2:	53                   	push   ebx
c00179c3:	e8 28 ab ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179c8:	83 c4 20             	add    esp,0x20
c00179cb:	09 f0                	or     eax,esi
c00179cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179d5:	c1 e0 03             	shl    eax,0x3
c00179d8:	05 20 0b 03 c0       	add    eax,0xc0030b20
c00179dd:	83 ec 04             	sub    esp,0x4
c00179e0:	6a 04                	push   0x4
c00179e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179e6:	50                   	push   eax
c00179e7:	e8 60 8d fe ff       	call   c000074c <memcpy>
c00179ec:	83 c4 10             	add    esp,0x10
c00179ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179fe:	05 00 10 00 00       	add    eax,0x1000
c0017a03:	c1 e8 0c             	shr    eax,0xc
c0017a06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a15:	25 ff 0f 00 00       	and    eax,0xfff
c0017a1a:	89 c6                	mov    esi,eax
c0017a1c:	e8 ed a1 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c0017a21:	89 c3                	mov    ebx,eax
c0017a23:	83 ec 0c             	sub    esp,0xc
c0017a26:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a2a:	e8 a0 9f ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a36:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a3c:	83 ec 0c             	sub    esp,0xc
c0017a3f:	6a 01                	push   0x1
c0017a41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a45:	50                   	push   eax
c0017a46:	52                   	push   edx
c0017a47:	53                   	push   ebx
c0017a48:	e8 a3 aa ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a4d:	83 c4 20             	add    esp,0x20
c0017a50:	09 f0                	or     eax,esi
c0017a52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a56:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017a59:	83 ec 0c             	sub    esp,0xc
c0017a5c:	50                   	push   eax
c0017a5d:	e8 33 a4 ff ff       	call   c0011e95 <Virt::freeKernelVirtualPages(unsigned long)>
c0017a62:	83 c4 10             	add    esp,0x10
c0017a65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a6d:	89 14 c5 24 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4dc],edx
c0017a74:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017a78:	e9 ed fe ff ff       	jmp    c001796a <loadACPITables(unsigned char*)+0x10d>
c0017a7d:	90                   	nop
c0017a7e:	83 c4 44             	add    esp,0x44
c0017a81:	5b                   	pop    ebx
c0017a82:	5e                   	pop    esi
c0017a83:	c3                   	ret    

c0017a84 <findRSDT(unsigned char*)>:
c0017a84:	56                   	push   esi
c0017a85:	53                   	push   ebx
c0017a86:	83 ec 44             	sub    esp,0x44
c0017a89:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017a8e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a94:	83 e0 04             	and    eax,0x4
c0017a97:	84 c0                	test   al,al
c0017a99:	75 0a                	jne    c0017aa5 <findRSDT(unsigned char*)+0x21>
c0017a9b:	b8 00 00 00 00       	mov    eax,0x0
c0017aa0:	e9 f7 00 00 00       	jmp    c0017b9c <findRSDT(unsigned char*)+0x118>
c0017aa5:	83 ec 04             	sub    esp,0x4
c0017aa8:	6a 24                	push   0x24
c0017aaa:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017aae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017ab2:	50                   	push   eax
c0017ab3:	e8 94 8c fe ff       	call   c000074c <memcpy>
c0017ab8:	83 c4 10             	add    esp,0x10
c0017abb:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017abf:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017ac3:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017acb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017acf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ad3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ad7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017adb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017adf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae3:	25 ff 0f 00 00       	and    eax,0xfff
c0017ae8:	89 c6                	mov    esi,eax
c0017aea:	e8 1f a1 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c0017aef:	89 c3                	mov    ebx,eax
c0017af1:	83 ec 0c             	sub    esp,0xc
c0017af4:	6a 02                	push   0x2
c0017af6:	e8 d4 9e ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c0017afb:	83 c4 10             	add    esp,0x10
c0017afe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017b02:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b08:	83 ec 0c             	sub    esp,0xc
c0017b0b:	6a 01                	push   0x1
c0017b0d:	6a 02                	push   0x2
c0017b0f:	50                   	push   eax
c0017b10:	52                   	push   edx
c0017b11:	53                   	push   ebx
c0017b12:	e8 d9 a9 ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b17:	83 c4 20             	add    esp,0x20
c0017b1a:	09 f0                	or     eax,esi
c0017b1c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b24:	25 ff 0f 00 00       	and    eax,0xfff
c0017b29:	89 c6                	mov    esi,eax
c0017b2b:	e8 de a0 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c0017b30:	89 c3                	mov    ebx,eax
c0017b32:	83 ec 0c             	sub    esp,0xc
c0017b35:	6a 02                	push   0x2
c0017b37:	e8 93 9e ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c0017b3c:	83 c4 10             	add    esp,0x10
c0017b3f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b43:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b49:	83 ec 0c             	sub    esp,0xc
c0017b4c:	6a 01                	push   0x1
c0017b4e:	6a 02                	push   0x2
c0017b50:	50                   	push   eax
c0017b51:	52                   	push   edx
c0017b52:	53                   	push   ebx
c0017b53:	e8 98 a9 ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b58:	83 c4 20             	add    esp,0x20
c0017b5b:	09 f0                	or     eax,esi
c0017b5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b61:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017b66:	75 11                	jne    c0017b79 <findRSDT(unsigned char*)+0xf5>
c0017b68:	c6 05 20 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d20,0x0
c0017b6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b73:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b77:	eb 1f                	jmp    c0017b98 <findRSDT(unsigned char*)+0x114>
c0017b79:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017b7e:	75 11                	jne    c0017b91 <findRSDT(unsigned char*)+0x10d>
c0017b80:	c6 05 20 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d20,0x1
c0017b87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b8f:	eb 07                	jmp    c0017b98 <findRSDT(unsigned char*)+0x114>
c0017b91:	b8 00 00 00 00       	mov    eax,0x0
c0017b96:	eb 04                	jmp    c0017b9c <findRSDT(unsigned char*)+0x118>
c0017b98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b9c:	83 c4 44             	add    esp,0x44
c0017b9f:	5b                   	pop    ebx
c0017ba0:	5e                   	pop    esi
c0017ba1:	c3                   	ret    

c0017ba2 <findDataTable(unsigned char*, char*)>:
c0017ba2:	83 ec 1c             	sub    esp,0x1c
c0017ba5:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017baa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bb0:	83 e0 04             	and    eax,0x4
c0017bb3:	84 c0                	test   al,al
c0017bb5:	75 07                	jne    c0017bbe <findDataTable(unsigned char*, char*)+0x1c>
c0017bb7:	b8 00 00 00 00       	mov    eax,0x0
c0017bbc:	eb 7c                	jmp    c0017c3a <findDataTable(unsigned char*, char*)+0x98>
c0017bbe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017bc6:	a1 0c 0b 03 c0       	mov    eax,ds:0xc0030b0c
c0017bcb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017bcf:	7d 3a                	jge    c0017c0b <findDataTable(unsigned char*, char*)+0x69>
c0017bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bd5:	c1 e0 03             	shl    eax,0x3
c0017bd8:	05 20 0b 03 c0       	add    eax,0xc0030b20
c0017bdd:	83 ec 04             	sub    esp,0x4
c0017be0:	6a 04                	push   0x4
c0017be2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017be6:	50                   	push   eax
c0017be7:	e8 5c 8a fe ff       	call   c0000648 <memcmp>
c0017bec:	83 c4 10             	add    esp,0x10
c0017bef:	85 c0                	test   eax,eax
c0017bf1:	0f 94 c0             	sete   al
c0017bf4:	84 c0                	test   al,al
c0017bf6:	74 0d                	je     c0017c05 <findDataTable(unsigned char*, char*)+0x63>
c0017bf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bfc:	8b 04 c5 24 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf4dc]
c0017c03:	eb 35                	jmp    c0017c3a <findDataTable(unsigned char*, char*)+0x98>
c0017c05:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c09:	eb bb                	jmp    c0017bc6 <findDataTable(unsigned char*, char*)+0x24>
c0017c0b:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017c10:	84 c0                	test   al,al
c0017c12:	74 07                	je     c0017c1b <findDataTable(unsigned char*, char*)+0x79>
c0017c14:	b8 58 00 00 00       	mov    eax,0x58
c0017c19:	eb 05                	jmp    c0017c20 <findDataTable(unsigned char*, char*)+0x7e>
c0017c1b:	b8 52 00 00 00       	mov    eax,0x52
c0017c20:	83 ec 04             	sub    esp,0x4
c0017c23:	50                   	push   eax
c0017c24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c28:	68 58 b5 02 c0       	push   0xc002b558
c0017c2d:	e8 71 b1 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0017c32:	83 c4 10             	add    esp,0x10
c0017c35:	b8 00 00 00 00       	mov    eax,0x0
c0017c3a:	83 c4 1c             	add    esp,0x1c
c0017c3d:	c3                   	ret    

c0017c3e <scanMADT()>:
c0017c3e:	53                   	push   ebx
c0017c3f:	83 ec 38             	sub    esp,0x38
c0017c42:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017c47:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c4d:	83 e0 04             	and    eax,0x4
c0017c50:	84 c0                	test   al,al
c0017c52:	0f 84 63 04 00 00    	je     c00180bb <scanMADT()+0x47d>
c0017c58:	e8 66 fb ff ff       	call   c00177c3 <findRSDP()>
c0017c5d:	a3 2c 0d 03 c0       	mov    ds:0xc0030d2c,eax
c0017c62:	a1 2c 0d 03 c0       	mov    eax,ds:0xc0030d2c
c0017c67:	85 c0                	test   eax,eax
c0017c69:	75 19                	jne    c0017c84 <scanMADT()+0x46>
c0017c6b:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017c70:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c76:	83 e2 fb             	and    edx,0xfffffffb
c0017c79:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c7f:	e9 3b 04 00 00       	jmp    c00180bf <scanMADT()+0x481>
c0017c84:	a1 2c 0d 03 c0       	mov    eax,ds:0xc0030d2c
c0017c89:	83 ec 0c             	sub    esp,0xc
c0017c8c:	50                   	push   eax
c0017c8d:	e8 f2 fd ff ff       	call   c0017a84 <findRSDT(unsigned char*)>
c0017c92:	83 c4 10             	add    esp,0x10
c0017c95:	a3 28 0d 03 c0       	mov    ds:0xc0030d28,eax
c0017c9a:	a1 28 0d 03 c0       	mov    eax,ds:0xc0030d28
c0017c9f:	85 c0                	test   eax,eax
c0017ca1:	75 19                	jne    c0017cbc <scanMADT()+0x7e>
c0017ca3:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017ca8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017cae:	83 e2 fb             	and    edx,0xfffffffb
c0017cb1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017cb7:	e9 03 04 00 00       	jmp    c00180bf <scanMADT()+0x481>
c0017cbc:	a1 28 0d 03 c0       	mov    eax,ds:0xc0030d28
c0017cc1:	83 ec 0c             	sub    esp,0xc
c0017cc4:	50                   	push   eax
c0017cc5:	e8 93 fb ff ff       	call   c001785d <loadACPITables(unsigned char*)>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	a1 28 0d 03 c0       	mov    eax,ds:0xc0030d28
c0017cd2:	83 ec 08             	sub    esp,0x8
c0017cd5:	68 28 b4 02 c0       	push   0xc002b428
c0017cda:	50                   	push   eax
c0017cdb:	e8 c2 fe ff ff       	call   c0017ba2 <findDataTable(unsigned char*, char*)>
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ce7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017cec:	75 19                	jne    c0017d07 <scanMADT()+0xc9>
c0017cee:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0017cf3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017cf9:	83 e2 fe             	and    edx,0xfffffffe
c0017cfc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d02:	e9 b8 03 00 00       	jmp    c00180bf <scanMADT()+0x481>
c0017d07:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017d0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d16:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017d1a:	0f 87 9f 03 00 00    	ja     c00180bf <scanMADT()+0x481>
c0017d20:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017d28:	0f 87 91 03 00 00    	ja     c00180bf <scanMADT()+0x481>
c0017d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d32:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d3a:	8d 50 01             	lea    edx,[eax+0x1]
c0017d3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d49:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017d4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d51:	8d 50 01             	lea    edx,[eax+0x1]
c0017d54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d5c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d60:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017d64:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017d69:	0f 86 4f 03 00 00    	jbe    c00180be <scanMADT()+0x480>
c0017d6f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017d74:	75 57                	jne    c0017dcd <scanMADT()+0x18f>
c0017d76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d7a:	8d 50 01             	lea    edx,[eax+0x1]
c0017d7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d81:	8a 15 20 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f20
c0017d87:	0f b6 d2             	movzx  edx,dl
c0017d8a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d8e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d92:	88 82 60 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0a0],al
c0017d98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d9c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017da3:	8a 15 20 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f20
c0017da9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017dac:	88 0d 20 0f 03 c0    	mov    BYTE PTR ds:0xc0030f20,cl
c0017db2:	0f b6 d2             	movzx  edx,dl
c0017db5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017db9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017dbd:	88 82 40 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0c0],al
c0017dc3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017dc8:	e9 da 02 00 00       	jmp    c00180a7 <scanMADT()+0x469>
c0017dcd:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017dd2:	0f 85 14 01 00 00    	jne    c0017eec <scanMADT()+0x2ae>
c0017dd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ddc:	8d 50 01             	lea    edx,[eax+0x1]
c0017ddf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017de3:	8a 15 e0 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030de0
c0017de9:	0f b6 d2             	movzx  edx,dl
c0017dec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017df0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017df4:	88 82 00 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf200],al
c0017dfa:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017dfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e06:	01 d0                	add    eax,edx
c0017e08:	83 c0 2c             	add    eax,0x2c
c0017e0b:	8a 00                	mov    al,BYTE PTR [eax]
c0017e0d:	0f b6 d0             	movzx  edx,al
c0017e10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e14:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e1b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e1f:	0f b6 c0             	movzx  eax,al
c0017e22:	c1 e0 08             	shl    eax,0x8
c0017e25:	89 d1                	mov    ecx,edx
c0017e27:	09 c1                	or     ecx,eax
c0017e29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2d:	8d 50 02             	lea    edx,[eax+0x2]
c0017e30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e34:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e38:	0f b6 c0             	movzx  eax,al
c0017e3b:	c1 e0 10             	shl    eax,0x10
c0017e3e:	09 c1                	or     ecx,eax
c0017e40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e44:	8d 50 03             	lea    edx,[eax+0x3]
c0017e47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e4f:	0f b6 c0             	movzx  eax,al
c0017e52:	c1 e0 18             	shl    eax,0x18
c0017e55:	09 c1                	or     ecx,eax
c0017e57:	89 ca                	mov    edx,ecx
c0017e59:	a0 e0 0d 03 c0       	mov    al,ds:0xc0030de0
c0017e5e:	0f b6 c0             	movzx  eax,al
c0017e61:	89 14 85 20 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1e0],edx
c0017e68:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e75:	01 d0                	add    eax,edx
c0017e77:	83 c0 2c             	add    eax,0x2c
c0017e7a:	8a 00                	mov    al,BYTE PTR [eax]
c0017e7c:	0f b6 d0             	movzx  edx,al
c0017e7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e83:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e8a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e8e:	0f b6 c0             	movzx  eax,al
c0017e91:	c1 e0 08             	shl    eax,0x8
c0017e94:	89 d1                	mov    ecx,edx
c0017e96:	09 c1                	or     ecx,eax
c0017e98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e9c:	8d 50 02             	lea    edx,[eax+0x2]
c0017e9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ea7:	0f b6 c0             	movzx  eax,al
c0017eaa:	c1 e0 10             	shl    eax,0x10
c0017ead:	09 c1                	or     ecx,eax
c0017eaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb3:	8d 50 03             	lea    edx,[eax+0x3]
c0017eb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ebe:	0f b6 c0             	movzx  eax,al
c0017ec1:	c1 e0 18             	shl    eax,0x18
c0017ec4:	09 c1                	or     ecx,eax
c0017ec6:	89 ca                	mov    edx,ecx
c0017ec8:	a0 e0 0d 03 c0       	mov    al,ds:0xc0030de0
c0017ecd:	0f b6 c0             	movzx  eax,al
c0017ed0:	89 14 85 a0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf160],edx
c0017ed7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017edc:	a0 e0 0d 03 c0       	mov    al,ds:0xc0030de0
c0017ee1:	40                   	inc    eax
c0017ee2:	a2 e0 0d 03 c0       	mov    ds:0xc0030de0,al
c0017ee7:	e9 bb 01 00 00       	jmp    c00180a7 <scanMADT()+0x469>
c0017eec:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017ef1:	0f 85 e9 00 00 00    	jne    c0017fe0 <scanMADT()+0x3a2>
c0017ef7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017efb:	8d 50 01             	lea    edx,[eax+0x1]
c0017efe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f06:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f0a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017f0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f12:	8d 50 01             	lea    edx,[eax+0x1]
c0017f15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f1d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f21:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017f25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2d:	01 d0                	add    eax,edx
c0017f2f:	83 c0 2c             	add    eax,0x2c
c0017f32:	8a 00                	mov    al,BYTE PTR [eax]
c0017f34:	0f b6 d0             	movzx  edx,al
c0017f37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f42:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f46:	0f b6 c0             	movzx  eax,al
c0017f49:	c1 e0 08             	shl    eax,0x8
c0017f4c:	89 d1                	mov    ecx,edx
c0017f4e:	09 c1                	or     ecx,eax
c0017f50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f54:	8d 50 02             	lea    edx,[eax+0x2]
c0017f57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f5b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f5f:	0f b6 c0             	movzx  eax,al
c0017f62:	c1 e0 10             	shl    eax,0x10
c0017f65:	09 c1                	or     ecx,eax
c0017f67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6b:	8d 50 03             	lea    edx,[eax+0x3]
c0017f6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f72:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f76:	0f b6 c0             	movzx  eax,al
c0017f79:	c1 e0 18             	shl    eax,0x18
c0017f7c:	09 c8                	or     eax,ecx
c0017f7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f82:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8f:	01 d0                	add    eax,edx
c0017f91:	83 c0 2c             	add    eax,0x2c
c0017f94:	8a 00                	mov    al,BYTE PTR [eax]
c0017f96:	0f b6 c0             	movzx  eax,al
c0017f99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f9d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fa0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017fa8:	0f b6 d2             	movzx  edx,dl
c0017fab:	c1 e2 08             	shl    edx,0x8
c0017fae:	09 d0                	or     eax,edx
c0017fb0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017fb5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017fba:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017fbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fc3:	88 90 a0 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd2960],dl
c0017fc9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017fce:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017fd3:	66 89 84 12 c0 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf240],ax
c0017fdb:	e9 c7 00 00 00       	jmp    c00180a7 <scanMADT()+0x469>
c0017fe0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017fe5:	0f 85 b0 00 00 00    	jne    c001809b <scanMADT()+0x45d>
c0017feb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fef:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ff6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ffa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ffe:	0f b6 c0             	movzx  eax,al
c0018001:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018005:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800d:	01 d0                	add    eax,edx
c001800f:	83 c0 2c             	add    eax,0x2c
c0018012:	8a 00                	mov    al,BYTE PTR [eax]
c0018014:	0f b6 d0             	movzx  edx,al
c0018017:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001801b:	8d 48 01             	lea    ecx,[eax+0x1]
c001801e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018022:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018026:	0f b6 c0             	movzx  eax,al
c0018029:	c1 e0 08             	shl    eax,0x8
c001802c:	09 d0                	or     eax,edx
c001802e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018032:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803b:	8d 50 01             	lea    edx,[eax+0x1]
c001803e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018042:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018046:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001804a:	0f b6 c0             	movzx  eax,al
c001804d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018055:	c1 e0 08             	shl    eax,0x8
c0018058:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001805c:	89 c1                	mov    ecx,eax
c001805e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018062:	c1 e0 18             	shl    eax,0x18
c0018065:	89 c3                	mov    ebx,eax
c0018067:	a1 30 0d 03 c0       	mov    eax,ds:0xc0030d30
c001806c:	8d 50 01             	lea    edx,[eax+0x1]
c001806f:	89 15 30 0d 03 c0    	mov    DWORD PTR ds:0xc0030d30,edx
c0018075:	09 d9                	or     ecx,ebx
c0018077:	89 ca                	mov    edx,ecx
c0018079:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c0018080:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018084:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001808c:	68 88 b5 02 c0       	push   0xc002b588
c0018091:	e8 0d ad ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	eb 0c                	jmp    c00180a7 <scanMADT()+0x469>
c001809b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00180a0:	75 05                	jne    c00180a7 <scanMADT()+0x469>
c00180a2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00180a7:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00180ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180b0:	01 d0                	add    eax,edx
c00180b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00180b6:	e9 54 fc ff ff       	jmp    c0017d0f <scanMADT()+0xd1>
c00180bb:	90                   	nop
c00180bc:	eb 01                	jmp    c00180bf <scanMADT()+0x481>
c00180be:	90                   	nop
c00180bf:	83 c4 38             	add    esp,0x38
c00180c2:	5b                   	pop    ebx
c00180c3:	c3                   	ret    

c00180c4 <ACPI::ACPI()>:
c00180c4:	83 ec 0c             	sub    esp,0xc
c00180c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180cb:	83 ec 08             	sub    esp,0x8
c00180ce:	68 2d b4 02 c0       	push   0xc002b42d
c00180d3:	50                   	push   eax
c00180d4:	e8 e7 c2 ff ff       	call   c00143c0 <Device::Device(char const*)>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	ba fc b5 02 c0       	mov    edx,0xc002b5fc
c00180e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e5:	89 10                	mov    DWORD PTR [eax],edx
c00180e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180eb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00180f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018104:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001810e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018112:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018124:	e8 15 fb ff ff       	call   c0017c3e <scanMADT()>
c0018129:	90                   	nop
c001812a:	83 c4 0c             	add    esp,0xc
c001812d:	c3                   	ret    

c001812e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001812e:	83 ec 2c             	sub    esp,0x2c
c0018131:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018135:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018139:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001813d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018141:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018146:	88 d0                	mov    al,dl
c0018148:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001814c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018151:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018159:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001815d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018163:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018167:	0f 8d 97 00 00 00    	jge    c0018204 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001816d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018171:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018175:	83 c2 2a             	add    edx,0x2a
c0018178:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001817c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018181:	75 78                	jne    c00181fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018183:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018187:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001818b:	83 c2 2a             	add    edx,0x2a
c001818e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018192:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018196:	75 63                	jne    c00181fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018198:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001819d:	74 3a                	je     c00181d9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001819f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181a7:	83 c2 2a             	add    edx,0x2a
c00181aa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00181ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00181b5:	39 c2                	cmp    edx,eax
c00181b7:	74 10                	je     c00181c9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00181b9:	83 ec 0c             	sub    esp,0xc
c00181bc:	68 c4 b5 02 c0       	push   0xc002b5c4
c00181c1:	e8 1b 23 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c00181c6:	83 c4 10             	add    esp,0x10
c00181c9:	83 ec 0c             	sub    esp,0xc
c00181cc:	68 32 b4 02 c0       	push   0xc002b432
c00181d1:	e8 0b 23 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c00181d6:	83 c4 10             	add    esp,0x10
c00181d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00181dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181e5:	83 c2 2a             	add    edx,0x2a
c00181e8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00181ec:	8b 02                	mov    eax,DWORD PTR [edx]
c00181ee:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00181f1:	89 01                	mov    DWORD PTR [ecx],eax
c00181f3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00181f6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181fb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00181ff:	e9 55 ff ff ff       	jmp    c0018159 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018204:	90                   	nop
c0018205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018209:	83 c4 2c             	add    esp,0x2c
c001820c:	c2 04 00             	ret    0x4
c001820f:	90                   	nop

c0018210 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018210:	83 ec 1c             	sub    esp,0x1c
c0018213:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018217:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001821b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001821f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018224:	88 c8                	mov    al,cl
c0018226:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001822a:	88 d0                	mov    al,dl
c001822c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018234:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001823a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001823e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018241:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018245:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001824d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018253:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018257:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001825a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001825e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018267:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001826d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018271:	8d 48 01             	lea    ecx,[eax+0x1]
c0018274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018278:	83 c2 2a             	add    edx,0x2a
c001827b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001827f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018283:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001828d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018290:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018294:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001829c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182a2:	8d 50 01             	lea    edx,[eax+0x1]
c00182a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182a9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00182af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182b3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182b9:	3d 00 02 00 00       	cmp    eax,0x200
c00182be:	75 10                	jne    c00182d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00182c0:	83 ec 0c             	sub    esp,0xc
c00182c3:	68 41 b4 02 c0       	push   0xc002b441
c00182c8:	e8 14 22 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c00182cd:	83 c4 10             	add    esp,0x10
c00182d0:	90                   	nop
c00182d1:	83 c4 1c             	add    esp,0x1c
c00182d4:	c3                   	ret    
c00182d5:	90                   	nop

c00182d6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00182d6:	b8 00 00 00 00       	mov    eax,0x0
c00182db:	c3                   	ret    

c00182dc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00182dc:	83 ec 1c             	sub    esp,0x1c
c00182df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182e3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00182e6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00182ea:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00182ef:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182f4:	83 ec 08             	sub    esp,0x8
c00182f7:	52                   	push   edx
c00182f8:	50                   	push   eax
c00182f9:	e8 62 6b ff ff       	call   c000ee60 <Computer::readCMOS(unsigned char)>
c00182fe:	83 c4 10             	add    esp,0x10
c0018301:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018305:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001830a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001830f:	83 ec 04             	sub    esp,0x4
c0018312:	6a 01                	push   0x1
c0018314:	52                   	push   edx
c0018315:	50                   	push   eax
c0018316:	e8 5b 6c ff ff       	call   c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	90                   	nop
c001831f:	83 c4 1c             	add    esp,0x1c
c0018322:	c3                   	ret    
c0018323:	90                   	nop

c0018324 <ACPI::open(int, int, void*)>:
c0018324:	53                   	push   ebx
c0018325:	83 ec 28             	sub    esp,0x28
c0018328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001832c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018333:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018337:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001833e:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0018343:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018349:	83 e0 04             	and    eax,0x4
c001834c:	84 c0                	test   al,al
c001834e:	74 47                	je     c0018397 <ACPI::open(int, int, void*)+0x73>
c0018350:	a1 28 0d 03 c0       	mov    eax,ds:0xc0030d28
c0018355:	83 ec 08             	sub    esp,0x8
c0018358:	68 5e b4 02 c0       	push   0xc002b45e
c001835d:	50                   	push   eax
c001835e:	e8 3f f8 ff ff       	call   c0017ba2 <findDataTable(unsigned char*, char*)>
c0018363:	83 c4 10             	add    esp,0x10
c0018366:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001836a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001836f:	74 26                	je     c0018397 <ACPI::open(int, int, void*)+0x73>
c0018371:	83 ec 0c             	sub    esp,0xc
c0018374:	68 63 b4 02 c0       	push   0xc002b463
c0018379:	e8 25 aa ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018385:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001838c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018390:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018397:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001839f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183a3:	8a 00                	mov    al,BYTE PTR [eax]
c00183a5:	3c 01                	cmp    al,0x1
c00183a7:	75 28                	jne    c00183d1 <ACPI::open(int, int, void*)+0xad>
c00183a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ad:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183bf:	83 ec 0c             	sub    esp,0xc
c00183c2:	68 74 b4 02 c0       	push   0xc002b474
c00183c7:	e8 d7 a9 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	eb 25                	jmp    c00183f6 <ACPI::open(int, int, void*)+0xd2>
c00183d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183d5:	8a 00                	mov    al,BYTE PTR [eax]
c00183d7:	3c 02                	cmp    al,0x2
c00183d9:	75 1b                	jne    c00183f6 <ACPI::open(int, int, void*)+0xd2>
c00183db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183df:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183e6:	83 ec 0c             	sub    esp,0xc
c00183e9:	68 7c b4 02 c0       	push   0xc002b47c
c00183ee:	e8 b0 a9 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183fa:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018400:	83 f0 01             	xor    eax,0x1
c0018403:	84 c0                	test   al,al
c0018405:	74 6a                	je     c0018471 <ACPI::open(int, int, void*)+0x14d>
c0018407:	83 ec 0c             	sub    esp,0xc
c001840a:	68 84 b4 02 c0       	push   0xc002b484
c001840f:	e8 8f a9 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018414:	83 c4 10             	add    esp,0x10
c0018417:	e8 34 7d fe ff       	call   c0000150 <manualPCIProbe>
c001841c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018420:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018425:	75 28                	jne    c001844f <ACPI::open(int, int, void*)+0x12b>
c0018427:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001842b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018432:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018436:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001843d:	83 ec 0c             	sub    esp,0xc
c0018440:	68 92 b4 02 c0       	push   0xc002b492
c0018445:	e8 59 a9 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001844a:	83 c4 10             	add    esp,0x10
c001844d:	eb 22                	jmp    c0018471 <ACPI::open(int, int, void*)+0x14d>
c001844f:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018454:	75 1b                	jne    c0018471 <ACPI::open(int, int, void*)+0x14d>
c0018456:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018461:	83 ec 0c             	sub    esp,0xc
c0018464:	68 9c b4 02 c0       	push   0xc002b49c
c0018469:	e8 35 a9 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001846e:	83 c4 10             	add    esp,0x10
c0018471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018475:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001847b:	84 c0                	test   al,al
c001847d:	74 13                	je     c0018492 <ACPI::open(int, int, void*)+0x16e>
c001847f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018483:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018489:	83 f0 01             	xor    eax,0x1
c001848c:	0f b6 c0             	movzx  eax,al
c001848f:	40                   	inc    eax
c0018490:	eb 05                	jmp    c0018497 <ACPI::open(int, int, void*)+0x173>
c0018492:	b8 00 00 00 00       	mov    eax,0x0
c0018497:	83 ec 08             	sub    esp,0x8
c001849a:	50                   	push   eax
c001849b:	68 a6 b4 02 c0       	push   0xc002b4a6
c00184a0:	e8 fe a8 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00184a5:	83 c4 10             	add    esp,0x10
c00184a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ac:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184b2:	84 c0                	test   al,al
c00184b4:	74 67                	je     c001851d <ACPI::open(int, int, void*)+0x1f9>
c00184b6:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00184be:	83 ec 0c             	sub    esp,0xc
c00184c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00184c5:	e8 81 73 ff ff       	call   c000f84b <malloc>
c00184ca:	83 c4 10             	add    esp,0x10
c00184cd:	89 c3                	mov    ebx,eax
c00184cf:	83 ec 0c             	sub    esp,0xc
c00184d2:	53                   	push   ebx
c00184d3:	e8 e4 a3 00 00       	call   c00228bc <PCI::PCI()>
c00184d8:	83 c4 10             	add    esp,0x10
c00184db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00184df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e3:	83 ec 08             	sub    esp,0x8
c00184e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00184ea:	50                   	push   eax
c00184eb:	e8 e0 bc ff ff       	call   c00141d0 <Device::addChild(Device*)>
c00184f0:	83 c4 10             	add    esp,0x10
c00184f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00184f9:	83 c0 08             	add    eax,0x8
c00184fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00184fe:	6a 00                	push   0x0
c0018500:	6a 00                	push   0x0
c0018502:	6a 00                	push   0x0
c0018504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018508:	ff d0                	call   eax
c001850a:	83 c4 10             	add    esp,0x10
c001850d:	83 ec 0c             	sub    esp,0xc
c0018510:	68 af b4 02 c0       	push   0xc002b4af
c0018515:	e8 89 a8 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001851a:	83 c4 10             	add    esp,0x10
c001851d:	83 ec 0c             	sub    esp,0xc
c0018520:	68 ba b4 02 c0       	push   0xc002b4ba
c0018525:	e8 8d 46 00 00       	call   c001cbb7 <Thr::loadKernelSymbolTable(char const*)>
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	83 ec 0c             	sub    esp,0xc
c0018530:	6a 0c                	push   0xc
c0018532:	e8 dd 96 ff ff       	call   c0011c14 <Virt::setupPageSwapping(int)>
c0018537:	83 c4 10             	add    esp,0x10
c001853a:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c0018540:	83 ec 08             	sub    esp,0x8
c0018543:	6a 01                	push   0x1
c0018545:	68 d8 b4 02 c0       	push   0xc002b4d8
c001854a:	e8 c5 50 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c001854f:	83 c4 10             	add    esp,0x10
c0018552:	83 ec 08             	sub    esp,0x8
c0018555:	53                   	push   ebx
c0018556:	50                   	push   eax
c0018557:	e8 ec 52 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c0018565:	83 ec 08             	sub    esp,0x8
c0018568:	6a 01                	push   0x1
c001856a:	68 f5 b4 02 c0       	push   0xc002b4f5
c001856f:	e8 a0 50 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0018574:	83 c4 10             	add    esp,0x10
c0018577:	83 ec 08             	sub    esp,0x8
c001857a:	53                   	push   ebx
c001857b:	50                   	push   eax
c001857c:	e8 c7 52 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0018581:	83 c4 10             	add    esp,0x10
c0018584:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0018589:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001858f:	83 e0 04             	and    eax,0x4
c0018592:	84 c0                	test   al,al
c0018594:	0f 84 d2 00 00 00    	je     c001866c <ACPI::open(int, int, void*)+0x348>
c001859a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185a1:	83 ec 0c             	sub    esp,0xc
c00185a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00185a8:	e8 9e 72 ff ff       	call   c000f84b <malloc>
c00185ad:	83 c4 10             	add    esp,0x10
c00185b0:	89 c3                	mov    ebx,eax
c00185b2:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c00185b7:	83 ec 04             	sub    esp,0x4
c00185ba:	50                   	push   eax
c00185bb:	68 12 b5 02 c0       	push   0xc002b512
c00185c0:	53                   	push   ebx
c00185c1:	e8 3c ad ff ff       	call   c0013302 <File::File(char const*, Process*)>
c00185c6:	83 c4 10             	add    esp,0x10
c00185c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00185cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185d2:	74 17                	je     c00185eb <ACPI::open(int, int, void*)+0x2c7>
c00185d4:	83 ec 0c             	sub    esp,0xc
c00185d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185db:	e8 f4 af ff ff       	call   c00135d4 <File::exists()>
c00185e0:	83 c4 10             	add    esp,0x10
c00185e3:	84 c0                	test   al,al
c00185e5:	74 04                	je     c00185eb <ACPI::open(int, int, void*)+0x2c7>
c00185e7:	b0 01                	mov    al,0x1
c00185e9:	eb 02                	jmp    c00185ed <ACPI::open(int, int, void*)+0x2c9>
c00185eb:	b0 00                	mov    al,0x0
c00185ed:	84 c0                	test   al,al
c00185ef:	74 22                	je     c0018613 <ACPI::open(int, int, void*)+0x2ef>
c00185f1:	83 ec 08             	sub    esp,0x8
c00185f4:	6a 01                	push   0x1
c00185f6:	68 12 b5 02 c0       	push   0xc002b512
c00185fb:	e8 14 50 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	83 ec 08             	sub    esp,0x8
c0018606:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001860a:	50                   	push   eax
c001860b:	e8 38 52 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018618:	74 1e                	je     c0018638 <ACPI::open(int, int, void*)+0x314>
c001861a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001861f:	74 17                	je     c0018638 <ACPI::open(int, int, void*)+0x314>
c0018621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018625:	8b 00                	mov    eax,DWORD PTR [eax]
c0018627:	83 c0 08             	add    eax,0x8
c001862a:	8b 00                	mov    eax,DWORD PTR [eax]
c001862c:	83 ec 0c             	sub    esp,0xc
c001862f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018633:	ff d0                	call   eax
c0018635:	83 c4 10             	add    esp,0x10
c0018638:	a1 28 0d 03 c0       	mov    eax,ds:0xc0030d28
c001863d:	83 ec 08             	sub    esp,0x8
c0018640:	68 2f b5 02 c0       	push   0xc002b52f
c0018645:	50                   	push   eax
c0018646:	e8 57 f5 ff ff       	call   c0017ba2 <findDataTable(unsigned char*, char*)>
c001864b:	83 c4 10             	add    esp,0x10
c001864e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018652:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018657:	74 13                	je     c001866c <ACPI::open(int, int, void*)+0x348>
c0018659:	83 ec 08             	sub    esp,0x8
c001865c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018660:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018664:	e8 73 fc ff ff       	call   c00182dc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018669:	83 c4 10             	add    esp,0x10
c001866c:	b8 00 00 00 00       	mov    eax,0x0
c0018671:	83 c4 28             	add    esp,0x28
c0018674:	5b                   	pop    ebx
c0018675:	c3                   	ret    

c0018676 <ACPI::sleep()>:
c0018676:	83 ec 0c             	sub    esp,0xc
c0018679:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c001867e:	85 c0                	test   eax,eax
c0018680:	74 07                	je     c0018689 <ACPI::sleep()+0x13>
c0018682:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c0018687:	ff d0                	call   eax
c0018689:	90                   	nop
c001868a:	83 c4 0c             	add    esp,0xc
c001868d:	c3                   	ret    

c001868e <CPU::close(int, int, void*)>:
c001868e:	31 c0                	xor    eax,eax
c0018690:	c3                   	ret    
c0018691:	90                   	nop

c0018692 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018692:	55                   	push   ebp
c0018693:	57                   	push   edi
c0018694:	56                   	push   esi
c0018695:	53                   	push   ebx
c0018696:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001869a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001869e:	89 ce                	mov    esi,ecx
c00186a0:	89 d5                	mov    ebp,edx
c00186a2:	80 f9 04             	cmp    cl,0x4
c00186a5:	75 28                	jne    c00186cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00186a7:	8d 42 f9             	lea    eax,[edx-0x7]
c00186aa:	3c 03                	cmp    al,0x3
c00186ac:	0f 86 63 01 00 00    	jbe    c0018815 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00186b2:	80 fa 03             	cmp    dl,0x3
c00186b5:	0f 84 5a 01 00 00    	je     c0018815 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00186bb:	8d 7a f2             	lea    edi,[edx-0xe]
c00186be:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c00186c3:	89 fb                	mov    ebx,edi
c00186c5:	80 fb 01             	cmp    bl,0x1
c00186c8:	77 4e                	ja     c0018718 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00186ca:	e9 52 01 00 00       	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186cf:	80 f9 05             	cmp    cl,0x5
c00186d2:	75 4d                	jne    c0018721 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00186d4:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00186d9:	80 fa 03             	cmp    dl,0x3
c00186dc:	0f 86 3f 01 00 00    	jbe    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186e2:	8d 7a fa             	lea    edi,[edx-0x6]
c00186e5:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00186ea:	89 fb                	mov    ebx,edi
c00186ec:	80 fb 01             	cmp    bl,0x1
c00186ef:	0f 86 2c 01 00 00    	jbe    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186f5:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00186fa:	80 fa 08             	cmp    dl,0x8
c00186fd:	0f 84 1e 01 00 00    	je     c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018703:	89 d7                	mov    edi,edx
c0018705:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c001870a:	83 e7 fb             	and    edi,0xfffffffb
c001870d:	89 fb                	mov    ebx,edi
c001870f:	80 fb 09             	cmp    bl,0x9
c0018712:	0f 84 09 01 00 00    	je     c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018718:	31 c0                	xor    eax,eax
c001871a:	89 eb                	mov    ebx,ebp
c001871c:	0f b6 fb             	movzx  edi,bl
c001871f:	eb 30                	jmp    c0018751 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018721:	31 c0                	xor    eax,eax
c0018723:	80 f9 06             	cmp    cl,0x6
c0018726:	75 f2                	jne    c001871a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018728:	80 fa 0a             	cmp    dl,0xa
c001872b:	77 ed                	ja     c001871a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001872d:	bf de 05 00 00       	mov    edi,0x5de
c0018732:	0f a3 d7             	bt     edi,edx
c0018735:	73 e3                	jae    c001871a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018737:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c001873c:	e9 e0 00 00 00       	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018741:	39 c7                	cmp    edi,eax
c0018743:	0f 84 d3 00 00 00    	je     c001881c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018749:	40                   	inc    eax
c001874a:	3d d0 00 00 00       	cmp    eax,0xd0
c001874f:	74 09                	je     c001875a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018751:	89 f3                	mov    ebx,esi
c0018753:	80 fb 0f             	cmp    bl,0xf
c0018756:	75 f1                	jne    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018758:	eb e7                	jmp    c0018741 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001875a:	80 f9 10             	cmp    cl,0x10
c001875d:	75 14                	jne    c0018773 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001875f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018762:	83 e0 fb             	and    eax,0xfffffffb
c0018765:	3c 02                	cmp    al,0x2
c0018767:	76 34                	jbe    c001879d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018769:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c001876e:	80 fa 02             	cmp    dl,0x2
c0018771:	eb 24                	jmp    c0018797 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018773:	80 f9 11             	cmp    cl,0x11
c0018776:	75 13                	jne    c001878b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018778:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c001877d:	80 fa 03             	cmp    dl,0x3
c0018780:	0f 85 9b 00 00 00    	jne    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018786:	e9 91 00 00 00       	jmp    c001881c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001878b:	80 f9 12             	cmp    cl,0x12
c001878e:	75 14                	jne    c00187a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018790:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c0018795:	fe ca                	dec    dl
c0018797:	0f 85 84 00 00 00    	jne    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001879d:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00187a2:	eb 7d                	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a4:	80 f9 14             	cmp    cl,0x14
c00187a7:	75 12                	jne    c00187bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00187a9:	4a                   	dec    edx
c00187aa:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c00187af:	80 fa 01             	cmp    dl,0x1
c00187b2:	77 6d                	ja     c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b4:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c00187b9:	eb 66                	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187bb:	80 f9 15             	cmp    cl,0x15
c00187be:	75 31                	jne    c00187f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00187c0:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00187c5:	80 fa 01             	cmp    dl,0x1
c00187c8:	74 57                	je     c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ca:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c00187cf:	80 fa 13             	cmp    dl,0x13
c00187d2:	76 0c                	jbe    c00187e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00187d4:	80 fa 30             	cmp    dl,0x30
c00187d7:	75 48                	jne    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d9:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c00187de:	eb 41                	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e0:	b9 04 00 09 00       	mov    ecx,0x90004
c00187e5:	0f a3 d1             	bt     ecx,edx
c00187e8:	73 37                	jae    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ea:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c00187ef:	eb 30                	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f1:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c00187f6:	80 f9 16             	cmp    cl,0x16
c00187f9:	75 26                	jne    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187fb:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018800:	84 d2                	test   dl,dl
c0018802:	74 1d                	je     c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018804:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c0018809:	80 fa 30             	cmp    dl,0x30
c001880c:	75 13                	jne    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880e:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018813:	eb 0c                	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018815:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c001881a:	eb 05                	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881c:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018821:	5b                   	pop    ebx
c0018822:	5e                   	pop    esi
c0018823:	5f                   	pop    edi
c0018824:	5d                   	pop    ebp
c0018825:	c3                   	ret    

c0018826 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018826:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001882a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001882e:	80 f9 04             	cmp    cl,0x4
c0018831:	75 6b                	jne    c001889e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018833:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018838:	80 fa 01             	cmp    dl,0x1
c001883b:	0f 86 92 02 00 00    	jbe    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018841:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018846:	80 fa 02             	cmp    dl,0x2
c0018849:	0f 84 84 02 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001884f:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018854:	80 fa 03             	cmp    dl,0x3
c0018857:	0f 84 76 02 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001885d:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018862:	80 fa 04             	cmp    dl,0x4
c0018865:	0f 84 68 02 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886b:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018870:	80 fa 05             	cmp    dl,0x5
c0018873:	0f 84 5a 02 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018879:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c001887e:	80 fa 07             	cmp    dl,0x7
c0018881:	0f 84 4c 02 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018887:	83 ea 08             	sub    edx,0x8
c001888a:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c001888f:	80 fa 01             	cmp    dl,0x1
c0018892:	0f 87 3b 02 00 00    	ja     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018898:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c001889d:	c3                   	ret    
c001889e:	80 f9 05             	cmp    cl,0x5
c00188a1:	75 45                	jne    c00188e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00188a3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00188a6:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c00188ab:	80 f9 02             	cmp    cl,0x2
c00188ae:	0f 86 1f 02 00 00    	jbe    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b4:	80 fa 04             	cmp    dl,0x4
c00188b7:	0f 84 f3 01 00 00    	je     c0018ab0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00188bd:	80 fa 07             	cmp    dl,0x7
c00188c0:	0f 84 0d 02 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c6:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00188cb:	80 fa 08             	cmp    dl,0x8
c00188ce:	0f 84 ff 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d4:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c00188d9:	80 fa 09             	cmp    dl,0x9
c00188dc:	0f 85 f1 01 00 00    	jne    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e2:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00188e7:	c3                   	ret    
c00188e8:	80 f9 06             	cmp    cl,0x6
c00188eb:	0f 85 85 01 00 00    	jne    c0018a76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00188f1:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c00188f6:	80 fa 01             	cmp    dl,0x1
c00188f9:	0f 84 d4 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ff:	8d 42 fb             	lea    eax,[edx-0x5]
c0018902:	3c 01                	cmp    al,0x1
c0018904:	0f 86 ac 01 00 00    	jbe    c0018ab6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001890a:	80 fa 03             	cmp    dl,0x3
c001890d:	0f 84 a3 01 00 00    	je     c0018ab6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018913:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018916:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c001891b:	80 f9 01             	cmp    cl,0x1
c001891e:	0f 86 af 01 00 00    	jbe    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018924:	80 fa 09             	cmp    dl,0x9
c0018927:	0f 84 8f 01 00 00    	je     c0018abc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001892d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018930:	80 f9 01             	cmp    cl,0x1
c0018933:	0f 86 9a 01 00 00    	jbe    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018939:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c001893e:	80 fa 0d             	cmp    dl,0xd
c0018941:	0f 84 8c 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018947:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c001894c:	80 fa 0e             	cmp    dl,0xe
c001894f:	0f 84 7e 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018955:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c001895a:	80 fa 0f             	cmp    dl,0xf
c001895d:	0f 84 70 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018963:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018968:	80 fa 15             	cmp    dl,0x15
c001896b:	0f 84 62 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018971:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018974:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018979:	80 f9 01             	cmp    cl,0x1
c001897c:	0f 86 51 01 00 00    	jbe    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018982:	80 fa 1a             	cmp    dl,0x1a
c0018985:	0f 84 37 01 00 00    	je     c0018ac2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001898b:	80 fa 1c             	cmp    dl,0x1c
c001898e:	0f 84 34 01 00 00    	je     c0018ac8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018994:	80 fa 1d             	cmp    dl,0x1d
c0018997:	0f 84 36 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899d:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00189a2:	80 fa 25             	cmp    dl,0x25
c00189a5:	0f 84 28 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ab:	8d 4a da             	lea    ecx,[edx-0x26]
c00189ae:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c00189b3:	80 f9 01             	cmp    cl,0x1
c00189b6:	0f 86 17 01 00 00    	jbe    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189bc:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00189c1:	80 fa 2a             	cmp    dl,0x2a
c00189c4:	0f 84 09 01 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ca:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00189cf:	80 fa 2c             	cmp    dl,0x2c
c00189d2:	0f 84 fb 00 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d8:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00189dd:	80 fa 2d             	cmp    dl,0x2d
c00189e0:	0f 84 ed 00 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e6:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c00189eb:	80 fa 2e             	cmp    dl,0x2e
c00189ee:	0f 84 df 00 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f4:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00189f9:	80 fa 2f             	cmp    dl,0x2f
c00189fc:	0f 84 d1 00 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a02:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018a05:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a0a:	80 f9 01             	cmp    cl,0x1
c0018a0d:	0f 86 c0 00 00 00    	jbe    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a13:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a18:	80 fa 37             	cmp    dl,0x37
c0018a1b:	0f 84 b2 00 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a21:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a26:	80 fa 3a             	cmp    dl,0x3a
c0018a29:	0f 84 a4 00 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2f:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a34:	80 fa 3c             	cmp    dl,0x3c
c0018a37:	0f 84 96 00 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3d:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018a42:	80 fa 3d             	cmp    dl,0x3d
c0018a45:	0f 84 88 00 00 00    	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4b:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a50:	80 fa 3e             	cmp    dl,0x3e
c0018a53:	74 7e                	je     c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a55:	8d 42 bb             	lea    eax,[edx-0x45]
c0018a58:	3c 01                	cmp    al,0x1
c0018a5a:	76 72                	jbe    c0018ace <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a5c:	80 fa 3f             	cmp    dl,0x3f
c0018a5f:	74 6d                	je     c0018ace <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018a61:	80 fa 4a             	cmp    dl,0x4a
c0018a64:	74 0a                	je     c0018a70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018a66:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c0018a6b:	80 fa 4d             	cmp    dl,0x4d
c0018a6e:	75 63                	jne    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a70:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a75:	c3                   	ret    
c0018a76:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c0018a7b:	80 f9 0b             	cmp    cl,0xb
c0018a7e:	75 0a                	jne    c0018a8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a80:	fe ca                	dec    dl
c0018a82:	75 4f                	jne    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a84:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018a89:	c3                   	ret    
c0018a8a:	80 f9 0f             	cmp    cl,0xf
c0018a8d:	75 44                	jne    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8f:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018a94:	80 fa 02             	cmp    dl,0x2
c0018a97:	76 3a                	jbe    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a99:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a9c:	3c 01                	cmp    al,0x1
c0018a9e:	76 0a                	jbe    c0018aaa <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018aa0:	b8 12 b9 02 c0       	mov    eax,0xc002b912
c0018aa5:	80 fa 06             	cmp    dl,0x6
c0018aa8:	75 29                	jne    c0018ad3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aaa:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018aaf:	c3                   	ret    
c0018ab0:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018ab5:	c3                   	ret    
c0018ab6:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018abb:	c3                   	ret    
c0018abc:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018ac1:	c3                   	ret    
c0018ac2:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018ac7:	c3                   	ret    
c0018ac8:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018acd:	c3                   	ret    
c0018ace:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018ad3:	c3                   	ret    

c0018ad4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018ad4:	60                   	pusha  
c0018ad5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ad9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018add:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ae1:	9c                   	pushf  
c0018ae2:	fa                   	cli    
c0018ae3:	0f 09                	wbinvd 
c0018ae5:	0f 30                	wrmsr  
c0018ae7:	9d                   	popf   
c0018ae8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018aec:	89 02                	mov    DWORD PTR [edx],eax
c0018aee:	61                   	popa   
c0018aef:	c3                   	ret    

c0018af0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018af0:	60                   	pusha  
c0018af1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018af5:	9c                   	pushf  
c0018af6:	fa                   	cli    
c0018af7:	0f 09                	wbinvd 
c0018af9:	31 c0                	xor    eax,eax
c0018afb:	31 d2                	xor    edx,edx
c0018afd:	0f 32                	rdmsr  
c0018aff:	9d                   	popf   
c0018b00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b04:	89 02                	mov    DWORD PTR [edx],eax
c0018b06:	61                   	popa   
c0018b07:	c3                   	ret    

c0018b08 <CPU::AMD_K6_writeback(int, int, int)>:
c0018b08:	56                   	push   esi
c0018b09:	53                   	push   ebx
c0018b0a:	83 ec 10             	sub    esp,0x10
c0018b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b11:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018b16:	75 5d                	jne    c0018b75 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b18:	83 f8 08             	cmp    eax,0x8
c0018b1b:	75 09                	jne    c0018b26 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018b1d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018b22:	7e 13                	jle    c0018b37 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018b24:	eb 30                	jmp    c0018b56 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b26:	83 f8 06             	cmp    eax,0x6
c0018b29:	7c 4a                	jl     c0018b75 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b2b:	83 f8 07             	cmp    eax,0x7
c0018b2e:	7e 07                	jle    c0018b37 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018b30:	83 f8 09             	cmp    eax,0x9
c0018b33:	74 21                	je     c0018b56 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018b35:	eb 3e                	jmp    c0018b75 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018b37:	89 e6                	mov    esi,esp
c0018b39:	8b 1d 88 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e488
c0018b3f:	56                   	push   esi
c0018b40:	c1 eb 15             	shr    ebx,0x15
c0018b43:	68 82 00 00 c0       	push   0xc0000082
c0018b48:	83 e3 7e             	and    ebx,0x7e
c0018b4b:	e8 a0 ff ff ff       	call   c0018af0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b50:	56                   	push   esi
c0018b51:	6a 00                	push   0x0
c0018b53:	53                   	push   ebx
c0018b54:	eb 12                	jmp    c0018b68 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018b56:	89 e3                	mov    ebx,esp
c0018b58:	53                   	push   ebx
c0018b59:	68 82 00 00 c0       	push   0xc0000082
c0018b5e:	e8 8d ff ff ff       	call   c0018af0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018b63:	53                   	push   ebx
c0018b64:	6a 00                	push   0x0
c0018b66:	6a 00                	push   0x0
c0018b68:	68 82 00 00 c0       	push   0xc0000082
c0018b6d:	e8 62 ff ff ff       	call   c0018ad4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018b72:	83 c4 18             	add    esp,0x18
c0018b75:	83 c4 10             	add    esp,0x10
c0018b78:	5b                   	pop    ebx
c0018b79:	5e                   	pop    esi
c0018b7a:	c3                   	ret    
c0018b7b:	90                   	nop

c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b7c:	55                   	push   ebp
c0018b7d:	57                   	push   edi
c0018b7e:	56                   	push   esi
c0018b7f:	53                   	push   ebx
c0018b80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b88:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b8c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b90:	39 05 60 d9 02 c0    	cmp    DWORD PTR ds:0xc002d960,eax
c0018b96:	75 23                	jne    c0018bbb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b98:	a1 8c 0f 03 c0       	mov    eax,ds:0xc0030f8c
c0018b9d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ba1:	89 06                	mov    DWORD PTR [esi],eax
c0018ba3:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0018ba8:	89 07                	mov    DWORD PTR [edi],eax
c0018baa:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c0018baf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018bb2:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c0018bb7:	89 02                	mov    DWORD PTR [edx],eax
c0018bb9:	eb 3f                	jmp    c0018bfa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018bbb:	31 c9                	xor    ecx,ecx
c0018bbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bc1:	0f a2                	cpuid  
c0018bc3:	89 06                	mov    DWORD PTR [esi],eax
c0018bc5:	89 1f                	mov    DWORD PTR [edi],ebx
c0018bc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018bcb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018bce:	89 10                	mov    DWORD PTR [eax],edx
c0018bd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bd4:	a3 60 d9 02 c0       	mov    ds:0xc002d960,eax
c0018bd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0018bdb:	a3 8c 0f 03 c0       	mov    ds:0xc0030f8c,eax
c0018be0:	8b 07                	mov    eax,DWORD PTR [edi]
c0018be2:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c0018be7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018bea:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c0018bef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bf5:	a3 80 0f 03 c0       	mov    ds:0xc0030f80,eax
c0018bfa:	5b                   	pop    ebx
c0018bfb:	5e                   	pop    esi
c0018bfc:	5f                   	pop    edi
c0018bfd:	5d                   	pop    ebp
c0018bfe:	c3                   	ret    
c0018bff:	90                   	nop

c0018c00 <CPU::cpuidCheckEDX(unsigned int)>:
c0018c00:	83 ec 10             	sub    esp,0x10
c0018c03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c07:	50                   	push   eax
c0018c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c0c:	50                   	push   eax
c0018c0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c11:	50                   	push   eax
c0018c12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c16:	50                   	push   eax
c0018c17:	6a 01                	push   0x1
c0018c19:	e8 5e ff ff ff       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c22:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018c26:	0f 95 c0             	setne  al
c0018c29:	83 c4 24             	add    esp,0x24
c0018c2c:	c3                   	ret    
c0018c2d:	90                   	nop

c0018c2e <CPU::cpuidCheckECX(unsigned int)>:
c0018c2e:	83 ec 10             	sub    esp,0x10
c0018c31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c35:	50                   	push   eax
c0018c36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c3a:	50                   	push   eax
c0018c3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c3f:	50                   	push   eax
c0018c40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c44:	50                   	push   eax
c0018c45:	6a 01                	push   0x1
c0018c47:	e8 30 ff ff ff       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c50:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c54:	0f 95 c0             	setne  al
c0018c57:	83 c4 24             	add    esp,0x24
c0018c5a:	c3                   	ret    
c0018c5b:	90                   	nop

c0018c5c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018c5c:	83 ec 10             	sub    esp,0x10
c0018c5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c63:	50                   	push   eax
c0018c64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c68:	50                   	push   eax
c0018c69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c6d:	50                   	push   eax
c0018c6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c72:	50                   	push   eax
c0018c73:	6a 07                	push   0x7
c0018c75:	e8 02 ff ff ff       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c7e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c82:	0f 95 c0             	setne  al
c0018c85:	83 c4 24             	add    esp,0x24
c0018c88:	c3                   	ret    
c0018c89:	90                   	nop

c0018c8a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c8a:	83 ec 10             	sub    esp,0x10
c0018c8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c91:	50                   	push   eax
c0018c92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c96:	50                   	push   eax
c0018c97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c9b:	50                   	push   eax
c0018c9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ca0:	50                   	push   eax
c0018ca1:	6a 07                	push   0x7
c0018ca3:	e8 d4 fe ff ff       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ca8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cac:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018cb0:	0f 95 c0             	setne  al
c0018cb3:	83 c4 24             	add    esp,0x24
c0018cb6:	c3                   	ret    
c0018cb7:	90                   	nop

c0018cb8 <CPU::CPU()>:
c0018cb8:	83 ec 0c             	sub    esp,0xc
c0018cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cbf:	83 ec 08             	sub    esp,0x8
c0018cc2:	68 12 b9 02 c0       	push   0xc002b912
c0018cc7:	50                   	push   eax
c0018cc8:	e8 f3 b6 ff ff       	call   c00143c0 <Device::Device(char const*)>
c0018ccd:	83 c4 10             	add    esp,0x10
c0018cd0:	ba ec b9 02 c0       	mov    edx,0xc002b9ec
c0018cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd9:	89 10                	mov    DWORD PTR [eax],edx
c0018cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cdf:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ced:	05 78 01 00 00       	add    eax,0x178
c0018cf2:	83 ec 0c             	sub    esp,0xc
c0018cf5:	50                   	push   eax
c0018cf6:	e8 65 63 ff ff       	call   c000f060 <GDT::GDT()>
c0018cfb:	83 c4 10             	add    esp,0x10
c0018cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d02:	05 7c 09 00 00       	add    eax,0x97c
c0018d07:	83 ec 0c             	sub    esp,0xc
c0018d0a:	50                   	push   eax
c0018d0b:	e8 b2 65 ff ff       	call   c000f2c2 <IDT::IDT()>
c0018d10:	83 c4 10             	add    esp,0x10
c0018d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d17:	05 7c 11 00 00       	add    eax,0x117c
c0018d1c:	83 ec 0c             	sub    esp,0xc
c0018d1f:	50                   	push   eax
c0018d20:	e8 db 85 ff ff       	call   c0011300 <TSS::TSS()>
c0018d25:	83 c4 10             	add    esp,0x10
c0018d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d2c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d37:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018d41:	90                   	nop
c0018d42:	83 c4 0c             	add    esp,0xc
c0018d45:	c3                   	ret    

c0018d46 <CPU::displayFeatures()>:
c0018d46:	53                   	push   ebx
c0018d47:	83 ec 10             	sub    esp,0x10
c0018d4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d4e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018d54:	68 20 b6 02 c0       	push   0xc002b620
c0018d59:	e8 45 a0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018d5e:	59                   	pop    ecx
c0018d5f:	58                   	pop    eax
c0018d60:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018d66:	50                   	push   eax
c0018d67:	68 31 b6 02 c0       	push   0xc002b631
c0018d6c:	e8 32 a0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018d71:	58                   	pop    eax
c0018d72:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d78:	5a                   	pop    edx
c0018d79:	c1 e8 0e             	shr    eax,0xe
c0018d7c:	0f b6 c0             	movzx  eax,al
c0018d7f:	50                   	push   eax
c0018d80:	68 42 b6 02 c0       	push   0xc002b642
c0018d85:	e8 19 a0 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018d8a:	59                   	pop    ecx
c0018d8b:	58                   	pop    eax
c0018d8c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d92:	66 c1 e8 06          	shr    ax,0x6
c0018d96:	0f b6 c0             	movzx  eax,al
c0018d99:	50                   	push   eax
c0018d9a:	68 53 b6 02 c0       	push   0xc002b653
c0018d9f:	e8 ff 9f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018da4:	c7 04 24 00 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb00
c0018dab:	e8 f3 9f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018db0:	83 c4 10             	add    esp,0x10
c0018db3:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018db8:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018dbf:	74 05                	je     c0018dc6 <CPU::displayFeatures()+0x80>
c0018dc1:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018dc6:	52                   	push   edx
c0018dc7:	52                   	push   edx
c0018dc8:	50                   	push   eax
c0018dc9:	68 64 b6 02 c0       	push   0xc002b664
c0018dce:	e8 d0 9f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018dd3:	83 c4 10             	add    esp,0x10
c0018dd6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ddb:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018de2:	78 05                	js     c0018de9 <CPU::displayFeatures()+0xa3>
c0018de4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018de9:	51                   	push   ecx
c0018dea:	51                   	push   ecx
c0018deb:	50                   	push   eax
c0018dec:	68 7b b6 02 c0       	push   0xc002b67b
c0018df1:	e8 ad 9f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018df6:	83 c4 10             	add    esp,0x10
c0018df9:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018dfe:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018e05:	75 05                	jne    c0018e0c <CPU::displayFeatures()+0xc6>
c0018e07:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018e0c:	52                   	push   edx
c0018e0d:	52                   	push   edx
c0018e0e:	50                   	push   eax
c0018e0f:	68 92 b6 02 c0       	push   0xc002b692
c0018e14:	e8 8a 9f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018e19:	83 c4 10             	add    esp,0x10
c0018e1c:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018e21:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018e28:	75 05                	jne    c0018e2f <CPU::displayFeatures()+0xe9>
c0018e2a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018e2f:	51                   	push   ecx
c0018e30:	51                   	push   ecx
c0018e31:	50                   	push   eax
c0018e32:	68 a9 b6 02 c0       	push   0xc002b6a9
c0018e37:	e8 67 9f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018e3c:	83 c4 10             	add    esp,0x10
c0018e3f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018e44:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018e4b:	75 05                	jne    c0018e52 <CPU::displayFeatures()+0x10c>
c0018e4d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018e52:	52                   	push   edx
c0018e53:	52                   	push   edx
c0018e54:	50                   	push   eax
c0018e55:	68 c0 b6 02 c0       	push   0xc002b6c0
c0018e5a:	e8 44 9f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018e5f:	83 c4 10             	add    esp,0x10
c0018e62:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018e67:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018e6e:	75 05                	jne    c0018e75 <CPU::displayFeatures()+0x12f>
c0018e70:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018e75:	51                   	push   ecx
c0018e76:	51                   	push   ecx
c0018e77:	50                   	push   eax
c0018e78:	68 d7 b6 02 c0       	push   0xc002b6d7
c0018e7d:	e8 21 9f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018e82:	83 c4 10             	add    esp,0x10
c0018e85:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018e8a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018e91:	75 05                	jne    c0018e98 <CPU::displayFeatures()+0x152>
c0018e93:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018e98:	52                   	push   edx
c0018e99:	52                   	push   edx
c0018e9a:	50                   	push   eax
c0018e9b:	68 ee b6 02 c0       	push   0xc002b6ee
c0018ea0:	e8 fe 9e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018ea5:	83 c4 10             	add    esp,0x10
c0018ea8:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ead:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018eb4:	75 05                	jne    c0018ebb <CPU::displayFeatures()+0x175>
c0018eb6:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ebb:	51                   	push   ecx
c0018ebc:	51                   	push   ecx
c0018ebd:	50                   	push   eax
c0018ebe:	68 05 b7 02 c0       	push   0xc002b705
c0018ec3:	e8 db 9e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018ec8:	83 c4 10             	add    esp,0x10
c0018ecb:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ed0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018ed7:	75 05                	jne    c0018ede <CPU::displayFeatures()+0x198>
c0018ed9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ede:	52                   	push   edx
c0018edf:	52                   	push   edx
c0018ee0:	50                   	push   eax
c0018ee1:	68 1c b7 02 c0       	push   0xc002b71c
c0018ee6:	e8 b8 9e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018eeb:	83 c4 10             	add    esp,0x10
c0018eee:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ef3:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018efa:	75 05                	jne    c0018f01 <CPU::displayFeatures()+0x1bb>
c0018efc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f01:	51                   	push   ecx
c0018f02:	51                   	push   ecx
c0018f03:	50                   	push   eax
c0018f04:	68 33 b7 02 c0       	push   0xc002b733
c0018f09:	e8 95 9e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018f0e:	83 c4 10             	add    esp,0x10
c0018f11:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f16:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018f1d:	75 05                	jne    c0018f24 <CPU::displayFeatures()+0x1de>
c0018f1f:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f24:	52                   	push   edx
c0018f25:	52                   	push   edx
c0018f26:	50                   	push   eax
c0018f27:	68 4a b7 02 c0       	push   0xc002b74a
c0018f2c:	e8 72 9e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f39:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018f40:	75 05                	jne    c0018f47 <CPU::displayFeatures()+0x201>
c0018f42:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f47:	51                   	push   ecx
c0018f48:	51                   	push   ecx
c0018f49:	50                   	push   eax
c0018f4a:	68 61 b7 02 c0       	push   0xc002b761
c0018f4f:	e8 4f 9e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018f54:	83 c4 10             	add    esp,0x10
c0018f57:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f5c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018f63:	75 05                	jne    c0018f6a <CPU::displayFeatures()+0x224>
c0018f65:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f6a:	52                   	push   edx
c0018f6b:	52                   	push   edx
c0018f6c:	50                   	push   eax
c0018f6d:	68 78 b7 02 c0       	push   0xc002b778
c0018f72:	e8 2c 9e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018f77:	83 c4 10             	add    esp,0x10
c0018f7a:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f7f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018f86:	78 05                	js     c0018f8d <CPU::displayFeatures()+0x247>
c0018f88:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f8d:	51                   	push   ecx
c0018f8e:	51                   	push   ecx
c0018f8f:	50                   	push   eax
c0018f90:	68 8f b7 02 c0       	push   0xc002b78f
c0018f95:	e8 09 9e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018f9a:	83 c4 10             	add    esp,0x10
c0018f9d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fa2:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018fa9:	75 05                	jne    c0018fb0 <CPU::displayFeatures()+0x26a>
c0018fab:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fb0:	52                   	push   edx
c0018fb1:	52                   	push   edx
c0018fb2:	50                   	push   eax
c0018fb3:	68 a6 b7 02 c0       	push   0xc002b7a6
c0018fb8:	e8 e6 9d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0018fbd:	83 c4 18             	add    esp,0x18
c0018fc0:	5b                   	pop    ebx
c0018fc1:	c3                   	ret    

c0018fc2 <CPU::detectFeatures()>:
c0018fc2:	55                   	push   ebp
c0018fc3:	57                   	push   edi
c0018fc4:	56                   	push   esi
c0018fc5:	53                   	push   ebx
c0018fc6:	83 ec 50             	sub    esp,0x50
c0018fc9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018fcd:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018fd7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018fde:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018fe4:	6a 0d                	push   0xd
c0018fe6:	6a 00                	push   0x0
c0018fe8:	57                   	push   edi
c0018fe9:	e8 92 77 fe ff       	call   c0000780 <memset>
c0018fee:	83 c4 10             	add    esp,0x10
c0018ff1:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0018ff6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018ffd:	0f 84 20 09 00 00    	je     c0019923 <CPU::detectFeatures()+0x961>
c0019003:	83 ec 0c             	sub    esp,0xc
c0019006:	6a 10                	push   0x10
c0019008:	e8 f3 fb ff ff       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c001900d:	83 e0 01             	and    eax,0x1
c0019010:	8d 14 00             	lea    edx,[eax+eax*1]
c0019013:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019019:	83 e0 fd             	and    eax,0xfffffffd
c001901c:	09 d0                	or     eax,edx
c001901e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019024:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001902b:	e8 d0 fb ff ff       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c0019030:	83 e0 01             	and    eax,0x1
c0019033:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001903a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019040:	83 e0 fb             	and    eax,0xfffffffb
c0019043:	09 d0                	or     eax,edx
c0019045:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001904b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019052:	e8 a9 fb ff ff       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c0019057:	83 e0 01             	and    eax,0x1
c001905a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019061:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019067:	83 e0 f7             	and    eax,0xfffffff7
c001906a:	09 d0                	or     eax,edx
c001906c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019072:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019079:	e8 82 fb ff ff       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c001907e:	83 e0 01             	and    eax,0x1
c0019081:	c1 e0 04             	shl    eax,0x4
c0019084:	88 c2                	mov    dl,al
c0019086:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001908c:	83 e0 ef             	and    eax,0xffffffef
c001908f:	09 d0                	or     eax,edx
c0019091:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019097:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001909e:	e8 5d fb ff ff       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c00190a3:	83 e0 01             	and    eax,0x1
c00190a6:	c1 e0 05             	shl    eax,0x5
c00190a9:	88 c2                	mov    dl,al
c00190ab:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190b1:	83 e0 df             	and    eax,0xffffffdf
c00190b4:	09 d0                	or     eax,edx
c00190b6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190bc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00190c3:	e8 38 fb ff ff       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c00190c8:	83 e0 01             	and    eax,0x1
c00190cb:	8d 14 00             	lea    edx,[eax+eax*1]
c00190ce:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190d4:	83 e0 fd             	and    eax,0xfffffffd
c00190d7:	09 d0                	or     eax,edx
c00190d9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190df:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00190e6:	e8 15 fb ff ff       	call   c0018c00 <CPU::cpuidCheckEDX(unsigned int)>
c00190eb:	83 e0 01             	and    eax,0x1
c00190ee:	c1 e0 06             	shl    eax,0x6
c00190f1:	88 c2                	mov    dl,al
c00190f3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190f9:	83 e0 bf             	and    eax,0xffffffbf
c00190fc:	09 d0                	or     eax,edx
c00190fe:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019104:	58                   	pop    eax
c0019105:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019109:	56                   	push   esi
c001910a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001910e:	55                   	push   ebp
c001910f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019113:	50                   	push   eax
c0019114:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019118:	52                   	push   edx
c0019119:	6a 00                	push   0x0
c001911b:	e8 5c fa ff ff       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019120:	83 c4 1c             	add    esp,0x1c
c0019123:	6a 04                	push   0x4
c0019125:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019129:	50                   	push   eax
c001912a:	57                   	push   edi
c001912b:	e8 1c 76 fe ff       	call   c000074c <memcpy>
c0019130:	83 c4 0c             	add    esp,0xc
c0019133:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019139:	6a 04                	push   0x4
c001913b:	56                   	push   esi
c001913c:	50                   	push   eax
c001913d:	e8 0a 76 fe ff       	call   c000074c <memcpy>
c0019142:	83 c4 0c             	add    esp,0xc
c0019145:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001914b:	6a 04                	push   0x4
c001914d:	55                   	push   ebp
c001914e:	50                   	push   eax
c001914f:	e8 f8 75 fe ff       	call   c000074c <memcpy>
c0019154:	58                   	pop    eax
c0019155:	5a                   	pop    edx
c0019156:	68 bd b7 02 c0       	push   0xc002b7bd
c001915b:	57                   	push   edi
c001915c:	e8 67 77 fe ff       	call   c00008c8 <strcmp>
c0019161:	83 c4 10             	add    esp,0x10
c0019164:	85 c0                	test   eax,eax
c0019166:	75 0f                	jne    c0019177 <CPU::detectFeatures()+0x1b5>
c0019168:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019172:	e9 22 02 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c0019177:	50                   	push   eax
c0019178:	50                   	push   eax
c0019179:	68 ca b7 02 c0       	push   0xc002b7ca
c001917e:	57                   	push   edi
c001917f:	e8 44 77 fe ff       	call   c00008c8 <strcmp>
c0019184:	83 c4 10             	add    esp,0x10
c0019187:	85 c0                	test   eax,eax
c0019189:	74 dd                	je     c0019168 <CPU::detectFeatures()+0x1a6>
c001918b:	51                   	push   ecx
c001918c:	51                   	push   ecx
c001918d:	68 d7 b7 02 c0       	push   0xc002b7d7
c0019192:	57                   	push   edi
c0019193:	e8 30 77 fe ff       	call   c00008c8 <strcmp>
c0019198:	83 c4 10             	add    esp,0x10
c001919b:	85 c0                	test   eax,eax
c001919d:	74 2a                	je     c00191c9 <CPU::detectFeatures()+0x207>
c001919f:	52                   	push   edx
c00191a0:	52                   	push   edx
c00191a1:	68 e4 b7 02 c0       	push   0xc002b7e4
c00191a6:	57                   	push   edi
c00191a7:	e8 1c 77 fe ff       	call   c00008c8 <strcmp>
c00191ac:	83 c4 10             	add    esp,0x10
c00191af:	85 c0                	test   eax,eax
c00191b1:	74 16                	je     c00191c9 <CPU::detectFeatures()+0x207>
c00191b3:	50                   	push   eax
c00191b4:	50                   	push   eax
c00191b5:	68 f1 b7 02 c0       	push   0xc002b7f1
c00191ba:	57                   	push   edi
c00191bb:	e8 08 77 fe ff       	call   c00008c8 <strcmp>
c00191c0:	83 c4 10             	add    esp,0x10
c00191c3:	85 c0                	test   eax,eax
c00191c5:	74 48                	je     c001920f <CPU::detectFeatures()+0x24d>
c00191c7:	eb 0f                	jmp    c00191d8 <CPU::detectFeatures()+0x216>
c00191c9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00191d3:	e9 c1 01 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c00191d8:	50                   	push   eax
c00191d9:	50                   	push   eax
c00191da:	68 fe b7 02 c0       	push   0xc002b7fe
c00191df:	57                   	push   edi
c00191e0:	e8 e3 76 fe ff       	call   c00008c8 <strcmp>
c00191e5:	83 c4 10             	add    esp,0x10
c00191e8:	85 c0                	test   eax,eax
c00191ea:	74 23                	je     c001920f <CPU::detectFeatures()+0x24d>
c00191ec:	50                   	push   eax
c00191ed:	50                   	push   eax
c00191ee:	68 0b b8 02 c0       	push   0xc002b80b
c00191f3:	57                   	push   edi
c00191f4:	e8 cf 76 fe ff       	call   c00008c8 <strcmp>
c00191f9:	83 c4 10             	add    esp,0x10
c00191fc:	85 c0                	test   eax,eax
c00191fe:	75 1e                	jne    c001921e <CPU::detectFeatures()+0x25c>
c0019200:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001920a:	e9 8a 01 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c001920f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019219:	e9 7b 01 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c001921e:	50                   	push   eax
c001921f:	50                   	push   eax
c0019220:	68 18 b8 02 c0       	push   0xc002b818
c0019225:	57                   	push   edi
c0019226:	e8 9d 76 fe ff       	call   c00008c8 <strcmp>
c001922b:	83 c4 10             	add    esp,0x10
c001922e:	85 c0                	test   eax,eax
c0019230:	75 0f                	jne    c0019241 <CPU::detectFeatures()+0x27f>
c0019232:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001923c:	e9 58 01 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c0019241:	50                   	push   eax
c0019242:	50                   	push   eax
c0019243:	68 d7 b7 02 c0       	push   0xc002b7d7
c0019248:	57                   	push   edi
c0019249:	e8 7a 76 fe ff       	call   c00008c8 <strcmp>
c001924e:	83 c4 10             	add    esp,0x10
c0019251:	85 c0                	test   eax,eax
c0019253:	75 0f                	jne    c0019264 <CPU::detectFeatures()+0x2a2>
c0019255:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001925f:	e9 35 01 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c0019264:	50                   	push   eax
c0019265:	50                   	push   eax
c0019266:	68 25 b8 02 c0       	push   0xc002b825
c001926b:	57                   	push   edi
c001926c:	e8 57 76 fe ff       	call   c00008c8 <strcmp>
c0019271:	83 c4 10             	add    esp,0x10
c0019274:	85 c0                	test   eax,eax
c0019276:	75 0f                	jne    c0019287 <CPU::detectFeatures()+0x2c5>
c0019278:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019282:	e9 12 01 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c0019287:	51                   	push   ecx
c0019288:	51                   	push   ecx
c0019289:	68 32 b8 02 c0       	push   0xc002b832
c001928e:	57                   	push   edi
c001928f:	e8 34 76 fe ff       	call   c00008c8 <strcmp>
c0019294:	83 c4 10             	add    esp,0x10
c0019297:	85 c0                	test   eax,eax
c0019299:	75 0f                	jne    c00192aa <CPU::detectFeatures()+0x2e8>
c001929b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00192a5:	e9 ef 00 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c00192aa:	52                   	push   edx
c00192ab:	52                   	push   edx
c00192ac:	68 3f b8 02 c0       	push   0xc002b83f
c00192b1:	57                   	push   edi
c00192b2:	e8 11 76 fe ff       	call   c00008c8 <strcmp>
c00192b7:	83 c4 10             	add    esp,0x10
c00192ba:	85 c0                	test   eax,eax
c00192bc:	75 0f                	jne    c00192cd <CPU::detectFeatures()+0x30b>
c00192be:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00192c8:	e9 cc 00 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c00192cd:	50                   	push   eax
c00192ce:	50                   	push   eax
c00192cf:	68 4c b8 02 c0       	push   0xc002b84c
c00192d4:	57                   	push   edi
c00192d5:	e8 ee 75 fe ff       	call   c00008c8 <strcmp>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	85 c0                	test   eax,eax
c00192df:	75 0f                	jne    c00192f0 <CPU::detectFeatures()+0x32e>
c00192e1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00192eb:	e9 a9 00 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c00192f0:	50                   	push   eax
c00192f1:	50                   	push   eax
c00192f2:	68 59 b8 02 c0       	push   0xc002b859
c00192f7:	57                   	push   edi
c00192f8:	e8 cb 75 fe ff       	call   c00008c8 <strcmp>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	85 c0                	test   eax,eax
c0019302:	75 0f                	jne    c0019313 <CPU::detectFeatures()+0x351>
c0019304:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001930e:	e9 86 00 00 00       	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c0019313:	50                   	push   eax
c0019314:	50                   	push   eax
c0019315:	68 66 b8 02 c0       	push   0xc002b866
c001931a:	57                   	push   edi
c001931b:	e8 a8 75 fe ff       	call   c00008c8 <strcmp>
c0019320:	83 c4 10             	add    esp,0x10
c0019323:	85 c0                	test   eax,eax
c0019325:	75 0c                	jne    c0019333 <CPU::detectFeatures()+0x371>
c0019327:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019331:	eb 66                	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c0019333:	50                   	push   eax
c0019334:	50                   	push   eax
c0019335:	68 73 b8 02 c0       	push   0xc002b873
c001933a:	57                   	push   edi
c001933b:	e8 88 75 fe ff       	call   c00008c8 <strcmp>
c0019340:	83 c4 10             	add    esp,0x10
c0019343:	85 c0                	test   eax,eax
c0019345:	75 0c                	jne    c0019353 <CPU::detectFeatures()+0x391>
c0019347:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019351:	eb 46                	jmp    c0019399 <CPU::detectFeatures()+0x3d7>
c0019353:	50                   	push   eax
c0019354:	50                   	push   eax
c0019355:	68 80 b8 02 c0       	push   0xc002b880
c001935a:	57                   	push   edi
c001935b:	e8 68 75 fe ff       	call   c00008c8 <strcmp>
c0019360:	83 c4 10             	add    esp,0x10
c0019363:	85 c0                	test   eax,eax
c0019365:	74 e0                	je     c0019347 <CPU::detectFeatures()+0x385>
c0019367:	50                   	push   eax
c0019368:	50                   	push   eax
c0019369:	68 8d b8 02 c0       	push   0xc002b88d
c001936e:	57                   	push   edi
c001936f:	e8 54 75 fe ff       	call   c00008c8 <strcmp>
c0019374:	83 c4 10             	add    esp,0x10
c0019377:	85 c0                	test   eax,eax
c0019379:	74 cc                	je     c0019347 <CPU::detectFeatures()+0x385>
c001937b:	51                   	push   ecx
c001937c:	51                   	push   ecx
c001937d:	68 9a b8 02 c0       	push   0xc002b89a
c0019382:	57                   	push   edi
c0019383:	e8 40 75 fe ff       	call   c00008c8 <strcmp>
c0019388:	83 c4 10             	add    esp,0x10
c001938b:	85 c0                	test   eax,eax
c001938d:	74 b8                	je     c0019347 <CPU::detectFeatures()+0x385>
c001938f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019399:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001939e:	0f 86 be 00 00 00    	jbe    c0019462 <CPU::detectFeatures()+0x4a0>
c00193a4:	83 ec 0c             	sub    esp,0xc
c00193a7:	68 80 00 00 00       	push   0x80
c00193ac:	e8 ab f8 ff ff       	call   c0018c5c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193b1:	83 e0 01             	and    eax,0x1
c00193b4:	c1 e0 06             	shl    eax,0x6
c00193b7:	88 c2                	mov    dl,al
c00193b9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193bf:	83 e0 bf             	and    eax,0xffffffbf
c00193c2:	09 d0                	or     eax,edx
c00193c4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193ca:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00193d1:	e8 86 f8 ff ff       	call   c0018c5c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193d6:	83 e0 01             	and    eax,0x1
c00193d9:	c1 e0 04             	shl    eax,0x4
c00193dc:	88 c2                	mov    dl,al
c00193de:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00193e4:	83 e0 ef             	and    eax,0xffffffef
c00193e7:	09 d0                	or     eax,edx
c00193e9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193ef:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00193f6:	e8 61 f8 ff ff       	call   c0018c5c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00193fb:	c1 e0 07             	shl    eax,0x7
c00193fe:	88 c2                	mov    dl,al
c0019400:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019406:	83 e0 7f             	and    eax,0x7f
c0019409:	09 d0                	or     eax,edx
c001940b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019411:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019418:	e8 6d f8 ff ff       	call   c0018c8a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001941d:	83 e0 01             	and    eax,0x1
c0019420:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019427:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001942d:	83 e0 f7             	and    eax,0xfffffff7
c0019430:	09 d0                	or     eax,edx
c0019432:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019438:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001943f:	e8 46 f8 ff ff       	call   c0018c8a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019444:	83 c4 10             	add    esp,0x10
c0019447:	83 e0 01             	and    eax,0x1
c001944a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019451:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019457:	83 e0 fb             	and    eax,0xfffffffb
c001945a:	09 d0                	or     eax,edx
c001945c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019462:	83 ec 0c             	sub    esp,0xc
c0019465:	56                   	push   esi
c0019466:	55                   	push   ebp
c0019467:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001946b:	57                   	push   edi
c001946c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019470:	50                   	push   eax
c0019471:	6a 01                	push   0x1
c0019473:	e8 04 f7 ff ff       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019478:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001947c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019482:	88 ca                	mov    dl,cl
c0019484:	83 e0 f0             	and    eax,0xfffffff0
c0019487:	83 e2 0f             	and    edx,0xf
c001948a:	09 d0                	or     eax,edx
c001948c:	88 ca                	mov    dl,cl
c001948e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019494:	c0 ea 04             	shr    dl,0x4
c0019497:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001949b:	0f b6 c2             	movzx  eax,dl
c001949e:	83 c4 20             	add    esp,0x20
c00194a1:	c1 e0 06             	shl    eax,0x6
c00194a4:	89 c5                	mov    ebp,eax
c00194a6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194ac:	66 25 3f c0          	and    ax,0xc03f
c00194b0:	09 e8                	or     eax,ebp
c00194b2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194b9:	89 c8                	mov    eax,ecx
c00194bb:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00194c1:	c1 e8 08             	shr    eax,0x8
c00194c4:	83 e2 3f             	and    edx,0x3f
c00194c7:	83 e0 0f             	and    eax,0xf
c00194ca:	89 c5                	mov    ebp,eax
c00194cc:	c1 e5 06             	shl    ebp,0x6
c00194cf:	09 d5                	or     ebp,edx
c00194d1:	89 ea                	mov    edx,ebp
c00194d3:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00194d9:	88 c2                	mov    dl,al
c00194db:	c0 ea 02             	shr    dl,0x2
c00194de:	89 d5                	mov    ebp,edx
c00194e0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00194e6:	83 e2 c0             	and    edx,0xffffffc0
c00194e9:	09 d5                	or     ebp,edx
c00194eb:	89 ea                	mov    edx,ebp
c00194ed:	89 cd                	mov    ebp,ecx
c00194ef:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00194f5:	c1 ed 0c             	shr    ebp,0xc
c00194f8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00194fe:	83 e5 03             	and    ebp,0x3
c0019501:	83 e2 cf             	and    edx,0xffffffcf
c0019504:	c1 e5 04             	shl    ebp,0x4
c0019507:	09 d5                	or     ebp,edx
c0019509:	3c 06                	cmp    al,0x6
c001950b:	89 ea                	mov    edx,ebp
c001950d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019513:	74 04                	je     c0019519 <CPU::detectFeatures()+0x557>
c0019515:	3c 0f                	cmp    al,0xf
c0019517:	75 5c                	jne    c0019575 <CPU::detectFeatures()+0x5b3>
c0019519:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001951d:	89 cd                	mov    ebp,ecx
c001951f:	c1 ed 10             	shr    ebp,0x10
c0019522:	c1 e5 04             	shl    ebp,0x4
c0019525:	09 ea                	or     edx,ebp
c0019527:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001952d:	0f b6 d2             	movzx  edx,dl
c0019530:	66 81 e5 3f c0       	and    bp,0xc03f
c0019535:	c1 e2 06             	shl    edx,0x6
c0019538:	09 ea                	or     edx,ebp
c001953a:	3c 0f                	cmp    al,0xf
c001953c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019543:	75 30                	jne    c0019575 <CPU::detectFeatures()+0x5b3>
c0019545:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001954b:	c1 e9 14             	shr    ecx,0x14
c001954e:	83 e0 3f             	and    eax,0x3f
c0019551:	83 c1 0f             	add    ecx,0xf
c0019554:	88 ca                	mov    dl,cl
c0019556:	c0 e9 02             	shr    cl,0x2
c0019559:	c1 e2 06             	shl    edx,0x6
c001955c:	09 d0                	or     eax,edx
c001955e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019564:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001956a:	83 e0 c0             	and    eax,0xffffffc0
c001956d:	09 c1                	or     ecx,eax
c001956f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019575:	83 ec 0c             	sub    esp,0xc
c0019578:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001957f:	56                   	push   esi
c0019580:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019584:	50                   	push   eax
c0019585:	57                   	push   edi
c0019586:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001958a:	55                   	push   ebp
c001958b:	68 00 00 00 80       	push   0x80000000
c0019590:	e8 e7 f5 ff ff       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019595:	83 c4 20             	add    esp,0x20
c0019598:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00195a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195a4:	76 1e                	jbe    c00195c4 <CPU::detectFeatures()+0x602>
c00195a6:	83 ec 0c             	sub    esp,0xc
c00195a9:	56                   	push   esi
c00195aa:	50                   	push   eax
c00195ab:	57                   	push   edi
c00195ac:	55                   	push   ebp
c00195ad:	68 01 00 00 80       	push   0x80000001
c00195b2:	e8 c5 f5 ff ff       	call   c0018b7c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195b7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00195c1:	83 c4 20             	add    esp,0x20
c00195c4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00195ca:	83 f8 01             	cmp    eax,0x1
c00195cd:	75 6f                	jne    c001963e <CPU::detectFeatures()+0x67c>
c00195cf:	51                   	push   ecx
c00195d0:	51                   	push   ecx
c00195d1:	68 a6 b8 02 c0       	push   0xc002b8a6
c00195d6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195da:	56                   	push   esi
c00195db:	e8 5c 72 fe ff       	call   c000083c <strcpy>
c00195e0:	5f                   	pop    edi
c00195e1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195e7:	5d                   	pop    ebp
c00195e8:	66 c1 e8 06          	shr    ax,0x6
c00195ec:	0f b6 c0             	movzx  eax,al
c00195ef:	50                   	push   eax
c00195f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195f6:	c1 e8 0e             	shr    eax,0xe
c00195f9:	0f b6 c0             	movzx  eax,al
c00195fc:	50                   	push   eax
c00195fd:	e8 24 f2 ff ff       	call   c0018826 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019602:	5a                   	pop    edx
c0019603:	59                   	pop    ecx
c0019604:	50                   	push   eax
c0019605:	56                   	push   esi
c0019606:	e8 71 73 fe ff       	call   c000097c <strcat>
c001960b:	5f                   	pop    edi
c001960c:	5d                   	pop    ebp
c001960d:	56                   	push   esi
c001960e:	53                   	push   ebx
c001960f:	e8 9e ad ff ff       	call   c00143b2 <Device::setName(char const*)>
c0019614:	58                   	pop    eax
c0019615:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001961b:	5a                   	pop    edx
c001961c:	68 ad b8 02 c0       	push   0xc002b8ad
c0019621:	50                   	push   eax
c0019622:	e8 a1 72 fe ff       	call   c00008c8 <strcmp>
c0019627:	83 c4 10             	add    esp,0x10
c001962a:	85 c0                	test   eax,eax
c001962c:	0f 85 71 03 00 00    	jne    c00199a3 <CPU::detectFeatures()+0x9e1>
c0019632:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019639:	e9 65 03 00 00       	jmp    c00199a3 <CPU::detectFeatures()+0x9e1>
c001963e:	83 f8 02             	cmp    eax,0x2
c0019641:	0f 85 b5 00 00 00    	jne    c00196fc <CPU::detectFeatures()+0x73a>
c0019647:	57                   	push   edi
c0019648:	57                   	push   edi
c0019649:	68 bf b8 02 c0       	push   0xc002b8bf
c001964e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019652:	56                   	push   esi
c0019653:	e8 e4 71 fe ff       	call   c000083c <strcpy>
c0019658:	5d                   	pop    ebp
c0019659:	58                   	pop    eax
c001965a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019660:	66 c1 e8 06          	shr    ax,0x6
c0019664:	0f b6 c0             	movzx  eax,al
c0019667:	50                   	push   eax
c0019668:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001966e:	c1 e8 0e             	shr    eax,0xe
c0019671:	0f b6 c0             	movzx  eax,al
c0019674:	50                   	push   eax
c0019675:	e8 18 f0 ff ff       	call   c0018692 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001967a:	5a                   	pop    edx
c001967b:	59                   	pop    ecx
c001967c:	50                   	push   eax
c001967d:	56                   	push   esi
c001967e:	e8 f9 72 fe ff       	call   c000097c <strcat>
c0019683:	5f                   	pop    edi
c0019684:	5d                   	pop    ebp
c0019685:	56                   	push   esi
c0019686:	53                   	push   ebx
c0019687:	e8 26 ad ff ff       	call   c00143b2 <Device::setName(char const*)>
c001968c:	58                   	pop    eax
c001968d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019693:	5a                   	pop    edx
c0019694:	68 c4 b8 02 c0       	push   0xc002b8c4
c0019699:	50                   	push   eax
c001969a:	e8 29 72 fe ff       	call   c00008c8 <strcmp>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	85 c0                	test   eax,eax
c00196a4:	75 20                	jne    c00196c6 <CPU::detectFeatures()+0x704>
c00196a6:	8b 15 48 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e448
c00196ac:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00196b2:	a8 01                	test   al,0x1
c00196b4:	74 10                	je     c00196c6 <CPU::detectFeatures()+0x704>
c00196b6:	83 e0 fe             	and    eax,0xfffffffe
c00196b9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00196bf:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00196c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196cc:	c1 e8 0e             	shr    eax,0xe
c00196cf:	3c 05                	cmp    al,0x5
c00196d1:	0f 85 cc 02 00 00    	jne    c00199a3 <CPU::detectFeatures()+0x9e1>
c00196d7:	56                   	push   esi
c00196d8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00196de:	83 e0 0f             	and    eax,0xf
c00196e1:	50                   	push   eax
c00196e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196e8:	66 c1 e8 06          	shr    ax,0x6
c00196ec:	0f b6 c0             	movzx  eax,al
c00196ef:	50                   	push   eax
c00196f0:	6a 05                	push   0x5
c00196f2:	e8 11 f4 ff ff       	call   c0018b08 <CPU::AMD_K6_writeback(int, int, int)>
c00196f7:	e9 1f 02 00 00       	jmp    c001991b <CPU::detectFeatures()+0x959>
c00196fc:	8d 50 fd             	lea    edx,[eax-0x3]
c00196ff:	83 fa 01             	cmp    edx,0x1
c0019702:	76 09                	jbe    c001970d <CPU::detectFeatures()+0x74b>
c0019704:	83 f8 06             	cmp    eax,0x6
c0019707:	0f 85 91 01 00 00    	jne    c001989e <CPU::detectFeatures()+0x8dc>
c001970d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019713:	c1 ea 0e             	shr    edx,0xe
c0019716:	80 fa 05             	cmp    dl,0x5
c0019719:	75 7b                	jne    c0019796 <CPU::detectFeatures()+0x7d4>
c001971b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019721:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019726:	66 81 fa 00 01       	cmp    dx,0x100
c001972b:	75 0c                	jne    c0019739 <CPU::detectFeatures()+0x777>
c001972d:	51                   	push   ecx
c001972e:	51                   	push   ecx
c001972f:	68 cb b8 02 c0       	push   0xc002b8cb
c0019734:	e9 dc 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c0019739:	66 81 fa 00 02       	cmp    dx,0x200
c001973e:	75 0c                	jne    c001974c <CPU::detectFeatures()+0x78a>
c0019740:	52                   	push   edx
c0019741:	52                   	push   edx
c0019742:	68 de b8 02 c0       	push   0xc002b8de
c0019747:	e9 c9 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c001974c:	66 81 fa 40 02       	cmp    dx,0x240
c0019751:	75 0c                	jne    c001975f <CPU::detectFeatures()+0x79d>
c0019753:	50                   	push   eax
c0019754:	50                   	push   eax
c0019755:	68 f0 b8 02 c0       	push   0xc002b8f0
c001975a:	e9 b6 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c001975f:	83 f8 06             	cmp    eax,0x6
c0019762:	75 0c                	jne    c0019770 <CPU::detectFeatures()+0x7ae>
c0019764:	50                   	push   eax
c0019765:	50                   	push   eax
c0019766:	68 02 b9 02 c0       	push   0xc002b902
c001976b:	e9 a5 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c0019770:	83 f8 04             	cmp    eax,0x4
c0019773:	75 0c                	jne    c0019781 <CPU::detectFeatures()+0x7bf>
c0019775:	50                   	push   eax
c0019776:	50                   	push   eax
c0019777:	68 0e b9 02 c0       	push   0xc002b90e
c001977c:	e9 94 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c0019781:	83 f8 03             	cmp    eax,0x3
c0019784:	0f 85 19 02 00 00    	jne    c00199a3 <CPU::detectFeatures()+0x9e1>
c001978a:	50                   	push   eax
c001978b:	50                   	push   eax
c001978c:	68 16 b9 02 c0       	push   0xc002b916
c0019791:	e9 7f 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c0019796:	80 fa 06             	cmp    dl,0x6
c0019799:	0f 85 db 00 00 00    	jne    c001987a <CPU::detectFeatures()+0x8b8>
c001979f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197a5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197aa:	66 81 fa 80 01       	cmp    dx,0x180
c00197af:	75 0c                	jne    c00197bd <CPU::detectFeatures()+0x7fb>
c00197b1:	50                   	push   eax
c00197b2:	50                   	push   eax
c00197b3:	68 21 b9 02 c0       	push   0xc002b921
c00197b8:	e9 58 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00197bd:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00197c3:	66 f7 c1 80 ff       	test   cx,0xff80
c00197c8:	75 0c                	jne    c00197d6 <CPU::detectFeatures()+0x814>
c00197ca:	50                   	push   eax
c00197cb:	50                   	push   eax
c00197cc:	68 31 b9 02 c0       	push   0xc002b931
c00197d1:	e9 3f 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00197d6:	66 81 fa 40 02       	cmp    dx,0x240
c00197db:	75 0c                	jne    c00197e9 <CPU::detectFeatures()+0x827>
c00197dd:	55                   	push   ebp
c00197de:	55                   	push   ebp
c00197df:	68 38 b9 02 c0       	push   0xc002b938
c00197e4:	e9 2c 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00197e9:	66 81 fa 80 02       	cmp    dx,0x280
c00197ee:	75 0c                	jne    c00197fc <CPU::detectFeatures()+0x83a>
c00197f0:	57                   	push   edi
c00197f1:	57                   	push   edi
c00197f2:	68 41 b9 02 c0       	push   0xc002b941
c00197f7:	e9 19 01 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00197fc:	66 81 fa 40 03       	cmp    dx,0x340
c0019801:	74 ed                	je     c00197f0 <CPU::detectFeatures()+0x82e>
c0019803:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019808:	75 0c                	jne    c0019816 <CPU::detectFeatures()+0x854>
c001980a:	56                   	push   esi
c001980b:	56                   	push   esi
c001980c:	68 48 b9 02 c0       	push   0xc002b948
c0019811:	e9 ff 00 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x953>
c0019816:	83 f8 06             	cmp    eax,0x6
c0019819:	0f 84 45 ff ff ff    	je     c0019764 <CPU::detectFeatures()+0x7a2>
c001981f:	83 f8 04             	cmp    eax,0x4
c0019822:	0f 84 4d ff ff ff    	je     c0019775 <CPU::detectFeatures()+0x7b3>
c0019828:	83 f8 03             	cmp    eax,0x3
c001982b:	0f 85 72 01 00 00    	jne    c00199a3 <CPU::detectFeatures()+0x9e1>
c0019831:	51                   	push   ecx
c0019832:	51                   	push   ecx
c0019833:	68 51 b9 02 c0       	push   0xc002b951
c0019838:	53                   	push   ebx
c0019839:	e8 74 ab ff ff       	call   c00143b2 <Device::setName(char const*)>
c001983e:	b1 c1                	mov    cl,0xc1
c0019840:	88 c8                	mov    al,cl
c0019842:	e6 22                	out    0x22,al
c0019844:	e4 23                	in     al,0x23
c0019846:	88 c2                	mov    dl,al
c0019848:	88 c8                	mov    al,cl
c001984a:	e6 22                	out    0x22,al
c001984c:	88 d0                	mov    al,dl
c001984e:	83 c8 10             	or     eax,0x10
c0019851:	e6 23                	out    0x23,al
c0019853:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001985a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001985d:	89 d0                	mov    eax,edx
c001985f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019865:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019869:	40                   	inc    eax
c001986a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019870:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019875:	e9 a1 00 00 00       	jmp    c001991b <CPU::detectFeatures()+0x959>
c001987a:	83 f8 06             	cmp    eax,0x6
c001987d:	0f 84 e1 fe ff ff    	je     c0019764 <CPU::detectFeatures()+0x7a2>
c0019883:	83 f8 04             	cmp    eax,0x4
c0019886:	0f 84 e9 fe ff ff    	je     c0019775 <CPU::detectFeatures()+0x7b3>
c001988c:	83 f8 03             	cmp    eax,0x3
c001988f:	0f 85 0e 01 00 00    	jne    c00199a3 <CPU::detectFeatures()+0x9e1>
c0019895:	52                   	push   edx
c0019896:	52                   	push   edx
c0019897:	68 5c b9 02 c0       	push   0xc002b95c
c001989c:	eb 77                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c001989e:	83 f8 07             	cmp    eax,0x7
c00198a1:	75 09                	jne    c00198ac <CPU::detectFeatures()+0x8ea>
c00198a3:	50                   	push   eax
c00198a4:	50                   	push   eax
c00198a5:	68 66 b9 02 c0       	push   0xc002b966
c00198aa:	eb 69                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00198ac:	83 f8 0a             	cmp    eax,0xa
c00198af:	75 09                	jne    c00198ba <CPU::detectFeatures()+0x8f8>
c00198b1:	50                   	push   eax
c00198b2:	50                   	push   eax
c00198b3:	68 71 b9 02 c0       	push   0xc002b971
c00198b8:	eb 5b                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00198ba:	83 f8 0b             	cmp    eax,0xb
c00198bd:	75 09                	jne    c00198c8 <CPU::detectFeatures()+0x906>
c00198bf:	50                   	push   eax
c00198c0:	50                   	push   eax
c00198c1:	68 79 b9 02 c0       	push   0xc002b979
c00198c6:	eb 4d                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00198c8:	83 f8 08             	cmp    eax,0x8
c00198cb:	75 09                	jne    c00198d6 <CPU::detectFeatures()+0x914>
c00198cd:	50                   	push   eax
c00198ce:	50                   	push   eax
c00198cf:	68 82 b9 02 c0       	push   0xc002b982
c00198d4:	eb 3f                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00198d6:	83 f8 09             	cmp    eax,0x9
c00198d9:	75 09                	jne    c00198e4 <CPU::detectFeatures()+0x922>
c00198db:	50                   	push   eax
c00198dc:	50                   	push   eax
c00198dd:	68 8a b9 02 c0       	push   0xc002b98a
c00198e2:	eb 31                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00198e4:	83 f8 05             	cmp    eax,0x5
c00198e7:	75 09                	jne    c00198f2 <CPU::detectFeatures()+0x930>
c00198e9:	50                   	push   eax
c00198ea:	50                   	push   eax
c00198eb:	68 92 b9 02 c0       	push   0xc002b992
c00198f0:	eb 23                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c00198f2:	83 f8 0c             	cmp    eax,0xc
c00198f5:	75 09                	jne    c0019900 <CPU::detectFeatures()+0x93e>
c00198f7:	55                   	push   ebp
c00198f8:	55                   	push   ebp
c00198f9:	68 a0 b9 02 c0       	push   0xc002b9a0
c00198fe:	eb 15                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c0019900:	83 f8 0d             	cmp    eax,0xd
c0019903:	75 09                	jne    c001990e <CPU::detectFeatures()+0x94c>
c0019905:	57                   	push   edi
c0019906:	57                   	push   edi
c0019907:	68 ab b9 02 c0       	push   0xc002b9ab
c001990c:	eb 07                	jmp    c0019915 <CPU::detectFeatures()+0x953>
c001990e:	56                   	push   esi
c001990f:	56                   	push   esi
c0019910:	68 bf b9 02 c0       	push   0xc002b9bf
c0019915:	53                   	push   ebx
c0019916:	e8 97 aa ff ff       	call   c00143b2 <Device::setName(char const*)>
c001991b:	83 c4 10             	add    esp,0x10
c001991e:	e9 80 00 00 00       	jmp    c00199a3 <CPU::detectFeatures()+0x9e1>
c0019923:	51                   	push   ecx
c0019924:	51                   	push   ecx
c0019925:	68 0b b8 02 c0       	push   0xc002b80b
c001992a:	57                   	push   edi
c001992b:	e8 0c 6f fe ff       	call   c000083c <strcpy>
c0019930:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001993a:	e8 6f 69 fe ff       	call   c00002ae <is486>
c001993f:	83 c4 10             	add    esp,0x10
c0019942:	85 c0                	test   eax,eax
c0019944:	74 2b                	je     c0019971 <CPU::detectFeatures()+0x9af>
c0019946:	52                   	push   edx
c0019947:	52                   	push   edx
c0019948:	68 cb b9 02 c0       	push   0xc002b9cb
c001994d:	53                   	push   ebx
c001994e:	e8 5f aa ff ff       	call   c00143b2 <Device::setName(char const*)>
c0019953:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001995a:	0f 20 c0             	mov    eax,cr0
c001995d:	83 e0 14             	and    eax,0x14
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	83 f8 04             	cmp    eax,0x4
c0019966:	75 1f                	jne    c0019987 <CPU::detectFeatures()+0x9c5>
c0019968:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001996f:	eb 32                	jmp    c00199a3 <CPU::detectFeatures()+0x9e1>
c0019971:	50                   	push   eax
c0019972:	50                   	push   eax
c0019973:	68 d6 b9 02 c0       	push   0xc002b9d6
c0019978:	53                   	push   ebx
c0019979:	e8 34 aa ff ff       	call   c00143b2 <Device::setName(char const*)>
c001997e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019985:	eb d3                	jmp    c001995a <CPU::detectFeatures()+0x998>
c0019987:	e8 fd 68 fe ff       	call   c0000289 <hasLegacyFPU>
c001998c:	83 e0 01             	and    eax,0x1
c001998f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019992:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019998:	83 e0 fd             	and    eax,0xfffffffd
c001999b:	09 d0                	or     eax,edx
c001999d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00199a3:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00199aa:	83 c4 4c             	add    esp,0x4c
c00199ad:	5b                   	pop    ebx
c00199ae:	5e                   	pop    esi
c00199af:	5f                   	pop    edi
c00199b0:	5d                   	pop    ebp
c00199b1:	c3                   	ret    

c00199b2 <CPU::setupSMEP()>:
c00199b2:	0f 20 e0             	mov    eax,cr4
c00199b5:	0d 00 00 10 00       	or     eax,0x100000
c00199ba:	0f 22 e0             	mov    cr4,eax
c00199bd:	c3                   	ret    

c00199be <CPU::setupUMIP()>:
c00199be:	0f 20 e0             	mov    eax,cr4
c00199c1:	80 cc 08             	or     ah,0x8
c00199c4:	0f 22 e0             	mov    cr4,eax
c00199c7:	c3                   	ret    

c00199c8 <CPU::setupTSC()>:
c00199c8:	0f 20 e0             	mov    eax,cr4
c00199cb:	83 c8 04             	or     eax,0x4
c00199ce:	0f 22 e0             	mov    cr4,eax
c00199d1:	c3                   	ret    

c00199d2 <CPU::setupLargePages()>:
c00199d2:	0f 20 e0             	mov    eax,cr4
c00199d5:	83 c8 10             	or     eax,0x10
c00199d8:	0f 22 e0             	mov    cr4,eax
c00199db:	c3                   	ret    

c00199dc <CPU::setupPAT()>:
c00199dc:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00199e1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00199e8:	74 2c                	je     c0019a16 <CPU::setupPAT()+0x3a>
c00199ea:	53                   	push   ebx
c00199eb:	83 ec 10             	sub    esp,0x10
c00199ee:	68 77 02 00 00       	push   0x277
c00199f3:	50                   	push   eax
c00199f4:	e8 f7 53 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c00199f9:	83 e2 f8             	and    edx,0xfffffff8
c00199fc:	83 ca 01             	or     edx,0x1
c00199ff:	52                   	push   edx
c0019a00:	50                   	push   eax
c0019a01:	68 77 02 00 00       	push   0x277
c0019a06:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c0019a0c:	e8 0b 54 ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019a11:	83 c4 28             	add    esp,0x28
c0019a14:	5b                   	pop    ebx
c0019a15:	c3                   	ret    
c0019a16:	c3                   	ret    
c0019a17:	90                   	nop

c0019a18 <CPU::setupMTRR()>:
c0019a18:	c3                   	ret    
c0019a19:	90                   	nop

c0019a1a <CPU::setupGlobalPages()>:
c0019a1a:	0f 20 e0             	mov    eax,cr4
c0019a1d:	0c 80                	or     al,0x80
c0019a1f:	0f 22 e0             	mov    cr4,eax
c0019a22:	c3                   	ret    
c0019a23:	90                   	nop

c0019a24 <CPU::allowUsermodeDataAccess()>:
c0019a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a28:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a2f:	74 03                	je     c0019a34 <CPU::allowUsermodeDataAccess()+0x10>
c0019a31:	0f 01 cb             	stac   
c0019a34:	c3                   	ret    
c0019a35:	90                   	nop

c0019a36 <CPU::prohibitUsermodeDataAccess()>:
c0019a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a3a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019a41:	74 03                	je     c0019a46 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019a43:	0f 01 ca             	clac   
c0019a46:	c3                   	ret    
c0019a47:	90                   	nop

c0019a48 <CPU::setupSMAP()>:
c0019a48:	0f 20 e0             	mov    eax,cr4
c0019a4b:	0d 00 00 20 00       	or     eax,0x200000
c0019a50:	0f 22 e0             	mov    cr4,eax
c0019a53:	eb e1                	jmp    c0019a36 <CPU::prohibitUsermodeDataAccess()>
c0019a55:	90                   	nop

c0019a56 <CPU::setupFeatures()>:
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a5d:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019a64:	74 07                	je     c0019a6d <CPU::setupFeatures()+0x17>
c0019a66:	52                   	push   edx
c0019a67:	e8 46 ff ff ff       	call   c00199b2 <CPU::setupSMEP()>
c0019a6c:	58                   	pop    eax
c0019a6d:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019a74:	74 07                	je     c0019a7d <CPU::setupFeatures()+0x27>
c0019a76:	52                   	push   edx
c0019a77:	e8 cc ff ff ff       	call   c0019a48 <CPU::setupSMAP()>
c0019a7c:	58                   	pop    eax
c0019a7d:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019a84:	74 07                	je     c0019a8d <CPU::setupFeatures()+0x37>
c0019a86:	52                   	push   edx
c0019a87:	e8 32 ff ff ff       	call   c00199be <CPU::setupUMIP()>
c0019a8c:	58                   	pop    eax
c0019a8d:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019a94:	74 07                	je     c0019a9d <CPU::setupFeatures()+0x47>
c0019a96:	52                   	push   edx
c0019a97:	e8 2c ff ff ff       	call   c00199c8 <CPU::setupTSC()>
c0019a9c:	58                   	pop    eax
c0019a9d:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019aa4:	74 07                	je     c0019aad <CPU::setupFeatures()+0x57>
c0019aa6:	52                   	push   edx
c0019aa7:	e8 26 ff ff ff       	call   c00199d2 <CPU::setupLargePages()>
c0019aac:	59                   	pop    ecx
c0019aad:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019ab4:	74 07                	je     c0019abd <CPU::setupFeatures()+0x67>
c0019ab6:	52                   	push   edx
c0019ab7:	e8 5e ff ff ff       	call   c0019a1a <CPU::setupGlobalPages()>
c0019abc:	58                   	pop    eax
c0019abd:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019ac4:	74 0c                	je     c0019ad2 <CPU::setupFeatures()+0x7c>
c0019ac6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019aca:	83 c4 0c             	add    esp,0xc
c0019acd:	e9 0a ff ff ff       	jmp    c00199dc <CPU::setupPAT()>
c0019ad2:	83 c4 0c             	add    esp,0xc
c0019ad5:	c3                   	ret    

c0019ad6 <CPU::open(int, int, void*)>:
c0019ad6:	57                   	push   edi
c0019ad7:	56                   	push   esi
c0019ad8:	53                   	push   ebx
c0019ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019add:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ae1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ae7:	83 ec 0c             	sub    esp,0xc
c0019aea:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019af0:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019af6:	50                   	push   eax
c0019af7:	e8 e0 55 ff ff       	call   c000f0dc <GDT::setup()>
c0019afc:	83 c4 0c             	add    esp,0xc
c0019aff:	6a 00                	push   0x0
c0019b01:	68 ef be ad de       	push   0xdeadbeef
c0019b06:	57                   	push   edi
c0019b07:	e8 34 78 ff ff       	call   c0011340 <TSS::setup(unsigned long, unsigned long)>
c0019b0c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b0f:	e8 0c 78 ff ff       	call   c0011320 <TSS::flush()>
c0019b14:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019b1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b1d:	e8 16 58 ff ff       	call   c000f338 <IDT::setup()>
c0019b22:	b8 00 04 00 00       	mov    eax,0x400
c0019b27:	0f 23 f8             	mov    db7,eax
c0019b2a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019b34:	e8 7e 63 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0019b39:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019b3f:	89 30                	mov    DWORD PTR [eax],esi
c0019b41:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019b47:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019b4a:	58                   	pop    eax
c0019b4b:	5a                   	pop    edx
c0019b4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b56:	e8 79 89 ff ff       	call   c00124d4 <VAS::setCPUSpecific(unsigned long)>
c0019b5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b5e:	e8 5f f4 ff ff       	call   c0018fc2 <CPU::detectFeatures()>
c0019b63:	e8 7c bc ff ff       	call   c00157e4 <setupInterruptController()>
c0019b68:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019b6e:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0019b73:	83 e0 10             	and    eax,0x10
c0019b76:	83 f8 01             	cmp    eax,0x1
c0019b79:	19 c0                	sbb    eax,eax
c0019b7b:	83 e0 46             	and    eax,0x46
c0019b7e:	83 c0 1e             	add    eax,0x1e
c0019b81:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b84:	e8 9f d1 ff ff       	call   c0016d28 <setupTimer(int)>
c0019b89:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019b8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b92:	e8 bf fe ff ff       	call   c0019a56 <CPU::setupFeatures()>
c0019b97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b9a:	e8 a7 f1 ff ff       	call   c0018d46 <CPU::displayFeatures()>
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	31 c0                	xor    eax,eax
c0019ba4:	5b                   	pop    ebx
c0019ba5:	5e                   	pop    esi
c0019ba6:	5f                   	pop    edi
c0019ba7:	c3                   	ret    

c0019ba8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ba8:	57                   	push   edi
c0019ba9:	56                   	push   esi
c0019baa:	53                   	push   ebx
c0019bab:	51                   	push   ecx
c0019bac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bb0:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019bb3:	0f 02 c0             	lar    eax,ax
c0019bb6:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019bb9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bbd:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019bc0:	88 ca                	mov    dl,cl
c0019bc2:	c0 ea 06             	shr    dl,0x6
c0019bc5:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019bc9:	89 ca                	mov    edx,ecx
c0019bcb:	66 c1 ea 03          	shr    dx,0x3
c0019bcf:	83 e2 07             	and    edx,0x7
c0019bd2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019bd7:	88 17                	mov    BYTE PTR [edi],dl
c0019bd9:	0f 84 a6 01 00 00    	je     c0019d85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019bdf:	83 e1 07             	and    ecx,0x7
c0019be2:	80 f9 04             	cmp    cl,0x4
c0019be5:	0f 84 98 00 00 00    	je     c0019c83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019beb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019bf0:	0f 95 c0             	setne  al
c0019bf3:	80 f9 05             	cmp    cl,0x5
c0019bf6:	0f 95 c2             	setne  dl
c0019bf9:	08 c2                	or     dl,al
c0019bfb:	74 79                	je     c0019c76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019bfd:	84 c9                	test   cl,cl
c0019bff:	75 05                	jne    c0019c06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019c01:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c04:	eb 3c                	jmp    c0019c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c06:	80 f9 01             	cmp    cl,0x1
c0019c09:	75 05                	jne    c0019c10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019c0b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c0e:	eb 32                	jmp    c0019c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c10:	80 f9 02             	cmp    cl,0x2
c0019c13:	75 05                	jne    c0019c1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019c15:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c18:	eb 28                	jmp    c0019c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c1a:	31 c0                	xor    eax,eax
c0019c1c:	80 f9 03             	cmp    cl,0x3
c0019c1f:	75 05                	jne    c0019c26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019c21:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c24:	eb 1c                	jmp    c0019c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c26:	80 f9 05             	cmp    cl,0x5
c0019c29:	75 05                	jne    c0019c30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019c2b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c2e:	eb 12                	jmp    c0019c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c30:	80 f9 06             	cmp    cl,0x6
c0019c33:	75 05                	jne    c0019c3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019c35:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c38:	eb 08                	jmp    c0019c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c3a:	80 f9 07             	cmp    cl,0x7
c0019c3d:	75 03                	jne    c0019c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c3f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c42:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c47:	75 10                	jne    c0019c59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019c49:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019c4d:	b9 03 00 00 00       	mov    ecx,0x3
c0019c52:	01 d0                	add    eax,edx
c0019c54:	e9 37 01 00 00       	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c59:	b9 02 00 00 00       	mov    ecx,0x2
c0019c5e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019c63:	0f 85 27 01 00 00    	jne    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c69:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019c6c:	b9 06 00 00 00       	mov    ecx,0x6
c0019c71:	e9 1a 01 00 00       	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c76:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019c79:	b9 06 00 00 00       	mov    ecx,0x6
c0019c7e:	e9 0f 01 00 00       	jmp    c0019d92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c83:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019c86:	88 ca                	mov    dl,cl
c0019c88:	c0 ea 06             	shr    dl,0x6
c0019c8b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019c8f:	89 ca                	mov    edx,ecx
c0019c91:	66 c1 ea 03          	shr    dx,0x3
c0019c95:	83 e2 07             	and    edx,0x7
c0019c98:	80 e1 07             	and    cl,0x7
c0019c9b:	75 05                	jne    c0019ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019c9d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019ca0:	eb 4c                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ca2:	80 f9 01             	cmp    cl,0x1
c0019ca5:	75 05                	jne    c0019cac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019ca7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019caa:	eb 42                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cac:	80 f9 02             	cmp    cl,0x2
c0019caf:	75 05                	jne    c0019cb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019cb1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019cb4:	eb 38                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cb6:	80 f9 03             	cmp    cl,0x3
c0019cb9:	75 05                	jne    c0019cc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019cbb:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019cbe:	eb 2e                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cc0:	80 f9 04             	cmp    cl,0x4
c0019cc3:	75 12                	jne    c0019cd7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019cc5:	f6 c4 60             	test   ah,0x60
c0019cc8:	75 08                	jne    c0019cd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019cca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ccd:	8d 78 14             	lea    edi,[eax+0x14]
c0019cd0:	eb 1c                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cd2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019cd5:	eb 17                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019cd7:	80 f9 05             	cmp    cl,0x5
c0019cda:	75 05                	jne    c0019ce1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019cdc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019cdf:	eb 0d                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ce1:	80 f9 06             	cmp    cl,0x6
c0019ce4:	75 05                	jne    c0019ceb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019ce6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ce9:	eb 03                	jmp    c0019cee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ceb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019cee:	84 d2                	test   dl,dl
c0019cf0:	75 05                	jne    c0019cf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019cf2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cf5:	eb 3c                	jmp    c0019d33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cf7:	80 fa 01             	cmp    dl,0x1
c0019cfa:	75 05                	jne    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019cfc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019cff:	eb 32                	jmp    c0019d33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d01:	80 fa 02             	cmp    dl,0x2
c0019d04:	75 05                	jne    c0019d0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019d06:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d09:	eb 28                	jmp    c0019d33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d0b:	80 fa 03             	cmp    dl,0x3
c0019d0e:	75 05                	jne    c0019d15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019d10:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d13:	eb 1e                	jmp    c0019d33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d15:	31 c0                	xor    eax,eax
c0019d17:	80 fa 04             	cmp    dl,0x4
c0019d1a:	74 17                	je     c0019d33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d1c:	80 fa 05             	cmp    dl,0x5
c0019d1f:	75 05                	jne    c0019d26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019d21:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d24:	eb 0d                	jmp    c0019d33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d26:	80 fa 06             	cmp    dl,0x6
c0019d29:	75 05                	jne    c0019d30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019d2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d2e:	eb 03                	jmp    c0019d33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d30:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d33:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d38:	0f 94 c2             	sete   dl
c0019d3b:	80 f9 05             	cmp    cl,0x5
c0019d3e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019d42:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019d47:	d3 e0                	shl    eax,cl
c0019d49:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019d4d:	74 0a                	je     c0019d59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019d4f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d52:	b9 07 00 00 00       	mov    ecx,0x7
c0019d57:	eb 37                	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d59:	01 f8                	add    eax,edi
c0019d5b:	b9 03 00 00 00       	mov    ecx,0x3
c0019d60:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d65:	74 2b                	je     c0019d92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d67:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d6c:	75 0d                	jne    c0019d7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019d6e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019d72:	01 c8                	add    eax,ecx
c0019d74:	b9 04 00 00 00       	mov    ecx,0x4
c0019d79:	eb 17                	jmp    c0019d92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d7b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d7e:	b9 07 00 00 00       	mov    ecx,0x7
c0019d83:	eb 0d                	jmp    c0019d92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d85:	b9 02 00 00 00       	mov    ecx,0x2
c0019d8a:	b2 01                	mov    dl,0x1
c0019d8c:	31 c0                	xor    eax,eax
c0019d8e:	eb 02                	jmp    c0019d92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d90:	31 d2                	xor    edx,edx
c0019d92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d96:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019d98:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d9c:	88 11                	mov    BYTE PTR [ecx],dl
c0019d9e:	5a                   	pop    edx
c0019d9f:	5b                   	pop    ebx
c0019da0:	5e                   	pop    esi
c0019da1:	5f                   	pop    edi
c0019da2:	c3                   	ret    

c0019da3 <Krnl::smpEntry()>:
c0019da3:	eb fe                	jmp    c0019da3 <Krnl::smpEntry()>

c0019da5 <Krnl::startCPU(int)>:
c0019da5:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0019daa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019db1:	0f 84 36 01 00 00    	je     c0019eed <Krnl::startCPU(int)+0x148>
c0019db7:	53                   	push   ebx
c0019db8:	83 ec 08             	sub    esp,0x8
c0019dbb:	e8 fc 3e 00 00       	call   c001dcbc <lockScheduler()>
c0019dc0:	52                   	push   edx
c0019dc1:	52                   	push   edx
c0019dc2:	6a 1b                	push   0x1b
c0019dc4:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c0019dca:	e8 21 50 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019dcf:	59                   	pop    ecx
c0019dd0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019dd5:	89 c3                	mov    ebx,eax
c0019dd7:	58                   	pop    eax
c0019dd8:	53                   	push   ebx
c0019dd9:	68 10 ba 02 c0       	push   0xc002ba10
c0019dde:	e8 c0 8f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0019de3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019df1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019dfb:	c1 e0 18             	shl    eax,0x18
c0019dfe:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019e04:	83 c4 10             	add    esp,0x10
c0019e07:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019e0d:	09 c2                	or     edx,eax
c0019e0f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019e15:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019e1b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e21:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e27:	80 cd c5             	or     ch,0xc5
c0019e2a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e30:	f3 90                	pause  
c0019e32:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e34:	0f ba e1 0c          	bt     ecx,0xc
c0019e38:	72 f6                	jb     c0019e30 <Krnl::startCPU(int)+0x8b>
c0019e3a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e40:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e46:	09 c1                	or     ecx,eax
c0019e48:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e4e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e54:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019e5a:	80 cd 85             	or     ch,0x85
c0019e5d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e63:	f3 90                	pause  
c0019e65:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e67:	0f ba e1 0c          	bt     ecx,0xc
c0019e6b:	72 f6                	jb     c0019e63 <Krnl::startCPU(int)+0xbe>
c0019e6d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e77:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e7d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e83:	09 c1                	or     ecx,eax
c0019e85:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e8b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e91:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019e97:	81 c9 02 06 00 00    	or     ecx,0x602
c0019e9d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ea3:	f3 90                	pause  
c0019ea5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ea7:	0f ba e1 0c          	bt     ecx,0xc
c0019eab:	72 f6                	jb     c0019ea3 <Krnl::startCPU(int)+0xfe>
c0019ead:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019eb7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ebd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ec3:	09 c8                	or     eax,ecx
c0019ec5:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019ecb:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019ed1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019ed6:	0d 02 06 00 00       	or     eax,0x602
c0019edb:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019ee1:	f3 90                	pause  
c0019ee3:	8b 02                	mov    eax,DWORD PTR [edx]
c0019ee5:	0f ba e0 0c          	bt     eax,0xc
c0019ee9:	72 f6                	jb     c0019ee1 <Krnl::startCPU(int)+0x13c>
c0019eeb:	eb fe                	jmp    c0019eeb <Krnl::startCPU(int)+0x146>
c0019eed:	c3                   	ret    

c0019eee <Krnl::startCPUs()>:
c0019eee:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0019ef3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019ef9:	88 c2                	mov    dl,al
c0019efb:	83 e2 0a             	and    edx,0xa
c0019efe:	80 fa 0a             	cmp    dl,0xa
c0019f01:	75 09                	jne    c0019f0c <Krnl::startCPUs()+0x1e>
c0019f03:	a8 01                	test   al,0x1
c0019f05:	74 05                	je     c0019f0c <Krnl::startCPUs()+0x1e>
c0019f07:	e9 8f 62 fe ff       	jmp    c000019b <prepareTramp>
c0019f0c:	c3                   	ret    
c0019f0d:	90                   	nop

c0019f0e <EnvVarContainer::getEnv(char const*)>:
c0019f0e:	57                   	push   edi
c0019f0f:	56                   	push   esi
c0019f10:	53                   	push   ebx
c0019f11:	31 db                	xor    ebx,ebx
c0019f13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f17:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019f19:	7e 2b                	jle    c0019f46 <EnvVarContainer::getEnv(char const*)+0x38>
c0019f1b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019f22:	50                   	push   eax
c0019f23:	50                   	push   eax
c0019f24:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f27:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019f2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019f2e:	e8 95 69 fe ff       	call   c00008c8 <strcmp>
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	85 c0                	test   eax,eax
c0019f38:	75 09                	jne    c0019f43 <EnvVarContainer::getEnv(char const*)+0x35>
c0019f3a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f3d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019f41:	eb 05                	jmp    c0019f48 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019f43:	43                   	inc    ebx
c0019f44:	eb d1                	jmp    c0019f17 <EnvVarContainer::getEnv(char const*)+0x9>
c0019f46:	31 c0                	xor    eax,eax
c0019f48:	5b                   	pop    ebx
c0019f49:	5e                   	pop    esi
c0019f4a:	5f                   	pop    edi
c0019f4b:	c3                   	ret    

c0019f4c <EnvVarContainer::setEnv(char const*, char const*)>:
c0019f4c:	57                   	push   edi
c0019f4d:	56                   	push   esi
c0019f4e:	53                   	push   ebx
c0019f4f:	83 ec 1c             	sub    esp,0x1c
c0019f52:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019f56:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019f5a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019f5e:	57                   	push   edi
c0019f5f:	e8 38 68 fe ff       	call   c000079c <strlen>
c0019f64:	40                   	inc    eax
c0019f65:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f68:	e8 de 58 ff ff       	call   c000f84b <malloc>
c0019f6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f74:	e8 23 68 fe ff       	call   c000079c <strlen>
c0019f79:	40                   	inc    eax
c0019f7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f7d:	e8 c9 58 ff ff       	call   c000f84b <malloc>
c0019f82:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f89:	e8 0e 68 fe ff       	call   c000079c <strlen>
c0019f8e:	83 c4 0c             	add    esp,0xc
c0019f91:	40                   	inc    eax
c0019f92:	50                   	push   eax
c0019f93:	6a 00                	push   0x0
c0019f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f99:	e8 e2 67 fe ff       	call   c0000780 <memset>
c0019f9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fa1:	e8 f6 67 fe ff       	call   c000079c <strlen>
c0019fa6:	83 c4 0c             	add    esp,0xc
c0019fa9:	40                   	inc    eax
c0019faa:	50                   	push   eax
c0019fab:	57                   	push   edi
c0019fac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fb0:	e8 97 67 fe ff       	call   c000074c <memcpy>
c0019fb5:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fb8:	e8 df 67 fe ff       	call   c000079c <strlen>
c0019fbd:	83 c4 0c             	add    esp,0xc
c0019fc0:	40                   	inc    eax
c0019fc1:	50                   	push   eax
c0019fc2:	6a 00                	push   0x0
c0019fc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fc8:	e8 b3 67 fe ff       	call   c0000780 <memset>
c0019fcd:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fd0:	e8 c7 67 fe ff       	call   c000079c <strlen>
c0019fd5:	83 c4 0c             	add    esp,0xc
c0019fd8:	40                   	inc    eax
c0019fd9:	50                   	push   eax
c0019fda:	56                   	push   esi
c0019fdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fdf:	e8 68 67 fe ff       	call   c000074c <memcpy>
c0019fe4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fe6:	40                   	inc    eax
c0019fe7:	89 03                	mov    DWORD PTR [ebx],eax
c0019fe9:	c1 e0 03             	shl    eax,0x3
c0019fec:	5a                   	pop    edx
c0019fed:	59                   	pop    ecx
c0019fee:	50                   	push   eax
c0019fef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019ff2:	e8 40 58 ff ff       	call   c000f837 <realloc>
c0019ff7:	83 c4 0c             	add    esp,0xc
c0019ffa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ffd:	6a 08                	push   0x8
c0019fff:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a003:	52                   	push   edx
c001a004:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a006:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a00a:	50                   	push   eax
c001a00b:	e8 3c 67 fe ff       	call   c000074c <memcpy>
c001a010:	83 c4 20             	add    esp,0x20
c001a013:	5b                   	pop    ebx
c001a014:	5e                   	pop    esi
c001a015:	5f                   	pop    edi
c001a016:	c3                   	ret    
c001a017:	90                   	nop

c001a018 <EnvVarContainer::deleteEnv(char const*)>:
c001a018:	c3                   	ret    
c001a019:	90                   	nop

c001a01a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a01a:	55                   	push   ebp
c001a01b:	57                   	push   edi
c001a01c:	56                   	push   esi
c001a01d:	53                   	push   ebx
c001a01e:	81 ec 38 01 00 00    	sub    esp,0x138
c001a024:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a02b:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a032:	68 14 01 00 00       	push   0x114
c001a037:	e8 0f 58 ff ff       	call   c000f84b <malloc>
c001a03c:	83 c4 0c             	add    esp,0xc
c001a03f:	89 c7                	mov    edi,eax
c001a041:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a044:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a04b:	50                   	push   eax
c001a04c:	e8 b1 92 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001a051:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a054:	e8 7b 95 ff ff       	call   c00135d4 <File::exists()>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	84 c0                	test   al,al
c001a05e:	75 31                	jne    c001a091 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a060:	51                   	push   ecx
c001a061:	51                   	push   ecx
c001a062:	6a 12                	push   0x12
c001a064:	57                   	push   edi
c001a065:	e8 fc 92 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c001a06a:	8b 07                	mov    eax,DWORD PTR [edi]
c001a06c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a06f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a072:	e8 25 67 fe ff       	call   c000079c <strlen>
c001a077:	5a                   	pop    edx
c001a078:	31 d2                	xor    edx,edx
c001a07a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a07e:	51                   	push   ecx
c001a07f:	55                   	push   ebp
c001a080:	52                   	push   edx
c001a081:	50                   	push   eax
c001a082:	57                   	push   edi
c001a083:	ff d3                	call   ebx
c001a085:	83 c4 14             	add    esp,0x14
c001a088:	57                   	push   edi
c001a089:	e8 36 93 ff ff       	call   c00133c4 <File::close()>
c001a08e:	83 c4 10             	add    esp,0x10
c001a091:	31 db                	xor    ebx,ebx
c001a093:	50                   	push   eax
c001a094:	31 ed                	xor    ebp,ebp
c001a096:	68 00 01 00 00       	push   0x100
c001a09b:	6a 00                	push   0x0
c001a09d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0a1:	50                   	push   eax
c001a0a2:	e8 d9 66 fe ff       	call   c0000780 <memset>
c001a0a7:	58                   	pop    eax
c001a0a8:	5a                   	pop    edx
c001a0a9:	6a 01                	push   0x1
c001a0ab:	57                   	push   edi
c001a0ac:	e8 b5 92 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c001a0b1:	83 c4 10             	add    esp,0x10
c001a0b4:	83 ec 0c             	sub    esp,0xc
c001a0b7:	8b 07                	mov    eax,DWORD PTR [edi]
c001a0b9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a0bd:	51                   	push   ecx
c001a0be:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a0c2:	52                   	push   edx
c001a0c3:	6a 00                	push   0x0
c001a0c5:	6a 01                	push   0x1
c001a0c7:	57                   	push   edi
c001a0c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a0cb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a0cf:	83 c4 20             	add    esp,0x20
c001a0d2:	3c 0d                	cmp    al,0xd
c001a0d4:	0f 84 12 01 00 00    	je     c001a1ec <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a0da:	85 db                	test   ebx,ebx
c001a0dc:	0f 84 fd 00 00 00    	je     c001a1df <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a0e2:	3c 0a                	cmp    al,0xa
c001a0e4:	74 13                	je     c001a0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a0e6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0eb:	74 0c                	je     c001a0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a0ed:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a0f3:	0f 8e e6 00 00 00    	jle    c001a1df <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a0f9:	83 ec 0c             	sub    esp,0xc
c001a0fc:	8d 53 01             	lea    edx,[ebx+0x1]
c001a0ff:	29 dd                	sub    ebp,ebx
c001a101:	52                   	push   edx
c001a102:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a106:	e8 40 57 ff ff       	call   c000f84b <malloc>
c001a10b:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a10e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a112:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a115:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a119:	e8 2d 57 ff ff       	call   c000f84b <malloc>
c001a11e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a122:	83 c4 0c             	add    esp,0xc
c001a125:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a129:	52                   	push   edx
c001a12a:	6a 00                	push   0x0
c001a12c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a130:	e8 4b 66 fe ff       	call   c0000780 <memset>
c001a135:	83 c4 0c             	add    esp,0xc
c001a138:	53                   	push   ebx
c001a139:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a13d:	55                   	push   ebp
c001a13e:	01 eb                	add    ebx,ebp
c001a140:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a144:	e8 03 66 fe ff       	call   c000074c <memcpy>
c001a149:	83 c4 0c             	add    esp,0xc
c001a14c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a150:	51                   	push   ecx
c001a151:	6a 00                	push   0x0
c001a153:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a157:	e8 24 66 fe ff       	call   c0000780 <memset>
c001a15c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a15f:	e8 38 66 fe ff       	call   c000079c <strlen>
c001a164:	83 c4 0c             	add    esp,0xc
c001a167:	50                   	push   eax
c001a168:	53                   	push   ebx
c001a169:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a16d:	e8 da 65 fe ff       	call   c000074c <memcpy>
c001a172:	5b                   	pop    ebx
c001a173:	58                   	pop    eax
c001a174:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a178:	68 21 ba 02 c0       	push   0xc002ba21
c001a17d:	e8 21 8c ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001a182:	8b 06                	mov    eax,DWORD PTR [esi]
c001a184:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a187:	40                   	inc    eax
c001a188:	83 c4 10             	add    esp,0x10
c001a18b:	89 06                	mov    DWORD PTR [esi],eax
c001a18d:	85 d2                	test   edx,edx
c001a18f:	75 0c                	jne    c001a19d <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a191:	83 ec 0c             	sub    esp,0xc
c001a194:	6a 08                	push   0x8
c001a196:	e8 b0 56 ff ff       	call   c000f84b <malloc>
c001a19b:	eb 0c                	jmp    c001a1a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a19d:	c1 e0 03             	shl    eax,0x3
c001a1a0:	51                   	push   ecx
c001a1a1:	51                   	push   ecx
c001a1a2:	50                   	push   eax
c001a1a3:	52                   	push   edx
c001a1a4:	e8 8e 56 ff ff       	call   c000f837 <realloc>
c001a1a9:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a1ac:	83 c4 10             	add    esp,0x10
c001a1af:	31 db                	xor    ebx,ebx
c001a1b1:	52                   	push   edx
c001a1b2:	6a 08                	push   0x8
c001a1b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a1b8:	50                   	push   eax
c001a1b9:	8b 16                	mov    edx,DWORD PTR [esi]
c001a1bb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a1be:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1c2:	50                   	push   eax
c001a1c3:	e8 84 65 fe ff       	call   c000074c <memcpy>
c001a1c8:	83 c4 0c             	add    esp,0xc
c001a1cb:	68 00 01 00 00       	push   0x100
c001a1d0:	6a 00                	push   0x0
c001a1d2:	55                   	push   ebp
c001a1d3:	31 ed                	xor    ebp,ebp
c001a1d5:	e8 a6 65 fe ff       	call   c0000780 <memset>
c001a1da:	83 c4 10             	add    esp,0x10
c001a1dd:	eb 0d                	jmp    c001a1ec <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1df:	3c 3d                	cmp    al,0x3d
c001a1e1:	74 07                	je     c001a1ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a1e3:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a1e7:	45                   	inc    ebp
c001a1e8:	eb 02                	jmp    c001a1ec <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1ea:	89 eb                	mov    ebx,ebp
c001a1ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1f1:	0f 85 bd fe ff ff    	jne    c001a0b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a1f7:	50                   	push   eax
c001a1f8:	50                   	push   eax
c001a1f9:	ff 36                	push   DWORD PTR [esi]
c001a1fb:	68 2f ba 02 c0       	push   0xc002ba2f
c001a200:	e8 9e 8b ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001a205:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a20b:	5b                   	pop    ebx
c001a20c:	5e                   	pop    esi
c001a20d:	5f                   	pop    edi
c001a20e:	5d                   	pop    ebp
c001a20f:	c3                   	ret    

c001a210 <EnvVarContainer::__loadSystem()>:
c001a210:	83 ec 10             	sub    esp,0x10
c001a213:	68 80 d9 02 c0       	push   0xc002d980
c001a218:	68 5a ba 02 c0       	push   0xc002ba5a
c001a21d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a221:	e8 f4 fd ff ff       	call   c001a01a <EnvVarContainer::loadFrom(char const*, char const*)>
c001a226:	83 c4 1c             	add    esp,0x1c
c001a229:	c3                   	ret    

c001a22a <EnvVarContainer::__loadUser()>:
c001a22a:	c3                   	ret    
c001a22b:	90                   	nop

c001a22c <EnvVarContainer::EnvVarContainer(Process*)>:
c001a22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a230:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a23a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a23e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a241:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a245:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a24c:	90                   	nop
c001a24d:	c3                   	ret    

c001a24e <EnvVarContainer::~EnvVarContainer()>:
c001a24e:	83 ec 0c             	sub    esp,0xc
c001a251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a255:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a258:	85 c0                	test   eax,eax
c001a25a:	74 1d                	je     c001a279 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a260:	8b 00                	mov    eax,DWORD PTR [eax]
c001a262:	85 c0                	test   eax,eax
c001a264:	74 13                	je     c001a279 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a26a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a26d:	83 ec 0c             	sub    esp,0xc
c001a270:	50                   	push   eax
c001a271:	e8 e5 55 ff ff       	call   c000f85b <free>
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	90                   	nop
c001a27a:	83 c4 0c             	add    esp,0xc
c001a27d:	c3                   	ret    

c001a27e <Krnl::getEnv(Process*, char const*)>:
c001a27e:	53                   	push   ebx
c001a27f:	83 ec 08             	sub    esp,0x8
c001a282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a286:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a28a:	39 05 b4 19 03 c0    	cmp    DWORD PTR ds:0xc00319b4,eax
c001a290:	74 04                	je     c001a296 <Krnl::getEnv(Process*, char const*)+0x18>
c001a292:	85 c0                	test   eax,eax
c001a294:	75 0b                	jne    c001a2a1 <Krnl::getEnv(Process*, char const*)+0x23>
c001a296:	a1 94 0f 03 c0       	mov    eax,ds:0xc0030f94
c001a29b:	85 c0                	test   eax,eax
c001a29d:	75 19                	jne    c001a2b8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a29f:	eb 27                	jmp    c001a2c8 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a2a1:	52                   	push   edx
c001a2a2:	52                   	push   edx
c001a2a3:	53                   	push   ebx
c001a2a4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a2aa:	e8 5f fc ff ff       	call   c0019f0e <EnvVarContainer::getEnv(char const*)>
c001a2af:	83 c4 10             	add    esp,0x10
c001a2b2:	85 c0                	test   eax,eax
c001a2b4:	75 28                	jne    c001a2de <Krnl::getEnv(Process*, char const*)+0x60>
c001a2b6:	eb de                	jmp    c001a296 <Krnl::getEnv(Process*, char const*)+0x18>
c001a2b8:	52                   	push   edx
c001a2b9:	52                   	push   edx
c001a2ba:	53                   	push   ebx
c001a2bb:	50                   	push   eax
c001a2bc:	e8 4d fc ff ff       	call   c0019f0e <EnvVarContainer::getEnv(char const*)>
c001a2c1:	83 c4 10             	add    esp,0x10
c001a2c4:	85 c0                	test   eax,eax
c001a2c6:	75 16                	jne    c001a2de <Krnl::getEnv(Process*, char const*)+0x60>
c001a2c8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a2cc:	a1 98 0f 03 c0       	mov    eax,ds:0xc0030f98
c001a2d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a2d5:	83 c4 08             	add    esp,0x8
c001a2d8:	5b                   	pop    ebx
c001a2d9:	e9 30 fc ff ff       	jmp    c0019f0e <EnvVarContainer::getEnv(char const*)>
c001a2de:	83 c4 08             	add    esp,0x8
c001a2e1:	5b                   	pop    ebx
c001a2e2:	c3                   	ret    

c001a2e3 <Krnl::setEnvSystem(char const*, char const*)>:
c001a2e3:	83 ec 10             	sub    esp,0x10
c001a2e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2ee:	ff 35 98 0f 03 c0    	push   DWORD PTR ds:0xc0030f98
c001a2f4:	e8 53 fc ff ff       	call   c0019f4c <EnvVarContainer::setEnv(char const*, char const*)>
c001a2f9:	83 c4 1c             	add    esp,0x1c
c001a2fc:	c3                   	ret    

c001a2fd <Krnl::setEnvUser(char const*, char const*)>:
c001a2fd:	a1 94 0f 03 c0       	mov    eax,ds:0xc0030f94
c001a302:	85 c0                	test   eax,eax
c001a304:	74 15                	je     c001a31b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a306:	83 ec 10             	sub    esp,0x10
c001a309:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a30d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a311:	50                   	push   eax
c001a312:	e8 35 fc ff ff       	call   c0019f4c <EnvVarContainer::setEnv(char const*, char const*)>
c001a317:	83 c4 1c             	add    esp,0x1c
c001a31a:	c3                   	ret    
c001a31b:	c3                   	ret    

c001a31c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a320:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a326:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a32a:	e9 1d fc ff ff       	jmp    c0019f4c <EnvVarContainer::setEnv(char const*, char const*)>

c001a32f <Krnl::deleteEnvSystem(char const*)>:
c001a32f:	c3                   	ret    

c001a330 <Krnl::deleteEnvUser(char const*)>:
c001a330:	c3                   	ret    

c001a331 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a331:	c3                   	ret    

c001a332 <Krnl::newProcessEnv(Process*)>:
c001a332:	83 ec 28             	sub    esp,0x28
c001a335:	6a 0c                	push   0xc
c001a337:	e8 0f 55 ff ff       	call   c000f84b <malloc>
c001a33c:	5a                   	pop    edx
c001a33d:	59                   	pop    ecx
c001a33e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a342:	50                   	push   eax
c001a343:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a347:	e8 e0 fe ff ff       	call   c001a22c <EnvVarContainer::EnvVarContainer(Process*)>
c001a34c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a350:	83 c4 2c             	add    esp,0x2c
c001a353:	c3                   	ret    

c001a354 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a354:	56                   	push   esi
c001a355:	53                   	push   ebx
c001a356:	83 ec 10             	sub    esp,0x10
c001a359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a35d:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a363:	6a 0c                	push   0xc
c001a365:	e8 e1 54 ff ff       	call   c000f84b <malloc>
c001a36a:	89 c3                	mov    ebx,eax
c001a36c:	58                   	pop    eax
c001a36d:	5a                   	pop    edx
c001a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a372:	53                   	push   ebx
c001a373:	e8 b4 fe ff ff       	call   c001a22c <EnvVarContainer::EnvVarContainer(Process*)>
c001a378:	8b 06                	mov    eax,DWORD PTR [esi]
c001a37a:	89 03                	mov    DWORD PTR [ebx],eax
c001a37c:	c1 e0 03             	shl    eax,0x3
c001a37f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a382:	e8 c4 54 ff ff       	call   c000f84b <malloc>
c001a387:	83 c4 0c             	add    esp,0xc
c001a38a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a38d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a38f:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a396:	52                   	push   edx
c001a397:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a39a:	50                   	push   eax
c001a39b:	e8 ac 63 fe ff       	call   c000074c <memcpy>
c001a3a0:	89 d8                	mov    eax,ebx
c001a3a2:	83 c4 14             	add    esp,0x14
c001a3a5:	5b                   	pop    ebx
c001a3a6:	5e                   	pop    esi
c001a3a7:	c3                   	ret    

c001a3a8 <Krnl::loadSystemEnv()>:
c001a3a8:	53                   	push   ebx
c001a3a9:	83 ec 14             	sub    esp,0x14
c001a3ac:	6a 0c                	push   0xc
c001a3ae:	e8 98 54 ff ff       	call   c000f84b <malloc>
c001a3b3:	89 c3                	mov    ebx,eax
c001a3b5:	58                   	pop    eax
c001a3b6:	5a                   	pop    edx
c001a3b7:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c001a3bd:	53                   	push   ebx
c001a3be:	e8 69 fe ff ff       	call   c001a22c <EnvVarContainer::EnvVarContainer(Process*)>
c001a3c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3c6:	89 1d 98 0f 03 c0    	mov    DWORD PTR ds:0xc0030f98,ebx
c001a3cc:	e8 3f fe ff ff       	call   c001a210 <EnvVarContainer::__loadSystem()>
c001a3d1:	83 c4 18             	add    esp,0x18
c001a3d4:	5b                   	pop    ebx
c001a3d5:	c3                   	ret    

c001a3d6 <Krnl::loadUserEnv()>:
c001a3d6:	53                   	push   ebx
c001a3d7:	83 ec 14             	sub    esp,0x14
c001a3da:	6a 0c                	push   0xc
c001a3dc:	e8 6a 54 ff ff       	call   c000f84b <malloc>
c001a3e1:	89 c3                	mov    ebx,eax
c001a3e3:	58                   	pop    eax
c001a3e4:	5a                   	pop    edx
c001a3e5:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c001a3eb:	53                   	push   ebx
c001a3ec:	e8 3b fe ff ff       	call   c001a22c <EnvVarContainer::EnvVarContainer(Process*)>
c001a3f1:	89 1d 94 0f 03 c0    	mov    DWORD PTR ds:0xc0030f94,ebx
c001a3f7:	83 c4 18             	add    esp,0x18
c001a3fa:	5b                   	pop    ebx
c001a3fb:	c3                   	ret    

c001a3fc <Krnl::flushEnv()>:
c001a3fc:	c3                   	ret    

c001a3fd <Krnl::getProcessTotalEnvCount(Process*)>:
c001a3fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a401:	8b 15 94 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f94
c001a407:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a40d:	a1 98 0f 03 c0       	mov    eax,ds:0xc0030f98
c001a412:	8b 00                	mov    eax,DWORD PTR [eax]
c001a414:	03 01                	add    eax,DWORD PTR [ecx]
c001a416:	85 d2                	test   edx,edx
c001a418:	74 02                	je     c001a41c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a41a:	03 02                	add    eax,DWORD PTR [edx]
c001a41c:	c3                   	ret    

c001a41d <Krnl::getProcessEnvPair(Process*, int)>:
c001a41d:	57                   	push   edi
c001a41e:	8b 0d 94 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f94
c001a424:	56                   	push   esi
c001a425:	85 c9                	test   ecx,ecx
c001a427:	53                   	push   ebx
c001a428:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a42c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a430:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a436:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a43a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a43c:	75 47                	jne    c001a485 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a43e:	39 c3                	cmp    ebx,eax
c001a440:	7c 47                	jl     c001a489 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a442:	8b 15 98 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f98
c001a448:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a44a:	01 c1                	add    ecx,eax
c001a44c:	39 d9                	cmp    ecx,ebx
c001a44e:	7e 6c                	jle    c001a4bc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a450:	51                   	push   ecx
c001a451:	89 d9                	mov    ecx,ebx
c001a453:	29 c1                	sub    ecx,eax
c001a455:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a458:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a45c:	53                   	push   ebx
c001a45d:	68 7c ba 02 c0       	push   0xc002ba7c
c001a462:	e8 3c 89 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001a467:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a46d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a46f:	a1 98 0f 03 c0       	mov    eax,ds:0xc0030f98
c001a474:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a477:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a47b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a47e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a481:	89 06                	mov    DWORD PTR [esi],eax
c001a483:	eb 51                	jmp    c001a4d6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a485:	39 c3                	cmp    ebx,eax
c001a487:	7d 05                	jge    c001a48e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a489:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a48c:	eb 20                	jmp    c001a4ae <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a48e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a490:	8d 14 07             	lea    edx,[edi+eax*1]
c001a493:	39 da                	cmp    edx,ebx
c001a495:	7e 04                	jle    c001a49b <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a497:	29 c3                	sub    ebx,eax
c001a499:	eb 10                	jmp    c001a4ab <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a49b:	8b 0d 98 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f98
c001a4a1:	03 11                	add    edx,DWORD PTR [ecx]
c001a4a3:	39 da                	cmp    edx,ebx
c001a4a5:	7e 15                	jle    c001a4bc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4a7:	29 c3                	sub    ebx,eax
c001a4a9:	29 fb                	sub    ebx,edi
c001a4ab:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a4ae:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a4b2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a4b5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a4b8:	89 06                	mov    DWORD PTR [esi],eax
c001a4ba:	eb 1d                	jmp    c001a4d9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	68 90 ba 02 c0       	push   0xc002ba90
c001a4c4:	e8 18 00 00 00       	call   c001a4e1 <Krnl::panic(char const*)>
c001a4c9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a4cf:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	89 f0                	mov    eax,esi
c001a4db:	5b                   	pop    ebx
c001a4dc:	5e                   	pop    esi
c001a4dd:	5f                   	pop    edi
c001a4de:	c2 04 00             	ret    0x4

c001a4e1 <Krnl::panic(char const*)>:
c001a4e1:	55                   	push   ebp
c001a4e2:	89 e5                	mov    ebp,esp
c001a4e4:	53                   	push   ebx
c001a4e5:	83 ec 0c             	sub    esp,0xc
c001a4e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a4eb:	fa                   	cli    
c001a4ec:	c6 05 a4 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fa4,0x1
c001a4f3:	53                   	push   ebx
c001a4f4:	c6 05 84 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d384,0x0
c001a4fb:	68 aa ba 02 c0       	push   0xc002baaa
c001a500:	e8 9e 88 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001a505:	58                   	pop    eax
c001a506:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a50b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a511:	e8 00 67 ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001a516:	83 c4 0c             	add    esp,0xc
c001a519:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a51e:	6a 01                	push   0x1
c001a520:	6a 0f                	push   0xf
c001a522:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a528:	e8 87 61 ff ff       	call   c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a52d:	58                   	pop    eax
c001a52e:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a533:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a539:	e8 1e 69 ff ff       	call   c0010e5c <VgaText::clearScreen()>
c001a53e:	58                   	pop    eax
c001a53f:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a544:	5a                   	pop    edx
c001a545:	68 c3 ba 02 c0       	push   0xc002bac3
c001a54a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a550:	e8 4d 6a ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a555:	59                   	pop    ecx
c001a556:	58                   	pop    eax
c001a557:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a55c:	68 68 bb 02 c0       	push   0xc002bb68
c001a561:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a567:	e8 36 6a ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a56c:	58                   	pop    eax
c001a56d:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a572:	5a                   	pop    edx
c001a573:	68 df ba 02 c0       	push   0xc002badf
c001a578:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57e:	e8 1f 6a ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a583:	59                   	pop    ecx
c001a584:	58                   	pop    eax
c001a585:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a58a:	53                   	push   ebx
c001a58b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a591:	e8 0c 6a ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a596:	58                   	pop    eax
c001a597:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a59c:	5a                   	pop    edx
c001a59d:	68 ff ba 02 c0       	push   0xc002baff
c001a5a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5a8:	e8 f5 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a5ad:	a1 a0 0f 03 c0       	mov    eax,ds:0xc0030fa0
c001a5b2:	83 c4 10             	add    esp,0x10
c001a5b5:	85 c0                	test   eax,eax
c001a5b7:	74 02                	je     c001a5bb <Krnl::panic(char const*)+0xda>
c001a5b9:	ff d0                	call   eax
c001a5bb:	83 ec 0c             	sub    esp,0xc
c001a5be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5c1:	e8 fd 2f 00 00       	call   c001d5c3 <Thr::getDriverNameFromAddress(unsigned long)>
c001a5c6:	83 c4 10             	add    esp,0x10
c001a5c9:	89 c3                	mov    ebx,eax
c001a5cb:	85 c0                	test   eax,eax
c001a5cd:	0f 84 50 02 00 00    	je     c001a823 <Krnl::panic(char const*)+0x342>
c001a5d3:	83 ec 08             	sub    esp,0x8
c001a5d6:	8b 15 b4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319b4
c001a5dc:	68 a4 bb 02 c0       	push   0xc002bba4
c001a5e1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a5e7:	e8 b6 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a5ec:	58                   	pop    eax
c001a5ed:	5a                   	pop    edx
c001a5ee:	8b 15 b4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319b4
c001a5f4:	68 df ba 02 c0       	push   0xc002badf
c001a5f9:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a5ff:	e8 9e 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a604:	59                   	pop    ecx
c001a605:	58                   	pop    eax
c001a606:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a60b:	53                   	push   ebx
c001a60c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a612:	e8 8b 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a617:	83 c4 10             	add    esp,0x10
c001a61a:	83 ec 08             	sub    esp,0x8
c001a61d:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a622:	68 fe ba 02 c0       	push   0xc002bafe
c001a627:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62d:	e8 70 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a632:	58                   	pop    eax
c001a633:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a638:	5a                   	pop    edx
c001a639:	68 fc bb 02 c0       	push   0xc002bbfc
c001a63e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a644:	e8 59 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a649:	59                   	pop    ecx
c001a64a:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a64f:	5b                   	pop    ebx
c001a650:	68 3c bc 02 c0       	push   0xc002bc3c
c001a655:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65b:	e8 42 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a660:	58                   	pop    eax
c001a661:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a666:	5a                   	pop    edx
c001a667:	68 ea ba 02 c0       	push   0xc002baea
c001a66c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a672:	e8 2b 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a677:	59                   	pop    ecx
c001a678:	5b                   	pop    ebx
c001a679:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a67c:	68 02 bb 02 c0       	push   0xc002bb02
c001a681:	e8 1d 87 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001a686:	58                   	pop    eax
c001a687:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a68a:	5a                   	pop    edx
c001a68b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a68e:	68 0b bb 02 c0       	push   0xc002bb0b
c001a693:	e8 0b 87 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001a698:	59                   	pop    ecx
c001a699:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a69c:	5b                   	pop    ebx
c001a69d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a69f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a6a2:	68 14 bb 02 c0       	push   0xc002bb14
c001a6a7:	e8 f7 86 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001a6ac:	58                   	pop    eax
c001a6ad:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a6b2:	5a                   	pop    edx
c001a6b3:	68 80 bc 02 c0       	push   0xc002bc80
c001a6b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6be:	e8 df 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6c3:	59                   	pop    ecx
c001a6c4:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a6c9:	5b                   	pop    ebx
c001a6ca:	68 1d bb 02 c0       	push   0xc002bb1d
c001a6cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d5:	e8 c8 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6da:	0f 20 c0             	mov    eax,cr0
c001a6dd:	5a                   	pop    edx
c001a6de:	59                   	pop    ecx
c001a6df:	50                   	push   eax
c001a6e0:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a6e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6eb:	e8 d8 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a6f0:	5b                   	pop    ebx
c001a6f1:	58                   	pop    eax
c001a6f2:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a6f7:	68 27 bb 02 c0       	push   0xc002bb27
c001a6fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a702:	e8 9b 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a707:	0f 20 d0             	mov    eax,cr2
c001a70a:	5a                   	pop    edx
c001a70b:	59                   	pop    ecx
c001a70c:	50                   	push   eax
c001a70d:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a712:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a718:	e8 ab 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a71d:	5b                   	pop    ebx
c001a71e:	58                   	pop    eax
c001a71f:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a724:	68 31 bb 02 c0       	push   0xc002bb31
c001a729:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72f:	e8 6e 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a734:	0f 20 d8             	mov    eax,cr3
c001a737:	5a                   	pop    edx
c001a738:	59                   	pop    ecx
c001a739:	50                   	push   eax
c001a73a:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a73f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a745:	e8 7e 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a74a:	5b                   	pop    ebx
c001a74b:	58                   	pop    eax
c001a74c:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a751:	68 44 bb 02 c0       	push   0xc002bb44
c001a756:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a75c:	e8 41 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a761:	0f 20 e0             	mov    eax,cr4
c001a764:	5a                   	pop    edx
c001a765:	59                   	pop    ecx
c001a766:	50                   	push   eax
c001a767:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a76c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a772:	e8 51 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a777:	5b                   	pop    ebx
c001a778:	58                   	pop    eax
c001a779:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a77e:	68 4e bb 02 c0       	push   0xc002bb4e
c001a783:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a789:	e8 14 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a78e:	5a                   	pop    edx
c001a78f:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a794:	59                   	pop    ecx
c001a795:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a79b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a79e:	50                   	push   eax
c001a79f:	e8 24 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a7a4:	5b                   	pop    ebx
c001a7a5:	58                   	pop    eax
c001a7a6:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a7ab:	68 65 bb 02 c0       	push   0xc002bb65
c001a7b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b6:	e8 e7 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7bb:	5a                   	pop    edx
c001a7bc:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a7c1:	59                   	pop    ecx
c001a7c2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a7c8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a7cb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a7ce:	50                   	push   eax
c001a7cf:	e8 f4 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a7d4:	5b                   	pop    ebx
c001a7d5:	58                   	pop    eax
c001a7d6:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a7db:	68 65 bb 02 c0       	push   0xc002bb65
c001a7e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e6:	e8 b7 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7eb:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a7f0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a7f3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a7f9:	8b 12                	mov    edx,DWORD PTR [edx]
c001a7fb:	59                   	pop    ecx
c001a7fc:	5b                   	pop    ebx
c001a7fd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a800:	50                   	push   eax
c001a801:	e8 c2 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a806:	83 c4 10             	add    esp,0x10
c001a809:	b2 fe                	mov    dl,0xfe
c001a80b:	e4 60                	in     al,0x60
c001a80d:	3c 1c                	cmp    al,0x1c
c001a80f:	74 04                	je     c001a815 <Krnl::panic(char const*)+0x334>
c001a811:	3c 5a                	cmp    al,0x5a
c001a813:	75 f6                	jne    c001a80b <Krnl::panic(char const*)+0x32a>
c001a815:	e4 64                	in     al,0x64
c001a817:	a8 02                	test   al,0x2
c001a819:	75 fa                	jne    c001a815 <Krnl::panic(char const*)+0x334>
c001a81b:	88 d0                	mov    al,dl
c001a81d:	e6 64                	out    0x64,al
c001a81f:	fa                   	cli    
c001a820:	f4                   	hlt    
c001a821:	eb e8                	jmp    c001a80b <Krnl::panic(char const*)+0x32a>
c001a823:	50                   	push   eax
c001a824:	50                   	push   eax
c001a825:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a82a:	68 d0 bb 02 c0       	push   0xc002bbd0
c001a82f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a835:	e8 68 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a83a:	58                   	pop    eax
c001a83b:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a840:	5a                   	pop    edx
c001a841:	68 df ba 02 c0       	push   0xc002badf
c001a846:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84c:	e8 51 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a851:	59                   	pop    ecx
c001a852:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a857:	5b                   	pop    ebx
c001a858:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a85b:	83 c0 0c             	add    eax,0xc
c001a85e:	50                   	push   eax
c001a85f:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a864:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86a:	e8 33 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a86f:	83 c4 10             	add    esp,0x10
c001a872:	e9 a3 fd ff ff       	jmp    c001a61a <Krnl::panic(char const*)+0x139>

c001a877 <Net::switchEndian16(unsigned short)>:
c001a877:	83 ec 04             	sub    esp,0x4
c001a87a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a87e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a882:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a886:	c1 f8 08             	sar    eax,0x8
c001a889:	89 c2                	mov    edx,eax
c001a88b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a88f:	c1 e0 08             	shl    eax,0x8
c001a892:	09 d0                	or     eax,edx
c001a894:	83 c4 04             	add    esp,0x4
c001a897:	c3                   	ret    

c001a898 <Net::switchEndian32(unsigned int)>:
c001a898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a89c:	c1 e8 18             	shr    eax,0x18
c001a89f:	89 c2                	mov    edx,eax
c001a8a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a5:	c1 e0 08             	shl    eax,0x8
c001a8a8:	25 00 00 ff 00       	and    eax,0xff0000
c001a8ad:	09 c2                	or     edx,eax
c001a8af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b3:	c1 e8 08             	shr    eax,0x8
c001a8b6:	25 00 ff 00 00       	and    eax,0xff00
c001a8bb:	09 c2                	or     edx,eax
c001a8bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c1:	c1 e0 18             	shl    eax,0x18
c001a8c4:	09 d0                	or     eax,edx
c001a8c6:	c3                   	ret    

c001a8c7 <Net::crc32Calc(unsigned char*, int)>:
c001a8c7:	83 ec 10             	sub    esp,0x10
c001a8ca:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a8cf:	75 07                	jne    c001a8d8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a8d1:	b8 00 00 00 00       	mov    eax,0x0
c001a8d6:	eb 7c                	jmp    c001a954 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a8d8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a8dd:	7f 07                	jg     c001a8e6 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a8df:	b8 00 00 00 00       	mov    eax,0x0
c001a8e4:	eb 6e                	jmp    c001a954 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a8e6:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a8ee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8fa:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a8fe:	7d 4e                	jge    c001a94e <Net::crc32Calc(unsigned char*, int)+0x87>
c001a900:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a908:	01 d0                	add    eax,edx
c001a90a:	8a 00                	mov    al,BYTE PTR [eax]
c001a90c:	0f b6 c0             	movzx  eax,al
c001a90f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a913:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a91b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a920:	7f 26                	jg     c001a948 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a926:	83 e0 01             	and    eax,0x1
c001a929:	74 0d                	je     c001a938 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a92f:	d1 e8                	shr    eax,1
c001a931:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a936:	eb 06                	jmp    c001a93e <Net::crc32Calc(unsigned char*, int)+0x77>
c001a938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a93c:	d1 e8                	shr    eax,1
c001a93e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a942:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a946:	eb d3                	jmp    c001a91b <Net::crc32Calc(unsigned char*, int)+0x54>
c001a948:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a94c:	eb a8                	jmp    c001a8f6 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a94e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a952:	f7 d0                	not    eax
c001a954:	83 c4 10             	add    esp,0x10
c001a957:	c3                   	ret    

c001a958 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a958:	83 ec 1c             	sub    esp,0x1c
c001a95b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a95f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a963:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a96b:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a970:	7f 14                	jg     c001a986 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a972:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a976:	8d 50 01             	lea    edx,[eax+0x1]
c001a979:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a97d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a980:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a984:	eb e5                	jmp    c001a96b <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a986:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a98a:	8d 50 01             	lea    edx,[eax+0x1]
c001a98d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a991:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a994:	83 ec 04             	sub    esp,0x4
c001a997:	6a 06                	push   0x6
c001a999:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a99d:	50                   	push   eax
c001a99e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a9a2:	e8 a5 5d fe ff       	call   c000074c <memcpy>
c001a9a7:	83 c4 10             	add    esp,0x10
c001a9aa:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a9af:	83 ec 04             	sub    esp,0x4
c001a9b2:	6a 06                	push   0x6
c001a9b4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a9b8:	50                   	push   eax
c001a9b9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a9bd:	e8 8a 5d fe ff       	call   c000074c <memcpy>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a9ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a9ce:	0f b7 c0             	movzx  eax,ax
c001a9d1:	c1 f8 08             	sar    eax,0x8
c001a9d4:	89 c1                	mov    ecx,eax
c001a9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9da:	8d 50 01             	lea    edx,[eax+0x1]
c001a9dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9e1:	88 ca                	mov    dl,cl
c001a9e3:	88 10                	mov    BYTE PTR [eax],dl
c001a9e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a9e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9ed:	8d 48 01             	lea    ecx,[eax+0x1]
c001a9f0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a9f4:	88 10                	mov    BYTE PTR [eax],dl
c001a9f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9fe:	83 ec 04             	sub    esp,0x4
c001aa01:	52                   	push   edx
c001aa02:	50                   	push   eax
c001aa03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa07:	e8 40 5d fe ff       	call   c000074c <memcpy>
c001aa0c:	83 c4 10             	add    esp,0x10
c001aa0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa13:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aa17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa1b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aa1f:	83 ec 08             	sub    esp,0x8
c001aa22:	50                   	push   eax
c001aa23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aa27:	e8 9b fe ff ff       	call   c001a8c7 <Net::crc32Calc(unsigned char*, int)>
c001aa2c:	83 c4 10             	add    esp,0x10
c001aa2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa37:	c1 e8 18             	shr    eax,0x18
c001aa3a:	89 c1                	mov    ecx,eax
c001aa3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa40:	8d 50 01             	lea    edx,[eax+0x1]
c001aa43:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa47:	88 ca                	mov    dl,cl
c001aa49:	88 10                	mov    BYTE PTR [eax],dl
c001aa4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa4f:	c1 e8 10             	shr    eax,0x10
c001aa52:	89 c1                	mov    ecx,eax
c001aa54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa58:	8d 50 01             	lea    edx,[eax+0x1]
c001aa5b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa5f:	88 ca                	mov    dl,cl
c001aa61:	88 10                	mov    BYTE PTR [eax],dl
c001aa63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa67:	c1 e8 08             	shr    eax,0x8
c001aa6a:	89 c1                	mov    ecx,eax
c001aa6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa70:	8d 50 01             	lea    edx,[eax+0x1]
c001aa73:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa77:	88 ca                	mov    dl,cl
c001aa79:	88 10                	mov    BYTE PTR [eax],dl
c001aa7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa7f:	8d 50 01             	lea    edx,[eax+0x1]
c001aa82:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa8a:	88 10                	mov    BYTE PTR [eax],dl
c001aa8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa90:	83 c4 1c             	add    esp,0x1c
c001aa93:	c3                   	ret    

c001aa94 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa94:	83 ec 2c             	sub    esp,0x2c
c001aa97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa9f:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aaa4:	83 ec 04             	sub    esp,0x4
c001aaa7:	6a 06                	push   0x6
c001aaa9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aaad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aab1:	83 c0 0e             	add    eax,0xe
c001aab4:	50                   	push   eax
c001aab5:	e8 92 5c fe ff       	call   c000074c <memcpy>
c001aaba:	83 c4 10             	add    esp,0x10
c001aabd:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aac2:	83 ec 04             	sub    esp,0x4
c001aac5:	6a 06                	push   0x6
c001aac7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aacb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aacf:	83 c0 08             	add    eax,0x8
c001aad2:	50                   	push   eax
c001aad3:	e8 74 5c fe ff       	call   c000074c <memcpy>
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aae0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aae4:	8d 50 01             	lea    edx,[eax+0x1]
c001aae7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aaeb:	8a 00                	mov    al,BYTE PTR [eax]
c001aaed:	0f b6 c0             	movzx  eax,al
c001aaf0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aaf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaf9:	8d 50 01             	lea    edx,[eax+0x1]
c001aafc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab00:	8a 00                	mov    al,BYTE PTR [eax]
c001ab02:	0f b6 c0             	movzx  eax,al
c001ab05:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ab0a:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ab0f:	c1 e0 08             	shl    eax,0x8
c001ab12:	89 c2                	mov    edx,eax
c001ab14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab18:	09 d0                	or     eax,edx
c001ab1a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ab1e:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab22:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ab27:	75 3a                	jne    c001ab63 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ab29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab2d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab30:	66 3d dc 05          	cmp    ax,0x5dc
c001ab34:	77 10                	ja     c001ab46 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ab36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab3a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab3d:	0f b7 c0             	movzx  eax,ax
c001ab40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ab44:	eb 1d                	jmp    c001ab63 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ab46:	83 ec 0c             	sub    esp,0xc
c001ab49:	68 a8 bc 02 c0       	push   0xc002bca8
c001ab4e:	e8 50 82 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ab53:	83 c4 10             	add    esp,0x10
c001ab56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab5a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab5e:	e9 c0 00 00 00       	jmp    c001ac23 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ab63:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ab67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab6d:	83 ec 04             	sub    esp,0x4
c001ab70:	52                   	push   edx
c001ab71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab75:	50                   	push   eax
c001ab76:	e8 d1 5b fe ff       	call   c000074c <memcpy>
c001ab7b:	83 c4 10             	add    esp,0x10
c001ab7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab82:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ab86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab91:	8a 00                	mov    al,BYTE PTR [eax]
c001ab93:	0f b6 c0             	movzx  eax,al
c001ab96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab9e:	8d 50 01             	lea    edx,[eax+0x1]
c001aba1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aba5:	8a 00                	mov    al,BYTE PTR [eax]
c001aba7:	0f b6 c0             	movzx  eax,al
c001abaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abb2:	8d 50 01             	lea    edx,[eax+0x1]
c001abb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abb9:	8a 00                	mov    al,BYTE PTR [eax]
c001abbb:	0f b6 c0             	movzx  eax,al
c001abbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abc2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abc6:	8d 50 01             	lea    edx,[eax+0x1]
c001abc9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abcd:	8a 00                	mov    al,BYTE PTR [eax]
c001abcf:	0f b6 c0             	movzx  eax,al
c001abd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001abd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abda:	c1 e0 18             	shl    eax,0x18
c001abdd:	89 c2                	mov    edx,eax
c001abdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe3:	c1 e0 10             	shl    eax,0x10
c001abe6:	09 c2                	or     edx,eax
c001abe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abec:	c1 e0 08             	shl    eax,0x8
c001abef:	09 d0                	or     eax,edx
c001abf1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001abf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abfd:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ac01:	83 e8 04             	sub    eax,0x4
c001ac04:	83 ec 08             	sub    esp,0x8
c001ac07:	50                   	push   eax
c001ac08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ac0c:	e8 b6 fc ff ff       	call   c001a8c7 <Net::crc32Calc(unsigned char*, int)>
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ac18:	0f 94 c2             	sete   dl
c001ac1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac1f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac22:	90                   	nop
c001ac23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac27:	83 c4 2c             	add    esp,0x2c
c001ac2a:	c2 04 00             	ret    0x4

c001ac2d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac2d:	55                   	push   ebp
c001ac2e:	57                   	push   edi
c001ac2f:	56                   	push   esi
c001ac30:	53                   	push   ebx
c001ac31:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac37:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac3e:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac40:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac43:	80 fb 40             	cmp    bl,0x40
c001ac46:	75 1b                	jne    c001ac63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac48:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac4a:	84 d2                	test   dl,dl
c001ac4c:	0f 84 f1 00 00 00    	je     c001ad43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac52:	8d 46 01             	lea    eax,[esi+0x1]
c001ac55:	80 fa 3a             	cmp    dl,0x3a
c001ac58:	74 04                	je     c001ac5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac5a:	89 c6                	mov    esi,eax
c001ac5c:	eb ea                	jmp    c001ac48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac5e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac61:	89 c6                	mov    esi,eax
c001ac63:	50                   	push   eax
c001ac64:	6a 40                	push   0x40
c001ac66:	6a 00                	push   0x0
c001ac68:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac6c:	50                   	push   eax
c001ac6d:	e8 0e 5b fe ff       	call   c0000780 <memset>
c001ac72:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac79:	31 c0                	xor    eax,eax
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac80:	84 c9                	test   cl,cl
c001ac82:	0f 84 bb 00 00 00    	je     c001ad43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac88:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac8d:	0f 8f b0 00 00 00    	jg     c001ad43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac93:	80 f9 0a             	cmp    cl,0xa
c001ac96:	0f 85 98 00 00 00    	jne    c001ad34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac9c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001aca1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001aca5:	a8 df                	test   al,0xdf
c001aca7:	0f 94 c1             	sete   cl
c001acaa:	3c 23                	cmp    al,0x23
c001acac:	0f 94 c2             	sete   dl
c001acaf:	08 d1                	or     cl,dl
c001acb1:	75 4a                	jne    c001acfd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acb3:	8d 50 f7             	lea    edx,[eax-0x9]
c001acb6:	80 fa 01             	cmp    dl,0x1
c001acb9:	76 42                	jbe    c001acfd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acbb:	3c 5b                	cmp    al,0x5b
c001acbd:	75 42                	jne    c001ad01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001acbf:	80 fb 40             	cmp    bl,0x40
c001acc2:	75 39                	jne    c001acfd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acc4:	83 ec 0c             	sub    esp,0xc
c001acc7:	8d 54 24 65          	lea    edx,[esp+0x65]
c001accb:	52                   	push   edx
c001accc:	e8 cb 5a fe ff       	call   c000079c <strlen>
c001acd1:	83 c4 10             	add    esp,0x10
c001acd4:	83 f8 3f             	cmp    eax,0x3f
c001acd7:	77 6a                	ja     c001ad43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acd9:	50                   	push   eax
c001acda:	50                   	push   eax
c001acdb:	8d 54 24 61          	lea    edx,[esp+0x61]
c001acdf:	52                   	push   edx
c001ace0:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ace4:	52                   	push   edx
c001ace5:	e8 52 5b fe ff       	call   c000083c <strcpy>
c001acea:	58                   	pop    eax
c001aceb:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acef:	52                   	push   edx
c001acf0:	e8 a7 5a fe ff       	call   c000079c <strlen>
c001acf5:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	31 d2                	xor    edx,edx
c001acff:	eb 3a                	jmp    c001ad3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad01:	80 fb 40             	cmp    bl,0x40
c001ad04:	74 06                	je     c001ad0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad06:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad0a:	eb 20                	jmp    c001ad2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad0c:	50                   	push   eax
c001ad0d:	50                   	push   eax
c001ad0e:	55                   	push   ebp
c001ad0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad13:	50                   	push   eax
c001ad14:	e8 af 5b fe ff       	call   c00008c8 <strcmp>
c001ad19:	83 c4 10             	add    esp,0x10
c001ad1c:	85 c0                	test   eax,eax
c001ad1e:	75 dd                	jne    c001acfd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad20:	eb e4                	jmp    c001ad06 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad22:	8d 50 01             	lea    edx,[eax+0x1]
c001ad25:	80 f9 3d             	cmp    cl,0x3d
c001ad28:	74 1d                	je     c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad2a:	89 d0                	mov    eax,edx
c001ad2c:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad2e:	84 c9                	test   cl,cl
c001ad30:	75 f0                	jne    c001ad22 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad32:	eb 0f                	jmp    c001ad43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad34:	8d 50 01             	lea    edx,[eax+0x1]
c001ad37:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad3b:	47                   	inc    edi
c001ad3c:	89 d0                	mov    eax,edx
c001ad3e:	e9 3b ff ff ff       	jmp    c001ac7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad43:	31 c0                	xor    eax,eax
c001ad45:	eb 33                	jmp    c001ad7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad4b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad4e:	50                   	push   eax
c001ad4f:	50                   	push   eax
c001ad50:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad54:	50                   	push   eax
c001ad55:	56                   	push   esi
c001ad56:	e8 6d 5b fe ff       	call   c00008c8 <strcmp>
c001ad5b:	83 c4 10             	add    esp,0x10
c001ad5e:	85 c0                	test   eax,eax
c001ad60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad64:	75 97                	jne    c001acfd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad66:	51                   	push   ecx
c001ad67:	51                   	push   ecx
c001ad68:	52                   	push   edx
c001ad69:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad70:	e8 c7 5a fe ff       	call   c000083c <strcpy>
c001ad75:	83 c4 10             	add    esp,0x10
c001ad78:	b0 01                	mov    al,0x1
c001ad7a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad80:	5b                   	pop    ebx
c001ad81:	5e                   	pop    esi
c001ad82:	5f                   	pop    edi
c001ad83:	5d                   	pop    ebp
c001ad84:	c3                   	ret    

c001ad85 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad85:	57                   	push   edi
c001ad86:	56                   	push   esi
c001ad87:	53                   	push   ebx
c001ad88:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad8e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad95:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad9c:	53                   	push   ebx
c001ad9d:	e8 fa 59 fe ff       	call   c000079c <strlen>
c001ada2:	89 34 24             	mov    DWORD PTR [esp],esi
c001ada5:	89 c7                	mov    edi,eax
c001ada7:	e8 f0 59 fe ff       	call   c000079c <strlen>
c001adac:	83 c4 10             	add    esp,0x10
c001adaf:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001adb3:	3d ff 00 00 00       	cmp    eax,0xff
c001adb8:	0f 87 d3 00 00 00    	ja     c001ae91 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adbe:	57                   	push   edi
c001adbf:	57                   	push   edi
c001adc0:	56                   	push   esi
c001adc1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001adc5:	56                   	push   esi
c001adc6:	e8 71 5a fe ff       	call   c000083c <strcpy>
c001adcb:	58                   	pop    eax
c001adcc:	5a                   	pop    edx
c001adcd:	68 f1 c1 02 c0       	push   0xc002c1f1
c001add2:	56                   	push   esi
c001add3:	e8 a4 5b fe ff       	call   c000097c <strcat>
c001add8:	59                   	pop    ecx
c001add9:	5f                   	pop    edi
c001adda:	53                   	push   ebx
c001addb:	56                   	push   esi
c001addc:	e8 9b 5b fe ff       	call   c000097c <strcat>
c001ade1:	58                   	pop    eax
c001ade2:	5a                   	pop    edx
c001ade3:	68 f4 bc 02 c0       	push   0xc002bcf4
c001ade8:	56                   	push   esi
c001ade9:	e8 8e 5b fe ff       	call   c000097c <strcat>
c001adee:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001adf5:	e8 51 4a ff ff       	call   c000f84b <malloc>
c001adfa:	83 c4 0c             	add    esp,0xc
c001adfd:	89 c3                	mov    ebx,eax
c001adff:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c001ae05:	56                   	push   esi
c001ae06:	50                   	push   eax
c001ae07:	e8 f6 84 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001ae0c:	83 c4 10             	add    esp,0x10
c001ae0f:	85 db                	test   ebx,ebx
c001ae11:	74 7e                	je     c001ae91 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae13:	51                   	push   ecx
c001ae14:	51                   	push   ecx
c001ae15:	6a 01                	push   0x1
c001ae17:	53                   	push   ebx
c001ae18:	e8 49 85 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c001ae1d:	83 c4 10             	add    esp,0x10
c001ae20:	85 c0                	test   eax,eax
c001ae22:	74 08                	je     c001ae2c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae24:	83 ec 0c             	sub    esp,0xc
c001ae27:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae29:	53                   	push   ebx
c001ae2a:	eb 5f                	jmp    c001ae8b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae2c:	52                   	push   edx
c001ae2d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae31:	50                   	push   eax
c001ae32:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae36:	50                   	push   eax
c001ae37:	53                   	push   ebx
c001ae38:	e8 d5 87 ff ff       	call   c0013612 <File::stat(unsigned long long*, bool*)>
c001ae3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae41:	83 c4 10             	add    esp,0x10
c001ae44:	89 c1                	mov    ecx,eax
c001ae46:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae4a:	74 31                	je     c001ae7d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae4c:	83 ec 0c             	sub    esp,0xc
c001ae4f:	50                   	push   eax
c001ae50:	e8 f6 49 ff ff       	call   c000f84b <malloc>
c001ae55:	89 c6                	mov    esi,eax
c001ae57:	58                   	pop    eax
c001ae58:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae5a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae5e:	52                   	push   edx
c001ae5f:	56                   	push   esi
c001ae60:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae64:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae68:	53                   	push   ebx
c001ae69:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae6c:	83 c4 20             	add    esp,0x20
c001ae6f:	85 c0                	test   eax,eax
c001ae71:	75 0a                	jne    c001ae7d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae77:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae7b:	74 18                	je     c001ae95 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae7d:	83 ec 0c             	sub    esp,0xc
c001ae80:	53                   	push   ebx
c001ae81:	e8 3e 85 ff ff       	call   c00133c4 <File::close()>
c001ae86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	31 c0                	xor    eax,eax
c001ae93:	eb 3b                	jmp    c001aed0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae95:	83 ec 0c             	sub    esp,0xc
c001ae98:	53                   	push   ebx
c001ae99:	e8 26 85 ff ff       	call   c00133c4 <File::close()>
c001ae9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aea0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aea3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aea6:	83 c4 0c             	add    esp,0xc
c001aea9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aeb0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aeb7:	56                   	push   esi
c001aeb8:	e8 70 fd ff ff       	call   c001ac2d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aebd:	89 34 24             	mov    DWORD PTR [esp],esi
c001aec0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aec4:	e8 92 49 ff ff       	call   c000f85b <free>
c001aec9:	83 c4 10             	add    esp,0x10
c001aecc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aed0:	81 c4 20 01 00 00    	add    esp,0x120
c001aed6:	5b                   	pop    ebx
c001aed7:	5e                   	pop    esi
c001aed8:	5f                   	pop    edi
c001aed9:	c3                   	ret    

c001aeda <Reg::getLine(char*, char*, char*)>:
c001aeda:	57                   	push   edi
c001aedb:	56                   	push   esi
c001aedc:	53                   	push   ebx
c001aedd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aee1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aee5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aee9:	57                   	push   edi
c001aeea:	56                   	push   esi
c001aeeb:	53                   	push   ebx
c001aeec:	68 f9 bc 02 c0       	push   0xc002bcf9
c001aef1:	e8 8f fe ff ff       	call   c001ad85 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aef6:	83 c4 10             	add    esp,0x10
c001aef9:	84 c0                	test   al,al
c001aefb:	75 10                	jne    c001af0d <Reg::getLine(char*, char*, char*)+0x33>
c001aefd:	57                   	push   edi
c001aefe:	56                   	push   esi
c001aeff:	53                   	push   ebx
c001af00:	68 1e bd 02 c0       	push   0xc002bd1e
c001af05:	e8 7b fe ff ff       	call   c001ad85 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af0a:	83 c4 10             	add    esp,0x10
c001af0d:	5b                   	pop    ebx
c001af0e:	5e                   	pop    esi
c001af0f:	5f                   	pop    edi
c001af10:	c3                   	ret    

c001af11 <Reg::readInt(char*, char*, int*)>:
c001af11:	55                   	push   ebp
c001af12:	57                   	push   edi
c001af13:	56                   	push   esi
c001af14:	53                   	push   ebx
c001af15:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af1b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af1f:	57                   	push   edi
c001af20:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af27:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af2e:	e8 a7 ff ff ff       	call   c001aeda <Reg::getLine(char*, char*, char*)>
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	84 c0                	test   al,al
c001af38:	0f 84 b3 00 00 00    	je     c001aff1 <Reg::readInt(char*, char*, int*)+0xe0>
c001af3e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af42:	80 fa 2b             	cmp    dl,0x2b
c001af45:	74 0c                	je     c001af53 <Reg::readInt(char*, char*, int*)+0x42>
c001af47:	80 fa 2d             	cmp    dl,0x2d
c001af4a:	75 0e                	jne    c001af5a <Reg::readInt(char*, char*, int*)+0x49>
c001af4c:	ba 01 00 00 00       	mov    edx,0x1
c001af51:	eb 0b                	jmp    c001af5e <Reg::readInt(char*, char*, int*)+0x4d>
c001af53:	ba 01 00 00 00       	mov    edx,0x1
c001af58:	eb 02                	jmp    c001af5c <Reg::readInt(char*, char*, int*)+0x4b>
c001af5a:	31 d2                	xor    edx,edx
c001af5c:	31 c0                	xor    eax,eax
c001af5e:	be 0a 00 00 00       	mov    esi,0xa
c001af63:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af68:	75 20                	jne    c001af8a <Reg::readInt(char*, char*, int*)+0x79>
c001af6a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af6e:	80 f9 78             	cmp    cl,0x78
c001af71:	75 0a                	jne    c001af7d <Reg::readInt(char*, char*, int*)+0x6c>
c001af73:	83 c2 02             	add    edx,0x2
c001af76:	be 10 00 00 00       	mov    esi,0x10
c001af7b:	eb 0d                	jmp    c001af8a <Reg::readInt(char*, char*, int*)+0x79>
c001af7d:	80 f9 62             	cmp    cl,0x62
c001af80:	75 08                	jne    c001af8a <Reg::readInt(char*, char*, int*)+0x79>
c001af82:	83 c2 02             	add    edx,0x2
c001af85:	be 02 00 00 00       	mov    esi,0x2
c001af8a:	01 d7                	add    edi,edx
c001af8c:	31 d2                	xor    edx,edx
c001af8e:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af90:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af94:	80 fb 0d             	cmp    bl,0xd
c001af97:	0f 94 c3             	sete   bl
c001af9a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af9f:	0f 94 c1             	sete   cl
c001afa2:	08 cb                	or     bl,cl
c001afa4:	75 3a                	jne    c001afe0 <Reg::readInt(char*, char*, int*)+0xcf>
c001afa6:	0f af d6             	imul   edx,esi
c001afa9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001afae:	83 fe 10             	cmp    esi,0x10
c001afb1:	75 26                	jne    c001afd9 <Reg::readInt(char*, char*, int*)+0xc8>
c001afb3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afb7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001afba:	89 e9                	mov    ecx,ebp
c001afbc:	80 f9 05             	cmp    cl,0x5
c001afbf:	77 06                	ja     c001afc7 <Reg::readInt(char*, char*, int*)+0xb6>
c001afc1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001afc5:	eb 16                	jmp    c001afdd <Reg::readInt(char*, char*, int*)+0xcc>
c001afc7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afcb:	83 e9 61             	sub    ecx,0x61
c001afce:	80 f9 05             	cmp    cl,0x5
c001afd1:	77 06                	ja     c001afd9 <Reg::readInt(char*, char*, int*)+0xc8>
c001afd3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001afd7:	eb 04                	jmp    c001afdd <Reg::readInt(char*, char*, int*)+0xcc>
c001afd9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001afdd:	47                   	inc    edi
c001afde:	eb ae                	jmp    c001af8e <Reg::readInt(char*, char*, int*)+0x7d>
c001afe0:	84 c0                	test   al,al
c001afe2:	74 02                	je     c001afe6 <Reg::readInt(char*, char*, int*)+0xd5>
c001afe4:	f7 da                	neg    edx
c001afe6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001afed:	89 10                	mov    DWORD PTR [eax],edx
c001afef:	88 d8                	mov    al,bl
c001aff1:	81 c4 ec 00 00 00    	add    esp,0xec
c001aff7:	5b                   	pop    ebx
c001aff8:	5e                   	pop    esi
c001aff9:	5f                   	pop    edi
c001affa:	5d                   	pop    ebp
c001affb:	c3                   	ret    

c001affc <Reg::readString(char*, char*, char*, int)>:
c001affc:	57                   	push   edi
c001affd:	56                   	push   esi
c001affe:	53                   	push   ebx
c001afff:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b005:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b00c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b010:	57                   	push   edi
c001b011:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b018:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b01f:	e8 b6 fe ff ff       	call   c001aeda <Reg::getLine(char*, char*, char*)>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	89 c6                	mov    esi,eax
c001b029:	84 c0                	test   al,al
c001b02b:	74 44                	je     c001b071 <Reg::readString(char*, char*, char*, int)+0x75>
c001b02d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b034:	31 c0                	xor    eax,eax
c001b036:	4a                   	dec    edx
c001b037:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b03a:	84 c9                	test   cl,cl
c001b03c:	74 0f                	je     c001b04d <Reg::readString(char*, char*, char*, int)+0x51>
c001b03e:	39 c2                	cmp    edx,eax
c001b040:	7e 0b                	jle    c001b04d <Reg::readString(char*, char*, char*, int)+0x51>
c001b042:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b045:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b04a:	40                   	inc    eax
c001b04b:	eb ea                	jmp    c001b037 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b04d:	83 ec 0c             	sub    esp,0xc
c001b050:	53                   	push   ebx
c001b051:	e8 46 57 fe ff       	call   c000079c <strlen>
c001b056:	83 c4 10             	add    esp,0x10
c001b059:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b05e:	75 11                	jne    c001b071 <Reg::readString(char*, char*, char*, int)+0x75>
c001b060:	83 ec 0c             	sub    esp,0xc
c001b063:	53                   	push   ebx
c001b064:	e8 33 57 fe ff       	call   c000079c <strlen>
c001b069:	83 c4 10             	add    esp,0x10
c001b06c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b071:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b077:	89 f0                	mov    eax,esi
c001b079:	5b                   	pop    ebx
c001b07a:	5e                   	pop    esi
c001b07b:	5f                   	pop    edi
c001b07c:	c3                   	ret    

c001b07d <Reg::readBool(char*, char*, bool*)>:
c001b07d:	83 ec 20             	sub    esp,0x20
c001b080:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b084:	50                   	push   eax
c001b085:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b089:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b08d:	e8 7f fe ff ff       	call   c001af11 <Reg::readInt(char*, char*, int*)>
c001b092:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b097:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b09b:	0f 95 02             	setne  BYTE PTR [edx]
c001b09e:	83 c4 2c             	add    esp,0x2c
c001b0a1:	c3                   	ret    

c001b0a2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b0a2:	53                   	push   ebx
c001b0a3:	83 ec 1c             	sub    esp,0x1c
c001b0a6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b0aa:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b0ae:	50                   	push   eax
c001b0af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0b7:	e8 c1 ff ff ff       	call   c001b07d <Reg::readBool(char*, char*, bool*)>
c001b0bc:	83 c4 10             	add    esp,0x10
c001b0bf:	84 c0                	test   al,al
c001b0c1:	74 04                	je     c001b0c7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b0c3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b0c7:	88 d8                	mov    al,bl
c001b0c9:	83 c4 18             	add    esp,0x18
c001b0cc:	5b                   	pop    ebx
c001b0cd:	c3                   	ret    

c001b0ce <Reg::readIntWithDefault(char*, char*, int)>:
c001b0ce:	53                   	push   ebx
c001b0cf:	83 ec 1c             	sub    esp,0x1c
c001b0d2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0d6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0da:	50                   	push   eax
c001b0db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0e3:	e8 29 fe ff ff       	call   c001af11 <Reg::readInt(char*, char*, int*)>
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	84 c0                	test   al,al
c001b0ed:	74 04                	je     c001b0f3 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b0ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0f3:	89 d8                	mov    eax,ebx
c001b0f5:	83 c4 18             	add    esp,0x18
c001b0f8:	5b                   	pop    ebx
c001b0f9:	c3                   	ret    

c001b0fa <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b0fa:	57                   	push   edi
c001b0fb:	56                   	push   esi
c001b0fc:	53                   	push   ebx
c001b0fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b101:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b105:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b109:	56                   	push   esi
c001b10a:	53                   	push   ebx
c001b10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b113:	e8 e4 fe ff ff       	call   c001affc <Reg::readString(char*, char*, char*, int)>
c001b118:	83 c4 10             	add    esp,0x10
c001b11b:	84 c0                	test   al,al
c001b11d:	75 1b                	jne    c001b13a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b11f:	50                   	push   eax
c001b120:	56                   	push   esi
c001b121:	4e                   	dec    esi
c001b122:	6a 00                	push   0x0
c001b124:	53                   	push   ebx
c001b125:	e8 56 56 fe ff       	call   c0000780 <memset>
c001b12a:	83 c4 0c             	add    esp,0xc
c001b12d:	56                   	push   esi
c001b12e:	57                   	push   edi
c001b12f:	53                   	push   ebx
c001b130:	89 fb                	mov    ebx,edi
c001b132:	e8 15 56 fe ff       	call   c000074c <memcpy>
c001b137:	83 c4 10             	add    esp,0x10
c001b13a:	89 d8                	mov    eax,ebx
c001b13c:	5b                   	pop    ebx
c001b13d:	5e                   	pop    esi
c001b13e:	5f                   	pop    edi
c001b13f:	c3                   	ret    

c001b140 <Sys::eject(regs*)>:
c001b140:	83 ec 0c             	sub    esp,0xc
c001b143:	83 ca ff             	or     edx,0xffffffff
c001b146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b14a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b14d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b152:	83 e9 41             	sub    ecx,0x41
c001b155:	83 f9 19             	cmp    ecx,0x19
c001b158:	77 18                	ja     c001b172 <Sys::eject(regs*)+0x32>
c001b15a:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c001b161:	85 c9                	test   ecx,ecx
c001b163:	74 0d                	je     c001b172 <Sys::eject(regs*)+0x32>
c001b165:	83 ec 0c             	sub    esp,0xc
c001b168:	51                   	push   ecx
c001b169:	e8 5c b4 ff ff       	call   c00165ca <LogicalDisk::eject()>
c001b16e:	83 c4 10             	add    esp,0x10
c001b171:	99                   	cdq    
c001b172:	83 c4 0c             	add    esp,0xc
c001b175:	c3                   	ret    

c001b176 <Sys::exit(regs*)>:
c001b176:	83 ec 18             	sub    esp,0x18
c001b179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b17d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b180:	e8 b4 35 00 00       	call   c001e739 <terminateTask(int)>
c001b185:	83 c8 ff             	or     eax,0xffffffff
c001b188:	83 c4 1c             	add    esp,0x1c
c001b18b:	89 c2                	mov    edx,eax
c001b18d:	c3                   	ret    

c001b18e <Sys::getCwd(regs*)>:
c001b18e:	83 ec 10             	sub    esp,0x10
c001b191:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b195:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b198:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b19b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1a3:	e8 5c 7f ff ff       	call   c0013104 <Fs::getcwd(Process*, char*, int)>
c001b1a8:	83 c4 1c             	add    esp,0x1c
c001b1ab:	99                   	cdq    
c001b1ac:	c3                   	ret    

c001b1ad <Sys::getPID(regs*)>:
c001b1ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1b7:	99                   	cdq    
c001b1b8:	c3                   	ret    

c001b1b9 <Sys::getRAMData(regs*)>:
c001b1b9:	8b 0d 94 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e494
c001b1bf:	6b 05 90 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e490,0x64
c001b1c6:	99                   	cdq    
c001b1c7:	f7 f9                	idiv   ecx
c001b1c9:	c1 e0 18             	shl    eax,0x18
c001b1cc:	09 c8                	or     eax,ecx
c001b1ce:	99                   	cdq    
c001b1cf:	c3                   	ret    

c001b1d0 <Sys::loadDLL(regs*)>:
c001b1d0:	56                   	push   esi
c001b1d1:	53                   	push   ebx
c001b1d2:	31 d2                	xor    edx,edx
c001b1d4:	51                   	push   ecx
c001b1d5:	b8 01 00 00 00       	mov    eax,0x1
c001b1da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1de:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b1e2:	0f 84 8c 00 00 00    	je     c001b274 <Sys::loadDLL(regs*)+0xa4>
c001b1e8:	83 ec 0c             	sub    esp,0xc
c001b1eb:	68 14 01 00 00       	push   0x114
c001b1f0:	e8 56 46 ff ff       	call   c000f84b <malloc>
c001b1f5:	83 c4 0c             	add    esp,0xc
c001b1f8:	89 c3                	mov    ebx,eax
c001b1fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1ff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b202:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b205:	53                   	push   ebx
c001b206:	e8 f7 80 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001b20b:	83 c4 10             	add    esp,0x10
c001b20e:	31 d2                	xor    edx,edx
c001b210:	b8 02 00 00 00       	mov    eax,0x2
c001b215:	85 db                	test   ebx,ebx
c001b217:	74 5b                	je     c001b274 <Sys::loadDLL(regs*)+0xa4>
c001b219:	83 ec 0c             	sub    esp,0xc
c001b21c:	53                   	push   ebx
c001b21d:	e8 b2 83 ff ff       	call   c00135d4 <File::exists()>
c001b222:	83 c4 10             	add    esp,0x10
c001b225:	84 c0                	test   al,al
c001b227:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b229:	75 11                	jne    c001b23c <Sys::loadDLL(regs*)+0x6c>
c001b22b:	83 ec 0c             	sub    esp,0xc
c001b22e:	53                   	push   ebx
c001b22f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b232:	83 c4 10             	add    esp,0x10
c001b235:	b8 03 00 00 00       	mov    eax,0x3
c001b23a:	eb 36                	jmp    c001b272 <Sys::loadDLL(regs*)+0xa2>
c001b23c:	83 ec 0c             	sub    esp,0xc
c001b23f:	53                   	push   ebx
c001b240:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b243:	58                   	pop    eax
c001b244:	5a                   	pop    edx
c001b245:	6a 00                	push   0x0
c001b247:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b24a:	e8 c5 23 00 00       	call   c001d614 <Thr::loadDLL(char const*, bool)>
c001b24f:	83 c4 10             	add    esp,0x10
c001b252:	89 c1                	mov    ecx,eax
c001b254:	31 d2                	xor    edx,edx
c001b256:	b8 04 00 00 00       	mov    eax,0x4
c001b25b:	85 c9                	test   ecx,ecx
c001b25d:	74 15                	je     c001b274 <Sys::loadDLL(regs*)+0xa4>
c001b25f:	53                   	push   ebx
c001b260:	53                   	push   ebx
c001b261:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c001b267:	51                   	push   ecx
c001b268:	e8 db 25 00 00       	call   c001d848 <Thr::executeDLL(unsigned long, void*)>
c001b26d:	83 c4 10             	add    esp,0x10
c001b270:	31 c0                	xor    eax,eax
c001b272:	31 d2                	xor    edx,edx
c001b274:	59                   	pop    ecx
c001b275:	5b                   	pop    ebx
c001b276:	5e                   	pop    esi
c001b277:	c3                   	ret    

c001b278 <Sys::read(regs*)>:
c001b278:	57                   	push   edi
c001b279:	56                   	push   esi
c001b27a:	53                   	push   ebx
c001b27b:	83 ec 10             	sub    esp,0x10
c001b27e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b282:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b285:	83 f8 02             	cmp    eax,0x2
c001b288:	77 10                	ja     c001b29a <Sys::read(regs*)+0x22>
c001b28a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b28f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b292:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b298:	eb 0e                	jmp    c001b2a8 <Sys::read(regs*)+0x30>
c001b29a:	83 ec 0c             	sub    esp,0xc
c001b29d:	50                   	push   eax
c001b29e:	e8 d6 65 ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001b2a3:	83 c4 10             	add    esp,0x10
c001b2a6:	89 c1                	mov    ecx,eax
c001b2a8:	83 c8 ff             	or     eax,0xffffffff
c001b2ab:	85 c9                	test   ecx,ecx
c001b2ad:	89 c2                	mov    edx,eax
c001b2af:	74 28                	je     c001b2d9 <Sys::read(regs*)+0x61>
c001b2b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2b9:	31 ff                	xor    edi,edi
c001b2bb:	83 ec 0c             	sub    esp,0xc
c001b2be:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b2c0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b2c4:	52                   	push   edx
c001b2c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2c8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b2cb:	57                   	push   edi
c001b2cc:	56                   	push   esi
c001b2cd:	51                   	push   ecx
c001b2ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2d5:	83 c4 20             	add    esp,0x20
c001b2d8:	99                   	cdq    
c001b2d9:	83 c4 10             	add    esp,0x10
c001b2dc:	5b                   	pop    ebx
c001b2dd:	5e                   	pop    esi
c001b2de:	5f                   	pop    edi
c001b2df:	c3                   	ret    

c001b2e0 <Sys::sbrk(regs*)>:
c001b2e0:	56                   	push   esi
c001b2e1:	53                   	push   ebx
c001b2e2:	50                   	push   eax
c001b2e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2ef:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b2f2:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b2f8:	85 db                	test   ebx,ebx
c001b2fa:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b2fd:	74 02                	je     c001b301 <Sys::sbrk(regs*)+0x21>
c001b2ff:	79 06                	jns    c001b307 <Sys::sbrk(regs*)+0x27>
c001b301:	89 f0                	mov    eax,esi
c001b303:	31 d2                	xor    edx,edx
c001b305:	eb 2a                	jmp    c001b331 <Sys::sbrk(regs*)+0x51>
c001b307:	83 c8 ff             	or     eax,0xffffffff
c001b30a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b310:	89 c2                	mov    edx,eax
c001b312:	77 1d                	ja     c001b331 <Sys::sbrk(regs*)+0x51>
c001b314:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b31a:	50                   	push   eax
c001b31b:	c1 ea 0c             	shr    edx,0xc
c001b31e:	68 07 0c 00 00       	push   0xc07
c001b323:	52                   	push   edx
c001b324:	51                   	push   ecx
c001b325:	e8 d2 6f ff ff       	call   c00122fc <VAS::allocatePages(int, int)>
c001b32a:	89 f0                	mov    eax,esi
c001b32c:	31 d2                	xor    edx,edx
c001b32e:	83 c4 10             	add    esp,0x10
c001b331:	59                   	pop    ecx
c001b332:	5b                   	pop    ebx
c001b333:	5e                   	pop    esi
c001b334:	c3                   	ret    

c001b335 <Sys::setCwd(regs*)>:
c001b335:	83 ec 14             	sub    esp,0x14
c001b338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b33c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b33f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b344:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b347:	e8 27 83 ff ff       	call   c0013673 <Fs::setcwd(Process*, char*)>
c001b34c:	83 c4 1c             	add    esp,0x1c
c001b34f:	99                   	cdq    
c001b350:	c3                   	ret    

c001b351 <Sys::setTime(regs*)>:
c001b351:	55                   	push   ebp
c001b352:	31 d2                	xor    edx,edx
c001b354:	57                   	push   edi
c001b355:	bf 18 00 00 00       	mov    edi,0x18
c001b35a:	56                   	push   esi
c001b35b:	53                   	push   ebx
c001b35c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b361:	83 ec 30             	sub    esp,0x30
c001b364:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b368:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b36b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b36e:	f7 f3                	div    ebx
c001b370:	89 d6                	mov    esi,edx
c001b372:	31 d2                	xor    edx,edx
c001b374:	f7 f3                	div    ebx
c001b376:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b379:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b37d:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b382:	31 d2                	xor    edx,edx
c001b384:	f7 f3                	div    ebx
c001b386:	31 d2                	xor    edx,edx
c001b388:	bb 0c 00 00 00       	mov    ebx,0xc
c001b38d:	f7 f7                	div    edi
c001b38f:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b392:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b396:	0f b7 cd             	movzx  ecx,bp
c001b399:	56                   	push   esi
c001b39a:	89 c7                	mov    edi,eax
c001b39c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b3a0:	c1 e6 10             	shl    esi,0x10
c001b3a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3a7:	83 e7 1f             	and    edi,0x1f
c001b3aa:	51                   	push   ecx
c001b3ab:	47                   	inc    edi
c001b3ac:	c1 e8 05             	shr    eax,0x5
c001b3af:	31 d2                	xor    edx,edx
c001b3b1:	f7 f3                	div    ebx
c001b3b3:	31 db                	xor    ebx,ebx
c001b3b5:	52                   	push   edx
c001b3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b3ba:	57                   	push   edi
c001b3bb:	68 39 bd 02 c0       	push   0xc002bd39
c001b3c0:	e8 de 79 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b3c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b3c9:	89 f8                	mov    eax,edi
c001b3cb:	31 c9                	xor    ecx,ecx
c001b3cd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b3d1:	88 c1                	mov    cl,al
c001b3d3:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b3d9:	88 d5                	mov    ch,dl
c001b3db:	c1 e0 10             	shl    eax,0x10
c001b3de:	0f b7 d1             	movzx  edx,cx
c001b3e1:	09 c2                	or     edx,eax
c001b3e3:	89 d8                	mov    eax,ebx
c001b3e5:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b3ea:	09 f0                	or     eax,esi
c001b3ec:	89 c3                	mov    ebx,eax
c001b3ee:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b3f2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b3f6:	83 c4 18             	add    esp,0x18
c001b3f9:	53                   	push   ebx
c001b3fa:	52                   	push   edx
c001b3fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3ff:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b403:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b407:	e8 81 89 ff ff       	call   c0013d8d <datetimeToSeconds(datetime_t)>
c001b40c:	83 c4 0c             	add    esp,0xc
c001b40f:	52                   	push   edx
c001b410:	50                   	push   eax
c001b411:	56                   	push   esi
c001b412:	e8 fd 8a ff ff       	call   c0013f14 <secondsToDatetime(unsigned long long)>
c001b417:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b41b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b41f:	51                   	push   ecx
c001b420:	89 d6                	mov    esi,edx
c001b422:	51                   	push   ecx
c001b423:	c1 ee 10             	shr    esi,0x10
c001b426:	89 f3                	mov    ebx,esi
c001b428:	0f b6 f3             	movzx  esi,bl
c001b42b:	56                   	push   esi
c001b42c:	0f b6 f6             	movzx  esi,dh
c001b42f:	0f b6 d2             	movzx  edx,dl
c001b432:	56                   	push   esi
c001b433:	52                   	push   edx
c001b434:	89 c2                	mov    edx,eax
c001b436:	c1 ea 10             	shr    edx,0x10
c001b439:	52                   	push   edx
c001b43a:	0f b6 d4             	movzx  edx,ah
c001b43d:	0f b6 c0             	movzx  eax,al
c001b440:	52                   	push   edx
c001b441:	50                   	push   eax
c001b442:	68 55 bd 02 c0       	push   0xc002bd55
c001b447:	e8 57 79 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b44c:	83 c4 2c             	add    esp,0x2c
c001b44f:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001b454:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b458:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b45c:	53                   	push   ebx
c001b45d:	51                   	push   ecx
c001b45e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b464:	e8 4b 8a ff ff       	call   c0013eb4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b469:	83 f0 01             	xor    eax,0x1
c001b46c:	31 d2                	xor    edx,edx
c001b46e:	0f b6 c0             	movzx  eax,al
c001b471:	83 c4 3c             	add    esp,0x3c
c001b474:	5b                   	pop    ebx
c001b475:	5e                   	pop    esi
c001b476:	5f                   	pop    edi
c001b477:	5d                   	pop    ebp
c001b478:	c3                   	ret    

c001b479 <Sys::timezone(regs*)>:
c001b479:	53                   	push   ebx
c001b47a:	83 ec 08             	sub    esp,0x8
c001b47d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b481:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b485:	75 17                	jne    c001b49e <Sys::timezone(regs*)+0x25>
c001b487:	83 ec 0c             	sub    esp,0xc
c001b48a:	68 71 bd 02 c0       	push   0xc002bd71
c001b48f:	e8 0f 79 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b494:	83 c8 ff             	or     eax,0xffffffff
c001b497:	83 c4 10             	add    esp,0x10
c001b49a:	89 c2                	mov    edx,eax
c001b49c:	eb 20                	jmp    c001b4be <Sys::timezone(regs*)+0x45>
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	68 a9 bd 02 c0       	push   0xc002bda9
c001b4a6:	e8 f8 78 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b4ab:	58                   	pop    eax
c001b4ac:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b4af:	e8 62 87 ff ff       	call   c0013c16 <User::loadClockSettings(int)>
c001b4b4:	83 c4 10             	add    esp,0x10
c001b4b7:	b8 01 00 00 00       	mov    eax,0x1
c001b4bc:	31 d2                	xor    edx,edx
c001b4be:	83 c4 08             	add    esp,0x8
c001b4c1:	5b                   	pop    ebx
c001b4c2:	c3                   	ret    

c001b4c3 <Sys::write(regs*)>:
c001b4c3:	57                   	push   edi
c001b4c4:	56                   	push   esi
c001b4c5:	53                   	push   ebx
c001b4c6:	83 ec 10             	sub    esp,0x10
c001b4c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4d0:	83 f8 02             	cmp    eax,0x2
c001b4d3:	77 10                	ja     c001b4e5 <Sys::write(regs*)+0x22>
c001b4d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4dd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b4e3:	eb 0e                	jmp    c001b4f3 <Sys::write(regs*)+0x30>
c001b4e5:	83 ec 0c             	sub    esp,0xc
c001b4e8:	50                   	push   eax
c001b4e9:	e8 8b 63 ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001b4ee:	83 c4 10             	add    esp,0x10
c001b4f1:	89 c1                	mov    ecx,eax
c001b4f3:	83 c8 ff             	or     eax,0xffffffff
c001b4f6:	85 c9                	test   ecx,ecx
c001b4f8:	89 c2                	mov    edx,eax
c001b4fa:	74 28                	je     c001b524 <Sys::write(regs*)+0x61>
c001b4fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b504:	31 ff                	xor    edi,edi
c001b506:	83 ec 0c             	sub    esp,0xc
c001b509:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b50b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b50f:	52                   	push   edx
c001b510:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b513:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b516:	57                   	push   edi
c001b517:	56                   	push   esi
c001b518:	51                   	push   ecx
c001b519:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b51c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b520:	83 c4 20             	add    esp,0x20
c001b523:	99                   	cdq    
c001b524:	83 c4 10             	add    esp,0x10
c001b527:	5b                   	pop    ebx
c001b528:	5e                   	pop    esi
c001b529:	5f                   	pop    edi
c001b52a:	c3                   	ret    

c001b52b <Sys::wsbe(regs*)>:
c001b52b:	57                   	push   edi
c001b52c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b531:	56                   	push   esi
c001b532:	be e8 bd 02 c0       	mov    esi,0xc002bde8
c001b537:	53                   	push   ebx
c001b538:	83 ec 30             	sub    esp,0x30
c001b53b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b53f:	fc                   	cld    
c001b540:	83 ec 0c             	sub    esp,0xc
c001b543:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b545:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b549:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b54e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b551:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b557:	8b 06                	mov    eax,DWORD PTR [esi]
c001b559:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b55c:	57                   	push   edi
c001b55d:	e8 3a 52 fe ff       	call   c000079c <strlen>
c001b562:	5a                   	pop    edx
c001b563:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b567:	52                   	push   edx
c001b568:	31 d2                	xor    edx,edx
c001b56a:	57                   	push   edi
c001b56b:	52                   	push   edx
c001b56c:	50                   	push   eax
c001b56d:	56                   	push   esi
c001b56e:	ff d3                	call   ebx
c001b570:	83 c4 14             	add    esp,0x14
c001b573:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b577:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b57a:	e8 ba 31 00 00       	call   c001e739 <terminateTask(int)>
c001b57f:	83 c4 40             	add    esp,0x40
c001b582:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b587:	5b                   	pop    ebx
c001b588:	31 d2                	xor    edx,edx
c001b58a:	5e                   	pop    esi
c001b58b:	5f                   	pop    edi
c001b58c:	c3                   	ret    

c001b58d <Sys::yield(regs*)>:
c001b58d:	57                   	push   edi
c001b58e:	56                   	push   esi
c001b58f:	53                   	push   ebx
c001b590:	e8 27 27 00 00       	call   c001dcbc <lockScheduler()>
c001b595:	e8 98 2a 00 00       	call   c001e032 <schedule()>
c001b59a:	e8 1f 27 00 00       	call   c001dcbe <unlockScheduler()>
c001b59f:	8b 35 d0 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ead0
c001b5a5:	8b 3d d4 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ead4
c001b5ab:	89 f0                	mov    eax,esi
c001b5ad:	89 fb                	mov    ebx,edi
c001b5af:	89 f1                	mov    ecx,esi
c001b5b1:	c1 e0 07             	shl    eax,0x7
c001b5b4:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b5b8:	25 80 30 0f 00       	and    eax,0xf3080
c001b5bd:	c1 eb 17             	shr    ebx,0x17
c001b5c0:	31 c8                	xor    eax,ecx
c001b5c2:	89 da                	mov    edx,ebx
c001b5c4:	5b                   	pop    ebx
c001b5c5:	5e                   	pop    esi
c001b5c6:	5f                   	pop    edi
c001b5c7:	c3                   	ret    

c001b5c8 <sysCallSeekDir(regs*)>:
c001b5c8:	31 c0                	xor    eax,eax
c001b5ca:	31 d2                	xor    edx,edx
c001b5cc:	c3                   	ret    

c001b5cd <sysCallTellDir(regs*)>:
c001b5cd:	31 c0                	xor    eax,eax
c001b5cf:	31 d2                	xor    edx,edx
c001b5d1:	c3                   	ret    

c001b5d2 <sysCallVerify(regs*)>:
c001b5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5d6:	31 d2                	xor    edx,edx
c001b5d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5db:	c3                   	ret    

c001b5dc <sysFormatDisk(regs*)>:
c001b5dc:	56                   	push   esi
c001b5dd:	53                   	push   ebx
c001b5de:	53                   	push   ebx
c001b5df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5e3:	8b 1d d4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5d4
c001b5e9:	eb 25                	jmp    c001b610 <sysFormatDisk(regs*)+0x34>
c001b5eb:	83 ec 0c             	sub    esp,0xc
c001b5ee:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b5f3:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b5f6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b5f9:	50                   	push   eax
c001b5fa:	ff 34 85 60 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15a0]
c001b601:	53                   	push   ebx
c001b602:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b605:	83 c4 20             	add    esp,0x20
c001b608:	83 f8 08             	cmp    eax,0x8
c001b60b:	75 12                	jne    c001b61f <sysFormatDisk(regs*)+0x43>
c001b60d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b610:	85 db                	test   ebx,ebx
c001b612:	75 d7                	jne    c001b5eb <sysFormatDisk(regs*)+0xf>
c001b614:	59                   	pop    ecx
c001b615:	b8 03 00 00 00       	mov    eax,0x3
c001b61a:	31 d2                	xor    edx,edx
c001b61c:	5b                   	pop    ebx
c001b61d:	5e                   	pop    esi
c001b61e:	c3                   	ret    
c001b61f:	85 c0                	test   eax,eax
c001b621:	74 1b                	je     c001b63e <sysFormatDisk(regs*)+0x62>
c001b623:	83 f8 09             	cmp    eax,0x9
c001b626:	74 0b                	je     c001b633 <sysFormatDisk(regs*)+0x57>
c001b628:	59                   	pop    ecx
c001b629:	b8 02 00 00 00       	mov    eax,0x2
c001b62e:	31 d2                	xor    edx,edx
c001b630:	5b                   	pop    ebx
c001b631:	5e                   	pop    esi
c001b632:	c3                   	ret    
c001b633:	59                   	pop    ecx
c001b634:	b8 01 00 00 00       	mov    eax,0x1
c001b639:	31 d2                	xor    edx,edx
c001b63b:	5b                   	pop    ebx
c001b63c:	5e                   	pop    esi
c001b63d:	c3                   	ret    
c001b63e:	59                   	pop    ecx
c001b63f:	31 c0                	xor    eax,eax
c001b641:	31 d2                	xor    edx,edx
c001b643:	5b                   	pop    ebx
c001b644:	5e                   	pop    esi
c001b645:	c3                   	ret    

c001b646 <sysSetDiskVolumeLabel(regs*)>:
c001b646:	56                   	push   esi
c001b647:	53                   	push   ebx
c001b648:	53                   	push   ebx
c001b649:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b64d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b650:	83 f8 19             	cmp    eax,0x19
c001b653:	77 29                	ja     c001b67e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b655:	8b 0c 85 60 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd15a0]
c001b65c:	85 c9                	test   ecx,ecx
c001b65e:	74 1e                	je     c001b67e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b660:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b663:	85 d2                	test   edx,edx
c001b665:	74 17                	je     c001b67e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b667:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b66d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b66f:	52                   	push   edx
c001b670:	50                   	push   eax
c001b671:	51                   	push   ecx
c001b672:	53                   	push   ebx
c001b673:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b676:	83 c4 10             	add    esp,0x10
c001b679:	99                   	cdq    
c001b67a:	59                   	pop    ecx
c001b67b:	5b                   	pop    ebx
c001b67c:	5e                   	pop    esi
c001b67d:	c3                   	ret    
c001b67e:	59                   	pop    ecx
c001b67f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b684:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b689:	5b                   	pop    ebx
c001b68a:	5e                   	pop    esi
c001b68b:	c3                   	ret    

c001b68c <sysGetDiskVolumeLabel(regs*)>:
c001b68c:	57                   	push   edi
c001b68d:	56                   	push   esi
c001b68e:	53                   	push   ebx
c001b68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b693:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b696:	83 fa 19             	cmp    edx,0x19
c001b699:	77 34                	ja     c001b6cf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b69b:	8b 0c 95 60 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd15a0]
c001b6a2:	85 c9                	test   ecx,ecx
c001b6a4:	74 29                	je     c001b6cf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6a6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b6a9:	85 db                	test   ebx,ebx
c001b6ab:	74 22                	je     c001b6cf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6ad:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b6b0:	85 c0                	test   eax,eax
c001b6b2:	74 1b                	je     c001b6cf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6b4:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b6ba:	83 ec 0c             	sub    esp,0xc
c001b6bd:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b6bf:	50                   	push   eax
c001b6c0:	53                   	push   ebx
c001b6c1:	52                   	push   edx
c001b6c2:	51                   	push   ecx
c001b6c3:	56                   	push   esi
c001b6c4:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b6c7:	83 c4 20             	add    esp,0x20
c001b6ca:	99                   	cdq    
c001b6cb:	5b                   	pop    ebx
c001b6cc:	5e                   	pop    esi
c001b6cd:	5f                   	pop    edi
c001b6ce:	c3                   	ret    
c001b6cf:	5b                   	pop    ebx
c001b6d0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6da:	5e                   	pop    esi
c001b6db:	5f                   	pop    edi
c001b6dc:	c3                   	ret    

c001b6dd <sysShutdown(regs*)>:
c001b6dd:	83 ec 0c             	sub    esp,0xc
c001b6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6e7:	85 c0                	test   eax,eax
c001b6e9:	74 18                	je     c001b703 <sysShutdown(regs*)+0x26>
c001b6eb:	83 f8 01             	cmp    eax,0x1
c001b6ee:	74 38                	je     c001b728 <sysShutdown(regs*)+0x4b>
c001b6f0:	83 f8 02             	cmp    eax,0x2
c001b6f3:	74 24                	je     c001b719 <sysShutdown(regs*)+0x3c>
c001b6f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6ff:	83 c4 0c             	add    esp,0xc
c001b702:	c3                   	ret    
c001b703:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001b708:	8b 10                	mov    edx,DWORD PTR [eax]
c001b70a:	6a 00                	push   0x0
c001b70c:	6a 00                	push   0x0
c001b70e:	6a 00                	push   0x0
c001b710:	50                   	push   eax
c001b711:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	eb dc                	jmp    c001b6f5 <sysShutdown(regs*)+0x18>
c001b719:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001b71e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b720:	6a 00                	push   0x0
c001b722:	6a 00                	push   0x0
c001b724:	6a 01                	push   0x1
c001b726:	eb e8                	jmp    c001b710 <sysShutdown(regs*)+0x33>
c001b728:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c001b72d:	85 c0                	test   eax,eax
c001b72f:	74 02                	je     c001b733 <sysShutdown(regs*)+0x56>
c001b731:	ff d0                	call   eax
c001b733:	31 c0                	xor    eax,eax
c001b735:	31 d2                	xor    edx,edx
c001b737:	83 c4 0c             	add    esp,0xc
c001b73a:	c3                   	ret    

c001b73b <sysCallRealpath(regs*)>:
c001b73b:	83 ec 0c             	sub    esp,0xc
c001b73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b742:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b745:	85 d2                	test   edx,edx
c001b747:	74 07                	je     c001b750 <sysCallRealpath(regs*)+0x15>
c001b749:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b74c:	85 c0                	test   eax,eax
c001b74e:	75 0b                	jne    c001b75b <sysCallRealpath(regs*)+0x20>
c001b750:	b8 01 00 00 00       	mov    eax,0x1
c001b755:	31 d2                	xor    edx,edx
c001b757:	83 c4 0c             	add    esp,0xc
c001b75a:	c3                   	ret    
c001b75b:	51                   	push   ecx
c001b75c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b762:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b765:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b76b:	51                   	push   ecx
c001b76c:	52                   	push   edx
c001b76d:	50                   	push   eax
c001b76e:	e8 e5 79 ff ff       	call   c0013158 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	31 c0                	xor    eax,eax
c001b778:	31 d2                	xor    edx,edx
c001b77a:	83 c4 0c             	add    esp,0xc
c001b77d:	c3                   	ret    

c001b77e <sysCallGetArgc(regs*)>:
c001b77e:	83 ec 14             	sub    esp,0x14
c001b781:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b786:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b789:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b78f:	68 14 be 02 c0       	push   0xc002be14
c001b794:	e8 0a 76 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b799:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b79e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7a1:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b7a7:	83 c4 1c             	add    esp,0x1c
c001b7aa:	99                   	cdq    
c001b7ab:	c3                   	ret    

c001b7ac <sysCallReadDir(regs*)>:
c001b7ac:	53                   	push   ebx
c001b7ad:	83 ec 18             	sub    esp,0x18
c001b7b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7b4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7b7:	83 f8 02             	cmp    eax,0x2
c001b7ba:	76 53                	jbe    c001b80f <sysCallReadDir(regs*)+0x63>
c001b7bc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b7bf:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b7c5:	77 4f                	ja     c001b816 <sysCallReadDir(regs*)+0x6a>
c001b7c7:	83 ec 0c             	sub    esp,0xc
c001b7ca:	50                   	push   eax
c001b7cb:	e8 a9 60 ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	85 c0                	test   eax,eax
c001b7d5:	74 50                	je     c001b827 <sysCallReadDir(regs*)+0x7b>
c001b7d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b7df:	83 ec 0c             	sub    esp,0xc
c001b7e2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7e4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b7e8:	51                   	push   ecx
c001b7e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7ec:	6a 00                	push   0x0
c001b7ee:	68 10 01 00 00       	push   0x110
c001b7f3:	50                   	push   eax
c001b7f4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7f7:	83 c4 20             	add    esp,0x20
c001b7fa:	85 c0                	test   eax,eax
c001b7fc:	74 38                	je     c001b836 <sysCallReadDir(regs*)+0x8a>
c001b7fe:	83 f8 07             	cmp    eax,0x7
c001b801:	74 0c                	je     c001b80f <sysCallReadDir(regs*)+0x63>
c001b803:	b8 02 00 00 00       	mov    eax,0x2
c001b808:	31 d2                	xor    edx,edx
c001b80a:	83 c4 18             	add    esp,0x18
c001b80d:	5b                   	pop    ebx
c001b80e:	c3                   	ret    
c001b80f:	b8 01 00 00 00       	mov    eax,0x1
c001b814:	eb f2                	jmp    c001b808 <sysCallReadDir(regs*)+0x5c>
c001b816:	83 ec 08             	sub    esp,0x8
c001b819:	52                   	push   edx
c001b81a:	68 2c bf 02 c0       	push   0xc002bf2c
c001b81f:	e8 7f 75 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b82c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b831:	83 c4 18             	add    esp,0x18
c001b834:	5b                   	pop    ebx
c001b835:	c3                   	ret    
c001b836:	31 c0                	xor    eax,eax
c001b838:	eb ce                	jmp    c001b808 <sysCallReadDir(regs*)+0x5c>

c001b83a <sysCallIsATTY(regs*)>:
c001b83a:	83 ec 0c             	sub    esp,0xc
c001b83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b841:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b844:	83 f8 02             	cmp    eax,0x2
c001b847:	76 07                	jbe    c001b850 <sysCallIsATTY(regs*)+0x16>
c001b849:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b84e:	75 26                	jne    c001b876 <sysCallIsATTY(regs*)+0x3c>
c001b850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b855:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b858:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b85e:	85 c0                	test   eax,eax
c001b860:	74 24                	je     c001b886 <sysCallIsATTY(regs*)+0x4c>
c001b862:	83 ec 0c             	sub    esp,0xc
c001b865:	8b 10                	mov    edx,DWORD PTR [eax]
c001b867:	50                   	push   eax
c001b868:	ff 12                	call   DWORD PTR [edx]
c001b86a:	31 d2                	xor    edx,edx
c001b86c:	0f b6 c0             	movzx  eax,al
c001b86f:	83 c4 10             	add    esp,0x10
c001b872:	83 c4 0c             	add    esp,0xc
c001b875:	c3                   	ret    
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	50                   	push   eax
c001b87a:	e8 fa 5f ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001b87f:	83 c4 10             	add    esp,0x10
c001b882:	85 c0                	test   eax,eax
c001b884:	75 dc                	jne    c001b862 <sysCallIsATTY(regs*)+0x28>
c001b886:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b88b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b890:	83 c4 0c             	add    esp,0xc
c001b893:	c3                   	ret    

c001b894 <sysCallSeek(regs*)>:
c001b894:	53                   	push   ebx
c001b895:	83 ec 08             	sub    esp,0x8
c001b898:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b89c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b89f:	83 f8 02             	cmp    eax,0x2
c001b8a2:	76 4a                	jbe    c001b8ee <sysCallSeek(regs*)+0x5a>
c001b8a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8a9:	77 32                	ja     c001b8dd <sysCallSeek(regs*)+0x49>
c001b8ab:	83 ec 0c             	sub    esp,0xc
c001b8ae:	50                   	push   eax
c001b8af:	e8 c5 5f ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001b8b4:	83 c4 0c             	add    esp,0xc
c001b8b7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8ba:	31 db                	xor    ebx,ebx
c001b8bc:	53                   	push   ebx
c001b8bd:	51                   	push   ecx
c001b8be:	50                   	push   eax
c001b8bf:	e8 60 7b ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	85 c0                	test   eax,eax
c001b8c9:	0f 95 c0             	setne  al
c001b8cc:	31 d2                	xor    edx,edx
c001b8ce:	0f b6 c0             	movzx  eax,al
c001b8d1:	f7 d8                	neg    eax
c001b8d3:	83 d2 00             	adc    edx,0x0
c001b8d6:	83 c4 08             	add    esp,0x8
c001b8d9:	f7 da                	neg    edx
c001b8db:	5b                   	pop    ebx
c001b8dc:	c3                   	ret    
c001b8dd:	83 ec 08             	sub    esp,0x8
c001b8e0:	50                   	push   eax
c001b8e1:	68 1f be 02 c0       	push   0xc002be1f
c001b8e6:	e8 b8 74 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b8eb:	83 c4 10             	add    esp,0x10
c001b8ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8f8:	83 c4 08             	add    esp,0x8
c001b8fb:	5b                   	pop    ebx
c001b8fc:	c3                   	ret    

c001b8fd <sysCallTell(regs*)>:
c001b8fd:	53                   	push   ebx
c001b8fe:	83 ec 08             	sub    esp,0x8
c001b901:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b905:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b908:	83 f8 02             	cmp    eax,0x2
c001b90b:	76 5e                	jbe    c001b96b <sysCallTell(regs*)+0x6e>
c001b90d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b912:	77 2d                	ja     c001b941 <sysCallTell(regs*)+0x44>
c001b914:	83 ec 0c             	sub    esp,0xc
c001b917:	50                   	push   eax
c001b918:	e8 5c 5f ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001b91d:	5a                   	pop    edx
c001b91e:	59                   	pop    ecx
c001b91f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b922:	50                   	push   eax
c001b923:	e8 52 7b ff ff       	call   c001347a <File::tell(unsigned long long*)>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	85 c0                	test   eax,eax
c001b92d:	0f 95 c0             	setne  al
c001b930:	31 d2                	xor    edx,edx
c001b932:	0f b6 c0             	movzx  eax,al
c001b935:	f7 d8                	neg    eax
c001b937:	83 d2 00             	adc    edx,0x0
c001b93a:	83 c4 08             	add    esp,0x8
c001b93d:	f7 da                	neg    edx
c001b93f:	5b                   	pop    ebx
c001b940:	c3                   	ret    
c001b941:	83 ec 08             	sub    esp,0x8
c001b944:	50                   	push   eax
c001b945:	68 39 be 02 c0       	push   0xc002be39
c001b94a:	e8 54 74 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b94f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b952:	83 c4 10             	add    esp,0x10
c001b955:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b95b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b962:	31 d2                	xor    edx,edx
c001b964:	31 c0                	xor    eax,eax
c001b966:	83 c4 08             	add    esp,0x8
c001b969:	5b                   	pop    ebx
c001b96a:	c3                   	ret    
c001b96b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b970:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b975:	83 c4 08             	add    esp,0x8
c001b978:	5b                   	pop    ebx
c001b979:	c3                   	ret    

c001b97a <sysCallSize(regs*)>:
c001b97a:	53                   	push   ebx
c001b97b:	83 ec 18             	sub    esp,0x18
c001b97e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b982:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b985:	83 f8 02             	cmp    eax,0x2
c001b988:	76 64                	jbe    c001b9ee <sysCallSize(regs*)+0x74>
c001b98a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b98f:	77 33                	ja     c001b9c4 <sysCallSize(regs*)+0x4a>
c001b991:	83 ec 0c             	sub    esp,0xc
c001b994:	50                   	push   eax
c001b995:	e8 df 5e ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001b99a:	83 c4 0c             	add    esp,0xc
c001b99d:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9a1:	52                   	push   edx
c001b9a2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9a5:	50                   	push   eax
c001b9a6:	e8 67 7c ff ff       	call   c0013612 <File::stat(unsigned long long*, bool*)>
c001b9ab:	83 c4 10             	add    esp,0x10
c001b9ae:	85 c0                	test   eax,eax
c001b9b0:	0f 95 c0             	setne  al
c001b9b3:	31 d2                	xor    edx,edx
c001b9b5:	0f b6 c0             	movzx  eax,al
c001b9b8:	f7 d8                	neg    eax
c001b9ba:	83 d2 00             	adc    edx,0x0
c001b9bd:	83 c4 18             	add    esp,0x18
c001b9c0:	f7 da                	neg    edx
c001b9c2:	5b                   	pop    ebx
c001b9c3:	c3                   	ret    
c001b9c4:	83 ec 08             	sub    esp,0x8
c001b9c7:	50                   	push   eax
c001b9c8:	68 53 be 02 c0       	push   0xc002be53
c001b9cd:	e8 d1 73 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001b9d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9d5:	83 c4 10             	add    esp,0x10
c001b9d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9e5:	31 d2                	xor    edx,edx
c001b9e7:	31 c0                	xor    eax,eax
c001b9e9:	83 c4 18             	add    esp,0x18
c001b9ec:	5b                   	pop    ebx
c001b9ed:	c3                   	ret    
c001b9ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9f8:	83 c4 18             	add    esp,0x18
c001b9fb:	5b                   	pop    ebx
c001b9fc:	c3                   	ret    

c001b9fd <sysCallSizeFromFilename(regs*)>:
c001b9fd:	57                   	push   edi
c001b9fe:	56                   	push   esi
c001b9ff:	53                   	push   ebx
c001ba00:	83 ec 20             	sub    esp,0x20
c001ba03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba07:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba0a:	83 fb 02             	cmp    ebx,0x2
c001ba0d:	0f 86 99 00 00 00    	jbe    c001baac <sysCallSizeFromFilename(regs*)+0xaf>
c001ba13:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba19:	77 65                	ja     c001ba80 <sysCallSizeFromFilename(regs*)+0x83>
c001ba1b:	83 ec 0c             	sub    esp,0xc
c001ba1e:	68 14 01 00 00       	push   0x114
c001ba23:	e8 23 3e ff ff       	call   c000f84b <malloc>
c001ba28:	83 c4 0c             	add    esp,0xc
c001ba2b:	89 c6                	mov    esi,eax
c001ba2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba32:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba35:	53                   	push   ebx
c001ba36:	56                   	push   esi
c001ba37:	e8 c6 78 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001ba3c:	83 c4 0c             	add    esp,0xc
c001ba3f:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba43:	50                   	push   eax
c001ba44:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ba47:	56                   	push   esi
c001ba48:	e8 c5 7b ff ff       	call   c0013612 <File::stat(unsigned long long*, bool*)>
c001ba4d:	83 c4 10             	add    esp,0x10
c001ba50:	85 f6                	test   esi,esi
c001ba52:	74 14                	je     c001ba68 <sysCallSizeFromFilename(regs*)+0x6b>
c001ba54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba58:	8b 16                	mov    edx,DWORD PTR [esi]
c001ba5a:	83 ec 0c             	sub    esp,0xc
c001ba5d:	56                   	push   esi
c001ba5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba61:	83 c4 10             	add    esp,0x10
c001ba64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba68:	85 c0                	test   eax,eax
c001ba6a:	0f 95 c0             	setne  al
c001ba6d:	31 d2                	xor    edx,edx
c001ba6f:	0f b6 c0             	movzx  eax,al
c001ba72:	f7 d8                	neg    eax
c001ba74:	83 d2 00             	adc    edx,0x0
c001ba77:	83 c4 20             	add    esp,0x20
c001ba7a:	f7 da                	neg    edx
c001ba7c:	5b                   	pop    ebx
c001ba7d:	5e                   	pop    esi
c001ba7e:	5f                   	pop    edi
c001ba7f:	c3                   	ret    
c001ba80:	83 ec 08             	sub    esp,0x8
c001ba83:	53                   	push   ebx
c001ba84:	68 53 be 02 c0       	push   0xc002be53
c001ba89:	e8 15 73 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ba8e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ba91:	83 c4 10             	add    esp,0x10
c001ba94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baa1:	31 d2                	xor    edx,edx
c001baa3:	83 c4 20             	add    esp,0x20
c001baa6:	31 c0                	xor    eax,eax
c001baa8:	5b                   	pop    ebx
c001baa9:	5e                   	pop    esi
c001baaa:	5f                   	pop    edi
c001baab:	c3                   	ret    
c001baac:	83 c4 20             	add    esp,0x20
c001baaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bab4:	5b                   	pop    ebx
c001bab5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baba:	5e                   	pop    esi
c001babb:	5f                   	pop    edi
c001babc:	c3                   	ret    

c001babd <sysCallClose(regs*)>:
c001babd:	53                   	push   ebx
c001babe:	83 ec 08             	sub    esp,0x8
c001bac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bac8:	83 f8 02             	cmp    eax,0x2
c001bacb:	76 50                	jbe    c001bb1d <sysCallClose(regs*)+0x60>
c001bacd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bad2:	74 58                	je     c001bb2c <sysCallClose(regs*)+0x6f>
c001bad4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bad9:	74 60                	je     c001bb3b <sysCallClose(regs*)+0x7e>
c001badb:	77 2f                	ja     c001bb0c <sysCallClose(regs*)+0x4f>
c001badd:	83 ec 0c             	sub    esp,0xc
c001bae0:	50                   	push   eax
c001bae1:	e8 93 5d ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001bae6:	89 c3                	mov    ebx,eax
c001bae8:	89 04 24             	mov    DWORD PTR [esp],eax
c001baeb:	e8 d4 78 ff ff       	call   c00133c4 <File::close()>
c001baf0:	83 c4 10             	add    esp,0x10
c001baf3:	85 db                	test   ebx,ebx
c001baf5:	74 0c                	je     c001bb03 <sysCallClose(regs*)+0x46>
c001baf7:	83 ec 0c             	sub    esp,0xc
c001bafa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bafc:	53                   	push   ebx
c001bafd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb00:	83 c4 10             	add    esp,0x10
c001bb03:	31 c0                	xor    eax,eax
c001bb05:	31 d2                	xor    edx,edx
c001bb07:	83 c4 08             	add    esp,0x8
c001bb0a:	5b                   	pop    ebx
c001bb0b:	c3                   	ret    
c001bb0c:	83 ec 08             	sub    esp,0x8
c001bb0f:	50                   	push   eax
c001bb10:	68 50 bf 02 c0       	push   0xc002bf50
c001bb15:	e8 89 72 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bb1a:	83 c4 10             	add    esp,0x10
c001bb1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb22:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb27:	83 c4 08             	add    esp,0x8
c001bb2a:	5b                   	pop    ebx
c001bb2b:	c3                   	ret    
c001bb2c:	83 ec 0c             	sub    esp,0xc
c001bb2f:	68 6e be 02 c0       	push   0xc002be6e
c001bb34:	e8 6a 72 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bb39:	eb c5                	jmp    c001bb00 <sysCallClose(regs*)+0x43>
c001bb3b:	83 ec 0c             	sub    esp,0xc
c001bb3e:	68 7c be 02 c0       	push   0xc002be7c
c001bb43:	eb ef                	jmp    c001bb34 <sysCallClose(regs*)+0x77>

c001bb45 <sysCallOpenDir(regs*)>:
c001bb45:	56                   	push   esi
c001bb46:	53                   	push   ebx
c001bb47:	53                   	push   ebx
c001bb48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb4c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb4f:	85 f6                	test   esi,esi
c001bb51:	74 59                	je     c001bbac <sysCallOpenDir(regs*)+0x67>
c001bb53:	83 ec 0c             	sub    esp,0xc
c001bb56:	68 14 01 00 00       	push   0x114
c001bb5b:	e8 eb 3c ff ff       	call   c000f84b <malloc>
c001bb60:	83 c4 0c             	add    esp,0xc
c001bb63:	89 c6                	mov    esi,eax
c001bb65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb6a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb70:	56                   	push   esi
c001bb71:	e8 38 7c ff ff       	call   c00137ae <Directory::Directory(char const*, Process*)>
c001bb76:	83 c4 10             	add    esp,0x10
c001bb79:	85 f6                	test   esi,esi
c001bb7b:	74 2f                	je     c001bbac <sysCallOpenDir(regs*)+0x67>
c001bb7d:	83 ec 0c             	sub    esp,0xc
c001bb80:	56                   	push   esi
c001bb81:	e8 8c 7c ff ff       	call   c0013812 <Directory::open()>
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	85 c0                	test   eax,eax
c001bb8b:	75 1f                	jne    c001bbac <sysCallOpenDir(regs*)+0x67>
c001bb8d:	83 ec 0c             	sub    esp,0xc
c001bb90:	56                   	push   esi
c001bb91:	e8 ee 59 ff ff       	call   c0011584 <UnixFile::getFileDescriptor()>
c001bb96:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb99:	83 c4 10             	add    esp,0x10
c001bb9c:	89 02                	mov    DWORD PTR [edx],eax
c001bb9e:	c1 f8 1f             	sar    eax,0x1f
c001bba1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bba4:	31 c0                	xor    eax,eax
c001bba6:	59                   	pop    ecx
c001bba7:	31 d2                	xor    edx,edx
c001bba9:	5b                   	pop    ebx
c001bbaa:	5e                   	pop    esi
c001bbab:	c3                   	ret    
c001bbac:	59                   	pop    ecx
c001bbad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb7:	5b                   	pop    ebx
c001bbb8:	5e                   	pop    esi
c001bbb9:	c3                   	ret    

c001bbba <sysCallCloseDir(regs*)>:
c001bbba:	53                   	push   ebx
c001bbbb:	83 ec 08             	sub    esp,0x8
c001bbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbc5:	83 f8 02             	cmp    eax,0x2
c001bbc8:	76 47                	jbe    c001bc11 <sysCallCloseDir(regs*)+0x57>
c001bbca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbcf:	77 2f                	ja     c001bc00 <sysCallCloseDir(regs*)+0x46>
c001bbd1:	83 ec 0c             	sub    esp,0xc
c001bbd4:	50                   	push   eax
c001bbd5:	e8 9f 5c ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001bbda:	89 c3                	mov    ebx,eax
c001bbdc:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbdf:	e8 8a 7c ff ff       	call   c001386e <Directory::close()>
c001bbe4:	83 c4 10             	add    esp,0x10
c001bbe7:	85 db                	test   ebx,ebx
c001bbe9:	74 0c                	je     c001bbf7 <sysCallCloseDir(regs*)+0x3d>
c001bbeb:	83 ec 0c             	sub    esp,0xc
c001bbee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbf0:	53                   	push   ebx
c001bbf1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbf4:	83 c4 10             	add    esp,0x10
c001bbf7:	31 c0                	xor    eax,eax
c001bbf9:	31 d2                	xor    edx,edx
c001bbfb:	83 c4 08             	add    esp,0x8
c001bbfe:	5b                   	pop    ebx
c001bbff:	c3                   	ret    
c001bc00:	83 ec 08             	sub    esp,0x8
c001bc03:	50                   	push   eax
c001bc04:	68 78 bf 02 c0       	push   0xc002bf78
c001bc09:	e8 95 71 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc16:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc1b:	83 c4 08             	add    esp,0x8
c001bc1e:	5b                   	pop    ebx
c001bc1f:	c3                   	ret    

c001bc20 <sysCallMakeDir(regs*)>:
c001bc20:	56                   	push   esi
c001bc21:	53                   	push   ebx
c001bc22:	83 ec 10             	sub    esp,0x10
c001bc25:	68 14 01 00 00       	push   0x114
c001bc2a:	e8 1c 3c ff ff       	call   c000f84b <malloc>
c001bc2f:	83 c4 0c             	add    esp,0xc
c001bc32:	89 c3                	mov    ebx,eax
c001bc34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc39:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc40:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc43:	53                   	push   ebx
c001bc44:	e8 65 7b ff ff       	call   c00137ae <Directory::Directory(char const*, Process*)>
c001bc49:	83 c4 10             	add    esp,0x10
c001bc4c:	85 db                	test   ebx,ebx
c001bc4e:	74 32                	je     c001bc82 <sysCallMakeDir(regs*)+0x62>
c001bc50:	83 ec 0c             	sub    esp,0xc
c001bc53:	53                   	push   ebx
c001bc54:	e8 99 7d ff ff       	call   c00139f2 <Directory::create()>
c001bc59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc5c:	89 c6                	mov    esi,eax
c001bc5e:	e8 0b 7c ff ff       	call   c001386e <Directory::close()>
c001bc63:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc6b:	83 c4 10             	add    esp,0x10
c001bc6e:	31 c0                	xor    eax,eax
c001bc70:	59                   	pop    ecx
c001bc71:	85 f6                	test   esi,esi
c001bc73:	5b                   	pop    ebx
c001bc74:	0f 95 c0             	setne  al
c001bc77:	5e                   	pop    esi
c001bc78:	31 d2                	xor    edx,edx
c001bc7a:	f7 d8                	neg    eax
c001bc7c:	83 d2 00             	adc    edx,0x0
c001bc7f:	f7 da                	neg    edx
c001bc81:	c3                   	ret    
c001bc82:	59                   	pop    ecx
c001bc83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc88:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8d:	5b                   	pop    ebx
c001bc8e:	5e                   	pop    esi
c001bc8f:	c3                   	ret    

c001bc90 <sysCallWait(regs*)>:
c001bc90:	83 ec 10             	sub    esp,0x10
c001bc93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc97:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc9a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc9d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bca0:	e8 08 25 00 00       	call   c001e1ad <waitTask(int, int*, int)>
c001bca5:	83 c4 1c             	add    esp,0x1c
c001bca8:	99                   	cdq    
c001bca9:	c3                   	ret    

c001bcaa <sysCallNotImpl(regs*)>:
c001bcaa:	83 ec 18             	sub    esp,0x18
c001bcad:	68 8a be 02 c0       	push   0xc002be8a
c001bcb2:	e8 2a e8 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001bcb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcbc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcc1:	83 c4 1c             	add    esp,0x1c
c001bcc4:	c3                   	ret    

c001bcc5 <sysPanic(regs*)>:
c001bcc5:	83 ec 18             	sub    esp,0x18
c001bcc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bccc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bccf:	e8 0d e8 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001bcd4:	c7 04 24 a4 be 02 c0 	mov    DWORD PTR [esp],0xc002bea4
c001bcdb:	e8 01 e8 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001bce0:	b8 01 00 00 00       	mov    eax,0x1
c001bce5:	31 d2                	xor    edx,edx
c001bce7:	83 c4 1c             	add    esp,0x1c
c001bcea:	c3                   	ret    

c001bceb <sysCallRmdir(regs*)>:
c001bceb:	56                   	push   esi
c001bcec:	53                   	push   ebx
c001bced:	83 ec 20             	sub    esp,0x20
c001bcf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcf4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcf7:	68 14 01 00 00       	push   0x114
c001bcfc:	e8 4a 3b ff ff       	call   c000f84b <malloc>
c001bd01:	83 c4 0c             	add    esp,0xc
c001bd04:	89 c3                	mov    ebx,eax
c001bd06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd0e:	56                   	push   esi
c001bd0f:	53                   	push   ebx
c001bd10:	e8 ed 75 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001bd15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd18:	e8 c1 77 ff ff       	call   c00134de <File::unlink()>
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	85 db                	test   ebx,ebx
c001bd22:	74 14                	je     c001bd38 <sysCallRmdir(regs*)+0x4d>
c001bd24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd28:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd2a:	83 ec 0c             	sub    esp,0xc
c001bd2d:	53                   	push   ebx
c001bd2e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd38:	85 c0                	test   eax,eax
c001bd3a:	0f 95 c0             	setne  al
c001bd3d:	31 d2                	xor    edx,edx
c001bd3f:	0f b6 c0             	movzx  eax,al
c001bd42:	f7 d8                	neg    eax
c001bd44:	83 d2 00             	adc    edx,0x0
c001bd47:	83 c4 14             	add    esp,0x14
c001bd4a:	f7 da                	neg    edx
c001bd4c:	5b                   	pop    ebx
c001bd4d:	5e                   	pop    esi
c001bd4e:	c3                   	ret    

c001bd4f <sysCallUnlink(regs*)>:
c001bd4f:	56                   	push   esi
c001bd50:	53                   	push   ebx
c001bd51:	83 ec 20             	sub    esp,0x20
c001bd54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd58:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd5b:	68 14 01 00 00       	push   0x114
c001bd60:	e8 e6 3a ff ff       	call   c000f84b <malloc>
c001bd65:	83 c4 0c             	add    esp,0xc
c001bd68:	89 c3                	mov    ebx,eax
c001bd6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd6f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd72:	56                   	push   esi
c001bd73:	53                   	push   ebx
c001bd74:	e8 89 75 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001bd79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd7c:	e8 5d 77 ff ff       	call   c00134de <File::unlink()>
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	85 db                	test   ebx,ebx
c001bd86:	74 14                	je     c001bd9c <sysCallUnlink(regs*)+0x4d>
c001bd88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd8e:	83 ec 0c             	sub    esp,0xc
c001bd91:	53                   	push   ebx
c001bd92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd95:	83 c4 10             	add    esp,0x10
c001bd98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd9c:	85 c0                	test   eax,eax
c001bd9e:	0f 95 c0             	setne  al
c001bda1:	31 d2                	xor    edx,edx
c001bda3:	0f b6 c0             	movzx  eax,al
c001bda6:	f7 d8                	neg    eax
c001bda8:	83 d2 00             	adc    edx,0x0
c001bdab:	83 c4 14             	add    esp,0x14
c001bdae:	f7 da                	neg    edx
c001bdb0:	5b                   	pop    ebx
c001bdb1:	5e                   	pop    esi
c001bdb2:	c3                   	ret    

c001bdb3 <sysCallGetArgv(regs*)>:
c001bdb3:	83 ec 0c             	sub    esp,0xc
c001bdb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdba:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bdbd:	85 c0                	test   eax,eax
c001bdbf:	78 2b                	js     c001bdec <sysCallGetArgv(regs*)+0x39>
c001bdc1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bdc7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bdca:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bdd0:	7d 1a                	jge    c001bdec <sysCallGetArgv(regs*)+0x39>
c001bdd2:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bdd9:	85 c0                	test   eax,eax
c001bddb:	74 17                	je     c001bdf4 <sysCallGetArgv(regs*)+0x41>
c001bddd:	83 ec 08             	sub    esp,0x8
c001bde0:	50                   	push   eax
c001bde1:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bde4:	e8 53 4a fe ff       	call   c000083c <strcpy>
c001bde9:	83 c4 10             	add    esp,0x10
c001bdec:	31 c0                	xor    eax,eax
c001bdee:	31 d2                	xor    edx,edx
c001bdf0:	83 c4 0c             	add    esp,0xc
c001bdf3:	c3                   	ret    
c001bdf4:	b8 01 00 00 00       	mov    eax,0x1
c001bdf9:	31 d2                	xor    edx,edx
c001bdfb:	83 c4 0c             	add    esp,0xc
c001bdfe:	c3                   	ret    

c001bdff <sysCallTTYName(regs*)>:
c001bdff:	56                   	push   esi
c001be00:	53                   	push   ebx
c001be01:	53                   	push   ebx
c001be02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be06:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be09:	85 c0                	test   eax,eax
c001be0b:	74 5f                	je     c001be6c <sysCallTTYName(regs*)+0x6d>
c001be0d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be10:	83 f8 02             	cmp    eax,0x2
c001be13:	77 3e                	ja     c001be53 <sysCallTTYName(regs*)+0x54>
c001be15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be1d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be23:	85 db                	test   ebx,ebx
c001be25:	74 45                	je     c001be6c <sysCallTTYName(regs*)+0x6d>
c001be27:	83 ec 0c             	sub    esp,0xc
c001be2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be2c:	53                   	push   ebx
c001be2d:	ff 10                	call   DWORD PTR [eax]
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	84 c0                	test   al,al
c001be34:	74 41                	je     c001be77 <sysCallTTYName(regs*)+0x78>
c001be36:	83 ec 08             	sub    esp,0x8
c001be39:	81 c3 82 00 00 00    	add    ebx,0x82
c001be3f:	53                   	push   ebx
c001be40:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be43:	e8 f4 49 fe ff       	call   c000083c <strcpy>
c001be48:	83 c4 10             	add    esp,0x10
c001be4b:	31 c0                	xor    eax,eax
c001be4d:	59                   	pop    ecx
c001be4e:	31 d2                	xor    edx,edx
c001be50:	5b                   	pop    ebx
c001be51:	5e                   	pop    esi
c001be52:	c3                   	ret    
c001be53:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be58:	74 bb                	je     c001be15 <sysCallTTYName(regs*)+0x16>
c001be5a:	83 ec 0c             	sub    esp,0xc
c001be5d:	50                   	push   eax
c001be5e:	e8 16 5a ff ff       	call   c0011879 <getFromFileDescriptor(int)>
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	89 c3                	mov    ebx,eax
c001be68:	85 db                	test   ebx,ebx
c001be6a:	75 bb                	jne    c001be27 <sysCallTTYName(regs*)+0x28>
c001be6c:	59                   	pop    ecx
c001be6d:	b8 01 00 00 00       	mov    eax,0x1
c001be72:	31 d2                	xor    edx,edx
c001be74:	5b                   	pop    ebx
c001be75:	5e                   	pop    esi
c001be76:	c3                   	ret    
c001be77:	59                   	pop    ecx
c001be78:	b8 02 00 00 00       	mov    eax,0x2
c001be7d:	31 d2                	xor    edx,edx
c001be7f:	5b                   	pop    ebx
c001be80:	5e                   	pop    esi
c001be81:	c3                   	ret    

c001be82 <sysCallUSleep(regs*)>:
c001be82:	83 ec 14             	sub    esp,0x14
c001be85:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be8a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be8e:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be95:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be98:	01 ca                	add    edx,ecx
c001be9a:	52                   	push   edx
c001be9b:	50                   	push   eax
c001be9c:	e8 a5 23 00 00       	call   c001e246 <nanoSleep(unsigned long long)>
c001bea1:	31 c0                	xor    eax,eax
c001bea3:	31 d2                	xor    edx,edx
c001bea5:	83 c4 1c             	add    esp,0x1c
c001bea8:	c3                   	ret    

c001bea9 <sysCallSpawn(regs*)>:
c001bea9:	56                   	push   esi
c001beaa:	53                   	push   ebx
c001beab:	53                   	push   ebx
c001beac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001beb0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001beb3:	85 f6                	test   esi,esi
c001beb5:	75 08                	jne    c001bebf <sysCallSpawn(regs*)+0x16>
c001beb7:	59                   	pop    ecx
c001beb8:	31 c0                	xor    eax,eax
c001beba:	31 d2                	xor    edx,edx
c001bebc:	5b                   	pop    ebx
c001bebd:	5e                   	pop    esi
c001bebe:	c3                   	ret    
c001bebf:	83 ec 0c             	sub    esp,0xc
c001bec2:	68 3f 07 00 00       	push   0x73f
c001bec7:	e8 7f 39 ff ff       	call   c000f84b <malloc>
c001becc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001becf:	89 c6                	mov    esi,eax
c001bed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bedc:	56                   	push   esi
c001bedd:	e8 2a 1a 00 00       	call   c001d90c <Process::Process(char const*, Process*, char**)>
c001bee2:	83 c4 20             	add    esp,0x20
c001bee5:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001beec:	75 c9                	jne    c001beb7 <sysCallSpawn(regs*)+0xe>
c001beee:	83 ec 0c             	sub    esp,0xc
c001bef1:	56                   	push   esi
c001bef2:	e8 fd 1f 00 00       	call   c001def4 <Process::createUserThread()>
c001bef7:	8b 06                	mov    eax,DWORD PTR [esi]
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	99                   	cdq    
c001befd:	59                   	pop    ecx
c001befe:	5b                   	pop    ebx
c001beff:	5e                   	pop    esi
c001bf00:	c3                   	ret    

c001bf01 <sysCallGetEnv(regs*)>:
c001bf01:	55                   	push   ebp
c001bf02:	57                   	push   edi
c001bf03:	56                   	push   esi
c001bf04:	53                   	push   ebx
c001bf05:	83 ec 28             	sub    esp,0x28
c001bf08:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf0c:	68 b3 be 02 c0       	push   0xc002beb3
c001bf11:	e8 8d 6e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bf16:	5f                   	pop    edi
c001bf17:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bf1a:	5d                   	pop    ebp
c001bf1b:	53                   	push   ebx
c001bf1c:	68 e2 c1 02 c0       	push   0xc002c1e2
c001bf21:	e8 7d 6e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bf26:	58                   	pop    eax
c001bf27:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bf2a:	5a                   	pop    edx
c001bf2b:	57                   	push   edi
c001bf2c:	68 bc be 02 c0       	push   0xc002bebc
c001bf31:	e8 6d 6e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bf36:	59                   	pop    ecx
c001bf37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf3c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf3f:	e8 b9 e4 ff ff       	call   c001a3fd <Krnl::getProcessTotalEnvCount(Process*)>
c001bf44:	5a                   	pop    edx
c001bf45:	89 c5                	mov    ebp,eax
c001bf47:	59                   	pop    ecx
c001bf48:	50                   	push   eax
c001bf49:	68 c6 be 02 c0       	push   0xc002bec6
c001bf4e:	e8 50 6e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bf53:	83 c4 10             	add    esp,0x10
c001bf56:	39 ef                	cmp    edi,ebp
c001bf58:	7c 15                	jl     c001bf6f <sysCallGetEnv(regs*)+0x6e>
c001bf5a:	85 db                	test   ebx,ebx
c001bf5c:	75 0c                	jne    c001bf6a <sysCallGetEnv(regs*)+0x69>
c001bf5e:	83 c4 1c             	add    esp,0x1c
c001bf61:	31 c0                	xor    eax,eax
c001bf63:	5b                   	pop    ebx
c001bf64:	31 d2                	xor    edx,edx
c001bf66:	5e                   	pop    esi
c001bf67:	5f                   	pop    edi
c001bf68:	5d                   	pop    ebp
c001bf69:	c3                   	ret    
c001bf6a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf6d:	eb ef                	jmp    c001bf5e <sysCallGetEnv(regs*)+0x5d>
c001bf6f:	83 ec 0c             	sub    esp,0xc
c001bf72:	68 d2 be 02 c0       	push   0xc002bed2
c001bf77:	e8 27 6e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bf7c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf80:	83 c4 0c             	add    esp,0xc
c001bf83:	57                   	push   edi
c001bf84:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf8a:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf8d:	50                   	push   eax
c001bf8e:	e8 8a e4 ff ff       	call   c001a41d <Krnl::getProcessEnvPair(Process*, int)>
c001bf93:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bf97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf9b:	68 61 c2 02 c0       	push   0xc002c261
c001bfa0:	e8 fe 6d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bfa5:	83 c4 10             	add    esp,0x10
c001bfa8:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bfab:	85 f6                	test   esi,esi
c001bfad:	75 47                	jne    c001bff6 <sysCallGetEnv(regs*)+0xf5>
c001bfaf:	83 ec 0c             	sub    esp,0xc
c001bfb2:	55                   	push   ebp
c001bfb3:	e8 e4 47 fe ff       	call   c000079c <strlen>
c001bfb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfbb:	89 c3                	mov    ebx,eax
c001bfbd:	e8 da 47 fe ff       	call   c000079c <strlen>
c001bfc2:	5a                   	pop    edx
c001bfc3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bfc7:	59                   	pop    ecx
c001bfc8:	50                   	push   eax
c001bfc9:	68 d5 be 02 c0       	push   0xc002bed5
c001bfce:	e8 d0 6d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001bfd3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bfd6:	e8 c1 47 fe ff       	call   c000079c <strlen>
c001bfdb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfde:	89 c3                	mov    ebx,eax
c001bfe0:	e8 b7 47 fe ff       	call   c000079c <strlen>
c001bfe5:	83 c4 10             	add    esp,0x10
c001bfe8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bfec:	83 c4 1c             	add    esp,0x1c
c001bfef:	31 d2                	xor    edx,edx
c001bff1:	5b                   	pop    ebx
c001bff2:	5e                   	pop    esi
c001bff3:	5f                   	pop    edi
c001bff4:	5d                   	pop    ebp
c001bff5:	c3                   	ret    
c001bff6:	83 ec 0c             	sub    esp,0xc
c001bff9:	68 7b c2 02 c0       	push   0xc002c27b
c001bffe:	e8 a0 6d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001c003:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c006:	58                   	pop    eax
c001c007:	5a                   	pop    edx
c001c008:	55                   	push   ebp
c001c009:	53                   	push   ebx
c001c00a:	e8 2d 48 fe ff       	call   c000083c <strcpy>
c001c00f:	59                   	pop    ecx
c001c010:	5e                   	pop    esi
c001c011:	68 df be 02 c0       	push   0xc002bedf
c001c016:	53                   	push   ebx
c001c017:	e8 60 49 fe ff       	call   c000097c <strcat>
c001c01c:	5d                   	pop    ebp
c001c01d:	58                   	pop    eax
c001c01e:	57                   	push   edi
c001c01f:	53                   	push   ebx
c001c020:	e8 57 49 fe ff       	call   c000097c <strcat>
c001c025:	c7 04 24 95 c2 02 c0 	mov    DWORD PTR [esp],0xc002c295
c001c02c:	e8 72 6d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001c031:	83 c4 10             	add    esp,0x10
c001c034:	e9 25 ff ff ff       	jmp    c001bf5e <sysCallGetEnv(regs*)+0x5d>

c001c039 <sysAppSettings(regs*)>:
c001c039:	53                   	push   ebx
c001c03a:	83 ec 08             	sub    esp,0x8
c001c03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c041:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c044:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c04a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c04f:	66 3d c0 09          	cmp    ax,0x9c0
c001c053:	75 2f                	jne    c001c084 <sysAppSettings(regs*)+0x4b>
c001c055:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c05b:	83 e0 1f             	and    eax,0x1f
c001c05e:	3c 01                	cmp    al,0x1
c001c060:	74 2e                	je     c001c090 <sysAppSettings(regs*)+0x57>
c001c062:	3c 07                	cmp    al,0x7
c001c064:	0f 84 bd 00 00 00    	je     c001c127 <sysAppSettings(regs*)+0xee>
c001c06a:	84 c0                	test   al,al
c001c06c:	0f 84 dc 00 00 00    	je     c001c14e <sysAppSettings(regs*)+0x115>
c001c072:	3c 08                	cmp    al,0x8
c001c074:	74 6d                	je     c001c0e3 <sysAppSettings(regs*)+0xaa>
c001c076:	0f b6 c0             	movzx  eax,al
c001c079:	83 c4 08             	add    esp,0x8
c001c07c:	05 e8 03 00 00       	add    eax,0x3e8
c001c081:	5b                   	pop    ebx
c001c082:	99                   	cdq    
c001c083:	c3                   	ret    
c001c084:	b8 01 00 00 00       	mov    eax,0x1
c001c089:	31 d2                	xor    edx,edx
c001c08b:	83 c4 08             	add    esp,0x8
c001c08e:	5b                   	pop    ebx
c001c08f:	c3                   	ret    
c001c090:	51                   	push   ecx
c001c091:	68 00 01 00 00       	push   0x100
c001c096:	6a 00                	push   0x0
c001c098:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c09d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0a0:	83 c0 0c             	add    eax,0xc
c001c0a3:	50                   	push   eax
c001c0a4:	e8 d7 46 fe ff       	call   c0000780 <memset>
c001c0a9:	83 c4 0c             	add    esp,0xc
c001c0ac:	68 ff 00 00 00       	push   0xff
c001c0b1:	53                   	push   ebx
c001c0b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0ba:	83 c0 0c             	add    eax,0xc
c001c0bd:	50                   	push   eax
c001c0be:	e8 89 46 fe ff       	call   c000074c <memcpy>
c001c0c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c8:	5b                   	pop    ebx
c001c0c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0cc:	5a                   	pop    edx
c001c0cd:	8d 50 0c             	lea    edx,[eax+0xc]
c001c0d0:	52                   	push   edx
c001c0d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c0d7:	e8 e6 49 ff ff       	call   c0010ac2 <VgaText::setTitle(char*)>
c001c0dc:	83 c4 10             	add    esp,0x10
c001c0df:	31 c0                	xor    eax,eax
c001c0e1:	eb a6                	jmp    c001c089 <sysAppSettings(regs*)+0x50>
c001c0e3:	83 ec 08             	sub    esp,0x8
c001c0e6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c0ec:	83 e0 0f             	and    eax,0xf
c001c0ef:	50                   	push   eax
c001c0f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c0fe:	e8 b1 49 ff ff       	call   c0010ab4 <VgaText::setTitleColour(VgaColour)>
c001c103:	58                   	pop    eax
c001c104:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c10a:	5a                   	pop    edx
c001c10b:	c1 e8 04             	shr    eax,0x4
c001c10e:	83 e0 0f             	and    eax,0xf
c001c111:	50                   	push   eax
c001c112:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c117:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c11a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c120:	e8 81 49 ff ff       	call   c0010aa6 <VgaText::setTitleTextColour(VgaColour)>
c001c125:	eb b5                	jmp    c001c0dc <sysAppSettings(regs*)+0xa3>
c001c127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c12c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c12f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c135:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c13b:	c0 e8 06             	shr    al,0x6
c001c13e:	83 e0 01             	and    eax,0x1
c001c141:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c147:	31 c0                	xor    eax,eax
c001c149:	e9 3b ff ff ff       	jmp    c001c089 <sysAppSettings(regs*)+0x50>
c001c14e:	b8 02 00 00 00       	mov    eax,0x2
c001c153:	e9 31 ff ff ff       	jmp    c001c089 <sysAppSettings(regs*)+0x50>

c001c158 <sysSetFatAttrib(regs*)>:
c001c158:	57                   	push   edi
c001c159:	56                   	push   esi
c001c15a:	53                   	push   ebx
c001c15b:	83 ec 1c             	sub    esp,0x1c
c001c15e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c162:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c165:	68 14 01 00 00       	push   0x114
c001c16a:	e8 dc 36 ff ff       	call   c000f84b <malloc>
c001c16f:	83 c4 0c             	add    esp,0xc
c001c172:	89 c3                	mov    ebx,eax
c001c174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c179:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c17c:	57                   	push   edi
c001c17d:	53                   	push   ebx
c001c17e:	e8 7f 71 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001c183:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c186:	83 c4 0c             	add    esp,0xc
c001c189:	0f b6 d4             	movzx  edx,ah
c001c18c:	0f b6 c0             	movzx  eax,al
c001c18f:	52                   	push   edx
c001c190:	50                   	push   eax
c001c191:	53                   	push   ebx
c001c192:	e8 e1 73 ff ff       	call   c0013578 <File::chfatattr(unsigned char, unsigned char)>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	85 db                	test   ebx,ebx
c001c19c:	74 14                	je     c001c1b2 <sysSetFatAttrib(regs*)+0x5a>
c001c19e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1a4:	83 ec 0c             	sub    esp,0xc
c001c1a7:	53                   	push   ebx
c001c1a8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1ab:	83 c4 10             	add    esp,0x10
c001c1ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1b2:	85 c0                	test   eax,eax
c001c1b4:	0f 95 c0             	setne  al
c001c1b7:	31 d2                	xor    edx,edx
c001c1b9:	0f b6 c0             	movzx  eax,al
c001c1bc:	f7 d8                	neg    eax
c001c1be:	83 d2 00             	adc    edx,0x0
c001c1c1:	83 c4 10             	add    esp,0x10
c001c1c4:	f7 da                	neg    edx
c001c1c6:	5b                   	pop    ebx
c001c1c7:	5e                   	pop    esi
c001c1c8:	5f                   	pop    edi
c001c1c9:	c3                   	ret    

c001c1ca <sysPipe(regs*)>:
c001c1ca:	57                   	push   edi
c001c1cb:	56                   	push   esi
c001c1cc:	53                   	push   ebx
c001c1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d1:	83 ec 0c             	sub    esp,0xc
c001c1d4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c1d7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c1da:	6a 20                	push   0x20
c001c1dc:	e8 6a 36 ff ff       	call   c000f84b <malloc>
c001c1e1:	89 c3                	mov    ebx,eax
c001c1e3:	58                   	pop    eax
c001c1e4:	5a                   	pop    edx
c001c1e5:	68 00 50 00 00       	push   0x5000
c001c1ea:	53                   	push   ebx
c001c1eb:	e8 7a 42 ff ff       	call   c001046a <Pipe::Pipe(int)>
c001c1f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1f3:	e8 8c 53 ff ff       	call   c0011584 <UnixFile::getFileDescriptor()>
c001c1f8:	89 07                	mov    DWORD PTR [edi],eax
c001c1fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1fd:	e8 82 53 ff ff       	call   c0011584 <UnixFile::getFileDescriptor()>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	89 06                	mov    DWORD PTR [esi],eax
c001c207:	31 d2                	xor    edx,edx
c001c209:	5b                   	pop    ebx
c001c20a:	31 c0                	xor    eax,eax
c001c20c:	5e                   	pop    esi
c001c20d:	5f                   	pop    edi
c001c20e:	c3                   	ret    

c001c20f <sysGetUnixTime(regs*)>:
c001c20f:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001c214:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c21a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c21e:	e9 c9 7a ff ff       	jmp    c0013cec <Clock::timeInSecondsLocal()>

c001c223 <string_ends_with(char const*, char const*)>:
c001c223:	57                   	push   edi
c001c224:	56                   	push   esi
c001c225:	53                   	push   ebx
c001c226:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c22a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	53                   	push   ebx
c001c232:	e8 65 45 fe ff       	call   c000079c <strlen>
c001c237:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c23a:	89 c6                	mov    esi,eax
c001c23c:	e8 5b 45 fe ff       	call   c000079c <strlen>
c001c241:	83 c4 10             	add    esp,0x10
c001c244:	39 c6                	cmp    esi,eax
c001c246:	7d 06                	jge    c001c24e <string_ends_with(char const*, char const*)+0x2b>
c001c248:	5b                   	pop    ebx
c001c249:	31 c0                	xor    eax,eax
c001c24b:	5e                   	pop    esi
c001c24c:	5f                   	pop    edi
c001c24d:	c3                   	ret    
c001c24e:	83 ec 08             	sub    esp,0x8
c001c251:	29 c6                	sub    esi,eax
c001c253:	57                   	push   edi
c001c254:	01 f3                	add    ebx,esi
c001c256:	53                   	push   ebx
c001c257:	e8 6c 46 fe ff       	call   c00008c8 <strcmp>
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	85 c0                	test   eax,eax
c001c261:	5b                   	pop    ebx
c001c262:	0f 94 c0             	sete   al
c001c265:	5e                   	pop    esi
c001c266:	0f b6 c0             	movzx  eax,al
c001c269:	5f                   	pop    edi
c001c26a:	c3                   	ret    

c001c26b <sysCallOpen(regs*)>:
c001c26b:	56                   	push   esi
c001c26c:	53                   	push   ebx
c001c26d:	81 ec 04 01 00 00    	sub    esp,0x104
c001c273:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c27a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c27d:	85 c9                	test   ecx,ecx
c001c27f:	0f 84 b3 00 00 00    	je     c001c338 <sysCallOpen(regs*)+0xcd>
c001c285:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c288:	85 c0                	test   eax,eax
c001c28a:	0f 84 a8 00 00 00    	je     c001c338 <sysCallOpen(regs*)+0xcd>
c001c290:	52                   	push   edx
c001c291:	68 e1 be 02 c0       	push   0xc002bee1
c001c296:	50                   	push   eax
c001c297:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c29b:	56                   	push   esi
c001c29c:	e8 b7 6e ff ff       	call   c0013158 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c2a1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c2a4:	e8 f3 44 fe ff       	call   c000079c <strlen>
c001c2a9:	83 c4 10             	add    esp,0x10
c001c2ac:	48                   	dec    eax
c001c2ad:	74 1d                	je     c001c2cc <sysCallOpen(regs*)+0x61>
c001c2af:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c2b2:	eb 0f                	jmp    c001c2c3 <sysCallOpen(regs*)+0x58>
c001c2b4:	80 fa 3a             	cmp    dl,0x3a
c001c2b7:	74 0f                	je     c001c2c8 <sysCallOpen(regs*)+0x5d>
c001c2b9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c2bd:	48                   	dec    eax
c001c2be:	74 0c                	je     c001c2cc <sysCallOpen(regs*)+0x61>
c001c2c0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c2c3:	80 fa 2e             	cmp    dl,0x2e
c001c2c6:	75 ec                	jne    c001c2b4 <sysCallOpen(regs*)+0x49>
c001c2c8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c2cc:	83 ec 08             	sub    esp,0x8
c001c2cf:	68 e5 be 02 c0       	push   0xc002bee5
c001c2d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2d7:	e8 47 ff ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c2dc:	83 c4 10             	add    esp,0x10
c001c2df:	85 c0                	test   eax,eax
c001c2e1:	75 17                	jne    c001c2fa <sysCallOpen(regs*)+0x8f>
c001c2e3:	83 ec 08             	sub    esp,0x8
c001c2e6:	68 06 bf 02 c0       	push   0xc002bf06
c001c2eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2ee:	e8 30 ff ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c2f3:	83 c4 10             	add    esp,0x10
c001c2f6:	85 c0                	test   eax,eax
c001c2f8:	74 51                	je     c001c34b <sysCallOpen(regs*)+0xe0>
c001c2fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2fd:	83 ec 08             	sub    esp,0x8
c001c300:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c306:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c30d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c310:	ff 30                	push   DWORD PTR [eax]
c001c312:	68 ea be 02 c0       	push   0xc002beea
c001c317:	e8 87 6a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001c31c:	c7 04 24 f9 be 02 c0 	mov    DWORD PTR [esp],0xc002bef9
c001c323:	e8 7b 6a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	81 c4 04 01 00 00    	add    esp,0x104
c001c331:	31 c0                	xor    eax,eax
c001c333:	31 d2                	xor    edx,edx
c001c335:	5b                   	pop    ebx
c001c336:	5e                   	pop    esi
c001c337:	c3                   	ret    
c001c338:	81 c4 04 01 00 00    	add    esp,0x104
c001c33e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c343:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c348:	5b                   	pop    ebx
c001c349:	5e                   	pop    esi
c001c34a:	c3                   	ret    
c001c34b:	83 ec 08             	sub    esp,0x8
c001c34e:	68 e6 be 02 c0       	push   0xc002bee6
c001c353:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c356:	e8 6d 45 fe ff       	call   c00008c8 <strcmp>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	85 c0                	test   eax,eax
c001c360:	74 98                	je     c001c2fa <sysCallOpen(regs*)+0x8f>
c001c362:	83 ec 08             	sub    esp,0x8
c001c365:	68 e5 be 02 c0       	push   0xc002bee5
c001c36a:	56                   	push   esi
c001c36b:	e8 b3 fe ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c370:	83 c4 10             	add    esp,0x10
c001c373:	85 c0                	test   eax,eax
c001c375:	75 83                	jne    c001c2fa <sysCallOpen(regs*)+0x8f>
c001c377:	83 ec 08             	sub    esp,0x8
c001c37a:	68 0b bf 02 c0       	push   0xc002bf0b
c001c37f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c382:	e8 9c fe ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	85 c0                	test   eax,eax
c001c38c:	0f 85 d9 00 00 00    	jne    c001c46b <sysCallOpen(regs*)+0x200>
c001c392:	83 ec 08             	sub    esp,0x8
c001c395:	68 10 bf 02 c0       	push   0xc002bf10
c001c39a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c39d:	e8 81 fe ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c3a2:	83 c4 10             	add    esp,0x10
c001c3a5:	85 c0                	test   eax,eax
c001c3a7:	0f 85 be 00 00 00    	jne    c001c46b <sysCallOpen(regs*)+0x200>
c001c3ad:	83 ec 08             	sub    esp,0x8
c001c3b0:	68 0c bf 02 c0       	push   0xc002bf0c
c001c3b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3b8:	e8 0b 45 fe ff       	call   c00008c8 <strcmp>
c001c3bd:	83 c4 10             	add    esp,0x10
c001c3c0:	85 c0                	test   eax,eax
c001c3c2:	0f 84 a3 00 00 00    	je     c001c46b <sysCallOpen(regs*)+0x200>
c001c3c8:	83 ec 08             	sub    esp,0x8
c001c3cb:	68 0b bf 02 c0       	push   0xc002bf0b
c001c3d0:	56                   	push   esi
c001c3d1:	e8 4d fe ff ff       	call   c001c223 <string_ends_with(char const*, char const*)>
c001c3d6:	83 c4 10             	add    esp,0x10
c001c3d9:	85 c0                	test   eax,eax
c001c3db:	0f 85 8a 00 00 00    	jne    c001c46b <sysCallOpen(regs*)+0x200>
c001c3e1:	83 ec 0c             	sub    esp,0xc
c001c3e4:	68 14 01 00 00       	push   0x114
c001c3e9:	e8 5d 34 ff ff       	call   c000f84b <malloc>
c001c3ee:	83 c4 0c             	add    esp,0xc
c001c3f1:	89 c6                	mov    esi,eax
c001c3f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3f8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3fe:	56                   	push   esi
c001c3ff:	e8 fe 6e ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001c404:	83 c4 10             	add    esp,0x10
c001c407:	85 f6                	test   esi,esi
c001c409:	0f 84 29 ff ff ff    	je     c001c338 <sysCallOpen(regs*)+0xcd>
c001c40f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c412:	0f b6 c2             	movzx  eax,dl
c001c415:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c418:	89 d0                	mov    eax,edx
c001c41a:	83 e0 01             	and    eax,0x1
c001c41d:	f6 c2 02             	test   dl,0x2
c001c420:	74 03                	je     c001c425 <sysCallOpen(regs*)+0x1ba>
c001c422:	83 c8 02             	or     eax,0x2
c001c425:	f6 c2 04             	test   dl,0x4
c001c428:	74 03                	je     c001c42d <sysCallOpen(regs*)+0x1c2>
c001c42a:	83 c8 04             	or     eax,0x4
c001c42d:	f6 c2 08             	test   dl,0x8
c001c430:	74 03                	je     c001c435 <sysCallOpen(regs*)+0x1ca>
c001c432:	83 c8 0a             	or     eax,0xa
c001c435:	83 e2 10             	and    edx,0x10
c001c438:	74 03                	je     c001c43d <sysCallOpen(regs*)+0x1d2>
c001c43a:	83 c8 12             	or     eax,0x12
c001c43d:	83 ec 08             	sub    esp,0x8
c001c440:	50                   	push   eax
c001c441:	56                   	push   esi
c001c442:	e8 1f 6f ff ff       	call   c0013366 <File::open(FileOpenMode)>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	85 c0                	test   eax,eax
c001c44c:	0f 85 e6 fe ff ff    	jne    c001c338 <sysCallOpen(regs*)+0xcd>
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	56                   	push   esi
c001c456:	e8 29 51 ff ff       	call   c0011584 <UnixFile::getFileDescriptor()>
c001c45b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c45e:	89 02                	mov    DWORD PTR [edx],eax
c001c460:	c1 f8 1f             	sar    eax,0x1f
c001c463:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c466:	e9 bd fe ff ff       	jmp    c001c328 <sysCallOpen(regs*)+0xbd>
c001c46b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c46e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c474:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c47b:	e9 ab fe ff ff       	jmp    c001c32b <sysCallOpen(regs*)+0xc0>

c001c480 <Sys::loadSyscalls()>:
c001c480:	c7 05 c0 0f 03 c0 8d b5 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001b58d
c001c48a:	c7 05 c4 0f 03 c0 76 b1 01 c0 	mov    DWORD PTR ds:0xc0030fc4,0xc001b176
c001c494:	c7 05 c8 0f 03 c0 e0 b2 01 c0 	mov    DWORD PTR ds:0xc0030fc8,0xc001b2e0
c001c49e:	c7 05 cc 0f 03 c0 c3 b4 01 c0 	mov    DWORD PTR ds:0xc0030fcc,0xc001b4c3
c001c4a8:	c7 05 d0 0f 03 c0 78 b2 01 c0 	mov    DWORD PTR ds:0xc0030fd0,0xc001b278
c001c4b2:	c7 05 d4 0f 03 c0 ad b1 01 c0 	mov    DWORD PTR ds:0xc0030fd4,0xc001b1ad
c001c4bc:	c7 05 d8 0f 03 c0 8e b1 01 c0 	mov    DWORD PTR ds:0xc0030fd8,0xc001b18e
c001c4c6:	c7 05 dc 0f 03 c0 35 b3 01 c0 	mov    DWORD PTR ds:0xc0030fdc,0xc001b335
c001c4d0:	c7 05 e4 0f 03 c0 bd ba 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001babd
c001c4da:	c7 05 e0 0f 03 c0 6b c2 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001c26b
c001c4e4:	c7 05 e8 0f 03 c0 45 bb 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001bb45
c001c4ee:	c7 05 ec 0f 03 c0 ac b7 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b7ac
c001c4f8:	c7 05 f0 0f 03 c0 c8 b5 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001b5c8
c001c502:	c7 05 f4 0f 03 c0 cd b5 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b5cd
c001c50c:	c7 05 f8 0f 03 c0 20 bc 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001bc20
c001c516:	c7 05 fc 0f 03 c0 ba bb 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001bbba
c001c520:	c7 05 00 10 03 c0 94 b8 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001b894
c001c52a:	c7 05 04 10 03 c0 fd b8 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001b8fd
c001c534:	c7 05 08 10 03 c0 7a b9 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001b97a
c001c53e:	c7 05 0c 10 03 c0 d2 b5 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b5d2
c001c548:	c7 05 10 10 03 c0 90 bc 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001bc90
c001c552:	c7 05 14 10 03 c0 aa bc 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001bcaa
c001c55c:	c7 05 18 10 03 c0 aa bc 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001bcaa
c001c566:	c7 05 1c 10 03 c0 eb bc 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001bceb
c001c570:	c7 05 20 10 03 c0 4f bd 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001bd4f
c001c57a:	c7 05 24 10 03 c0 7e b7 01 c0 	mov    DWORD PTR ds:0xc0031024,0xc001b77e
c001c584:	c7 05 28 10 03 c0 b3 bd 01 c0 	mov    DWORD PTR ds:0xc0031028,0xc001bdb3
c001c58e:	c7 05 2c 10 03 c0 3b b7 01 c0 	mov    DWORD PTR ds:0xc003102c,0xc001b73b
c001c598:	c7 05 30 10 03 c0 ff bd 01 c0 	mov    DWORD PTR ds:0xc0031030,0xc001bdff
c001c5a2:	c7 05 34 10 03 c0 3a b8 01 c0 	mov    DWORD PTR ds:0xc0031034,0xc001b83a
c001c5ac:	c7 05 38 10 03 c0 82 be 01 c0 	mov    DWORD PTR ds:0xc0031038,0xc001be82
c001c5b6:	c7 05 3c 10 03 c0 fd b9 01 c0 	mov    DWORD PTR ds:0xc003103c,0xc001b9fd
c001c5c0:	c7 05 40 10 03 c0 a9 be 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001bea9
c001c5ca:	c7 05 44 10 03 c0 01 bf 01 c0 	mov    DWORD PTR ds:0xc0031044,0xc001bf01
c001c5d4:	c7 05 48 10 03 c0 39 c0 01 c0 	mov    DWORD PTR ds:0xc0031048,0xc001c039
c001c5de:	c7 05 4c 10 03 c0 dc b5 01 c0 	mov    DWORD PTR ds:0xc003104c,0xc001b5dc
c001c5e8:	c7 05 50 10 03 c0 46 b6 01 c0 	mov    DWORD PTR ds:0xc0031050,0xc001b646
c001c5f2:	c7 05 54 10 03 c0 8c b6 01 c0 	mov    DWORD PTR ds:0xc0031054,0xc001b68c
c001c5fc:	c7 05 58 10 03 c0 58 c1 01 c0 	mov    DWORD PTR ds:0xc0031058,0xc001c158
c001c606:	c7 05 5c 10 03 c0 c5 bc 01 c0 	mov    DWORD PTR ds:0xc003105c,0xc001bcc5
c001c610:	c7 05 60 10 03 c0 dd b6 01 c0 	mov    DWORD PTR ds:0xc0031060,0xc001b6dd
c001c61a:	c7 05 64 10 03 c0 ca c1 01 c0 	mov    DWORD PTR ds:0xc0031064,0xc001c1ca
c001c624:	c7 05 68 10 03 c0 0f c2 01 c0 	mov    DWORD PTR ds:0xc0031068,0xc001c20f
c001c62e:	c7 05 6c 10 03 c0 d0 b1 01 c0 	mov    DWORD PTR ds:0xc003106c,0xc001b1d0
c001c638:	c7 05 70 10 03 c0 51 b3 01 c0 	mov    DWORD PTR ds:0xc0031070,0xc001b351
c001c642:	c7 05 74 10 03 c0 79 b4 01 c0 	mov    DWORD PTR ds:0xc0031074,0xc001b479
c001c64c:	c7 05 78 10 03 c0 40 b1 01 c0 	mov    DWORD PTR ds:0xc0031078,0xc001b140
c001c656:	c7 05 7c 10 03 c0 2b b5 01 c0 	mov    DWORD PTR ds:0xc003107c,0xc001b52b
c001c660:	c7 05 80 10 03 c0 b9 b1 01 c0 	mov    DWORD PTR ds:0xc0031080,0xc001b1b9
c001c66a:	c3                   	ret    

c001c66b <Sys::systemCall(regs*, void*)>:
c001c66b:	53                   	push   ebx
c001c66c:	83 ec 08             	sub    esp,0x8
c001c66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c673:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c676:	83 f8 7f             	cmp    eax,0x7f
c001c679:	77 16                	ja     c001c691 <Sys::systemCall(regs*, void*)+0x26>
c001c67b:	8b 14 85 c0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf040]
c001c682:	85 d2                	test   edx,edx
c001c684:	74 0b                	je     c001c691 <Sys::systemCall(regs*, void*)+0x26>
c001c686:	83 ec 0c             	sub    esp,0xc
c001c689:	53                   	push   ebx
c001c68a:	ff d2                	call   edx
c001c68c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c68f:	eb 0d                	jmp    c001c69e <Sys::systemCall(regs*, void*)+0x33>
c001c691:	52                   	push   edx
c001c692:	52                   	push   edx
c001c693:	50                   	push   eax
c001c694:	68 15 bf 02 c0       	push   0xc002bf15
c001c699:	e8 05 67 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001c69e:	83 c4 10             	add    esp,0x10
c001c6a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c6a6:	31 d2                	xor    edx,edx
c001c6a8:	83 c4 08             	add    esp,0x8
c001c6ab:	5b                   	pop    ebx
c001c6ac:	c3                   	ret    

c001c6ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c6ad:	55                   	push   ebp
c001c6ae:	57                   	push   edi
c001c6af:	56                   	push   esi
c001c6b0:	53                   	push   ebx
c001c6b1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c6b7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c6be:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c6c5:	85 c0                	test   eax,eax
c001c6c7:	0f 95 c1             	setne  cl
c001c6ca:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c6d2:	0f 94 c2             	sete   dl
c001c6d5:	84 d1                	test   cl,dl
c001c6d7:	74 23                	je     c001c6fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c6d9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c6df:	74 1b                	je     c001c6fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c6e1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c6e7:	89 da                	mov    edx,ebx
c001c6e9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c6ef:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c6f5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c6fc:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c703:	05 ff 0f 00 00       	add    eax,0xfff
c001c708:	83 ec 0c             	sub    esp,0xc
c001c70b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c70f:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c715:	c1 e8 0c             	shr    eax,0xc
c001c718:	89 ef                	mov    edi,ebp
c001c71a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c71e:	c1 ef 0c             	shr    edi,0xc
c001c721:	6a 01                	push   0x1
c001c723:	e8 a7 52 ff ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c001c728:	89 c6                	mov    esi,eax
c001c72a:	58                   	pop    eax
c001c72b:	5a                   	pop    edx
c001c72c:	57                   	push   edi
c001c72d:	68 9b bf 02 c0       	push   0xc002bf9b
c001c732:	e8 6c 66 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001c737:	59                   	pop    ecx
c001c738:	58                   	pop    eax
c001c739:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c73d:	68 ad bf 02 c0       	push   0xc002bfad
c001c742:	e8 5c 66 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c750:	0f 86 24 01 00 00    	jbe    c001c87a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c756:	c1 e7 0c             	shl    edi,0xc
c001c759:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c75c:	89 df                	mov    edi,ebx
c001c75e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c762:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c769:	01 dd                	add    ebp,ebx
c001c76b:	29 fd                	sub    ebp,edi
c001c76d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c771:	0f 84 01 01 00 00    	je     c001c878 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c777:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c77d:	76 05                	jbe    c001c784 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c77f:	bd 00 10 00 00       	mov    ebp,0x1000
c001c784:	83 ec 0c             	sub    esp,0xc
c001c787:	31 d2                	xor    edx,edx
c001c789:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c790:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c792:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c796:	50                   	push   eax
c001c797:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c79b:	50                   	push   eax
c001c79c:	52                   	push   edx
c001c79d:	55                   	push   ebp
c001c79e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c7a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7a8:	83 c4 20             	add    esp,0x20
c001c7ab:	85 c0                	test   eax,eax
c001c7ad:	74 0a                	je     c001c7b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c7af:	53                   	push   ebx
c001c7b0:	53                   	push   ebx
c001c7b1:	50                   	push   eax
c001c7b2:	68 bf bf 02 c0       	push   0xc002bfbf
c001c7b7:	eb 0f                	jmp    c001c7c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c7b9:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c7bd:	74 20                	je     c001c7df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c7bf:	51                   	push   ecx
c001c7c0:	51                   	push   ecx
c001c7c1:	6a 00                	push   0x0
c001c7c3:	68 ea bf 02 c0       	push   0xc002bfea
c001c7c8:	e8 d6 65 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001c7cd:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7d0:	e8 c0 56 ff ff       	call   c0011e95 <Virt::freeKernelVirtualPages(unsigned long)>
c001c7d5:	83 c4 10             	add    esp,0x10
c001c7d8:	31 c0                	xor    eax,eax
c001c7da:	e9 55 01 00 00       	jmp    c001c934 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c7df:	e8 d8 14 00 00       	call   c001dcbc <lockScheduler()>
c001c7e4:	e8 ce 36 ff ff       	call   c000feb7 <Phys::allocatePage()>
c001c7e9:	6a 07                	push   0x7
c001c7eb:	89 c5                	mov    ebp,eax
c001c7ed:	56                   	push   esi
c001c7ee:	50                   	push   eax
c001c7ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7f7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7fd:	e8 fa 59 ff ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c802:	83 c4 0c             	add    esp,0xc
c001c805:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c80c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c812:	6a 00                	push   0x0
c001c814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c819:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c81c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c822:	e8 3f 58 ff ff       	call   c0012066 <VAS::mapOtherVASIn(bool, VAS*)>
c001c827:	58                   	pop    eax
c001c828:	5a                   	pop    edx
c001c829:	68 07 0c 00 00       	push   0xc07
c001c82e:	57                   	push   edi
c001c82f:	81 c7 00 10 00 00    	add    edi,0x1000
c001c835:	55                   	push   ebp
c001c836:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c83d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c843:	6a 00                	push   0x0
c001c845:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c84a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c84d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c853:	e8 5e 5d ff ff       	call   c00125b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c858:	83 c4 1c             	add    esp,0x1c
c001c85b:	68 00 10 00 00       	push   0x1000
c001c860:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c864:	50                   	push   eax
c001c865:	56                   	push   esi
c001c866:	e8 e1 3e fe ff       	call   c000074c <memcpy>
c001c86b:	e8 4e 14 00 00       	call   c001dcbe <unlockScheduler()>
c001c870:	83 c4 10             	add    esp,0x10
c001c873:	e9 ea fe ff ff       	jmp    c001c762 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c878:	89 fb                	mov    ebx,edi
c001c87a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c882:	0f 86 9e 00 00 00    	jbe    c001c926 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c888:	e8 2f 14 00 00       	call   c001dcbc <lockScheduler()>
c001c88d:	51                   	push   ecx
c001c88e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c895:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c89b:	6a 00                	push   0x0
c001c89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8a5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8ab:	e8 b6 57 ff ff       	call   c0012066 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8b0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c8b4:	c1 e7 0c             	shl    edi,0xc
c001c8b7:	01 df                	add    edi,ebx
c001c8b9:	83 c4 10             	add    esp,0x10
c001c8bc:	39 fb                	cmp    ebx,edi
c001c8be:	74 61                	je     c001c921 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c8c0:	e8 f2 35 ff ff       	call   c000feb7 <Phys::allocatePage()>
c001c8c5:	6a 07                	push   0x7
c001c8c7:	89 c5                	mov    ebp,eax
c001c8c9:	56                   	push   esi
c001c8ca:	50                   	push   eax
c001c8cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8d3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8d9:	e8 1e 59 ff ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8de:	58                   	pop    eax
c001c8df:	5a                   	pop    edx
c001c8e0:	68 07 0c 00 00       	push   0xc07
c001c8e5:	53                   	push   ebx
c001c8e6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8ec:	55                   	push   ebp
c001c8ed:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8f4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8fa:	6a 00                	push   0x0
c001c8fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c901:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c904:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c90a:	e8 a7 5c ff ff       	call   c00125b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c90f:	83 c4 1c             	add    esp,0x1c
c001c912:	68 00 10 00 00       	push   0x1000
c001c917:	6a 00                	push   0x0
c001c919:	56                   	push   esi
c001c91a:	e8 61 3e fe ff       	call   c0000780 <memset>
c001c91f:	eb 98                	jmp    c001c8b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c921:	e8 98 13 00 00       	call   c001dcbe <unlockScheduler()>
c001c926:	83 ec 0c             	sub    esp,0xc
c001c929:	56                   	push   esi
c001c92a:	e8 66 55 ff ff       	call   c0011e95 <Virt::freeKernelVirtualPages(unsigned long)>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	b0 01                	mov    al,0x1
c001c934:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c93a:	5b                   	pop    ebx
c001c93b:	5e                   	pop    esi
c001c93c:	5f                   	pop    edi
c001c93d:	5d                   	pop    ebp
c001c93e:	c3                   	ret    

c001c93f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c93f:	55                   	push   ebp
c001c940:	57                   	push   edi
c001c941:	56                   	push   esi
c001c942:	53                   	push   ebx
c001c943:	83 ec 48             	sub    esp,0x48
c001c946:	68 14 01 00 00       	push   0x114
c001c94b:	e8 fb 2e ff ff       	call   c000f84b <malloc>
c001c950:	83 c4 0c             	add    esp,0xc
c001c953:	89 c6                	mov    esi,eax
c001c955:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c959:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c95d:	50                   	push   eax
c001c95e:	e8 9f 69 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001c963:	58                   	pop    eax
c001c964:	5a                   	pop    edx
c001c965:	6a 01                	push   0x1
c001c967:	56                   	push   esi
c001c968:	e8 f9 69 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c001c96d:	83 c4 10             	add    esp,0x10
c001c970:	85 c0                	test   eax,eax
c001c972:	0f 85 47 01 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c978:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	6a 34                	push   0x34
c001c985:	e8 c1 2e ff ff       	call   c000f84b <malloc>
c001c98a:	89 c3                	mov    ebx,eax
c001c98c:	58                   	pop    eax
c001c98d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c98f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c993:	57                   	push   edi
c001c994:	53                   	push   ebx
c001c995:	6a 00                	push   0x0
c001c997:	6a 34                	push   0x34
c001c999:	56                   	push   esi
c001c99a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c99d:	83 c4 20             	add    esp,0x20
c001c9a0:	85 c0                	test   eax,eax
c001c9a2:	0f 85 17 01 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9a8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c9ae:	0f 85 0b 01 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c9b7:	85 c0                	test   eax,eax
c001c9b9:	0f 84 00 01 00 00    	je     c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9bf:	31 d2                	xor    edx,edx
c001c9c1:	55                   	push   ebp
c001c9c2:	52                   	push   edx
c001c9c3:	50                   	push   eax
c001c9c4:	56                   	push   esi
c001c9c5:	e8 5a 6a ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001c9ca:	83 c4 10             	add    esp,0x10
c001c9cd:	85 c0                	test   eax,eax
c001c9cf:	0f 85 ea 00 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9d5:	83 ec 0c             	sub    esp,0xc
c001c9d8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c9db:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c9df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c9e3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c9e7:	0f af c2             	imul   eax,edx
c001c9ea:	50                   	push   eax
c001c9eb:	e8 5b 2e ff ff       	call   c000f84b <malloc>
c001c9f0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9fd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca01:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca05:	0f af c2             	imul   eax,edx
c001ca08:	99                   	cdq    
c001ca09:	52                   	push   edx
c001ca0a:	50                   	push   eax
c001ca0b:	56                   	push   esi
c001ca0c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca0f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ca12:	83 c4 20             	add    esp,0x20
c001ca15:	85 c0                	test   eax,eax
c001ca17:	0f 84 a2 00 00 00    	je     c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca1d:	31 d2                	xor    edx,edx
c001ca1f:	51                   	push   ecx
c001ca20:	52                   	push   edx
c001ca21:	50                   	push   eax
c001ca22:	56                   	push   esi
c001ca23:	e8 fc 69 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001ca28:	83 c4 10             	add    esp,0x10
c001ca2b:	85 c0                	test   eax,eax
c001ca2d:	0f 85 8c 00 00 00    	jne    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca33:	83 ec 0c             	sub    esp,0xc
c001ca36:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca3a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca3e:	31 ed                	xor    ebp,ebp
c001ca40:	0f af c2             	imul   eax,edx
c001ca43:	50                   	push   eax
c001ca44:	e8 02 2e ff ff       	call   c000f84b <malloc>
c001ca49:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca56:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca5a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca5e:	0f af c2             	imul   eax,edx
c001ca61:	99                   	cdq    
c001ca62:	52                   	push   edx
c001ca63:	50                   	push   eax
c001ca64:	56                   	push   esi
c001ca65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca68:	83 c4 20             	add    esp,0x20
c001ca6b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ca73:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ca77:	0f 86 80 00 00 00    	jbe    c001cafd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ca7d:	0f b7 fd             	movzx  edi,bp
c001ca80:	c1 e7 05             	shl    edi,0x5
c001ca83:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ca87:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ca8a:	75 6b                	jne    c001caf7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca8c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ca8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca93:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ca96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca9a:	52                   	push   edx
c001ca9b:	31 d2                	xor    edx,edx
c001ca9d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001caa0:	52                   	push   edx
c001caa1:	50                   	push   eax
c001caa2:	56                   	push   esi
c001caa3:	e8 7c 69 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001caa8:	83 c4 10             	add    esp,0x10
c001caab:	85 c0                	test   eax,eax
c001caad:	74 17                	je     c001cac6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001caaf:	83 ec 0c             	sub    esp,0xc
c001cab2:	68 16 c0 02 c0       	push   0xc002c016
c001cab7:	e8 e7 62 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001cabc:	83 c4 10             	add    esp,0x10
c001cabf:	31 c0                	xor    eax,eax
c001cac1:	e9 87 00 00 00       	jmp    c001cb4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cac6:	83 ec 0c             	sub    esp,0xc
c001cac9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cacc:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cacf:	50                   	push   eax
c001cad0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cad4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cad8:	56                   	push   esi
c001cad9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cadd:	e8 cb fb ff ff       	call   c001c6ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cae2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cae6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001caea:	83 c4 20             	add    esp,0x20
c001caed:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001caf1:	73 04                	jae    c001caf7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001caf7:	45                   	inc    ebp
c001caf8:	e9 76 ff ff ff       	jmp    c001ca73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cafd:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cb01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb09:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cb0f:	83 ec 0c             	sub    esp,0xc
c001cb12:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cb18:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cb1d:	05 00 10 00 00       	add    eax,0x1000
c001cb22:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb29:	e8 2d 2d ff ff       	call   c000f85b <free>
c001cb2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb31:	e8 25 2d ff ff       	call   c000f85b <free>
c001cb36:	58                   	pop    eax
c001cb37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb3b:	e8 1b 2d ff ff       	call   c000f85b <free>
c001cb40:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb43:	e8 7c 68 ff ff       	call   c00133c4 <File::close()>
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	b0 01                	mov    al,0x1
c001cb4d:	83 c4 3c             	add    esp,0x3c
c001cb50:	5b                   	pop    ebx
c001cb51:	5e                   	pop    esi
c001cb52:	5f                   	pop    edi
c001cb53:	5d                   	pop    ebp
c001cb54:	c3                   	ret    

c001cb55 <Thr::runtimeReferenceHelper()>:
c001cb55:	83 ec 18             	sub    esp,0x18
c001cb58:	68 1e c0 02 c0       	push   0xc002c01e
c001cb5d:	e8 41 62 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001cb62:	fa                   	cli    
c001cb63:	83 c4 10             	add    esp,0x10
c001cb66:	eb fe                	jmp    c001cb66 <Thr::runtimeReferenceHelper()+0x11>

c001cb68 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cb68:	57                   	push   edi
c001cb69:	56                   	push   esi
c001cb6a:	53                   	push   ebx
c001cb6b:	31 db                	xor    ebx,ebx
c001cb6d:	39 1d 60 19 03 c0    	cmp    DWORD PTR ds:0xc0031960,ebx
c001cb73:	7e 3c                	jle    c001cbb1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cb75:	8b 34 9d e0 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce720]
c001cb7c:	31 ff                	xor    edi,edi
c001cb7e:	39 3c 9d e0 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce820],edi
c001cb85:	7e 27                	jle    c001cbae <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cb87:	50                   	push   eax
c001cb88:	50                   	push   eax
c001cb89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb8d:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb8f:	03 04 9d 60 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce7a0]
c001cb96:	50                   	push   eax
c001cb97:	e8 2c 3d fe ff       	call   c00008c8 <strcmp>
c001cb9c:	83 c4 10             	add    esp,0x10
c001cb9f:	85 c0                	test   eax,eax
c001cba1:	75 05                	jne    c001cba8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cba3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cba6:	eb 0b                	jmp    c001cbb3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cba8:	83 c6 10             	add    esi,0x10
c001cbab:	47                   	inc    edi
c001cbac:	eb d0                	jmp    c001cb7e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cbae:	43                   	inc    ebx
c001cbaf:	eb bc                	jmp    c001cb6d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cbb1:	31 c0                	xor    eax,eax
c001cbb3:	5b                   	pop    ebx
c001cbb4:	5e                   	pop    esi
c001cbb5:	5f                   	pop    edi
c001cbb6:	c3                   	ret    

c001cbb7 <Thr::loadKernelSymbolTable(char const*)>:
c001cbb7:	55                   	push   ebp
c001cbb8:	57                   	push   edi
c001cbb9:	56                   	push   esi
c001cbba:	53                   	push   ebx
c001cbbb:	83 ec 68             	sub    esp,0x68
c001cbbe:	8b 35 b4 19 03 c0    	mov    esi,DWORD PTR ds:0xc00319b4
c001cbc4:	68 14 01 00 00       	push   0x114
c001cbc9:	e8 7d 2c ff ff       	call   c000f84b <malloc>
c001cbce:	83 c4 0c             	add    esp,0xc
c001cbd1:	89 c3                	mov    ebx,eax
c001cbd3:	56                   	push   esi
c001cbd4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cbd8:	50                   	push   eax
c001cbd9:	e8 24 67 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001cbde:	5e                   	pop    esi
c001cbdf:	5f                   	pop    edi
c001cbe0:	6a 01                	push   0x1
c001cbe2:	53                   	push   ebx
c001cbe3:	e8 7e 67 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c001cbe8:	83 c4 10             	add    esp,0x10
c001cbeb:	85 c0                	test   eax,eax
c001cbed:	74 0a                	je     c001cbf9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cbef:	83 ec 0c             	sub    esp,0xc
c001cbf2:	68 40 c0 02 c0       	push   0xc002c040
c001cbf7:	eb 34                	jmp    c001cc2d <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cbf9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cc01:	83 ec 0c             	sub    esp,0xc
c001cc04:	6a 34                	push   0x34
c001cc06:	e8 40 2c ff ff       	call   c000f84b <malloc>
c001cc0b:	59                   	pop    ecx
c001cc0c:	89 c7                	mov    edi,eax
c001cc0e:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cc12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc14:	56                   	push   esi
c001cc15:	57                   	push   edi
c001cc16:	6a 00                	push   0x0
c001cc18:	6a 34                	push   0x34
c001cc1a:	53                   	push   ebx
c001cc1b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc1e:	83 c4 20             	add    esp,0x20
c001cc21:	85 c0                	test   eax,eax
c001cc23:	74 17                	je     c001cc3c <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cc25:	83 ec 0c             	sub    esp,0xc
c001cc28:	68 57 c0 02 c0       	push   0xc002c057
c001cc2d:	e8 af d8 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001cc32:	83 c4 10             	add    esp,0x10
c001cc35:	31 c0                	xor    eax,eax
c001cc37:	e9 31 02 00 00       	jmp    c001ce6d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cc3c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc42:	75 e1                	jne    c001cc25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc44:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc47:	85 c0                	test   eax,eax
c001cc49:	74 da                	je     c001cc25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc4b:	52                   	push   edx
c001cc4c:	31 d2                	xor    edx,edx
c001cc4e:	52                   	push   edx
c001cc4f:	50                   	push   eax
c001cc50:	53                   	push   ebx
c001cc51:	e8 ce 67 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001cc56:	83 c4 10             	add    esp,0x10
c001cc59:	85 c0                	test   eax,eax
c001cc5b:	75 c8                	jne    c001cc25 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc5d:	83 ec 0c             	sub    esp,0xc
c001cc60:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc64:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc68:	31 ed                	xor    ebp,ebp
c001cc6a:	0f af c2             	imul   eax,edx
c001cc6d:	50                   	push   eax
c001cc6e:	e8 d8 2b ff ff       	call   c000f84b <malloc>
c001cc73:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cc75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc79:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc80:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc84:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc88:	0f af c2             	imul   eax,edx
c001cc8b:	99                   	cdq    
c001cc8c:	52                   	push   edx
c001cc8d:	50                   	push   eax
c001cc8e:	53                   	push   ebx
c001cc8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc92:	83 c4 20             	add    esp,0x20
c001cc95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc9d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cca5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ccad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccb5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ccb9:	0f 86 aa 00 00 00    	jbe    c001cd69 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ccbf:	0f b7 f5             	movzx  esi,bp
c001ccc2:	6b f6 28             	imul   esi,esi,0x28
c001ccc5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ccc9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cccc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccd0:	50                   	push   eax
c001ccd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ccd5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ccd9:	8b 16                	mov    edx,DWORD PTR [esi]
c001ccdb:	6b c0 28             	imul   eax,eax,0x28
c001ccde:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cce2:	89 d0                	mov    eax,edx
c001cce4:	31 d2                	xor    edx,edx
c001cce6:	52                   	push   edx
c001cce7:	50                   	push   eax
c001cce8:	53                   	push   ebx
c001cce9:	e8 36 67 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001ccee:	83 c4 0c             	add    esp,0xc
c001ccf1:	6a 20                	push   0x20
c001ccf3:	6a 00                	push   0x0
c001ccf5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ccf9:	52                   	push   edx
c001ccfa:	e8 81 3a fe ff       	call   c0000780 <memset>
c001ccff:	58                   	pop    eax
c001cd00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd02:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cd06:	51                   	push   ecx
c001cd07:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cd0b:	52                   	push   edx
c001cd0c:	6a 00                	push   0x0
c001cd0e:	6a 1f                	push   0x1f
c001cd10:	53                   	push   ebx
c001cd11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd14:	83 c4 18             	add    esp,0x18
c001cd17:	68 6e c0 02 c0       	push   0xc002c06e
c001cd1c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd20:	52                   	push   edx
c001cd21:	e8 a2 3b fe ff       	call   c00008c8 <strcmp>
c001cd26:	83 c4 10             	add    esp,0x10
c001cd29:	85 c0                	test   eax,eax
c001cd2b:	75 0f                	jne    c001cd3c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cd2d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd3c:	50                   	push   eax
c001cd3d:	50                   	push   eax
c001cd3e:	68 76 c0 02 c0       	push   0xc002c076
c001cd43:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cd47:	50                   	push   eax
c001cd48:	e8 7b 3b fe ff       	call   c00008c8 <strcmp>
c001cd4d:	83 c4 10             	add    esp,0x10
c001cd50:	85 c0                	test   eax,eax
c001cd52:	75 0f                	jne    c001cd63 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cd54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd63:	45                   	inc    ebp
c001cd64:	e9 4c ff ff ff       	jmp    c001ccb5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cd69:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cd6e:	75 10                	jne    c001cd80 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	68 7e c0 02 c0       	push   0xc002c07e
c001cd78:	e8 64 d7 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001cd7d:	83 c4 10             	add    esp,0x10
c001cd80:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cd85:	75 10                	jne    c001cd97 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cd87:	83 ec 0c             	sub    esp,0xc
c001cd8a:	68 7e c0 02 c0       	push   0xc002c07e
c001cd8f:	e8 4d d7 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001cd94:	83 c4 10             	add    esp,0x10
c001cd97:	31 d2                	xor    edx,edx
c001cd99:	50                   	push   eax
c001cd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd9e:	52                   	push   edx
c001cd9f:	50                   	push   eax
c001cda0:	53                   	push   ebx
c001cda1:	e8 7e 66 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001cda6:	5a                   	pop    edx
c001cda7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cdab:	e8 9b 2a ff ff       	call   c000f84b <malloc>
c001cdb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cdb8:	31 c9                	xor    ecx,ecx
c001cdba:	5e                   	pop    esi
c001cdbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdbd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cdc1:	55                   	push   ebp
c001cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc6:	51                   	push   ecx
c001cdc7:	52                   	push   edx
c001cdc8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cdcc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cdd0:	53                   	push   ebx
c001cdd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdd4:	83 c4 14             	add    esp,0x14
c001cdd7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cddb:	e8 6b 2a ff ff       	call   c000f84b <malloc>
c001cde0:	89 c6                	mov    esi,eax
c001cde2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cde4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cde7:	56                   	push   esi
c001cde8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cdf0:	51                   	push   ecx
c001cdf1:	52                   	push   edx
c001cdf2:	53                   	push   ebx
c001cdf3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdf6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdfa:	8b 15 60 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031960
c001ce00:	83 c4 1c             	add    esp,0x1c
c001ce03:	c1 e8 04             	shr    eax,0x4
c001ce06:	89 04 95 e0 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce820],eax
c001ce0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce11:	31 d2                	xor    edx,edx
c001ce13:	52                   	push   edx
c001ce14:	50                   	push   eax
c001ce15:	53                   	push   ebx
c001ce16:	e8 09 66 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001ce1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce1d:	31 d2                	xor    edx,edx
c001ce1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce22:	56                   	push   esi
c001ce23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce27:	52                   	push   edx
c001ce28:	50                   	push   eax
c001ce29:	53                   	push   ebx
c001ce2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce2d:	83 c4 14             	add    esp,0x14
c001ce30:	53                   	push   ebx
c001ce31:	e8 8e 65 ff ff       	call   c00133c4 <File::close()>
c001ce36:	5d                   	pop    ebp
c001ce37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce3b:	e8 1b 2a ff ff       	call   c000f85b <free>
c001ce40:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce43:	e8 13 2a ff ff       	call   c000f85b <free>
c001ce48:	a1 60 19 03 c0       	mov    eax,ds:0xc0031960
c001ce4d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce51:	8d 50 01             	lea    edx,[eax+0x1]
c001ce54:	89 0c 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],ecx
c001ce5b:	89 34 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],esi
c001ce62:	89 15 60 19 03 c0    	mov    DWORD PTR ds:0xc0031960,edx
c001ce68:	83 c4 10             	add    esp,0x10
c001ce6b:	b0 01                	mov    al,0x1
c001ce6d:	83 c4 5c             	add    esp,0x5c
c001ce70:	5b                   	pop    ebx
c001ce71:	5e                   	pop    esi
c001ce72:	5f                   	pop    edi
c001ce73:	5d                   	pop    ebp
c001ce74:	c3                   	ret    

c001ce75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ce75:	55                   	push   ebp
c001ce76:	57                   	push   edi
c001ce77:	56                   	push   esi
c001ce78:	53                   	push   ebx
c001ce79:	81 ec 68 03 00 00    	sub    esp,0x368
c001ce7f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ce86:	8b 1d b4 19 03 c0    	mov    ebx,DWORD PTR ds:0xc00319b4
c001ce8c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ce90:	68 14 01 00 00       	push   0x114
c001ce95:	e8 b1 29 ff ff       	call   c000f84b <malloc>
c001ce9a:	83 c4 0c             	add    esp,0xc
c001ce9d:	89 c5                	mov    ebp,eax
c001ce9f:	53                   	push   ebx
c001cea0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cea7:	50                   	push   eax
c001cea8:	e8 55 64 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001cead:	5e                   	pop    esi
c001ceae:	5f                   	pop    edi
c001ceaf:	6a 01                	push   0x1
c001ceb1:	55                   	push   ebp
c001ceb2:	e8 af 64 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c001ceb7:	83 c4 10             	add    esp,0x10
c001ceba:	85 c0                	test   eax,eax
c001cebc:	0f 85 8d 06 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cec2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ceca:	83 ec 0c             	sub    esp,0xc
c001cecd:	6a 34                	push   0x34
c001cecf:	e8 77 29 ff ff       	call   c000f84b <malloc>
c001ced4:	5b                   	pop    ebx
c001ced5:	89 c7                	mov    edi,eax
c001ced7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cedb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cede:	53                   	push   ebx
c001cedf:	57                   	push   edi
c001cee0:	6a 00                	push   0x0
c001cee2:	6a 34                	push   0x34
c001cee4:	55                   	push   ebp
c001cee5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cee8:	83 c4 20             	add    esp,0x20
c001ceeb:	85 c0                	test   eax,eax
c001ceed:	0f 85 5c 06 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cef3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cef9:	0f 85 50 06 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ceff:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cf02:	85 c0                	test   eax,eax
c001cf04:	0f 84 45 06 00 00    	je     c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf0a:	31 d2                	xor    edx,edx
c001cf0c:	51                   	push   ecx
c001cf0d:	52                   	push   edx
c001cf0e:	50                   	push   eax
c001cf0f:	55                   	push   ebp
c001cf10:	e8 0f 65 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001cf15:	83 c4 10             	add    esp,0x10
c001cf18:	85 c0                	test   eax,eax
c001cf1a:	0f 85 2f 06 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cf26:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf2a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cf2e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf32:	0f af c2             	imul   eax,edx
c001cf35:	50                   	push   eax
c001cf36:	e8 10 29 ff ff       	call   c000f84b <malloc>
c001cf3b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf49:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf4d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf51:	0f af c2             	imul   eax,edx
c001cf54:	99                   	cdq    
c001cf55:	52                   	push   edx
c001cf56:	50                   	push   eax
c001cf57:	55                   	push   ebp
c001cf58:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf5b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cf5e:	83 c4 20             	add    esp,0x20
c001cf61:	85 c0                	test   eax,eax
c001cf63:	0f 84 e6 05 00 00    	je     c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf69:	52                   	push   edx
c001cf6a:	31 d2                	xor    edx,edx
c001cf6c:	52                   	push   edx
c001cf6d:	50                   	push   eax
c001cf6e:	55                   	push   ebp
c001cf6f:	e8 b0 64 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	85 c0                	test   eax,eax
c001cf79:	0f 85 d0 05 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf7f:	83 ec 0c             	sub    esp,0xc
c001cf82:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf86:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf8a:	31 f6                	xor    esi,esi
c001cf8c:	0f af c2             	imul   eax,edx
c001cf8f:	50                   	push   eax
c001cf90:	e8 b6 28 ff ff       	call   c000f84b <malloc>
c001cf95:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfa3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cfa7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cfab:	0f af c2             	imul   eax,edx
c001cfae:	99                   	cdq    
c001cfaf:	52                   	push   edx
c001cfb0:	50                   	push   eax
c001cfb1:	55                   	push   ebp
c001cfb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfb5:	83 c4 20             	add    esp,0x20
c001cfb8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cfbc:	0f 86 8a 00 00 00    	jbe    c001d04c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cfc2:	0f b7 de             	movzx  ebx,si
c001cfc5:	c1 e3 05             	shl    ebx,0x5
c001cfc8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cfcc:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cfcf:	75 75                	jne    c001d046 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cfd1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cfd4:	31 d2                	xor    edx,edx
c001cfd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cfda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cfdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfe1:	50                   	push   eax
c001cfe2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cfe5:	52                   	push   edx
c001cfe6:	50                   	push   eax
c001cfe7:	55                   	push   ebp
c001cfe8:	e8 37 64 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001cfed:	83 c4 10             	add    esp,0x10
c001cff0:	85 c0                	test   eax,eax
c001cff2:	0f 85 57 05 00 00    	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cff8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cfff:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d002:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d006:	31 d2                	xor    edx,edx
c001d008:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d00c:	83 ec 0c             	sub    esp,0xc
c001d00f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d013:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d01a:	50                   	push   eax
c001d01b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d01f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d023:	52                   	push   edx
c001d024:	50                   	push   eax
c001d025:	55                   	push   ebp
c001d026:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d029:	83 c4 1c             	add    esp,0x1c
c001d02c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d02f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d032:	50                   	push   eax
c001d033:	6a 00                	push   0x0
c001d035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d039:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d03d:	50                   	push   eax
c001d03e:	e8 3d 37 fe ff       	call   c0000780 <memset>
c001d043:	83 c4 10             	add    esp,0x10
c001d046:	46                   	inc    esi
c001d047:	e9 6c ff ff ff       	jmp    c001cfb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d04c:	53                   	push   ebx
c001d04d:	31 db                	xor    ebx,ebx
c001d04f:	68 00 01 00 00       	push   0x100
c001d054:	6a 00                	push   0x0
c001d056:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d05a:	50                   	push   eax
c001d05b:	e8 20 37 fe ff       	call   c0000780 <memset>
c001d060:	83 c4 0c             	add    esp,0xc
c001d063:	68 00 01 00 00       	push   0x100
c001d068:	6a 00                	push   0x0
c001d06a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d071:	50                   	push   eax
c001d072:	e8 09 37 fe ff       	call   c0000780 <memset>
c001d077:	83 c4 10             	add    esp,0x10
c001d07a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d082:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d08a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d092:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d09a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d0a2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d0a6:	0f 86 30 01 00 00    	jbe    c001d1dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d0ac:	0f b7 f3             	movzx  esi,bx
c001d0af:	6b f6 28             	imul   esi,esi,0x28
c001d0b2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d0b6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d0b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0bd:	52                   	push   edx
c001d0be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0c2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d0c6:	8b 06                	mov    eax,DWORD PTR [esi]
c001d0c8:	6b d2 28             	imul   edx,edx,0x28
c001d0cb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d0cf:	31 d2                	xor    edx,edx
c001d0d1:	52                   	push   edx
c001d0d2:	50                   	push   eax
c001d0d3:	55                   	push   ebp
c001d0d4:	e8 4b 63 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001d0d9:	83 c4 0c             	add    esp,0xc
c001d0dc:	6a 20                	push   0x20
c001d0de:	6a 00                	push   0x0
c001d0e0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d0e7:	51                   	push   ecx
c001d0e8:	e8 93 36 fe ff       	call   c0000780 <memset>
c001d0ed:	59                   	pop    ecx
c001d0ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d0f5:	52                   	push   edx
c001d0f6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d0fd:	51                   	push   ecx
c001d0fe:	6a 00                	push   0x0
c001d100:	6a 1f                	push   0x1f
c001d102:	55                   	push   ebp
c001d103:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d106:	83 c4 1c             	add    esp,0x1c
c001d109:	6a 09                	push   0x9
c001d10b:	68 98 c0 02 c0       	push   0xc002c098
c001d110:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d117:	51                   	push   ecx
c001d118:	e8 2b 35 fe ff       	call   c0000648 <memcmp>
c001d11d:	83 c4 10             	add    esp,0x10
c001d120:	85 c0                	test   eax,eax
c001d122:	75 21                	jne    c001d145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d128:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d12c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d130:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d134:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d137:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d13e:	89 d0                	mov    eax,edx
c001d140:	40                   	inc    eax
c001d141:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d145:	50                   	push   eax
c001d146:	6a 09                	push   0x9
c001d148:	68 a2 c0 02 c0       	push   0xc002c0a2
c001d14d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d154:	50                   	push   eax
c001d155:	e8 ee 34 fe ff       	call   c0000648 <memcmp>
c001d15a:	83 c4 10             	add    esp,0x10
c001d15d:	85 c0                	test   eax,eax
c001d15f:	75 21                	jne    c001d182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d165:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d169:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d16d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d171:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d174:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d17b:	89 d0                	mov    eax,edx
c001d17d:	40                   	inc    eax
c001d17e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d182:	50                   	push   eax
c001d183:	50                   	push   eax
c001d184:	68 6e c0 02 c0       	push   0xc002c06e
c001d189:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d190:	50                   	push   eax
c001d191:	e8 32 37 fe ff       	call   c00008c8 <strcmp>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	85 c0                	test   eax,eax
c001d19b:	75 0f                	jne    c001d1ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d19d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1ac:	50                   	push   eax
c001d1ad:	50                   	push   eax
c001d1ae:	68 76 c0 02 c0       	push   0xc002c076
c001d1b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1ba:	50                   	push   eax
c001d1bb:	e8 08 37 fe ff       	call   c00008c8 <strcmp>
c001d1c0:	83 c4 10             	add    esp,0x10
c001d1c3:	85 c0                	test   eax,eax
c001d1c5:	75 0f                	jne    c001d1d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d1c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d1d6:	43                   	inc    ebx
c001d1d7:	e9 c6 fe ff ff       	jmp    c001d0a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d1dc:	31 d2                	xor    edx,edx
c001d1de:	50                   	push   eax
c001d1df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d1e3:	52                   	push   edx
c001d1e4:	50                   	push   eax
c001d1e5:	55                   	push   ebp
c001d1e6:	e8 39 62 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001d1eb:	58                   	pop    eax
c001d1ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1f0:	e8 56 26 ff ff       	call   c000f84b <malloc>
c001d1f5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d1fc:	31 d2                	xor    edx,edx
c001d1fe:	58                   	pop    eax
c001d1ff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d203:	53                   	push   ebx
c001d204:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d208:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d20c:	52                   	push   edx
c001d20d:	50                   	push   eax
c001d20e:	55                   	push   ebp
c001d20f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d212:	83 c4 14             	add    esp,0x14
c001d215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d219:	e8 2d 26 ff ff       	call   c000f84b <malloc>
c001d21e:	31 d2                	xor    edx,edx
c001d220:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d224:	83 c4 0c             	add    esp,0xc
c001d227:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d22b:	52                   	push   edx
c001d22c:	50                   	push   eax
c001d22d:	55                   	push   ebp
c001d22e:	e8 f1 61 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001d233:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d236:	31 d2                	xor    edx,edx
c001d238:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d23b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d23f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d243:	52                   	push   edx
c001d244:	50                   	push   eax
c001d245:	55                   	push   ebp
c001d246:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d249:	83 c4 20             	add    esp,0x20
c001d24c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d254:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d258:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d25c:	0f 84 f1 02 00 00    	je     c001d553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d262:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d269:	31 d2                	xor    edx,edx
c001d26b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d26f:	c1 e8 03             	shr    eax,0x3
c001d272:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d276:	51                   	push   ecx
c001d277:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d27b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d27f:	52                   	push   edx
c001d280:	50                   	push   eax
c001d281:	55                   	push   ebp
c001d282:	e8 9d 61 ff ff       	call   c0013424 <File::seek(unsigned long long)>
c001d287:	5b                   	pop    ebx
c001d288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d28c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d293:	e8 b3 25 ff ff       	call   c000f84b <malloc>
c001d298:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d29b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d29f:	31 d2                	xor    edx,edx
c001d2a1:	5e                   	pop    esi
c001d2a2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d2a6:	50                   	push   eax
c001d2a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2af:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d2b6:	52                   	push   edx
c001d2b7:	50                   	push   eax
c001d2b8:	55                   	push   ebp
c001d2b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2bc:	83 c4 20             	add    esp,0x20
c001d2bf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d2c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d2cb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d2cf:	0f 8d 62 02 00 00    	jge    c001d537 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d2d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2dd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d2e2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d2e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d2e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ed:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d2f1:	89 d8                	mov    eax,ebx
c001d2f3:	c1 e8 08             	shr    eax,0x8
c001d2f6:	89 c6                	mov    esi,eax
c001d2f8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d2fc:	c1 e6 04             	shl    esi,0x4
c001d2ff:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d303:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d306:	85 d2                	test   edx,edx
c001d308:	0f 85 bf 00 00 00    	jne    c001d3cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d30e:	83 ec 0c             	sub    esp,0xc
c001d311:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d315:	03 06                	add    eax,DWORD PTR [esi]
c001d317:	50                   	push   eax
c001d318:	e8 4b f8 ff ff       	call   c001cb68 <Thr::getAddressOfKernelSymbol(char const*)>
c001d31d:	83 c4 10             	add    esp,0x10
c001d320:	89 c2                	mov    edx,eax
c001d322:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d327:	85 c0                	test   eax,eax
c001d329:	0f 85 9e 00 00 00    	jne    c001d3cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d32f:	83 ec 0c             	sub    esp,0xc
c001d332:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d336:	03 06                	add    eax,DWORD PTR [esi]
c001d338:	50                   	push   eax
c001d339:	e8 bf 11 ff ff       	call   c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	89 c2                	mov    edx,eax
c001d343:	85 c0                	test   eax,eax
c001d345:	0f 85 82 00 00 00    	jne    c001d3cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d34b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d34f:	50                   	push   eax
c001d350:	50                   	push   eax
c001d351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d355:	03 06                	add    eax,DWORD PTR [esi]
c001d357:	50                   	push   eax
c001d358:	68 ac c0 02 c0       	push   0xc002c0ac
c001d35d:	e8 41 5a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001d362:	58                   	pop    eax
c001d363:	5a                   	pop    edx
c001d364:	68 c6 c0 02 c0       	push   0xc002c0c6
c001d369:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d370:	50                   	push   eax
c001d371:	e8 c6 34 fe ff       	call   c000083c <strcpy>
c001d376:	59                   	pop    ecx
c001d377:	58                   	pop    eax
c001d378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d37c:	03 06                	add    eax,DWORD PTR [esi]
c001d37e:	50                   	push   eax
c001d37f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d386:	50                   	push   eax
c001d387:	e8 f0 35 fe ff       	call   c000097c <strcat>
c001d38c:	58                   	pop    eax
c001d38d:	5a                   	pop    edx
c001d38e:	68 5c c1 02 c0       	push   0xc002c15c
c001d393:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d39a:	50                   	push   eax
c001d39b:	e8 dc 35 fe ff       	call   c000097c <strcat>
c001d3a0:	83 c4 10             	add    esp,0x10
c001d3a3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3a8:	0f 84 43 01 00 00    	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3ae:	83 ec 0c             	sub    esp,0xc
c001d3b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3b8:	50                   	push   eax
c001d3b9:	e8 23 d1 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d3be:	83 c4 10             	add    esp,0x10
c001d3c1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d3c5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d3c9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d3cd:	80 fb 01             	cmp    bl,0x1
c001d3d0:	75 7d                	jne    c001d44f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d3d2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d3d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3dd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d3e1:	01 ce                	add    esi,ecx
c001d3e3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3e9:	0f 94 c0             	sete   al
c001d3ec:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3f2:	0f 94 c3             	sete   bl
c001d3f5:	09 c3                	or     ebx,eax
c001d3f7:	8b 06                	mov    eax,DWORD PTR [esi]
c001d3f9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d3fe:	74 36                	je     c001d436 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d400:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d403:	84 db                	test   bl,bl
c001d405:	75 0a                	jne    c001d411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d407:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d40b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d40f:	76 37                	jbe    c001d448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d411:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d415:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d41a:	0f 84 d1 00 00 00    	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d420:	83 ec 0c             	sub    esp,0xc
c001d423:	68 dd c0 02 c0       	push   0xc002c0dd
c001d428:	e8 b4 d0 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d42d:	83 c4 10             	add    esp,0x10
c001d430:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d434:	eb 12                	jmp    c001d448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d436:	01 c1                	add    ecx,eax
c001d438:	84 db                	test   bl,bl
c001d43a:	75 0c                	jne    c001d448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d43c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d440:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d444:	77 02                	ja     c001d448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d446:	01 d1                	add    ecx,edx
c001d448:	89 0e                	mov    DWORD PTR [esi],ecx
c001d44a:	e9 df 00 00 00       	jmp    c001d52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d44f:	80 fb 02             	cmp    bl,0x2
c001d452:	75 71                	jne    c001d4c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d454:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d45b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d45f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d463:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d469:	74 15                	je     c001d480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d46b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d471:	74 0d                	je     c001d480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d473:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d477:	83 e8 04             	sub    eax,0x4
c001d47a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d47e:	76 1f                	jbe    c001d49f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d480:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d484:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d489:	74 66                	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d48b:	83 ec 0c             	sub    esp,0xc
c001d48e:	68 f9 c0 02 c0       	push   0xc002c0f9
c001d493:	e8 49 d0 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d498:	83 c4 10             	add    esp,0x10
c001d49b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d49f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4a1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4a6:	74 13                	je     c001d4bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d4a8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d4ac:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d4b3:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d4b7:	01 c8                	add    eax,ecx
c001d4b9:	eb 04                	jmp    c001d4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d4bb:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d4bf:	01 c2                	add    edx,eax
c001d4c1:	89 16                	mov    DWORD PTR [esi],edx
c001d4c3:	eb 69                	jmp    c001d52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4c5:	0f b6 db             	movzx  ebx,bl
c001d4c8:	50                   	push   eax
c001d4c9:	50                   	push   eax
c001d4ca:	53                   	push   ebx
c001d4cb:	68 15 c1 02 c0       	push   0xc002c115
c001d4d0:	e8 ce 58 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001d4d5:	83 c4 10             	add    esp,0x10
c001d4d8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4dd:	74 12                	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4df:	83 ec 0c             	sub    esp,0xc
c001d4e2:	68 20 c1 02 c0       	push   0xc002c120
c001d4e7:	e8 f5 cf ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d4ec:	83 c4 10             	add    esp,0x10
c001d4ef:	eb 3d                	jmp    c001d52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4f1:	83 ec 0c             	sub    esp,0xc
c001d4f4:	55                   	push   ebp
c001d4f5:	e8 ca 5e ff ff       	call   c00133c4 <File::close()>
c001d4fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d503:	59                   	pop    ecx
c001d504:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d508:	e8 4e 23 ff ff       	call   c000f85b <free>
c001d50d:	5b                   	pop    ebx
c001d50e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d512:	e8 44 23 ff ff       	call   c000f85b <free>
c001d517:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d51a:	e8 3c 23 ff ff       	call   c000f85b <free>
c001d51f:	5e                   	pop    esi
c001d520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d524:	e8 32 23 ff ff       	call   c000f85b <free>
c001d529:	83 c4 10             	add    esp,0x10
c001d52c:	eb 21                	jmp    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d52e:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d532:	e9 90 fd ff ff       	jmp    c001d2c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d537:	83 ec 0c             	sub    esp,0xc
c001d53a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d53e:	e8 18 23 ff ff       	call   c000f85b <free>
c001d543:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d547:	83 c4 10             	add    esp,0x10
c001d54a:	e9 05 fd ff ff       	jmp    c001d254 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d54f:	31 c0                	xor    eax,eax
c001d551:	eb 33                	jmp    c001d586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d553:	83 ec 0c             	sub    esp,0xc
c001d556:	55                   	push   ebp
c001d557:	e8 68 5e ff ff       	call   c00133c4 <File::close()>
c001d55c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d55f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d562:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d565:	58                   	pop    eax
c001d566:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d56a:	e8 ec 22 ff ff       	call   c000f85b <free>
c001d56f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d572:	e8 e4 22 ff ff       	call   c000f85b <free>
c001d577:	5a                   	pop    edx
c001d578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d57c:	e8 da 22 ff ff       	call   c000f85b <free>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	b0 01                	mov    al,0x1
c001d586:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d58c:	5b                   	pop    ebx
c001d58d:	5e                   	pop    esi
c001d58e:	5f                   	pop    edi
c001d58f:	5d                   	pop    ebp
c001d590:	c3                   	ret    

c001d591 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d591:	56                   	push   esi
c001d592:	31 d2                	xor    edx,edx
c001d594:	53                   	push   ebx
c001d595:	8b 1d c0 11 03 c0    	mov    ebx,DWORD PTR ds:0xc00311c0
c001d59b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d59f:	39 d3                	cmp    ebx,edx
c001d5a1:	7e 1b                	jle    c001d5be <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d5a3:	8b 04 95 e0 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcec20]
c001d5aa:	39 c8                	cmp    eax,ecx
c001d5ac:	77 0d                	ja     c001d5bb <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d5ae:	8b 34 95 e0 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcee20]
c001d5b5:	01 c6                	add    esi,eax
c001d5b7:	39 ce                	cmp    esi,ecx
c001d5b9:	77 05                	ja     c001d5c0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d5bb:	42                   	inc    edx
c001d5bc:	eb e1                	jmp    c001d59f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d5be:	31 c0                	xor    eax,eax
c001d5c0:	5b                   	pop    ebx
c001d5c1:	5e                   	pop    esi
c001d5c2:	c3                   	ret    

c001d5c3 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d5c3:	53                   	push   ebx
c001d5c4:	31 c0                	xor    eax,eax
c001d5c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d5ca:	8b 1d c0 11 03 c0    	mov    ebx,DWORD PTR ds:0xc00311c0
c001d5d0:	39 c3                	cmp    ebx,eax
c001d5d2:	7e 22                	jle    c001d5f6 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d5d4:	8b 14 85 e0 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec20]
c001d5db:	39 ca                	cmp    edx,ecx
c001d5dd:	77 14                	ja     c001d5f3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d5df:	03 14 85 e0 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcee20]
c001d5e6:	39 ca                	cmp    edx,ecx
c001d5e8:	76 09                	jbe    c001d5f3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d5ea:	8b 04 85 e0 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcea20]
c001d5f1:	eb 05                	jmp    c001d5f8 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d5f3:	40                   	inc    eax
c001d5f4:	eb da                	jmp    c001d5d0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d5f6:	31 c0                	xor    eax,eax
c001d5f8:	5b                   	pop    ebx
c001d5f9:	c3                   	ret    

c001d5fa <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d5fa:	53                   	push   ebx
c001d5fb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d5ff:	53                   	push   ebx
c001d600:	e8 8c ff ff ff       	call   c001d591 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d605:	5a                   	pop    edx
c001d606:	31 d2                	xor    edx,edx
c001d608:	85 c0                	test   eax,eax
c001d60a:	74 04                	je     c001d610 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d60c:	89 da                	mov    edx,ebx
c001d60e:	29 c2                	sub    edx,eax
c001d610:	89 d0                	mov    eax,edx
c001d612:	5b                   	pop    ebx
c001d613:	c3                   	ret    

c001d614 <Thr::loadDLL(char const*, bool)>:
c001d614:	55                   	push   ebp
c001d615:	57                   	push   edi
c001d616:	56                   	push   esi
c001d617:	53                   	push   ebx
c001d618:	81 ec 34 01 00 00    	sub    esp,0x134
c001d61e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d625:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d62c:	56                   	push   esi
c001d62d:	68 38 c1 02 c0       	push   0xc002c138
c001d632:	e8 6c 57 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001d637:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d63e:	e8 08 22 ff ff       	call   c000f84b <malloc>
c001d643:	83 c4 0c             	add    esp,0xc
c001d646:	89 c3                	mov    ebx,eax
c001d648:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c001d64e:	56                   	push   esi
c001d64f:	50                   	push   eax
c001d650:	e8 ad 5c ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001d655:	83 c4 10             	add    esp,0x10
c001d658:	85 db                	test   ebx,ebx
c001d65a:	75 3c                	jne    c001d698 <Thr::loadDLL(char const*, bool)+0x84>
c001d65c:	89 e8                	mov    eax,ebp
c001d65e:	84 c0                	test   al,al
c001d660:	0f 84 d5 01 00 00    	je     c001d83b <Thr::loadDLL(char const*, bool)+0x227>
c001d666:	57                   	push   edi
c001d667:	57                   	push   edi
c001d668:	68 49 c1 02 c0       	push   0xc002c149
c001d66d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d671:	57                   	push   edi
c001d672:	e8 c5 31 fe ff       	call   c000083c <strcpy>
c001d677:	58                   	pop    eax
c001d678:	5a                   	pop    edx
c001d679:	56                   	push   esi
c001d67a:	57                   	push   edi
c001d67b:	e8 fc 32 fe ff       	call   c000097c <strcat>
c001d680:	59                   	pop    ecx
c001d681:	58                   	pop    eax
c001d682:	68 5c c1 02 c0       	push   0xc002c15c
c001d687:	57                   	push   edi
c001d688:	e8 ef 32 fe ff       	call   c000097c <strcat>
c001d68d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d690:	e8 4c ce ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d695:	83 c4 10             	add    esp,0x10
c001d698:	51                   	push   ecx
c001d699:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d69d:	50                   	push   eax
c001d69e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d6a2:	50                   	push   eax
c001d6a3:	53                   	push   ebx
c001d6a4:	e8 69 5f ff ff       	call   c0013612 <File::stat(unsigned long long*, bool*)>
c001d6a9:	83 c4 10             	add    esp,0x10
c001d6ac:	85 db                	test   ebx,ebx
c001d6ae:	74 0c                	je     c001d6bc <Thr::loadDLL(char const*, bool)+0xa8>
c001d6b0:	83 ec 0c             	sub    esp,0xc
c001d6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d6b5:	53                   	push   ebx
c001d6b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6b9:	83 c4 10             	add    esp,0x10
c001d6bc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d6c1:	75 0a                	jne    c001d6cd <Thr::loadDLL(char const*, bool)+0xb9>
c001d6c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6c7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d6cb:	75 3c                	jne    c001d709 <Thr::loadDLL(char const*, bool)+0xf5>
c001d6cd:	89 e8                	mov    eax,ebp
c001d6cf:	84 c0                	test   al,al
c001d6d1:	0f 84 4c 01 00 00    	je     c001d823 <Thr::loadDLL(char const*, bool)+0x20f>
c001d6d7:	51                   	push   ecx
c001d6d8:	51                   	push   ecx
c001d6d9:	68 49 c1 02 c0       	push   0xc002c149
c001d6de:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d6e2:	53                   	push   ebx
c001d6e3:	e8 54 31 fe ff       	call   c000083c <strcpy>
c001d6e8:	5f                   	pop    edi
c001d6e9:	58                   	pop    eax
c001d6ea:	56                   	push   esi
c001d6eb:	53                   	push   ebx
c001d6ec:	e8 8b 32 fe ff       	call   c000097c <strcat>
c001d6f1:	58                   	pop    eax
c001d6f2:	5a                   	pop    edx
c001d6f3:	68 5c c1 02 c0       	push   0xc002c15c
c001d6f8:	53                   	push   ebx
c001d6f9:	e8 7e 32 fe ff       	call   c000097c <strcat>
c001d6fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d701:	e8 db cd ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d706:	83 c4 10             	add    esp,0x10
c001d709:	e8 00 45 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c001d70e:	51                   	push   ecx
c001d70f:	6a 03                	push   0x3
c001d711:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d715:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d719:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d71f:	83 d3 00             	adc    ebx,0x0
c001d722:	89 ca                	mov    edx,ecx
c001d724:	89 d1                	mov    ecx,edx
c001d726:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d72a:	51                   	push   ecx
c001d72b:	50                   	push   eax
c001d72c:	e8 cb 4b ff ff       	call   c00122fc <VAS::allocatePages(int, int)>
c001d731:	5f                   	pop    edi
c001d732:	89 c3                	mov    ebx,eax
c001d734:	58                   	pop    eax
c001d735:	53                   	push   ebx
c001d736:	68 5e c1 02 c0       	push   0xc002c15e
c001d73b:	e8 63 56 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001d740:	89 34 24             	mov    DWORD PTR [esp],esi
c001d743:	e8 54 30 fe ff       	call   c000079c <strlen>
c001d748:	8b 3d c0 11 03 c0    	mov    edi,DWORD PTR ds:0xc00311c0
c001d74e:	40                   	inc    eax
c001d74f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d752:	e8 f4 20 ff ff       	call   c000f84b <malloc>
c001d757:	89 04 bd e0 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffcea20],eax
c001d75e:	58                   	pop    eax
c001d75f:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c001d764:	5a                   	pop    edx
c001d765:	56                   	push   esi
c001d766:	ff 34 85 e0 15 03 c0 	push   DWORD PTR [eax*4-0x3ffcea20]
c001d76d:	e8 ca 30 fe ff       	call   c000083c <strcpy>
c001d772:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c001d777:	8d 50 01             	lea    edx,[eax+0x1]
c001d77a:	89 1c 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],ebx
c001d781:	89 15 c0 11 03 c0    	mov    DWORD PTR ds:0xc00311c0,edx
c001d787:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d78b:	83 c4 0c             	add    esp,0xc
c001d78e:	89 14 85 e0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee20],edx
c001d795:	6a 01                	push   0x1
c001d797:	53                   	push   ebx
c001d798:	56                   	push   esi
c001d799:	e8 d7 f6 ff ff       	call   c001ce75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d79e:	83 c4 10             	add    esp,0x10
c001d7a1:	89 c7                	mov    edi,eax
c001d7a3:	84 c0                	test   al,al
c001d7a5:	0f 85 8c 00 00 00    	jne    c001d837 <Thr::loadDLL(char const*, bool)+0x223>
c001d7ab:	89 e8                	mov    eax,ebp
c001d7ad:	84 c0                	test   al,al
c001d7af:	74 76                	je     c001d827 <Thr::loadDLL(char const*, bool)+0x213>
c001d7b1:	83 ec 0c             	sub    esp,0xc
c001d7b4:	68 6b c1 02 c0       	push   0xc002c16b
c001d7b9:	e8 23 cd ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d7be:	83 c4 10             	add    esp,0x10
c001d7c1:	eb 64                	jmp    c001d827 <Thr::loadDLL(char const*, bool)+0x213>
c001d7c3:	e8 46 44 ff ff       	call   c0011c0e <Virt::getAKernelVAS()>
c001d7c8:	89 f5                	mov    ebp,esi
c001d7ca:	c1 e5 0c             	shl    ebp,0xc
c001d7cd:	52                   	push   edx
c001d7ce:	01 dd                	add    ebp,ebx
c001d7d0:	52                   	push   edx
c001d7d1:	55                   	push   ebp
c001d7d2:	50                   	push   eax
c001d7d3:	e8 9e 46 ff ff       	call   c0011e76 <VAS::getPageTableEntry(unsigned long)>
c001d7d8:	83 c4 10             	add    esp,0x10
c001d7db:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d7de:	75 0c                	jne    c001d7ec <Thr::loadDLL(char const*, bool)+0x1d8>
c001d7e0:	83 ec 0c             	sub    esp,0xc
c001d7e3:	55                   	push   ebp
c001d7e4:	e8 44 26 ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	46                   	inc    esi
c001d7ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7f5:	05 ff 0f 00 00       	add    eax,0xfff
c001d7fa:	83 d2 00             	adc    edx,0x0
c001d7fd:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d801:	c1 ea 0c             	shr    edx,0xc
c001d804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d808:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d80c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d810:	ba 00 00 00 00       	mov    edx,0x0
c001d815:	89 d0                	mov    eax,edx
c001d817:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d81b:	72 a6                	jb     c001d7c3 <Thr::loadDLL(char const*, bool)+0x1af>
c001d81d:	89 f8                	mov    eax,edi
c001d81f:	84 c0                	test   al,al
c001d821:	75 18                	jne    c001d83b <Thr::loadDLL(char const*, bool)+0x227>
c001d823:	31 db                	xor    ebx,ebx
c001d825:	eb 14                	jmp    c001d83b <Thr::loadDLL(char const*, bool)+0x227>
c001d827:	83 ec 0c             	sub    esp,0xc
c001d82a:	68 8a c1 02 c0       	push   0xc002c18a
c001d82f:	e8 ad cc ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d834:	83 c4 10             	add    esp,0x10
c001d837:	31 f6                	xor    esi,esi
c001d839:	eb b2                	jmp    c001d7ed <Thr::loadDLL(char const*, bool)+0x1d9>
c001d83b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d841:	89 d8                	mov    eax,ebx
c001d843:	5b                   	pop    ebx
c001d844:	5e                   	pop    esi
c001d845:	5f                   	pop    edi
c001d846:	5d                   	pop    ebp
c001d847:	c3                   	ret    

c001d848 <Thr::executeDLL(unsigned long, void*)>:
c001d848:	56                   	push   esi
c001d849:	53                   	push   ebx
c001d84a:	52                   	push   edx
c001d84b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d84f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d853:	85 db                	test   ebx,ebx
c001d855:	75 10                	jne    c001d867 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d857:	83 ec 0c             	sub    esp,0xc
c001d85a:	68 a6 c1 02 c0       	push   0xc002c1a6
c001d85f:	e8 7d cc ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001d864:	83 c4 10             	add    esp,0x10
c001d867:	50                   	push   eax
c001d868:	50                   	push   eax
c001d869:	53                   	push   ebx
c001d86a:	68 d0 c1 02 c0       	push   0xc002c1d0
c001d86f:	e8 2f 55 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001d874:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d878:	89 d8                	mov    eax,ebx
c001d87a:	83 c4 14             	add    esp,0x14
c001d87d:	5b                   	pop    ebx
c001d87e:	5e                   	pop    esi
c001d87f:	ff e0                	jmp    eax
c001d881:	90                   	nop

c001d882 <changeTSS>:
c001d882:	83 ec 14             	sub    esp,0x14
c001d885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d88a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d88d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d892:	c1 e2 15             	shl    edx,0x15
c001d895:	29 d0                	sub    eax,edx
c001d897:	50                   	push   eax
c001d898:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001d89d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d8a3:	05 7c 11 00 00       	add    eax,0x117c
c001d8a8:	50                   	push   eax
c001d8a9:	e8 60 3a ff ff       	call   c001130e <TSS::setESP(unsigned long)>
c001d8ae:	83 c4 1c             	add    esp,0x1c
c001d8b1:	c3                   	ret    

c001d8b2 <Process::addArgs(char**)>:
c001d8b2:	57                   	push   edi
c001d8b3:	56                   	push   esi
c001d8b4:	53                   	push   ebx
c001d8b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8b9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d8bd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d8c7:	85 ff                	test   edi,edi
c001d8c9:	74 3d                	je     c001d908 <Process::addArgs(char**)+0x56>
c001d8cb:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8cd:	85 c0                	test   eax,eax
c001d8cf:	74 37                	je     c001d908 <Process::addArgs(char**)+0x56>
c001d8d1:	31 db                	xor    ebx,ebx
c001d8d3:	83 ec 0c             	sub    esp,0xc
c001d8d6:	50                   	push   eax
c001d8d7:	e8 c0 2e fe ff       	call   c000079c <strlen>
c001d8dc:	40                   	inc    eax
c001d8dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8e0:	e8 66 1f ff ff       	call   c000f84b <malloc>
c001d8e5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d8ec:	5a                   	pop    edx
c001d8ed:	59                   	pop    ecx
c001d8ee:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d8f1:	43                   	inc    ebx
c001d8f2:	50                   	push   eax
c001d8f3:	e8 44 2f fe ff       	call   c000083c <strcpy>
c001d8f8:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d904:	85 c0                	test   eax,eax
c001d906:	75 cb                	jne    c001d8d3 <Process::addArgs(char**)+0x21>
c001d908:	5b                   	pop    ebx
c001d909:	5e                   	pop    esi
c001d90a:	5f                   	pop    edi
c001d90b:	c3                   	ret    

c001d90c <Process::Process(char const*, Process*, char**)>:
c001d90c:	56                   	push   esi
c001d90d:	53                   	push   ebx
c001d90e:	83 ec 14             	sub    esp,0x14
c001d911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d915:	05 0c 02 00 00       	add    eax,0x20c
c001d91a:	bb 07 00 00 00       	mov    ebx,0x7
c001d91f:	89 c6                	mov    esi,eax
c001d921:	85 db                	test   ebx,ebx
c001d923:	78 12                	js     c001d937 <Process::Process(char const*, Process*, char**)+0x2b>
c001d925:	83 ec 0c             	sub    esp,0xc
c001d928:	56                   	push   esi
c001d929:	e8 34 b3 00 00       	call   c0028c62 <ThreadControlBlock::ThreadControlBlock()>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	83 c6 63             	add    esi,0x63
c001d934:	4b                   	dec    ebx
c001d935:	eb ea                	jmp    c001d921 <Process::Process(char const*, Process*, char**)+0x15>
c001d937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d93b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d942:	83 ec 0c             	sub    esp,0xc
c001d945:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d949:	e8 e4 c9 ff ff       	call   c001a332 <Krnl::newProcessEnv(Process*)>
c001d94e:	83 c4 10             	add    esp,0x10
c001d951:	89 c2                	mov    edx,eax
c001d953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d957:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d961:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d96a:	a1 d0 d9 02 c0       	mov    eax,ds:0xc002d9d0
c001d96f:	8d 50 01             	lea    edx,[eax+0x1]
c001d972:	89 15 d0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9d0,edx
c001d978:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d97c:	89 02                	mov    DWORD PTR [edx],eax
c001d97e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d986:	83 ec 0c             	sub    esp,0xc
c001d989:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d98d:	e8 b9 1e ff ff       	call   c000f84b <malloc>
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	89 c3                	mov    ebx,eax
c001d997:	83 ec 08             	sub    esp,0x8
c001d99a:	6a 00                	push   0x0
c001d99c:	53                   	push   ebx
c001d99d:	e8 02 4d ff ff       	call   c00126a4 <VAS::VAS(bool)>
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9b3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9c5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d9cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9cf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9d5:	85 c0                	test   eax,eax
c001d9d7:	74 42                	je     c001da1b <Process::Process(char const*, Process*, char**)+0x10f>
c001d9d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9dd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9e3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ed:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9fd:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da07:	05 0c 01 00 00       	add    eax,0x10c
c001da0c:	83 ec 08             	sub    esp,0x8
c001da0f:	52                   	push   edx
c001da10:	50                   	push   eax
c001da11:	e8 26 2e fe ff       	call   c000083c <strcpy>
c001da16:	83 c4 10             	add    esp,0x10
c001da19:	eb 63                	jmp    c001da7e <Process::Process(char const*, Process*, char**)+0x172>
c001da1b:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001da23:	83 ec 0c             	sub    esp,0xc
c001da26:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da2a:	e8 1c 1e ff ff       	call   c000f84b <malloc>
c001da2f:	83 c4 10             	add    esp,0x10
c001da32:	89 c3                	mov    ebx,eax
c001da34:	83 ec 08             	sub    esp,0x8
c001da37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da3b:	53                   	push   ebx
c001da3c:	e8 cd 35 ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c001da41:	83 c4 10             	add    esp,0x10
c001da44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da48:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001da4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da52:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da58:	83 ec 0c             	sub    esp,0xc
c001da5b:	50                   	push   eax
c001da5c:	e8 e4 2a ff ff       	call   c0010545 <addToTerminalCycle(VgaText*)>
c001da61:	83 c4 10             	add    esp,0x10
c001da64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da68:	05 0c 01 00 00       	add    eax,0x10c
c001da6d:	83 ec 08             	sub    esp,0x8
c001da70:	68 ef c1 02 c0       	push   0xc002c1ef
c001da75:	50                   	push   eax
c001da76:	e8 c1 2d fe ff       	call   c000083c <strcpy>
c001da7b:	83 c4 10             	add    esp,0x10
c001da7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da82:	83 c0 0c             	add    eax,0xc
c001da85:	83 ec 08             	sub    esp,0x8
c001da88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da8c:	50                   	push   eax
c001da8d:	e8 aa 2d fe ff       	call   c000083c <strcpy>
c001da92:	83 c4 10             	add    esp,0x10
c001da95:	83 ec 08             	sub    esp,0x8
c001da98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daa0:	e8 0d fe ff ff       	call   c001d8b2 <Process::addArgs(char**)>
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	83 ec 08             	sub    esp,0x8
c001daab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dab3:	e8 87 ee ff ff       	call   c001c93f <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dab8:	83 c4 10             	add    esp,0x10
c001dabb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dabf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dac3:	83 f0 01             	xor    eax,0x1
c001dac6:	88 c2                	mov    dl,al
c001dac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacc:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dad2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dad7:	83 ec 08             	sub    esp,0x8
c001dada:	50                   	push   eax
c001dadb:	68 ec c2 02 c0       	push   0xc002c2ec
c001dae0:	e8 be 52 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001dae5:	83 c4 10             	add    esp,0x10
c001dae8:	90                   	nop
c001dae9:	83 c4 14             	add    esp,0x14
c001daec:	5b                   	pop    ebx
c001daed:	5e                   	pop    esi
c001daee:	c3                   	ret    
c001daef:	90                   	nop

c001daf0 <Process::Process(bool, char const*, Process*, char**)>:
c001daf0:	56                   	push   esi
c001daf1:	53                   	push   ebx
c001daf2:	83 ec 24             	sub    esp,0x24
c001daf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001daf9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db01:	05 0c 02 00 00       	add    eax,0x20c
c001db06:	bb 07 00 00 00       	mov    ebx,0x7
c001db0b:	89 c6                	mov    esi,eax
c001db0d:	85 db                	test   ebx,ebx
c001db0f:	78 12                	js     c001db23 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001db11:	83 ec 0c             	sub    esp,0xc
c001db14:	56                   	push   esi
c001db15:	e8 48 b1 00 00       	call   c0028c62 <ThreadControlBlock::ThreadControlBlock()>
c001db1a:	83 c4 10             	add    esp,0x10
c001db1d:	83 c6 63             	add    esi,0x63
c001db20:	4b                   	dec    ebx
c001db21:	eb ea                	jmp    c001db0d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db27:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db2e:	83 ec 0c             	sub    esp,0xc
c001db31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db35:	e8 f8 c7 ff ff       	call   c001a332 <Krnl::newProcessEnv(Process*)>
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	89 c2                	mov    edx,eax
c001db3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db43:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db4d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db56:	a1 d0 d9 02 c0       	mov    eax,ds:0xc002d9d0
c001db5b:	8d 50 01             	lea    edx,[eax+0x1]
c001db5e:	89 15 d0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9d0,edx
c001db64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db68:	89 02                	mov    DWORD PTR [edx],eax
c001db6a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db72:	83 ec 0c             	sub    esp,0xc
c001db75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db79:	e8 cd 1c ff ff       	call   c000f84b <malloc>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	89 c3                	mov    ebx,eax
c001db83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db88:	83 ec 08             	sub    esp,0x8
c001db8b:	50                   	push   eax
c001db8c:	53                   	push   ebx
c001db8d:	e8 12 4b ff ff       	call   c00126a4 <VAS::VAS(bool)>
c001db92:	83 c4 10             	add    esp,0x10
c001db95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db99:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dbb5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbbf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbc5:	85 c0                	test   eax,eax
c001dbc7:	74 42                	je     c001dc0b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dbc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbcd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbd3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbdd:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbe7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbed:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf7:	05 0c 01 00 00       	add    eax,0x10c
c001dbfc:	83 ec 08             	sub    esp,0x8
c001dbff:	52                   	push   edx
c001dc00:	50                   	push   eax
c001dc01:	e8 36 2c fe ff       	call   c000083c <strcpy>
c001dc06:	83 c4 10             	add    esp,0x10
c001dc09:	eb 63                	jmp    c001dc6e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dc0b:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dc13:	83 ec 0c             	sub    esp,0xc
c001dc16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dc1a:	e8 2c 1c ff ff       	call   c000f84b <malloc>
c001dc1f:	83 c4 10             	add    esp,0x10
c001dc22:	89 c3                	mov    ebx,eax
c001dc24:	83 ec 08             	sub    esp,0x8
c001dc27:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc2b:	53                   	push   ebx
c001dc2c:	e8 dd 33 ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc38:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc42:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc48:	83 ec 0c             	sub    esp,0xc
c001dc4b:	50                   	push   eax
c001dc4c:	e8 f4 28 ff ff       	call   c0010545 <addToTerminalCycle(VgaText*)>
c001dc51:	83 c4 10             	add    esp,0x10
c001dc54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc58:	05 0c 01 00 00       	add    eax,0x10c
c001dc5d:	83 ec 08             	sub    esp,0x8
c001dc60:	68 ef c1 02 c0       	push   0xc002c1ef
c001dc65:	50                   	push   eax
c001dc66:	e8 d1 2b fe ff       	call   c000083c <strcpy>
c001dc6b:	83 c4 10             	add    esp,0x10
c001dc6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc72:	83 c0 0c             	add    eax,0xc
c001dc75:	83 ec 08             	sub    esp,0x8
c001dc78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc7c:	50                   	push   eax
c001dc7d:	e8 ba 2b fe ff       	call   c000083c <strcpy>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	83 ec 08             	sub    esp,0x8
c001dc88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc90:	e8 1d fc ff ff       	call   c001d8b2 <Process::addArgs(char**)>
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	90                   	nop
c001dc99:	83 c4 24             	add    esp,0x24
c001dc9c:	5b                   	pop    ebx
c001dc9d:	5e                   	pop    esi
c001dc9e:	c3                   	ret    

c001dc9f <disableIRQs()>:
c001dc9f:	fa                   	cli    
c001dca0:	ff 05 8c 19 03 c0    	inc    DWORD PTR ds:0xc003198c
c001dca6:	c3                   	ret    

c001dca7 <getIRQNestingLevel()>:
c001dca7:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c001dcac:	c3                   	ret    

c001dcad <enableIRQs()>:
c001dcad:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c001dcb2:	48                   	dec    eax
c001dcb3:	a3 8c 19 03 c0       	mov    ds:0xc003198c,eax
c001dcb8:	75 01                	jne    c001dcbb <enableIRQs()+0xe>
c001dcba:	fb                   	sti    
c001dcbb:	c3                   	ret    

c001dcbc <lockScheduler()>:
c001dcbc:	eb e1                	jmp    c001dc9f <disableIRQs()>

c001dcbe <unlockScheduler()>:
c001dcbe:	eb ed                	jmp    c001dcad <enableIRQs()>

c001dcc0 <userModeEntryPoint(void*)>:
c001dcc0:	83 ec 0c             	sub    esp,0xc
c001dcc3:	e8 f6 ff ff ff       	call   c001dcbe <unlockScheduler()>
c001dcc8:	fb                   	sti    
c001dcc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dcd1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dcd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dcdb:	83 c4 0c             	add    esp,0xc
c001dcde:	e9 47 26 fe ff       	jmp    c000032a <goToUsermode>

c001dce3 <lockStuff()>:
c001dce3:	e8 b7 ff ff ff       	call   c001dc9f <disableIRQs()>
c001dce8:	ff 05 88 19 03 c0    	inc    DWORD PTR ds:0xc0031988
c001dcee:	c3                   	ret    

c001dcef <taskStartupFunction>:
c001dcef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcf4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dcf7:	c3                   	ret    

c001dcf8 <updateTimeUsed()>:
c001dcf8:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001dcfd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd03:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dd0a:	74 50                	je     c001dd5c <updateTimeUsed()+0x64>
c001dd0c:	57                   	push   edi
c001dd0d:	56                   	push   esi
c001dd0e:	53                   	push   ebx
c001dd0f:	0f 31                	rdtsc  
c001dd11:	89 c1                	mov    ecx,eax
c001dd13:	a3 c8 19 03 c0       	mov    ds:0xc00319c8,eax
c001dd18:	2b 0d b8 19 03 c0    	sub    ecx,DWORD PTR ds:0xc00319b8
c001dd1e:	89 d3                	mov    ebx,edx
c001dd20:	89 0d c0 19 03 c0    	mov    DWORD PTR ds:0xc00319c0,ecx
c001dd26:	1b 1d bc 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc00319bc
c001dd2c:	a3 b8 19 03 c0       	mov    ds:0xc00319b8,eax
c001dd31:	89 1d c4 19 03 c0    	mov    DWORD PTR ds:0xc00319c4,ebx
c001dd37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd3c:	89 15 cc 19 03 c0    	mov    DWORD PTR ds:0xc00319cc,edx
c001dd42:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dd45:	89 15 bc 19 03 c0    	mov    DWORD PTR ds:0xc00319bc,edx
c001dd4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dd4e:	01 f1                	add    ecx,esi
c001dd50:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dd53:	11 fb                	adc    ebx,edi
c001dd55:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dd58:	5b                   	pop    ebx
c001dd59:	5e                   	pop    esi
c001dd5a:	5f                   	pop    edi
c001dd5b:	c3                   	ret    
c001dd5c:	c3                   	ret    

c001dd5d <switchToThread(ThreadControlBlock*)>:
c001dd5d:	53                   	push   ebx
c001dd5e:	83 ec 08             	sub    esp,0x8
c001dd61:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001dd66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd6a:	85 c0                	test   eax,eax
c001dd6c:	75 30                	jne    c001dd9e <switchToThread(ThreadControlBlock*)+0x41>
c001dd6e:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dd71:	3c ff                	cmp    al,0xff
c001dd73:	74 25                	je     c001dd9a <switchToThread(ThreadControlBlock*)+0x3d>
c001dd75:	0f b6 d0             	movzx  edx,al
c001dd78:	b8 84 03 00 00       	mov    eax,0x384
c001dd7d:	29 d0                	sub    eax,edx
c001dd7f:	c1 e0 10             	shl    eax,0x10
c001dd82:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dd85:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dd88:	e8 6b ff ff ff       	call   c001dcf8 <updateTimeUsed()>
c001dd8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dd91:	83 c4 08             	add    esp,0x8
c001dd94:	5b                   	pop    ebx
c001dd95:	e9 c8 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd9a:	31 c0                	xor    eax,eax
c001dd9c:	eb e7                	jmp    c001dd85 <switchToThread(ThreadControlBlock*)+0x28>
c001dd9e:	c7 05 84 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031984,0x1
c001dda8:	83 c4 08             	add    esp,0x8
c001ddab:	5b                   	pop    ebx
c001ddac:	c3                   	ret    
c001ddad:	90                   	nop

c001ddae <Semaphore::Semaphore(int)>:
c001ddae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ddb6:	89 10                	mov    DWORD PTR [eax],edx
c001ddb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddbc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ddc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddc7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ddce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddd2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddd9:	90                   	nop
c001ddda:	c3                   	ret    
c001dddb:	90                   	nop

c001dddc <Mutex::Mutex()>:
c001dddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dde0:	6a 01                	push   0x1
c001dde2:	50                   	push   eax
c001dde3:	e8 c6 ff ff ff       	call   c001ddae <Semaphore::Semaphore(int)>
c001dde8:	83 c4 08             	add    esp,0x8
c001ddeb:	90                   	nop
c001ddec:	c3                   	ret    
c001dded:	90                   	nop

c001ddee <Process::createThread(void (*)(void*), void*, int)>:
c001ddee:	55                   	push   ebp
c001ddef:	31 c9                	xor    ecx,ecx
c001ddf1:	57                   	push   edi
c001ddf2:	56                   	push   esi
c001ddf3:	53                   	push   ebx
c001ddf4:	83 ec 1c             	sub    esp,0x1c
c001ddf7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ddfb:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001de02:	89 f2                	mov    edx,esi
c001de04:	0f b7 c2             	movzx  eax,dx
c001de07:	83 e2 01             	and    edx,0x1
c001de0a:	74 16                	je     c001de22 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001de0c:	d1 f8                	sar    eax,1
c001de0e:	41                   	inc    ecx
c001de0f:	89 c2                	mov    edx,eax
c001de11:	83 f9 10             	cmp    ecx,0x10
c001de14:	75 ee                	jne    c001de04 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001de16:	83 c4 1c             	add    esp,0x1c
c001de19:	31 db                	xor    ebx,ebx
c001de1b:	89 d8                	mov    eax,ebx
c001de1d:	5b                   	pop    ebx
c001de1e:	5e                   	pop    esi
c001de1f:	5f                   	pop    edi
c001de20:	5d                   	pop    ebp
c001de21:	c3                   	ret    
c001de22:	b8 01 00 00 00       	mov    eax,0x1
c001de27:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001de2a:	d3 e0                	shl    eax,cl
c001de2c:	09 c6                	or     esi,eax
c001de2e:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001de31:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001de38:	89 c6                	mov    esi,eax
c001de3a:	c1 e6 05             	shl    esi,0x5
c001de3d:	01 f0                	add    eax,esi
c001de3f:	01 d8                	add    eax,ebx
c001de41:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001de48:	75 0a                	jne    c001de54 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001de4a:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001de54:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001de5a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001de5e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001de61:	01 ca                	add    edx,ecx
c001de63:	83 ec 08             	sub    esp,0x8
c001de66:	89 d0                	mov    eax,edx
c001de68:	c1 e0 05             	shl    eax,0x5
c001de6b:	01 d0                	add    eax,edx
c001de6d:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001de71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de75:	01 d8                	add    eax,ebx
c001de77:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001de7d:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001de83:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001de89:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001de8f:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001de95:	89 cd                	mov    ebp,ecx
c001de97:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001de9b:	f7 dd                	neg    ebp
c001de9d:	c1 e5 15             	shl    ebp,0x15
c001dea0:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dea6:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001deac:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001deb6:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001debc:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dec6:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ded0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ded4:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001dedb:	53                   	push   ebx
c001dedc:	68 a8 19 03 c0       	push   0xc00319a8
c001dee1:	e8 0a ac 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dee6:	89 d8                	mov    eax,ebx
c001dee8:	83 c4 10             	add    esp,0x10
c001deeb:	83 c4 1c             	add    esp,0x1c
c001deee:	5b                   	pop    ebx
c001deef:	5e                   	pop    esi
c001def0:	5f                   	pop    edi
c001def1:	5d                   	pop    ebp
c001def2:	c3                   	ret    
c001def3:	90                   	nop

c001def4 <Process::createUserThread()>:
c001def4:	83 ec 0c             	sub    esp,0xc
c001def7:	68 80 00 00 00       	push   0x80
c001defc:	6a 00                	push   0x0
c001defe:	68 c0 dc 01 c0       	push   0xc001dcc0
c001df03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df07:	e8 e2 fe ff ff       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c001df0c:	83 c4 1c             	add    esp,0x1c
c001df0f:	c3                   	ret    

c001df10 <setupMultitasking(void (*)())>:
c001df10:	56                   	push   esi
c001df11:	53                   	push   ebx
c001df12:	51                   	push   ecx
c001df13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df17:	eb 10                	jmp    c001df29 <setupMultitasking(void (*)())+0x19>
c001df19:	83 ec 0c             	sub    esp,0xc
c001df1c:	68 a8 19 03 c0       	push   0xc00319a8
c001df21:	e8 1c ab 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df26:	83 c4 10             	add    esp,0x10
c001df29:	83 ec 0c             	sub    esp,0xc
c001df2c:	68 a8 19 03 c0       	push   0xc00319a8
c001df31:	e8 f0 aa 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df36:	83 c4 10             	add    esp,0x10
c001df39:	84 c0                	test   al,al
c001df3b:	74 dc                	je     c001df19 <setupMultitasking(void (*)())+0x9>
c001df3d:	83 ec 0c             	sub    esp,0xc
c001df40:	68 3f 07 00 00       	push   0x73f
c001df45:	e8 01 19 ff ff       	call   c000f84b <malloc>
c001df4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df51:	89 c3                	mov    ebx,eax
c001df53:	6a 00                	push   0x0
c001df55:	68 f3 c1 02 c0       	push   0xc002c1f3
c001df5a:	6a 01                	push   0x1
c001df5c:	50                   	push   eax
c001df5d:	e8 8e fb ff ff       	call   c001daf0 <Process::Process(bool, char const*, Process*, char**)>
c001df62:	83 c4 18             	add    esp,0x18
c001df65:	89 1d b4 19 03 c0    	mov    DWORD PTR ds:0xc00319b4,ebx
c001df6b:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001df71:	68 14 c3 02 c0       	push   0xc002c314
c001df76:	e8 28 4e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001df7b:	58                   	pop    eax
c001df7c:	5a                   	pop    edx
c001df7d:	6a 63                	push   0x63
c001df7f:	68 48 c3 02 c0       	push   0xc002c348
c001df84:	e8 1a 4e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001df89:	59                   	pop    ecx
c001df8a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001df90:	e8 81 2c ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001df95:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001df9d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dfa7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dfb0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dfba:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dfc0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dfc6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dfd0:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dfda:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dfe4:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dfea:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dff4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dffa:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e004:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e00a:	58                   	pop    eax
c001e00b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e011:	5a                   	pop    edx
c001e012:	68 ef c1 02 c0       	push   0xc002c1ef
c001e017:	50                   	push   eax
c001e018:	e8 1f 28 fe ff       	call   c000083c <strcpy>
c001e01d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e024:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e028:	83 c4 14             	add    esp,0x14
c001e02b:	5b                   	pop    ebx
c001e02c:	5e                   	pop    esi
c001e02d:	e9 22 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e032 <schedule()>:
c001e032:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001e037:	85 c0                	test   eax,eax
c001e039:	74 0b                	je     c001e046 <schedule()+0x14>
c001e03b:	c7 05 84 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031984,0x1
c001e045:	c3                   	ret    
c001e046:	53                   	push   ebx
c001e047:	83 ec 14             	sub    esp,0x14
c001e04a:	68 a8 19 03 c0       	push   0xc00319a8
c001e04f:	e8 d2 a9 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e054:	83 c4 10             	add    esp,0x10
c001e057:	84 c0                	test   al,al
c001e059:	75 38                	jne    c001e093 <schedule()+0x61>
c001e05b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e060:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e063:	4a                   	dec    edx
c001e064:	74 32                	je     c001e098 <schedule()+0x66>
c001e066:	83 ec 0c             	sub    esp,0xc
c001e069:	68 a8 19 03 c0       	push   0xc00319a8
c001e06e:	e8 ab a9 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e073:	c7 04 24 a8 19 03 c0 	mov    DWORD PTR [esp],0xc00319a8
c001e07a:	89 c3                	mov    ebx,eax
c001e07c:	e8 c1 a9 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e081:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e088:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e08b:	e8 cd fc ff ff       	call   c001dd5d <switchToThread(ThreadControlBlock*)>
c001e090:	83 c4 10             	add    esp,0x10
c001e093:	83 c4 08             	add    esp,0x8
c001e096:	5b                   	pop    ebx
c001e097:	c3                   	ret    
c001e098:	83 ec 08             	sub    esp,0x8
c001e09b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e0a2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e0a8:	68 a8 19 03 c0       	push   0xc00319a8
c001e0ad:	e8 3e aa 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0b2:	83 c4 10             	add    esp,0x10
c001e0b5:	eb af                	jmp    c001e066 <schedule()+0x34>

c001e0b7 <unlockStuff()>:
c001e0b7:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001e0bc:	48                   	dec    eax
c001e0bd:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c001e0c2:	75 09                	jne    c001e0cd <unlockStuff()+0x16>
c001e0c4:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c001e0c9:	85 c0                	test   eax,eax
c001e0cb:	75 05                	jne    c001e0d2 <unlockStuff()+0x1b>
c001e0cd:	e9 db fb ff ff       	jmp    c001dcad <enableIRQs()>
c001e0d2:	83 ec 0c             	sub    esp,0xc
c001e0d5:	c7 05 84 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031984,0x0
c001e0df:	e8 4e ff ff ff       	call   c001e032 <schedule()>
c001e0e4:	83 c4 0c             	add    esp,0xc
c001e0e7:	e9 c1 fb ff ff       	jmp    c001dcad <enableIRQs()>

c001e0ec <Semaphore::tryAcquire()>:
c001e0ec:	83 ec 0c             	sub    esp,0xc
c001e0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f3:	e8 eb fb ff ff       	call   c001dce3 <lockStuff()>
c001e0f8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e0fb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e0fd:	7c 0b                	jl     c001e10a <Semaphore::tryAcquire()+0x1e>
c001e0ff:	e8 b3 ff ff ff       	call   c001e0b7 <unlockStuff()>
c001e104:	31 c0                	xor    eax,eax
c001e106:	83 c4 0c             	add    esp,0xc
c001e109:	c3                   	ret    
c001e10a:	42                   	inc    edx
c001e10b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e10e:	e8 a4 ff ff ff       	call   c001e0b7 <unlockStuff()>
c001e113:	b0 01                	mov    al,0x1
c001e115:	83 c4 0c             	add    esp,0xc
c001e118:	c3                   	ret    
c001e119:	90                   	nop

c001e11a <Semaphore::assertLocked(char const*)>:
c001e11a:	83 ec 0c             	sub    esp,0xc
c001e11d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e121:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e125:	e8 b9 fb ff ff       	call   c001dce3 <lockStuff()>
c001e12a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e12c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e12f:	7c 05                	jl     c001e136 <Semaphore::assertLocked(char const*)+0x1c>
c001e131:	83 c4 0c             	add    esp,0xc
c001e134:	eb 81                	jmp    c001e0b7 <unlockStuff()>
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	52                   	push   edx
c001e13a:	e8 a2 c3 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001e13f:	83 c4 10             	add    esp,0x10
c001e142:	83 c4 0c             	add    esp,0xc
c001e145:	e9 6d ff ff ff       	jmp    c001e0b7 <unlockStuff()>

c001e14a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e14a:	83 ec 0c             	sub    esp,0xc
c001e14d:	e8 55 fb ff ff       	call   c001dca7 <getIRQNestingLevel()>
c001e152:	83 ec 08             	sub    esp,0x8
c001e155:	50                   	push   eax
c001e156:	68 6c c3 02 c0       	push   0xc002c36c
c001e15b:	e8 43 4c ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e160:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e164:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e169:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e16c:	e8 c1 fe ff ff       	call   c001e032 <schedule()>
c001e171:	e8 48 fb ff ff       	call   c001dcbe <unlockScheduler()>
c001e176:	e8 2c fb ff ff       	call   c001dca7 <getIRQNestingLevel()>
c001e17b:	5a                   	pop    edx
c001e17c:	59                   	pop    ecx
c001e17d:	50                   	push   eax
c001e17e:	68 a0 c3 02 c0       	push   0xc002c3a0
c001e183:	e8 1b 4c ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e188:	83 c4 1c             	add    esp,0x1c
c001e18b:	c3                   	ret    

c001e18c <blockTask(TaskState)>:
c001e18c:	83 ec 0c             	sub    esp,0xc
c001e18f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e193:	e8 24 fb ff ff       	call   c001dcbc <lockScheduler()>
c001e198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e19d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1a0:	e8 8d fe ff ff       	call   c001e032 <schedule()>
c001e1a5:	83 c4 0c             	add    esp,0xc
c001e1a8:	e9 11 fb ff ff       	jmp    c001dcbe <unlockScheduler()>

c001e1ad <waitTask(int, int*, int)>:
c001e1ad:	83 ec 18             	sub    esp,0x18
c001e1b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1b9:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e1bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1c5:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e1c8:	6a 07                	push   0x7
c001e1ca:	e8 bd ff ff ff       	call   c001e18c <blockTask(TaskState)>
c001e1cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1d4:	83 c4 10             	add    esp,0x10
c001e1d7:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e1da:	85 d2                	test   edx,edx
c001e1dc:	74 0a                	je     c001e1e8 <waitTask(int, int*, int)+0x3b>
c001e1de:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e1e1:	89 02                	mov    DWORD PTR [edx],eax
c001e1e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1e8:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e1eb:	83 c4 0c             	add    esp,0xc
c001e1ee:	c3                   	ret    

c001e1ef <nanoSleepUntil(unsigned long long)>:
c001e1ef:	83 ec 0c             	sub    esp,0xc
c001e1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1fa:	3b 05 d0 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ead0
c001e200:	89 d1                	mov    ecx,edx
c001e202:	1b 0d d4 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ead4
c001e208:	73 04                	jae    c001e20e <nanoSleepUntil(unsigned long long)+0x1f>
c001e20a:	83 c4 0c             	add    esp,0xc
c001e20d:	c3                   	ret    
c001e20e:	e8 d0 fa ff ff       	call   c001dce3 <lockStuff()>
c001e213:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e219:	83 ec 08             	sub    esp,0x8
c001e21c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e21f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e222:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e228:	68 9c 19 03 c0       	push   0xc003199c
c001e22d:	e8 be a8 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e232:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e239:	e8 4e ff ff ff       	call   c001e18c <blockTask(TaskState)>
c001e23e:	83 c4 1c             	add    esp,0x1c
c001e241:	e9 71 fe ff ff       	jmp    c001e0b7 <unlockStuff()>

c001e246 <nanoSleep(unsigned long long)>:
c001e246:	a1 d0 ea 02 c0       	mov    eax,ds:0xc002ead0
c001e24b:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c001e251:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e255:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e259:	eb 94                	jmp    c001e1ef <nanoSleepUntil(unsigned long long)>

c001e25b <sleep(unsigned long long)>:
c001e25b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e263:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e268:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e26c:	01 ca                	add    edx,ecx
c001e26e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e272:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e276:	eb ce                	jmp    c001e246 <nanoSleep(unsigned long long)>

c001e278 <Semaphore::acquire()>:
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27f:	e8 5f fa ff ff       	call   c001dce3 <lockStuff()>
c001e284:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e287:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e289:	7d 0c                	jge    c001e297 <Semaphore::acquire()+0x1f>
c001e28b:	42                   	inc    edx
c001e28c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e28f:	83 c4 0c             	add    esp,0xc
c001e292:	e9 20 fe ff ff       	jmp    c001e0b7 <unlockStuff()>
c001e297:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e29d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e2a4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e2a7:	85 d2                	test   edx,edx
c001e2a9:	74 2a                	je     c001e2d5 <Semaphore::acquire()+0x5d>
c001e2ab:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e2ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2b4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e2b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2bd:	83 ec 0c             	sub    esp,0xc
c001e2c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e2c3:	6a 05                	push   0x5
c001e2c5:	e8 c2 fe ff ff       	call   c001e18c <blockTask(TaskState)>
c001e2ca:	83 c4 10             	add    esp,0x10
c001e2cd:	83 c4 0c             	add    esp,0xc
c001e2d0:	e9 e2 fd ff ff       	jmp    c001e0b7 <unlockStuff()>
c001e2d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e2de:	eb d7                	jmp    c001e2b7 <Semaphore::acquire()+0x3f>

c001e2e0 <taskReturned>:
c001e2e0:	83 ec 18             	sub    esp,0x18
c001e2e3:	68 d4 c3 02 c0       	push   0xc002c3d4
c001e2e8:	e8 f4 c1 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001e2ed:	83 c4 10             	add    esp,0x10
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	6a 02                	push   0x2
c001e2f5:	e8 92 fe ff ff       	call   c001e18c <blockTask(TaskState)>
c001e2fa:	e8 bd f9 ff ff       	call   c001dcbc <lockScheduler()>
c001e2ff:	e8 2e fd ff ff       	call   c001e032 <schedule()>
c001e304:	e8 b5 f9 ff ff       	call   c001dcbe <unlockScheduler()>
c001e309:	83 c4 10             	add    esp,0x10
c001e30c:	eb e2                	jmp    c001e2f0 <taskReturned+0x10>

c001e30e <unblockTask(ThreadControlBlock*)>:
c001e30e:	53                   	push   ebx
c001e30f:	83 ec 08             	sub    esp,0x8
c001e312:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e316:	e8 a1 f9 ff ff       	call   c001dcbc <lockScheduler()>
c001e31b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e31e:	85 c0                	test   eax,eax
c001e320:	74 5c                	je     c001e37e <unblockTask(ThreadControlBlock*)+0x70>
c001e322:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e325:	48                   	dec    eax
c001e326:	74 31                	je     c001e359 <unblockTask(ThreadControlBlock*)+0x4b>
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	68 a8 19 03 c0       	push   0xc00319a8
c001e330:	e8 e9 a6 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e335:	83 c4 10             	add    esp,0x10
c001e338:	85 c0                	test   eax,eax
c001e33a:	75 17                	jne    c001e353 <unblockTask(ThreadControlBlock*)+0x45>
c001e33c:	eb 65                	jmp    c001e3a3 <unblockTask(ThreadControlBlock*)+0x95>
c001e33e:	83 ec 08             	sub    esp,0x8
c001e341:	50                   	push   eax
c001e342:	68 a8 19 03 c0       	push   0xc00319a8
c001e347:	e8 b8 a9 00 00       	call   c0028d04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e34c:	83 c4 10             	add    esp,0x10
c001e34f:	85 c0                	test   eax,eax
c001e351:	74 50                	je     c001e3a3 <unblockTask(ThreadControlBlock*)+0x95>
c001e353:	39 c3                	cmp    ebx,eax
c001e355:	75 e7                	jne    c001e33e <unblockTask(ThreadControlBlock*)+0x30>
c001e357:	eb 1c                	jmp    c001e375 <unblockTask(ThreadControlBlock*)+0x67>
c001e359:	83 ec 0c             	sub    esp,0xc
c001e35c:	68 c4 c4 02 c0       	push   0xc002c4c4
c001e361:	e8 3d 4a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e366:	c7 04 24 50 c4 02 c0 	mov    DWORD PTR [esp],0xc002c450
c001e36d:	e8 31 4a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e372:	83 c4 10             	add    esp,0x10
c001e375:	83 c4 08             	add    esp,0x8
c001e378:	5b                   	pop    ebx
c001e379:	e9 40 f9 ff ff       	jmp    c001dcbe <unlockScheduler()>
c001e37e:	83 ec 0c             	sub    esp,0xc
c001e381:	68 08 c4 02 c0       	push   0xc002c408
c001e386:	e8 18 4a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e38b:	c7 04 24 50 c4 02 c0 	mov    DWORD PTR [esp],0xc002c450
c001e392:	e8 0c 4a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e397:	83 c4 10             	add    esp,0x10
c001e39a:	83 c4 08             	add    esp,0x8
c001e39d:	5b                   	pop    ebx
c001e39e:	e9 1b f9 ff ff       	jmp    c001dcbe <unlockScheduler()>
c001e3a3:	83 ec 08             	sub    esp,0x8
c001e3a6:	53                   	push   ebx
c001e3a7:	68 a8 19 03 c0       	push   0xc00319a8
c001e3ac:	e8 3f a7 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3b1:	83 c4 10             	add    esp,0x10
c001e3b4:	83 c4 08             	add    esp,0x8
c001e3b7:	5b                   	pop    ebx
c001e3b8:	e9 01 f9 ff ff       	jmp    c001dcbe <unlockScheduler()>

c001e3bd <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e3bd:	55                   	push   ebp
c001e3be:	57                   	push   edi
c001e3bf:	56                   	push   esi
c001e3c0:	53                   	push   ebx
c001e3c1:	83 ec 1c             	sub    esp,0x1c
c001e3c4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e3c8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3cb:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e3d1:	85 ff                	test   edi,edi
c001e3d3:	7e 20                	jle    c001e3f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e3d5:	31 f6                	xor    esi,esi
c001e3d7:	83 ec 0c             	sub    esp,0xc
c001e3da:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e3e1:	46                   	inc    esi
c001e3e2:	e8 74 14 ff ff       	call   c000f85b <free>
c001e3e7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e3f3:	7f e2                	jg     c001e3d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e3f5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e3ff:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e404:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e407:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e40a:	d3 c0                	rol    eax,cl
c001e40c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e413:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e416:	89 f7                	mov    edi,esi
c001e418:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e420:	0f 85 74 01 00 00    	jne    c001e59a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e426:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e42c:	85 ed                	test   ebp,ebp
c001e42e:	74 1b                	je     c001e44b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e430:	83 ec 0c             	sub    esp,0xc
c001e433:	55                   	push   ebp
c001e434:	e8 15 be ff ff       	call   c001a24e <EnvVarContainer::~EnvVarContainer()>
c001e439:	59                   	pop    ecx
c001e43a:	5e                   	pop    esi
c001e43b:	6a 0c                	push   0xc
c001e43d:	55                   	push   ebp
c001e43e:	e8 80 48 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c001e443:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e446:	83 c4 10             	add    esp,0x10
c001e449:	89 f7                	mov    edi,esi
c001e44b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e451:	85 c0                	test   eax,eax
c001e453:	0f 84 aa 00 00 00    	je     c001e503 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e459:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e45c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e460:	31 c9                	xor    ecx,ecx
c001e462:	eb 10                	jmp    c001e474 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e464:	41                   	inc    ecx
c001e465:	83 f9 10             	cmp    ecx,0x10
c001e468:	0f 84 95 00 00 00    	je     c001e503 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e46e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e474:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e47b:	d3 fa                	sar    edx,cl
c001e47d:	83 e2 01             	and    edx,0x1
c001e480:	74 e2                	je     c001e464 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e482:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e485:	01 ca                	add    edx,ecx
c001e487:	89 d5                	mov    ebp,edx
c001e489:	c1 e5 05             	shl    ebp,0x5
c001e48c:	01 ea                	add    edx,ebp
c001e48e:	01 d0                	add    eax,edx
c001e490:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e496:	83 fd 07             	cmp    ebp,0x7
c001e499:	75 c9                	jne    c001e464 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e49b:	05 40 02 00 00       	add    eax,0x240
c001e4a0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e4a3:	83 fd ff             	cmp    ebp,0xffffffff
c001e4a6:	0f 8c 08 01 00 00    	jl     c001e5b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e4ac:	0f 84 b9 01 00 00    	je     c001e66b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e4b2:	85 ed                	test   ebp,ebp
c001e4b4:	0f 84 a0 01 00 00    	je     c001e65a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e4ba:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e4bc:	75 a6                	jne    c001e464 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4be:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e4c8:	01 d0                	add    eax,edx
c001e4ca:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e4ce:	83 ec 0c             	sub    esp,0xc
c001e4d1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e4d7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4da:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e4e0:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e4e7:	50                   	push   eax
c001e4e8:	e8 21 fe ff ff       	call   c001e30e <unblockTask(ThreadControlBlock*)>
c001e4ed:	83 c4 10             	add    esp,0x10
c001e4f0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4f7:	89 f7                	mov    edi,esi
c001e4f9:	41                   	inc    ecx
c001e4fa:	83 f9 10             	cmp    ecx,0x10
c001e4fd:	0f 85 6b ff ff ff    	jne    c001e46e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e503:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e509:	85 c0                	test   eax,eax
c001e50b:	74 5d                	je     c001e56a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e50d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e513:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e519:	74 4f                	je     c001e56a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e51b:	83 ec 0c             	sub    esp,0xc
c001e51e:	68 a8 19 03 c0       	push   0xc00319a8
c001e523:	e8 f6 a4 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e528:	c7 04 24 a8 19 03 c0 	mov    DWORD PTR [esp],0xc00319a8
c001e52f:	89 c7                	mov    edi,eax
c001e531:	e8 f0 a4 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e536:	83 c4 10             	add    esp,0x10
c001e539:	84 c0                	test   al,al
c001e53b:	0f 84 e4 00 00 00    	je     c001e625 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e541:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e544:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e54a:	85 d2                	test   edx,edx
c001e54c:	74 0f                	je     c001e55d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e54e:	83 ec 0c             	sub    esp,0xc
c001e551:	8b 02                	mov    eax,DWORD PTR [edx]
c001e553:	52                   	push   edx
c001e554:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e557:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e55a:	83 c4 10             	add    esp,0x10
c001e55d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e567:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e56a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e570:	85 db                	test   ebx,ebx
c001e572:	74 16                	je     c001e58a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e574:	83 ec 0c             	sub    esp,0xc
c001e577:	53                   	push   ebx
c001e578:	e8 13 3b ff ff       	call   c0012090 <VAS::~VAS()>
c001e57d:	58                   	pop    eax
c001e57e:	5a                   	pop    edx
c001e57f:	6a 14                	push   0x14
c001e581:	53                   	push   ebx
c001e582:	e8 3c 47 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c001e587:	83 c4 10             	add    esp,0x10
c001e58a:	83 ec 0c             	sub    esp,0xc
c001e58d:	68 fa c1 02 c0       	push   0xc002c1fa
c001e592:	e8 0c 48 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e597:	83 c4 10             	add    esp,0x10
c001e59a:	83 ec 08             	sub    esp,0x8
c001e59d:	68 3f 07 00 00       	push   0x73f
c001e5a2:	68 08 c2 02 c0       	push   0xc002c208
c001e5a7:	e8 f7 47 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e5ac:	83 c4 2c             	add    esp,0x2c
c001e5af:	5b                   	pop    ebx
c001e5b0:	5e                   	pop    esi
c001e5b1:	5f                   	pop    edi
c001e5b2:	5d                   	pop    ebp
c001e5b3:	c3                   	ret    
c001e5b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5b8:	83 ec 0c             	sub    esp,0xc
c001e5bb:	68 08 c5 02 c0       	push   0xc002c508
c001e5c0:	e8 1c bf ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001e5c5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5c8:	83 c4 10             	add    esp,0x10
c001e5cb:	89 f7                	mov    edi,esi
c001e5cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5d1:	e9 8e fe ff ff       	jmp    c001e464 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5d6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e5dc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e5e2:	75 1c                	jne    c001e600 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e5e4:	83 ec 0c             	sub    esp,0xc
c001e5e7:	68 70 c5 02 c0       	push   0xc002c570
c001e5ec:	e8 b2 47 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e5f1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e5f8:	e8 8f fb ff ff       	call   c001e18c <blockTask(TaskState)>
c001e5fd:	83 c4 10             	add    esp,0x10
c001e600:	83 ec 08             	sub    esp,0x8
c001e603:	56                   	push   esi
c001e604:	68 a8 19 03 c0       	push   0xc00319a8
c001e609:	e8 e2 a4 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e60e:	c7 04 24 a8 19 03 c0 	mov    DWORD PTR [esp],0xc00319a8
c001e615:	e8 04 a4 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e61a:	83 c4 10             	add    esp,0x10
c001e61d:	39 f8                	cmp    eax,edi
c001e61f:	0f 84 1c ff ff ff    	je     c001e541 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e625:	83 ec 0c             	sub    esp,0xc
c001e628:	68 a8 19 03 c0       	push   0xc00319a8
c001e62d:	e8 ec a3 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e632:	c7 04 24 a8 19 03 c0 	mov    DWORD PTR [esp],0xc00319a8
c001e639:	89 c6                	mov    esi,eax
c001e63b:	e8 02 a4 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e640:	83 c4 10             	add    esp,0x10
c001e643:	39 f3                	cmp    ebx,esi
c001e645:	74 b9                	je     c001e600 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e647:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e64a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e64d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e653:	75 ab                	jne    c001e600 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e655:	e9 7c ff ff ff       	jmp    c001e5d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e65a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e65e:	83 ec 0c             	sub    esp,0xc
c001e661:	68 3c c5 02 c0       	push   0xc002c53c
c001e666:	e9 55 ff ff ff       	jmp    c001e5c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e66b:	8b 36                	mov    esi,DWORD PTR [esi]
c001e66d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e671:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e674:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e677:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e67d:	01 d7                	add    edi,edx
c001e67f:	89 f8                	mov    eax,edi
c001e681:	e9 44 fe ff ff       	jmp    c001e4ca <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e686 <cleanerTaskFunction(void*)>:
c001e686:	53                   	push   ebx
c001e687:	83 ec 08             	sub    esp,0x8
c001e68a:	e8 2f f6 ff ff       	call   c001dcbe <unlockScheduler()>
c001e68f:	e8 28 f6 ff ff       	call   c001dcbc <lockScheduler()>
c001e694:	80 3d 6c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003196c,0x0
c001e69b:	0f 85 8e 00 00 00    	jne    c001e72f <cleanerTaskFunction(void*)+0xa9>
c001e6a1:	83 ec 0c             	sub    esp,0xc
c001e6a4:	6a 02                	push   0x2
c001e6a6:	e8 9f fa ff ff       	call   c001e14a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e6ab:	83 c4 10             	add    esp,0x10
c001e6ae:	c6 05 6c 19 03 c0 00 	mov    BYTE PTR ds:0xc003196c,0x0
c001e6b5:	e8 29 f6 ff ff       	call   c001dce3 <lockStuff()>
c001e6ba:	e8 fd f5 ff ff       	call   c001dcbc <lockScheduler()>
c001e6bf:	83 ec 0c             	sub    esp,0xc
c001e6c2:	68 90 19 03 c0       	push   0xc0031990
c001e6c7:	e8 5a a3 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6cc:	83 c4 10             	add    esp,0x10
c001e6cf:	84 c0                	test   al,al
c001e6d1:	75 40                	jne    c001e713 <cleanerTaskFunction(void*)+0x8d>
c001e6d3:	83 ec 0c             	sub    esp,0xc
c001e6d6:	68 90 19 03 c0       	push   0xc0031990
c001e6db:	e8 3e a3 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6e0:	c7 04 24 90 19 03 c0 	mov    DWORD PTR [esp],0xc0031990
c001e6e7:	89 c3                	mov    ebx,eax
c001e6e9:	e8 54 a3 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6ee:	c7 04 24 1e c2 02 c0 	mov    DWORD PTR [esp],0xc002c21e
c001e6f5:	e8 a9 46 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e6fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e6fd:	e8 bb fc ff ff       	call   c001e3bd <cleanupTerminatedTask(ThreadControlBlock*)>
c001e702:	c7 04 24 37 c2 02 c0 	mov    DWORD PTR [esp],0xc002c237
c001e709:	e8 95 46 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e70e:	83 c4 10             	add    esp,0x10
c001e711:	eb ac                	jmp    c001e6bf <cleanerTaskFunction(void*)+0x39>
c001e713:	e8 a6 f5 ff ff       	call   c001dcbe <unlockScheduler()>
c001e718:	e8 9a f9 ff ff       	call   c001e0b7 <unlockStuff()>
c001e71d:	e8 9a f5 ff ff       	call   c001dcbc <lockScheduler()>
c001e722:	80 3d 6c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003196c,0x0
c001e729:	0f 84 72 ff ff ff    	je     c001e6a1 <cleanerTaskFunction(void*)+0x1b>
c001e72f:	e8 8a f5 ff ff       	call   c001dcbe <unlockScheduler()>
c001e734:	e9 75 ff ff ff       	jmp    c001e6ae <cleanerTaskFunction(void*)+0x28>

c001e739 <terminateTask(int)>:
c001e739:	83 ec 14             	sub    esp,0x14
c001e73c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e741:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e744:	83 c0 0c             	add    eax,0xc
c001e747:	50                   	push   eax
c001e748:	68 98 c5 02 c0       	push   0xc002c598
c001e74d:	e8 51 46 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e752:	e8 8c f5 ff ff       	call   c001dce3 <lockStuff()>
c001e757:	e8 60 f5 ff ff       	call   c001dcbc <lockScheduler()>
c001e75c:	c7 04 24 4a c2 02 c0 	mov    DWORD PTR [esp],0xc002c24a
c001e763:	e8 3b 46 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e768:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e76c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e771:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e774:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e779:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e77c:	5a                   	pop    edx
c001e77d:	59                   	pop    ecx
c001e77e:	50                   	push   eax
c001e77f:	68 90 19 03 c0       	push   0xc0031990
c001e784:	e8 67 a3 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e78e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e795:	c7 04 24 64 c2 02 c0 	mov    DWORD PTR [esp],0xc002c264
c001e79c:	e8 02 46 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e7a1:	83 c4 10             	add    esp,0x10
c001e7a4:	a1 68 19 03 c0       	mov    eax,ds:0xc0031968
c001e7a9:	85 c0                	test   eax,eax
c001e7ab:	74 5a                	je     c001e807 <terminateTask(int)+0xce>
c001e7ad:	83 ec 0c             	sub    esp,0xc
c001e7b0:	68 7e c2 02 c0       	push   0xc002c27e
c001e7b5:	e8 e9 45 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e7ba:	58                   	pop    eax
c001e7bb:	c6 05 6c 19 03 c0 01 	mov    BYTE PTR ds:0xc003196c,0x1
c001e7c2:	ff 35 68 19 03 c0    	push   DWORD PTR ds:0xc0031968
c001e7c8:	e8 41 fb ff ff       	call   c001e30e <unblockTask(ThreadControlBlock*)>
c001e7cd:	c7 04 24 98 c2 02 c0 	mov    DWORD PTR [esp],0xc002c298
c001e7d4:	e8 ca 45 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e7d9:	83 c4 10             	add    esp,0x10
c001e7dc:	e8 dd f4 ff ff       	call   c001dcbe <unlockScheduler()>
c001e7e1:	e8 d1 f8 ff ff       	call   c001e0b7 <unlockStuff()>
c001e7e6:	83 ec 0c             	sub    esp,0xc
c001e7e9:	68 d0 c2 02 c0       	push   0xc002c2d0
c001e7ee:	e8 b0 45 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e7f3:	83 c4 10             	add    esp,0x10
c001e7f6:	e8 c1 f4 ff ff       	call   c001dcbc <lockScheduler()>
c001e7fb:	e8 32 f8 ff ff       	call   c001e032 <schedule()>
c001e800:	e8 b9 f4 ff ff       	call   c001dcbe <unlockScheduler()>
c001e805:	eb ef                	jmp    c001e7f6 <terminateTask(int)+0xbd>
c001e807:	83 ec 0c             	sub    esp,0xc
c001e80a:	68 b2 c2 02 c0       	push   0xc002c2b2
c001e80f:	e8 8f 45 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e814:	83 c4 10             	add    esp,0x10
c001e817:	eb c3                	jmp    c001e7dc <terminateTask(int)+0xa3>

c001e819 <Thr::terminateFromIRQ(int)>:
c001e819:	83 ec 18             	sub    esp,0x18
c001e81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e820:	e8 14 ff ff ff       	call   c001e739 <terminateTask(int)>
c001e825:	90                   	nop

c001e826 <Semaphore::release()>:
c001e826:	83 ec 0c             	sub    esp,0xc
c001e829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e82d:	e8 b1 f4 ff ff       	call   c001dce3 <lockStuff()>
c001e832:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e835:	85 d2                	test   edx,edx
c001e837:	74 1a                	je     c001e853 <Semaphore::release()+0x2d>
c001e839:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e83c:	83 ec 0c             	sub    esp,0xc
c001e83f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e842:	52                   	push   edx
c001e843:	e8 c6 fa ff ff       	call   c001e30e <unblockTask(ThreadControlBlock*)>
c001e848:	83 c4 10             	add    esp,0x10
c001e84b:	83 c4 0c             	add    esp,0xc
c001e84e:	e9 64 f8 ff ff       	jmp    c001e0b7 <unlockStuff()>
c001e853:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e856:	83 c4 0c             	add    esp,0xc
c001e859:	e9 59 f8 ff ff       	jmp    c001e0b7 <unlockStuff()>

c001e85e <__static_initialization_and_destruction_0(int, int)>:
c001e85e:	83 ec 0c             	sub    esp,0xc
c001e861:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e866:	0f 85 88 00 00 00    	jne    c001e8f4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e86c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e874:	75 7e                	jne    c001e8f4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e876:	83 ec 0c             	sub    esp,0xc
c001e879:	68 a8 19 03 c0       	push   0xc00319a8
c001e87e:	e8 29 a4 00 00       	call   c0028cac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e883:	83 c4 10             	add    esp,0x10
c001e886:	83 ec 04             	sub    esp,0x4
c001e889:	68 64 d3 02 c0       	push   0xc002d364
c001e88e:	68 a8 19 03 c0       	push   0xc00319a8
c001e893:	68 60 8c 02 c0       	push   0xc0028c60
c001e898:	e8 a0 43 ff ff       	call   c0012c3d <__cxa_atexit>
c001e89d:	83 c4 10             	add    esp,0x10
c001e8a0:	83 ec 0c             	sub    esp,0xc
c001e8a3:	68 9c 19 03 c0       	push   0xc003199c
c001e8a8:	e8 ff a3 00 00       	call   c0028cac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8ad:	83 c4 10             	add    esp,0x10
c001e8b0:	83 ec 04             	sub    esp,0x4
c001e8b3:	68 64 d3 02 c0       	push   0xc002d364
c001e8b8:	68 9c 19 03 c0       	push   0xc003199c
c001e8bd:	68 60 8c 02 c0       	push   0xc0028c60
c001e8c2:	e8 76 43 ff ff       	call   c0012c3d <__cxa_atexit>
c001e8c7:	83 c4 10             	add    esp,0x10
c001e8ca:	83 ec 0c             	sub    esp,0xc
c001e8cd:	68 90 19 03 c0       	push   0xc0031990
c001e8d2:	e8 d5 a3 00 00       	call   c0028cac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8d7:	83 c4 10             	add    esp,0x10
c001e8da:	83 ec 04             	sub    esp,0x4
c001e8dd:	68 64 d3 02 c0       	push   0xc002d364
c001e8e2:	68 90 19 03 c0       	push   0xc0031990
c001e8e7:	68 60 8c 02 c0       	push   0xc0028c60
c001e8ec:	e8 4c 43 ff ff       	call   c0012c3d <__cxa_atexit>
c001e8f1:	83 c4 10             	add    esp,0x10
c001e8f4:	90                   	nop
c001e8f5:	83 c4 0c             	add    esp,0xc
c001e8f8:	c3                   	ret    

c001e8f9 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e8f9:	83 ec 0c             	sub    esp,0xc
c001e8fc:	83 ec 08             	sub    esp,0x8
c001e8ff:	68 ff ff 00 00       	push   0xffff
c001e904:	6a 01                	push   0x1
c001e906:	e8 53 ff ff ff       	call   c001e85e <__static_initialization_and_destruction_0(int, int)>
c001e90b:	83 c4 10             	add    esp,0x10
c001e90e:	83 c4 0c             	add    esp,0xc
c001e911:	c3                   	ret    

c001e912 <Vm::inbv(unsigned short)>:
c001e912:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e916:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e91b:	75 06                	jne    c001e923 <Vm::inbv(unsigned short)+0x11>
c001e91d:	a0 ec 19 03 c0       	mov    al,ds:0xc00319ec
c001e922:	c3                   	ret    
c001e923:	ec                   	in     al,dx
c001e924:	c3                   	ret    

c001e925 <Vm::outbv(unsigned short, unsigned char)>:
c001e925:	53                   	push   ebx
c001e926:	83 ec 08             	sub    esp,0x8
c001e929:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e92d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e931:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e936:	75 38                	jne    c001e970 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e938:	0f b6 c3             	movzx  eax,bl
c001e93b:	51                   	push   ecx
c001e93c:	51                   	push   ecx
c001e93d:	50                   	push   eax
c001e93e:	68 b7 c5 02 c0       	push   0xc002c5b7
c001e943:	e8 5b 44 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001e948:	8b 15 ec 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319ec
c001e94e:	83 c4 10             	add    esp,0x10
c001e951:	8d 42 01             	lea    eax,[edx+0x1]
c001e954:	88 9a 00 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce600],bl
c001e95a:	a3 ec 19 03 c0       	mov    ds:0xc00319ec,eax
c001e95f:	83 f8 20             	cmp    eax,0x20
c001e962:	75 0f                	jne    c001e973 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e964:	c7 05 ec 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00319ec,0x1f
c001e96e:	eb 03                	jmp    c001e973 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e970:	88 d8                	mov    al,bl
c001e972:	ee                   	out    dx,al
c001e973:	83 c4 08             	add    esp,0x8
c001e976:	5b                   	pop    ebx
c001e977:	c3                   	ret    

c001e978 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e978:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e97d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e982:	c1 e0 04             	shl    eax,0x4
c001e985:	01 d0                	add    eax,edx
c001e987:	c3                   	ret    

c001e988 <Vm::getSegment(unsigned int)>:
c001e988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e98c:	c1 e8 10             	shr    eax,0x10
c001e98f:	c3                   	ret    

c001e990 <Vm::getOffset(unsigned int)>:
c001e990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e994:	c3                   	ret    

c001e995 <Vm::mainloop2()>:
c001e995:	83 ec 0c             	sub    esp,0xc
c001e998:	e8 1f f3 ff ff       	call   c001dcbc <lockScheduler()>
c001e99d:	83 ec 0c             	sub    esp,0xc
c001e9a0:	c6 05 e5 19 03 c0 01 	mov    BYTE PTR ds:0xc00319e5,0x1
c001e9a7:	6a 02                	push   0x2
c001e9a9:	e8 9c f7 ff ff       	call   c001e14a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9b3:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e9b7:	52                   	push   edx
c001e9b8:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e9bc:	52                   	push   edx
c001e9bd:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e9c1:	52                   	push   edx
c001e9c2:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e9c6:	50                   	push   eax
c001e9c7:	e8 2e 19 fe ff       	call   c00002fa <goToVM86>
c001e9cc:	83 c4 2c             	add    esp,0x2c
c001e9cf:	c3                   	ret    

c001e9d0 <Vm::mainVm8086Loop(void*)>:
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	e8 e6 f2 ff ff       	call   c001dcbe <unlockScheduler()>
c001e9d8:	83 c4 0c             	add    esp,0xc
c001e9db:	eb b8                	jmp    c001e995 <Vm::mainloop2()>

c001e9dd <Vm::mainloop3(unsigned long)>:
c001e9dd:	53                   	push   ebx
c001e9de:	83 ec 08             	sub    esp,0x8
c001e9e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e9e5:	e8 d2 f2 ff ff       	call   c001dcbc <lockScheduler()>
c001e9ea:	83 ec 0c             	sub    esp,0xc
c001e9ed:	89 1d e0 19 03 c0    	mov    DWORD PTR ds:0xc00319e0,ebx
c001e9f3:	6a 02                	push   0x2
c001e9f5:	c6 05 e4 19 03 c0 01 	mov    BYTE PTR ds:0xc00319e4,0x1
c001e9fc:	e8 49 f7 ff ff       	call   c001e14a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea01:	83 c4 18             	add    esp,0x18
c001ea04:	5b                   	pop    ebx
c001ea05:	eb 8e                	jmp    c001e995 <Vm::mainloop2()>

c001ea07 <Vm::initialise8086()>:
c001ea07:	83 ec 0c             	sub    esp,0xc
c001ea0a:	68 80 00 00 00       	push   0x80
c001ea0f:	6a 00                	push   0x0
c001ea11:	68 d0 e9 01 c0       	push   0xc001e9d0
c001ea16:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c001ea1c:	e8 cd f3 ff ff       	call   c001ddee <Process::createThread(void (*)(void*), void*, int)>
c001ea21:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ea28:	a3 e8 19 03 c0       	mov    ds:0xc00319e8,eax
c001ea2d:	68 00 01 00 00       	push   0x100
c001ea32:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001ea37:	6a 00                	push   0x0
c001ea39:	6a 00                	push   0x0
c001ea3b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ea41:	e8 aa 3a ff ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ea46:	83 c4 2c             	add    esp,0x2c
c001ea49:	c3                   	ret    

c001ea4a <Vm::finish8086()>:
c001ea4a:	53                   	push   ebx
c001ea4b:	83 ec 08             	sub    esp,0x8
c001ea4e:	e8 69 f2 ff ff       	call   c001dcbc <lockScheduler()>
c001ea53:	80 3d e4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319e4,0x0
c001ea5a:	75 0c                	jne    c001ea68 <Vm::finish8086()+0x1e>
c001ea5c:	e8 d1 f5 ff ff       	call   c001e032 <schedule()>
c001ea61:	e8 58 f2 ff ff       	call   c001dcbe <unlockScheduler()>
c001ea66:	eb e6                	jmp    c001ea4e <Vm::finish8086()+0x4>
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	8b 1d e0 19 03 c0    	mov    ebx,DWORD PTR ds:0xc00319e0
c001ea71:	ff 35 e8 19 03 c0    	push   DWORD PTR ds:0xc00319e8
c001ea77:	c6 05 e4 19 03 c0 00 	mov    BYTE PTR ds:0xc00319e4,0x0
c001ea7e:	e8 8b f8 ff ff       	call   c001e30e <unblockTask(ThreadControlBlock*)>
c001ea83:	e8 36 f2 ff ff       	call   c001dcbe <unlockScheduler()>
c001ea88:	89 d8                	mov    eax,ebx
c001ea8a:	83 c4 18             	add    esp,0x18
c001ea8d:	5b                   	pop    ebx
c001ea8e:	c3                   	ret    

c001ea8f <Vm::getOutput8086(unsigned char*)>:
c001ea8f:	83 ec 10             	sub    esp,0x10
c001ea92:	ff 35 ec 19 03 c0    	push   DWORD PTR ds:0xc00319ec
c001ea98:	68 00 1a 03 c0       	push   0xc0031a00
c001ea9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaa1:	e8 a6 1c fe ff       	call   c000074c <memcpy>
c001eaa6:	a1 ec 19 03 c0       	mov    eax,ds:0xc00319ec
c001eaab:	c7 05 ec 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319ec,0x0
c001eab5:	83 c4 1c             	add    esp,0x1c
c001eab8:	c3                   	ret    

c001eab9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eab9:	55                   	push   ebp
c001eaba:	57                   	push   edi
c001eabb:	56                   	push   esi
c001eabc:	53                   	push   ebx
c001eabd:	83 ec 2c             	sub    esp,0x2c
c001eac0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eac4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eac8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eacc:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ead0:	e8 e7 f1 ff ff       	call   c001dcbc <lockScheduler()>
c001ead5:	a0 e5 19 03 c0       	mov    al,ds:0xc00319e5
c001eada:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eade:	84 c0                	test   al,al
c001eae0:	75 0c                	jne    c001eaee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eae2:	e8 4b f5 ff ff       	call   c001e032 <schedule()>
c001eae7:	e8 d2 f1 ff ff       	call   c001dcbe <unlockScheduler()>
c001eaec:	eb e2                	jmp    c001ead0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eaee:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c001eaf3:	c7 05 ec 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319ec,0x0
c001eafd:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eb01:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eb05:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eb09:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eb0d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb11:	50                   	push   eax
c001eb12:	6a 20                	push   0x20
c001eb14:	6a 00                	push   0x0
c001eb16:	68 00 1a 03 c0       	push   0xc0031a00
c001eb1b:	e8 60 1c fe ff       	call   c0000780 <memset>
c001eb20:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eb27:	e8 1f 0d ff ff       	call   c000f84b <malloc>
c001eb2c:	83 c4 0c             	add    esp,0xc
c001eb2f:	89 c7                	mov    edi,eax
c001eb31:	ff 35 b4 19 03 c0    	push   DWORD PTR ds:0xc00319b4
c001eb37:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eb3b:	50                   	push   eax
c001eb3c:	e8 c1 47 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c001eb41:	83 c4 10             	add    esp,0x10
c001eb44:	85 ff                	test   edi,edi
c001eb46:	75 0a                	jne    c001eb52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	68 d3 c5 02 c0       	push   0xc002c5d3
c001eb50:	eb 27                	jmp    c001eb79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eb52:	50                   	push   eax
c001eb53:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eb57:	50                   	push   eax
c001eb58:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb5c:	50                   	push   eax
c001eb5d:	57                   	push   edi
c001eb5e:	e8 af 4a ff ff       	call   c0013612 <File::stat(unsigned long long*, bool*)>
c001eb63:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eb68:	83 c4 10             	add    esp,0x10
c001eb6b:	89 e8                	mov    eax,ebp
c001eb6d:	84 c0                	test   al,al
c001eb6f:	74 19                	je     c001eb8a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eb71:	83 ec 0c             	sub    esp,0xc
c001eb74:	68 e7 c5 02 c0       	push   0xc002c5e7
c001eb79:	e8 63 b9 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001eb7e:	31 ed                	xor    ebp,ebp
c001eb80:	e8 39 f1 ff ff       	call   c001dcbe <unlockScheduler()>
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	eb 75                	jmp    c001ebff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb8a:	50                   	push   eax
c001eb8b:	50                   	push   eax
c001eb8c:	6a 01                	push   0x1
c001eb8e:	57                   	push   edi
c001eb8f:	e8 d2 47 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c001eb94:	83 c4 10             	add    esp,0x10
c001eb97:	85 c0                	test   eax,eax
c001eb99:	74 17                	je     c001ebb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eb9b:	83 ec 0c             	sub    esp,0xc
c001eb9e:	68 00 c6 02 c0       	push   0xc002c600
c001eba3:	e8 39 b9 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001eba8:	e8 11 f1 ff ff       	call   c001dcbe <unlockScheduler()>
c001ebad:	83 c4 10             	add    esp,0x10
c001ebb0:	eb 4d                	jmp    c001ebff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ebb2:	0f b7 f6             	movzx  esi,si
c001ebb5:	50                   	push   eax
c001ebb6:	0f b7 db             	movzx  ebx,bx
c001ebb9:	50                   	push   eax
c001ebba:	56                   	push   esi
c001ebbb:	53                   	push   ebx
c001ebbc:	e8 b7 fd ff ff       	call   c001e978 <Vm::realToLinear(unsigned short, unsigned short)>
c001ebc1:	5a                   	pop    edx
c001ebc2:	8b 17                	mov    edx,DWORD PTR [edi]
c001ebc4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ebc8:	51                   	push   ecx
c001ebc9:	50                   	push   eax
c001ebca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ebce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ebd2:	57                   	push   edi
c001ebd3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ebd6:	83 c4 14             	add    esp,0x14
c001ebd9:	57                   	push   edi
c001ebda:	e8 e5 47 ff ff       	call   c00133c4 <File::close()>
c001ebdf:	c6 05 e5 19 03 c0 00 	mov    BYTE PTR ds:0xc00319e5,0x0
c001ebe6:	e8 d3 f0 ff ff       	call   c001dcbe <unlockScheduler()>
c001ebeb:	59                   	pop    ecx
c001ebec:	ff 35 e8 19 03 c0    	push   DWORD PTR ds:0xc00319e8
c001ebf2:	e8 17 f7 ff ff       	call   c001e30e <unblockTask(ThreadControlBlock*)>
c001ebf7:	83 c4 10             	add    esp,0x10
c001ebfa:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ebff:	83 c4 2c             	add    esp,0x2c
c001ec02:	89 e8                	mov    eax,ebp
c001ec04:	5b                   	pop    ebx
c001ec05:	5e                   	pop    esi
c001ec06:	5f                   	pop    edi
c001ec07:	5d                   	pop    ebp
c001ec08:	c3                   	ret    

c001ec09 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec09:	57                   	push   edi
c001ec0a:	56                   	push   esi
c001ec0b:	53                   	push   ebx
c001ec0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec18:	83 e8 06             	sub    eax,0x6
c001ec1b:	0f b7 c0             	movzx  eax,ax
c001ec1e:	50                   	push   eax
c001ec1f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ec24:	50                   	push   eax
c001ec25:	e8 4e fd ff ff       	call   c001e978 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec2a:	5a                   	pop    edx
c001ec2b:	5e                   	pop    esi
c001ec2c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ec2f:	8d 56 fa             	lea    edx,[esi-0x6]
c001ec32:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ec38:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ec3b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ec3e:	83 c2 02             	add    edx,0x2
c001ec41:	66 89 10             	mov    WORD PTR [eax],dx
c001ec44:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ec47:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ec4b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ec4e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ec52:	89 d6                	mov    esi,edx
c001ec54:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ec5a:	66 81 e6 ff fd       	and    si,0xfdff
c001ec5f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ec63:	74 07                	je     c001ec6c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ec65:	89 d6                	mov    esi,edx
c001ec67:	66 81 ce 00 02       	or     si,0x200
c001ec6c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ec70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec75:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec79:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ec81:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ec84:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ec8c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ec8f:	5b                   	pop    ebx
c001ec90:	5e                   	pop    esi
c001ec91:	5f                   	pop    edi
c001ec92:	c3                   	ret    

c001ec93 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ec93:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec98:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec9d:	c1 e0 04             	shl    eax,0x4
c001eca0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001eca3:	c3                   	ret    

c001eca4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001eca4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eca9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecae:	c1 e0 04             	shl    eax,0x4
c001ecb1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ecb5:	c3                   	ret    

c001ecb6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ecb6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecbb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecc0:	c1 e0 04             	shl    eax,0x4
c001ecc3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ecc6:	c3                   	ret    

c001ecc7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ecc7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eccc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecd1:	c1 e0 04             	shl    eax,0x4
c001ecd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ecd8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ecdb:	c3                   	ret    

c001ecdc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ecdc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ece1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ece6:	c1 e0 04             	shl    eax,0x4
c001ece9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eced:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ecf1:	c3                   	ret    

c001ecf2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ecf2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecf7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecfc:	c1 e0 04             	shl    eax,0x4
c001ecff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed03:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed06:	c3                   	ret    

c001ed07 <Vm::faultHandler(regs*)>:
c001ed07:	55                   	push   ebp
c001ed08:	57                   	push   edi
c001ed09:	56                   	push   esi
c001ed0a:	53                   	push   ebx
c001ed0b:	83 ec 1c             	sub    esp,0x1c
c001ed0e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed12:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ed15:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ed18:	0f b7 c1             	movzx  eax,cx
c001ed1b:	50                   	push   eax
c001ed1c:	0f b7 c3             	movzx  eax,bx
c001ed1f:	c1 e3 04             	shl    ebx,0x4
c001ed22:	50                   	push   eax
c001ed23:	e8 50 fc ff ff       	call   c001e978 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed28:	5a                   	pop    edx
c001ed29:	89 c5                	mov    ebp,eax
c001ed2b:	5e                   	pop    esi
c001ed2c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ed30:	50                   	push   eax
c001ed31:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ed35:	50                   	push   eax
c001ed36:	e8 3d fc ff ff       	call   c001e978 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed3b:	01 cb                	add    ebx,ecx
c001ed3d:	89 c6                	mov    esi,eax
c001ed3f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ed43:	50                   	push   eax
c001ed44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed48:	50                   	push   eax
c001ed49:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed4d:	50                   	push   eax
c001ed4e:	55                   	push   ebp
c001ed4f:	53                   	push   ebx
c001ed50:	b3 06                	mov    bl,0x6
c001ed52:	68 19 c6 02 c0       	push   0xc002c619
c001ed57:	e8 47 40 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ed5c:	83 c4 20             	add    esp,0x20
c001ed5f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ed64:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ed69:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ed6d:	3c 9d                	cmp    al,0x9d
c001ed6f:	0f 84 d7 02 00 00    	je     c001f04c <Vm::faultHandler(regs*)+0x345>
c001ed75:	0f 87 a3 00 00 00    	ja     c001ee1e <Vm::faultHandler(regs*)+0x117>
c001ed7b:	3c 66                	cmp    al,0x66
c001ed7d:	0f 84 15 02 00 00    	je     c001ef98 <Vm::faultHandler(regs*)+0x291>
c001ed83:	77 5f                	ja     c001ede4 <Vm::faultHandler(regs*)+0xdd>
c001ed85:	3c 36                	cmp    al,0x36
c001ed87:	0f 84 f1 01 00 00    	je     c001ef7e <Vm::faultHandler(regs*)+0x277>
c001ed8d:	77 28                	ja     c001edb7 <Vm::faultHandler(regs*)+0xb0>
c001ed8f:	3c 26                	cmp    al,0x26
c001ed91:	0f 84 99 01 00 00    	je     c001ef30 <Vm::faultHandler(regs*)+0x229>
c001ed97:	3c 2e                	cmp    al,0x2e
c001ed99:	0f 85 3b 07 00 00    	jne    c001f4da <Vm::faultHandler(regs*)+0x7d3>
c001ed9f:	83 ec 0c             	sub    esp,0xc
c001eda2:	31 db                	xor    ebx,ebx
c001eda4:	68 2e c6 02 c0       	push   0xc002c62e
c001eda9:	e8 f5 3f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001edae:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001edb1:	83 c4 10             	add    esp,0x10
c001edb4:	45                   	inc    ebp
c001edb5:	eb b2                	jmp    c001ed69 <Vm::faultHandler(regs*)+0x62>
c001edb7:	3c 64                	cmp    al,0x64
c001edb9:	0f 84 8b 01 00 00    	je     c001ef4a <Vm::faultHandler(regs*)+0x243>
c001edbf:	0f 87 9f 01 00 00    	ja     c001ef64 <Vm::faultHandler(regs*)+0x25d>
c001edc5:	3c 3e                	cmp    al,0x3e
c001edc7:	0f 85 0d 07 00 00    	jne    c001f4da <Vm::faultHandler(regs*)+0x7d3>
c001edcd:	83 ec 0c             	sub    esp,0xc
c001edd0:	b3 01                	mov    bl,0x1
c001edd2:	68 32 c6 02 c0       	push   0xc002c632
c001edd7:	e8 c7 3f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001eddc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eddf:	83 c4 10             	add    esp,0x10
c001ede2:	eb d0                	jmp    c001edb4 <Vm::faultHandler(regs*)+0xad>
c001ede4:	3c 6d                	cmp    al,0x6d
c001ede6:	0f 84 af 03 00 00    	je     c001f19b <Vm::faultHandler(regs*)+0x494>
c001edec:	77 15                	ja     c001ee03 <Vm::faultHandler(regs*)+0xfc>
c001edee:	3c 67                	cmp    al,0x67
c001edf0:	0f 84 bf 01 00 00    	je     c001efb5 <Vm::faultHandler(regs*)+0x2ae>
c001edf6:	3c 6c                	cmp    al,0x6c
c001edf8:	0f 84 3f 03 00 00    	je     c001f13d <Vm::faultHandler(regs*)+0x436>
c001edfe:	e9 d7 06 00 00       	jmp    c001f4da <Vm::faultHandler(regs*)+0x7d3>
c001ee03:	3c 6f                	cmp    al,0x6f
c001ee05:	0f 84 a4 04 00 00    	je     c001f2af <Vm::faultHandler(regs*)+0x5a8>
c001ee0b:	0f 82 11 04 00 00    	jb     c001f222 <Vm::faultHandler(regs*)+0x51b>
c001ee11:	3c 9c                	cmp    al,0x9c
c001ee13:	0f 84 ba 01 00 00    	je     c001efd3 <Vm::faultHandler(regs*)+0x2cc>
c001ee19:	e9 bc 06 00 00       	jmp    c001f4da <Vm::faultHandler(regs*)+0x7d3>
c001ee1e:	3c ec                	cmp    al,0xec
c001ee20:	0f 84 24 06 00 00    	je     c001f44a <Vm::faultHandler(regs*)+0x743>
c001ee26:	0f 87 93 00 00 00    	ja     c001eebf <Vm::faultHandler(regs*)+0x1b8>
c001ee2c:	3c e4                	cmp    al,0xe4
c001ee2e:	0f 84 5c 05 00 00    	je     c001f390 <Vm::faultHandler(regs*)+0x689>
c001ee34:	77 6a                	ja     c001eea0 <Vm::faultHandler(regs*)+0x199>
c001ee36:	3c cd                	cmp    al,0xcd
c001ee38:	0f 84 7e 02 00 00    	je     c001f0bc <Vm::faultHandler(regs*)+0x3b5>
c001ee3e:	3c cf                	cmp    al,0xcf
c001ee40:	0f 85 94 06 00 00    	jne    c001f4da <Vm::faultHandler(regs*)+0x7d3>
c001ee46:	83 ec 0c             	sub    esp,0xc
c001ee49:	68 76 c6 02 c0       	push   0xc002c676
c001ee4e:	e8 50 3f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ee53:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ee56:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ee59:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ee5d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ee60:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ee64:	0d 00 02 02 00       	or     eax,0x20200
c001ee69:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ee6c:	56                   	push   esi
c001ee6d:	53                   	push   ebx
c001ee6e:	52                   	push   edx
c001ee6f:	68 7c c6 02 c0       	push   0xc002c67c
c001ee74:	e8 2a 3f ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ee79:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ee7d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ee83:	66 c1 e8 09          	shr    ax,0x9
c001ee87:	83 e0 01             	and    eax,0x1
c001ee8a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee8d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ee90:	83 c0 06             	add    eax,0x6
c001ee93:	25 ff ff 00 00       	and    eax,0xffff
c001ee98:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ee9b:	e9 95 02 00 00       	jmp    c001f135 <Vm::faultHandler(regs*)+0x42e>
c001eea0:	3c e6                	cmp    al,0xe6
c001eea2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001eea6:	0f 84 4e 05 00 00    	je     c001f3fa <Vm::faultHandler(regs*)+0x6f3>
c001eeac:	0f 82 0a 05 00 00    	jb     c001f3bc <Vm::faultHandler(regs*)+0x6b5>
c001eeb2:	3c e7                	cmp    al,0xe7
c001eeb4:	0f 84 69 05 00 00    	je     c001f423 <Vm::faultHandler(regs*)+0x71c>
c001eeba:	e9 1b 06 00 00       	jmp    c001f4da <Vm::faultHandler(regs*)+0x7d3>
c001eebf:	3c ef                	cmp    al,0xef
c001eec1:	0f 84 e6 05 00 00    	je     c001f4ad <Vm::faultHandler(regs*)+0x7a6>
c001eec7:	77 37                	ja     c001ef00 <Vm::faultHandler(regs*)+0x1f9>
c001eec9:	3c ed                	cmp    al,0xed
c001eecb:	0f 84 a3 05 00 00    	je     c001f474 <Vm::faultHandler(regs*)+0x76d>
c001eed1:	3c ee                	cmp    al,0xee
c001eed3:	0f 85 01 06 00 00    	jne    c001f4da <Vm::faultHandler(regs*)+0x7d3>
c001eed9:	52                   	push   edx
c001eeda:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001eedd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001eee0:	68 17 c7 02 c0       	push   0xc002c717
c001eee5:	e8 b9 3e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001eeea:	59                   	pop    ecx
c001eeeb:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001eeef:	5b                   	pop    ebx
c001eef0:	50                   	push   eax
c001eef1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eef5:	50                   	push   eax
c001eef6:	e8 2a fa ff ff       	call   c001e925 <Vm::outbv(unsigned short, unsigned char)>
c001eefb:	e9 a5 05 00 00       	jmp    c001f4a5 <Vm::faultHandler(regs*)+0x79e>
c001ef00:	3c fa                	cmp    al,0xfa
c001ef02:	0f 84 f7 01 00 00    	je     c001f0ff <Vm::faultHandler(regs*)+0x3f8>
c001ef08:	3c fb                	cmp    al,0xfb
c001ef0a:	0f 84 0a 02 00 00    	je     c001f11a <Vm::faultHandler(regs*)+0x413>
c001ef10:	3c f3                	cmp    al,0xf3
c001ef12:	0f 85 c2 05 00 00    	jne    c001f4da <Vm::faultHandler(regs*)+0x7d3>
c001ef18:	83 ec 0c             	sub    esp,0xc
c001ef1b:	68 4f c6 02 c0       	push   0xc002c64f
c001ef20:	e8 7e 3e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ef25:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef28:	83 c4 10             	add    esp,0x10
c001ef2b:	e9 84 fe ff ff       	jmp    c001edb4 <Vm::faultHandler(regs*)+0xad>
c001ef30:	83 ec 0c             	sub    esp,0xc
c001ef33:	b3 02                	mov    bl,0x2
c001ef35:	68 2a c6 02 c0       	push   0xc002c62a
c001ef3a:	e8 64 3e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ef3f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef42:	83 c4 10             	add    esp,0x10
c001ef45:	e9 6a fe ff ff       	jmp    c001edb4 <Vm::faultHandler(regs*)+0xad>
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	b3 03                	mov    bl,0x3
c001ef4f:	68 36 c6 02 c0       	push   0xc002c636
c001ef54:	e8 4a 3e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ef59:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef5c:	83 c4 10             	add    esp,0x10
c001ef5f:	e9 50 fe ff ff       	jmp    c001edb4 <Vm::faultHandler(regs*)+0xad>
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	b3 04                	mov    bl,0x4
c001ef69:	68 3a c6 02 c0       	push   0xc002c63a
c001ef6e:	e8 30 3e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ef73:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef76:	83 c4 10             	add    esp,0x10
c001ef79:	e9 36 fe ff ff       	jmp    c001edb4 <Vm::faultHandler(regs*)+0xad>
c001ef7e:	83 ec 0c             	sub    esp,0xc
c001ef81:	b3 05                	mov    bl,0x5
c001ef83:	68 3e c6 02 c0       	push   0xc002c63e
c001ef88:	e8 16 3e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001ef8d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef90:	83 c4 10             	add    esp,0x10
c001ef93:	e9 1c fe ff ff       	jmp    c001edb4 <Vm::faultHandler(regs*)+0xad>
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	68 42 c6 02 c0       	push   0xc002c642
c001efa0:	e8 fe 3d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001efa5:	83 c4 10             	add    esp,0x10
c001efa8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efab:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001efb0:	e9 ff fd ff ff       	jmp    c001edb4 <Vm::faultHandler(regs*)+0xad>
c001efb5:	50                   	push   eax
c001efb6:	50                   	push   eax
c001efb7:	6a 01                	push   0x1
c001efb9:	68 47 c6 02 c0       	push   0xc002c647
c001efbe:	e8 e0 3d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001efc3:	83 c4 10             	add    esp,0x10
c001efc6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efc9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001efce:	e9 e1 fd ff ff       	jmp    c001edb4 <Vm::faultHandler(regs*)+0xad>
c001efd3:	83 ec 0c             	sub    esp,0xc
c001efd6:	68 55 c6 02 c0       	push   0xc002c655
c001efdb:	e8 c3 3d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001efe0:	83 c4 10             	add    esp,0x10
c001efe3:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001efe6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efeb:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001efee:	74 2f                	je     c001f01f <Vm::faultHandler(regs*)+0x318>
c001eff0:	83 ea 04             	sub    edx,0x4
c001eff3:	25 ff 0d 00 00       	and    eax,0xdff
c001eff8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001effe:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f001:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f004:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f00a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f00e:	0f 84 bf 04 00 00    	je     c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f014:	80 cc 02             	or     ah,0x2
c001f017:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f01a:	e9 b4 04 00 00       	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f01f:	83 ea 02             	sub    edx,0x2
c001f022:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f028:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f02b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f02f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f035:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f039:	74 05                	je     c001f040 <Vm::faultHandler(regs*)+0x339>
c001f03b:	80 cc 02             	or     ah,0x2
c001f03e:	eb 03                	jmp    c001f043 <Vm::faultHandler(regs*)+0x33c>
c001f040:	80 e4 fd             	and    ah,0xfd
c001f043:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f047:	e9 87 04 00 00       	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f04c:	83 ec 0c             	sub    esp,0xc
c001f04f:	68 5c c6 02 c0       	push   0xc002c65c
c001f054:	e8 4a 3d ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f059:	83 c4 10             	add    esp,0x10
c001f05c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f061:	74 28                	je     c001f08b <Vm::faultHandler(regs*)+0x384>
c001f063:	8b 06                	mov    eax,DWORD PTR [esi]
c001f065:	25 ff 0d 00 00       	and    eax,0xdff
c001f06a:	0d 00 02 02 00       	or     eax,0x20200
c001f06f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f072:	8b 06                	mov    eax,DWORD PTR [esi]
c001f074:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f07a:	c1 e8 09             	shr    eax,0x9
c001f07d:	83 e0 01             	and    eax,0x1
c001f080:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f083:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f086:	83 c0 04             	add    eax,0x4
c001f089:	eb 24                	jmp    c001f0af <Vm::faultHandler(regs*)+0x3a8>
c001f08b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f08e:	0d 00 02 02 00       	or     eax,0x20200
c001f093:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f096:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f099:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f09f:	66 c1 e8 09          	shr    ax,0x9
c001f0a3:	83 e0 01             	and    eax,0x1
c001f0a6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0a9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f0ac:	83 c0 02             	add    eax,0x2
c001f0af:	25 ff ff 00 00       	and    eax,0xffff
c001f0b4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f0b7:	e9 17 04 00 00       	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f0bc:	53                   	push   ebx
c001f0bd:	53                   	push   ebx
c001f0be:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0c2:	50                   	push   eax
c001f0c3:	68 62 c6 02 c0       	push   0xc002c662
c001f0c8:	e8 d6 3c ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f0cd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0d1:	83 c4 10             	add    esp,0x10
c001f0d4:	3c ee                	cmp    al,0xee
c001f0d6:	75 10                	jne    c001f0e8 <Vm::faultHandler(regs*)+0x3e1>
c001f0d8:	83 ec 0c             	sub    esp,0xc
c001f0db:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0de:	e8 fa f8 ff ff       	call   c001e9dd <Vm::mainloop3(unsigned long)>
c001f0e3:	e9 c0 03 00 00       	jmp    c001f4a8 <Vm::faultHandler(regs*)+0x7a1>
c001f0e8:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f0ec:	83 ec 0c             	sub    esp,0xc
c001f0ef:	53                   	push   ebx
c001f0f0:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f0f4:	53                   	push   ebx
c001f0f5:	55                   	push   ebp
c001f0f6:	50                   	push   eax
c001f0f7:	57                   	push   edi
c001f0f8:	e8 0c fb ff ff       	call   c001ec09 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f0fd:	eb 36                	jmp    c001f135 <Vm::faultHandler(regs*)+0x42e>
c001f0ff:	83 ec 0c             	sub    esp,0xc
c001f102:	68 6c c6 02 c0       	push   0xc002c66c
c001f107:	e8 97 3c ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f10c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f111:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f115:	e9 8b 03 00 00       	jmp    c001f4a5 <Vm::faultHandler(regs*)+0x79e>
c001f11a:	83 ec 0c             	sub    esp,0xc
c001f11d:	68 71 c6 02 c0       	push   0xc002c671
c001f122:	e8 7c 3c ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f12c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f130:	e9 70 03 00 00       	jmp    c001f4a5 <Vm::faultHandler(regs*)+0x79e>
c001f135:	83 c4 20             	add    esp,0x20
c001f138:	e9 99 03 00 00       	jmp    c001f4d6 <Vm::faultHandler(regs*)+0x7cf>
c001f13d:	83 ec 0c             	sub    esp,0xc
c001f140:	68 af c6 02 c0       	push   0xc002c6af
c001f145:	e8 59 3c ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f14a:	83 c4 10             	add    esp,0x10
c001f14d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f150:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f155:	74 0d                	je     c001f164 <Vm::faultHandler(regs*)+0x45d>
c001f157:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f15e:	0f 87 9e 01 00 00    	ja     c001f302 <Vm::faultHandler(regs*)+0x5fb>
c001f164:	83 ec 0c             	sub    esp,0xc
c001f167:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f16b:	0f b7 db             	movzx  ebx,bx
c001f16e:	50                   	push   eax
c001f16f:	e8 9e f7 ff ff       	call   c001e912 <Vm::inbv(unsigned short)>
c001f174:	83 c4 0c             	add    esp,0xc
c001f177:	0f b6 c0             	movzx  eax,al
c001f17a:	50                   	push   eax
c001f17b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f17f:	50                   	push   eax
c001f180:	53                   	push   ebx
c001f181:	e8 41 fb ff ff       	call   c001ecc7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f186:	83 c4 10             	add    esp,0x10
c001f189:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f18c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f190:	74 03                	je     c001f195 <Vm::faultHandler(regs*)+0x48e>
c001f192:	48                   	dec    eax
c001f193:	eb 01                	jmp    c001f196 <Vm::faultHandler(regs*)+0x48f>
c001f195:	40                   	inc    eax
c001f196:	0f b7 c0             	movzx  eax,ax
c001f199:	eb 7f                	jmp    c001f21a <Vm::faultHandler(regs*)+0x513>
c001f19b:	83 ec 0c             	sub    esp,0xc
c001f19e:	68 e1 c6 02 c0       	push   0xc002c6e1
c001f1a3:	e8 fb 3b ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f1a8:	83 c4 10             	add    esp,0x10
c001f1ab:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1ae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1b3:	74 0d                	je     c001f1c2 <Vm::faultHandler(regs*)+0x4bb>
c001f1b5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f1bc:	0f 87 40 01 00 00    	ja     c001f302 <Vm::faultHandler(regs*)+0x5fb>
c001f1c2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f1c5:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f1c9:	0f b7 db             	movzx  ebx,bx
c001f1cc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1d1:	74 20                	je     c001f1f3 <Vm::faultHandler(regs*)+0x4ec>
c001f1d3:	ed                   	in     eax,dx
c001f1d4:	51                   	push   ecx
c001f1d5:	50                   	push   eax
c001f1d6:	56                   	push   esi
c001f1d7:	53                   	push   ebx
c001f1d8:	e8 15 fb ff ff       	call   c001ecf2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f1dd:	83 c4 10             	add    esp,0x10
c001f1e0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1e3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1e7:	74 05                	je     c001f1ee <Vm::faultHandler(regs*)+0x4e7>
c001f1e9:	83 e8 04             	sub    eax,0x4
c001f1ec:	eb 27                	jmp    c001f215 <Vm::faultHandler(regs*)+0x50e>
c001f1ee:	83 c0 04             	add    eax,0x4
c001f1f1:	eb 22                	jmp    c001f215 <Vm::faultHandler(regs*)+0x50e>
c001f1f3:	66 ed                	in     ax,dx
c001f1f5:	0f b7 c0             	movzx  eax,ax
c001f1f8:	52                   	push   edx
c001f1f9:	50                   	push   eax
c001f1fa:	56                   	push   esi
c001f1fb:	53                   	push   ebx
c001f1fc:	e8 db fa ff ff       	call   c001ecdc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f201:	83 c4 10             	add    esp,0x10
c001f204:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f207:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f20b:	74 05                	je     c001f212 <Vm::faultHandler(regs*)+0x50b>
c001f20d:	83 e8 02             	sub    eax,0x2
c001f210:	eb 03                	jmp    c001f215 <Vm::faultHandler(regs*)+0x50e>
c001f212:	83 c0 02             	add    eax,0x2
c001f215:	25 ff ff 00 00       	and    eax,0xffff
c001f21a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f21d:	e9 b1 02 00 00       	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f222:	83 ec 0c             	sub    esp,0xc
c001f225:	4b                   	dec    ebx
c001f226:	68 e7 c6 02 c0       	push   0xc002c6e7
c001f22b:	e8 73 3b ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f230:	83 c4 10             	add    esp,0x10
c001f233:	80 fb 05             	cmp    bl,0x5
c001f236:	77 0a                	ja     c001f242 <Vm::faultHandler(regs*)+0x53b>
c001f238:	0f b6 db             	movzx  ebx,bl
c001f23b:	ff 24 9d 58 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd38a8]
c001f242:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f246:	eb 1b                	jmp    c001f263 <Vm::faultHandler(regs*)+0x55c>
c001f248:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f24c:	eb 15                	jmp    c001f263 <Vm::faultHandler(regs*)+0x55c>
c001f24e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f252:	eb 0f                	jmp    c001f263 <Vm::faultHandler(regs*)+0x55c>
c001f254:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f258:	eb 09                	jmp    c001f263 <Vm::faultHandler(regs*)+0x55c>
c001f25a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f25d:	eb 04                	jmp    c001f263 <Vm::faultHandler(regs*)+0x55c>
c001f25f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f263:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f268:	74 0d                	je     c001f277 <Vm::faultHandler(regs*)+0x570>
c001f26a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f271:	0f 87 8b 00 00 00    	ja     c001f302 <Vm::faultHandler(regs*)+0x5fb>
c001f277:	53                   	push   ebx
c001f278:	53                   	push   ebx
c001f279:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f27d:	52                   	push   edx
c001f27e:	50                   	push   eax
c001f27f:	e8 0f fa ff ff       	call   c001ec93 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f284:	5e                   	pop    esi
c001f285:	0f b6 c0             	movzx  eax,al
c001f288:	5d                   	pop    ebp
c001f289:	50                   	push   eax
c001f28a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f28e:	50                   	push   eax
c001f28f:	e8 91 f6 ff ff       	call   c001e925 <Vm::outbv(unsigned short, unsigned char)>
c001f294:	83 c4 10             	add    esp,0x10
c001f297:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f29a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f29e:	74 03                	je     c001f2a3 <Vm::faultHandler(regs*)+0x59c>
c001f2a0:	48                   	dec    eax
c001f2a1:	eb 01                	jmp    c001f2a4 <Vm::faultHandler(regs*)+0x59d>
c001f2a3:	40                   	inc    eax
c001f2a4:	0f b7 c0             	movzx  eax,ax
c001f2a7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f2aa:	e9 24 02 00 00       	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f2af:	83 ec 0c             	sub    esp,0xc
c001f2b2:	4b                   	dec    ebx
c001f2b3:	68 e7 c6 02 c0       	push   0xc002c6e7
c001f2b8:	e8 e6 3a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f2bd:	83 c4 10             	add    esp,0x10
c001f2c0:	80 fb 05             	cmp    bl,0x5
c001f2c3:	77 0a                	ja     c001f2cf <Vm::faultHandler(regs*)+0x5c8>
c001f2c5:	0f b6 db             	movzx  ebx,bl
c001f2c8:	ff 24 9d 70 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3890]
c001f2cf:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2d3:	eb 1b                	jmp    c001f2f0 <Vm::faultHandler(regs*)+0x5e9>
c001f2d5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f2d9:	eb 15                	jmp    c001f2f0 <Vm::faultHandler(regs*)+0x5e9>
c001f2db:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2df:	eb 0f                	jmp    c001f2f0 <Vm::faultHandler(regs*)+0x5e9>
c001f2e1:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f2e5:	eb 09                	jmp    c001f2f0 <Vm::faultHandler(regs*)+0x5e9>
c001f2e7:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f2ea:	eb 04                	jmp    c001f2f0 <Vm::faultHandler(regs*)+0x5e9>
c001f2ec:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f2f0:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f2f3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2f8:	74 39                	je     c001f333 <Vm::faultHandler(regs*)+0x62c>
c001f2fa:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f300:	76 31                	jbe    c001f333 <Vm::faultHandler(regs*)+0x62c>
c001f302:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f306:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f30a:	51                   	push   ecx
c001f30b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f30f:	51                   	push   ecx
c001f310:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f314:	51                   	push   ecx
c001f315:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f319:	51                   	push   ecx
c001f31a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f31e:	52                   	push   edx
c001f31f:	50                   	push   eax
c001f320:	50                   	push   eax
c001f321:	68 b4 c6 02 c0       	push   0xc002c6b4
c001f326:	e8 78 3a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f32b:	83 c4 20             	add    esp,0x20
c001f32e:	e9 fb 01 00 00       	jmp    c001f52e <Vm::faultHandler(regs*)+0x827>
c001f333:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f336:	0f b7 d3             	movzx  edx,bx
c001f339:	81 e6 00 04 00 00    	and    esi,0x400
c001f33f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f342:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f347:	74 1d                	je     c001f366 <Vm::faultHandler(regs*)+0x65f>
c001f349:	51                   	push   ecx
c001f34a:	51                   	push   ecx
c001f34b:	52                   	push   edx
c001f34c:	50                   	push   eax
c001f34d:	e8 64 f9 ff ff       	call   c001ecb6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f352:	83 c4 10             	add    esp,0x10
c001f355:	89 ea                	mov    edx,ebp
c001f357:	ef                   	out    dx,eax
c001f358:	85 f6                	test   esi,esi
c001f35a:	74 05                	je     c001f361 <Vm::faultHandler(regs*)+0x65a>
c001f35c:	83 eb 04             	sub    ebx,0x4
c001f35f:	eb 21                	jmp    c001f382 <Vm::faultHandler(regs*)+0x67b>
c001f361:	83 c3 04             	add    ebx,0x4
c001f364:	eb 1c                	jmp    c001f382 <Vm::faultHandler(regs*)+0x67b>
c001f366:	51                   	push   ecx
c001f367:	51                   	push   ecx
c001f368:	52                   	push   edx
c001f369:	50                   	push   eax
c001f36a:	e8 35 f9 ff ff       	call   c001eca4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f36f:	83 c4 10             	add    esp,0x10
c001f372:	89 ea                	mov    edx,ebp
c001f374:	66 ef                	out    dx,ax
c001f376:	85 f6                	test   esi,esi
c001f378:	74 05                	je     c001f37f <Vm::faultHandler(regs*)+0x678>
c001f37a:	83 eb 02             	sub    ebx,0x2
c001f37d:	eb 03                	jmp    c001f382 <Vm::faultHandler(regs*)+0x67b>
c001f37f:	83 c3 02             	add    ebx,0x2
c001f382:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f388:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f38b:	e9 43 01 00 00       	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f390:	53                   	push   ebx
c001f391:	53                   	push   ebx
c001f392:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f396:	50                   	push   eax
c001f397:	68 ed c6 02 c0       	push   0xc002c6ed
c001f39c:	e8 02 3a ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f3a1:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f3a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3af:	e8 5e f5 ff ff       	call   c001e912 <Vm::inbv(unsigned short)>
c001f3b4:	0f b6 c0             	movzx  eax,al
c001f3b7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f3ba:	eb 5e                	jmp    c001f41a <Vm::faultHandler(regs*)+0x713>
c001f3bc:	51                   	push   ecx
c001f3bd:	51                   	push   ecx
c001f3be:	53                   	push   ebx
c001f3bf:	68 f3 c6 02 c0       	push   0xc002c6f3
c001f3c4:	e8 da 39 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f3c9:	83 c4 10             	add    esp,0x10
c001f3cc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3d1:	74 07                	je     c001f3da <Vm::faultHandler(regs*)+0x6d3>
c001f3d3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3d7:	ed                   	in     eax,dx
c001f3d8:	eb 14                	jmp    c001f3ee <Vm::faultHandler(regs*)+0x6e7>
c001f3da:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f3dd:	66 31 db             	xor    bx,bx
c001f3e0:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f3e3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3e7:	66 ed                	in     ax,dx
c001f3e9:	0f b7 c0             	movzx  eax,ax
c001f3ec:	09 d8                	or     eax,ebx
c001f3ee:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f3f1:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f3f5:	e9 dc 00 00 00       	jmp    c001f4d6 <Vm::faultHandler(regs*)+0x7cf>
c001f3fa:	50                   	push   eax
c001f3fb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3fe:	53                   	push   ebx
c001f3ff:	68 f9 c6 02 c0       	push   0xc002c6f9
c001f404:	e8 9a 39 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f409:	58                   	pop    eax
c001f40a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f40e:	5a                   	pop    edx
c001f40f:	50                   	push   eax
c001f410:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f414:	50                   	push   eax
c001f415:	e8 0b f5 ff ff       	call   c001e925 <Vm::outbv(unsigned short, unsigned char)>
c001f41a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f41e:	e9 85 00 00 00       	jmp    c001f4a8 <Vm::faultHandler(regs*)+0x7a1>
c001f423:	50                   	push   eax
c001f424:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f427:	53                   	push   ebx
c001f428:	68 02 c7 02 c0       	push   0xc002c702
c001f42d:	e8 71 39 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f432:	83 c4 10             	add    esp,0x10
c001f435:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f439:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f43e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f441:	74 03                	je     c001f446 <Vm::faultHandler(regs*)+0x73f>
c001f443:	ef                   	out    dx,eax
c001f444:	eb ab                	jmp    c001f3f1 <Vm::faultHandler(regs*)+0x6ea>
c001f446:	66 ef                	out    dx,ax
c001f448:	eb a7                	jmp    c001f3f1 <Vm::faultHandler(regs*)+0x6ea>
c001f44a:	55                   	push   ebp
c001f44b:	55                   	push   ebp
c001f44c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f44f:	68 0b c7 02 c0       	push   0xc002c70b
c001f454:	e8 4a 39 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f459:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f460:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f464:	89 04 24             	mov    DWORD PTR [esp],eax
c001f467:	e8 a6 f4 ff ff       	call   c001e912 <Vm::inbv(unsigned short)>
c001f46c:	0f b6 c0             	movzx  eax,al
c001f46f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f472:	eb 31                	jmp    c001f4a5 <Vm::faultHandler(regs*)+0x79e>
c001f474:	56                   	push   esi
c001f475:	56                   	push   esi
c001f476:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f479:	68 11 c7 02 c0       	push   0xc002c711
c001f47e:	e8 20 39 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f483:	83 c4 10             	add    esp,0x10
c001f486:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f489:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f48e:	74 03                	je     c001f493 <Vm::faultHandler(regs*)+0x78c>
c001f490:	ed                   	in     eax,dx
c001f491:	eb 0d                	jmp    c001f4a0 <Vm::faultHandler(regs*)+0x799>
c001f493:	66 ed                	in     ax,dx
c001f495:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f498:	0f b7 c0             	movzx  eax,ax
c001f49b:	66 31 d2             	xor    dx,dx
c001f49e:	09 d0                	or     eax,edx
c001f4a0:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4a3:	eb 2e                	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f4a5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4a8:	83 c4 10             	add    esp,0x10
c001f4ab:	eb 29                	jmp    c001f4d6 <Vm::faultHandler(regs*)+0x7cf>
c001f4ad:	50                   	push   eax
c001f4ae:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4b1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4b4:	68 20 c7 02 c0       	push   0xc002c720
c001f4b9:	e8 e5 38 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f4be:	83 c4 10             	add    esp,0x10
c001f4c1:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f4c4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4c9:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4cc:	74 03                	je     c001f4d1 <Vm::faultHandler(regs*)+0x7ca>
c001f4ce:	ef                   	out    dx,eax
c001f4cf:	eb 02                	jmp    c001f4d3 <Vm::faultHandler(regs*)+0x7cc>
c001f4d1:	66 ef                	out    dx,ax
c001f4d3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4d6:	b0 01                	mov    al,0x1
c001f4d8:	eb 56                	jmp    c001f530 <Vm::faultHandler(regs*)+0x829>
c001f4da:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4de:	51                   	push   ecx
c001f4df:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4e3:	51                   	push   ecx
c001f4e4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4e8:	51                   	push   ecx
c001f4e9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4ed:	51                   	push   ecx
c001f4ee:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4f2:	52                   	push   edx
c001f4f3:	50                   	push   eax
c001f4f4:	50                   	push   eax
c001f4f5:	68 29 c7 02 c0       	push   0xc002c729
c001f4fa:	e8 a4 38 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c001f4ff:	83 c4 20             	add    esp,0x20
c001f502:	83 ec 0c             	sub    esp,0xc
c001f505:	6a 60                	push   0x60
c001f507:	e8 06 f4 ff ff       	call   c001e912 <Vm::inbv(unsigned short)>
c001f50c:	83 c4 10             	add    esp,0x10
c001f50f:	3c 1c                	cmp    al,0x1c
c001f511:	74 04                	je     c001f517 <Vm::faultHandler(regs*)+0x810>
c001f513:	3c 5a                	cmp    al,0x5a
c001f515:	75 eb                	jne    c001f502 <Vm::faultHandler(regs*)+0x7fb>
c001f517:	3c 1c                	cmp    al,0x1c
c001f519:	74 04                	je     c001f51f <Vm::faultHandler(regs*)+0x818>
c001f51b:	3c 5a                	cmp    al,0x5a
c001f51d:	75 0f                	jne    c001f52e <Vm::faultHandler(regs*)+0x827>
c001f51f:	83 ec 0c             	sub    esp,0xc
c001f522:	6a 60                	push   0x60
c001f524:	e8 e9 f3 ff ff       	call   c001e912 <Vm::inbv(unsigned short)>
c001f529:	83 c4 10             	add    esp,0x10
c001f52c:	eb e9                	jmp    c001f517 <Vm::faultHandler(regs*)+0x810>
c001f52e:	31 c0                	xor    eax,eax
c001f530:	83 c4 1c             	add    esp,0x1c
c001f533:	5b                   	pop    ebx
c001f534:	5e                   	pop    esi
c001f535:	5f                   	pop    edi
c001f536:	5d                   	pop    ebp
c001f537:	c3                   	ret    

c001f538 <Vm::fpuInternalTo32(unsigned long long)>:
c001f538:	57                   	push   edi
c001f539:	56                   	push   esi
c001f53a:	53                   	push   ebx
c001f53b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f543:	89 d6                	mov    esi,edx
c001f545:	89 d7                	mov    edi,edx
c001f547:	89 c1                	mov    ecx,eax
c001f549:	c1 ef 14             	shr    edi,0x14
c001f54c:	89 d3                	mov    ebx,edx
c001f54e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f554:	31 d2                	xor    edx,edx
c001f556:	89 f8                	mov    eax,edi
c001f558:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f55e:	bf ff 00 00 00       	mov    edi,0xff
c001f563:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f568:	83 d2 ff             	adc    edx,0xffffffff
c001f56b:	39 c7                	cmp    edi,eax
c001f56d:	bf 00 00 00 00       	mov    edi,0x0
c001f572:	19 d7                	sbb    edi,edx
c001f574:	72 15                	jb     c001f58b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f576:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f57a:	c1 e0 17             	shl    eax,0x17
c001f57d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f583:	09 f1                	or     ecx,esi
c001f585:	09 c1                	or     ecx,eax
c001f587:	89 cf                	mov    edi,ecx
c001f589:	eb 02                	jmp    c001f58d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f58b:	31 ff                	xor    edi,edi
c001f58d:	89 f8                	mov    eax,edi
c001f58f:	5b                   	pop    ebx
c001f590:	5e                   	pop    esi
c001f591:	5f                   	pop    edi
c001f592:	c3                   	ret    

c001f593 <Vm::fpuInternalTo64(unsigned long long)>:
c001f593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f597:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f59b:	c3                   	ret    

c001f59c <Vm::fpu32ToInternal(unsigned int)>:
c001f59c:	57                   	push   edi
c001f59d:	31 ff                	xor    edi,edi
c001f59f:	56                   	push   esi
c001f5a0:	53                   	push   ebx
c001f5a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5a5:	89 cb                	mov    ebx,ecx
c001f5a7:	89 ce                	mov    esi,ecx
c001f5a9:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f5af:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f5b5:	c1 e9 17             	shr    ecx,0x17
c001f5b8:	89 f0                	mov    eax,esi
c001f5ba:	0f b6 d1             	movzx  edx,cl
c001f5bd:	81 c2 80 03 00 00    	add    edx,0x380
c001f5c3:	89 d1                	mov    ecx,edx
c001f5c5:	89 fa                	mov    edx,edi
c001f5c7:	c1 e1 14             	shl    ecx,0x14
c001f5ca:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f5ce:	c1 e0 1d             	shl    eax,0x1d
c001f5d1:	89 d7                	mov    edi,edx
c001f5d3:	89 c6                	mov    esi,eax
c001f5d5:	89 ca                	mov    edx,ecx
c001f5d7:	89 f0                	mov    eax,esi
c001f5d9:	09 fa                	or     edx,edi
c001f5db:	09 da                	or     edx,ebx
c001f5dd:	5b                   	pop    ebx
c001f5de:	5e                   	pop    esi
c001f5df:	5f                   	pop    edi
c001f5e0:	c3                   	ret    

c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>:
c001f5e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5e9:	c3                   	ret    

c001f5ea <Vm::fpuFloatToLong(unsigned long long)>:
c001f5ea:	57                   	push   edi
c001f5eb:	31 c0                	xor    eax,eax
c001f5ed:	56                   	push   esi
c001f5ee:	31 d2                	xor    edx,edx
c001f5f0:	53                   	push   ebx
c001f5f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f5f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5f9:	89 d9                	mov    ecx,ebx
c001f5fb:	c1 e9 14             	shr    ecx,0x14
c001f5fe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f604:	89 cf                	mov    edi,ecx
c001f606:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f60c:	78 33                	js     c001f641 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f60e:	89 d9                	mov    ecx,ebx
c001f610:	89 f0                	mov    eax,esi
c001f612:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f618:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f61e:	89 ca                	mov    edx,ecx
c001f620:	b9 34 00 00 00       	mov    ecx,0x34
c001f625:	29 f9                	sub    ecx,edi
c001f627:	0f ad d0             	shrd   eax,edx,cl
c001f62a:	d3 fa                	sar    edx,cl
c001f62c:	f6 c1 20             	test   cl,0x20
c001f62f:	74 05                	je     c001f636 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f631:	89 d0                	mov    eax,edx
c001f633:	c1 fa 1f             	sar    edx,0x1f
c001f636:	85 db                	test   ebx,ebx
c001f638:	79 07                	jns    c001f641 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f63a:	f7 d8                	neg    eax
c001f63c:	83 d2 00             	adc    edx,0x0
c001f63f:	f7 da                	neg    edx
c001f641:	5b                   	pop    ebx
c001f642:	5e                   	pop    esi
c001f643:	5f                   	pop    edi
c001f644:	c3                   	ret    

c001f645 <Vm::fpuULongToFloat(unsigned long long)>:
c001f645:	57                   	push   edi
c001f646:	31 c9                	xor    ecx,ecx
c001f648:	56                   	push   esi
c001f649:	53                   	push   ebx
c001f64a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f64e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f652:	0f ba e7 14          	bt     edi,0x14
c001f656:	72 07                	jb     c001f65f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f658:	01 f6                	add    esi,esi
c001f65a:	11 ff                	adc    edi,edi
c001f65c:	41                   	inc    ecx
c001f65d:	eb f3                	jmp    c001f652 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f65f:	89 fa                	mov    edx,edi
c001f661:	89 f0                	mov    eax,esi
c001f663:	bb 33 04 00 00       	mov    ebx,0x433
c001f668:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f66e:	29 cb                	sub    ebx,ecx
c001f670:	89 d9                	mov    ecx,ebx
c001f672:	5b                   	pop    ebx
c001f673:	c1 e1 14             	shl    ecx,0x14
c001f676:	5e                   	pop    esi
c001f677:	09 ca                	or     edx,ecx
c001f679:	5f                   	pop    edi
c001f67a:	c3                   	ret    

c001f67b <Vm::fpuLongToFloat(long long)>:
c001f67b:	56                   	push   esi
c001f67c:	31 c0                	xor    eax,eax
c001f67e:	53                   	push   ebx
c001f67f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f687:	39 c8                	cmp    eax,ecx
c001f689:	19 d8                	sbb    eax,ebx
c001f68b:	7d 04                	jge    c001f691 <Vm::fpuLongToFloat(long long)+0x16>
c001f68d:	31 f6                	xor    esi,esi
c001f68f:	eb 0c                	jmp    c001f69d <Vm::fpuLongToFloat(long long)+0x22>
c001f691:	f7 d9                	neg    ecx
c001f693:	be 01 00 00 00       	mov    esi,0x1
c001f698:	83 d3 00             	adc    ebx,0x0
c001f69b:	f7 db                	neg    ebx
c001f69d:	31 c0                	xor    eax,eax
c001f69f:	0f ba e3 14          	bt     ebx,0x14
c001f6a3:	72 07                	jb     c001f6ac <Vm::fpuLongToFloat(long long)+0x31>
c001f6a5:	01 c9                	add    ecx,ecx
c001f6a7:	11 db                	adc    ebx,ebx
c001f6a9:	40                   	inc    eax
c001f6aa:	eb f3                	jmp    c001f69f <Vm::fpuLongToFloat(long long)+0x24>
c001f6ac:	ba 33 04 00 00       	mov    edx,0x433
c001f6b1:	29 c2                	sub    edx,eax
c001f6b3:	89 c8                	mov    eax,ecx
c001f6b5:	c1 e2 14             	shl    edx,0x14
c001f6b8:	89 d9                	mov    ecx,ebx
c001f6ba:	89 f3                	mov    ebx,esi
c001f6bc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6c2:	09 ca                	or     edx,ecx
c001f6c4:	84 db                	test   bl,bl
c001f6c6:	74 06                	je     c001f6ce <Vm::fpuLongToFloat(long long)+0x53>
c001f6c8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f6ce:	5b                   	pop    ebx
c001f6cf:	5e                   	pop    esi
c001f6d0:	c3                   	ret    

c001f6d1 <Vm::fpuGet0()>:
c001f6d1:	31 c0                	xor    eax,eax
c001f6d3:	31 d2                	xor    edx,edx
c001f6d5:	c3                   	ret    

c001f6d6 <Vm::fpuGet1()>:
c001f6d6:	b8 01 00 00 00       	mov    eax,0x1
c001f6db:	31 d2                	xor    edx,edx
c001f6dd:	c3                   	ret    

c001f6de <Vm::fpuGetPi()>:
c001f6de:	b8 03 00 00 00       	mov    eax,0x3
c001f6e3:	31 d2                	xor    edx,edx
c001f6e5:	c3                   	ret    

c001f6e6 <Vm::fpuGetLog2E()>:
c001f6e6:	83 ec 18             	sub    esp,0x18
c001f6e9:	68 88 c7 02 c0       	push   0xc002c788
c001f6ee:	e8 ee ad ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001f6f3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6f8:	31 d2                	xor    edx,edx
c001f6fa:	83 c4 1c             	add    esp,0x1c
c001f6fd:	c3                   	ret    

c001f6fe <Vm::fpuGetLogE2()>:
c001f6fe:	83 ec 18             	sub    esp,0x18
c001f701:	68 94 c7 02 c0       	push   0xc002c794
c001f706:	e8 d6 ad ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001f70b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f710:	31 d2                	xor    edx,edx
c001f712:	83 c4 1c             	add    esp,0x1c
c001f715:	c3                   	ret    

c001f716 <Vm::fpuGetLog210()>:
c001f716:	83 ec 18             	sub    esp,0x18
c001f719:	68 a0 c7 02 c0       	push   0xc002c7a0
c001f71e:	e8 be ad ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001f723:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f728:	31 d2                	xor    edx,edx
c001f72a:	83 c4 1c             	add    esp,0x1c
c001f72d:	c3                   	ret    

c001f72e <Vm::fpuGetLog102()>:
c001f72e:	83 ec 18             	sub    esp,0x18
c001f731:	68 ad c7 02 c0       	push   0xc002c7ad
c001f736:	e8 a6 ad ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001f73b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f740:	31 d2                	xor    edx,edx
c001f742:	83 c4 1c             	add    esp,0x1c
c001f745:	c3                   	ret    

c001f746 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f746:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f74a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f74e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f752:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f756:	0f 92 c0             	setb   al
c001f759:	c3                   	ret    

c001f75a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f75a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f762:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f766:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f76a:	09 c2                	or     edx,eax
c001f76c:	0f 94 c0             	sete   al
c001f76f:	c3                   	ret    

c001f770 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f770:	57                   	push   edi
c001f771:	56                   	push   esi
c001f772:	53                   	push   ebx
c001f773:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f777:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f77b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f77f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f783:	57                   	push   edi
c001f784:	56                   	push   esi
c001f785:	53                   	push   ebx
c001f786:	51                   	push   ecx
c001f787:	e8 ce ff ff ff       	call   c001f75a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f78c:	83 c4 10             	add    esp,0x10
c001f78f:	88 c2                	mov    dl,al
c001f791:	31 c0                	xor    eax,eax
c001f793:	84 d2                	test   dl,dl
c001f795:	75 0c                	jne    c001f7a3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f797:	57                   	push   edi
c001f798:	56                   	push   esi
c001f799:	53                   	push   ebx
c001f79a:	51                   	push   ecx
c001f79b:	e8 a6 ff ff ff       	call   c001f746 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f7a0:	83 c4 10             	add    esp,0x10
c001f7a3:	83 e0 01             	and    eax,0x1
c001f7a6:	5b                   	pop    ebx
c001f7a7:	88 c1                	mov    cl,al
c001f7a9:	83 e2 01             	and    edx,0x1
c001f7ac:	a0 21 1a 03 c0       	mov    al,ds:0xc0031a21
c001f7b1:	c1 e2 06             	shl    edx,0x6
c001f7b4:	83 e0 ba             	and    eax,0xffffffba
c001f7b7:	5e                   	pop    esi
c001f7b8:	09 c8                	or     eax,ecx
c001f7ba:	5f                   	pop    edi
c001f7bb:	09 d0                	or     eax,edx
c001f7bd:	a2 21 1a 03 c0       	mov    ds:0xc0031a21,al
c001f7c2:	c3                   	ret    

c001f7c3 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f7c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7cb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f7cf:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f7d3:	c3                   	ret    

c001f7d4 <Vm::fpuAbs(unsigned long long)>:
c001f7d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7dc:	c3                   	ret    

c001f7dd <Vm::fpuChs(unsigned long long)>:
c001f7dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7e5:	f7 d8                	neg    eax
c001f7e7:	83 d2 00             	adc    edx,0x0
c001f7ea:	f7 da                	neg    edx
c001f7ec:	c3                   	ret    

c001f7ed <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f7ed:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f7f1:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f7f6:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f7fa:	eb c7                	jmp    c001f7c3 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f7fc <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f7fc:	53                   	push   ebx
c001f7fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f801:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f805:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f809:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f80d:	0f af ca             	imul   ecx,edx
c001f810:	0f af d8             	imul   ebx,eax
c001f813:	f7 e2                	mul    edx
c001f815:	01 d9                	add    ecx,ebx
c001f817:	5b                   	pop    ebx
c001f818:	01 ca                	add    edx,ecx
c001f81a:	c3                   	ret    

c001f81b <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f81b:	83 ec 0c             	sub    esp,0xc
c001f81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f82e:	e8 71 71 00 00       	call   c00269a4 <__udivdi3>
c001f833:	83 c4 1c             	add    esp,0x1c
c001f836:	c3                   	ret    

c001f837 <Vm::fpuSquare(unsigned long long)>:
c001f837:	50                   	push   eax
c001f838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f83c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f840:	52                   	push   edx
c001f841:	50                   	push   eax
c001f842:	52                   	push   edx
c001f843:	50                   	push   eax
c001f844:	e8 b3 ff ff ff       	call   c001f7fc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f849:	83 c4 14             	add    esp,0x14
c001f84c:	c3                   	ret    

c001f84d <Vm::fpuGetReg(int)>:
c001f84d:	83 ec 0c             	sub    esp,0xc
c001f850:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f855:	76 10                	jbe    c001f867 <Vm::fpuGetReg(int)+0x1a>
c001f857:	83 ec 0c             	sub    esp,0xc
c001f85a:	68 ba c7 02 c0       	push   0xc002c7ba
c001f85f:	e8 7d ac ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001f864:	83 c4 10             	add    esp,0x10
c001f867:	a0 21 1a 03 c0       	mov    al,ds:0xc0031a21
c001f86c:	b9 08 00 00 00       	mov    ecx,0x8
c001f871:	c0 e8 03             	shr    al,0x3
c001f874:	83 e0 07             	and    eax,0x7
c001f877:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f87b:	99                   	cdq    
c001f87c:	f7 f9                	idiv   ecx
c001f87e:	8b 04 d5 24 1a 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce5dc]
c001f885:	8b 14 d5 28 1a 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce5d8]
c001f88c:	83 c4 0c             	add    esp,0xc
c001f88f:	c3                   	ret    

c001f890 <Vm::fpuSetReg(int, unsigned long long)>:
c001f890:	57                   	push   edi
c001f891:	56                   	push   esi
c001f892:	52                   	push   edx
c001f893:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f897:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f89b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f8a0:	76 10                	jbe    c001f8b2 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f8a2:	83 ec 0c             	sub    esp,0xc
c001f8a5:	68 cd c7 02 c0       	push   0xc002c7cd
c001f8aa:	e8 32 ac ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c001f8af:	83 c4 10             	add    esp,0x10
c001f8b2:	a0 21 1a 03 c0       	mov    al,ds:0xc0031a21
c001f8b7:	b9 08 00 00 00       	mov    ecx,0x8
c001f8bc:	c0 e8 03             	shr    al,0x3
c001f8bf:	83 e0 07             	and    eax,0x7
c001f8c2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f8c6:	99                   	cdq    
c001f8c7:	f7 f9                	idiv   ecx
c001f8c9:	89 34 d5 24 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce5dc],esi
c001f8d0:	89 3c d5 28 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce5d8],edi
c001f8d7:	58                   	pop    eax
c001f8d8:	5e                   	pop    esi
c001f8d9:	5f                   	pop    edi
c001f8da:	c3                   	ret    

c001f8db <Vm::fpuPush(unsigned long long)>:
c001f8db:	a0 21 1a 03 c0       	mov    al,ds:0xc0031a21
c001f8e0:	c0 e8 03             	shr    al,0x3
c001f8e3:	83 e0 07             	and    eax,0x7
c001f8e6:	83 c0 07             	add    eax,0x7
c001f8e9:	88 c2                	mov    dl,al
c001f8eb:	83 e0 07             	and    eax,0x7
c001f8ee:	83 e2 07             	and    edx,0x7
c001f8f1:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f8f8:	8a 15 21 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a21
c001f8fe:	83 e2 c7             	and    edx,0xffffffc7
c001f901:	09 ca                	or     edx,ecx
c001f903:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f907:	88 15 21 1a 03 c0    	mov    BYTE PTR ds:0xc0031a21,dl
c001f90d:	89 0c c5 28 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce5d8],ecx
c001f914:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f918:	89 14 c5 24 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce5dc],edx
c001f91f:	a1 64 1a 03 c0       	mov    eax,ds:0xc0031a64
c001f924:	83 f8 08             	cmp    eax,0x8
c001f927:	75 08                	jne    c001f931 <Vm::fpuPush(unsigned long long)+0x56>
c001f929:	80 0d 20 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a20,0x40
c001f930:	c3                   	ret    
c001f931:	40                   	inc    eax
c001f932:	a3 64 1a 03 c0       	mov    ds:0xc0031a64,eax
c001f937:	c3                   	ret    

c001f938 <Vm::fpuPop()>:
c001f938:	8a 0d 21 1a 03 c0    	mov    cl,BYTE PTR ds:0xc0031a21
c001f93e:	53                   	push   ebx
c001f93f:	c0 e9 03             	shr    cl,0x3
c001f942:	8a 1d 21 1a 03 c0    	mov    bl,BYTE PTR ds:0xc0031a21
c001f948:	83 e1 07             	and    ecx,0x7
c001f94b:	83 e3 c7             	and    ebx,0xffffffc7
c001f94e:	8b 04 cd 24 1a 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce5dc]
c001f955:	8b 14 cd 28 1a 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce5d8]
c001f95c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f963:	83 e1 38             	and    ecx,0x38
c001f966:	09 d9                	or     ecx,ebx
c001f968:	88 0d 21 1a 03 c0    	mov    BYTE PTR ds:0xc0031a21,cl
c001f96e:	8b 0d 64 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a64
c001f974:	85 c9                	test   ecx,ecx
c001f976:	74 09                	je     c001f981 <Vm::fpuPop()+0x49>
c001f978:	49                   	dec    ecx
c001f979:	89 0d 64 1a 03 c0    	mov    DWORD PTR ds:0xc0031a64,ecx
c001f97f:	eb 07                	jmp    c001f988 <Vm::fpuPop()+0x50>
c001f981:	80 0d 20 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a20,0x40
c001f988:	5b                   	pop    ebx
c001f989:	c3                   	ret    

c001f98a <Vm::x87Handler(regs*)>:
c001f98a:	55                   	push   ebp
c001f98b:	57                   	push   edi
c001f98c:	56                   	push   esi
c001f98d:	53                   	push   ebx
c001f98e:	83 ec 1c             	sub    esp,0x1c
c001f991:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f995:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f99a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f99d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f9a5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f9a9:	50                   	push   eax
c001f9aa:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f9ae:	50                   	push   eax
c001f9af:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f9b3:	50                   	push   eax
c001f9b4:	53                   	push   ebx
c001f9b5:	e8 ee a1 ff ff       	call   c0019ba8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f9ba:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f9bd:	83 c4 10             	add    esp,0x10
c001f9c0:	89 c6                	mov    esi,eax
c001f9c2:	80 fa d9             	cmp    dl,0xd9
c001f9c5:	0f 85 52 01 00 00    	jne    c001fb1d <Vm::x87Handler(regs*)+0x193>
c001f9cb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9cf:	8d 50 20             	lea    edx,[eax+0x20]
c001f9d2:	80 fa 0e             	cmp    dl,0xe
c001f9d5:	0f 87 86 00 00 00    	ja     c001fa61 <Vm::x87Handler(regs*)+0xd7>
c001f9db:	0f b6 d2             	movzx  edx,dl
c001f9de:	ff 24 95 e0 c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3820]
c001f9e5:	e8 e7 fc ff ff       	call   c001f6d1 <Vm::fpuGet0()>
c001f9ea:	eb 05                	jmp    c001f9f1 <Vm::x87Handler(regs*)+0x67>
c001f9ec:	e8 e5 fc ff ff       	call   c001f6d6 <Vm::fpuGet1()>
c001f9f1:	57                   	push   edi
c001f9f2:	57                   	push   edi
c001f9f3:	52                   	push   edx
c001f9f4:	50                   	push   eax
c001f9f5:	e8 e1 fe ff ff       	call   c001f8db <Vm::fpuPush(unsigned long long)>
c001f9fa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9fe:	83 c4 10             	add    esp,0x10
c001fa01:	b0 01                	mov    al,0x1
c001fa03:	e9 e3 09 00 00       	jmp    c00203eb <Vm::x87Handler(regs*)+0xa61>
c001fa08:	83 ec 0c             	sub    esp,0xc
c001fa0b:	6a 00                	push   0x0
c001fa0d:	e8 3b fe ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fa12:	59                   	pop    ecx
c001fa13:	5e                   	pop    esi
c001fa14:	52                   	push   edx
c001fa15:	50                   	push   eax
c001fa16:	e8 c2 fd ff ff       	call   c001f7dd <Vm::fpuChs(unsigned long long)>
c001fa1b:	eb 13                	jmp    c001fa30 <Vm::x87Handler(regs*)+0xa6>
c001fa1d:	83 ec 0c             	sub    esp,0xc
c001fa20:	6a 00                	push   0x0
c001fa22:	e8 26 fe ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fa27:	5f                   	pop    edi
c001fa28:	5d                   	pop    ebp
c001fa29:	52                   	push   edx
c001fa2a:	50                   	push   eax
c001fa2b:	e8 a4 fd ff ff       	call   c001f7d4 <Vm::fpuAbs(unsigned long long)>
c001fa30:	83 c4 0c             	add    esp,0xc
c001fa33:	52                   	push   edx
c001fa34:	50                   	push   eax
c001fa35:	6a 00                	push   0x0
c001fa37:	e8 54 fe ff ff       	call   c001f890 <Vm::fpuSetReg(int, unsigned long long)>
c001fa3c:	eb bc                	jmp    c001f9fa <Vm::x87Handler(regs*)+0x70>
c001fa3e:	e8 d3 fc ff ff       	call   c001f716 <Vm::fpuGetLog210()>
c001fa43:	eb ac                	jmp    c001f9f1 <Vm::x87Handler(regs*)+0x67>
c001fa45:	e8 9c fc ff ff       	call   c001f6e6 <Vm::fpuGetLog2E()>
c001fa4a:	eb a5                	jmp    c001f9f1 <Vm::x87Handler(regs*)+0x67>
c001fa4c:	e8 8d fc ff ff       	call   c001f6de <Vm::fpuGetPi()>
c001fa51:	eb 9e                	jmp    c001f9f1 <Vm::x87Handler(regs*)+0x67>
c001fa53:	e8 d6 fc ff ff       	call   c001f72e <Vm::fpuGetLog102()>
c001fa58:	eb 97                	jmp    c001f9f1 <Vm::x87Handler(regs*)+0x67>
c001fa5a:	e8 9f fc ff ff       	call   c001f6fe <Vm::fpuGetLogE2()>
c001fa5f:	eb 90                	jmp    c001f9f1 <Vm::x87Handler(regs*)+0x67>
c001fa61:	8d 50 40             	lea    edx,[eax+0x40]
c001fa64:	80 fa 07             	cmp    dl,0x7
c001fa67:	77 15                	ja     c001fa7e <Vm::x87Handler(regs*)+0xf4>
c001fa69:	83 ec 0c             	sub    esp,0xc
c001fa6c:	2d c0 00 00 00       	sub    eax,0xc0
c001fa71:	50                   	push   eax
c001fa72:	e8 d6 fd ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fa77:	59                   	pop    ecx
c001fa78:	5e                   	pop    esi
c001fa79:	e9 75 ff ff ff       	jmp    c001f9f3 <Vm::x87Handler(regs*)+0x69>
c001fa7e:	8d 50 38             	lea    edx,[eax+0x38]
c001fa81:	80 fa 07             	cmp    dl,0x7
c001fa84:	77 3c                	ja     c001fac2 <Vm::x87Handler(regs*)+0x138>
c001fa86:	83 ec 0c             	sub    esp,0xc
c001fa89:	2d c8 00 00 00       	sub    eax,0xc8
c001fa8e:	50                   	push   eax
c001fa8f:	e8 b9 fd ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fa94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa9b:	89 c6                	mov    esi,eax
c001fa9d:	89 d7                	mov    edi,edx
c001fa9f:	e8 a9 fd ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001faa4:	83 c4 0c             	add    esp,0xc
c001faa7:	52                   	push   edx
c001faa8:	50                   	push   eax
c001faa9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faad:	2d c8 00 00 00       	sub    eax,0xc8
c001fab2:	50                   	push   eax
c001fab3:	e8 d8 fd ff ff       	call   c001f890 <Vm::fpuSetReg(int, unsigned long long)>
c001fab8:	83 c4 0c             	add    esp,0xc
c001fabb:	57                   	push   edi
c001fabc:	56                   	push   esi
c001fabd:	e9 73 ff ff ff       	jmp    c001fa35 <Vm::x87Handler(regs*)+0xab>
c001fac2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fac6:	84 d2                	test   dl,dl
c001fac8:	75 0f                	jne    c001fad9 <Vm::x87Handler(regs*)+0x14f>
c001faca:	83 ec 0c             	sub    esp,0xc
c001facd:	ff 36                	push   DWORD PTR [esi]
c001facf:	e8 c8 fa ff ff       	call   c001f59c <Vm::fpu32ToInternal(unsigned int)>
c001fad4:	e9 bf 00 00 00       	jmp    c001fb98 <Vm::x87Handler(regs*)+0x20e>
c001fad9:	80 fa 03             	cmp    dl,0x3
c001fadc:	75 13                	jne    c001faf1 <Vm::x87Handler(regs*)+0x167>
c001fade:	e8 55 fe ff ff       	call   c001f938 <Vm::fpuPop()>
c001fae3:	55                   	push   ebp
c001fae4:	55                   	push   ebp
c001fae5:	52                   	push   edx
c001fae6:	50                   	push   eax
c001fae7:	e8 4c fa ff ff       	call   c001f538 <Vm::fpuInternalTo32(unsigned long long)>
c001faec:	e9 88 00 00 00       	jmp    c001fb79 <Vm::x87Handler(regs*)+0x1ef>
c001faf1:	80 fa 05             	cmp    dl,0x5
c001faf4:	75 0e                	jne    c001fb04 <Vm::x87Handler(regs*)+0x17a>
c001faf6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001faf9:	66 a3 22 1a 03 c0    	mov    ds:0xc0031a22,ax
c001faff:	e9 df 00 00 00       	jmp    c001fbe3 <Vm::x87Handler(regs*)+0x259>
c001fb04:	31 c0                	xor    eax,eax
c001fb06:	80 fa 07             	cmp    dl,0x7
c001fb09:	0f 85 dc 08 00 00    	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c001fb0f:	66 a1 22 1a 03 c0    	mov    ax,ds:0xc0031a22
c001fb15:	66 89 06             	mov    WORD PTR [esi],ax
c001fb18:	e9 c6 00 00 00       	jmp    c001fbe3 <Vm::x87Handler(regs*)+0x259>
c001fb1d:	80 fa d8             	cmp    dl,0xd8
c001fb20:	0f 84 c9 00 00 00    	je     c001fbef <Vm::x87Handler(regs*)+0x265>
c001fb26:	80 fa dc             	cmp    dl,0xdc
c001fb29:	0f 84 0d 02 00 00    	je     c001fd3c <Vm::x87Handler(regs*)+0x3b2>
c001fb2f:	80 fa de             	cmp    dl,0xde
c001fb32:	0f 84 cd 02 00 00    	je     c001fe05 <Vm::x87Handler(regs*)+0x47b>
c001fb38:	80 fa dd             	cmp    dl,0xdd
c001fb3b:	0f 84 5f 04 00 00    	je     c001ffa0 <Vm::x87Handler(regs*)+0x616>
c001fb41:	80 fa da             	cmp    dl,0xda
c001fb44:	0f 84 24 05 00 00    	je     c002006e <Vm::x87Handler(regs*)+0x6e4>
c001fb4a:	80 fa df             	cmp    dl,0xdf
c001fb4d:	0f 84 68 05 00 00    	je     c00200bb <Vm::x87Handler(regs*)+0x731>
c001fb53:	31 c0                	xor    eax,eax
c001fb55:	80 fa db             	cmp    dl,0xdb
c001fb58:	0f 85 8d 08 00 00    	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c001fb5e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb62:	80 fa 03             	cmp    dl,0x3
c001fb65:	0f 85 70 06 00 00    	jne    c00201db <Vm::x87Handler(regs*)+0x851>
c001fb6b:	e8 c8 fd ff ff       	call   c001f938 <Vm::fpuPop()>
c001fb70:	55                   	push   ebp
c001fb71:	55                   	push   ebp
c001fb72:	52                   	push   edx
c001fb73:	50                   	push   eax
c001fb74:	e8 71 fa ff ff       	call   c001f5ea <Vm::fpuFloatToLong(unsigned long long)>
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	89 06                	mov    DWORD PTR [esi],eax
c001fb7e:	eb 63                	jmp    c001fbe3 <Vm::x87Handler(regs*)+0x259>
c001fb80:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb84:	84 d2                	test   dl,dl
c001fb86:	0f 85 e6 05 00 00    	jne    c0020172 <Vm::x87Handler(regs*)+0x7e8>
c001fb8c:	57                   	push   edi
c001fb8d:	57                   	push   edi
c001fb8e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb91:	ff 36                	push   DWORD PTR [esi]
c001fb93:	e8 49 fa ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c001fb98:	5e                   	pop    esi
c001fb99:	5f                   	pop    edi
c001fb9a:	52                   	push   edx
c001fb9b:	50                   	push   eax
c001fb9c:	e8 3a fd ff ff       	call   c001f8db <Vm::fpuPush(unsigned long long)>
c001fba1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fba5:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fba8:	e9 51 fe ff ff       	jmp    c001f9fe <Vm::x87Handler(regs*)+0x74>
c001fbad:	80 fa 03             	cmp    dl,0x3
c001fbb0:	0f 85 d7 06 00 00    	jne    c002028d <Vm::x87Handler(regs*)+0x903>
c001fbb6:	57                   	push   edi
c001fbb7:	57                   	push   edi
c001fbb8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbbb:	ff 36                	push   DWORD PTR [esi]
c001fbbd:	e8 1f fa ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c001fbc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc9:	89 c6                	mov    esi,eax
c001fbcb:	89 d7                	mov    edi,edx
c001fbcd:	e8 7b fc ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fbd2:	57                   	push   edi
c001fbd3:	56                   	push   esi
c001fbd4:	52                   	push   edx
c001fbd5:	50                   	push   eax
c001fbd6:	e8 95 fb ff ff       	call   c001f770 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbdb:	83 c4 20             	add    esp,0x20
c001fbde:	e8 55 fd ff ff       	call   c001f938 <Vm::fpuPop()>
c001fbe3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbe7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fbea:	e9 12 fe ff ff       	jmp    c001fa01 <Vm::x87Handler(regs*)+0x77>
c001fbef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbf3:	8d 50 40             	lea    edx,[eax+0x40]
c001fbf6:	80 fa 07             	cmp    dl,0x7
c001fbf9:	77 29                	ja     c001fc24 <Vm::x87Handler(regs*)+0x29a>
c001fbfb:	83 ec 0c             	sub    esp,0xc
c001fbfe:	2d c0 00 00 00       	sub    eax,0xc0
c001fc03:	50                   	push   eax
c001fc04:	e8 44 fc ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fc09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc10:	89 c6                	mov    esi,eax
c001fc12:	89 d7                	mov    edi,edx
c001fc14:	e8 34 fc ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fc19:	57                   	push   edi
c001fc1a:	56                   	push   esi
c001fc1b:	52                   	push   edx
c001fc1c:	50                   	push   eax
c001fc1d:	e8 a1 fb ff ff       	call   c001f7c3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc22:	eb 2f                	jmp    c001fc53 <Vm::x87Handler(regs*)+0x2c9>
c001fc24:	8d 50 38             	lea    edx,[eax+0x38]
c001fc27:	80 fa 07             	cmp    dl,0x7
c001fc2a:	77 2f                	ja     c001fc5b <Vm::x87Handler(regs*)+0x2d1>
c001fc2c:	83 ec 0c             	sub    esp,0xc
c001fc2f:	2d c8 00 00 00       	sub    eax,0xc8
c001fc34:	50                   	push   eax
c001fc35:	e8 13 fc ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fc3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc41:	89 c6                	mov    esi,eax
c001fc43:	89 d7                	mov    edi,edx
c001fc45:	e8 03 fc ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fc4a:	57                   	push   edi
c001fc4b:	56                   	push   esi
c001fc4c:	52                   	push   edx
c001fc4d:	50                   	push   eax
c001fc4e:	e8 a9 fb ff ff       	call   c001f7fc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc53:	83 c4 1c             	add    esp,0x1c
c001fc56:	e9 d8 fd ff ff       	jmp    c001fa33 <Vm::x87Handler(regs*)+0xa9>
c001fc5b:	8d 50 30             	lea    edx,[eax+0x30]
c001fc5e:	80 fa 07             	cmp    dl,0x7
c001fc61:	77 0d                	ja     c001fc70 <Vm::x87Handler(regs*)+0x2e6>
c001fc63:	83 ec 0c             	sub    esp,0xc
c001fc66:	2d d0 00 00 00       	sub    eax,0xd0
c001fc6b:	e9 99 03 00 00       	jmp    c0020009 <Vm::x87Handler(regs*)+0x67f>
c001fc70:	8d 50 28             	lea    edx,[eax+0x28]
c001fc73:	80 fa 07             	cmp    dl,0x7
c001fc76:	77 0d                	ja     c001fc85 <Vm::x87Handler(regs*)+0x2fb>
c001fc78:	83 ec 0c             	sub    esp,0xc
c001fc7b:	2d d8 00 00 00       	sub    eax,0xd8
c001fc80:	e9 c0 03 00 00       	jmp    c0020045 <Vm::x87Handler(regs*)+0x6bb>
c001fc85:	8d 50 20             	lea    edx,[eax+0x20]
c001fc88:	80 fa 07             	cmp    dl,0x7
c001fc8b:	77 1b                	ja     c001fca8 <Vm::x87Handler(regs*)+0x31e>
c001fc8d:	83 ec 0c             	sub    esp,0xc
c001fc90:	2d e0 00 00 00       	sub    eax,0xe0
c001fc95:	50                   	push   eax
c001fc96:	e8 b2 fb ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fc9b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca2:	89 c6                	mov    esi,eax
c001fca4:	89 d7                	mov    edi,edx
c001fca6:	eb 22                	jmp    c001fcca <Vm::x87Handler(regs*)+0x340>
c001fca8:	8d 50 18             	lea    edx,[eax+0x18]
c001fcab:	80 fa 07             	cmp    dl,0x7
c001fcae:	77 2d                	ja     c001fcdd <Vm::x87Handler(regs*)+0x353>
c001fcb0:	83 ec 0c             	sub    esp,0xc
c001fcb3:	6a 00                	push   0x0
c001fcb5:	e8 93 fb ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fcba:	89 c6                	mov    esi,eax
c001fcbc:	89 d7                	mov    edi,edx
c001fcbe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc2:	2d e8 00 00 00       	sub    eax,0xe8
c001fcc7:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcca:	e8 7e fb ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fccf:	57                   	push   edi
c001fcd0:	56                   	push   esi
c001fcd1:	52                   	push   edx
c001fcd2:	50                   	push   eax
c001fcd3:	e8 15 fb ff ff       	call   c001f7ed <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcd8:	e9 76 ff ff ff       	jmp    c001fc53 <Vm::x87Handler(regs*)+0x2c9>
c001fcdd:	8d 50 10             	lea    edx,[eax+0x10]
c001fce0:	80 fa 07             	cmp    dl,0x7
c001fce3:	77 1b                	ja     c001fd00 <Vm::x87Handler(regs*)+0x376>
c001fce5:	83 ec 0c             	sub    esp,0xc
c001fce8:	2d f0 00 00 00       	sub    eax,0xf0
c001fced:	50                   	push   eax
c001fcee:	e8 5a fb ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fcf3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcfa:	89 c6                	mov    esi,eax
c001fcfc:	89 d7                	mov    edi,edx
c001fcfe:	eb 22                	jmp    c001fd22 <Vm::x87Handler(regs*)+0x398>
c001fd00:	3c f7                	cmp    al,0xf7
c001fd02:	0f 86 d1 03 00 00    	jbe    c00200d9 <Vm::x87Handler(regs*)+0x74f>
c001fd08:	83 ec 0c             	sub    esp,0xc
c001fd0b:	6a 00                	push   0x0
c001fd0d:	e8 3b fb ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fd12:	89 c6                	mov    esi,eax
c001fd14:	89 d7                	mov    edi,edx
c001fd16:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd1a:	2d f8 00 00 00       	sub    eax,0xf8
c001fd1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd22:	e8 26 fb ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fd27:	57                   	push   edi
c001fd28:	56                   	push   esi
c001fd29:	52                   	push   edx
c001fd2a:	50                   	push   eax
c001fd2b:	e8 eb fa ff ff       	call   c001f81b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd30:	83 c4 1c             	add    esp,0x1c
c001fd33:	52                   	push   edx
c001fd34:	50                   	push   eax
c001fd35:	6a 00                	push   0x0
c001fd37:	e9 51 02 00 00       	jmp    c001ff8d <Vm::x87Handler(regs*)+0x603>
c001fd3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd40:	8d 50 40             	lea    edx,[eax+0x40]
c001fd43:	80 fa 07             	cmp    dl,0x7
c001fd46:	77 37                	ja     c001fd7f <Vm::x87Handler(regs*)+0x3f5>
c001fd48:	83 ec 0c             	sub    esp,0xc
c001fd4b:	2d c0 00 00 00       	sub    eax,0xc0
c001fd50:	50                   	push   eax
c001fd51:	e8 f7 fa ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fd56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd5d:	89 c6                	mov    esi,eax
c001fd5f:	89 d7                	mov    edi,edx
c001fd61:	e8 e7 fa ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fd66:	57                   	push   edi
c001fd67:	56                   	push   esi
c001fd68:	52                   	push   edx
c001fd69:	50                   	push   eax
c001fd6a:	e8 54 fa ff ff       	call   c001f7c3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd6f:	83 c4 1c             	add    esp,0x1c
c001fd72:	52                   	push   edx
c001fd73:	50                   	push   eax
c001fd74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd78:	2d c0 00 00 00       	sub    eax,0xc0
c001fd7d:	eb 3d                	jmp    c001fdbc <Vm::x87Handler(regs*)+0x432>
c001fd7f:	8d 50 38             	lea    edx,[eax+0x38]
c001fd82:	80 fa 07             	cmp    dl,0x7
c001fd85:	77 3b                	ja     c001fdc2 <Vm::x87Handler(regs*)+0x438>
c001fd87:	83 ec 0c             	sub    esp,0xc
c001fd8a:	2d c8 00 00 00       	sub    eax,0xc8
c001fd8f:	50                   	push   eax
c001fd90:	e8 b8 fa ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fd95:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd9c:	89 c6                	mov    esi,eax
c001fd9e:	89 d7                	mov    edi,edx
c001fda0:	e8 a8 fa ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fda5:	57                   	push   edi
c001fda6:	56                   	push   esi
c001fda7:	52                   	push   edx
c001fda8:	50                   	push   eax
c001fda9:	e8 4e fa ff ff       	call   c001f7fc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdae:	83 c4 1c             	add    esp,0x1c
c001fdb1:	52                   	push   edx
c001fdb2:	50                   	push   eax
c001fdb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb7:	2d c8 00 00 00       	sub    eax,0xc8
c001fdbc:	50                   	push   eax
c001fdbd:	e9 75 fc ff ff       	jmp    c001fa37 <Vm::x87Handler(regs*)+0xad>
c001fdc2:	83 c0 18             	add    eax,0x18
c001fdc5:	3c 07                	cmp    al,0x7
c001fdc7:	0f 87 3b 04 00 00    	ja     c0020208 <Vm::x87Handler(regs*)+0x87e>
c001fdcd:	83 ec 0c             	sub    esp,0xc
c001fdd0:	6a 00                	push   0x0
c001fdd2:	e8 76 fa ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fdd7:	89 c6                	mov    esi,eax
c001fdd9:	89 d7                	mov    edi,edx
c001fddb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fddf:	2d e8 00 00 00       	sub    eax,0xe8
c001fde4:	89 04 24             	mov    DWORD PTR [esp],eax
c001fde7:	e8 61 fa ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fdec:	57                   	push   edi
c001fded:	56                   	push   esi
c001fdee:	52                   	push   edx
c001fdef:	50                   	push   eax
c001fdf0:	e8 f8 f9 ff ff       	call   c001f7ed <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdf5:	83 c4 1c             	add    esp,0x1c
c001fdf8:	52                   	push   edx
c001fdf9:	50                   	push   eax
c001fdfa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdfe:	2d e8 00 00 00       	sub    eax,0xe8
c001fe03:	eb b7                	jmp    c001fdbc <Vm::x87Handler(regs*)+0x432>
c001fe05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe09:	8d 50 40             	lea    edx,[eax+0x40]
c001fe0c:	80 fa 07             	cmp    dl,0x7
c001fe0f:	77 3a                	ja     c001fe4b <Vm::x87Handler(regs*)+0x4c1>
c001fe11:	83 ec 0c             	sub    esp,0xc
c001fe14:	2d c0 00 00 00       	sub    eax,0xc0
c001fe19:	50                   	push   eax
c001fe1a:	e8 2e fa ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fe1f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe26:	89 c6                	mov    esi,eax
c001fe28:	89 d7                	mov    edi,edx
c001fe2a:	e8 1e fa ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fe2f:	57                   	push   edi
c001fe30:	56                   	push   esi
c001fe31:	52                   	push   edx
c001fe32:	50                   	push   eax
c001fe33:	e8 8b f9 ff ff       	call   c001f7c3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe38:	83 c4 1c             	add    esp,0x1c
c001fe3b:	52                   	push   edx
c001fe3c:	50                   	push   eax
c001fe3d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe41:	2d c0 00 00 00       	sub    eax,0xc0
c001fe46:	e9 9e 01 00 00       	jmp    c001ffe9 <Vm::x87Handler(regs*)+0x65f>
c001fe4b:	8d 50 20             	lea    edx,[eax+0x20]
c001fe4e:	80 fa 07             	cmp    dl,0x7
c001fe51:	77 3a                	ja     c001fe8d <Vm::x87Handler(regs*)+0x503>
c001fe53:	83 ec 0c             	sub    esp,0xc
c001fe56:	2d e0 00 00 00       	sub    eax,0xe0
c001fe5b:	50                   	push   eax
c001fe5c:	e8 ec f9 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fe61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe68:	89 c6                	mov    esi,eax
c001fe6a:	89 d7                	mov    edi,edx
c001fe6c:	e8 dc f9 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fe71:	57                   	push   edi
c001fe72:	56                   	push   esi
c001fe73:	52                   	push   edx
c001fe74:	50                   	push   eax
c001fe75:	e8 73 f9 ff ff       	call   c001f7ed <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe7a:	83 c4 1c             	add    esp,0x1c
c001fe7d:	52                   	push   edx
c001fe7e:	50                   	push   eax
c001fe7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe83:	2d e0 00 00 00       	sub    eax,0xe0
c001fe88:	e9 5c 01 00 00       	jmp    c001ffe9 <Vm::x87Handler(regs*)+0x65f>
c001fe8d:	8d 50 18             	lea    edx,[eax+0x18]
c001fe90:	80 fa 07             	cmp    dl,0x7
c001fe93:	77 3b                	ja     c001fed0 <Vm::x87Handler(regs*)+0x546>
c001fe95:	83 ec 0c             	sub    esp,0xc
c001fe98:	6a 00                	push   0x0
c001fe9a:	e8 ae f9 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fe9f:	89 c6                	mov    esi,eax
c001fea1:	89 d7                	mov    edi,edx
c001fea3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea7:	2d e8 00 00 00       	sub    eax,0xe8
c001feac:	89 04 24             	mov    DWORD PTR [esp],eax
c001feaf:	e8 99 f9 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001feb4:	57                   	push   edi
c001feb5:	56                   	push   esi
c001feb6:	52                   	push   edx
c001feb7:	50                   	push   eax
c001feb8:	e8 30 f9 ff ff       	call   c001f7ed <Vm::fpuSub(unsigned long long, unsigned long long)>
c001febd:	83 c4 1c             	add    esp,0x1c
c001fec0:	52                   	push   edx
c001fec1:	50                   	push   eax
c001fec2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec6:	2d e8 00 00 00       	sub    eax,0xe8
c001fecb:	e9 19 01 00 00       	jmp    c001ffe9 <Vm::x87Handler(regs*)+0x65f>
c001fed0:	8d 50 38             	lea    edx,[eax+0x38]
c001fed3:	80 fa 07             	cmp    dl,0x7
c001fed6:	77 37                	ja     c001ff0f <Vm::x87Handler(regs*)+0x585>
c001fed8:	83 ec 0c             	sub    esp,0xc
c001fedb:	2d c8 00 00 00       	sub    eax,0xc8
c001fee0:	50                   	push   eax
c001fee1:	e8 67 f9 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fee6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feed:	89 c6                	mov    esi,eax
c001feef:	89 d7                	mov    edi,edx
c001fef1:	e8 57 f9 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001fef6:	57                   	push   edi
c001fef7:	56                   	push   esi
c001fef8:	52                   	push   edx
c001fef9:	50                   	push   eax
c001fefa:	e8 fd f8 ff ff       	call   c001f7fc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feff:	83 c4 1c             	add    esp,0x1c
c001ff02:	52                   	push   edx
c001ff03:	50                   	push   eax
c001ff04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff08:	2d c8 00 00 00       	sub    eax,0xc8
c001ff0d:	eb 7d                	jmp    c001ff8c <Vm::x87Handler(regs*)+0x602>
c001ff0f:	3c f7                	cmp    al,0xf7
c001ff11:	76 38                	jbe    c001ff4b <Vm::x87Handler(regs*)+0x5c1>
c001ff13:	83 ec 0c             	sub    esp,0xc
c001ff16:	6a 00                	push   0x0
c001ff18:	e8 30 f9 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001ff1d:	89 c6                	mov    esi,eax
c001ff1f:	89 d7                	mov    edi,edx
c001ff21:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff25:	2d f8 00 00 00       	sub    eax,0xf8
c001ff2a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff2d:	e8 1b f9 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001ff32:	57                   	push   edi
c001ff33:	56                   	push   esi
c001ff34:	52                   	push   edx
c001ff35:	50                   	push   eax
c001ff36:	e8 e0 f8 ff ff       	call   c001f81b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff3b:	83 c4 1c             	add    esp,0x1c
c001ff3e:	52                   	push   edx
c001ff3f:	50                   	push   eax
c001ff40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff44:	2d f8 00 00 00       	sub    eax,0xf8
c001ff49:	eb 41                	jmp    c001ff8c <Vm::x87Handler(regs*)+0x602>
c001ff4b:	8d 50 10             	lea    edx,[eax+0x10]
c001ff4e:	80 fa 07             	cmp    dl,0x7
c001ff51:	0f 87 5a 01 00 00    	ja     c00200b1 <Vm::x87Handler(regs*)+0x727>
c001ff57:	83 ec 0c             	sub    esp,0xc
c001ff5a:	2d f0 00 00 00       	sub    eax,0xf0
c001ff5f:	50                   	push   eax
c001ff60:	e8 e8 f8 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001ff65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff6c:	89 c6                	mov    esi,eax
c001ff6e:	89 d7                	mov    edi,edx
c001ff70:	e8 d8 f8 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001ff75:	57                   	push   edi
c001ff76:	56                   	push   esi
c001ff77:	52                   	push   edx
c001ff78:	50                   	push   eax
c001ff79:	e8 9d f8 ff ff       	call   c001f81b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff7e:	83 c4 1c             	add    esp,0x1c
c001ff81:	52                   	push   edx
c001ff82:	50                   	push   eax
c001ff83:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff87:	2d f0 00 00 00       	sub    eax,0xf0
c001ff8c:	50                   	push   eax
c001ff8d:	e8 fe f8 ff ff       	call   c001f890 <Vm::fpuSetReg(int, unsigned long long)>
c001ff92:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff96:	e8 9d f9 ff ff       	call   c001f938 <Vm::fpuPop()>
c001ff9b:	e9 5e fa ff ff       	jmp    c001f9fe <Vm::x87Handler(regs*)+0x74>
c001ffa0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa4:	8d 50 30             	lea    edx,[eax+0x30]
c001ffa7:	80 fa 07             	cmp    dl,0x7
c001ffaa:	77 1d                	ja     c001ffc9 <Vm::x87Handler(regs*)+0x63f>
c001ffac:	83 ec 0c             	sub    esp,0xc
c001ffaf:	6a 00                	push   0x0
c001ffb1:	e8 97 f8 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001ffb6:	83 c4 0c             	add    esp,0xc
c001ffb9:	52                   	push   edx
c001ffba:	50                   	push   eax
c001ffbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffbf:	2d d0 00 00 00       	sub    eax,0xd0
c001ffc4:	e9 f3 fd ff ff       	jmp    c001fdbc <Vm::x87Handler(regs*)+0x432>
c001ffc9:	8d 50 28             	lea    edx,[eax+0x28]
c001ffcc:	80 fa 07             	cmp    dl,0x7
c001ffcf:	77 28                	ja     c001fff9 <Vm::x87Handler(regs*)+0x66f>
c001ffd1:	83 ec 0c             	sub    esp,0xc
c001ffd4:	6a 00                	push   0x0
c001ffd6:	e8 72 f8 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c001ffdb:	83 c4 0c             	add    esp,0xc
c001ffde:	52                   	push   edx
c001ffdf:	50                   	push   eax
c001ffe0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe4:	2d d8 00 00 00       	sub    eax,0xd8
c001ffe9:	50                   	push   eax
c001ffea:	e8 a1 f8 ff ff       	call   c001f890 <Vm::fpuSetReg(int, unsigned long long)>
c001ffef:	e8 44 f9 ff ff       	call   c001f938 <Vm::fpuPop()>
c001fff4:	e9 01 fa ff ff       	jmp    c001f9fa <Vm::x87Handler(regs*)+0x70>
c001fff9:	8d 50 20             	lea    edx,[eax+0x20]
c001fffc:	80 fa 07             	cmp    dl,0x7
c001ffff:	77 30                	ja     c0020031 <Vm::x87Handler(regs*)+0x6a7>
c0020001:	83 ec 0c             	sub    esp,0xc
c0020004:	2d e0 00 00 00       	sub    eax,0xe0
c0020009:	50                   	push   eax
c002000a:	e8 3e f8 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c002000f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020016:	89 c6                	mov    esi,eax
c0020018:	89 d7                	mov    edi,edx
c002001a:	e8 2e f8 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c002001f:	57                   	push   edi
c0020020:	56                   	push   esi
c0020021:	52                   	push   edx
c0020022:	50                   	push   eax
c0020023:	e8 48 f7 ff ff       	call   c001f770 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020028:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002002c:	e9 54 02 00 00       	jmp    c0020285 <Vm::x87Handler(regs*)+0x8fb>
c0020031:	8d 50 18             	lea    edx,[eax+0x18]
c0020034:	80 fa 07             	cmp    dl,0x7
c0020037:	0f 87 43 fb ff ff    	ja     c001fb80 <Vm::x87Handler(regs*)+0x1f6>
c002003d:	83 ec 0c             	sub    esp,0xc
c0020040:	2d e8 00 00 00       	sub    eax,0xe8
c0020045:	50                   	push   eax
c0020046:	e8 02 f8 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c002004b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020052:	89 c6                	mov    esi,eax
c0020054:	89 d7                	mov    edi,edx
c0020056:	e8 f2 f7 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c002005b:	57                   	push   edi
c002005c:	56                   	push   esi
c002005d:	52                   	push   edx
c002005e:	50                   	push   eax
c002005f:	e8 0c f7 ff ff       	call   c001f770 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020064:	83 c4 20             	add    esp,0x20
c0020067:	e8 cc f8 ff ff       	call   c001f938 <Vm::fpuPop()>
c002006c:	eb 62                	jmp    c00200d0 <Vm::x87Handler(regs*)+0x746>
c002006e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020072:	0f 85 0f 01 00 00    	jne    c0020187 <Vm::x87Handler(regs*)+0x7fd>
c0020078:	83 ec 0c             	sub    esp,0xc
c002007b:	6a 01                	push   0x1
c002007d:	e8 cb f7 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c0020082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020089:	89 c6                	mov    esi,eax
c002008b:	89 d7                	mov    edi,edx
c002008d:	e8 bb f7 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c0020092:	57                   	push   edi
c0020093:	56                   	push   esi
c0020094:	52                   	push   edx
c0020095:	50                   	push   eax
c0020096:	e8 d5 f6 ff ff       	call   c001f770 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002009b:	83 c4 20             	add    esp,0x20
c002009e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200a2:	e8 91 f8 ff ff       	call   c001f938 <Vm::fpuPop()>
c00200a7:	e8 8c f8 ff ff       	call   c001f938 <Vm::fpuPop()>
c00200ac:	e9 50 f9 ff ff       	jmp    c001fa01 <Vm::x87Handler(regs*)+0x77>
c00200b1:	3c d9                	cmp    al,0xd9
c00200b3:	0f 85 b5 02 00 00    	jne    c002036e <Vm::x87Handler(regs*)+0x9e4>
c00200b9:	eb bd                	jmp    c0020078 <Vm::x87Handler(regs*)+0x6ee>
c00200bb:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00200bf:	0f 85 ea 02 00 00    	jne    c00203af <Vm::x87Handler(regs*)+0xa25>
c00200c5:	0f b7 05 20 1a 03 c0 	movzx  eax,WORD PTR ds:0xc0031a20
c00200cc:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00200d0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200d4:	e9 28 f9 ff ff       	jmp    c001fa01 <Vm::x87Handler(regs*)+0x77>
c00200d9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200dd:	84 d2                	test   dl,dl
c00200df:	75 0f                	jne    c00200f0 <Vm::x87Handler(regs*)+0x766>
c00200e1:	83 ec 0c             	sub    esp,0xc
c00200e4:	ff 36                	push   DWORD PTR [esi]
c00200e6:	e8 b1 f4 ff ff       	call   c001f59c <Vm::fpu32ToInternal(unsigned int)>
c00200eb:	e9 2c 01 00 00       	jmp    c002021c <Vm::x87Handler(regs*)+0x892>
c00200f0:	80 fa 01             	cmp    dl,0x1
c00200f3:	75 0f                	jne    c0020104 <Vm::x87Handler(regs*)+0x77a>
c00200f5:	83 ec 0c             	sub    esp,0xc
c00200f8:	ff 36                	push   DWORD PTR [esi]
c00200fa:	e8 9d f4 ff ff       	call   c001f59c <Vm::fpu32ToInternal(unsigned int)>
c00200ff:	e9 81 02 00 00       	jmp    c0020385 <Vm::x87Handler(regs*)+0x9fb>
c0020104:	80 fa 04             	cmp    dl,0x4
c0020107:	75 0f                	jne    c0020118 <Vm::x87Handler(regs*)+0x78e>
c0020109:	83 ec 0c             	sub    esp,0xc
c002010c:	ff 36                	push   DWORD PTR [esi]
c002010e:	e8 89 f4 ff ff       	call   c001f59c <Vm::fpu32ToInternal(unsigned int)>
c0020113:	e9 86 01 00 00       	jmp    c002029e <Vm::x87Handler(regs*)+0x914>
c0020118:	80 fa 05             	cmp    dl,0x5
c002011b:	75 1b                	jne    c0020138 <Vm::x87Handler(regs*)+0x7ae>
c002011d:	83 ec 0c             	sub    esp,0xc
c0020120:	6a 00                	push   0x0
c0020122:	e8 26 f7 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c0020127:	89 c7                	mov    edi,eax
c0020129:	89 d5                	mov    ebp,edx
c002012b:	58                   	pop    eax
c002012c:	ff 36                	push   DWORD PTR [esi]
c002012e:	e8 69 f4 ff ff       	call   c001f59c <Vm::fpu32ToInternal(unsigned int)>
c0020133:	e9 a3 01 00 00       	jmp    c00202db <Vm::x87Handler(regs*)+0x951>
c0020138:	80 fa 06             	cmp    dl,0x6
c002013b:	75 0f                	jne    c002014c <Vm::x87Handler(regs*)+0x7c2>
c002013d:	83 ec 0c             	sub    esp,0xc
c0020140:	ff 36                	push   DWORD PTR [esi]
c0020142:	e8 55 f4 ff ff       	call   c001f59c <Vm::fpu32ToInternal(unsigned int)>
c0020147:	e9 ae 01 00 00       	jmp    c00202fa <Vm::x87Handler(regs*)+0x970>
c002014c:	31 c0                	xor    eax,eax
c002014e:	80 fa 07             	cmp    dl,0x7
c0020151:	0f 85 94 02 00 00    	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c0020157:	83 ec 0c             	sub    esp,0xc
c002015a:	6a 00                	push   0x0
c002015c:	e8 ec f6 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c0020161:	89 c7                	mov    edi,eax
c0020163:	89 d5                	mov    ebp,edx
c0020165:	58                   	pop    eax
c0020166:	ff 36                	push   DWORD PTR [esi]
c0020168:	e8 2f f4 ff ff       	call   c001f59c <Vm::fpu32ToInternal(unsigned int)>
c002016d:	e9 cb 01 00 00       	jmp    c002033d <Vm::x87Handler(regs*)+0x9b3>
c0020172:	80 fa 03             	cmp    dl,0x3
c0020175:	0f 85 d3 01 00 00    	jne    c002034e <Vm::x87Handler(regs*)+0x9c4>
c002017b:	e8 b8 f7 ff ff       	call   c001f938 <Vm::fpuPop()>
c0020180:	51                   	push   ecx
c0020181:	51                   	push   ecx
c0020182:	e9 de 01 00 00       	jmp    c0020365 <Vm::x87Handler(regs*)+0x9db>
c0020187:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002018b:	80 fa 01             	cmp    dl,0x1
c002018e:	75 09                	jne    c0020199 <Vm::x87Handler(regs*)+0x80f>
c0020190:	57                   	push   edi
c0020191:	57                   	push   edi
c0020192:	8b 06                	mov    eax,DWORD PTR [esi]
c0020194:	e9 e3 01 00 00       	jmp    c002037c <Vm::x87Handler(regs*)+0x9f2>
c0020199:	80 fa 04             	cmp    dl,0x4
c002019c:	75 12                	jne    c00201b0 <Vm::x87Handler(regs*)+0x826>
c002019e:	31 d2                	xor    edx,edx
c00201a0:	51                   	push   ecx
c00201a1:	51                   	push   ecx
c00201a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00201a4:	52                   	push   edx
c00201a5:	50                   	push   eax
c00201a6:	e8 d0 f4 ff ff       	call   c001f67b <Vm::fpuLongToFloat(long long)>
c00201ab:	e9 ee 00 00 00       	jmp    c002029e <Vm::x87Handler(regs*)+0x914>
c00201b0:	31 c0                	xor    eax,eax
c00201b2:	80 fa 07             	cmp    dl,0x7
c00201b5:	0f 85 30 02 00 00    	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c00201bb:	83 ec 0c             	sub    esp,0xc
c00201be:	6a 00                	push   0x0
c00201c0:	e8 88 f6 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c00201c5:	89 c7                	mov    edi,eax
c00201c7:	89 d5                	mov    ebp,edx
c00201c9:	58                   	pop    eax
c00201ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00201cc:	5a                   	pop    edx
c00201cd:	31 d2                	xor    edx,edx
c00201cf:	52                   	push   edx
c00201d0:	50                   	push   eax
c00201d1:	e8 a5 f4 ff ff       	call   c001f67b <Vm::fpuLongToFloat(long long)>
c00201d6:	e9 62 01 00 00       	jmp    c002033d <Vm::x87Handler(regs*)+0x9b3>
c00201db:	84 d2                	test   dl,dl
c00201dd:	75 0d                	jne    c00201ec <Vm::x87Handler(regs*)+0x862>
c00201df:	31 d2                	xor    edx,edx
c00201e1:	55                   	push   ebp
c00201e2:	55                   	push   ebp
c00201e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00201e5:	52                   	push   edx
c00201e6:	50                   	push   eax
c00201e7:	e9 d3 01 00 00       	jmp    c00203bf <Vm::x87Handler(regs*)+0xa35>
c00201ec:	31 c0                	xor    eax,eax
c00201ee:	80 fa 02             	cmp    dl,0x2
c00201f1:	0f 85 f4 01 00 00    	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c00201f7:	83 ec 0c             	sub    esp,0xc
c00201fa:	6a 00                	push   0x0
c00201fc:	e8 4c f6 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c0020201:	59                   	pop    ecx
c0020202:	5f                   	pop    edi
c0020203:	e9 6a f9 ff ff       	jmp    c001fb72 <Vm::x87Handler(regs*)+0x1e8>
c0020208:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002020c:	84 d2                	test   dl,dl
c002020e:	75 2a                	jne    c002023a <Vm::x87Handler(regs*)+0x8b0>
c0020210:	50                   	push   eax
c0020211:	50                   	push   eax
c0020212:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020215:	ff 36                	push   DWORD PTR [esi]
c0020217:	e8 c5 f3 ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c002021c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020223:	89 c6                	mov    esi,eax
c0020225:	89 d7                	mov    edi,edx
c0020227:	e8 21 f6 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c002022c:	57                   	push   edi
c002022d:	56                   	push   esi
c002022e:	52                   	push   edx
c002022f:	50                   	push   eax
c0020230:	e8 8e f5 ff ff       	call   c001f7c3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020235:	e9 64 01 00 00       	jmp    c002039e <Vm::x87Handler(regs*)+0xa14>
c002023a:	80 fa 01             	cmp    dl,0x1
c002023d:	75 11                	jne    c0020250 <Vm::x87Handler(regs*)+0x8c6>
c002023f:	50                   	push   eax
c0020240:	50                   	push   eax
c0020241:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020244:	ff 36                	push   DWORD PTR [esi]
c0020246:	e8 96 f3 ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c002024b:	e9 35 01 00 00       	jmp    c0020385 <Vm::x87Handler(regs*)+0x9fb>
c0020250:	80 fa 02             	cmp    dl,0x2
c0020253:	0f 85 54 f9 ff ff    	jne    c001fbad <Vm::x87Handler(regs*)+0x223>
c0020259:	55                   	push   ebp
c002025a:	55                   	push   ebp
c002025b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002025e:	ff 36                	push   DWORD PTR [esi]
c0020260:	e8 7c f3 ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c0020265:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002026c:	89 c6                	mov    esi,eax
c002026e:	89 d7                	mov    edi,edx
c0020270:	e8 d8 f5 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c0020275:	57                   	push   edi
c0020276:	56                   	push   esi
c0020277:	52                   	push   edx
c0020278:	50                   	push   eax
c0020279:	e8 f2 f4 ff ff       	call   c001f770 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002027e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020282:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020285:	83 c4 20             	add    esp,0x20
c0020288:	e9 74 f7 ff ff       	jmp    c001fa01 <Vm::x87Handler(regs*)+0x77>
c002028d:	80 fa 04             	cmp    dl,0x4
c0020290:	75 2a                	jne    c00202bc <Vm::x87Handler(regs*)+0x932>
c0020292:	51                   	push   ecx
c0020293:	51                   	push   ecx
c0020294:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020297:	ff 36                	push   DWORD PTR [esi]
c0020299:	e8 43 f3 ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c002029e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202a5:	89 c6                	mov    esi,eax
c00202a7:	89 d7                	mov    edi,edx
c00202a9:	e8 9f f5 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c00202ae:	57                   	push   edi
c00202af:	56                   	push   esi
c00202b0:	52                   	push   edx
c00202b1:	50                   	push   eax
c00202b2:	e8 36 f5 ff ff       	call   c001f7ed <Vm::fpuSub(unsigned long long, unsigned long long)>
c00202b7:	e9 e2 00 00 00       	jmp    c002039e <Vm::x87Handler(regs*)+0xa14>
c00202bc:	80 fa 05             	cmp    dl,0x5
c00202bf:	75 28                	jne    c00202e9 <Vm::x87Handler(regs*)+0x95f>
c00202c1:	83 ec 0c             	sub    esp,0xc
c00202c4:	6a 00                	push   0x0
c00202c6:	e8 82 f5 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c00202cb:	89 c7                	mov    edi,eax
c00202cd:	89 d5                	mov    ebp,edx
c00202cf:	58                   	pop    eax
c00202d0:	5a                   	pop    edx
c00202d1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202d4:	ff 36                	push   DWORD PTR [esi]
c00202d6:	e8 06 f3 ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c00202db:	83 c4 10             	add    esp,0x10
c00202de:	55                   	push   ebp
c00202df:	57                   	push   edi
c00202e0:	52                   	push   edx
c00202e1:	50                   	push   eax
c00202e2:	e8 06 f5 ff ff       	call   c001f7ed <Vm::fpuSub(unsigned long long, unsigned long long)>
c00202e7:	eb 60                	jmp    c0020349 <Vm::x87Handler(regs*)+0x9bf>
c00202e9:	80 fa 06             	cmp    dl,0x6
c00202ec:	75 2a                	jne    c0020318 <Vm::x87Handler(regs*)+0x98e>
c00202ee:	51                   	push   ecx
c00202ef:	51                   	push   ecx
c00202f0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202f3:	ff 36                	push   DWORD PTR [esi]
c00202f5:	e8 e7 f2 ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c00202fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020301:	89 c6                	mov    esi,eax
c0020303:	89 d7                	mov    edi,edx
c0020305:	e8 43 f5 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c002030a:	57                   	push   edi
c002030b:	56                   	push   esi
c002030c:	52                   	push   edx
c002030d:	50                   	push   eax
c002030e:	e8 08 f5 ff ff       	call   c001f81b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020313:	e9 86 00 00 00       	jmp    c002039e <Vm::x87Handler(regs*)+0xa14>
c0020318:	31 c0                	xor    eax,eax
c002031a:	80 fa 07             	cmp    dl,0x7
c002031d:	0f 85 c8 00 00 00    	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c0020323:	83 ec 0c             	sub    esp,0xc
c0020326:	6a 00                	push   0x0
c0020328:	e8 20 f5 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c002032d:	89 c7                	mov    edi,eax
c002032f:	89 d5                	mov    ebp,edx
c0020331:	58                   	pop    eax
c0020332:	5a                   	pop    edx
c0020333:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020336:	ff 36                	push   DWORD PTR [esi]
c0020338:	e8 a4 f2 ff ff       	call   c001f5e1 <Vm::fpu64ToInternal(unsigned long long)>
c002033d:	83 c4 10             	add    esp,0x10
c0020340:	55                   	push   ebp
c0020341:	57                   	push   edi
c0020342:	52                   	push   edx
c0020343:	50                   	push   eax
c0020344:	e8 d2 f4 ff ff       	call   c001f81b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020349:	83 c4 0c             	add    esp,0xc
c002034c:	eb 53                	jmp    c00203a1 <Vm::x87Handler(regs*)+0xa17>
c002034e:	31 c0                	xor    eax,eax
c0020350:	80 fa 02             	cmp    dl,0x2
c0020353:	0f 85 92 00 00 00    	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c0020359:	83 ec 0c             	sub    esp,0xc
c002035c:	6a 00                	push   0x0
c002035e:	e8 ea f4 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c0020363:	59                   	pop    ecx
c0020364:	5f                   	pop    edi
c0020365:	52                   	push   edx
c0020366:	50                   	push   eax
c0020367:	e8 27 f2 ff ff       	call   c001f593 <Vm::fpuInternalTo64(unsigned long long)>
c002036c:	eb 70                	jmp    c00203de <Vm::x87Handler(regs*)+0xa54>
c002036e:	31 c0                	xor    eax,eax
c0020370:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020375:	75 74                	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c0020377:	50                   	push   eax
c0020378:	50                   	push   eax
c0020379:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002037c:	31 d2                	xor    edx,edx
c002037e:	52                   	push   edx
c002037f:	50                   	push   eax
c0020380:	e8 f6 f2 ff ff       	call   c001f67b <Vm::fpuLongToFloat(long long)>
c0020385:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002038c:	89 c6                	mov    esi,eax
c002038e:	89 d7                	mov    edi,edx
c0020390:	e8 b8 f4 ff ff       	call   c001f84d <Vm::fpuGetReg(int)>
c0020395:	57                   	push   edi
c0020396:	56                   	push   esi
c0020397:	52                   	push   edx
c0020398:	50                   	push   eax
c0020399:	e8 5e f4 ff ff       	call   c001f7fc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002039e:	83 c4 1c             	add    esp,0x1c
c00203a1:	52                   	push   edx
c00203a2:	50                   	push   eax
c00203a3:	6a 00                	push   0x0
c00203a5:	e8 e6 f4 ff ff       	call   c001f890 <Vm::fpuSetReg(int, unsigned long long)>
c00203aa:	e9 f2 f7 ff ff       	jmp    c001fba1 <Vm::x87Handler(regs*)+0x217>
c00203af:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203b3:	80 fa 05             	cmp    dl,0x5
c00203b6:	75 11                	jne    c00203c9 <Vm::x87Handler(regs*)+0xa3f>
c00203b8:	55                   	push   ebp
c00203b9:	55                   	push   ebp
c00203ba:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203bd:	ff 36                	push   DWORD PTR [esi]
c00203bf:	e8 81 f2 ff ff       	call   c001f645 <Vm::fpuULongToFloat(unsigned long long)>
c00203c4:	e9 cf f7 ff ff       	jmp    c001fb98 <Vm::x87Handler(regs*)+0x20e>
c00203c9:	31 c0                	xor    eax,eax
c00203cb:	80 fa 07             	cmp    dl,0x7
c00203ce:	75 1b                	jne    c00203eb <Vm::x87Handler(regs*)+0xa61>
c00203d0:	e8 63 f5 ff ff       	call   c001f938 <Vm::fpuPop()>
c00203d5:	51                   	push   ecx
c00203d6:	51                   	push   ecx
c00203d7:	52                   	push   edx
c00203d8:	50                   	push   eax
c00203d9:	e8 0c f2 ff ff       	call   c001f5ea <Vm::fpuFloatToLong(unsigned long long)>
c00203de:	83 c4 10             	add    esp,0x10
c00203e1:	89 06                	mov    DWORD PTR [esi],eax
c00203e3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00203e6:	e9 f8 f7 ff ff       	jmp    c001fbe3 <Vm::x87Handler(regs*)+0x259>
c00203eb:	83 c4 1c             	add    esp,0x1c
c00203ee:	5b                   	pop    ebx
c00203ef:	5e                   	pop    esi
c00203f0:	5f                   	pop    edi
c00203f1:	5d                   	pop    ebp
c00203f2:	c3                   	ret    

c00203f3 <__static_initialization_and_destruction_0(int, int)>:
c00203f3:	83 ec 0c             	sub    esp,0xc
c00203f6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00203fb:	75 1a                	jne    c0020417 <__static_initialization_and_destruction_0(int, int)+0x24>
c00203fd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020405:	75 10                	jne    c0020417 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020407:	83 ec 0c             	sub    esp,0xc
c002040a:	68 20 1a 03 c0       	push   0xc0031a20
c002040f:	e8 f8 88 00 00       	call   c0028d0c <Vm::_FPUState::_FPUState()>
c0020414:	83 c4 10             	add    esp,0x10
c0020417:	90                   	nop
c0020418:	83 c4 0c             	add    esp,0xc
c002041b:	c3                   	ret    

c002041c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002041c:	83 ec 0c             	sub    esp,0xc
c002041f:	83 ec 08             	sub    esp,0x8
c0020422:	68 ff ff 00 00       	push   0xffff
c0020427:	6a 01                	push   0x1
c0020429:	e8 c5 ff ff ff       	call   c00203f3 <__static_initialization_and_destruction_0(int, int)>
c002042e:	83 c4 10             	add    esp,0x10
c0020431:	83 c4 0c             	add    esp,0xc
c0020434:	c3                   	ret    
c0020435:	90                   	nop

c0020436 <FAT::getName()>:
c0020436:	b8 1c c8 02 c0       	mov    eax,0xc002c81c
c002043b:	c3                   	ret    

c002043c <FAT::tell(void*, unsigned long long*)>:
c002043c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020441:	75 06                	jne    c0020449 <FAT::tell(void*, unsigned long long*)+0xd>
c0020443:	b8 04 00 00 00       	mov    eax,0x4
c0020448:	c3                   	ret    
c0020449:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002044e:	75 06                	jne    c0020456 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020450:	b8 04 00 00 00       	mov    eax,0x4
c0020455:	c3                   	ret    
c0020456:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002045a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002045d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020464:	89 01                	mov    DWORD PTR [ecx],eax
c0020466:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020469:	b8 00 00 00 00       	mov    eax,0x0
c002046e:	c3                   	ret    
c002046f:	90                   	nop

c0020470 <FAT::stat(void*, unsigned long long*)>:
c0020470:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020475:	75 06                	jne    c002047d <FAT::stat(void*, unsigned long long*)+0xd>
c0020477:	b8 04 00 00 00       	mov    eax,0x4
c002047c:	c3                   	ret    
c002047d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020482:	75 06                	jne    c002048a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020484:	b8 04 00 00 00       	mov    eax,0x4
c0020489:	c3                   	ret    
c002048a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002048e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020491:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020494:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020498:	89 01                	mov    DWORD PTR [ecx],eax
c002049a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002049d:	b8 00 00 00 00       	mov    eax,0x0
c00204a2:	c3                   	ret    
c00204a3:	90                   	nop

c00204a4 <FAT::~FAT()>:
c00204a4:	83 ec 0c             	sub    esp,0xc
c00204a7:	ba ac c8 02 c0       	mov    edx,0xc002c8ac
c00204ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b0:	89 10                	mov    DWORD PTR [eax],edx
c00204b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b6:	83 ec 0c             	sub    esp,0xc
c00204b9:	50                   	push   eax
c00204ba:	e8 13 2c ff ff       	call   c00130d2 <Filesystem::~Filesystem()>
c00204bf:	83 c4 10             	add    esp,0x10
c00204c2:	90                   	nop
c00204c3:	83 c4 0c             	add    esp,0xc
c00204c6:	c3                   	ret    
c00204c7:	90                   	nop

c00204c8 <FAT::~FAT()>:
c00204c8:	83 ec 0c             	sub    esp,0xc
c00204cb:	83 ec 0c             	sub    esp,0xc
c00204ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204d2:	e8 cd ff ff ff       	call   c00204a4 <FAT::~FAT()>
c00204d7:	83 c4 10             	add    esp,0x10
c00204da:	83 ec 08             	sub    esp,0x8
c00204dd:	6a 08                	push   0x8
c00204df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e3:	e8 db 27 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00204e8:	83 c4 10             	add    esp,0x10
c00204eb:	83 c4 0c             	add    esp,0xc
c00204ee:	c3                   	ret    
c00204ef:	90                   	nop

c00204f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00204f0:	83 ec 1c             	sub    esp,0x1c
c00204f3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00204fa:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00204ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020503:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c002050a:	83 f8 ff             	cmp    eax,0xffffffff
c002050d:	75 34                	jne    c0020543 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002050f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020513:	88 c2                	mov    dl,al
c0020515:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c002051a:	01 d0                	add    eax,edx
c002051c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020520:	8b 15 80 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a80
c0020526:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002052a:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c0020531:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c0020536:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002053a:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c0020541:	eb 17                	jmp    c002055a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020543:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020547:	88 c2                	mov    dl,al
c0020549:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002054d:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c0020554:	01 d0                	add    eax,edx
c0020556:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002055a:	83 ec 04             	sub    esp,0x4
c002055d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020561:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020565:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020569:	50                   	push   eax
c002056a:	e8 d1 67 fe ff       	call   c0006d40 <f_getlabel>
c002056f:	83 c4 10             	add    esp,0x10
c0020572:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020576:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002057b:	75 07                	jne    c0020584 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002057d:	b8 00 00 00 00       	mov    eax,0x0
c0020582:	eb 05                	jmp    c0020589 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020584:	b8 01 00 00 00       	mov    eax,0x1
c0020589:	83 c4 1c             	add    esp,0x1c
c002058c:	c3                   	ret    
c002058d:	90                   	nop

c002058e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002058e:	57                   	push   edi
c002058f:	83 ec 58             	sub    esp,0x58
c0020592:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002059a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002059e:	b9 0f 00 00 00       	mov    ecx,0xf
c00205a3:	b8 00 00 00 00       	mov    eax,0x0
c00205a8:	fc                   	cld    
c00205a9:	89 d7                	mov    edi,edx
c00205ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00205ad:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205b1:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c00205b8:	83 f8 ff             	cmp    eax,0xffffffff
c00205bb:	75 34                	jne    c00205f1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00205bd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205c1:	88 c2                	mov    dl,al
c00205c3:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c00205c8:	01 d0                	add    eax,edx
c00205ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205ce:	8b 15 80 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a80
c00205d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205d8:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c00205df:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c00205e4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00205e8:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c00205ef:	eb 17                	jmp    c0020608 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00205f1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205f5:	88 c2                	mov    dl,al
c00205f7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205fb:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c0020602:	01 d0                	add    eax,edx
c0020604:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020608:	83 ec 08             	sub    esp,0x8
c002060b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002060f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020613:	50                   	push   eax
c0020614:	e8 63 03 fe ff       	call   c000097c <strcat>
c0020619:	83 c4 10             	add    esp,0x10
c002061c:	83 ec 0c             	sub    esp,0xc
c002061f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020623:	50                   	push   eax
c0020624:	e8 05 69 fe ff       	call   c0006f2e <f_setlabel>
c0020629:	83 c4 10             	add    esp,0x10
c002062c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020630:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020635:	75 07                	jne    c002063e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020637:	b8 00 00 00 00       	mov    eax,0x0
c002063c:	eb 05                	jmp    c0020643 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002063e:	b8 01 00 00 00       	mov    eax,0x1
c0020643:	83 c4 58             	add    esp,0x58
c0020646:	5f                   	pop    edi
c0020647:	c3                   	ret    

c0020648 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020648:	83 ec 2c             	sub    esp,0x2c
c002064b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020653:	83 ec 08             	sub    esp,0x8
c0020656:	68 40 c8 02 c0       	push   0xc002c840
c002065b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002065f:	e8 64 02 fe ff       	call   c00008c8 <strcmp>
c0020664:	83 c4 10             	add    esp,0x10
c0020667:	85 c0                	test   eax,eax
c0020669:	0f 94 c0             	sete   al
c002066c:	84 c0                	test   al,al
c002066e:	74 0d                	je     c002067d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020670:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020678:	e9 a6 00 00 00       	jmp    c0020723 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002067d:	83 ec 08             	sub    esp,0x8
c0020680:	68 32 c8 02 c0       	push   0xc002c832
c0020685:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020689:	e8 3a 02 fe ff       	call   c00008c8 <strcmp>
c002068e:	83 c4 10             	add    esp,0x10
c0020691:	85 c0                	test   eax,eax
c0020693:	0f 94 c0             	sete   al
c0020696:	84 c0                	test   al,al
c0020698:	74 0a                	je     c00206a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002069a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206a2:	eb 7f                	jmp    c0020723 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206a4:	83 ec 08             	sub    esp,0x8
c00206a7:	68 38 c8 02 c0       	push   0xc002c838
c00206ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206b0:	e8 13 02 fe ff       	call   c00008c8 <strcmp>
c00206b5:	83 c4 10             	add    esp,0x10
c00206b8:	85 c0                	test   eax,eax
c00206ba:	0f 94 c0             	sete   al
c00206bd:	84 c0                	test   al,al
c00206bf:	74 0a                	je     c00206cb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00206c1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206c9:	eb 58                	jmp    c0020723 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206cb:	83 ec 08             	sub    esp,0x8
c00206ce:	68 6c 94 02 c0       	push   0xc002946c
c00206d3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206d7:	e8 ec 01 fe ff       	call   c00008c8 <strcmp>
c00206dc:	83 c4 10             	add    esp,0x10
c00206df:	85 c0                	test   eax,eax
c00206e1:	0f 94 c0             	sete   al
c00206e4:	84 c0                	test   al,al
c00206e6:	74 0a                	je     c00206f2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00206e8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00206f0:	eb 31                	jmp    c0020723 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206f2:	83 ec 08             	sub    esp,0x8
c00206f5:	68 3e c8 02 c0       	push   0xc002c83e
c00206fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206fe:	e8 c5 01 fe ff       	call   c00008c8 <strcmp>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	85 c0                	test   eax,eax
c0020708:	0f 94 c0             	sete   al
c002070b:	84 c0                	test   al,al
c002070d:	74 0a                	je     c0020719 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002070f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020717:	eb 0a                	jmp    c0020723 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020719:	b8 08 00 00 00       	mov    eax,0x8
c002071e:	e9 04 01 00 00       	jmp    c0020827 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020723:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002072a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002072f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020733:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c002073a:	83 f8 ff             	cmp    eax,0xffffffff
c002073d:	75 34                	jne    c0020773 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002073f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020743:	88 c2                	mov    dl,al
c0020745:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c002074a:	01 d0                	add    eax,edx
c002074c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020750:	8b 15 80 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a80
c0020756:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002075a:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c0020761:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c0020766:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002076a:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c0020771:	eb 17                	jmp    c002078a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020773:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020777:	88 c2                	mov    dl,al
c0020779:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002077d:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c0020784:	01 d0                	add    eax,edx
c0020786:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002078a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002078e:	88 04 24             	mov    BYTE PTR [esp],al
c0020791:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020795:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020799:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00207a1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00207a6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00207ae:	83 ec 0c             	sub    esp,0xc
c00207b1:	68 00 20 00 00       	push   0x2000
c00207b6:	e8 90 f0 fe ff       	call   c000f84b <malloc>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00207c2:	68 00 20 00 00       	push   0x2000
c00207c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207cf:	50                   	push   eax
c00207d0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00207d4:	50                   	push   eax
c00207d5:	e8 9f 6b fe ff       	call   c0007379 <f_mkfs>
c00207da:	83 c4 10             	add    esp,0x10
c00207dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00207e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00207e6:	75 07                	jne    c00207ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00207e8:	b8 00 00 00 00       	mov    eax,0x0
c00207ed:	eb 38                	jmp    c0020827 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207ef:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00207f4:	75 17                	jne    c002080d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00207f6:	83 ec 0c             	sub    esp,0xc
c00207f9:	68 7c c8 02 c0       	push   0xc002c87c
c00207fe:	e8 a0 25 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0020803:	83 c4 10             	add    esp,0x10
c0020806:	b8 09 00 00 00       	mov    eax,0x9
c002080b:	eb 1a                	jmp    c0020827 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002080d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020811:	83 ec 08             	sub    esp,0x8
c0020814:	50                   	push   eax
c0020815:	68 44 c8 02 c0       	push   0xc002c844
c002081a:	e8 84 25 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c002081f:	83 c4 10             	add    esp,0x10
c0020822:	b8 01 00 00 00       	mov    eax,0x1
c0020827:	83 c4 2c             	add    esp,0x2c
c002082a:	c3                   	ret    
c002082b:	90                   	nop

c002082c <FAT::tryMount(LogicalDisk*, int)>:
c002082c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020832:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c0020837:	83 f8 14             	cmp    eax,0x14
c002083a:	75 17                	jne    c0020853 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002083c:	83 ec 0c             	sub    esp,0xc
c002083f:	68 56 c8 02 c0       	push   0xc002c856
c0020844:	e8 98 9c ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0020849:	83 c4 10             	add    esp,0x10
c002084c:	b0 00                	mov    al,0x0
c002084e:	e9 d7 01 00 00       	jmp    c0020a2a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020853:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002085a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020860:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020866:	3d 00 02 00 00       	cmp    eax,0x200
c002086b:	74 07                	je     c0020874 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002086d:	b0 00                	mov    al,0x0
c002086f:	e9 b6 01 00 00       	jmp    c0020a2a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020874:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002087c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020883:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c002088a:	83 f8 ff             	cmp    eax,0xffffffff
c002088d:	74 07                	je     c0020896 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002088f:	b0 01                	mov    al,0x1
c0020891:	e9 94 01 00 00       	jmp    c0020a2a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020896:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00208a0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00208a8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00208af:	88 c2                	mov    dl,al
c00208b1:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c00208b6:	01 d0                	add    eax,edx
c00208b8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00208bf:	8b 15 80 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a80
c00208c5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00208cc:	89 14 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],edx
c00208d3:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c00208d8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00208df:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c00208e6:	83 ec 0c             	sub    esp,0xc
c00208e9:	68 54 02 00 00       	push   0x254
c00208ee:	e8 58 ef fe ff       	call   c000f84b <malloc>
c00208f3:	83 c4 10             	add    esp,0x10
c00208f6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00208fd:	83 ec 04             	sub    esp,0x4
c0020900:	6a 00                	push   0x0
c0020902:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020909:	50                   	push   eax
c002090a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020911:	e8 21 46 fe ff       	call   c0004f37 <f_mount>
c0020916:	83 c4 10             	add    esp,0x10
c0020919:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020920:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020928:	74 19                	je     c0020943 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002092a:	83 ec 0c             	sub    esp,0xc
c002092d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020934:	e8 32 ef fe ff       	call   c000f86b <rfree>
c0020939:	83 c4 10             	add    esp,0x10
c002093c:	b0 00                	mov    al,0x0
c002093e:	e9 e7 00 00 00       	jmp    c0020a2a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020943:	83 ec 04             	sub    esp,0x4
c0020946:	68 00 01 00 00       	push   0x100
c002094b:	6a 00                	push   0x0
c002094d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020954:	50                   	push   eax
c0020955:	e8 26 fe fd ff       	call   c0000780 <memset>
c002095a:	83 c4 10             	add    esp,0x10
c002095d:	83 ec 08             	sub    esp,0x8
c0020960:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020967:	50                   	push   eax
c0020968:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002096f:	50                   	push   eax
c0020970:	e8 07 00 fe ff       	call   c000097c <strcat>
c0020975:	83 c4 10             	add    esp,0x10
c0020978:	83 ec 08             	sub    esp,0x8
c002097b:	68 64 c8 02 c0       	push   0xc002c864
c0020980:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020987:	50                   	push   eax
c0020988:	e8 ef ff fd ff       	call   c000097c <strcat>
c002098d:	83 c4 10             	add    esp,0x10
c0020990:	83 ec 04             	sub    esp,0x4
c0020993:	6a 01                	push   0x1
c0020995:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002099c:	50                   	push   eax
c002099d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00209a1:	50                   	push   eax
c00209a2:	e8 f2 45 fe ff       	call   c0004f99 <f_open>
c00209a7:	83 c4 10             	add    esp,0x10
c00209aa:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209b1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00209b8:	85 c0                	test   eax,eax
c00209ba:	74 0a                	je     c00209c6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00209bc:	78 2d                	js     c00209eb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00209be:	83 e8 04             	sub    eax,0x4
c00209c1:	83 f8 01             	cmp    eax,0x1
c00209c4:	77 25                	ja     c00209eb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00209c6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00209ce:	83 ec 0c             	sub    esp,0xc
c00209d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00209d5:	50                   	push   eax
c00209d6:	e8 10 51 fe ff       	call   c0005aeb <f_close>
c00209db:	83 c4 10             	add    esp,0x10
c00209de:	90                   	nop
c00209df:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00209e7:	74 3a                	je     c0020a23 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00209e9:	eb 2d                	jmp    c0020a18 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00209eb:	83 ec 0c             	sub    esp,0xc
c00209ee:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209f5:	e8 71 ee fe ff       	call   c000f86b <rfree>
c00209fa:	83 c4 10             	add    esp,0x10
c00209fd:	83 ec 04             	sub    esp,0x4
c0020a00:	6a 00                	push   0x0
c0020a02:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a09:	50                   	push   eax
c0020a0a:	6a 00                	push   0x0
c0020a0c:	e8 26 45 fe ff       	call   c0004f37 <f_mount>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	b0 00                	mov    al,0x0
c0020a16:	eb 12                	jmp    c0020a2a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a18:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c0020a1d:	40                   	inc    eax
c0020a1e:	a3 80 1a 03 c0       	mov    ds:0xc0031a80,eax
c0020a23:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020a2a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020a30:	c3                   	ret    
c0020a31:	90                   	nop

c0020a32 <FAT::getFileFirstSector(char const*)>:
c0020a32:	53                   	push   ebx
c0020a33:	83 ec 28             	sub    esp,0x28
c0020a36:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020a3e:	83 ec 0c             	sub    esp,0xc
c0020a41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a45:	e8 01 ee fe ff       	call   c000f84b <malloc>
c0020a4a:	83 c4 10             	add    esp,0x10
c0020a4d:	89 c3                	mov    ebx,eax
c0020a4f:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c0020a54:	83 ec 04             	sub    esp,0x4
c0020a57:	50                   	push   eax
c0020a58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020a5c:	53                   	push   ebx
c0020a5d:	e8 a0 28 ff ff       	call   c0013302 <File::File(char const*, Process*)>
c0020a62:	83 c4 10             	add    esp,0x10
c0020a65:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020a69:	83 ec 08             	sub    esp,0x8
c0020a6c:	6a 01                	push   0x1
c0020a6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020a72:	e8 ef 28 ff ff       	call   c0013366 <File::open(FileOpenMode)>
c0020a77:	83 c4 10             	add    esp,0x10
c0020a7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a80:	83 c0 0c             	add    eax,0xc
c0020a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a85:	83 ec 0c             	sub    esp,0xc
c0020a88:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a8c:	52                   	push   edx
c0020a8d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020a91:	52                   	push   edx
c0020a92:	6a 00                	push   0x0
c0020a94:	6a 04                	push   0x4
c0020a96:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020a9a:	ff d0                	call   eax
c0020a9c:	83 c4 20             	add    esp,0x20
c0020a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020aa3:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020aa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020aad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ab1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020ab4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020ab7:	83 ec 04             	sub    esp,0x4
c0020aba:	52                   	push   edx
c0020abb:	50                   	push   eax
c0020abc:	68 6f c8 02 c0       	push   0xc002c86f
c0020ac1:	e8 dd 22 ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0020ac6:	83 c4 10             	add    esp,0x10
c0020ac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020acd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020ad0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020ad3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ad7:	83 ec 0c             	sub    esp,0xc
c0020ada:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020ade:	e8 e1 28 ff ff       	call   c00133c4 <File::close()>
c0020ae3:	83 c4 10             	add    esp,0x10
c0020ae6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020aea:	ba 00 00 00 00       	mov    edx,0x0
c0020aef:	83 c4 28             	add    esp,0x28
c0020af2:	5b                   	pop    ebx
c0020af3:	c3                   	ret    

c0020af4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020af4:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020afa:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b02:	74 0a                	je     c0020b0e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b04:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b0c:	75 0a                	jne    c0020b18 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b0e:	b8 04 00 00 00       	mov    eax,0x4
c0020b13:	e9 db 00 00 00       	jmp    c0020bf3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b18:	83 ec 08             	sub    esp,0x8
c0020b1b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b22:	50                   	push   eax
c0020b23:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b2a:	e8 c6 55 fe ff       	call   c00060f5 <f_readdir>
c0020b2f:	83 c4 10             	add    esp,0x10
c0020b32:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b39:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b3f:	83 ec 0c             	sub    esp,0xc
c0020b42:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b49:	83 c0 1a             	add    eax,0x1a
c0020b4c:	50                   	push   eax
c0020b4d:	e8 4a fc fd ff       	call   c000079c <strlen>
c0020b52:	83 c4 10             	add    esp,0x10
c0020b55:	ba 00 00 00 00       	mov    edx,0x0
c0020b5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b5e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b62:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b69:	0f b6 c0             	movzx  eax,al
c0020b6c:	83 e0 10             	and    eax,0x10
c0020b6f:	74 07                	je     c0020b78 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b71:	b8 02 00 00 00       	mov    eax,0x2
c0020b76:	eb 05                	jmp    c0020b7d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b78:	b8 01 00 00 00       	mov    eax,0x1
c0020b7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b81:	83 ec 08             	sub    esp,0x8
c0020b84:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b8b:	83 c0 1a             	add    eax,0x1a
c0020b8e:	50                   	push   eax
c0020b8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b93:	83 c0 10             	add    eax,0x10
c0020b96:	50                   	push   eax
c0020b97:	e8 a0 fc fd ff       	call   c000083c <strcpy>
c0020b9c:	83 c4 10             	add    esp,0x10
c0020b9f:	83 ec 04             	sub    esp,0x4
c0020ba2:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020ba9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bad:	50                   	push   eax
c0020bae:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bb5:	e8 92 fb fd ff       	call   c000074c <memcpy>
c0020bba:	83 c4 10             	add    esp,0x10
c0020bbd:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020bc4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bca:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bd1:	84 c0                	test   al,al
c0020bd3:	75 07                	jne    c0020bdc <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bd5:	b8 07 00 00 00       	mov    eax,0x7
c0020bda:	eb 17                	jmp    c0020bf3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bdc:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020be3:	85 c0                	test   eax,eax
c0020be5:	75 07                	jne    c0020bee <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020be7:	b8 00 00 00 00       	mov    eax,0x0
c0020bec:	eb 05                	jmp    c0020bf3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bee:	b8 01 00 00 00       	mov    eax,0x1
c0020bf3:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020bf9:	c3                   	ret    

c0020bfa <FAT::read(void*, unsigned long, void*, int*)>:
c0020bfa:	83 ec 1c             	sub    esp,0x1c
c0020bfd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c02:	74 07                	je     c0020c0b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c04:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c09:	75 07                	jne    c0020c12 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c0b:	b8 04 00 00 00       	mov    eax,0x4
c0020c10:	eb 3d                	jmp    c0020c4f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c12:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c16:	50                   	push   eax
c0020c17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c23:	e8 ad 47 fe ff       	call   c00053d5 <f_read>
c0020c28:	83 c4 10             	add    esp,0x10
c0020c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c33:	89 c2                	mov    edx,eax
c0020c35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c39:	89 10                	mov    DWORD PTR [eax],edx
c0020c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c3f:	85 c0                	test   eax,eax
c0020c41:	75 07                	jne    c0020c4a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c43:	b8 00 00 00 00       	mov    eax,0x0
c0020c48:	eb 05                	jmp    c0020c4f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c4a:	b8 01 00 00 00       	mov    eax,0x1
c0020c4f:	83 c4 1c             	add    esp,0x1c
c0020c52:	c3                   	ret    
c0020c53:	90                   	nop

c0020c54 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c54:	83 ec 1c             	sub    esp,0x1c
c0020c57:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c5c:	74 07                	je     c0020c65 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c5e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c63:	75 07                	jne    c0020c6c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c65:	b8 04 00 00 00       	mov    eax,0x4
c0020c6a:	eb 3d                	jmp    c0020ca9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c70:	50                   	push   eax
c0020c71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c7d:	e8 d3 49 fe ff       	call   c0005655 <f_write>
c0020c82:	83 c4 10             	add    esp,0x10
c0020c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c8d:	89 c2                	mov    edx,eax
c0020c8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c93:	89 10                	mov    DWORD PTR [eax],edx
c0020c95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c99:	85 c0                	test   eax,eax
c0020c9b:	75 07                	jne    c0020ca4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c9d:	b8 00 00 00 00       	mov    eax,0x0
c0020ca2:	eb 05                	jmp    c0020ca9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ca4:	b8 01 00 00 00       	mov    eax,0x1
c0020ca9:	83 c4 1c             	add    esp,0x1c
c0020cac:	c3                   	ret    
c0020cad:	90                   	nop

c0020cae <FAT::close(void*)>:
c0020cae:	83 ec 1c             	sub    esp,0x1c
c0020cb1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cb6:	75 07                	jne    c0020cbf <FAT::close(void*)+0x11>
c0020cb8:	b8 04 00 00 00       	mov    eax,0x4
c0020cbd:	eb 36                	jmp    c0020cf5 <FAT::close(void*)+0x47>
c0020cbf:	83 ec 0c             	sub    esp,0xc
c0020cc2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cc6:	e8 20 4e fe ff       	call   c0005aeb <f_close>
c0020ccb:	83 c4 10             	add    esp,0x10
c0020cce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cd2:	83 ec 0c             	sub    esp,0xc
c0020cd5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cd9:	e8 7d eb fe ff       	call   c000f85b <free>
c0020cde:	83 c4 10             	add    esp,0x10
c0020ce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ce5:	85 c0                	test   eax,eax
c0020ce7:	75 07                	jne    c0020cf0 <FAT::close(void*)+0x42>
c0020ce9:	b8 00 00 00 00       	mov    eax,0x0
c0020cee:	eb 05                	jmp    c0020cf5 <FAT::close(void*)+0x47>
c0020cf0:	b8 01 00 00 00       	mov    eax,0x1
c0020cf5:	83 c4 1c             	add    esp,0x1c
c0020cf8:	c3                   	ret    
c0020cf9:	90                   	nop

c0020cfa <FAT::closeDir(void*)>:
c0020cfa:	83 ec 1c             	sub    esp,0x1c
c0020cfd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d02:	75 07                	jne    c0020d0b <FAT::closeDir(void*)+0x11>
c0020d04:	b8 04 00 00 00       	mov    eax,0x4
c0020d09:	eb 36                	jmp    c0020d41 <FAT::closeDir(void*)+0x47>
c0020d0b:	83 ec 0c             	sub    esp,0xc
c0020d0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d12:	e8 bc 53 fe ff       	call   c00060d3 <f_closedir>
c0020d17:	83 c4 10             	add    esp,0x10
c0020d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d1e:	83 ec 0c             	sub    esp,0xc
c0020d21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d25:	e8 31 eb fe ff       	call   c000f85b <free>
c0020d2a:	83 c4 10             	add    esp,0x10
c0020d2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d31:	85 c0                	test   eax,eax
c0020d33:	75 07                	jne    c0020d3c <FAT::closeDir(void*)+0x42>
c0020d35:	b8 00 00 00 00       	mov    eax,0x0
c0020d3a:	eb 05                	jmp    c0020d41 <FAT::closeDir(void*)+0x47>
c0020d3c:	b8 01 00 00 00       	mov    eax,0x1
c0020d41:	83 c4 1c             	add    esp,0x1c
c0020d44:	c3                   	ret    
c0020d45:	90                   	nop

c0020d46 <FAT::seek(void*, unsigned long long)>:
c0020d46:	83 ec 2c             	sub    esp,0x2c
c0020d49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d59:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d5e:	75 07                	jne    c0020d67 <FAT::seek(void*, unsigned long long)+0x21>
c0020d60:	b8 04 00 00 00       	mov    eax,0x4
c0020d65:	eb 2f                	jmp    c0020d96 <FAT::seek(void*, unsigned long long)+0x50>
c0020d67:	83 ec 04             	sub    esp,0x4
c0020d6a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d6e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d72:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d76:	e8 9f 4d fe ff       	call   c0005b1a <f_lseek>
c0020d7b:	83 c4 10             	add    esp,0x10
c0020d7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d86:	85 c0                	test   eax,eax
c0020d88:	75 07                	jne    c0020d91 <FAT::seek(void*, unsigned long long)+0x4b>
c0020d8a:	b8 00 00 00 00       	mov    eax,0x0
c0020d8f:	eb 05                	jmp    c0020d96 <FAT::seek(void*, unsigned long long)+0x50>
c0020d91:	b8 01 00 00 00       	mov    eax,0x1
c0020d96:	83 c4 2c             	add    esp,0x2c
c0020d99:	c3                   	ret    

c0020d9a <fatWrapperReadDisk>:
c0020d9a:	83 ec 1c             	sub    esp,0x1c
c0020d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020da1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020da5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020db0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020db4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020db9:	8b 04 85 60 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15a0]
c0020dc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dc4:	83 ec 0c             	sub    esp,0xc
c0020dc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dcb:	52                   	push   edx
c0020dcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dd4:	50                   	push   eax
c0020dd5:	e8 5a 58 ff ff       	call   c0016634 <LogicalDisk::read(unsigned long long, int, void*)>
c0020dda:	83 c4 20             	add    esp,0x20
c0020ddd:	83 c4 1c             	add    esp,0x1c
c0020de0:	c3                   	ret    

c0020de1 <fatWrapperWriteDisk>:
c0020de1:	83 ec 1c             	sub    esp,0x1c
c0020de4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020de8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020df0:	89 04 24             	mov    DWORD PTR [esp],eax
c0020df3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020df7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dfb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e00:	8b 04 85 60 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15a0]
c0020e07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e0b:	83 ec 0c             	sub    esp,0xc
c0020e0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e12:	52                   	push   edx
c0020e13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e1b:	50                   	push   eax
c0020e1c:	e8 7f 58 ff ff       	call   c00166a0 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e21:	83 c4 20             	add    esp,0x20
c0020e24:	83 c4 1c             	add    esp,0x1c
c0020e27:	c3                   	ret    

c0020e28 <fatWrapperIoctl>:
c0020e28:	53                   	push   ebx
c0020e29:	83 ec 28             	sub    esp,0x28
c0020e2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e34:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e3c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e41:	75 31                	jne    c0020e74 <fatWrapperIoctl+0x4c>
c0020e43:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e4b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e50:	8b 04 85 60 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15a0]
c0020e57:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e67:	66 89 02             	mov    WORD PTR [edx],ax
c0020e6a:	b8 00 00 00 00       	mov    eax,0x0
c0020e6f:	e9 b2 00 00 00       	jmp    c0020f26 <fatWrapperIoctl+0xfe>
c0020e74:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e79:	75 6a                	jne    c0020ee5 <fatWrapperIoctl+0xbd>
c0020e7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e88:	8b 04 85 60 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15a0]
c0020e8f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e95:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e9b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ea1:	89 c8                	mov    eax,ecx
c0020ea3:	89 da                	mov    edx,ebx
c0020ea5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ea9:	c1 e0 0a             	shl    eax,0xa
c0020eac:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020eb1:	8b 0c 8d 60 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15a0]
c0020eb8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ebe:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ec4:	89 cb                	mov    ebx,ecx
c0020ec6:	c1 fb 1f             	sar    ebx,0x1f
c0020ec9:	53                   	push   ebx
c0020eca:	51                   	push   ecx
c0020ecb:	52                   	push   edx
c0020ecc:	50                   	push   eax
c0020ecd:	e8 d2 5a 00 00       	call   c00269a4 <__udivdi3>
c0020ed2:	83 c4 10             	add    esp,0x10
c0020ed5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ed9:	89 01                	mov    DWORD PTR [ecx],eax
c0020edb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ede:	b8 00 00 00 00       	mov    eax,0x0
c0020ee3:	eb 41                	jmp    c0020f26 <fatWrapperIoctl+0xfe>
c0020ee5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020eea:	75 07                	jne    c0020ef3 <fatWrapperIoctl+0xcb>
c0020eec:	b8 00 00 00 00       	mov    eax,0x0
c0020ef1:	eb 33                	jmp    c0020f26 <fatWrapperIoctl+0xfe>
c0020ef3:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ef8:	75 19                	jne    c0020f13 <fatWrapperIoctl+0xeb>
c0020efa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020efe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f06:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f0c:	b8 00 00 00 00       	mov    eax,0x0
c0020f11:	eb 13                	jmp    c0020f26 <fatWrapperIoctl+0xfe>
c0020f13:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f18:	75 07                	jne    c0020f21 <fatWrapperIoctl+0xf9>
c0020f1a:	b8 00 00 00 00       	mov    eax,0x0
c0020f1f:	eb 05                	jmp    c0020f26 <fatWrapperIoctl+0xfe>
c0020f21:	b8 04 00 00 00       	mov    eax,0x4
c0020f26:	83 c4 28             	add    esp,0x28
c0020f29:	5b                   	pop    ebx
c0020f2a:	c3                   	ret    
c0020f2b:	90                   	nop

c0020f2c <FAT::FAT()>:
c0020f2c:	83 ec 1c             	sub    esp,0x1c
c0020f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f33:	83 ec 0c             	sub    esp,0xc
c0020f36:	50                   	push   eax
c0020f37:	e8 72 21 ff ff       	call   c00130ae <Filesystem::Filesystem()>
c0020f3c:	83 c4 10             	add    esp,0x10
c0020f3f:	ba ac c8 02 c0       	mov    edx,0xc002c8ac
c0020f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f48:	89 10                	mov    DWORD PTR [eax],edx
c0020f4a:	c7 05 80 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a80,0x0
c0020f54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f5c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f61:	7f 15                	jg     c0020f78 <FAT::FAT()+0x4c>
c0020f63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f67:	c7 04 85 a0 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce560],0xffffffff
c0020f72:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f76:	eb e4                	jmp    c0020f5c <FAT::FAT()+0x30>
c0020f78:	90                   	nop
c0020f79:	83 c4 1c             	add    esp,0x1c
c0020f7c:	c3                   	ret    
c0020f7d:	90                   	nop

c0020f7e <FAT::fixFilepath(char*)>:
c0020f7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f82:	8a 00                	mov    al,BYTE PTR [eax]
c0020f84:	3c 40                	cmp    al,0x40
c0020f86:	7e 2c                	jle    c0020fb4 <FAT::fixFilepath(char*)+0x36>
c0020f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f8c:	8a 00                	mov    al,BYTE PTR [eax]
c0020f8e:	83 e8 41             	sub    eax,0x41
c0020f91:	88 c2                	mov    dl,al
c0020f93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f97:	88 10                	mov    BYTE PTR [eax],dl
c0020f99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f9d:	8a 00                	mov    al,BYTE PTR [eax]
c0020f9f:	0f be c0             	movsx  eax,al
c0020fa2:	8b 04 85 a0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce560]
c0020fa9:	83 c0 30             	add    eax,0x30
c0020fac:	88 c2                	mov    dl,al
c0020fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb2:	88 10                	mov    BYTE PTR [eax],dl
c0020fb4:	90                   	nop
c0020fb5:	c3                   	ret    

c0020fb6 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fb6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fbc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fc4:	74 0a                	je     c0020fd0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fc6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fce:	75 0a                	jne    c0020fda <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fd0:	b8 04 00 00 00       	mov    eax,0x4
c0020fd5:	e9 fd 00 00 00       	jmp    c00210d7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fda:	83 ec 08             	sub    esp,0x8
c0020fdd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fe4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fe8:	50                   	push   eax
c0020fe9:	e8 4e f8 fd ff       	call   c000083c <strcpy>
c0020fee:	83 c4 10             	add    esp,0x10
c0020ff1:	83 ec 08             	sub    esp,0x8
c0020ff4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020ff8:	50                   	push   eax
c0020ff9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021000:	e8 79 ff ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c0021005:	83 c4 10             	add    esp,0x10
c0021008:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021010:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021017:	83 e0 01             	and    eax,0x1
c002101a:	74 08                	je     c0021024 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002101c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021024:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002102b:	83 e0 04             	and    eax,0x4
c002102e:	74 10                	je     c0021040 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021030:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021038:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021040:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021047:	83 e0 02             	and    eax,0x2
c002104a:	74 08                	je     c0021054 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002104c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021054:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002105b:	83 e0 08             	and    eax,0x8
c002105e:	74 08                	je     c0021068 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021060:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021068:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002106f:	83 e0 10             	and    eax,0x10
c0021072:	74 08                	je     c002107c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021074:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002107c:	83 ec 0c             	sub    esp,0xc
c002107f:	68 50 02 00 00       	push   0x250
c0021084:	e8 c2 e7 fe ff       	call   c000f84b <malloc>
c0021089:	83 c4 10             	add    esp,0x10
c002108c:	89 c2                	mov    edx,eax
c002108e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021095:	89 10                	mov    DWORD PTR [eax],edx
c0021097:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002109f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00210a8:	83 ec 04             	sub    esp,0x4
c00210ab:	52                   	push   edx
c00210ac:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210b0:	52                   	push   edx
c00210b1:	50                   	push   eax
c00210b2:	e8 e2 3e fe ff       	call   c0004f99 <f_open>
c00210b7:	83 c4 10             	add    esp,0x10
c00210ba:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210c1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210c9:	74 07                	je     c00210d2 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210cb:	b8 01 00 00 00       	mov    eax,0x1
c00210d0:	eb 05                	jmp    c00210d7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210d2:	b8 00 00 00 00       	mov    eax,0x0
c00210d7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210dd:	c3                   	ret    

c00210de <FAT::openDir(char const*, void**)>:
c00210de:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210e4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210ec:	74 0a                	je     c00210f8 <FAT::openDir(char const*, void**)+0x1a>
c00210ee:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210f6:	75 07                	jne    c00210ff <FAT::openDir(char const*, void**)+0x21>
c00210f8:	b8 04 00 00 00       	mov    eax,0x4
c00210fd:	eb 7d                	jmp    c002117c <FAT::openDir(char const*, void**)+0x9e>
c00210ff:	83 ec 08             	sub    esp,0x8
c0021102:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021109:	8d 44 24 18          	lea    eax,[esp+0x18]
c002110d:	50                   	push   eax
c002110e:	e8 29 f7 fd ff       	call   c000083c <strcpy>
c0021113:	83 c4 10             	add    esp,0x10
c0021116:	83 ec 08             	sub    esp,0x8
c0021119:	8d 44 24 14          	lea    eax,[esp+0x14]
c002111d:	50                   	push   eax
c002111e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021125:	e8 54 fe ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c002112a:	83 c4 10             	add    esp,0x10
c002112d:	83 ec 0c             	sub    esp,0xc
c0021130:	6a 4c                	push   0x4c
c0021132:	e8 14 e7 fe ff       	call   c000f84b <malloc>
c0021137:	83 c4 10             	add    esp,0x10
c002113a:	89 c2                	mov    edx,eax
c002113c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021143:	89 10                	mov    DWORD PTR [eax],edx
c0021145:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002114c:	8b 00                	mov    eax,DWORD PTR [eax]
c002114e:	83 ec 08             	sub    esp,0x8
c0021151:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021155:	52                   	push   edx
c0021156:	50                   	push   eax
c0021157:	e8 75 4e fe ff       	call   c0005fd1 <f_opendir>
c002115c:	83 c4 10             	add    esp,0x10
c002115f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021166:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002116e:	74 07                	je     c0021177 <FAT::openDir(char const*, void**)+0x99>
c0021170:	b8 01 00 00 00       	mov    eax,0x1
c0021175:	eb 05                	jmp    c002117c <FAT::openDir(char const*, void**)+0x9e>
c0021177:	b8 00 00 00 00       	mov    eax,0x0
c002117c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021182:	c3                   	ret    
c0021183:	90                   	nop

c0021184 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021184:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002118a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021192:	75 0a                	jne    c002119e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021194:	b8 04 00 00 00       	mov    eax,0x4
c0021199:	e9 c9 00 00 00       	jmp    c0021267 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002119e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211a6:	75 0a                	jne    c00211b2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211a8:	b8 04 00 00 00       	mov    eax,0x4
c00211ad:	e9 b5 00 00 00       	jmp    c0021267 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211b2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211ba:	75 0a                	jne    c00211c6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211bc:	b8 04 00 00 00       	mov    eax,0x4
c00211c1:	e9 a1 00 00 00       	jmp    c0021267 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211c6:	83 ec 08             	sub    esp,0x8
c00211c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211d7:	50                   	push   eax
c00211d8:	e8 5f f6 fd ff       	call   c000083c <strcpy>
c00211dd:	83 c4 10             	add    esp,0x10
c00211e0:	83 ec 08             	sub    esp,0x8
c00211e3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211ea:	50                   	push   eax
c00211eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211f2:	e8 87 fd ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c00211f7:	83 c4 10             	add    esp,0x10
c00211fa:	83 ec 08             	sub    esp,0x8
c00211fd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021201:	50                   	push   eax
c0021202:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021209:	50                   	push   eax
c002120a:	e8 81 4f fe ff       	call   c0006190 <f_stat>
c002120f:	83 c4 10             	add    esp,0x10
c0021212:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021219:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021220:	85 c0                	test   eax,eax
c0021222:	74 07                	je     c002122b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021224:	83 f8 04             	cmp    eax,0x4
c0021227:	74 32                	je     c002125b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021229:	eb 37                	jmp    c0021262 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002122b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002122f:	0f b6 c0             	movzx  eax,al
c0021232:	83 e0 10             	and    eax,0x10
c0021235:	0f 95 c2             	setne  dl
c0021238:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002123f:	88 10                	mov    BYTE PTR [eax],dl
c0021241:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021244:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021248:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002124f:	89 01                	mov    DWORD PTR [ecx],eax
c0021251:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021254:	b8 00 00 00 00       	mov    eax,0x0
c0021259:	eb 0c                	jmp    c0021267 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002125b:	b8 02 00 00 00       	mov    eax,0x2
c0021260:	eb 05                	jmp    c0021267 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021262:	b8 01 00 00 00       	mov    eax,0x1
c0021267:	81 c4 2c 02 00 00    	add    esp,0x22c
c002126d:	c3                   	ret    

c002126e <FAT::unlink(char const*)>:
c002126e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021274:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002127c:	75 07                	jne    c0021285 <FAT::unlink(char const*)+0x17>
c002127e:	b8 04 00 00 00       	mov    eax,0x4
c0021283:	eb 5c                	jmp    c00212e1 <FAT::unlink(char const*)+0x73>
c0021285:	83 ec 08             	sub    esp,0x8
c0021288:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002128f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021293:	50                   	push   eax
c0021294:	e8 a3 f5 fd ff       	call   c000083c <strcpy>
c0021299:	83 c4 10             	add    esp,0x10
c002129c:	83 ec 08             	sub    esp,0x8
c002129f:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212a3:	50                   	push   eax
c00212a4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212ab:	e8 ce fc ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c00212b0:	83 c4 10             	add    esp,0x10
c00212b3:	83 ec 0c             	sub    esp,0xc
c00212b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212ba:	50                   	push   eax
c00212bb:	e8 22 52 fe ff       	call   c00064e2 <f_unlink>
c00212c0:	83 c4 10             	add    esp,0x10
c00212c3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212ca:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212d1:	85 c0                	test   eax,eax
c00212d3:	75 07                	jne    c00212dc <FAT::unlink(char const*)+0x6e>
c00212d5:	b8 00 00 00 00       	mov    eax,0x0
c00212da:	eb 05                	jmp    c00212e1 <FAT::unlink(char const*)+0x73>
c00212dc:	b8 01 00 00 00       	mov    eax,0x1
c00212e1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212e7:	c3                   	ret    

c00212e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212e8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212ee:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212f5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212fc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021300:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021304:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002130c:	75 0a                	jne    c0021318 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002130e:	b8 04 00 00 00       	mov    eax,0x4
c0021313:	e9 1c 01 00 00       	jmp    c0021434 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021318:	83 ec 08             	sub    esp,0x8
c002131b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021322:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021326:	50                   	push   eax
c0021327:	e8 10 f5 fd ff       	call   c000083c <strcpy>
c002132c:	83 c4 10             	add    esp,0x10
c002132f:	83 ec 08             	sub    esp,0x8
c0021332:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021336:	50                   	push   eax
c0021337:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002133e:	e8 3b fc ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c0021343:	83 c4 10             	add    esp,0x10
c0021346:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002134e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021356:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002135b:	83 e0 01             	and    eax,0x1
c002135e:	74 08                	je     c0021368 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021360:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021368:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002136d:	83 e0 02             	and    eax,0x2
c0021370:	74 08                	je     c002137a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021372:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002137a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002137f:	83 e0 04             	and    eax,0x4
c0021382:	74 08                	je     c002138c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021384:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002138c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021391:	83 e0 08             	and    eax,0x8
c0021394:	74 08                	je     c002139e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021396:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002139e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213a3:	83 e0 01             	and    eax,0x1
c00213a6:	74 08                	je     c00213b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213a8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213b5:	83 e0 02             	and    eax,0x2
c00213b8:	74 08                	je     c00213c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213ba:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213c2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c7:	83 e0 04             	and    eax,0x4
c00213ca:	74 08                	je     c00213d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213cc:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213d9:	83 e0 08             	and    eax,0x8
c00213dc:	74 08                	je     c00213e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213de:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213e6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213ed:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213f4:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213fc:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021404:	83 ec 04             	sub    esp,0x4
c0021407:	52                   	push   edx
c0021408:	50                   	push   eax
c0021409:	8d 44 24 24          	lea    eax,[esp+0x24]
c002140d:	50                   	push   eax
c002140e:	e8 71 57 fe ff       	call   c0006b84 <f_chmod>
c0021413:	83 c4 10             	add    esp,0x10
c0021416:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002141d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021424:	85 c0                	test   eax,eax
c0021426:	75 07                	jne    c002142f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021428:	b8 00 00 00 00       	mov    eax,0x0
c002142d:	eb 05                	jmp    c0021434 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002142f:	b8 01 00 00 00       	mov    eax,0x1
c0021434:	81 c4 2c 01 00 00    	add    esp,0x12c
c002143a:	c3                   	ret    
c002143b:	90                   	nop

c002143c <FAT::rename(char const*, char const*)>:
c002143c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021442:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002144a:	74 0a                	je     c0021456 <FAT::rename(char const*, char const*)+0x1a>
c002144c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021454:	75 0a                	jne    c0021460 <FAT::rename(char const*, char const*)+0x24>
c0021456:	b8 04 00 00 00       	mov    eax,0x4
c002145b:	e9 98 00 00 00       	jmp    c00214f8 <FAT::rename(char const*, char const*)+0xbc>
c0021460:	83 ec 08             	sub    esp,0x8
c0021463:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002146a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021471:	50                   	push   eax
c0021472:	e8 c5 f3 fd ff       	call   c000083c <strcpy>
c0021477:	83 c4 10             	add    esp,0x10
c002147a:	83 ec 08             	sub    esp,0x8
c002147d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021484:	50                   	push   eax
c0021485:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002148c:	e8 ed fa ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c0021491:	83 c4 10             	add    esp,0x10
c0021494:	83 ec 08             	sub    esp,0x8
c0021497:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002149e:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214a2:	50                   	push   eax
c00214a3:	e8 94 f3 fd ff       	call   c000083c <strcpy>
c00214a8:	83 c4 10             	add    esp,0x10
c00214ab:	83 ec 08             	sub    esp,0x8
c00214ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214b2:	50                   	push   eax
c00214b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ba:	e8 bf fa ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c00214bf:	83 c4 10             	add    esp,0x10
c00214c2:	83 ec 08             	sub    esp,0x8
c00214c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214c9:	50                   	push   eax
c00214ca:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214d1:	50                   	push   eax
c00214d2:	e8 ba 53 fe ff       	call   c0006891 <f_rename>
c00214d7:	83 c4 10             	add    esp,0x10
c00214da:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214e1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214e8:	85 c0                	test   eax,eax
c00214ea:	75 07                	jne    c00214f3 <FAT::rename(char const*, char const*)+0xb7>
c00214ec:	b8 00 00 00 00       	mov    eax,0x0
c00214f1:	eb 05                	jmp    c00214f8 <FAT::rename(char const*, char const*)+0xbc>
c00214f3:	b8 01 00 00 00       	mov    eax,0x1
c00214f8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00214fe:	c3                   	ret    
c00214ff:	90                   	nop

c0021500 <FAT::mkdir(char const*)>:
c0021500:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021506:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002150e:	75 07                	jne    c0021517 <FAT::mkdir(char const*)+0x17>
c0021510:	b8 04 00 00 00       	mov    eax,0x4
c0021515:	eb 5c                	jmp    c0021573 <FAT::mkdir(char const*)+0x73>
c0021517:	83 ec 08             	sub    esp,0x8
c002151a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021521:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021525:	50                   	push   eax
c0021526:	e8 11 f3 fd ff       	call   c000083c <strcpy>
c002152b:	83 c4 10             	add    esp,0x10
c002152e:	83 ec 08             	sub    esp,0x8
c0021531:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021535:	50                   	push   eax
c0021536:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002153d:	e8 3c fa ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c0021542:	83 c4 10             	add    esp,0x10
c0021545:	83 ec 0c             	sub    esp,0xc
c0021548:	8d 44 24 18          	lea    eax,[esp+0x18]
c002154c:	50                   	push   eax
c002154d:	e8 13 51 fe ff       	call   c0006665 <f_mkdir>
c0021552:	83 c4 10             	add    esp,0x10
c0021555:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002155c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021563:	85 c0                	test   eax,eax
c0021565:	75 07                	jne    c002156e <FAT::mkdir(char const*)+0x6e>
c0021567:	b8 00 00 00 00       	mov    eax,0x0
c002156c:	eb 05                	jmp    c0021573 <FAT::mkdir(char const*)+0x73>
c002156e:	b8 01 00 00 00       	mov    eax,0x1
c0021573:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021579:	c3                   	ret    

c002157a <FAT::exists(char const*)>:
c002157a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021580:	83 ec 08             	sub    esp,0x8
c0021583:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002158a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002158e:	50                   	push   eax
c002158f:	e8 a8 f2 fd ff       	call   c000083c <strcpy>
c0021594:	83 c4 10             	add    esp,0x10
c0021597:	83 ec 08             	sub    esp,0x8
c002159a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002159e:	50                   	push   eax
c002159f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215a6:	e8 d3 f9 ff ff       	call   c0020f7e <FAT::fixFilepath(char*)>
c00215ab:	83 c4 10             	add    esp,0x10
c00215ae:	83 ec 08             	sub    esp,0x8
c00215b1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215b8:	50                   	push   eax
c00215b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215bd:	50                   	push   eax
c00215be:	e8 cd 4b fe ff       	call   c0006190 <f_stat>
c00215c3:	83 c4 10             	add    esp,0x10
c00215c6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215cd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215d4:	85 c0                	test   eax,eax
c00215d6:	75 04                	jne    c00215dc <FAT::exists(char const*)+0x62>
c00215d8:	b0 01                	mov    al,0x1
c00215da:	eb 02                	jmp    c00215de <FAT::exists(char const*)+0x64>
c00215dc:	b0 00                	mov    al,0x0
c00215de:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215e4:	c3                   	ret    
c00215e5:	90                   	nop

c00215e6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215e6:	b8 08 00 00 00       	mov    eax,0x8
c00215eb:	c3                   	ret    

c00215ec <ISO9660::seek(void*, unsigned long long)>:
c00215ec:	53                   	push   ebx
c00215ed:	b8 04 00 00 00       	mov    eax,0x4
c00215f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00215fe:	85 d2                	test   edx,edx
c0021600:	74 17                	je     c0021619 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021602:	89 c8                	mov    eax,ecx
c0021604:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021607:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002160a:	b8 01 00 00 00       	mov    eax,0x1
c002160f:	73 08                	jae    c0021619 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021611:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021614:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021617:	31 c0                	xor    eax,eax
c0021619:	5b                   	pop    ebx
c002161a:	c3                   	ret    
c002161b:	90                   	nop

c002161c <ISO9660::tell(void*, unsigned long long*)>:
c002161c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021624:	85 d2                	test   edx,edx
c0021626:	74 12                	je     c002163a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021628:	85 c0                	test   eax,eax
c002162a:	74 0e                	je     c002163a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002162c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002162f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021632:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021635:	89 10                	mov    DWORD PTR [eax],edx
c0021637:	31 c0                	xor    eax,eax
c0021639:	c3                   	ret    
c002163a:	b8 04 00 00 00       	mov    eax,0x4
c002163f:	c3                   	ret    

c0021640 <ISO9660::getName()>:
c0021640:	b8 0c c9 02 c0       	mov    eax,0xc002c90c
c0021645:	c3                   	ret    

c0021646 <ISO9660::stat(void*, unsigned long long*)>:
c0021646:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002164a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002164e:	85 d2                	test   edx,edx
c0021650:	74 12                	je     c0021664 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021652:	85 c0                	test   eax,eax
c0021654:	74 0e                	je     c0021664 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021656:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021659:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002165c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002165f:	89 10                	mov    DWORD PTR [eax],edx
c0021661:	31 c0                	xor    eax,eax
c0021663:	c3                   	ret    
c0021664:	b8 04 00 00 00       	mov    eax,0x4
c0021669:	c3                   	ret    

c002166a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002166a:	b8 01 00 00 00       	mov    eax,0x1
c002166f:	c3                   	ret    

c0021670 <ISO9660::unlink(char const*)>:
c0021670:	b8 01 00 00 00       	mov    eax,0x1
c0021675:	c3                   	ret    

c0021676 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021676:	b8 01 00 00 00       	mov    eax,0x1
c002167b:	c3                   	ret    

c002167c <ISO9660::rename(char const*, char const*)>:
c002167c:	b8 01 00 00 00       	mov    eax,0x1
c0021681:	c3                   	ret    

c0021682 <ISO9660::mkdir(char const*)>:
c0021682:	b8 01 00 00 00       	mov    eax,0x1
c0021687:	c3                   	ret    

c0021688 <ISO9660::close(void*)>:
c0021688:	83 ec 0c             	sub    esp,0xc
c002168b:	b8 04 00 00 00       	mov    eax,0x4
c0021690:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021694:	85 d2                	test   edx,edx
c0021696:	74 0e                	je     c00216a6 <ISO9660::close(void*)+0x1e>
c0021698:	83 ec 0c             	sub    esp,0xc
c002169b:	52                   	push   edx
c002169c:	e8 ba e1 fe ff       	call   c000f85b <free>
c00216a1:	83 c4 10             	add    esp,0x10
c00216a4:	31 c0                	xor    eax,eax
c00216a6:	83 c4 0c             	add    esp,0xc
c00216a9:	c3                   	ret    

c00216aa <ISO9660::closeDir(void*)>:
c00216aa:	83 ec 0c             	sub    esp,0xc
c00216ad:	b8 04 00 00 00       	mov    eax,0x4
c00216b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b6:	85 d2                	test   edx,edx
c00216b8:	74 0e                	je     c00216c8 <ISO9660::closeDir(void*)+0x1e>
c00216ba:	83 ec 0c             	sub    esp,0xc
c00216bd:	52                   	push   edx
c00216be:	e8 98 e1 fe ff       	call   c000f85b <free>
c00216c3:	83 c4 10             	add    esp,0x10
c00216c6:	31 c0                	xor    eax,eax
c00216c8:	83 c4 0c             	add    esp,0xc
c00216cb:	c3                   	ret    

c00216cc <ISO9660::~ISO9660()>:
c00216cc:	83 ec 0c             	sub    esp,0xc
c00216cf:	ba 70 c9 02 c0       	mov    edx,0xc002c970
c00216d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216d8:	89 10                	mov    DWORD PTR [eax],edx
c00216da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216de:	83 ec 0c             	sub    esp,0xc
c00216e1:	50                   	push   eax
c00216e2:	e8 eb 19 ff ff       	call   c00130d2 <Filesystem::~Filesystem()>
c00216e7:	83 c4 10             	add    esp,0x10
c00216ea:	90                   	nop
c00216eb:	83 c4 0c             	add    esp,0xc
c00216ee:	c3                   	ret    
c00216ef:	90                   	nop

c00216f0 <ISO9660::~ISO9660()>:
c00216f0:	83 ec 0c             	sub    esp,0xc
c00216f3:	83 ec 0c             	sub    esp,0xc
c00216f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216fa:	e8 cd ff ff ff       	call   c00216cc <ISO9660::~ISO9660()>
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	83 ec 08             	sub    esp,0x8
c0021705:	6a 08                	push   0x8
c0021707:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002170b:	e8 b3 15 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0021710:	83 c4 10             	add    esp,0x10
c0021713:	83 c4 0c             	add    esp,0xc
c0021716:	c3                   	ret    

c0021717 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021717:	55                   	push   ebp
c0021718:	31 c9                	xor    ecx,ecx
c002171a:	57                   	push   edi
c002171b:	56                   	push   esi
c002171c:	53                   	push   ebx
c002171d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021721:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021725:	89 eb                	mov    ebx,ebp
c0021727:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002172b:	39 ce                	cmp    esi,ecx
c002172d:	7e 17                	jle    c0021746 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002172f:	31 d2                	xor    edx,edx
c0021731:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021735:	7d 13                	jge    c002174a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021737:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002173b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002173e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021741:	75 0d                	jne    c0021750 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021743:	42                   	inc    edx
c0021744:	eb eb                	jmp    c0021731 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021746:	31 c0                	xor    eax,eax
c0021748:	eb 0a                	jmp    c0021754 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002174a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002174e:	eb 04                	jmp    c0021754 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021750:	41                   	inc    ecx
c0021751:	43                   	inc    ebx
c0021752:	eb d7                	jmp    c002172b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021754:	5b                   	pop    ebx
c0021755:	5e                   	pop    esi
c0021756:	5f                   	pop    edi
c0021757:	5d                   	pop    ebp
c0021758:	c3                   	ret    

c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021759:	56                   	push   esi
c002175a:	53                   	push   ebx
c002175b:	52                   	push   edx
c002175c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021760:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021764:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021768:	39 0d 80 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b80,ecx
c002176e:	75 08                	jne    c0021778 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021770:	38 05 d4 d9 02 c0    	cmp    BYTE PTR ds:0xc002d9d4,al
c0021776:	74 2b                	je     c00217a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021778:	83 ec 0c             	sub    esp,0xc
c002177b:	a2 d4 d9 02 c0       	mov    ds:0xc002d9d4,al
c0021780:	68 a0 1b 03 c0       	push   0xc0031ba0
c0021785:	0f be c0             	movsx  eax,al
c0021788:	6a 01                	push   0x1
c002178a:	89 0d 80 1b 03 c0    	mov    DWORD PTR ds:0xc0031b80,ecx
c0021790:	31 db                	xor    ebx,ebx
c0021792:	53                   	push   ebx
c0021793:	51                   	push   ecx
c0021794:	ff 34 85 5c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16a4]
c002179b:	e8 94 4e ff ff       	call   c0016634 <LogicalDisk::read(unsigned long long, int, void*)>
c00217a0:	83 c4 20             	add    esp,0x20
c00217a3:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217ab:	c7 44 24 14 a0 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031ba0
c00217b3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217b7:	58                   	pop    eax
c00217b8:	5b                   	pop    ebx
c00217b9:	5e                   	pop    esi
c00217ba:	e9 8d ef fd ff       	jmp    c000074c <memcpy>
c00217bf:	90                   	nop

c00217c0 <ISO9660::tryMount(LogicalDisk*, int)>:
c00217c0:	81 ec 10 08 00 00    	sub    esp,0x810
c00217c6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217cd:	83 c0 41             	add    eax,0x41
c00217d0:	0f be c0             	movsx  eax,al
c00217d3:	50                   	push   eax
c00217d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217d8:	50                   	push   eax
c00217d9:	6a 10                	push   0x10
c00217db:	e8 79 ff ff ff       	call   c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217e0:	83 c4 10             	add    esp,0x10
c00217e3:	31 c0                	xor    eax,eax
c00217e5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217ea:	75 1d                	jne    c0021809 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217ec:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217f1:	75 16                	jne    c0021809 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217f3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217f8:	75 0f                	jne    c0021809 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217fa:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217ff:	75 08                	jne    c0021809 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021801:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021806:	0f 94 c0             	sete   al
c0021809:	81 c4 0c 08 00 00    	add    esp,0x80c
c002180f:	c3                   	ret    

c0021810 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021810:	55                   	push   ebp
c0021811:	57                   	push   edi
c0021812:	56                   	push   esi
c0021813:	53                   	push   ebx
c0021814:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002181a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021821:	85 ed                	test   ebp,ebp
c0021823:	0f 84 d6 01 00 00    	je     c00219ff <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021829:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021831:	0f 84 c8 01 00 00    	je     c00219ff <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021837:	b8 01 00 00 00       	mov    eax,0x1
c002183c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021840:	0f 85 be 01 00 00    	jne    c0021a04 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021846:	31 d2                	xor    edx,edx
c0021848:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002184f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021852:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021855:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021859:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002185c:	89 04 24             	mov    DWORD PTR [esp],eax
c002185f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021863:	01 f0                	add    eax,esi
c0021865:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021868:	11 fa                	adc    edx,edi
c002186a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002186e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021872:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021876:	19 d1                	sbb    ecx,edx
c0021878:	72 0a                	jb     c0021884 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002187a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002187e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021882:	eb 13                	jmp    c0021897 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002188c:	29 f0                	sub    eax,esi
c002188e:	19 fa                	sbb    edx,edi
c0021890:	89 04 24             	mov    DWORD PTR [esp],eax
c0021893:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021897:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002189a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002189d:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218a1:	51                   	push   ecx
c00218a2:	c1 e0 0b             	shl    eax,0xb
c00218a5:	01 c6                	add    esi,eax
c00218a7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218ab:	11 d7                	adc    edi,edx
c00218ad:	50                   	push   eax
c00218ae:	89 fa                	mov    edx,edi
c00218b0:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218b4:	89 f0                	mov    eax,esi
c00218b6:	53                   	push   ebx
c00218b7:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218bb:	50                   	push   eax
c00218bc:	e8 98 fe ff ff       	call   c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218c5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218c8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218cc:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218d2:	83 c4 10             	add    esp,0x10
c00218d5:	b8 00 08 00 00       	mov    eax,0x800
c00218da:	29 d0                	sub    eax,edx
c00218dc:	39 c1                	cmp    ecx,eax
c00218de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00218e2:	83 d9 00             	sbb    ecx,0x0
c00218e5:	7d 1c                	jge    c0021903 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00218e7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218ec:	75 12                	jne    c0021900 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00218ee:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218fb:	e9 fb 00 00 00       	jmp    c00219fb <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021900:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021903:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021906:	31 d2                	xor    edx,edx
c0021908:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002190c:	39 c2                	cmp    edx,eax
c002190e:	7d 14                	jge    c0021924 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021910:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021917:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002191b:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002191e:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021921:	42                   	inc    edx
c0021922:	eb e8                	jmp    c002190c <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021924:	89 c3                	mov    ebx,eax
c0021926:	85 c0                	test   eax,eax
c0021928:	79 02                	jns    c002192c <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002192a:	31 db                	xor    ebx,ebx
c002192c:	99                   	cdq    
c002192d:	01 c3                	add    ebx,eax
c002192f:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021936:	01 c6                	add    esi,eax
c0021938:	11 d7                	adc    edi,edx
c002193a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002193e:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021942:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021945:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021949:	29 c6                	sub    esi,eax
c002194b:	19 d7                	sbb    edi,edx
c002194d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021950:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021954:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021959:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002195c:	b8 00 00 00 00       	mov    eax,0x0
c0021961:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021965:	7d 3e                	jge    c00219a5 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021967:	52                   	push   edx
c0021968:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002196c:	50                   	push   eax
c002196d:	53                   	push   ebx
c002196e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021972:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021976:	0f ac d0 0b          	shrd   eax,edx,0xb
c002197a:	50                   	push   eax
c002197b:	e8 d9 fd ff ff       	call   c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021980:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021988:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002198d:	81 c3 00 08 00 00    	add    ebx,0x800
c0021993:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002199b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219a0:	83 c4 10             	add    esp,0x10
c00219a3:	eb af                	jmp    c0021954 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219a9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219ac:	74 32                	je     c00219e0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219ae:	50                   	push   eax
c00219af:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219b3:	50                   	push   eax
c00219b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219b8:	50                   	push   eax
c00219b9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219bd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219c1:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219c5:	56                   	push   esi
c00219c6:	e8 8e fd ff ff       	call   c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219cb:	83 c4 0c             	add    esp,0xc
c00219ce:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219d6:	50                   	push   eax
c00219d7:	53                   	push   ebx
c00219d8:	e8 6f ed fd ff       	call   c000074c <memcpy>
c00219dd:	83 c4 10             	add    esp,0x10
c00219e0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219ef:	89 38                	mov    DWORD PTR [eax],edi
c00219f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219f5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219f8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219fb:	31 c0                	xor    eax,eax
c00219fd:	eb 05                	jmp    c0021a04 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219ff:	b8 04 00 00 00       	mov    eax,0x4
c0021a04:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a0a:	5b                   	pop    ebx
c0021a0b:	5e                   	pop    esi
c0021a0c:	5f                   	pop    edi
c0021a0d:	5d                   	pop    ebp
c0021a0e:	c3                   	ret    
c0021a0f:	90                   	nop

c0021a10 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a10:	55                   	push   ebp
c0021a11:	57                   	push   edi
c0021a12:	56                   	push   esi
c0021a13:	53                   	push   ebx
c0021a14:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a1a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a21:	85 f6                	test   esi,esi
c0021a23:	0f 84 64 02 00 00    	je     c0021c8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a29:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a31:	0f 84 56 02 00 00    	je     c0021c8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a37:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a3a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a3d:	75 0a                	jne    c0021a49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a3f:	b8 07 00 00 00       	mov    eax,0x7
c0021a44:	e9 49 02 00 00       	jmp    c0021c92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a49:	50                   	push   eax
c0021a4a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a4e:	50                   	push   eax
c0021a4f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a56:	53                   	push   ebx
c0021a57:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a59:	c1 e0 0b             	shl    eax,0xb
c0021a5c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a5f:	c1 e8 0b             	shr    eax,0xb
c0021a62:	50                   	push   eax
c0021a63:	e8 f1 fc ff ff       	call   c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a68:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a6b:	83 c4 10             	add    esp,0x10
c0021a6e:	89 c1                	mov    ecx,eax
c0021a70:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a73:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a79:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a7c:	84 db                	test   bl,bl
c0021a7e:	0f 85 90 00 00 00    	jne    c0021b14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a84:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a8a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a90:	29 c7                	sub    edi,eax
c0021a92:	89 fb                	mov    ebx,edi
c0021a94:	c1 fb 1f             	sar    ebx,0x1f
c0021a97:	01 f8                	add    eax,edi
c0021a99:	11 da                	adc    edx,ebx
c0021a9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021aa3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021aa6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021aa9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021aac:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021aaf:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ab2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ab6:	89 d8                	mov    eax,ebx
c0021ab8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021abb:	ba 00 00 00 00       	mov    edx,0x0
c0021ac0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ac4:	b8 00 00 00 00       	mov    eax,0x0
c0021ac9:	73 0b                	jae    c0021ad6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021acb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ace:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ad2:	29 f8                	sub    eax,edi
c0021ad4:	19 da                	sbb    edx,ebx
c0021ad6:	89 d3                	mov    ebx,edx
c0021ad8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021adb:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ade:	09 c3                	or     ebx,eax
c0021ae0:	0f 84 59 ff ff ff    	je     c0021a3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ae6:	55                   	push   ebp
c0021ae7:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021aeb:	50                   	push   eax
c0021aec:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021af3:	53                   	push   ebx
c0021af4:	8b 06                	mov    eax,DWORD PTR [esi]
c0021af6:	c1 e0 0b             	shl    eax,0xb
c0021af9:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021afd:	c1 e8 0b             	shr    eax,0xb
c0021b00:	50                   	push   eax
c0021b01:	e8 53 fc ff ff       	call   c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b06:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b09:	83 c4 10             	add    esp,0x10
c0021b0c:	25 ff 07 00 00       	and    eax,0x7ff
c0021b11:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b14:	57                   	push   edi
c0021b15:	6a 28                	push   0x28
c0021b17:	6a 00                	push   0x0
c0021b19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b1d:	50                   	push   eax
c0021b1e:	e8 5d ec fd ff       	call   c0000780 <memset>
c0021b23:	31 d2                	xor    edx,edx
c0021b25:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b28:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b2e:	89 f8                	mov    eax,edi
c0021b30:	83 c0 21             	add    eax,0x21
c0021b33:	83 d2 00             	adc    edx,0x0
c0021b36:	89 c7                	mov    edi,eax
c0021b38:	89 d5                	mov    ebp,edx
c0021b3a:	83 c4 10             	add    esp,0x10
c0021b3d:	31 c9                	xor    ecx,ecx
c0021b3f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b46:	83 f9 28             	cmp    ecx,0x28
c0021b49:	88 04 24             	mov    BYTE PTR [esp],al
c0021b4c:	0f 94 c2             	sete   dl
c0021b4f:	88 d0                	mov    al,dl
c0021b51:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b56:	39 fa                	cmp    edx,edi
c0021b58:	ba 00 00 00 00       	mov    edx,0x0
c0021b5d:	19 ea                	sbb    edx,ebp
c0021b5f:	0f 92 c2             	setb   dl
c0021b62:	09 c2                	or     edx,eax
c0021b64:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b68:	0f 94 c0             	sete   al
c0021b6b:	08 d0                	or     al,dl
c0021b6d:	75 16                	jne    c0021b85 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b6f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b73:	74 10                	je     c0021b85 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b75:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b78:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b7c:	41                   	inc    ecx
c0021b7d:	83 c7 01             	add    edi,0x1
c0021b80:	83 d5 00             	adc    ebp,0x0
c0021b83:	eb ba                	jmp    c0021b3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b85:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b8c:	83 ec 0c             	sub    esp,0xc
c0021b8f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021b93:	57                   	push   edi
c0021b94:	e8 03 ec fd ff       	call   c000079c <strlen>
c0021b99:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021ba1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ba5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021baf:	5a                   	pop    edx
c0021bb0:	25 ff 07 00 00       	and    eax,0x7ff
c0021bb5:	01 c8                	add    eax,ecx
c0021bb7:	59                   	pop    ecx
c0021bb8:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bbe:	83 e0 02             	and    eax,0x2
c0021bc1:	3c 01                	cmp    al,0x1
c0021bc3:	19 c0                	sbb    eax,eax
c0021bc5:	83 c0 02             	add    eax,0x2
c0021bc8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bcc:	57                   	push   edi
c0021bcd:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bd1:	50                   	push   eax
c0021bd2:	e8 65 ec fd ff       	call   c000083c <strcpy>
c0021bd7:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bdb:	83 c4 10             	add    esp,0x10
c0021bde:	84 c0                	test   al,al
c0021be0:	75 21                	jne    c0021c03 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021be2:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bea:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bf2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bfa:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c01:	eb 28                	jmp    c0021c2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c03:	fe c8                	dec    al
c0021c05:	75 24                	jne    c0021c2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c07:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c0f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c17:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c1f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c26:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c2b:	0f b6 fb             	movzx  edi,bl
c0021c2e:	31 db                	xor    ebx,ebx
c0021c30:	50                   	push   eax
c0021c31:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c38:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c3c:	50                   	push   eax
c0021c3d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c44:	e8 03 eb fd ff       	call   c000074c <memcpy>
c0021c49:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c50:	89 f9                	mov    ecx,edi
c0021c52:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c58:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c5b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c5e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c61:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c64:	83 c4 10             	add    esp,0x10
c0021c67:	39 c7                	cmp    edi,eax
c0021c69:	89 df                	mov    edi,ebx
c0021c6b:	19 d7                	sbb    edi,edx
c0021c6d:	72 10                	jb     c0021c7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c6f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c76:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c7d:	eb 0a                	jmp    c0021c89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c7f:	29 c8                	sub    eax,ecx
c0021c81:	19 da                	sbb    edx,ebx
c0021c83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c89:	31 c0                	xor    eax,eax
c0021c8b:	eb 05                	jmp    c0021c92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c8d:	b8 04 00 00 00       	mov    eax,0x4
c0021c92:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c98:	5b                   	pop    ebx
c0021c99:	5e                   	pop    esi
c0021c9a:	5f                   	pop    edi
c0021c9b:	5d                   	pop    ebp
c0021c9c:	c3                   	ret    

c0021c9d <readRoot(unsigned int*, unsigned int*, char)>:
c0021c9d:	81 ec 40 08 00 00    	sub    esp,0x840
c0021ca3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cab:	50                   	push   eax
c0021cac:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cb0:	50                   	push   eax
c0021cb1:	6a 10                	push   0x10
c0021cb3:	e8 a1 fa ff ff       	call   c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cb8:	83 c4 0c             	add    esp,0xc
c0021cbb:	6a 22                	push   0x22
c0021cbd:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021cc4:	50                   	push   eax
c0021cc5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021cc9:	50                   	push   eax
c0021cca:	e8 7d ea fd ff       	call   c000074c <memcpy>
c0021ccf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cd6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cda:	89 10                	mov    DWORD PTR [eax],edx
c0021cdc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021ce3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ce7:	89 10                	mov    DWORD PTR [eax],edx
c0021ce9:	b0 01                	mov    al,0x1
c0021ceb:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021cf1:	c3                   	ret    

c0021cf2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021cf2:	55                   	push   ebp
c0021cf3:	57                   	push   edi
c0021cf4:	56                   	push   esi
c0021cf5:	53                   	push   ebx
c0021cf6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cfc:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d03:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d0e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d12:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d16:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d1a:	75 03                	jne    c0021d1f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d1c:	83 c3 02             	add    ebx,0x2
c0021d1f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d22:	75 03                	jne    c0021d27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d24:	43                   	inc    ebx
c0021d25:	eb f8                	jmp    c0021d1f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d27:	51                   	push   ecx
c0021d28:	68 00 01 00 00       	push   0x100
c0021d2d:	6a 00                	push   0x0
c0021d2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d33:	50                   	push   eax
c0021d34:	e8 47 ea fd ff       	call   c0000780 <memset>
c0021d39:	83 c4 10             	add    esp,0x10
c0021d3c:	31 d2                	xor    edx,edx
c0021d3e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d41:	84 c0                	test   al,al
c0021d43:	74 21                	je     c0021d66 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d45:	3c 2f                	cmp    al,0x2f
c0021d47:	75 0b                	jne    c0021d54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d49:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d4d:	bd 01 00 00 00       	mov    ebp,0x1
c0021d52:	eb 14                	jmp    c0021d68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d54:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d57:	80 f9 19             	cmp    cl,0x19
c0021d5a:	77 03                	ja     c0021d5f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d5c:	83 e8 20             	sub    eax,0x20
c0021d5f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d63:	42                   	inc    edx
c0021d64:	eb d8                	jmp    c0021d3e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d66:	31 ed                	xor    ebp,ebp
c0021d68:	83 ec 0c             	sub    esp,0xc
c0021d6b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d72:	e8 d4 da fe ff       	call   c000f84b <malloc>
c0021d77:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d7e:	89 c6                	mov    esi,eax
c0021d80:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d86:	c1 ef 0b             	shr    edi,0xb
c0021d89:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d90:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d94:	83 c4 10             	add    esp,0x10
c0021d97:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021da0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021da7:	74 28                	je     c0021dd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021da9:	52                   	push   edx
c0021daa:	57                   	push   edi
c0021dab:	50                   	push   eax
c0021dac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021db0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021db7:	e8 9d f9 ff ff       	call   c0021759 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dc0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021dc7:	05 00 08 00 00       	add    eax,0x800
c0021dcc:	83 c4 10             	add    esp,0x10
c0021dcf:	eb cb                	jmp    c0021d9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021dd1:	83 ec 0c             	sub    esp,0xc
c0021dd4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021dd8:	57                   	push   edi
c0021dd9:	e8 be e9 fd ff       	call   c000079c <strlen>
c0021dde:	50                   	push   eax
c0021ddf:	57                   	push   edi
c0021de0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021de7:	56                   	push   esi
c0021de8:	e8 2a f9 ff ff       	call   c0021717 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ded:	83 c4 20             	add    esp,0x20
c0021df0:	85 c0                	test   eax,eax
c0021df2:	75 13                	jne    c0021e07 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021df4:	83 ec 0c             	sub    esp,0xc
c0021df7:	56                   	push   esi
c0021df8:	e8 5e da fe ff       	call   c000f85b <free>
c0021dfd:	83 c4 10             	add    esp,0x10
c0021e00:	31 c0                	xor    eax,eax
c0021e02:	e9 b3 00 00 00       	jmp    c0021eba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e07:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e0b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e0f:	c1 e7 08             	shl    edi,0x8
c0021e12:	c1 e2 10             	shl    edx,0x10
c0021e15:	09 d7                	or     edi,edx
c0021e17:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e1b:	09 d7                	or     edi,edx
c0021e1d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e21:	c1 e2 18             	shl    edx,0x18
c0021e24:	09 d7                	or     edi,edx
c0021e26:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e2a:	89 d1                	mov    ecx,edx
c0021e2c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e30:	c1 e1 08             	shl    ecx,0x8
c0021e33:	c1 e2 10             	shl    edx,0x10
c0021e36:	09 ca                	or     edx,ecx
c0021e38:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e3c:	09 ca                	or     edx,ecx
c0021e3e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e42:	c1 e1 18             	shl    ecx,0x18
c0021e45:	09 ca                	or     edx,ecx
c0021e47:	89 e9                	mov    ecx,ebp
c0021e49:	84 c9                	test   cl,cl
c0021e4b:	74 3c                	je     c0021e89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e4d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e51:	83 ec 0c             	sub    esp,0xc
c0021e54:	56                   	push   esi
c0021e55:	e8 01 da fe ff       	call   c000f85b <free>
c0021e5a:	83 c4 0c             	add    esp,0xc
c0021e5d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e64:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e69:	50                   	push   eax
c0021e6a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e71:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e7c:	52                   	push   edx
c0021e7d:	57                   	push   edi
c0021e7e:	53                   	push   ebx
c0021e7f:	e8 6e fe ff ff       	call   c0021cf2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e84:	83 c4 20             	add    esp,0x20
c0021e87:	eb 31                	jmp    c0021eba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e89:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e8c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e93:	d0 e8                	shr    al,1
c0021e95:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e97:	83 e0 01             	and    eax,0x1
c0021e9a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ea1:	83 ec 0c             	sub    esp,0xc
c0021ea4:	89 13                	mov    DWORD PTR [ebx],edx
c0021ea6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ead:	89 03                	mov    DWORD PTR [ebx],eax
c0021eaf:	56                   	push   esi
c0021eb0:	e8 a6 d9 fe ff       	call   c000f85b <free>
c0021eb5:	83 c4 10             	add    esp,0x10
c0021eb8:	b0 01                	mov    al,0x1
c0021eba:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ec0:	5b                   	pop    ebx
c0021ec1:	5e                   	pop    esi
c0021ec2:	5f                   	pop    edi
c0021ec3:	5d                   	pop    ebp
c0021ec4:	c3                   	ret    

c0021ec5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ec5:	55                   	push   ebp
c0021ec6:	57                   	push   edi
c0021ec7:	56                   	push   esi
c0021ec8:	53                   	push   ebx
c0021ec9:	83 ec 20             	sub    esp,0x20
c0021ecc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ed0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ed4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ed8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ee0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ee8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021eed:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ef3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ef9:	57                   	push   edi
c0021efa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021efe:	50                   	push   eax
c0021eff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f03:	50                   	push   eax
c0021f04:	e8 94 fd ff ff       	call   c0021c9d <readRoot(unsigned int*, unsigned int*, char)>
c0021f09:	5a                   	pop    edx
c0021f0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f0e:	e8 89 e8 fd ff       	call   c000079c <strlen>
c0021f13:	83 c4 10             	add    esp,0x10
c0021f16:	83 f8 03             	cmp    eax,0x3
c0021f19:	77 17                	ja     c0021f32 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f1f:	89 03                	mov    DWORD PTR [ebx],eax
c0021f21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f25:	89 06                	mov    DWORD PTR [esi],eax
c0021f27:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f2e:	b0 01                	mov    al,0x1
c0021f30:	eb 19                	jmp    c0021f4b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f32:	50                   	push   eax
c0021f33:	55                   	push   ebp
c0021f34:	57                   	push   edi
c0021f35:	56                   	push   esi
c0021f36:	53                   	push   ebx
c0021f37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f43:	e8 aa fd ff ff       	call   c0021cf2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f48:	83 c4 20             	add    esp,0x20
c0021f4b:	83 c4 1c             	add    esp,0x1c
c0021f4e:	5b                   	pop    ebx
c0021f4f:	5e                   	pop    esi
c0021f50:	5f                   	pop    edi
c0021f51:	5d                   	pop    ebp
c0021f52:	c3                   	ret    
c0021f53:	90                   	nop

c0021f54 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f54:	57                   	push   edi
c0021f55:	56                   	push   esi
c0021f56:	53                   	push   ebx
c0021f57:	83 ec 10             	sub    esp,0x10
c0021f5a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f5e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f62:	85 ff                	test   edi,edi
c0021f64:	0f 84 9d 00 00 00    	je     c0022007 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f6a:	85 f6                	test   esi,esi
c0021f6c:	0f 84 95 00 00 00    	je     c0022007 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f72:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f77:	74 17                	je     c0021f90 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f79:	83 ec 0c             	sub    esp,0xc
c0021f7c:	68 27 c9 02 c0       	push   0xc002c927
c0021f81:	e8 1d 0e ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0021f86:	83 c4 10             	add    esp,0x10
c0021f89:	b8 03 00 00 00       	mov    eax,0x3
c0021f8e:	eb 7c                	jmp    c002200c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f90:	83 ec 0c             	sub    esp,0xc
c0021f93:	6a 1c                	push   0x1c
c0021f95:	e8 b1 d8 fe ff       	call   c000f84b <malloc>
c0021f9a:	89 07                	mov    DWORD PTR [edi],eax
c0021f9c:	89 c3                	mov    ebx,eax
c0021f9e:	58                   	pop    eax
c0021f9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fa3:	50                   	push   eax
c0021fa4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fa7:	50                   	push   eax
c0021fa8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fac:	50                   	push   eax
c0021fad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fb1:	50                   	push   eax
c0021fb2:	56                   	push   esi
c0021fb3:	e8 0d ff ff ff       	call   c0021ec5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fb8:	83 c4 20             	add    esp,0x20
c0021fbb:	84 c0                	test   al,al
c0021fbd:	74 07                	je     c0021fc6 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fbf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fc4:	74 0b                	je     c0021fd1 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fc6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fca:	b8 01 00 00 00       	mov    eax,0x1
c0021fcf:	eb 3b                	jmp    c002200c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fd5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fd9:	89 03                	mov    DWORD PTR [ebx],eax
c0021fdb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fe2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fe6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ff4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021ff7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021ffe:	8a 06                	mov    al,BYTE PTR [esi]
c0022000:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022003:	31 c0                	xor    eax,eax
c0022005:	eb 05                	jmp    c002200c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022007:	b8 04 00 00 00       	mov    eax,0x4
c002200c:	83 c4 10             	add    esp,0x10
c002200f:	5b                   	pop    ebx
c0022010:	5e                   	pop    esi
c0022011:	5f                   	pop    edi
c0022012:	c3                   	ret    
c0022013:	90                   	nop

c0022014 <ISO9660::exists(char const*)>:
c0022014:	83 ec 28             	sub    esp,0x28
c0022017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002201b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002201f:	52                   	push   edx
c0022020:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022023:	52                   	push   edx
c0022024:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022028:	52                   	push   edx
c0022029:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002202d:	52                   	push   edx
c002202e:	50                   	push   eax
c002202f:	e8 91 fe ff ff       	call   c0021ec5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022034:	83 c4 3c             	add    esp,0x3c
c0022037:	c3                   	ret    

c0022038 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022038:	56                   	push   esi
c0022039:	53                   	push   ebx
c002203a:	83 ec 14             	sub    esp,0x14
c002203d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022041:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022045:	85 db                	test   ebx,ebx
c0022047:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002204b:	0f 94 c2             	sete   dl
c002204e:	85 f6                	test   esi,esi
c0022050:	0f 94 c0             	sete   al
c0022053:	08 c2                	or     dl,al
c0022055:	75 68                	jne    c00220bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022057:	85 c9                	test   ecx,ecx
c0022059:	74 64                	je     c00220bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002205b:	83 ec 0c             	sub    esp,0xc
c002205e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022061:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022065:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002206b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022072:	50                   	push   eax
c0022073:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022076:	50                   	push   eax
c0022077:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002207b:	50                   	push   eax
c002207c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022080:	50                   	push   eax
c0022081:	51                   	push   ecx
c0022082:	e8 3e fe ff ff       	call   c0021ec5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022087:	83 c4 20             	add    esp,0x20
c002208a:	ba 01 00 00 00       	mov    edx,0x1
c002208f:	84 c0                	test   al,al
c0022091:	74 31                	je     c00220c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022093:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022097:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002209e:	89 03                	mov    DWORD PTR [ebx],eax
c00220a0:	ba 00 00 00 00       	mov    edx,0x0
c00220a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220a9:	85 c0                	test   eax,eax
c00220ab:	0f 95 06             	setne  BYTE PTR [esi]
c00220ae:	74 14                	je     c00220c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220b0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220b6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220bd:	eb 05                	jmp    c00220c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220bf:	ba 04 00 00 00       	mov    edx,0x4
c00220c4:	83 c4 14             	add    esp,0x14
c00220c7:	89 d0                	mov    eax,edx
c00220c9:	5b                   	pop    ebx
c00220ca:	5e                   	pop    esi
c00220cb:	c3                   	ret    

c00220cc <ISO9660::openDir(char const*, void**)>:
c00220cc:	57                   	push   edi
c00220cd:	56                   	push   esi
c00220ce:	53                   	push   ebx
c00220cf:	83 ec 10             	sub    esp,0x10
c00220d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220d6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220da:	85 ff                	test   edi,edi
c00220dc:	0f 84 95 00 00 00    	je     c0022177 <ISO9660::openDir(char const*, void**)+0xab>
c00220e2:	85 f6                	test   esi,esi
c00220e4:	0f 84 8d 00 00 00    	je     c0022177 <ISO9660::openDir(char const*, void**)+0xab>
c00220ea:	83 ec 0c             	sub    esp,0xc
c00220ed:	6a 1c                	push   0x1c
c00220ef:	e8 57 d7 fe ff       	call   c000f84b <malloc>
c00220f4:	89 07                	mov    DWORD PTR [edi],eax
c00220f6:	89 c3                	mov    ebx,eax
c00220f8:	59                   	pop    ecx
c00220f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220fd:	50                   	push   eax
c00220fe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022101:	50                   	push   eax
c0022102:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022106:	50                   	push   eax
c0022107:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002210b:	50                   	push   eax
c002210c:	56                   	push   esi
c002210d:	e8 b3 fd ff ff       	call   c0021ec5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022112:	83 c4 20             	add    esp,0x20
c0022115:	84 c0                	test   al,al
c0022117:	74 07                	je     c0022120 <ISO9660::openDir(char const*, void**)+0x54>
c0022119:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002211e:	75 21                	jne    c0022141 <ISO9660::openDir(char const*, void**)+0x75>
c0022120:	0f b6 c0             	movzx  eax,al
c0022123:	52                   	push   edx
c0022124:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022128:	50                   	push   eax
c0022129:	68 4d c9 02 c0       	push   0xc002c94d
c002212e:	e8 70 0c ff ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0022133:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022137:	83 c4 10             	add    esp,0x10
c002213a:	b8 01 00 00 00       	mov    eax,0x1
c002213f:	eb 3b                	jmp    c002217c <ISO9660::openDir(char const*, void**)+0xb0>
c0022141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022145:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022149:	89 03                	mov    DWORD PTR [ebx],eax
c002214b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022152:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022156:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002215d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022167:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002216e:	8a 06                	mov    al,BYTE PTR [esi]
c0022170:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022173:	31 c0                	xor    eax,eax
c0022175:	eb 05                	jmp    c002217c <ISO9660::openDir(char const*, void**)+0xb0>
c0022177:	b8 04 00 00 00       	mov    eax,0x4
c002217c:	83 c4 10             	add    esp,0x10
c002217f:	5b                   	pop    ebx
c0022180:	5e                   	pop    esi
c0022181:	5f                   	pop    edi
c0022182:	c3                   	ret    
c0022183:	90                   	nop

c0022184 <ISO9660::ISO9660()>:
c0022184:	83 ec 0c             	sub    esp,0xc
c0022187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218b:	83 ec 0c             	sub    esp,0xc
c002218e:	50                   	push   eax
c002218f:	e8 1a 0f ff ff       	call   c00130ae <Filesystem::Filesystem()>
c0022194:	83 c4 10             	add    esp,0x10
c0022197:	ba 70 c9 02 c0       	mov    edx,0xc002c970
c002219c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a0:	89 10                	mov    DWORD PTR [eax],edx
c00221a2:	90                   	nop
c00221a3:	83 c4 0c             	add    esp,0xc
c00221a6:	c3                   	ret    
c00221a7:	90                   	nop

c00221a8 <SoundChannel::~SoundChannel()>:
c00221a8:	83 ec 0c             	sub    esp,0xc
c00221ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221b2:	83 ec 0c             	sub    esp,0xc
c00221b5:	50                   	push   eax
c00221b6:	e8 a0 d6 fe ff       	call   c000f85b <free>
c00221bb:	83 c4 10             	add    esp,0x10
c00221be:	90                   	nop
c00221bf:	83 c4 0c             	add    esp,0xc
c00221c2:	c3                   	ret    
c00221c3:	90                   	nop

c00221c4 <SoundChannel::setSpeed(float)>:
c00221c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221cf:	c3                   	ret    

c00221d0 <SoundChannel::getSpeed()>:
c00221d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221d7:	c3                   	ret    

c00221d8 <SoundChannel::setVolume(int)>:
c00221d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221dc:	83 f8 64             	cmp    eax,0x64
c00221df:	7e 05                	jle    c00221e6 <SoundChannel::setVolume(int)+0xe>
c00221e1:	b8 64 00 00 00       	mov    eax,0x64
c00221e6:	85 c0                	test   eax,eax
c00221e8:	79 02                	jns    c00221ec <SoundChannel::setVolume(int)+0x14>
c00221ea:	31 c0                	xor    eax,eax
c00221ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221f0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00221f3:	c3                   	ret    

c00221f4 <SoundChannel::getVolume()>:
c00221f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00221fb:	c3                   	ret    

c00221fc <SoundChannel::pause()>:
c00221fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022200:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022204:	c3                   	ret    
c0022205:	90                   	nop

c0022206 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022206:	83 ec 1c             	sub    esp,0x1c
c0022209:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002220d:	e8 ea ff ff ff       	call   c00221fc <SoundChannel::pause()>
c0022212:	83 c4 04             	add    esp,0x4
c0022215:	6a 50                	push   0x50
c0022217:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002221b:	e8 b8 ff ff ff       	call   c00221d8 <SoundChannel::setVolume(int)>
c0022220:	83 c4 08             	add    esp,0x8
c0022223:	a1 ec c9 02 c0       	mov    eax,ds:0xc002c9ec
c0022228:	50                   	push   eax
c0022229:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002222d:	e8 92 ff ff ff       	call   c00221c4 <SoundChannel::setSpeed(float)>
c0022232:	83 c4 08             	add    esp,0x8
c0022235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022239:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002223d:	89 10                	mov    DWORD PTR [eax],edx
c002223f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022243:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022247:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002224a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002224e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022252:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022255:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002225a:	75 23                	jne    c002227f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002225c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022260:	8b 10                	mov    edx,DWORD PTR [eax]
c0022262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022269:	0f af c2             	imul   eax,edx
c002226c:	85 c0                	test   eax,eax
c002226e:	79 03                	jns    c0022273 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022270:	83 c0 03             	add    eax,0x3
c0022273:	c1 f8 02             	sar    eax,0x2
c0022276:	05 a0 0f 00 00       	add    eax,0xfa0
c002227b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002227f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022283:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022287:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002228a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002228e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022299:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222a7:	c1 e0 02             	shl    eax,0x2
c00222aa:	83 ec 0c             	sub    esp,0xc
c00222ad:	50                   	push   eax
c00222ae:	e8 98 d5 fe ff       	call   c000f84b <malloc>
c00222b3:	83 c4 10             	add    esp,0x10
c00222b6:	89 c2                	mov    edx,eax
c00222b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222bf:	83 ec 04             	sub    esp,0x4
c00222c2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222c6:	50                   	push   eax
c00222c7:	6a 01                	push   0x1
c00222c9:	6a 04                	push   0x4
c00222cb:	e8 d7 68 fe ff       	call   c0008ba7 <src_new>
c00222d0:	83 c4 10             	add    esp,0x10
c00222d3:	89 c2                	mov    edx,eax
c00222d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222e0:	85 c0                	test   eax,eax
c00222e2:	74 10                	je     c00222f4 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00222e4:	83 ec 0c             	sub    esp,0xc
c00222e7:	68 d0 c9 02 c0       	push   0xc002c9d0
c00222ec:	e8 f0 81 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c00222f1:	83 c4 10             	add    esp,0x10
c00222f4:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c00222f9:	83 f0 01             	xor    eax,0x1
c00222fc:	84 c0                	test   al,al
c00222fe:	74 57                	je     c0022357 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022300:	a1 f0 c9 02 c0       	mov    eax,ds:0xc002c9f0
c0022305:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022309:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022311:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022319:	7f 35                	jg     c0022350 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002231b:	83 ec 0c             	sub    esp,0xc
c002231e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022322:	e8 a8 4f 00 00       	call   c00272cf <__floatsisf>
c0022327:	83 c4 10             	add    esp,0x10
c002232a:	8b 15 f0 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9f0
c0022330:	83 ec 08             	sub    esp,0x8
c0022333:	52                   	push   edx
c0022334:	50                   	push   eax
c0022335:	e8 a7 4b 00 00       	call   c0026ee1 <__mulsf3>
c002233a:	83 c4 10             	add    esp,0x10
c002233d:	89 c2                	mov    edx,eax
c002233f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022343:	89 14 85 a0 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc60],edx
c002234a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002234e:	eb c1                	jmp    c0022311 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022350:	c6 05 a0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327a0,0x1
c0022357:	90                   	nop
c0022358:	83 c4 1c             	add    esp,0x1c
c002235b:	c3                   	ret    

c002235c <SoundChannel::play()>:
c002235c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022360:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022364:	c3                   	ret    
c0022365:	90                   	nop

c0022366 <SoundChannel::paused()>:
c0022366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002236d:	c3                   	ret    

c002236e <SoundChannel::getSampleRate()>:
c002236e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022372:	8b 00                	mov    eax,DWORD PTR [eax]
c0022374:	c3                   	ret    
c0022375:	90                   	nop

c0022376 <SoundChannel::getBits()>:
c0022376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002237a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002237d:	c3                   	ret    

c002237e <SoundChannel::getBufferUsed()>:
c002237e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022382:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022385:	c3                   	ret    

c0022386 <SoundChannel::getBufferSize()>:
c0022386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002238d:	c3                   	ret    

c002238e <SoundChannel::unbuffer(float*, int, int)>:
c002238e:	56                   	push   esi
c002238f:	53                   	push   ebx
c0022390:	83 ec 40             	sub    esp,0x40
c0022393:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022397:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002239a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002239e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223a5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223ad:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223b9:	e8 11 4f 00 00       	call   c00272cf <__floatsisf>
c00223be:	5a                   	pop    edx
c00223bf:	89 c6                	mov    esi,eax
c00223c1:	ff 33                	push   DWORD PTR [ebx]
c00223c3:	e8 07 4f 00 00       	call   c00272cf <__floatsisf>
c00223c8:	59                   	pop    ecx
c00223c9:	5a                   	pop    edx
c00223ca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223cd:	50                   	push   eax
c00223ce:	e8 0e 4b 00 00       	call   c0026ee1 <__mulsf3>
c00223d3:	59                   	pop    ecx
c00223d4:	5a                   	pop    edx
c00223d5:	50                   	push   eax
c00223d6:	56                   	push   esi
c00223d7:	e8 c8 4c 00 00       	call   c00270a4 <__divsf3>
c00223dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00223df:	e8 bb 61 00 00       	call   c002859f <__extendsfdf2>
c00223e4:	59                   	pop    ecx
c00223e5:	5e                   	pop    esi
c00223e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223ea:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00223ee:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00223f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00223fa:	50                   	push   eax
c00223fb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00223fe:	e8 99 63 fe ff       	call   c000879c <src_process>
c0022403:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022407:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002240a:	83 c4 0c             	add    esp,0xc
c002240d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022410:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022413:	29 d0                	sub    eax,edx
c0022415:	c1 e0 02             	shl    eax,0x2
c0022418:	50                   	push   eax
c0022419:	8d 04 91             	lea    eax,[ecx+edx*4]
c002241c:	50                   	push   eax
c002241d:	51                   	push   ecx
c002241e:	e8 61 e2 fd ff       	call   c0000684 <memmove>
c0022423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022427:	83 c4 44             	add    esp,0x44
c002242a:	5b                   	pop    ebx
c002242b:	5e                   	pop    esi
c002242c:	c3                   	ret    
c002242d:	90                   	nop

c002242e <SoundChannel::buffer8(unsigned char*, int)>:
c002242e:	55                   	push   ebp
c002242f:	57                   	push   edi
c0022430:	56                   	push   esi
c0022431:	53                   	push   ebx
c0022432:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022436:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002243a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002243d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022441:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022444:	74 7a                	je     c00224c0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022446:	85 ff                	test   edi,edi
c0022448:	7e 76                	jle    c00224c0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002244a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002244e:	8d 70 01             	lea    esi,[eax+0x1]
c0022451:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022454:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022457:	8b 1c 9d a0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc60]
c002245e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022461:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022464:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022467:	74 5e                	je     c00224c7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022469:	83 ff 01             	cmp    edi,0x1
c002246c:	74 4b                	je     c00224b9 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002246e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022472:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022475:	8d 70 01             	lea    esi,[eax+0x1]
c0022478:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002247b:	8b 1c 9d a0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc60]
c0022482:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022485:	b8 02 00 00 00       	mov    eax,0x2
c002248a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002248d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022490:	75 23                	jne    c00224b5 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022492:	eb 27                	jmp    c00224bb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022494:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022499:	8d 71 01             	lea    esi,[ecx+0x1]
c002249c:	40                   	inc    eax
c002249d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224a0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224a3:	8b 1c 9d a0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc60]
c00224aa:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224ad:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224b0:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224b3:	74 06                	je     c00224bb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224b5:	39 c7                	cmp    edi,eax
c00224b7:	75 db                	jne    c0022494 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224b9:	89 f8                	mov    eax,edi
c00224bb:	5b                   	pop    ebx
c00224bc:	5e                   	pop    esi
c00224bd:	5f                   	pop    edi
c00224be:	5d                   	pop    ebp
c00224bf:	c3                   	ret    
c00224c0:	5b                   	pop    ebx
c00224c1:	31 c0                	xor    eax,eax
c00224c3:	5e                   	pop    esi
c00224c4:	5f                   	pop    edi
c00224c5:	5d                   	pop    ebp
c00224c6:	c3                   	ret    
c00224c7:	b8 01 00 00 00       	mov    eax,0x1
c00224cc:	eb ed                	jmp    c00224bb <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224ce <SoundDevice::SoundDevice(char const*)>:
c00224ce:	83 ec 1c             	sub    esp,0x1c
c00224d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224d5:	83 ec 08             	sub    esp,0x8
c00224d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224dc:	50                   	push   eax
c00224dd:	e8 de 1e ff ff       	call   c00143c0 <Device::Device(char const*)>
c00224e2:	83 c4 10             	add    esp,0x10
c00224e5:	ba fc c9 02 c0       	mov    edx,0xc002c9fc
c00224ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ee:	89 10                	mov    DWORD PTR [eax],edx
c00224f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00224fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022502:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002250c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022514:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022519:	7f 19                	jg     c0022534 <SoundDevice::SoundDevice(char const*)+0x66>
c002251b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002251f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022523:	83 c2 54             	add    edx,0x54
c0022526:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002252e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022532:	eb e0                	jmp    c0022514 <SoundDevice::SoundDevice(char const*)+0x46>
c0022534:	90                   	nop
c0022535:	83 c4 1c             	add    esp,0x1c
c0022538:	c3                   	ret    
c0022539:	90                   	nop

c002253a <SoundDevice::~SoundDevice()>:
c002253a:	53                   	push   ebx
c002253b:	83 ec 18             	sub    esp,0x18
c002253e:	ba fc c9 02 c0       	mov    edx,0xc002c9fc
c0022543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022547:	89 10                	mov    DWORD PTR [eax],edx
c0022549:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022551:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022556:	7f 46                	jg     c002259e <SoundDevice::~SoundDevice()+0x64>
c0022558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022560:	83 c2 54             	add    edx,0x54
c0022563:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022567:	85 c0                	test   eax,eax
c0022569:	74 2d                	je     c0022598 <SoundDevice::~SoundDevice()+0x5e>
c002256b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022573:	83 c2 54             	add    edx,0x54
c0022576:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002257a:	85 db                	test   ebx,ebx
c002257c:	74 1a                	je     c0022598 <SoundDevice::~SoundDevice()+0x5e>
c002257e:	83 ec 0c             	sub    esp,0xc
c0022581:	53                   	push   ebx
c0022582:	e8 21 fc ff ff       	call   c00221a8 <SoundChannel::~SoundChannel()>
c0022587:	83 c4 10             	add    esp,0x10
c002258a:	83 ec 08             	sub    esp,0x8
c002258d:	6a 2c                	push   0x2c
c002258f:	53                   	push   ebx
c0022590:	e8 2e 07 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0022595:	83 c4 10             	add    esp,0x10
c0022598:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002259c:	eb b3                	jmp    c0022551 <SoundDevice::~SoundDevice()+0x17>
c002259e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a2:	83 ec 0c             	sub    esp,0xc
c00225a5:	50                   	push   eax
c00225a6:	e8 f7 1a ff ff       	call   c00140a2 <Device::~Device()>
c00225ab:	83 c4 10             	add    esp,0x10
c00225ae:	90                   	nop
c00225af:	83 c4 18             	add    esp,0x18
c00225b2:	5b                   	pop    ebx
c00225b3:	c3                   	ret    

c00225b4 <SoundDevice::~SoundDevice()>:
c00225b4:	83 ec 0c             	sub    esp,0xc
c00225b7:	83 ec 0c             	sub    esp,0xc
c00225ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225be:	e8 77 ff ff ff       	call   c002253a <SoundDevice::~SoundDevice()>
c00225c3:	83 c4 10             	add    esp,0x10
c00225c6:	83 ec 08             	sub    esp,0x8
c00225c9:	68 e4 01 00 00       	push   0x1e4
c00225ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225d2:	e8 ec 06 ff ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00225d7:	83 c4 10             	add    esp,0x10
c00225da:	83 c4 0c             	add    esp,0xc
c00225dd:	c3                   	ret    

c00225de <SoundDevice::getFreeChannelNum()>:
c00225de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225e2:	31 c0                	xor    eax,eax
c00225e4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00225ec:	74 09                	je     c00225f7 <SoundDevice::getFreeChannelNum()+0x19>
c00225ee:	40                   	inc    eax
c00225ef:	83 f8 20             	cmp    eax,0x20
c00225f2:	75 f0                	jne    c00225e4 <SoundDevice::getFreeChannelNum()+0x6>
c00225f4:	83 c8 ff             	or     eax,0xffffffff
c00225f7:	c3                   	ret    

c00225f8 <SoundDevice::addChannel(SoundChannel*)>:
c00225f8:	56                   	push   esi
c00225f9:	53                   	push   ebx
c00225fa:	51                   	push   ecx
c00225fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00225ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022603:	53                   	push   ebx
c0022604:	e8 d5 ff ff ff       	call   c00225de <SoundDevice::getFreeChannelNum()>
c0022609:	5a                   	pop    edx
c002260a:	83 f8 ff             	cmp    eax,0xffffffff
c002260d:	74 51                	je     c0022660 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002260f:	85 f6                	test   esi,esi
c0022611:	74 4d                	je     c0022660 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022613:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002261a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022621:	75 30                	jne    c0022653 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022623:	83 ec 0c             	sub    esp,0xc
c0022626:	56                   	push   esi
c0022627:	e8 42 fd ff ff       	call   c002236e <SoundChannel::getSampleRate()>
c002262c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022632:	89 34 24             	mov    DWORD PTR [esp],esi
c0022635:	e8 3c fd ff ff       	call   c0022376 <SoundChannel::getBits()>
c002263a:	83 c4 0c             	add    esp,0xc
c002263d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022643:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022645:	50                   	push   eax
c0022646:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002264c:	53                   	push   ebx
c002264d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022650:	83 c4 10             	add    esp,0x10
c0022653:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022659:	b8 01 00 00 00       	mov    eax,0x1
c002265e:	eb 03                	jmp    c0022663 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022660:	83 c8 ff             	or     eax,0xffffffff
c0022663:	5a                   	pop    edx
c0022664:	5b                   	pop    ebx
c0022665:	5e                   	pop    esi
c0022666:	c3                   	ret    
c0022667:	90                   	nop

c0022668 <SoundDevice::removeChannel(int)>:
c0022668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002266c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022670:	83 fa 1f             	cmp    edx,0x1f
c0022673:	77 23                	ja     c0022698 <SoundDevice::removeChannel(int)+0x30>
c0022675:	8d 14 90             	lea    edx,[eax+edx*4]
c0022678:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002267f:	74 17                	je     c0022698 <SoundDevice::removeChannel(int)+0x30>
c0022681:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002268b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022691:	75 05                	jne    c0022698 <SoundDevice::removeChannel(int)+0x30>
c0022693:	8b 00                	mov    eax,DWORD PTR [eax]
c0022695:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022698:	c3                   	ret    
c0022699:	90                   	nop

c002269a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002269a:	57                   	push   edi
c002269b:	56                   	push   esi
c002269c:	53                   	push   ebx
c002269d:	31 db                	xor    ebx,ebx
c002269f:	83 ec 10             	sub    esp,0x10
c00226a2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226a6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226aa:	0f 8d cb 00 00 00    	jge    c002277b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226b0:	83 ec 0c             	sub    esp,0xc
c00226b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226b7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226ba:	e8 e0 5e 00 00       	call   c002859f <__extendsfdf2>
c00226bf:	83 c4 10             	add    esp,0x10
c00226c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226ca:	68 00 00 f0 3f       	push   0x3ff00000
c00226cf:	6a 00                	push   0x0
c00226d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d9:	e8 4d 4e 00 00       	call   c002752b <__adddf3>
c00226de:	83 c4 10             	add    esp,0x10
c00226e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226e9:	68 00 00 e0 3f       	push   0x3fe00000
c00226ee:	6a 00                	push   0x0
c00226f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f8:	e8 ab 54 00 00       	call   c0027ba8 <__muldf3>
c00226fd:	83 c4 10             	add    esp,0x10
c0022700:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022704:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022708:	68 00 00 60 40       	push   0x40600000
c002270d:	6a 00                	push   0x0
c002270f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022713:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022717:	e8 8c 54 00 00       	call   c0027ba8 <__muldf3>
c002271c:	59                   	pop    ecx
c002271d:	5f                   	pop    edi
c002271e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022722:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002272a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002272e:	e8 48 5d 00 00       	call   c002847b <__truncdfsf2>
c0022733:	5a                   	pop    edx
c0022734:	89 c7                	mov    edi,eax
c0022736:	59                   	pop    ecx
c0022737:	68 00 00 fe 42       	push   0x42fe0000
c002273c:	50                   	push   eax
c002273d:	e8 e3 4d 00 00       	call   c0027525 <__gesf2>
c0022742:	83 c4 10             	add    esp,0x10
c0022745:	85 c0                	test   eax,eax
c0022747:	78 06                	js     c002274f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022749:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002274d:	eb 26                	jmp    c0022775 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002274f:	50                   	push   eax
c0022750:	50                   	push   eax
c0022751:	6a 00                	push   0x0
c0022753:	57                   	push   edi
c0022754:	e8 d0 4d 00 00       	call   c0027529 <__lesf2>
c0022759:	83 c4 10             	add    esp,0x10
c002275c:	85 c0                	test   eax,eax
c002275e:	7f 06                	jg     c0022766 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022760:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022764:	eb 0f                	jmp    c0022775 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022766:	83 ec 0c             	sub    esp,0xc
c0022769:	57                   	push   edi
c002276a:	e8 cd 5e 00 00       	call   c002863c <lrintf>
c002276f:	83 c4 10             	add    esp,0x10
c0022772:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022775:	43                   	inc    ebx
c0022776:	e9 2b ff ff ff       	jmp    c00226a6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002277b:	83 c4 10             	add    esp,0x10
c002277e:	5b                   	pop    ebx
c002277f:	5e                   	pop    esi
c0022780:	5f                   	pop    edi
c0022781:	c3                   	ret    

c0022782 <SoundDevice::getAudio(int, float*, float*)>:
c0022782:	55                   	push   ebp
c0022783:	57                   	push   edi
c0022784:	56                   	push   esi
c0022785:	53                   	push   ebx
c0022786:	31 db                	xor    ebx,ebx
c0022788:	83 ec 20             	sub    esp,0x20
c002278b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002278f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022793:	c1 e0 02             	shl    eax,0x2
c0022796:	50                   	push   eax
c0022797:	6a 00                	push   0x0
c0022799:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002279d:	e8 de df fd ff       	call   c0000780 <memset>
c00227a2:	83 c4 10             	add    esp,0x10
c00227a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227a9:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227b0:	85 c0                	test   eax,eax
c00227b2:	0f 84 d7 00 00 00    	je     c002288f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227b8:	83 ec 0c             	sub    esp,0xc
c00227bb:	50                   	push   eax
c00227bc:	e8 a5 fb ff ff       	call   c0022366 <SoundChannel::paused()>
c00227c1:	83 c4 10             	add    esp,0x10
c00227c4:	84 c0                	test   al,al
c00227c6:	0f 85 c3 00 00 00    	jne    c002288f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227cc:	83 ec 0c             	sub    esp,0xc
c00227cf:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227d6:	e8 19 fa ff ff       	call   c00221f4 <SoundChannel::getVolume()>
c00227db:	83 c4 10             	add    esp,0x10
c00227de:	85 c0                	test   eax,eax
c00227e0:	0f 84 a9 00 00 00    	je     c002288f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227e6:	83 ec 0c             	sub    esp,0xc
c00227e9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227f0:	e8 ff f9 ff ff       	call   c00221f4 <SoundChannel::getVolume()>
c00227f5:	83 ec 0c             	sub    esp,0xc
c00227f8:	50                   	push   eax
c00227f9:	e8 d1 4a 00 00       	call   c00272cf <__floatsisf>
c00227fe:	59                   	pop    ecx
c00227ff:	5d                   	pop    ebp
c0022800:	31 ed                	xor    ebp,ebp
c0022802:	68 00 00 c8 42       	push   0x42c80000
c0022807:	50                   	push   eax
c0022808:	e8 97 48 00 00       	call   c00270a4 <__divsf3>
c002280d:	83 c4 10             	add    esp,0x10
c0022810:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022814:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022818:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002281e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022822:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022829:	e8 60 fb ff ff       	call   c002238e <SoundChannel::unbuffer(float*, int, int)>
c002282e:	83 c4 20             	add    esp,0x20
c0022831:	89 c1                	mov    ecx,eax
c0022833:	39 cd                	cmp    ebp,ecx
c0022835:	7d 52                	jge    c0022889 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022837:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002283b:	50                   	push   eax
c002283c:	50                   	push   eax
c002283d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022841:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022844:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022848:	e8 94 46 00 00       	call   c0026ee1 <__mulsf3>
c002284d:	5a                   	pop    edx
c002284e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022852:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022858:	e8 72 4a 00 00       	call   c00272cf <__floatsisf>
c002285d:	59                   	pop    ecx
c002285e:	5a                   	pop    edx
c002285f:	50                   	push   eax
c0022860:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022864:	e8 3b 48 00 00       	call   c00270a4 <__divsf3>
c0022869:	59                   	pop    ecx
c002286a:	5a                   	pop    edx
c002286b:	50                   	push   eax
c002286c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022870:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022873:	e8 46 43 00 00       	call   c0026bbe <__addsf3>
c0022878:	83 c4 10             	add    esp,0x10
c002287b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002287f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022883:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022886:	45                   	inc    ebp
c0022887:	eb aa                	jmp    c0022833 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022889:	39 cf                	cmp    edi,ecx
c002288b:	7e 02                	jle    c002288f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002288d:	89 cf                	mov    edi,ecx
c002288f:	43                   	inc    ebx
c0022890:	83 fb 20             	cmp    ebx,0x20
c0022893:	0f 85 10 ff ff ff    	jne    c00227a9 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022899:	83 c4 1c             	add    esp,0x1c
c002289c:	89 f8                	mov    eax,edi
c002289e:	5b                   	pop    ebx
c002289f:	5e                   	pop    esi
c00228a0:	5f                   	pop    edi
c00228a1:	5d                   	pop    ebp
c00228a2:	c3                   	ret    
c00228a3:	90                   	nop

c00228a4 <PCI::open(int, int, void*)>:
c00228a4:	83 ec 18             	sub    esp,0x18
c00228a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00228ad:	50                   	push   eax
c00228ae:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228b1:	31 c0                	xor    eax,eax
c00228b3:	83 c4 1c             	add    esp,0x1c
c00228b6:	c3                   	ret    
c00228b7:	90                   	nop

c00228b8 <PCI::close(int, int, void*)>:
c00228b8:	31 c0                	xor    eax,eax
c00228ba:	c3                   	ret    
c00228bb:	90                   	nop

c00228bc <PCI::PCI()>:
c00228bc:	83 ec 0c             	sub    esp,0xc
c00228bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c3:	83 ec 08             	sub    esp,0x8
c00228c6:	68 2c ca 02 c0       	push   0xc002ca2c
c00228cb:	50                   	push   eax
c00228cc:	e8 73 11 ff ff       	call   c0013a44 <Bus::Bus(char const*)>
c00228d1:	83 c4 10             	add    esp,0x10
c00228d4:	ba 98 ca 02 c0       	mov    edx,0xc002ca98
c00228d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228dd:	89 10                	mov    DWORD PTR [eax],edx
c00228df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228e9:	0f b6 d0             	movzx  edx,al
c00228ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f0:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00228f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022901:	0f b6 d0             	movzx  edx,al
c0022904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022908:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002290d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022911:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022917:	8d 50 01             	lea    edx,[eax+0x1]
c002291a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002291e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022924:	0f b6 d0             	movzx  edx,al
c0022927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002292f:	83 c9 c0             	or     ecx,0xffffffc0
c0022932:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022936:	90                   	nop
c0022937:	83 c4 0c             	add    esp,0xc
c002293a:	c3                   	ret    
c002293b:	90                   	nop

c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002293c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022940:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022945:	89 ca                	mov    edx,ecx
c0022947:	c1 e0 10             	shl    eax,0x10
c002294a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022950:	09 d0                	or     eax,edx
c0022952:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022957:	c1 e2 08             	shl    edx,0x8
c002295a:	09 d0                	or     eax,edx
c002295c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022961:	c1 e2 0b             	shl    edx,0xb
c0022964:	09 d0                	or     eax,edx
c0022966:	ba f8 0c 00 00       	mov    edx,0xcf8
c002296b:	0d 00 00 00 80       	or     eax,0x80000000
c0022970:	ef                   	out    dx,eax
c0022971:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022976:	ed                   	in     eax,dx
c0022977:	83 e1 02             	and    ecx,0x2
c002297a:	0f b6 c9             	movzx  ecx,cl
c002297d:	c1 e1 03             	shl    ecx,0x3
c0022980:	d3 e8                	shr    eax,cl
c0022982:	c3                   	ret    
c0022983:	90                   	nop

c0022984 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022984:	6a 00                	push   0x0
c0022986:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002298b:	50                   	push   eax
c002298c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022991:	50                   	push   eax
c0022992:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022997:	50                   	push   eax
c0022998:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002299c:	e8 9b ff ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229a1:	83 c4 14             	add    esp,0x14
c00229a4:	c3                   	ret    
c00229a5:	90                   	nop

c00229a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229a6:	6a 0e                	push   0xe
c00229a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ad:	50                   	push   eax
c00229ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b3:	50                   	push   eax
c00229b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b9:	50                   	push   eax
c00229ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229be:	e8 79 ff ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229c3:	83 c4 14             	add    esp,0x14
c00229c6:	0f b6 c0             	movzx  eax,al
c00229c9:	c3                   	ret    

c00229ca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229ca:	55                   	push   ebp
c00229cb:	57                   	push   edi
c00229cc:	56                   	push   esi
c00229cd:	53                   	push   ebx
c00229ce:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229d3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229d8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229dd:	6a 0a                	push   0xa
c00229df:	56                   	push   esi
c00229e0:	55                   	push   ebp
c00229e1:	57                   	push   edi
c00229e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229e6:	e8 51 ff ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229eb:	6a 0a                	push   0xa
c00229ed:	89 c3                	mov    ebx,eax
c00229ef:	56                   	push   esi
c00229f0:	0f b6 db             	movzx  ebx,bl
c00229f3:	55                   	push   ebp
c00229f4:	57                   	push   edi
c00229f5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00229f9:	e8 3e ff ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229fe:	83 c4 28             	add    esp,0x28
c0022a01:	25 00 ff 00 00       	and    eax,0xff00
c0022a06:	09 d8                	or     eax,ebx
c0022a08:	5b                   	pop    ebx
c0022a09:	5e                   	pop    esi
c0022a0a:	5f                   	pop    edi
c0022a0b:	5d                   	pop    ebp
c0022a0c:	c3                   	ret    
c0022a0d:	90                   	nop

c0022a0e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a0e:	6a 08                	push   0x8
c0022a10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a15:	50                   	push   eax
c0022a16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1b:	50                   	push   eax
c0022a1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a21:	50                   	push   eax
c0022a22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a26:	e8 11 ff ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a2b:	83 c4 14             	add    esp,0x14
c0022a2e:	0f b6 c4             	movzx  eax,ah
c0022a31:	c3                   	ret    

c0022a32 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a32:	6a 08                	push   0x8
c0022a34:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a39:	50                   	push   eax
c0022a3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3f:	50                   	push   eax
c0022a40:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a45:	50                   	push   eax
c0022a46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a4a:	e8 ed fe ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a4f:	83 c4 14             	add    esp,0x14
c0022a52:	c3                   	ret    
c0022a53:	90                   	nop

c0022a54 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a54:	6a 3c                	push   0x3c
c0022a56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5b:	50                   	push   eax
c0022a5c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a61:	50                   	push   eax
c0022a62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a67:	50                   	push   eax
c0022a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6c:	e8 cb fe ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a71:	83 c4 14             	add    esp,0x14
c0022a74:	c3                   	ret    
c0022a75:	90                   	nop

c0022a76 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a76:	6a 18                	push   0x18
c0022a78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7d:	50                   	push   eax
c0022a7e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a83:	50                   	push   eax
c0022a84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a89:	50                   	push   eax
c0022a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8e:	e8 a9 fe ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a93:	83 c4 14             	add    esp,0x14
c0022a96:	0f b6 c4             	movzx  eax,ah
c0022a99:	c3                   	ret    

c0022a9a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a9a:	55                   	push   ebp
c0022a9b:	57                   	push   edi
c0022a9c:	56                   	push   esi
c0022a9d:	53                   	push   ebx
c0022a9e:	50                   	push   eax
c0022a9f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022aa3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022aa8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022aad:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022ab2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022ab9:	8d 43 12             	lea    eax,[ebx+0x12]
c0022abc:	83 c3 10             	add    ebx,0x10
c0022abf:	0f b6 c0             	movzx  eax,al
c0022ac2:	0f b6 db             	movzx  ebx,bl
c0022ac5:	50                   	push   eax
c0022ac6:	51                   	push   ecx
c0022ac7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022acb:	57                   	push   edi
c0022acc:	55                   	push   ebp
c0022acd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022ad1:	e8 66 fe ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ad6:	53                   	push   ebx
c0022ad7:	89 c6                	mov    esi,eax
c0022ad9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022add:	c1 e6 10             	shl    esi,0x10
c0022ae0:	51                   	push   ecx
c0022ae1:	57                   	push   edi
c0022ae2:	55                   	push   ebp
c0022ae3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ae7:	e8 50 fe ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aec:	83 c4 2c             	add    esp,0x2c
c0022aef:	0f b7 c0             	movzx  eax,ax
c0022af2:	5b                   	pop    ebx
c0022af3:	09 f0                	or     eax,esi
c0022af5:	5e                   	pop    esi
c0022af6:	5f                   	pop    edi
c0022af7:	5d                   	pop    ebp
c0022af8:	c3                   	ret    
c0022af9:	90                   	nop

c0022afa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022afa:	53                   	push   ebx
c0022afb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b00:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b09:	c1 e1 10             	shl    ecx,0x10
c0022b0c:	25 fc 00 00 00       	and    eax,0xfc
c0022b11:	09 c1                	or     ecx,eax
c0022b13:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b18:	c1 e0 08             	shl    eax,0x8
c0022b1b:	09 c1                	or     ecx,eax
c0022b1d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b22:	c1 e0 0b             	shl    eax,0xb
c0022b25:	09 c1                	or     ecx,eax
c0022b27:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b2d:	89 c8                	mov    eax,ecx
c0022b2f:	ef                   	out    dx,eax
c0022b30:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b35:	ed                   	in     eax,dx
c0022b36:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b3b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b40:	74 0a                	je     c0022b4c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b42:	0f b7 d8             	movzx  ebx,ax
c0022b45:	89 d0                	mov    eax,edx
c0022b47:	c1 e0 10             	shl    eax,0x10
c0022b4a:	eb 05                	jmp    c0022b51 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b4c:	66 31 c0             	xor    ax,ax
c0022b4f:	89 d3                	mov    ebx,edx
c0022b51:	09 c3                	or     ebx,eax
c0022b53:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b58:	89 c8                	mov    eax,ecx
c0022b5a:	ef                   	out    dx,eax
c0022b5b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b60:	89 d8                	mov    eax,ebx
c0022b62:	ef                   	out    dx,eax
c0022b63:	5b                   	pop    ebx
c0022b64:	c3                   	ret    
c0022b65:	90                   	nop

c0022b66 <PCI::checkBus(unsigned char)>:
c0022b66:	56                   	push   esi
c0022b67:	53                   	push   ebx
c0022b68:	31 db                	xor    ebx,ebx
c0022b6a:	51                   	push   ecx
c0022b6b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b70:	52                   	push   edx
c0022b71:	53                   	push   ebx
c0022b72:	43                   	inc    ebx
c0022b73:	56                   	push   esi
c0022b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b78:	e8 2b 03 00 00       	call   c0022ea8 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b7d:	83 c4 10             	add    esp,0x10
c0022b80:	83 fb 20             	cmp    ebx,0x20
c0022b83:	75 eb                	jne    c0022b70 <PCI::checkBus(unsigned char)+0xa>
c0022b85:	58                   	pop    eax
c0022b86:	5b                   	pop    ebx
c0022b87:	5e                   	pop    esi
c0022b88:	c3                   	ret    
c0022b89:	90                   	nop

c0022b8a <PCI::foundDevice(PCIDeviceInfo)>:
c0022b8a:	55                   	push   ebp
c0022b8b:	57                   	push   edi
c0022b8c:	56                   	push   esi
c0022b8d:	53                   	push   ebx
c0022b8e:	83 ec 1c             	sub    esp,0x1c
c0022b91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b95:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b9b:	0f 84 52 01 00 00    	je     c0022cf3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ba1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ba5:	66 81 f9 06 04       	cmp    cx,0x406
c0022baa:	75 2c                	jne    c0022bd8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bac:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bb1:	50                   	push   eax
c0022bb2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bb7:	50                   	push   eax
c0022bb8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bbd:	50                   	push   eax
c0022bbe:	56                   	push   esi
c0022bbf:	e8 b2 fe ff ff       	call   c0022a76 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022bc4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022bc8:	0f b6 c0             	movzx  eax,al
c0022bcb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bcf:	83 c4 2c             	add    esp,0x2c
c0022bd2:	5b                   	pop    ebx
c0022bd3:	5e                   	pop    esi
c0022bd4:	5f                   	pop    edi
c0022bd5:	5d                   	pop    ebp
c0022bd6:	eb 8e                	jmp    c0022b66 <PCI::checkBus(unsigned char)>
c0022bd8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bdc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022be2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022be6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bea:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022bee:	88 d3                	mov    bl,dl
c0022bf0:	85 c0                	test   eax,eax
c0022bf2:	74 33                	je     c0022c27 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022bf4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022bf7:	85 d2                	test   edx,edx
c0022bf9:	74 28                	je     c0022c23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bfb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c01:	31 ef                	xor    edi,ebp
c0022c03:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c09:	75 18                	jne    c0022c23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c0b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c0f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c15:	75 0c                	jne    c0022c23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c17:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c1d:	0f 84 d0 00 00 00    	je     c0022cf3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c25:	eb c9                	jmp    c0022bf0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c27:	66 81 f9 01 06       	cmp    cx,0x601
c0022c2c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c30:	75 19                	jne    c0022c4b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c32:	83 ec 0c             	sub    esp,0xc
c0022c35:	68 64 01 00 00       	push   0x164
c0022c3a:	e8 0c cc fe ff       	call   c000f84b <malloc>
c0022c3f:	89 c5                	mov    ebp,eax
c0022c41:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c44:	e8 95 0f 00 00       	call   c0023bde <SATABus::SATABus()>
c0022c49:	eb 1e                	jmp    c0022c69 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c4b:	66 81 f9 01 01       	cmp    cx,0x101
c0022c50:	75 60                	jne    c0022cb2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c52:	83 ec 0c             	sub    esp,0xc
c0022c55:	68 70 02 00 00       	push   0x270
c0022c5a:	e8 ec cb fe ff       	call   c000f84b <malloc>
c0022c5f:	89 c5                	mov    ebp,eax
c0022c61:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c64:	e8 03 03 00 00       	call   c0022f6c <IDE::IDE()>
c0022c69:	58                   	pop    eax
c0022c6a:	5a                   	pop    edx
c0022c6b:	55                   	push   ebp
c0022c6c:	56                   	push   esi
c0022c6d:	e8 5e 15 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0022c72:	83 ec 1c             	sub    esp,0x1c
c0022c75:	b9 09 00 00 00       	mov    ecx,0x9
c0022c7a:	fc                   	cld    
c0022c7b:	89 e7                	mov    edi,esp
c0022c7d:	89 de                	mov    esi,ebx
c0022c7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c81:	55                   	push   ebp
c0022c82:	e8 53 14 ff ff       	call   c00140da <Device::preOpenPCI(PCIDeviceInfo)>
c0022c87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c8a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c8e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c96:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c9e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022ca6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ca9:	83 c4 4c             	add    esp,0x4c
c0022cac:	5b                   	pop    ebx
c0022cad:	5e                   	pop    esi
c0022cae:	5f                   	pop    edi
c0022caf:	5d                   	pop    ebp
c0022cb0:	ff e0                	jmp    eax
c0022cb2:	83 ec 0c             	sub    esp,0xc
c0022cb5:	68 58 01 00 00       	push   0x158
c0022cba:	e8 8c cb fe ff       	call   c000f84b <malloc>
c0022cbf:	89 c5                	mov    ebp,eax
c0022cc1:	58                   	pop    eax
c0022cc2:	5a                   	pop    edx
c0022cc3:	68 34 ca 02 c0       	push   0xc002ca34
c0022cc8:	55                   	push   ebp
c0022cc9:	e8 f8 17 ff ff       	call   c00144c6 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cce:	59                   	pop    ecx
c0022ccf:	5f                   	pop    edi
c0022cd0:	55                   	push   ebp
c0022cd1:	56                   	push   esi
c0022cd2:	e8 f9 14 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0022cd7:	b9 09 00 00 00       	mov    ecx,0x9
c0022cdc:	fc                   	cld    
c0022cdd:	89 df                	mov    edi,ebx
c0022cdf:	89 de                	mov    esi,ebx
c0022ce1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ce3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022ce7:	83 c4 2c             	add    esp,0x2c
c0022cea:	5b                   	pop    ebx
c0022ceb:	5e                   	pop    esi
c0022cec:	5f                   	pop    edi
c0022ced:	5d                   	pop    ebp
c0022cee:	e9 e7 13 ff ff       	jmp    c00140da <Device::preOpenPCI(PCIDeviceInfo)>
c0022cf3:	83 c4 1c             	add    esp,0x1c
c0022cf6:	5b                   	pop    ebx
c0022cf7:	5e                   	pop    esi
c0022cf8:	5f                   	pop    edi
c0022cf9:	5d                   	pop    ebp
c0022cfa:	c3                   	ret    
c0022cfb:	90                   	nop

c0022cfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022cfc:	55                   	push   ebp
c0022cfd:	57                   	push   edi
c0022cfe:	56                   	push   esi
c0022cff:	53                   	push   ebx
c0022d00:	83 ec 5c             	sub    esp,0x5c
c0022d03:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d0f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d18:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d1c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d25:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d2a:	6a 0c                	push   0xc
c0022d2c:	55                   	push   ebp
c0022d2d:	53                   	push   ebx
c0022d2e:	57                   	push   edi
c0022d2f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d36:	e8 01 fc ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d3b:	55                   	push   ebp
c0022d3c:	53                   	push   ebx
c0022d3d:	57                   	push   edi
c0022d3e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d45:	e8 80 fc ff ff       	call   c00229ca <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d4a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d4f:	83 c4 24             	add    esp,0x24
c0022d52:	55                   	push   ebp
c0022d53:	53                   	push   ebx
c0022d54:	57                   	push   edi
c0022d55:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d59:	e8 f6 fc ff ff       	call   c0022a54 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d5e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d62:	6a 3c                	push   0x3c
c0022d64:	55                   	push   ebp
c0022d65:	53                   	push   ebx
c0022d66:	57                   	push   edi
c0022d67:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d6e:	e8 c9 fb ff ff       	call   c002293c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d73:	0f b6 c4             	movzx  eax,ah
c0022d76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d7a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d7e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d82:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0022d87:	83 c4 24             	add    esp,0x24
c0022d8a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d90:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d97:	74 6c                	je     c0022e05 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d99:	31 f6                	xor    esi,esi
c0022d9b:	8b 15 48 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e448
c0022da1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022da7:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022dad:	7e 56                	jle    c0022e05 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022daf:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022db2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022db9:	39 cb                	cmp    ebx,ecx
c0022dbb:	75 45                	jne    c0022e02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dbd:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022dc4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022dc8:	75 38                	jne    c0022e02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dca:	83 ec 0c             	sub    esp,0xc
c0022dcd:	68 4e ca 02 c0       	push   0xc002ca4e
c0022dd2:	e8 cc ff fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0022dd7:	8b 15 48 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e448
c0022ddd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022de3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022deb:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022def:	52                   	push   edx
c0022df0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022df4:	53                   	push   ebx
c0022df5:	68 73 ca 02 c0       	push   0xc002ca73
c0022dfa:	e8 a4 ff fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0022dff:	83 c4 20             	add    esp,0x20
c0022e02:	46                   	inc    esi
c0022e03:	eb 96                	jmp    c0022d9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e05:	31 d2                	xor    edx,edx
c0022e07:	83 ec 0c             	sub    esp,0xc
c0022e0a:	55                   	push   ebp
c0022e0b:	53                   	push   ebx
c0022e0c:	57                   	push   edi
c0022e0d:	52                   	push   edx
c0022e0e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e12:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e19:	e8 7c fc ff ff       	call   c0022a9a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e1e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e22:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e26:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e2a:	42                   	inc    edx
c0022e2b:	83 c4 20             	add    esp,0x20
c0022e2e:	83 fa 06             	cmp    edx,0x6
c0022e31:	75 d4                	jne    c0022e07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e33:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e37:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e3b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e3f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e43:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e47:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e4b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e50:	86 e0                	xchg   al,ah
c0022e52:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e57:	55                   	push   ebp
c0022e58:	53                   	push   ebx
c0022e59:	57                   	push   edi
c0022e5a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e5e:	e8 ab fb ff ff       	call   c0022a0e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e63:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e67:	55                   	push   ebp
c0022e68:	53                   	push   ebx
c0022e69:	57                   	push   edi
c0022e6a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e71:	e8 0e fb ff ff       	call   c0022984 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e76:	83 ec 0c             	sub    esp,0xc
c0022e79:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e7e:	b9 09 00 00 00       	mov    ecx,0x9
c0022e83:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e87:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e8b:	fc                   	cld    
c0022e8c:	89 e7                	mov    edi,esp
c0022e8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e90:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022e97:	e8 ee fc ff ff       	call   c0022b8a <PCI::foundDevice(PCIDeviceInfo)>
c0022e9c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ea2:	5b                   	pop    ebx
c0022ea3:	5e                   	pop    esi
c0022ea4:	5f                   	pop    edi
c0022ea5:	5d                   	pop    ebp
c0022ea6:	c3                   	ret    
c0022ea7:	90                   	nop

c0022ea8 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ea8:	55                   	push   ebp
c0022ea9:	57                   	push   edi
c0022eaa:	56                   	push   esi
c0022eab:	53                   	push   ebx
c0022eac:	83 ec 0c             	sub    esp,0xc
c0022eaf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022eb3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022eb8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ebd:	6a 00                	push   0x0
c0022ebf:	56                   	push   esi
c0022ec0:	57                   	push   edi
c0022ec1:	55                   	push   ebp
c0022ec2:	e8 bd fa ff ff       	call   c0022984 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ec7:	6a 00                	push   0x0
c0022ec9:	56                   	push   esi
c0022eca:	57                   	push   edi
c0022ecb:	55                   	push   ebp
c0022ecc:	e8 2b fe ff ff       	call   c0022cfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ed1:	83 c4 20             	add    esp,0x20
c0022ed4:	6a 00                	push   0x0
c0022ed6:	56                   	push   esi
c0022ed7:	57                   	push   edi
c0022ed8:	55                   	push   ebp
c0022ed9:	e8 c8 fa ff ff       	call   c00229a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ede:	83 c4 10             	add    esp,0x10
c0022ee1:	84 c0                	test   al,al
c0022ee3:	79 27                	jns    c0022f0c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ee5:	bb 01 00 00 00       	mov    ebx,0x1
c0022eea:	53                   	push   ebx
c0022eeb:	56                   	push   esi
c0022eec:	57                   	push   edi
c0022eed:	55                   	push   ebp
c0022eee:	e8 91 fa ff ff       	call   c0022984 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ef3:	83 c4 10             	add    esp,0x10
c0022ef6:	66 40                	inc    ax
c0022ef8:	74 0c                	je     c0022f06 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022efa:	53                   	push   ebx
c0022efb:	56                   	push   esi
c0022efc:	57                   	push   edi
c0022efd:	55                   	push   ebp
c0022efe:	e8 f9 fd ff ff       	call   c0022cfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f03:	83 c4 10             	add    esp,0x10
c0022f06:	43                   	inc    ebx
c0022f07:	83 fb 08             	cmp    ebx,0x8
c0022f0a:	75 de                	jne    c0022eea <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f0c:	83 c4 0c             	add    esp,0xc
c0022f0f:	5b                   	pop    ebx
c0022f10:	5e                   	pop    esi
c0022f11:	5f                   	pop    edi
c0022f12:	5d                   	pop    ebp
c0022f13:	c3                   	ret    

c0022f14 <PCI::detect()>:
c0022f14:	56                   	push   esi
c0022f15:	53                   	push   ebx
c0022f16:	53                   	push   ebx
c0022f17:	31 db                	xor    ebx,ebx
c0022f19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f1d:	6a 00                	push   0x0
c0022f1f:	6a 00                	push   0x0
c0022f21:	6a 00                	push   0x0
c0022f23:	56                   	push   esi
c0022f24:	e8 7d fa ff ff       	call   c00229a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f29:	83 c4 10             	add    esp,0x10
c0022f2c:	a8 80                	test   al,0x80
c0022f2e:	75 21                	jne    c0022f51 <PCI::detect()+0x3d>
c0022f30:	51                   	push   ecx
c0022f31:	51                   	push   ecx
c0022f32:	6a 00                	push   0x0
c0022f34:	56                   	push   esi
c0022f35:	e8 2c fc ff ff       	call   c0022b66 <PCI::checkBus(unsigned char)>
c0022f3a:	83 c4 10             	add    esp,0x10
c0022f3d:	eb 24                	jmp    c0022f63 <PCI::detect()+0x4f>
c0022f3f:	52                   	push   edx
c0022f40:	52                   	push   edx
c0022f41:	53                   	push   ebx
c0022f42:	43                   	inc    ebx
c0022f43:	56                   	push   esi
c0022f44:	e8 1d fc ff ff       	call   c0022b66 <PCI::checkBus(unsigned char)>
c0022f49:	83 c4 10             	add    esp,0x10
c0022f4c:	83 fb 08             	cmp    ebx,0x8
c0022f4f:	74 12                	je     c0022f63 <PCI::detect()+0x4f>
c0022f51:	53                   	push   ebx
c0022f52:	6a 00                	push   0x0
c0022f54:	6a 00                	push   0x0
c0022f56:	56                   	push   esi
c0022f57:	e8 28 fa ff ff       	call   c0022984 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f5c:	83 c4 10             	add    esp,0x10
c0022f5f:	66 40                	inc    ax
c0022f61:	74 dc                	je     c0022f3f <PCI::detect()+0x2b>
c0022f63:	58                   	pop    eax
c0022f64:	5b                   	pop    ebx
c0022f65:	5e                   	pop    esi
c0022f66:	c3                   	ret    
c0022f67:	90                   	nop

c0022f68 <IDE::close(int, int, void*)>:
c0022f68:	83 c8 ff             	or     eax,0xffffffff
c0022f6b:	c3                   	ret    

c0022f6c <IDE::IDE()>:
c0022f6c:	83 ec 0c             	sub    esp,0xc
c0022f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f73:	83 ec 08             	sub    esp,0x8
c0022f76:	68 bc ca 02 c0       	push   0xc002cabc
c0022f7b:	50                   	push   eax
c0022f7c:	e8 db 15 ff ff       	call   c001455c <HardDiskController::HardDiskController(char const*)>
c0022f81:	83 c4 10             	add    esp,0x10
c0022f84:	ba fc cc 02 c0       	mov    edx,0xc002ccfc
c0022f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f8d:	89 10                	mov    DWORD PTR [eax],edx
c0022f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f93:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f9a:	90                   	nop
c0022f9b:	83 c4 0c             	add    esp,0xc
c0022f9e:	c3                   	ret    
c0022f9f:	90                   	nop

c0022fa0 <IDE::prepareInterrupt(unsigned char)>:
c0022fa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fa5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fa9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fb1:	c3                   	ret    

c0022fb2 <selectDrive(unsigned char, unsigned char)>:
c0022fb2:	c3                   	ret    
c0022fb3:	90                   	nop

c0022fb4 <IDE::getBase(unsigned char)>:
c0022fb4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fbd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fc5:	c3                   	ret    

c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fc6:	55                   	push   ebp
c0022fc7:	57                   	push   edi
c0022fc8:	56                   	push   esi
c0022fc9:	53                   	push   ebx
c0022fca:	83 ec 1c             	sub    esp,0x1c
c0022fcd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fd1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fd5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fd8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fdc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022fe0:	80 f9 03             	cmp    cl,0x3
c0022fe3:	77 51                	ja     c0023036 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022fe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022fe9:	0f b6 f2             	movzx  esi,dl
c0022fec:	0f b6 db             	movzx  ebx,bl
c0022fef:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ff2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022ff6:	83 ca 80             	or     edx,0xffffff80
c0022ff9:	0f b6 d2             	movzx  edx,dl
c0022ffc:	52                   	push   edx
c0022ffd:	6a 0c                	push   0xc
c0022fff:	56                   	push   esi
c0023000:	57                   	push   edi
c0023001:	e8 c0 ff ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023006:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002300b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002300f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023013:	ee                   	out    dx,al
c0023014:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023019:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002301d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023021:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023025:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002302d:	83 c4 2c             	add    esp,0x2c
c0023030:	5b                   	pop    ebx
c0023031:	5e                   	pop    esi
c0023032:	5f                   	pop    edi
c0023033:	5d                   	pop    ebp
c0023034:	eb 90                	jmp    c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023036:	80 fb 07             	cmp    bl,0x7
c0023039:	77 12                	ja     c002304d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002303b:	0f b6 d2             	movzx  edx,dl
c002303e:	0f b6 db             	movzx  ebx,bl
c0023041:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023049:	89 da                	mov    edx,ebx
c002304b:	eb 2f                	jmp    c002307c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002304d:	80 fb 0d             	cmp    bl,0xd
c0023050:	77 13                	ja     c0023065 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023052:	0f b6 d2             	movzx  edx,dl
c0023055:	0f b6 db             	movzx  ebx,bl
c0023058:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002305f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023063:	eb 17                	jmp    c002307c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023065:	80 fb 15             	cmp    bl,0x15
c0023068:	77 13                	ja     c002307d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002306a:	0f b6 d2             	movzx  edx,dl
c002306d:	0f b6 db             	movzx  ebx,bl
c0023070:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023078:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002307c:	ee                   	out    dx,al
c002307d:	83 c4 1c             	add    esp,0x1c
c0023080:	5b                   	pop    ebx
c0023081:	5e                   	pop    esi
c0023082:	5f                   	pop    edi
c0023083:	5d                   	pop    ebp
c0023084:	c3                   	ret    
c0023085:	90                   	nop

c0023086 <IDE::read(unsigned char, unsigned char)>:
c0023086:	55                   	push   ebp
c0023087:	57                   	push   edi
c0023088:	56                   	push   esi
c0023089:	53                   	push   ebx
c002308a:	83 ec 1c             	sub    esp,0x1c
c002308d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023091:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023095:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023098:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002309c:	3c 03                	cmp    al,0x3
c002309e:	77 43                	ja     c00230e3 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230a0:	0f b6 f2             	movzx  esi,dl
c00230a3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230a6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230aa:	83 c8 80             	or     eax,0xffffff80
c00230ad:	0f b6 c0             	movzx  eax,al
c00230b0:	50                   	push   eax
c00230b1:	6a 0c                	push   0xc
c00230b3:	56                   	push   esi
c00230b4:	57                   	push   edi
c00230b5:	e8 0c ff ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ba:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230bf:	0f b6 c3             	movzx  eax,bl
c00230c2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230c6:	ec                   	in     al,dx
c00230c7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230cb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230d0:	52                   	push   edx
c00230d1:	6a 0c                	push   0xc
c00230d3:	56                   	push   esi
c00230d4:	57                   	push   edi
c00230d5:	e8 ec fe ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230da:	83 c4 20             	add    esp,0x20
c00230dd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230e1:	eb 49                	jmp    c002312c <IDE::read(unsigned char, unsigned char)+0xa6>
c00230e3:	80 fb 07             	cmp    bl,0x7
c00230e6:	77 12                	ja     c00230fa <IDE::read(unsigned char, unsigned char)+0x74>
c00230e8:	0f b6 d2             	movzx  edx,dl
c00230eb:	0f b6 c3             	movzx  eax,bl
c00230ee:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230f6:	89 c2                	mov    edx,eax
c00230f8:	eb 31                	jmp    c002312b <IDE::read(unsigned char, unsigned char)+0xa5>
c00230fa:	80 fb 0d             	cmp    bl,0xd
c00230fd:	77 13                	ja     c0023112 <IDE::read(unsigned char, unsigned char)+0x8c>
c00230ff:	0f b6 d2             	movzx  edx,dl
c0023102:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023109:	0f b6 d3             	movzx  edx,bl
c002310c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023110:	eb 19                	jmp    c002312b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023112:	31 c0                	xor    eax,eax
c0023114:	80 fb 15             	cmp    bl,0x15
c0023117:	77 13                	ja     c002312c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023119:	0f b6 d2             	movzx  edx,dl
c002311c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023124:	0f b6 d3             	movzx  edx,bl
c0023127:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002312b:	ec                   	in     al,dx
c002312c:	83 c4 1c             	add    esp,0x1c
c002312f:	5b                   	pop    ebx
c0023130:	5e                   	pop    esi
c0023131:	5f                   	pop    edi
c0023132:	5d                   	pop    ebp
c0023133:	c3                   	ret    

c0023134 <IDE::waitInterrupt(unsigned char)>:
c0023134:	55                   	push   ebp
c0023135:	57                   	push   edi
c0023136:	56                   	push   esi
c0023137:	53                   	push   ebx
c0023138:	31 db                	xor    ebx,ebx
c002313a:	83 ec 0c             	sub    esp,0xc
c002313d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023141:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023146:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002314e:	89 e8                	mov    eax,ebp
c0023150:	84 c0                	test   al,al
c0023152:	75 34                	jne    c0023188 <IDE::waitInterrupt(unsigned char)+0x54>
c0023154:	52                   	push   edx
c0023155:	6a 0c                	push   0xc
c0023157:	56                   	push   esi
c0023158:	57                   	push   edi
c0023159:	e8 28 ff ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c002315e:	83 c4 10             	add    esp,0x10
c0023161:	a8 01                	test   al,0x1
c0023163:	75 2b                	jne    c0023190 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023165:	f6 c3 04             	test   bl,0x4
c0023168:	75 16                	jne    c0023180 <IDE::waitInterrupt(unsigned char)+0x4c>
c002316a:	83 fb 32             	cmp    ebx,0x32
c002316d:	7e 11                	jle    c0023180 <IDE::waitInterrupt(unsigned char)+0x4c>
c002316f:	50                   	push   eax
c0023170:	50                   	push   eax
c0023171:	6a 00                	push   0x0
c0023173:	68 80 96 98 00       	push   0x989680
c0023178:	e8 c9 b0 ff ff       	call   c001e246 <nanoSleep(unsigned long long)>
c002317d:	83 c4 10             	add    esp,0x10
c0023180:	83 fb 3c             	cmp    ebx,0x3c
c0023183:	74 0b                	je     c0023190 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023185:	43                   	inc    ebx
c0023186:	eb be                	jmp    c0023146 <IDE::waitInterrupt(unsigned char)+0x12>
c0023188:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023190:	83 c4 0c             	add    esp,0xc
c0023193:	89 e8                	mov    eax,ebp
c0023195:	5b                   	pop    ebx
c0023196:	5e                   	pop    esi
c0023197:	5f                   	pop    edi
c0023198:	5d                   	pop    ebp
c0023199:	c3                   	ret    

c002319a <ideChannel0IRQHandler(regs*, void*)>:
c002319a:	83 ec 10             	sub    esp,0x10
c002319d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231a1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231a8:	6a 07                	push   0x7
c00231aa:	6a 00                	push   0x0
c00231ac:	50                   	push   eax
c00231ad:	e8 d4 fe ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00231b2:	83 c4 1c             	add    esp,0x1c
c00231b5:	c3                   	ret    

c00231b6 <ideChannel1IRQHandler(regs*, void*)>:
c00231b6:	83 ec 10             	sub    esp,0x10
c00231b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231bd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231c4:	6a 07                	push   0x7
c00231c6:	6a 01                	push   0x1
c00231c8:	50                   	push   eax
c00231c9:	e8 b8 fe ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00231ce:	83 c4 1c             	add    esp,0x1c
c00231d1:	c3                   	ret    

c00231d2 <IDE::enableIRQs(unsigned char, bool)>:
c00231d2:	57                   	push   edi
c00231d3:	56                   	push   esi
c00231d4:	be 04 00 00 00       	mov    esi,0x4
c00231d9:	53                   	push   ebx
c00231da:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231e3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231e8:	0f 94 c0             	sete   al
c00231eb:	d1 e0                	shl    eax,1
c00231ed:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231f4:	0f b6 c0             	movzx  eax,al
c00231f7:	50                   	push   eax
c00231f8:	6a 0c                	push   0xc
c00231fa:	57                   	push   edi
c00231fb:	53                   	push   ebx
c00231fc:	e8 c5 fd ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023201:	83 c4 10             	add    esp,0x10
c0023204:	50                   	push   eax
c0023205:	6a 0c                	push   0xc
c0023207:	57                   	push   edi
c0023208:	53                   	push   ebx
c0023209:	e8 78 fe ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c002320e:	83 c4 10             	add    esp,0x10
c0023211:	4e                   	dec    esi
c0023212:	75 f0                	jne    c0023204 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023214:	5b                   	pop    ebx
c0023215:	5e                   	pop    esi
c0023216:	5f                   	pop    edi
c0023217:	c3                   	ret    

c0023218 <IDE::open(int, int, void*)>:
c0023218:	55                   	push   ebp
c0023219:	57                   	push   edi
c002321a:	56                   	push   esi
c002321b:	53                   	push   ebx
c002321c:	83 ec 1c             	sub    esp,0x1c
c002321f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023223:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002322c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023235:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002323c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023243:	0f 85 b0 02 00 00    	jne    c00234f9 <IDE::open(int, int, void*)+0x2e1>
c0023249:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002324f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023253:	83 e0 7f             	and    eax,0x7f
c0023256:	3c 05                	cmp    al,0x5
c0023258:	74 04                	je     c002325e <IDE::open(int, int, void*)+0x46>
c002325a:	3c 0f                	cmp    al,0xf
c002325c:	75 32                	jne    c0023290 <IDE::open(int, int, void*)+0x78>
c002325e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023264:	83 e0 fc             	and    eax,0xfffffffc
c0023267:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002326e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023274:	83 e0 fc             	and    eax,0xfffffffc
c0023277:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002327e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023284:	83 e0 fc             	and    eax,0xfffffffc
c0023287:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002328e:	eb 14                	jmp    c00232a4 <IDE::open(int, int, void*)+0x8c>
c0023290:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002329a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232a4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232ab:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232b6:	89 c6                	mov    esi,eax
c00232b8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232bd:	c1 e6 10             	shl    esi,0x10
c00232c0:	89 e8                	mov    eax,ebp
c00232c2:	89 fa                	mov    edx,edi
c00232c4:	c1 e0 0b             	shl    eax,0xb
c00232c7:	09 f0                	or     eax,esi
c00232c9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232d0:	c1 e6 08             	shl    esi,0x8
c00232d3:	09 c6                	or     esi,eax
c00232d5:	89 f0                	mov    eax,esi
c00232d7:	0d 08 00 00 80       	or     eax,0x80000008
c00232dc:	ef                   	out    dx,eax
c00232dd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232e2:	89 ca                	mov    edx,ecx
c00232e4:	ed                   	in     eax,dx
c00232e5:	c1 e8 10             	shr    eax,0x10
c00232e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00232ed:	0f 84 f5 00 00 00    	je     c00233e8 <IDE::open(int, int, void*)+0x1d0>
c00232f3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232f9:	89 fa                	mov    edx,edi
c00232fb:	89 f0                	mov    eax,esi
c00232fd:	ef                   	out    dx,eax
c00232fe:	b0 fe                	mov    al,0xfe
c0023300:	89 ca                	mov    edx,ecx
c0023302:	ee                   	out    dx,al
c0023303:	89 f0                	mov    eax,esi
c0023305:	89 fa                	mov    edx,edi
c0023307:	ef                   	out    dx,eax
c0023308:	89 ca                	mov    edx,ecx
c002330a:	ed                   	in     eax,dx
c002330b:	3c fe                	cmp    al,0xfe
c002330d:	0f 85 a9 00 00 00    	jne    c00233bc <IDE::open(int, int, void*)+0x1a4>
c0023313:	8b 15 48 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e448
c0023319:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023320:	74 33                	je     c0023355 <IDE::open(int, int, void*)+0x13d>
c0023322:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023328:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002332c:	40                   	inc    eax
c002332d:	83 ec 0c             	sub    esp,0xc
c0023330:	0f b6 c0             	movzx  eax,al
c0023333:	50                   	push   eax
c0023334:	55                   	push   ebp
c0023335:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023339:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002333f:	51                   	push   ecx
c0023340:	e8 e9 4d ff ff       	call   c001812e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023345:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002334a:	83 c4 1c             	add    esp,0x1c
c002334d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023353:	eb 0a                	jmp    c002335f <IDE::open(int, int, void*)+0x147>
c0023355:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002335f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023366:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002336d:	c1 e1 10             	shl    ecx,0x10
c0023370:	c1 e0 08             	shl    eax,0x8
c0023373:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023378:	09 c1                	or     ecx,eax
c002337a:	89 fa                	mov    edx,edi
c002337c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023383:	c1 e0 0b             	shl    eax,0xb
c0023386:	09 c1                	or     ecx,eax
c0023388:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002338e:	89 c8                	mov    eax,ecx
c0023390:	ef                   	out    dx,eax
c0023391:	be fc 0c 00 00       	mov    esi,0xcfc
c0023396:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002339c:	89 f2                	mov    edx,esi
c002339e:	ee                   	out    dx,al
c002339f:	89 c8                	mov    eax,ecx
c00233a1:	89 fa                	mov    edx,edi
c00233a3:	ef                   	out    dx,eax
c00233a4:	89 f2                	mov    edx,esi
c00233a6:	ed                   	in     eax,dx
c00233a7:	0f b6 c0             	movzx  eax,al
c00233aa:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233b0:	74 46                	je     c00233f8 <IDE::open(int, int, void*)+0x1e0>
c00233b2:	83 ec 0c             	sub    esp,0xc
c00233b5:	68 d4 ca 02 c0       	push   0xc002cad4
c00233ba:	eb 34                	jmp    c00233f0 <IDE::open(int, int, void*)+0x1d8>
c00233bc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233c5:	75 17                	jne    c00233de <IDE::open(int, int, void*)+0x1c6>
c00233c7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233cc:	74 07                	je     c00233d5 <IDE::open(int, int, void*)+0x1bd>
c00233ce:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233d3:	75 09                	jne    c00233de <IDE::open(int, int, void*)+0x1c6>
c00233d5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233dc:	eb 1a                	jmp    c00233f8 <IDE::open(int, int, void*)+0x1e0>
c00233de:	83 ec 0c             	sub    esp,0xc
c00233e1:	68 dc ca 02 c0       	push   0xc002cadc
c00233e6:	eb 08                	jmp    c00233f0 <IDE::open(int, int, void*)+0x1d8>
c00233e8:	83 ec 0c             	sub    esp,0xc
c00233eb:	68 0d cb 02 c0       	push   0xc002cb0d
c00233f0:	e8 ec 70 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c00233f5:	83 c4 10             	add    esp,0x10
c00233f8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233ff:	79 1a                	jns    c002341b <IDE::open(int, int, void*)+0x203>
c0023401:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023407:	83 e0 fc             	and    eax,0xfffffffc
c002340a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023411:	83 c0 08             	add    eax,0x8
c0023414:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002341b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023421:	89 c2                	mov    edx,eax
c0023423:	83 e2 0f             	and    edx,0xf
c0023426:	66 83 fa 08          	cmp    dx,0x8
c002342a:	75 0a                	jne    c0023436 <IDE::open(int, int, void*)+0x21e>
c002342c:	83 e8 02             	sub    eax,0x2
c002342f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023436:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002343c:	89 c2                	mov    edx,eax
c002343e:	83 e2 0f             	and    edx,0xf
c0023441:	66 83 fa 08          	cmp    dx,0x8
c0023445:	75 0a                	jne    c0023451 <IDE::open(int, int, void*)+0x239>
c0023447:	83 e8 02             	sub    eax,0x2
c002344a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023451:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023458:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002345f:	89 d0                	mov    eax,edx
c0023461:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023464:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023468:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002346c:	8d 4a 01             	lea    ecx,[edx+0x1]
c002346f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023474:	0f b6 c9             	movzx  ecx,cl
c0023477:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002347e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023481:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023485:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023489:	8d 50 02             	lea    edx,[eax+0x2]
c002348c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023491:	0f b6 d2             	movzx  edx,dl
c0023494:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002349a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002349d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234a1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234a5:	8d 48 03             	lea    ecx,[eax+0x3]
c00234a8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234ad:	0f b6 c9             	movzx  ecx,cl
c00234b0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234b6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234b9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234bd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234c1:	8d 50 04             	lea    edx,[eax+0x4]
c00234c4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234ca:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234cf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234d6:	66 85 f6             	test   si,si
c00234d9:	74 3e                	je     c0023519 <IDE::open(int, int, void*)+0x301>
c00234db:	0f b6 d2             	movzx  edx,dl
c00234de:	83 c0 05             	add    eax,0x5
c00234e1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234e4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234e8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234ec:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234f2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234f7:	eb 20                	jmp    c0023519 <IDE::open(int, int, void*)+0x301>
c00234f9:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023503:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002350d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023514:	e9 02 ff ff ff       	jmp    c002341b <IDE::open(int, int, void*)+0x203>
c0023519:	52                   	push   edx
c002351a:	52                   	push   edx
c002351b:	6a 00                	push   0x0
c002351d:	53                   	push   ebx
c002351e:	e8 7d fa ff ff       	call   c0022fa0 <IDE::prepareInterrupt(unsigned char)>
c0023523:	59                   	pop    ecx
c0023524:	5e                   	pop    esi
c0023525:	6a 01                	push   0x1
c0023527:	53                   	push   ebx
c0023528:	e8 73 fa ff ff       	call   c0022fa0 <IDE::prepareInterrupt(unsigned char)>
c002352d:	83 c4 0c             	add    esp,0xc
c0023530:	6a 00                	push   0x0
c0023532:	6a 00                	push   0x0
c0023534:	53                   	push   ebx
c0023535:	e8 98 fc ff ff       	call   c00231d2 <IDE::enableIRQs(unsigned char, bool)>
c002353a:	83 c4 0c             	add    esp,0xc
c002353d:	6a 00                	push   0x0
c002353f:	6a 01                	push   0x1
c0023541:	53                   	push   ebx
c0023542:	e8 8b fc ff ff       	call   c00231d2 <IDE::enableIRQs(unsigned char, bool)>
c0023547:	83 c4 10             	add    esp,0x10
c002354a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023551:	74 40                	je     c0023593 <IDE::open(int, int, void*)+0x37b>
c0023553:	83 ec 0c             	sub    esp,0xc
c0023556:	68 37 cb 02 c0       	push   0xc002cb37
c002355b:	e8 43 f8 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023560:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023563:	6a 01                	push   0x1
c0023565:	68 9a 31 02 c0       	push   0xc002319a
c002356a:	6a 0e                	push   0xe
c002356c:	53                   	push   ebx
c002356d:	e8 e2 0b ff ff       	call   c0014154 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023572:	83 c4 14             	add    esp,0x14
c0023575:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002357b:	53                   	push   ebx
c002357c:	6a 01                	push   0x1
c002357e:	68 b6 31 02 c0       	push   0xc00231b6
c0023583:	6a 0f                	push   0xf
c0023585:	53                   	push   ebx
c0023586:	e8 c9 0b ff ff       	call   c0014154 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002358b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023591:	eb 4a                	jmp    c00235dd <IDE::open(int, int, void*)+0x3c5>
c0023593:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002359d:	50                   	push   eax
c002359e:	6a 0f                	push   0xf
c00235a0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235a6:	68 53 cb 02 c0       	push   0xc002cb53
c00235ab:	e8 f3 f7 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c00235b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235b3:	6a 00                	push   0x0
c00235b5:	68 9a 31 02 c0       	push   0xc002319a
c00235ba:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235c0:	53                   	push   ebx
c00235c1:	e8 8e 0b ff ff       	call   c0014154 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235c6:	83 c4 14             	add    esp,0x14
c00235c9:	53                   	push   ebx
c00235ca:	6a 00                	push   0x0
c00235cc:	68 b6 31 02 c0       	push   0xc00231b6
c00235d1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235d7:	53                   	push   ebx
c00235d8:	e8 77 0b ff ff       	call   c0014154 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235df:	83 c4 20             	add    esp,0x20
c00235e2:	83 ec 0c             	sub    esp,0xc
c00235e5:	53                   	push   ebx
c00235e6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235e9:	83 c4 0c             	add    esp,0xc
c00235ec:	6a 07                	push   0x7
c00235ee:	6a 00                	push   0x0
c00235f0:	53                   	push   ebx
c00235f1:	e8 90 fa ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00235f6:	83 c4 0c             	add    esp,0xc
c00235f9:	6a 07                	push   0x7
c00235fb:	6a 01                	push   0x1
c00235fd:	53                   	push   ebx
c00235fe:	e8 83 fa ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023603:	83 c4 0c             	add    esp,0xc
c0023606:	6a 01                	push   0x1
c0023608:	6a 00                	push   0x0
c002360a:	53                   	push   ebx
c002360b:	e8 c2 fb ff ff       	call   c00231d2 <IDE::enableIRQs(unsigned char, bool)>
c0023610:	83 c4 0c             	add    esp,0xc
c0023613:	6a 01                	push   0x1
c0023615:	6a 01                	push   0x1
c0023617:	53                   	push   ebx
c0023618:	e8 b5 fb ff ff       	call   c00231d2 <IDE::enableIRQs(unsigned char, bool)>
c002361d:	83 c4 2c             	add    esp,0x2c
c0023620:	31 c0                	xor    eax,eax
c0023622:	5b                   	pop    ebx
c0023623:	5e                   	pop    esi
c0023624:	5f                   	pop    edi
c0023625:	5d                   	pop    ebp
c0023626:	c3                   	ret    
c0023627:	90                   	nop

c0023628 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023628:	55                   	push   ebp
c0023629:	57                   	push   edi
c002362a:	56                   	push   esi
c002362b:	53                   	push   ebx
c002362c:	83 ec 1c             	sub    esp,0x1c
c002362f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023633:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023637:	8d 50 f8             	lea    edx,[eax-0x8]
c002363a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002363e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023642:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023646:	80 fa 03             	cmp    dl,0x3
c0023649:	77 5d                	ja     c00236a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002364b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002364f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023653:	0f b6 db             	movzx  ebx,bl
c0023656:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023659:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002365d:	83 ca 80             	or     edx,0xffffff80
c0023660:	0f b6 d2             	movzx  edx,dl
c0023663:	52                   	push   edx
c0023664:	6a 0c                	push   0xc
c0023666:	53                   	push   ebx
c0023667:	56                   	push   esi
c0023668:	e8 59 f9 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002366d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023672:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023676:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002367a:	0f b6 c0             	movzx  eax,al
c002367d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023681:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023683:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023688:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002368c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023690:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023694:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002369c:	83 c4 2c             	add    esp,0x2c
c002369f:	5b                   	pop    ebx
c00236a0:	5e                   	pop    esi
c00236a1:	5f                   	pop    edi
c00236a2:	5d                   	pop    ebp
c00236a3:	e9 1e f9 ff ff       	jmp    c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236a8:	3c 07                	cmp    al,0x7
c00236aa:	77 10                	ja     c00236bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236ac:	0f b6 db             	movzx  ebx,bl
c00236af:	0f b6 d0             	movzx  edx,al
c00236b2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236ba:	eb 2d                	jmp    c00236e9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236bc:	3c 0d                	cmp    al,0xd
c00236be:	77 13                	ja     c00236d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236c0:	0f b6 db             	movzx  ebx,bl
c00236c3:	0f b6 c0             	movzx  eax,al
c00236c6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236cd:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236d1:	eb 16                	jmp    c00236e9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236d3:	3c 15                	cmp    al,0x15
c00236d5:	77 14                	ja     c00236eb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236d7:	0f b6 db             	movzx  ebx,bl
c00236da:	0f b6 c0             	movzx  eax,al
c00236dd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236e5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236e9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236eb:	83 c4 1c             	add    esp,0x1c
c00236ee:	5b                   	pop    ebx
c00236ef:	5e                   	pop    esi
c00236f0:	5f                   	pop    edi
c00236f1:	5d                   	pop    ebp
c00236f2:	c3                   	ret    
c00236f3:	90                   	nop

c00236f4 <IDE::detect()>:
c00236f4:	55                   	push   ebp
c00236f5:	57                   	push   edi
c00236f6:	56                   	push   esi
c00236f7:	53                   	push   ebx
c00236f8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236fe:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023705:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002370c:	0f 85 be 02 00 00    	jne    c00239d0 <IDE::detect()+0x2dc>
c0023712:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023719:	31 f6                	xor    esi,esi
c002371b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023723:	31 ed                	xor    ebp,ebp
c0023725:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023729:	c1 e0 06             	shl    eax,0x6
c002372c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023734:	89 e8                	mov    eax,ebp
c0023736:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002373a:	c1 e0 04             	shl    eax,0x4
c002373d:	83 c8 a0             	or     eax,0xffffffa0
c0023740:	0f b6 c0             	movzx  eax,al
c0023743:	50                   	push   eax
c0023744:	6a 06                	push   0x6
c0023746:	56                   	push   esi
c0023747:	53                   	push   ebx
c0023748:	e8 79 f8 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002374d:	83 c4 0c             	add    esp,0xc
c0023750:	6a 0c                	push   0xc
c0023752:	56                   	push   esi
c0023753:	53                   	push   ebx
c0023754:	e8 2d f9 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023759:	83 c4 0c             	add    esp,0xc
c002375c:	6a 0c                	push   0xc
c002375e:	56                   	push   esi
c002375f:	53                   	push   ebx
c0023760:	e8 21 f9 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023765:	83 c4 0c             	add    esp,0xc
c0023768:	6a 0c                	push   0xc
c002376a:	56                   	push   esi
c002376b:	53                   	push   ebx
c002376c:	e8 15 f9 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023771:	83 c4 0c             	add    esp,0xc
c0023774:	6a 0c                	push   0xc
c0023776:	56                   	push   esi
c0023777:	53                   	push   ebx
c0023778:	e8 09 f9 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c002377d:	68 ec 00 00 00       	push   0xec
c0023782:	6a 07                	push   0x7
c0023784:	56                   	push   esi
c0023785:	53                   	push   ebx
c0023786:	e8 3b f8 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002378b:	83 c4 1c             	add    esp,0x1c
c002378e:	6a 0c                	push   0xc
c0023790:	56                   	push   esi
c0023791:	53                   	push   ebx
c0023792:	e8 ef f8 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023797:	83 c4 0c             	add    esp,0xc
c002379a:	6a 0c                	push   0xc
c002379c:	56                   	push   esi
c002379d:	53                   	push   ebx
c002379e:	e8 e3 f8 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00237a3:	83 c4 0c             	add    esp,0xc
c00237a6:	6a 0c                	push   0xc
c00237a8:	56                   	push   esi
c00237a9:	53                   	push   ebx
c00237aa:	e8 d7 f8 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00237af:	83 c4 0c             	add    esp,0xc
c00237b2:	6a 0c                	push   0xc
c00237b4:	56                   	push   esi
c00237b5:	53                   	push   ebx
c00237b6:	e8 cb f8 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00237bb:	83 c4 0c             	add    esp,0xc
c00237be:	6a 0c                	push   0xc
c00237c0:	56                   	push   esi
c00237c1:	53                   	push   ebx
c00237c2:	e8 bf f8 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00237c7:	83 c4 10             	add    esp,0x10
c00237ca:	84 c0                	test   al,al
c00237cc:	0f 84 8b 01 00 00    	je     c002395d <IDE::detect()+0x269>
c00237d2:	31 ff                	xor    edi,edi
c00237d4:	50                   	push   eax
c00237d5:	6a 0c                	push   0xc
c00237d7:	56                   	push   esi
c00237d8:	53                   	push   ebx
c00237d9:	e8 a8 f8 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00237de:	83 c4 10             	add    esp,0x10
c00237e1:	a8 01                	test   al,0x1
c00237e3:	0f 85 8e 01 00 00    	jne    c0023977 <IDE::detect()+0x283>
c00237e9:	84 c0                	test   al,al
c00237eb:	78 04                	js     c00237f1 <IDE::detect()+0xfd>
c00237ed:	a8 08                	test   al,0x8
c00237ef:	75 27                	jne    c0023818 <IDE::detect()+0x124>
c00237f1:	47                   	inc    edi
c00237f2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237f8:	7e da                	jle    c00237d4 <IDE::detect()+0xe0>
c00237fa:	50                   	push   eax
c00237fb:	50                   	push   eax
c00237fc:	6a 00                	push   0x0
c00237fe:	68 40 4b 4c 00       	push   0x4c4b40
c0023803:	e8 3e aa ff ff       	call   c001e246 <nanoSleep(unsigned long long)>
c0023808:	83 c4 10             	add    esp,0x10
c002380b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023811:	75 c1                	jne    c00237d4 <IDE::detect()+0xe0>
c0023813:	e9 5f 01 00 00       	jmp    c0023977 <IDE::detect()+0x283>
c0023818:	31 c9                	xor    ecx,ecx
c002381a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002381e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023822:	83 ec 0c             	sub    esp,0xc
c0023825:	68 80 00 00 00       	push   0x80
c002382a:	57                   	push   edi
c002382b:	6a 00                	push   0x0
c002382d:	56                   	push   esi
c002382e:	53                   	push   ebx
c002382f:	e8 f4 fd ff ff       	call   c0023628 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023834:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023839:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002383d:	89 d1                	mov    ecx,edx
c002383f:	c1 e0 06             	shl    eax,0x6
c0023842:	01 d8                	add    eax,ebx
c0023844:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002384b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023852:	89 f2                	mov    edx,esi
c0023854:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002385a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002385e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023864:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023868:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002386f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023877:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002387e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023886:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002388c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023893:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023899:	8d 54 24 58          	lea    edx,[esp+0x58]
c002389d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238a1:	83 c4 20             	add    esp,0x20
c00238a4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238a7:	83 c0 02             	add    eax,0x2
c00238aa:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238b0:	83 c7 02             	add    edi,0x2
c00238b3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238b6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238bc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238c0:	75 e2                	jne    c00238a4 <IDE::detect()+0x1b0>
c00238c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238c6:	c1 e0 06             	shl    eax,0x6
c00238c9:	01 d8                	add    eax,ebx
c00238cb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238d1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238d8:	66 c1 ea 09          	shr    dx,0x9
c00238dc:	83 e2 01             	and    edx,0x1
c00238df:	84 c9                	test   cl,cl
c00238e1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238e7:	75 2f                	jne    c0023918 <IDE::detect()+0x224>
c00238e9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00238ef:	85 c0                	test   eax,eax
c00238f1:	74 66                	je     c0023959 <IDE::detect()+0x265>
c00238f3:	50                   	push   eax
c00238f4:	55                   	push   ebp
c00238f5:	56                   	push   esi
c00238f6:	68 6f cb 02 c0       	push   0xc002cb6f
c00238fb:	e8 a3 f4 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023900:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023907:	e8 3f bf fe ff       	call   c000f84b <malloc>
c002390c:	89 c7                	mov    edi,eax
c002390e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023911:	e8 78 06 00 00       	call   c0023f8e <ATA::ATA()>
c0023916:	eb 28                	jmp    c0023940 <IDE::detect()+0x24c>
c0023918:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002391e:	55                   	push   ebp
c002391f:	56                   	push   esi
c0023920:	68 9e cb 02 c0       	push   0xc002cb9e
c0023925:	e8 79 f4 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c002392a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023931:	e8 15 bf fe ff       	call   c000f84b <malloc>
c0023936:	89 c7                	mov    edi,eax
c0023938:	89 04 24             	mov    DWORD PTR [esp],eax
c002393b:	e8 8e 0c 00 00       	call   c00245ce <ATAPI::ATAPI()>
c0023940:	5a                   	pop    edx
c0023941:	59                   	pop    ecx
c0023942:	57                   	push   edi
c0023943:	53                   	push   ebx
c0023944:	e8 87 08 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0023949:	8b 07                	mov    eax,DWORD PTR [edi]
c002394b:	53                   	push   ebx
c002394c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023950:	6a 00                	push   0x0
c0023952:	57                   	push   edi
c0023953:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023956:	83 c4 20             	add    esp,0x20
c0023959:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002395d:	4d                   	dec    ebp
c002395e:	74 0a                	je     c002396a <IDE::detect()+0x276>
c0023960:	bd 01 00 00 00       	mov    ebp,0x1
c0023965:	e9 bb fd ff ff       	jmp    c0023725 <IDE::detect()+0x31>
c002396a:	4e                   	dec    esi
c002396b:	74 63                	je     c00239d0 <IDE::detect()+0x2dc>
c002396d:	be 01 00 00 00       	mov    esi,0x1
c0023972:	e9 ac fd ff ff       	jmp    c0023723 <IDE::detect()+0x2f>
c0023977:	50                   	push   eax
c0023978:	6a 04                	push   0x4
c002397a:	56                   	push   esi
c002397b:	53                   	push   ebx
c002397c:	e8 05 f7 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023981:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023985:	83 c4 0c             	add    esp,0xc
c0023988:	6a 05                	push   0x5
c002398a:	56                   	push   esi
c002398b:	53                   	push   ebx
c002398c:	e8 f5 f6 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023991:	83 c4 10             	add    esp,0x10
c0023994:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023998:	80 fa 14             	cmp    dl,0x14
c002399b:	75 04                	jne    c00239a1 <IDE::detect()+0x2ad>
c002399d:	3c eb                	cmp    al,0xeb
c002399f:	eb 07                	jmp    c00239a8 <IDE::detect()+0x2b4>
c00239a1:	3c 96                	cmp    al,0x96
c00239a3:	75 b8                	jne    c002395d <IDE::detect()+0x269>
c00239a5:	80 fa 69             	cmp    dl,0x69
c00239a8:	75 b3                	jne    c002395d <IDE::detect()+0x269>
c00239aa:	68 a1 00 00 00       	push   0xa1
c00239af:	6a 07                	push   0x7
c00239b1:	56                   	push   esi
c00239b2:	53                   	push   ebx
c00239b3:	e8 0e f6 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239b8:	5f                   	pop    edi
c00239b9:	58                   	pop    eax
c00239ba:	6a 00                	push   0x0
c00239bc:	68 40 42 0f 00       	push   0xf4240
c00239c1:	e8 80 a8 ff ff       	call   c001e246 <nanoSleep(unsigned long long)>
c00239c6:	83 c4 10             	add    esp,0x10
c00239c9:	b1 01                	mov    cl,0x1
c00239cb:	e9 4a fe ff ff       	jmp    c002381a <IDE::detect()+0x126>
c00239d0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239d6:	5b                   	pop    ebx
c00239d7:	5e                   	pop    esi
c00239d8:	5f                   	pop    edi
c00239d9:	5d                   	pop    ebp
c00239da:	c3                   	ret    
c00239db:	90                   	nop

c00239dc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239dc:	55                   	push   ebp
c00239dd:	57                   	push   edi
c00239de:	56                   	push   esi
c00239df:	53                   	push   ebx
c00239e0:	83 ec 1c             	sub    esp,0x1c
c00239e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239ef:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239f3:	88 c3                	mov    bl,al
c00239f5:	84 c0                	test   al,al
c00239f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239fb:	0f 84 67 01 00 00    	je     c0023b68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a01:	83 ec 0c             	sub    esp,0xc
c0023a04:	68 cf cb 02 c0       	push   0xc002cbcf
c0023a09:	e8 95 f3 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023a0e:	83 c4 10             	add    esp,0x10
c0023a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a15:	3c 01                	cmp    al,0x1
c0023a17:	75 17                	jne    c0023a30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a19:	83 ec 0c             	sub    esp,0xc
c0023a1c:	b3 13                	mov    bl,0x13
c0023a1e:	68 db cb 02 c0       	push   0xc002cbdb
c0023a23:	e8 7b f3 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023a28:	83 c4 10             	add    esp,0x10
c0023a2b:	e9 25 01 00 00       	jmp    c0023b55 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a30:	3c 02                	cmp    al,0x2
c0023a32:	0f 85 ef 00 00 00    	jne    c0023b27 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a38:	d1 e6                	shl    esi,1
c0023a3a:	09 ee                	or     esi,ebp
c0023a3c:	52                   	push   edx
c0023a3d:	89 f0                	mov    eax,esi
c0023a3f:	6a 01                	push   0x1
c0023a41:	0f b6 f0             	movzx  esi,al
c0023a44:	c1 e6 06             	shl    esi,0x6
c0023a47:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a4f:	50                   	push   eax
c0023a50:	57                   	push   edi
c0023a51:	e8 30 f6 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023a56:	83 c4 10             	add    esp,0x10
c0023a59:	89 c6                	mov    esi,eax
c0023a5b:	a8 01                	test   al,0x1
c0023a5d:	74 12                	je     c0023a71 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a5f:	83 ec 0c             	sub    esp,0xc
c0023a62:	b3 07                	mov    bl,0x7
c0023a64:	68 f0 cb 02 c0       	push   0xc002cbf0
c0023a69:	e8 35 f3 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023a6e:	83 c4 10             	add    esp,0x10
c0023a71:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a77:	74 12                	je     c0023a8b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a79:	83 ec 0c             	sub    esp,0xc
c0023a7c:	b3 03                	mov    bl,0x3
c0023a7e:	68 0e cc 02 c0       	push   0xc002cc0e
c0023a83:	e8 1b f3 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023a88:	83 c4 10             	add    esp,0x10
c0023a8b:	f7 c6 04 00 00 00    	test   esi,0x4
c0023a91:	74 12                	je     c0023aa5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023a93:	83 ec 0c             	sub    esp,0xc
c0023a96:	b3 14                	mov    bl,0x14
c0023a98:	68 2e cc 02 c0       	push   0xc002cc2e
c0023a9d:	e8 01 f3 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023aa2:	83 c4 10             	add    esp,0x10
c0023aa5:	f7 c6 08 00 00 00    	test   esi,0x8
c0023aab:	74 12                	je     c0023abf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023aad:	83 ec 0c             	sub    esp,0xc
c0023ab0:	b3 03                	mov    bl,0x3
c0023ab2:	68 0e cc 02 c0       	push   0xc002cc0e
c0023ab7:	e8 e7 f2 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023abc:	83 c4 10             	add    esp,0x10
c0023abf:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ac5:	74 12                	je     c0023ad9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ac7:	83 ec 0c             	sub    esp,0xc
c0023aca:	b3 15                	mov    bl,0x15
c0023acc:	68 46 cc 02 c0       	push   0xc002cc46
c0023ad1:	e8 cd f2 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023ad6:	83 c4 10             	add    esp,0x10
c0023ad9:	f7 c6 20 00 00 00    	test   esi,0x20
c0023adf:	74 12                	je     c0023af3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023ae1:	83 ec 0c             	sub    esp,0xc
c0023ae4:	b3 03                	mov    bl,0x3
c0023ae6:	68 0e cc 02 c0       	push   0xc002cc0e
c0023aeb:	e8 b3 f2 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023af0:	83 c4 10             	add    esp,0x10
c0023af3:	f7 c6 40 00 00 00    	test   esi,0x40
c0023af9:	74 12                	je     c0023b0d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023afb:	83 ec 0c             	sub    esp,0xc
c0023afe:	b3 16                	mov    bl,0x16
c0023b00:	68 60 cc 02 c0       	push   0xc002cc60
c0023b05:	e8 99 f2 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023b0a:	83 c4 10             	add    esp,0x10
c0023b0d:	89 f0                	mov    eax,esi
c0023b0f:	84 c0                	test   al,al
c0023b11:	79 42                	jns    c0023b55 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b13:	83 ec 0c             	sub    esp,0xc
c0023b16:	b3 0d                	mov    bl,0xd
c0023b18:	68 81 cc 02 c0       	push   0xc002cc81
c0023b1d:	e8 81 f2 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023b22:	83 c4 10             	add    esp,0x10
c0023b25:	eb 2e                	jmp    c0023b55 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b27:	3c 03                	cmp    al,0x3
c0023b29:	75 14                	jne    c0023b3f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b2b:	83 ec 0c             	sub    esp,0xc
c0023b2e:	b3 17                	mov    bl,0x17
c0023b30:	68 95 cc 02 c0       	push   0xc002cc95
c0023b35:	e8 69 f2 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023b3a:	83 c4 10             	add    esp,0x10
c0023b3d:	eb 16                	jmp    c0023b55 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b3f:	3c 04                	cmp    al,0x4
c0023b41:	75 12                	jne    c0023b55 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b43:	83 ec 0c             	sub    esp,0xc
c0023b46:	b3 08                	mov    bl,0x8
c0023b48:	68 ab cc 02 c0       	push   0xc002ccab
c0023b4d:	e8 51 f2 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023b52:	83 c4 10             	add    esp,0x10
c0023b55:	50                   	push   eax
c0023b56:	50                   	push   eax
c0023b57:	0f b6 c3             	movzx  eax,bl
c0023b5a:	50                   	push   eax
c0023b5b:	68 c3 cc 02 c0       	push   0xc002ccc3
c0023b60:	e8 3e f2 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023b65:	83 c4 10             	add    esp,0x10
c0023b68:	83 c4 1c             	add    esp,0x1c
c0023b6b:	88 d8                	mov    al,bl
c0023b6d:	5b                   	pop    ebx
c0023b6e:	5e                   	pop    esi
c0023b6f:	5f                   	pop    edi
c0023b70:	5d                   	pop    ebp
c0023b71:	c3                   	ret    

c0023b72 <IDE::polling(unsigned char, unsigned int)>:
c0023b72:	57                   	push   edi
c0023b73:	56                   	push   esi
c0023b74:	53                   	push   ebx
c0023b75:	bb 04 00 00 00       	mov    ebx,0x4
c0023b7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b7e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b83:	52                   	push   edx
c0023b84:	6a 0c                	push   0xc
c0023b86:	56                   	push   esi
c0023b87:	57                   	push   edi
c0023b88:	e8 f9 f4 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023b8d:	83 c4 10             	add    esp,0x10
c0023b90:	4b                   	dec    ebx
c0023b91:	75 f0                	jne    c0023b83 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b93:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b98:	50                   	push   eax
c0023b99:	6a 0c                	push   0xc
c0023b9b:	56                   	push   esi
c0023b9c:	57                   	push   edi
c0023b9d:	e8 e4 f4 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0023ba2:	83 c4 10             	add    esp,0x10
c0023ba5:	a8 01                	test   al,0x1
c0023ba7:	74 12                	je     c0023bbb <IDE::polling(unsigned char, unsigned int)+0x49>
c0023ba9:	83 ec 0c             	sub    esp,0xc
c0023bac:	68 dd cc 02 c0       	push   0xc002ccdd
c0023bb1:	e8 ed f1 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023bb6:	83 c4 10             	add    esp,0x10
c0023bb9:	eb 17                	jmp    c0023bd2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bbb:	a8 20                	test   al,0x20
c0023bbd:	75 0f                	jne    c0023bce <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023bbf:	4b                   	dec    ebx
c0023bc0:	74 10                	je     c0023bd2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bc2:	84 c0                	test   al,al
c0023bc4:	78 d2                	js     c0023b98 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bc6:	a8 08                	test   al,0x8
c0023bc8:	74 ce                	je     c0023b98 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bca:	31 c0                	xor    eax,eax
c0023bcc:	eb 06                	jmp    c0023bd4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bce:	b0 01                	mov    al,0x1
c0023bd0:	eb 02                	jmp    c0023bd4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bd2:	b0 02                	mov    al,0x2
c0023bd4:	5b                   	pop    ebx
c0023bd5:	5e                   	pop    esi
c0023bd6:	5f                   	pop    edi
c0023bd7:	c3                   	ret    

c0023bd8 <SATABus::close(int, int, void*)>:
c0023bd8:	31 c0                	xor    eax,eax
c0023bda:	c3                   	ret    
c0023bdb:	90                   	nop

c0023bdc <SATABus::detect()>:
c0023bdc:	c3                   	ret    
c0023bdd:	90                   	nop

c0023bde <SATABus::SATABus()>:
c0023bde:	83 ec 0c             	sub    esp,0xc
c0023be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023be5:	83 ec 08             	sub    esp,0x8
c0023be8:	68 20 cd 02 c0       	push   0xc002cd20
c0023bed:	50                   	push   eax
c0023bee:	e8 69 09 ff ff       	call   c001455c <HardDiskController::HardDiskController(char const*)>
c0023bf3:	83 c4 10             	add    esp,0x10
c0023bf6:	ba dc cd 02 c0       	mov    edx,0xc002cddc
c0023bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bff:	89 10                	mov    DWORD PTR [eax],edx
c0023c01:	83 ec 0c             	sub    esp,0xc
c0023c04:	6a 50                	push   0x50
c0023c06:	e8 91 c3 fe ff       	call   c000ff9c <Phys::allocateContiguousPages(int)>
c0023c0b:	83 c4 10             	add    esp,0x10
c0023c0e:	89 c2                	mov    edx,eax
c0023c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c1a:	83 ec 0c             	sub    esp,0xc
c0023c1d:	6a 50                	push   0x50
c0023c1f:	e8 ab dd fe ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c0023c24:	83 c4 10             	add    esp,0x10
c0023c27:	89 c2                	mov    edx,eax
c0023c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c2d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c33:	e8 d6 df fe ff       	call   c0011c0e <Virt::getAKernelVAS()>
c0023c38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c3c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c46:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c4c:	83 ec 0c             	sub    esp,0xc
c0023c4f:	6a 03                	push   0x3
c0023c51:	6a 50                	push   0x50
c0023c53:	51                   	push   ecx
c0023c54:	52                   	push   edx
c0023c55:	50                   	push   eax
c0023c56:	e8 95 e8 fe ff       	call   c00124f0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c5b:	83 c4 20             	add    esp,0x20
c0023c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c62:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c6c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c72:	83 ec 04             	sub    esp,0x4
c0023c75:	52                   	push   edx
c0023c76:	50                   	push   eax
c0023c77:	68 44 cd 02 c0       	push   0xc002cd44
c0023c7c:	e8 22 f1 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023c81:	83 c4 10             	add    esp,0x10
c0023c84:	90                   	nop
c0023c85:	83 c4 0c             	add    esp,0xc
c0023c88:	c3                   	ret    
c0023c89:	90                   	nop

c0023c8a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c8a:	83 ec 0c             	sub    esp,0xc
c0023c8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c91:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c94:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c97:	09 c2                	or     edx,eax
c0023c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c9d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ca3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ca5:	31 c0                	xor    eax,eax
c0023ca7:	c1 e9 08             	shr    ecx,0x8
c0023caa:	83 e1 0f             	and    ecx,0xf
c0023cad:	39 c8                	cmp    eax,ecx
c0023caf:	74 0a                	je     c0023cbb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cb1:	f6 c2 01             	test   dl,0x1
c0023cb4:	74 18                	je     c0023cce <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cb6:	d1 ea                	shr    edx,1
c0023cb8:	40                   	inc    eax
c0023cb9:	eb f2                	jmp    c0023cad <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cbb:	83 ec 0c             	sub    esp,0xc
c0023cbe:	68 68 cd 02 c0       	push   0xc002cd68
c0023cc3:	e8 19 68 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0023cc8:	83 c4 10             	add    esp,0x10
c0023ccb:	83 c8 ff             	or     eax,0xffffffff
c0023cce:	83 c4 0c             	add    esp,0xc
c0023cd1:	c3                   	ret    

c0023cd2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cd6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cd9:	89 c2                	mov    edx,eax
c0023cdb:	c1 ea 08             	shr    edx,0x8
c0023cde:	83 e2 0f             	and    edx,0xf
c0023ce1:	fe ca                	dec    dl
c0023ce3:	75 31                	jne    c0023d16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ce5:	83 e0 0f             	and    eax,0xf
c0023ce8:	3c 03                	cmp    al,0x3
c0023cea:	75 2a                	jne    c0023d16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cec:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023cef:	b8 02 00 00 00       	mov    eax,0x2
c0023cf4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023cfa:	74 1c                	je     c0023d18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cfc:	b8 04 00 00 00       	mov    eax,0x4
c0023d01:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d07:	74 0f                	je     c0023d18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d09:	31 c0                	xor    eax,eax
c0023d0b:	83 fa 03             	cmp    edx,0x3
c0023d0e:	0f 94 c0             	sete   al
c0023d11:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d15:	c3                   	ret    
c0023d16:	31 c0                	xor    eax,eax
c0023d18:	c3                   	ret    
c0023d19:	90                   	nop

c0023d1a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d1e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d21:	0f ba e2 0f          	bt     edx,0xf
c0023d25:	72 f7                	jb     c0023d1e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d27:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d2a:	83 ca 10             	or     edx,0x10
c0023d2d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d30:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d33:	83 ca 01             	or     edx,0x1
c0023d36:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d39:	c3                   	ret    

c0023d3a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d41:	83 e2 fe             	and    edx,0xfffffffe
c0023d44:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d47:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d4a:	83 e2 ef             	and    edx,0xffffffef
c0023d4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d53:	0f ba e2 0e          	bt     edx,0xe
c0023d57:	72 f7                	jb     c0023d50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d59:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d5c:	0f ba e2 0f          	bt     edx,0xf
c0023d60:	72 ee                	jb     c0023d50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d62:	c3                   	ret    
c0023d63:	90                   	nop

c0023d64 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d64:	55                   	push   ebp
c0023d65:	57                   	push   edi
c0023d66:	56                   	push   esi
c0023d67:	53                   	push   ebx
c0023d68:	83 ec 1c             	sub    esp,0x1c
c0023d6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d6f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d73:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d77:	53                   	push   ebx
c0023d78:	89 fd                	mov    ebp,edi
c0023d7a:	56                   	push   esi
c0023d7b:	c1 e5 0a             	shl    ebp,0xa
c0023d7e:	e8 b7 ff ff ff       	call   c0023d3a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d83:	83 ec 0c             	sub    esp,0xc
c0023d86:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d8c:	01 e8                	add    eax,ebp
c0023d8e:	89 03                	mov    DWORD PTR [ebx],eax
c0023d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d92:	68 00 04 00 00       	push   0x400
c0023d97:	6a 00                	push   0x0
c0023d99:	50                   	push   eax
c0023d9a:	e8 e1 c9 fd ff       	call   c0000780 <memset>
c0023d9f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023da5:	89 fa                	mov    edx,edi
c0023da7:	01 e8                	add    eax,ebp
c0023da9:	c1 e7 0d             	shl    edi,0xd
c0023dac:	89 03                	mov    DWORD PTR [ebx],eax
c0023dae:	c1 e2 08             	shl    edx,0x8
c0023db1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023db8:	81 c2 00 80 00 00    	add    edx,0x8000
c0023dbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023dc2:	89 d0                	mov    eax,edx
c0023dc4:	83 c4 1c             	add    esp,0x1c
c0023dc7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023dcd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023dd0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023dd3:	68 00 01 00 00       	push   0x100
c0023dd8:	6a 00                	push   0x0
c0023dda:	50                   	push   eax
c0023ddb:	e8 a0 c9 fd ff       	call   c0000780 <memset>
c0023de0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023de4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023dea:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023df0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023df4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023df7:	83 c4 10             	add    esp,0x10
c0023dfa:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e01:	31 ff                	xor    edi,edi
c0023e03:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e09:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e13:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e19:	83 c5 20             	add    ebp,0x20
c0023e1c:	01 f8                	add    eax,edi
c0023e1e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e21:	52                   	push   edx
c0023e22:	68 00 01 00 00       	push   0x100
c0023e27:	6a 00                	push   0x0
c0023e29:	50                   	push   eax
c0023e2a:	e8 51 c9 fd ff       	call   c0000780 <memset>
c0023e2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e33:	83 c4 10             	add    esp,0x10
c0023e36:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e3c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e43:	01 f8                	add    eax,edi
c0023e45:	81 c7 00 01 00 00    	add    edi,0x100
c0023e4b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e4e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e54:	75 b3                	jne    c0023e09 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e56:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e5a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e5e:	83 c4 1c             	add    esp,0x1c
c0023e61:	5b                   	pop    ebx
c0023e62:	5e                   	pop    esi
c0023e63:	5f                   	pop    edi
c0023e64:	5d                   	pop    ebp
c0023e65:	e9 b0 fe ff ff       	jmp    c0023d1a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e6a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e6a:	55                   	push   ebp
c0023e6b:	57                   	push   edi
c0023e6c:	56                   	push   esi
c0023e6d:	53                   	push   ebx
c0023e6e:	31 db                	xor    ebx,ebx
c0023e70:	83 ec 0c             	sub    esp,0xc
c0023e73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e77:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e7b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e7e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e84:	0f 84 aa 00 00 00    	je     c0023f34 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e8e:	89 d8                	mov    eax,ebx
c0023e90:	c1 e0 07             	shl    eax,0x7
c0023e93:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023e9a:	55                   	push   ebp
c0023e9b:	56                   	push   esi
c0023e9c:	e8 31 fe ff ff       	call   c0023cd2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ea1:	5a                   	pop    edx
c0023ea2:	83 f8 01             	cmp    eax,0x1
c0023ea5:	59                   	pop    ecx
c0023ea6:	75 30                	jne    c0023ed8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023ea8:	50                   	push   eax
c0023ea9:	50                   	push   eax
c0023eaa:	53                   	push   ebx
c0023eab:	68 8d cd 02 c0       	push   0xc002cd8d
c0023eb0:	e8 ee ee fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023eb5:	83 c4 0c             	add    esp,0xc
c0023eb8:	53                   	push   ebx
c0023eb9:	55                   	push   ebp
c0023eba:	56                   	push   esi
c0023ebb:	e8 a4 fe ff ff       	call   c0023d64 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ec0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ec7:	e8 7f b9 fe ff       	call   c000f84b <malloc>
c0023ecc:	89 c5                	mov    ebp,eax
c0023ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ed1:	e8 60 0d 00 00       	call   c0024c36 <SATA::SATA()>
c0023ed6:	eb 33                	jmp    c0023f0b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ed8:	83 f8 04             	cmp    eax,0x4
c0023edb:	75 47                	jne    c0023f24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023edd:	50                   	push   eax
c0023ede:	50                   	push   eax
c0023edf:	53                   	push   ebx
c0023ee0:	68 a4 cd 02 c0       	push   0xc002cda4
c0023ee5:	e8 b9 ee fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023eea:	83 c4 0c             	add    esp,0xc
c0023eed:	53                   	push   ebx
c0023eee:	55                   	push   ebp
c0023eef:	56                   	push   esi
c0023ef0:	e8 6f fe ff ff       	call   c0023d64 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ef5:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023efc:	e8 4a b9 fe ff       	call   c000f84b <malloc>
c0023f01:	89 c5                	mov    ebp,eax
c0023f03:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f06:	e8 d7 10 00 00       	call   c0024fe2 <SATAPI::SATAPI()>
c0023f0b:	5a                   	pop    edx
c0023f0c:	59                   	pop    ecx
c0023f0d:	55                   	push   ebp
c0023f0e:	56                   	push   esi
c0023f0f:	e8 bc 02 ff ff       	call   c00141d0 <Device::addChild(Device*)>
c0023f14:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f17:	56                   	push   esi
c0023f18:	6a 00                	push   0x0
c0023f1a:	53                   	push   ebx
c0023f1b:	55                   	push   ebp
c0023f1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f1f:	83 c4 20             	add    esp,0x20
c0023f22:	eb 10                	jmp    c0023f34 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f24:	50                   	push   eax
c0023f25:	50                   	push   eax
c0023f26:	53                   	push   ebx
c0023f27:	68 bd cd 02 c0       	push   0xc002cdbd
c0023f2c:	e8 72 ee fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0023f31:	83 c4 10             	add    esp,0x10
c0023f34:	d1 ef                	shr    edi,1
c0023f36:	43                   	inc    ebx
c0023f37:	83 fb 20             	cmp    ebx,0x20
c0023f3a:	0f 85 3e ff ff ff    	jne    c0023e7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f40:	83 c4 0c             	add    esp,0xc
c0023f43:	5b                   	pop    ebx
c0023f44:	5e                   	pop    esi
c0023f45:	5f                   	pop    edi
c0023f46:	5d                   	pop    ebp
c0023f47:	c3                   	ret    

c0023f48 <SATABus::open(int, int, void*)>:
c0023f48:	83 ec 14             	sub    esp,0x14
c0023f4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f4f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f55:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f5b:	52                   	push   edx
c0023f5c:	50                   	push   eax
c0023f5d:	e8 08 ff ff ff       	call   c0023e6a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f62:	31 c0                	xor    eax,eax
c0023f64:	83 c4 1c             	add    esp,0x1c
c0023f67:	c3                   	ret    

c0023f68 <ATA::close(int, int, void*)>:
c0023f68:	83 ec 0c             	sub    esp,0xc
c0023f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f6f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f75:	85 c0                	test   eax,eax
c0023f77:	74 0c                	je     c0023f85 <ATA::close(int, int, void*)+0x1d>
c0023f79:	83 ec 0c             	sub    esp,0xc
c0023f7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f7e:	50                   	push   eax
c0023f7f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f82:	83 c4 10             	add    esp,0x10
c0023f85:	31 c0                	xor    eax,eax
c0023f87:	83 c4 0c             	add    esp,0xc
c0023f8a:	c3                   	ret    
c0023f8b:	90                   	nop

c0023f8c <ATA::powerSaving(PowerSavingLevel)>:
c0023f8c:	c3                   	ret    
c0023f8d:	90                   	nop

c0023f8e <ATA::ATA()>:
c0023f8e:	83 ec 0c             	sub    esp,0xc
c0023f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f95:	83 ec 04             	sub    esp,0x4
c0023f98:	68 00 02 00 00       	push   0x200
c0023f9d:	68 a5 ce 02 c0       	push   0xc002cea5
c0023fa2:	50                   	push   eax
c0023fa3:	e8 4c 06 ff ff       	call   c00145f4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fa8:	83 c4 10             	add    esp,0x10
c0023fab:	ba 28 ce 02 c0       	mov    edx,0xc002ce28
c0023fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb4:	89 10                	mov    DWORD PTR [eax],edx
c0023fb6:	90                   	nop
c0023fb7:	83 c4 0c             	add    esp,0xc
c0023fba:	c3                   	ret    
c0023fbb:	90                   	nop

c0023fbc <ATA::flush(bool)>:
c0023fbc:	53                   	push   ebx
c0023fbd:	83 ec 08             	sub    esp,0x8
c0023fc0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fc9:	19 c0                	sbb    eax,eax
c0023fcb:	83 e0 fd             	and    eax,0xfffffffd
c0023fce:	05 ea 00 00 00       	add    eax,0xea
c0023fd3:	50                   	push   eax
c0023fd4:	6a 07                	push   0x7
c0023fd6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fdd:	50                   	push   eax
c0023fde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe4:	e8 dd ef ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fe9:	83 c4 0c             	add    esp,0xc
c0023fec:	6a 00                	push   0x0
c0023fee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff5:	50                   	push   eax
c0023ff6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ffc:	e8 71 fb ff ff       	call   c0023b72 <IDE::polling(unsigned char, unsigned int)>
c0024001:	83 c4 18             	add    esp,0x18
c0024004:	5b                   	pop    ebx
c0024005:	c3                   	ret    

c0024006 <ATA::readyForCommand()>:
c0024006:	56                   	push   esi
c0024007:	53                   	push   ebx
c0024008:	31 db                	xor    ebx,ebx
c002400a:	50                   	push   eax
c002400b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002400f:	50                   	push   eax
c0024010:	6a 0c                	push   0xc
c0024012:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024019:	50                   	push   eax
c002401a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024020:	e8 61 f0 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0024025:	83 c4 10             	add    esp,0x10
c0024028:	a8 88                	test   al,0x88
c002402a:	74 23                	je     c002404f <ATA::readyForCommand()+0x49>
c002402c:	43                   	inc    ebx
c002402d:	83 fb 63             	cmp    ebx,0x63
c0024030:	7e dd                	jle    c002400f <ATA::readyForCommand()+0x9>
c0024032:	51                   	push   ecx
c0024033:	51                   	push   ecx
c0024034:	6a 00                	push   0x0
c0024036:	68 40 42 0f 00       	push   0xf4240
c002403b:	e8 06 a2 ff ff       	call   c001e246 <nanoSleep(unsigned long long)>
c0024040:	83 c4 10             	add    esp,0x10
c0024043:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024049:	75 c4                	jne    c002400f <ATA::readyForCommand()+0x9>
c002404b:	31 c0                	xor    eax,eax
c002404d:	eb 02                	jmp    c0024051 <ATA::readyForCommand()+0x4b>
c002404f:	b0 01                	mov    al,0x1
c0024051:	5a                   	pop    edx
c0024052:	5b                   	pop    ebx
c0024053:	5e                   	pop    esi
c0024054:	c3                   	ret    
c0024055:	90                   	nop

c0024056 <ATA::access(unsigned long long, int, void*, bool)>:
c0024056:	55                   	push   ebp
c0024057:	57                   	push   edi
c0024058:	56                   	push   esi
c0024059:	53                   	push   ebx
c002405a:	83 ec 2c             	sub    esp,0x2c
c002405d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024061:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024065:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024069:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002406d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024071:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024075:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024079:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002407f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024083:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024089:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002408d:	c1 e0 06             	shl    eax,0x6
c0024090:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024098:	74 5d                	je     c00240f7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002409a:	89 fa                	mov    edx,edi
c002409c:	89 f0                	mov    eax,esi
c002409e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240a2:	c1 ea 1c             	shr    edx,0x1c
c00240a5:	89 d1                	mov    ecx,edx
c00240a7:	09 c1                	or     ecx,eax
c00240a9:	74 25                	je     c00240d0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240ab:	31 ed                	xor    ebp,ebp
c00240ad:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240b4:	89 fa                	mov    edx,edi
c00240b6:	89 f0                	mov    eax,esi
c00240b8:	0f ad d0             	shrd   eax,edx,cl
c00240bb:	d3 ea                	shr    edx,cl
c00240bd:	f6 c1 20             	test   cl,0x20
c00240c0:	74 02                	je     c00240c4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240c2:	89 d0                	mov    eax,edx
c00240c4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240c8:	45                   	inc    ebp
c00240c9:	83 fd 06             	cmp    ebp,0x6
c00240cc:	75 df                	jne    c00240ad <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240ce:	eb 76                	jmp    c0024146 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240d0:	89 f0                	mov    eax,esi
c00240d2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240d7:	89 fa                	mov    edx,edi
c00240d9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240e0:	0f ac d0 10          	shrd   eax,edx,0x10
c00240e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240e9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00240ed:	c1 ee 18             	shr    esi,0x18
c00240f0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00240f5:	eb 56                	jmp    c002414d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240f7:	6a 00                	push   0x0
c00240f9:	6a 3f                	push   0x3f
c00240fb:	57                   	push   edi
c00240fc:	56                   	push   esi
c00240fd:	e8 a2 29 00 00       	call   c0026aa4 <__umoddi3>
c0024102:	83 c4 10             	add    esp,0x10
c0024105:	40                   	inc    eax
c0024106:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002410a:	6a 00                	push   0x0
c002410c:	68 f0 03 00 00       	push   0x3f0
c0024111:	57                   	push   edi
c0024112:	56                   	push   esi
c0024113:	e8 8c 28 00 00       	call   c00269a4 <__udivdi3>
c0024118:	83 c4 10             	add    esp,0x10
c002411b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024120:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024127:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002412c:	6a 00                	push   0x0
c002412e:	6a 3f                	push   0x3f
c0024130:	57                   	push   edi
c0024131:	56                   	push   esi
c0024132:	e8 6d 28 00 00       	call   c00269a4 <__udivdi3>
c0024137:	83 c4 10             	add    esp,0x10
c002413a:	89 c6                	mov    esi,eax
c002413c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024141:	83 e6 0f             	and    esi,0xf
c0024144:	eb 07                	jmp    c002414d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024146:	31 f6                	xor    esi,esi
c0024148:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002414d:	bf 01 00 00 00       	mov    edi,0x1
c0024152:	50                   	push   eax
c0024153:	6a 00                	push   0x0
c0024155:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002415c:	50                   	push   eax
c002415d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024161:	e8 6c f0 ff ff       	call   c00231d2 <IDE::enableIRQs(unsigned char, bool)>
c0024166:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024169:	e8 98 fe ff ff       	call   c0024006 <ATA::readyForCommand()>
c002416e:	83 c4 10             	add    esp,0x10
c0024171:	84 c0                	test   al,al
c0024173:	0f 84 5a 02 00 00    	je     c00243d3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024179:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002417f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024185:	c1 e0 04             	shl    eax,0x4
c0024188:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002418f:	09 c6                	or     esi,eax
c0024191:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024196:	75 05                	jne    c002419d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024198:	83 ce a0             	or     esi,0xffffffa0
c002419b:	eb 03                	jmp    c00241a0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002419d:	83 ce e0             	or     esi,0xffffffe0
c00241a0:	89 f0                	mov    eax,esi
c00241a2:	0f b6 f0             	movzx  esi,al
c00241a5:	56                   	push   esi
c00241a6:	6a 06                	push   0x6
c00241a8:	51                   	push   ecx
c00241a9:	52                   	push   edx
c00241aa:	e8 17 ee ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241af:	83 c4 10             	add    esp,0x10
c00241b2:	6a 00                	push   0x0
c00241b4:	6a 01                	push   0x1
c00241b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241bd:	50                   	push   eax
c00241be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241c4:	e8 fd ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241c9:	83 c4 10             	add    esp,0x10
c00241cc:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241d1:	75 6e                	jne    c0024241 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241d3:	6a 00                	push   0x0
c00241d5:	6a 08                	push   0x8
c00241d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241de:	50                   	push   eax
c00241df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e5:	e8 dc ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ea:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00241ef:	50                   	push   eax
c00241f0:	6a 09                	push   0x9
c00241f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f9:	50                   	push   eax
c00241fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024200:	e8 c1 ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024205:	83 c4 20             	add    esp,0x20
c0024208:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002420d:	50                   	push   eax
c002420e:	6a 0a                	push   0xa
c0024210:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024217:	50                   	push   eax
c0024218:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002421e:	e8 a3 ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024223:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024228:	50                   	push   eax
c0024229:	6a 0b                	push   0xb
c002422b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024232:	50                   	push   eax
c0024233:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024239:	e8 88 ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002423e:	83 c4 20             	add    esp,0x20
c0024241:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024246:	50                   	push   eax
c0024247:	6a 02                	push   0x2
c0024249:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024250:	50                   	push   eax
c0024251:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024257:	e8 6a ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024261:	50                   	push   eax
c0024262:	6a 03                	push   0x3
c0024264:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002426b:	50                   	push   eax
c002426c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024272:	e8 4f ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024277:	83 c4 20             	add    esp,0x20
c002427a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002427f:	50                   	push   eax
c0024280:	6a 04                	push   0x4
c0024282:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024289:	50                   	push   eax
c002428a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024290:	e8 31 ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024295:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002429a:	50                   	push   eax
c002429b:	6a 05                	push   0x5
c002429d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242a4:	50                   	push   eax
c00242a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ab:	e8 16 ed ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b0:	83 c4 20             	add    esp,0x20
c00242b3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242b8:	0f 94 c0             	sete   al
c00242bb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242c0:	74 09                	je     c00242cb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242c2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242c9:	eb 07                	jmp    c00242d2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242cb:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242d2:	0f b6 c0             	movzx  eax,al
c00242d5:	50                   	push   eax
c00242d6:	6a 07                	push   0x7
c00242d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242df:	50                   	push   eax
c00242e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e6:	e8 db ec ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242eb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00242ef:	83 c4 10             	add    esp,0x10
c00242f2:	85 f6                	test   esi,esi
c00242f4:	0f 84 ba 00 00 00    	je     c00243b4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00242fa:	50                   	push   eax
c00242fb:	6a 01                	push   0x1
c00242fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024304:	50                   	push   eax
c0024305:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002430b:	e8 62 f8 ff ff       	call   c0023b72 <IDE::polling(unsigned char, unsigned int)>
c0024310:	83 c4 10             	add    esp,0x10
c0024313:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024319:	84 c0                	test   al,al
c002431b:	74 2c                	je     c0024349 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002431d:	0f b6 f8             	movzx  edi,al
c0024320:	0f b6 d2             	movzx  edx,dl
c0024323:	57                   	push   edi
c0024324:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002432b:	50                   	push   eax
c002432c:	52                   	push   edx
c002432d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024333:	e8 a4 f6 ff ff       	call   c00239dc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024338:	c7 04 24 00 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce00
c002433f:	e8 5f ea fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0024344:	e9 87 00 00 00       	jmp    c00243d0 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024349:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002434e:	74 33                	je     c0024383 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024350:	31 ed                	xor    ebp,ebp
c0024352:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024356:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002435a:	50                   	push   eax
c002435b:	50                   	push   eax
c002435c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024363:	50                   	push   eax
c0024364:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002436a:	e8 45 ec ff ff       	call   c0022fb4 <IDE::getBase(unsigned char)>
c002436f:	89 c2                	mov    edx,eax
c0024371:	89 f8                	mov    eax,edi
c0024373:	66 ef                	out    dx,ax
c0024375:	45                   	inc    ebp
c0024376:	83 c4 10             	add    esp,0x10
c0024379:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002437f:	75 d1                	jne    c0024352 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024381:	eb 23                	jmp    c00243a6 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024383:	0f b6 d2             	movzx  edx,dl
c0024386:	51                   	push   ecx
c0024387:	51                   	push   ecx
c0024388:	52                   	push   edx
c0024389:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002438f:	e8 20 ec ff ff       	call   c0022fb4 <IDE::getBase(unsigned char)>
c0024394:	b9 00 01 00 00       	mov    ecx,0x100
c0024399:	89 c2                	mov    edx,eax
c002439b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002439f:	fc                   	cld    
c00243a0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243a3:	83 c4 10             	add    esp,0x10
c00243a6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243ae:	4e                   	dec    esi
c00243af:	e9 3e ff ff ff       	jmp    c00242f2 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243b4:	31 ff                	xor    edi,edi
c00243b6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243bb:	74 16                	je     c00243d3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243bd:	50                   	push   eax
c00243be:	50                   	push   eax
c00243bf:	31 c0                	xor    eax,eax
c00243c1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243c6:	0f 94 c0             	sete   al
c00243c9:	50                   	push   eax
c00243ca:	53                   	push   ebx
c00243cb:	e8 ec fb ff ff       	call   c0023fbc <ATA::flush(bool)>
c00243d0:	83 c4 10             	add    esp,0x10
c00243d3:	83 c4 2c             	add    esp,0x2c
c00243d6:	89 f8                	mov    eax,edi
c00243d8:	5b                   	pop    ebx
c00243d9:	5e                   	pop    esi
c00243da:	5f                   	pop    edi
c00243db:	5d                   	pop    ebp
c00243dc:	c3                   	ret    
c00243dd:	90                   	nop

c00243de <ATA::read(unsigned long long, int, void*)>:
c00243de:	57                   	push   edi
c00243df:	b8 04 00 00 00       	mov    eax,0x4
c00243e4:	56                   	push   esi
c00243e5:	53                   	push   ebx
c00243e6:	83 ec 10             	sub    esp,0x10
c00243e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00243ed:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00243f1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243f4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00243f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00243fc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024402:	77 3b                	ja     c002443f <ATA::read(unsigned long long, int, void*)+0x61>
c0024404:	b8 06 00 00 00       	mov    eax,0x6
c0024409:	85 d2                	test   edx,edx
c002440b:	74 32                	je     c002443f <ATA::read(unsigned long long, int, void*)+0x61>
c002440d:	50                   	push   eax
c002440e:	50                   	push   eax
c002440f:	6a 00                	push   0x0
c0024411:	52                   	push   edx
c0024412:	53                   	push   ebx
c0024413:	57                   	push   edi
c0024414:	56                   	push   esi
c0024415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024419:	e8 38 fc ff ff       	call   c0024056 <ATA::access(unsigned long long, int, void*, bool)>
c002441e:	83 c4 20             	add    esp,0x20
c0024421:	85 c0                	test   eax,eax
c0024423:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024427:	75 11                	jne    c002443a <ATA::read(unsigned long long, int, void*)+0x5c>
c0024429:	01 1d a8 27 03 c0    	add    DWORD PTR ds:0xc00327a8,ebx
c002442f:	e8 c4 c4 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0024434:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024438:	eb 05                	jmp    c002443f <ATA::read(unsigned long long, int, void*)+0x61>
c002443a:	b8 01 00 00 00       	mov    eax,0x1
c002443f:	83 c4 10             	add    esp,0x10
c0024442:	5b                   	pop    ebx
c0024443:	5e                   	pop    esi
c0024444:	5f                   	pop    edi
c0024445:	c3                   	ret    

c0024446 <ATA::write(unsigned long long, int, void*)>:
c0024446:	57                   	push   edi
c0024447:	b8 04 00 00 00       	mov    eax,0x4
c002444c:	56                   	push   esi
c002444d:	53                   	push   ebx
c002444e:	83 ec 10             	sub    esp,0x10
c0024451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024455:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024459:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002445c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024460:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024464:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002446a:	77 3b                	ja     c00244a7 <ATA::write(unsigned long long, int, void*)+0x61>
c002446c:	b8 06 00 00 00       	mov    eax,0x6
c0024471:	85 d2                	test   edx,edx
c0024473:	74 32                	je     c00244a7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024475:	50                   	push   eax
c0024476:	50                   	push   eax
c0024477:	6a 01                	push   0x1
c0024479:	52                   	push   edx
c002447a:	53                   	push   ebx
c002447b:	57                   	push   edi
c002447c:	56                   	push   esi
c002447d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024481:	e8 d0 fb ff ff       	call   c0024056 <ATA::access(unsigned long long, int, void*, bool)>
c0024486:	83 c4 20             	add    esp,0x20
c0024489:	85 c0                	test   eax,eax
c002448b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002448f:	75 11                	jne    c00244a2 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024491:	01 1d a4 27 03 c0    	add    DWORD PTR ds:0xc00327a4,ebx
c0024497:	e8 5c c4 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c002449c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244a0:	eb 05                	jmp    c00244a7 <ATA::write(unsigned long long, int, void*)+0x61>
c00244a2:	b8 01 00 00 00       	mov    eax,0x1
c00244a7:	83 c4 10             	add    esp,0x10
c00244aa:	5b                   	pop    ebx
c00244ab:	5e                   	pop    esi
c00244ac:	5f                   	pop    edi
c00244ad:	c3                   	ret    

c00244ae <ATA::detectCHS()>:
c00244ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244b2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244b8:	c1 e0 06             	shl    eax,0x6
c00244bb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244c1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244cb:	c7 44 24 04 0b ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce0b
c00244d3:	e9 09 60 ff ff       	jmp    c001a4e1 <Krnl::panic(char const*)>

c00244d8 <ATA::open(int, int, void*)>:
c00244d8:	53                   	push   ebx
c00244d9:	83 ec 08             	sub    esp,0x8
c00244dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244e8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244ee:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244f4:	c1 e0 06             	shl    eax,0x6
c00244f7:	01 d0                	add    eax,edx
c00244f9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024500:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024506:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002450d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024517:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002451d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024524:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002452b:	75 0c                	jne    c0024539 <ATA::open(int, int, void*)+0x61>
c002452d:	83 ec 0c             	sub    esp,0xc
c0024530:	53                   	push   ebx
c0024531:	e8 78 ff ff ff       	call   c00244ae <ATA::detectCHS()>
c0024536:	83 c4 10             	add    esp,0x10
c0024539:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002453f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024545:	c1 e0 06             	shl    eax,0x6
c0024548:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002454f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024559:	d1 e8                	shr    eax,1
c002455b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024561:	6a 04                	push   0x4
c0024563:	6a 0c                	push   0xc
c0024565:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002456c:	50                   	push   eax
c002456d:	52                   	push   edx
c002456e:	e8 53 ea ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024573:	90                   	nop
c0024574:	90                   	nop
c0024575:	6a 00                	push   0x0
c0024577:	6a 0c                	push   0xc
c0024579:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024580:	50                   	push   eax
c0024581:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024587:	e8 3a ea ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002458c:	83 c4 14             	add    esp,0x14
c002458f:	53                   	push   ebx
c0024590:	e8 c7 00 ff ff       	call   c001465c <PhysicalDisk::startCache()>
c0024595:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024598:	e8 af 22 ff ff       	call   c001684c <createPartitionsForDisk(PhysicalDisk*)>
c002459d:	31 c0                	xor    eax,eax
c002459f:	83 c4 18             	add    esp,0x18
c00245a2:	5b                   	pop    ebx
c00245a3:	c3                   	ret    

c00245a4 <ATAPI::write(unsigned long long, int, void*)>:
c00245a4:	b8 03 00 00 00       	mov    eax,0x3
c00245a9:	c3                   	ret    

c00245aa <ATAPI::close(int, int, void*)>:
c00245aa:	83 ec 0c             	sub    esp,0xc
c00245ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245b7:	85 c0                	test   eax,eax
c00245b9:	74 0c                	je     c00245c7 <ATAPI::close(int, int, void*)+0x1d>
c00245bb:	83 ec 0c             	sub    esp,0xc
c00245be:	8b 10                	mov    edx,DWORD PTR [eax]
c00245c0:	50                   	push   eax
c00245c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245c4:	83 c4 10             	add    esp,0x10
c00245c7:	31 c0                	xor    eax,eax
c00245c9:	83 c4 0c             	add    esp,0xc
c00245cc:	c3                   	ret    
c00245cd:	90                   	nop

c00245ce <ATAPI::ATAPI()>:
c00245ce:	83 ec 0c             	sub    esp,0xc
c00245d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d5:	83 ec 04             	sub    esp,0x4
c00245d8:	68 00 08 00 00       	push   0x800
c00245dd:	68 45 cf 02 c0       	push   0xc002cf45
c00245e2:	50                   	push   eax
c00245e3:	e8 0c 00 ff ff       	call   c00145f4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245e8:	83 c4 10             	add    esp,0x10
c00245eb:	ba 60 ce 02 c0       	mov    edx,0xc002ce60
c00245f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f4:	89 10                	mov    DWORD PTR [eax],edx
c00245f6:	90                   	nop
c00245f7:	83 c4 0c             	add    esp,0xc
c00245fa:	c3                   	ret    
c00245fb:	90                   	nop

c00245fc <ATAPI::readyForCommand()>:
c00245fc:	56                   	push   esi
c00245fd:	53                   	push   ebx
c00245fe:	31 db                	xor    ebx,ebx
c0024600:	50                   	push   eax
c0024601:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024605:	50                   	push   eax
c0024606:	6a 0c                	push   0xc
c0024608:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002460f:	50                   	push   eax
c0024610:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024616:	e8 6b ea ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c002461b:	83 c4 10             	add    esp,0x10
c002461e:	a8 88                	test   al,0x88
c0024620:	74 23                	je     c0024645 <ATAPI::readyForCommand()+0x49>
c0024622:	43                   	inc    ebx
c0024623:	83 fb 63             	cmp    ebx,0x63
c0024626:	7e dd                	jle    c0024605 <ATAPI::readyForCommand()+0x9>
c0024628:	51                   	push   ecx
c0024629:	51                   	push   ecx
c002462a:	6a 00                	push   0x0
c002462c:	68 40 42 0f 00       	push   0xf4240
c0024631:	e8 10 9c ff ff       	call   c001e246 <nanoSleep(unsigned long long)>
c0024636:	83 c4 10             	add    esp,0x10
c0024639:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002463f:	75 c4                	jne    c0024605 <ATAPI::readyForCommand()+0x9>
c0024641:	31 c0                	xor    eax,eax
c0024643:	eb 02                	jmp    c0024647 <ATAPI::readyForCommand()+0x4b>
c0024645:	b0 01                	mov    al,0x1
c0024647:	5a                   	pop    edx
c0024648:	5b                   	pop    ebx
c0024649:	5e                   	pop    esi
c002464a:	c3                   	ret    
c002464b:	90                   	nop

c002464c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002464c:	55                   	push   ebp
c002464d:	57                   	push   edi
c002464e:	56                   	push   esi
c002464f:	53                   	push   ebx
c0024650:	83 ec 20             	sub    esp,0x20
c0024653:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024657:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002465b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002465f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024663:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024667:	6a 01                	push   0x1
c0024669:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024670:	50                   	push   eax
c0024671:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024677:	e8 56 eb ff ff       	call   c00231d2 <IDE::enableIRQs(unsigned char, bool)>
c002467c:	5e                   	pop    esi
c002467d:	58                   	pop    eax
c002467e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024685:	50                   	push   eax
c0024686:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002468c:	e8 0f e9 ff ff       	call   c0022fa0 <IDE::prepareInterrupt(unsigned char)>
c0024691:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024694:	e8 63 ff ff ff       	call   c00245fc <ATAPI::readyForCommand()>
c0024699:	83 c4 10             	add    esp,0x10
c002469c:	84 c0                	test   al,al
c002469e:	75 0a                	jne    c00246aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246a0:	bb 01 00 00 00       	mov    ebx,0x1
c00246a5:	e9 57 02 00 00       	jmp    c0024901 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246aa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246b0:	c1 e0 04             	shl    eax,0x4
c00246b3:	0f b6 c0             	movzx  eax,al
c00246b6:	50                   	push   eax
c00246b7:	6a 06                	push   0x6
c00246b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c0:	50                   	push   eax
c00246c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c7:	e8 fa e8 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246cc:	6a 00                	push   0x0
c00246ce:	6a 01                	push   0x1
c00246d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d7:	50                   	push   eax
c00246d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246de:	e8 e3 e8 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e3:	83 c4 20             	add    esp,0x20
c00246e6:	0f b6 c3             	movzx  eax,bl
c00246e9:	0f b6 df             	movzx  ebx,bh
c00246ec:	50                   	push   eax
c00246ed:	6a 04                	push   0x4
c00246ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f6:	50                   	push   eax
c00246f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246fd:	e8 c4 e8 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024702:	53                   	push   ebx
c0024703:	6a 05                	push   0x5
c0024705:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470c:	50                   	push   eax
c002470d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024713:	e8 ae e8 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024718:	83 c4 20             	add    esp,0x20
c002471b:	68 a0 00 00 00       	push   0xa0
c0024720:	6a 07                	push   0x7
c0024722:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024729:	50                   	push   eax
c002472a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024730:	e8 91 e8 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024735:	83 c4 0c             	add    esp,0xc
c0024738:	6a 01                	push   0x1
c002473a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024741:	50                   	push   eax
c0024742:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024748:	e8 25 f4 ff ff       	call   c0023b72 <IDE::polling(unsigned char, unsigned int)>
c002474d:	83 c4 10             	add    esp,0x10
c0024750:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024756:	84 c0                	test   al,al
c0024758:	74 23                	je     c002477d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002475a:	0f b6 d8             	movzx  ebx,al
c002475d:	0f b6 d2             	movzx  edx,dl
c0024760:	53                   	push   ebx
c0024761:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024768:	50                   	push   eax
c0024769:	52                   	push   edx
c002476a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024770:	e8 67 f2 ff ff       	call   c00239dc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024775:	83 c4 10             	add    esp,0x10
c0024778:	e9 84 01 00 00       	jmp    c0024901 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002477d:	0f b6 d2             	movzx  edx,dl
c0024780:	53                   	push   ebx
c0024781:	53                   	push   ebx
c0024782:	52                   	push   edx
c0024783:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024789:	e8 26 e8 ff ff       	call   c0022fb4 <IDE::getBase(unsigned char)>
c002478e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024792:	b9 06 00 00 00       	mov    ecx,0x6
c0024797:	89 c2                	mov    edx,eax
c0024799:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002479c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247a0:	83 c4 10             	add    esp,0x10
c00247a3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247a9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247b0:	85 db                	test   ebx,ebx
c00247b2:	0f 84 ec 00 00 00    	je     c00248a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247b8:	51                   	push   ecx
c00247b9:	51                   	push   ecx
c00247ba:	52                   	push   edx
c00247bb:	50                   	push   eax
c00247bc:	e8 73 e9 ff ff       	call   c0023134 <IDE::waitInterrupt(unsigned char)>
c00247c1:	83 c4 10             	add    esp,0x10
c00247c4:	84 c0                	test   al,al
c00247c6:	0f 84 d4 fe ff ff    	je     c00246a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247cc:	56                   	push   esi
c00247cd:	56                   	push   esi
c00247ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d5:	50                   	push   eax
c00247d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247dc:	e8 bf e7 ff ff       	call   c0022fa0 <IDE::prepareInterrupt(unsigned char)>
c00247e1:	83 c4 0c             	add    esp,0xc
c00247e4:	6a 04                	push   0x4
c00247e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ed:	50                   	push   eax
c00247ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f4:	e8 8d e8 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c00247f9:	83 c4 0c             	add    esp,0xc
c00247fc:	89 c6                	mov    esi,eax
c00247fe:	6a 05                	push   0x5
c0024800:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024807:	50                   	push   eax
c0024808:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002480e:	e8 73 e8 ff ff       	call   c0023086 <IDE::read(unsigned char, unsigned char)>
c0024813:	89 f1                	mov    ecx,esi
c0024815:	0f b6 c0             	movzx  eax,al
c0024818:	0f b6 f1             	movzx  esi,cl
c002481b:	c1 e0 08             	shl    eax,0x8
c002481e:	09 c6                	or     esi,eax
c0024820:	d1 fe                	sar    esi,1
c0024822:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024826:	83 c4 10             	add    esp,0x10
c0024829:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002482e:	74 41                	je     c0024871 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024830:	31 c9                	xor    ecx,ecx
c0024832:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024838:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002483f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024843:	75 0a                	jne    c002484f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024845:	01 c9                	add    ecx,ecx
c0024847:	01 cd                	add    ebp,ecx
c0024849:	4b                   	dec    ebx
c002484a:	e9 54 ff ff ff       	jmp    c00247a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002484f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024854:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024858:	51                   	push   ecx
c0024859:	51                   	push   ecx
c002485a:	52                   	push   edx
c002485b:	50                   	push   eax
c002485c:	e8 53 e7 ff ff       	call   c0022fb4 <IDE::getBase(unsigned char)>
c0024861:	89 c2                	mov    edx,eax
c0024863:	89 f0                	mov    eax,esi
c0024865:	66 ef                	out    dx,ax
c0024867:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002486b:	83 c4 10             	add    esp,0x10
c002486e:	41                   	inc    ecx
c002486f:	eb c1                	jmp    c0024832 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024871:	31 f6                	xor    esi,esi
c0024873:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024879:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024880:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024884:	75 06                	jne    c002488c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024886:	01 f6                	add    esi,esi
c0024888:	01 f5                	add    ebp,esi
c002488a:	eb bd                	jmp    c0024849 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002488c:	51                   	push   ecx
c002488d:	51                   	push   ecx
c002488e:	52                   	push   edx
c002488f:	50                   	push   eax
c0024890:	e8 1f e7 ff ff       	call   c0022fb4 <IDE::getBase(unsigned char)>
c0024895:	89 c2                	mov    edx,eax
c0024897:	66 ed                	in     ax,dx
c0024899:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002489e:	83 c4 10             	add    esp,0x10
c00248a1:	46                   	inc    esi
c00248a2:	eb cf                	jmp    c0024873 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248a4:	51                   	push   ecx
c00248a5:	51                   	push   ecx
c00248a6:	52                   	push   edx
c00248a7:	50                   	push   eax
c00248a8:	e8 87 e8 ff ff       	call   c0023134 <IDE::waitInterrupt(unsigned char)>
c00248ad:	83 c4 10             	add    esp,0x10
c00248b0:	84 c0                	test   al,al
c00248b2:	0f 84 e8 fd ff ff    	je     c00246a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248b8:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248bd:	52                   	push   edx
c00248be:	52                   	push   edx
c00248bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248c6:	50                   	push   eax
c00248c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248cd:	e8 ce e6 ff ff       	call   c0022fa0 <IDE::prepareInterrupt(unsigned char)>
c00248d2:	83 c4 10             	add    esp,0x10
c00248d5:	50                   	push   eax
c00248d6:	50                   	push   eax
c00248d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248de:	50                   	push   eax
c00248df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248e5:	e8 ca e6 ff ff       	call   c0022fb4 <IDE::getBase(unsigned char)>
c00248ea:	8d 50 07             	lea    edx,[eax+0x7]
c00248ed:	ec                   	in     al,dx
c00248ee:	83 c4 10             	add    esp,0x10
c00248f1:	a8 88                	test   al,0x88
c00248f3:	74 0a                	je     c00248ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248f5:	4b                   	dec    ebx
c00248f6:	75 dd                	jne    c00248d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00248f8:	bb 02 00 00 00       	mov    ebx,0x2
c00248fd:	eb 02                	jmp    c0024901 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248ff:	31 db                	xor    ebx,ebx
c0024901:	83 c4 1c             	add    esp,0x1c
c0024904:	89 d8                	mov    eax,ebx
c0024906:	5b                   	pop    ebx
c0024907:	5e                   	pop    esi
c0024908:	5f                   	pop    edi
c0024909:	5d                   	pop    ebp
c002490a:	c3                   	ret    
c002490b:	90                   	nop

c002490c <ATAPI::diskRemoved()>:
c002490c:	83 ec 18             	sub    esp,0x18
c002490f:	68 51 cf 02 c0       	push   0xc002cf51
c0024914:	e8 8a e4 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0024919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002491d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024924:	83 c4 1c             	add    esp,0x1c
c0024927:	c3                   	ret    

c0024928 <ATAPI::eject()>:
c0024928:	57                   	push   edi
c0024929:	b9 03 00 00 00       	mov    ecx,0x3
c002492e:	53                   	push   ebx
c002492f:	83 ec 14             	sub    esp,0x14
c0024932:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024936:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002493a:	fc                   	cld    
c002493b:	31 c0                	xor    eax,eax
c002493d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002493f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024944:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024949:	50                   	push   eax
c002494a:	50                   	push   eax
c002494b:	6a 00                	push   0x0
c002494d:	6a 00                	push   0x0
c002494f:	6a 00                	push   0x0
c0024951:	6a 02                	push   0x2
c0024953:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024957:	50                   	push   eax
c0024958:	53                   	push   ebx
c0024959:	e8 ee fc ff ff       	call   c002464c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002495e:	83 c4 14             	add    esp,0x14
c0024961:	53                   	push   ebx
c0024962:	e8 a5 ff ff ff       	call   c002490c <ATAPI::diskRemoved()>
c0024967:	83 c4 24             	add    esp,0x24
c002496a:	31 c0                	xor    eax,eax
c002496c:	5b                   	pop    ebx
c002496d:	5f                   	pop    edi
c002496e:	c3                   	ret    
c002496f:	90                   	nop

c0024970 <ATAPI::diskInserted()>:
c0024970:	53                   	push   ebx
c0024971:	83 ec 14             	sub    esp,0x14
c0024974:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024978:	68 68 cf 02 c0       	push   0xc002cf68
c002497d:	e8 21 e4 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0024982:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024989:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002498c:	e8 cb fc fe ff       	call   c001465c <PhysicalDisk::startCache()>
c0024991:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024995:	83 c4 18             	add    esp,0x18
c0024998:	5b                   	pop    ebx
c0024999:	e9 ae 1e ff ff       	jmp    c001684c <createPartitionsForDisk(PhysicalDisk*)>

c002499e <ATAPI::detectMedia()>:
c002499e:	56                   	push   esi
c002499f:	53                   	push   ebx
c00249a0:	83 ec 28             	sub    esp,0x28
c00249a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249a7:	6a 0c                	push   0xc
c00249a9:	6a 00                	push   0x0
c00249ab:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249af:	56                   	push   esi
c00249b0:	e8 cb bd fd ff       	call   c0000780 <memset>
c00249b5:	58                   	pop    eax
c00249b6:	5a                   	pop    edx
c00249b7:	6a 00                	push   0x0
c00249b9:	6a 00                	push   0x0
c00249bb:	6a 00                	push   0x0
c00249bd:	6a 00                	push   0x0
c00249bf:	56                   	push   esi
c00249c0:	53                   	push   ebx
c00249c1:	e8 86 fc ff ff       	call   c002464c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249c6:	83 c4 1c             	add    esp,0x1c
c00249c9:	6a 0c                	push   0xc
c00249cb:	6a 00                	push   0x0
c00249cd:	56                   	push   esi
c00249ce:	e8 ad bd fd ff       	call   c0000780 <memset>
c00249d3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249d8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249dd:	59                   	pop    ecx
c00249de:	58                   	pop    eax
c00249df:	6a 01                	push   0x1
c00249e1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249e5:	50                   	push   eax
c00249e6:	6a 00                	push   0x0
c00249e8:	6a 12                	push   0x12
c00249ea:	56                   	push   esi
c00249eb:	53                   	push   ebx
c00249ec:	e8 5b fc ff ff       	call   c002464c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249f1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249f5:	83 c4 20             	add    esp,0x20
c00249f8:	83 e0 7f             	and    eax,0x7f
c00249fb:	3c 70                	cmp    al,0x70
c00249fd:	74 15                	je     c0024a14 <ATAPI::detectMedia()+0x76>
c00249ff:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a06:	75 0c                	jne    c0024a14 <ATAPI::detectMedia()+0x76>
c0024a08:	83 ec 0c             	sub    esp,0xc
c0024a0b:	53                   	push   ebx
c0024a0c:	e8 5f ff ff ff       	call   c0024970 <ATAPI::diskInserted()>
c0024a11:	83 c4 10             	add    esp,0x10
c0024a14:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a18:	83 e0 0f             	and    eax,0xf
c0024a1b:	3c 02                	cmp    al,0x2
c0024a1d:	75 1b                	jne    c0024a3a <ATAPI::detectMedia()+0x9c>
c0024a1f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a24:	75 2d                	jne    c0024a53 <ATAPI::detectMedia()+0xb5>
c0024a26:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a2d:	74 24                	je     c0024a53 <ATAPI::detectMedia()+0xb5>
c0024a2f:	83 ec 0c             	sub    esp,0xc
c0024a32:	53                   	push   ebx
c0024a33:	e8 d4 fe ff ff       	call   c002490c <ATAPI::diskRemoved()>
c0024a38:	eb 16                	jmp    c0024a50 <ATAPI::detectMedia()+0xb2>
c0024a3a:	84 c0                	test   al,al
c0024a3c:	75 15                	jne    c0024a53 <ATAPI::detectMedia()+0xb5>
c0024a3e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a45:	75 0c                	jne    c0024a53 <ATAPI::detectMedia()+0xb5>
c0024a47:	83 ec 0c             	sub    esp,0xc
c0024a4a:	53                   	push   ebx
c0024a4b:	e8 20 ff ff ff       	call   c0024970 <ATAPI::diskInserted()>
c0024a50:	83 c4 10             	add    esp,0x10
c0024a53:	83 c4 24             	add    esp,0x24
c0024a56:	5b                   	pop    ebx
c0024a57:	5e                   	pop    esi
c0024a58:	c3                   	ret    
c0024a59:	90                   	nop

c0024a5a <ATAPI::open(int, int, void*)>:
c0024a5a:	53                   	push   ebx
c0024a5b:	83 ec 08             	sub    esp,0x8
c0024a5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a6a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a70:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a76:	c1 e0 06             	shl    eax,0x6
c0024a79:	01 d0                	add    eax,edx
c0024a7b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a82:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a88:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a8f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a99:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a9f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024aa6:	6a 04                	push   0x4
c0024aa8:	6a 0c                	push   0xc
c0024aaa:	51                   	push   ecx
c0024aab:	52                   	push   edx
c0024aac:	e8 15 e5 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ab1:	90                   	nop
c0024ab2:	90                   	nop
c0024ab3:	6a 00                	push   0x0
c0024ab5:	6a 0c                	push   0xc
c0024ab7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024abe:	50                   	push   eax
c0024abf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ac5:	e8 fc e4 ff ff       	call   c0022fc6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aca:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024ad1:	83 c4 14             	add    esp,0x14
c0024ad4:	53                   	push   ebx
c0024ad5:	e8 c4 fe ff ff       	call   c002499e <ATAPI::detectMedia()>
c0024ada:	31 c0                	xor    eax,eax
c0024adc:	83 c4 18             	add    esp,0x18
c0024adf:	5b                   	pop    ebx
c0024ae0:	c3                   	ret    
c0024ae1:	90                   	nop

c0024ae2 <ATAPI::read(unsigned long long, int, void*)>:
c0024ae2:	55                   	push   ebp
c0024ae3:	57                   	push   edi
c0024ae4:	56                   	push   esi
c0024ae5:	53                   	push   ebx
c0024ae6:	83 ec 1c             	sub    esp,0x1c
c0024ae9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024aed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024af1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024af5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024afc:	74 41                	je     c0024b3f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024afe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b02:	b9 03 00 00 00       	mov    ecx,0x3
c0024b07:	fc                   	cld    
c0024b08:	31 c0                	xor    eax,eax
c0024b0a:	86 fb                	xchg   bl,bh
c0024b0c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b0e:	c1 c3 10             	rol    ebx,0x10
c0024b11:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b16:	89 e8                	mov    eax,ebp
c0024b18:	86 fb                	xchg   bl,bh
c0024b1a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b1e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b22:	50                   	push   eax
c0024b23:	50                   	push   eax
c0024b24:	55                   	push   ebp
c0024b25:	c1 e5 0b             	shl    ebp,0xb
c0024b28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b2c:	6a 00                	push   0x0
c0024b2e:	55                   	push   ebp
c0024b2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b33:	50                   	push   eax
c0024b34:	56                   	push   esi
c0024b35:	e8 12 fb ff ff       	call   c002464c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b3a:	83 c4 20             	add    esp,0x20
c0024b3d:	eb 1a                	jmp    c0024b59 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b3f:	83 ec 0c             	sub    esp,0xc
c0024b42:	56                   	push   esi
c0024b43:	e8 56 fe ff ff       	call   c002499e <ATAPI::detectMedia()>
c0024b48:	83 c4 10             	add    esp,0x10
c0024b4b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b52:	75 aa                	jne    c0024afe <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b54:	b8 02 00 00 00       	mov    eax,0x2
c0024b59:	83 c4 1c             	add    esp,0x1c
c0024b5c:	5b                   	pop    ebx
c0024b5d:	5e                   	pop    esi
c0024b5e:	5f                   	pop    edi
c0024b5f:	5d                   	pop    ebp
c0024b60:	c3                   	ret    
c0024b61:	90                   	nop

c0024b62 <SATA::close(int, int, void*)>:
c0024b62:	83 ec 0c             	sub    esp,0xc
c0024b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b69:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b6f:	85 c0                	test   eax,eax
c0024b71:	74 0c                	je     c0024b7f <SATA::close(int, int, void*)+0x1d>
c0024b73:	83 ec 0c             	sub    esp,0xc
c0024b76:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b78:	50                   	push   eax
c0024b79:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b7c:	83 c4 10             	add    esp,0x10
c0024b7f:	31 c0                	xor    eax,eax
c0024b81:	83 c4 0c             	add    esp,0xc
c0024b84:	c3                   	ret    
c0024b85:	90                   	nop

c0024b86 <SATA::powerSaving(PowerSavingLevel)>:
c0024b86:	c3                   	ret    
c0024b87:	90                   	nop

c0024b88 <SATA::open(int, int, void*)>:
c0024b88:	56                   	push   esi
c0024b89:	53                   	push   ebx
c0024b8a:	50                   	push   eax
c0024b8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b93:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b9d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024ba3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bb1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bbb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024bc1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024bc8:	e8 ea b2 fe ff       	call   c000feb7 <Phys::allocatePage()>
c0024bcd:	89 c6                	mov    esi,eax
c0024bcf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bd5:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bdb:	e8 d7 b2 fe ff       	call   c000feb7 <Phys::allocatePage()>
c0024be0:	39 c6                	cmp    esi,eax
c0024be2:	74 10                	je     c0024bf4 <SATA::open(int, int, void*)+0x6c>
c0024be4:	83 ec 0c             	sub    esp,0xc
c0024be7:	68 90 ce 02 c0       	push   0xc002ce90
c0024bec:	e8 f0 58 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0024bf1:	83 c4 10             	add    esp,0x10
c0024bf4:	83 ec 0c             	sub    esp,0xc
c0024bf7:	6a 02                	push   0x2
c0024bf9:	e8 d1 cd fe ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c0024bfe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c04:	e8 05 d0 fe ff       	call   c0011c0e <Virt::getAKernelVAS()>
c0024c09:	6a 03                	push   0x3
c0024c0b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c11:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c17:	50                   	push   eax
c0024c18:	e8 df d5 fe ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c1d:	83 c4 14             	add    esp,0x14
c0024c20:	53                   	push   ebx
c0024c21:	e8 36 fa fe ff       	call   c001465c <PhysicalDisk::startCache()>
c0024c26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c29:	e8 1e 1c ff ff       	call   c001684c <createPartitionsForDisk(PhysicalDisk*)>
c0024c2e:	83 c4 14             	add    esp,0x14
c0024c31:	31 c0                	xor    eax,eax
c0024c33:	5b                   	pop    ebx
c0024c34:	5e                   	pop    esi
c0024c35:	c3                   	ret    

c0024c36 <SATA::SATA()>:
c0024c36:	83 ec 0c             	sub    esp,0xc
c0024c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c3d:	83 ec 04             	sub    esp,0x4
c0024c40:	68 00 02 00 00       	push   0x200
c0024c45:	68 a4 ce 02 c0       	push   0xc002cea4
c0024c4a:	50                   	push   eax
c0024c4b:	e8 a4 f9 fe ff       	call   c00145f4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c50:	83 c4 10             	add    esp,0x10
c0024c53:	ba 14 cf 02 c0       	mov    edx,0xc002cf14
c0024c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c5c:	89 10                	mov    DWORD PTR [eax],edx
c0024c5e:	90                   	nop
c0024c5f:	83 c4 0c             	add    esp,0xc
c0024c62:	c3                   	ret    
c0024c63:	90                   	nop

c0024c64 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c64:	55                   	push   ebp
c0024c65:	57                   	push   edi
c0024c66:	56                   	push   esi
c0024c67:	53                   	push   ebx
c0024c68:	83 ec 2c             	sub    esp,0x2c
c0024c6b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c6f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c77:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c7b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c7f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c88:	7e 10                	jle    c0024c9a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c8a:	83 ec 0c             	sub    esp,0xc
c0024c8d:	68 b4 ce 02 c0       	push   0xc002ceb4
c0024c92:	e8 4a 58 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0024c97:	83 c4 10             	add    esp,0x10
c0024c9a:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024ca0:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024ca6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cb0:	89 f0                	mov    eax,esi
c0024cb2:	c1 e0 07             	shl    eax,0x7
c0024cb5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cb9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024cc3:	53                   	push   ebx
c0024cc4:	8d 46 02             	lea    eax,[esi+0x2]
c0024cc7:	53                   	push   ebx
c0024cc8:	c1 e0 07             	shl    eax,0x7
c0024ccb:	bb 01 00 00 00       	mov    ebx,0x1
c0024cd0:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cd4:	50                   	push   eax
c0024cd5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cdb:	e8 aa ef ff ff       	call   c0023c8a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024ce0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024ce4:	83 c4 10             	add    esp,0x10
c0024ce7:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024cec:	0f 84 ce 01 00 00    	je     c0024ec0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024cf2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cf6:	c1 e0 09             	shl    eax,0x9
c0024cf9:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024cfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d02:	74 17                	je     c0024d1b <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d04:	51                   	push   ecx
c0024d05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d09:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d0d:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d13:	e8 34 ba fd ff       	call   c000074c <memcpy>
c0024d18:	83 c4 10             	add    esp,0x10
c0024d1b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d21:	8d 46 02             	lea    eax,[esi+0x2]
c0024d24:	c1 e0 07             	shl    eax,0x7
c0024d27:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d2d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d33:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d3d:	c1 e1 05             	shl    ecx,0x5
c0024d40:	01 c8                	add    eax,ecx
c0024d42:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d46:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d48:	83 e1 01             	and    ecx,0x1
c0024d4b:	83 e3 bf             	and    ebx,0xffffffbf
c0024d4e:	c1 e1 06             	shl    ecx,0x6
c0024d51:	09 d9                	or     ecx,ebx
c0024d53:	88 08                	mov    BYTE PTR [eax],cl
c0024d55:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d57:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d5d:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d63:	89 08                	mov    DWORD PTR [eax],ecx
c0024d65:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d6b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d71:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d77:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d7a:	52                   	push   edx
c0024d7b:	68 90 00 00 00       	push   0x90
c0024d80:	6a 00                	push   0x0
c0024d82:	53                   	push   ebx
c0024d83:	e8 f8 b9 fd ff       	call   c0000780 <memset>
c0024d88:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024d8e:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024d92:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d98:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024da0:	83 c4 10             	add    esp,0x10
c0024da3:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024da6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dac:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024db2:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024db7:	09 c8                	or     eax,ecx
c0024db9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024dbf:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dc2:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024dc9:	66 25 00 7f          	and    ax,0x7f00
c0024dcd:	66 0d 27 80          	or     ax,0x8027
c0024dd1:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024dd6:	66 89 03             	mov    WORD PTR [ebx],ax
c0024dd9:	19 c0                	sbb    eax,eax
c0024ddb:	83 e0 f0             	and    eax,0xfffffff0
c0024dde:	83 c0 35             	add    eax,0x35
c0024de1:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024de4:	89 f8                	mov    eax,edi
c0024de6:	c1 e8 10             	shr    eax,0x10
c0024de9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024dec:	89 f8                	mov    eax,edi
c0024dee:	c1 e8 18             	shr    eax,0x18
c0024df1:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024df4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024df8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024dfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dff:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e02:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e06:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e0a:	89 f3                	mov    ebx,esi
c0024e0c:	31 c0                	xor    eax,eax
c0024e0e:	c1 e3 07             	shl    ebx,0x7
c0024e11:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e15:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e1b:	80 e1 88             	and    cl,0x88
c0024e1e:	74 0a                	je     c0024e2a <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e20:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e25:	74 0a                	je     c0024e31 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e27:	40                   	inc    eax
c0024e28:	eb eb                	jmp    c0024e15 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e2a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e2f:	75 0a                	jne    c0024e3b <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e31:	83 ec 0c             	sub    esp,0xc
c0024e34:	68 ed ce 02 c0       	push   0xc002ceed
c0024e39:	eb 56                	jmp    c0024e91 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e3b:	b8 01 00 00 00       	mov    eax,0x1
c0024e40:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e44:	c1 e6 07             	shl    esi,0x7
c0024e47:	d3 e0                	shl    eax,cl
c0024e49:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e4d:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e53:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e59:	85 c8                	test   eax,ecx
c0024e5b:	74 20                	je     c0024e7d <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e5d:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e63:	0f ba e1 1e          	bt     ecx,0x1e
c0024e67:	73 ea                	jae    c0024e53 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e69:	83 ec 0c             	sub    esp,0xc
c0024e6c:	31 db                	xor    ebx,ebx
c0024e6e:	68 fb ce 02 c0       	push   0xc002cefb
c0024e73:	e8 69 56 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0024e78:	83 c4 10             	add    esp,0x10
c0024e7b:	eb 43                	jmp    c0024ec0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e7d:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e83:	0f ba e0 1e          	bt     eax,0x1e
c0024e87:	73 17                	jae    c0024ea0 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e89:	83 ec 0c             	sub    esp,0xc
c0024e8c:	68 fb ce 02 c0       	push   0xc002cefb
c0024e91:	e8 4b 56 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0024e96:	bb 01 00 00 00       	mov    ebx,0x1
c0024e9b:	83 c4 10             	add    esp,0x10
c0024e9e:	eb 20                	jmp    c0024ec0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ea0:	31 db                	xor    ebx,ebx
c0024ea2:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ea7:	75 17                	jne    c0024ec0 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ea9:	50                   	push   eax
c0024eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024eae:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024eb4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024eb8:	e8 8f b8 fd ff       	call   c000074c <memcpy>
c0024ebd:	83 c4 10             	add    esp,0x10
c0024ec0:	83 c4 2c             	add    esp,0x2c
c0024ec3:	89 d8                	mov    eax,ebx
c0024ec5:	5b                   	pop    ebx
c0024ec6:	5e                   	pop    esi
c0024ec7:	5f                   	pop    edi
c0024ec8:	5d                   	pop    ebp
c0024ec9:	c3                   	ret    

c0024eca <SATA::read(unsigned long long, int, void*)>:
c0024eca:	57                   	push   edi
c0024ecb:	b8 04 00 00 00       	mov    eax,0x4
c0024ed0:	56                   	push   esi
c0024ed1:	53                   	push   ebx
c0024ed2:	83 ec 10             	sub    esp,0x10
c0024ed5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ed9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024edd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ee0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ee4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ee8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024eee:	77 3b                	ja     c0024f2b <SATA::read(unsigned long long, int, void*)+0x61>
c0024ef0:	b8 06 00 00 00       	mov    eax,0x6
c0024ef5:	85 d2                	test   edx,edx
c0024ef7:	74 32                	je     c0024f2b <SATA::read(unsigned long long, int, void*)+0x61>
c0024ef9:	50                   	push   eax
c0024efa:	50                   	push   eax
c0024efb:	6a 00                	push   0x0
c0024efd:	52                   	push   edx
c0024efe:	53                   	push   ebx
c0024eff:	57                   	push   edi
c0024f00:	56                   	push   esi
c0024f01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f05:	e8 5a fd ff ff       	call   c0024c64 <SATA::access(unsigned long long, int, void*, bool)>
c0024f0a:	83 c4 20             	add    esp,0x20
c0024f0d:	85 c0                	test   eax,eax
c0024f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f13:	75 11                	jne    c0024f26 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f15:	01 1d a8 27 03 c0    	add    DWORD PTR ds:0xc00327a8,ebx
c0024f1b:	e8 d8 b9 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0024f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f24:	eb 05                	jmp    c0024f2b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f26:	b8 01 00 00 00       	mov    eax,0x1
c0024f2b:	83 c4 10             	add    esp,0x10
c0024f2e:	5b                   	pop    ebx
c0024f2f:	5e                   	pop    esi
c0024f30:	5f                   	pop    edi
c0024f31:	c3                   	ret    

c0024f32 <SATA::write(unsigned long long, int, void*)>:
c0024f32:	55                   	push   ebp
c0024f33:	b8 04 00 00 00       	mov    eax,0x4
c0024f38:	57                   	push   edi
c0024f39:	56                   	push   esi
c0024f3a:	53                   	push   ebx
c0024f3b:	83 ec 1c             	sub    esp,0x1c
c0024f3e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f42:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f46:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f49:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f4d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f51:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f57:	77 56                	ja     c0024faf <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f59:	b8 06 00 00 00       	mov    eax,0x6
c0024f5e:	85 ff                	test   edi,edi
c0024f60:	74 4d                	je     c0024faf <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f62:	89 ee                	mov    esi,ebp
c0024f64:	c1 e6 09             	shl    esi,0x9
c0024f67:	01 fe                	add    esi,edi
c0024f69:	89 c8                	mov    eax,ecx
c0024f6b:	89 da                	mov    edx,ebx
c0024f6d:	83 c0 01             	add    eax,0x1
c0024f70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f74:	83 d2 00             	adc    edx,0x0
c0024f77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f7b:	50                   	push   eax
c0024f7c:	50                   	push   eax
c0024f7d:	6a 01                	push   0x1
c0024f7f:	57                   	push   edi
c0024f80:	81 c7 00 02 00 00    	add    edi,0x200
c0024f86:	6a 01                	push   0x1
c0024f88:	53                   	push   ebx
c0024f89:	51                   	push   ecx
c0024f8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f8e:	e8 d1 fc ff ff       	call   c0024c64 <SATA::access(unsigned long long, int, void*, bool)>
c0024f93:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024f97:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f9b:	83 c4 20             	add    esp,0x20
c0024f9e:	39 f7                	cmp    edi,esi
c0024fa0:	75 c7                	jne    c0024f69 <SATA::write(unsigned long long, int, void*)+0x37>
c0024fa2:	01 2d a4 27 03 c0    	add    DWORD PTR ds:0xc00327a4,ebp
c0024fa8:	e8 4b b9 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0024fad:	31 c0                	xor    eax,eax
c0024faf:	83 c4 1c             	add    esp,0x1c
c0024fb2:	5b                   	pop    ebx
c0024fb3:	5e                   	pop    esi
c0024fb4:	5f                   	pop    edi
c0024fb5:	5d                   	pop    ebp
c0024fb6:	c3                   	ret    
c0024fb7:	90                   	nop

c0024fb8 <SATAPI::write(unsigned long long, int, void*)>:
c0024fb8:	b8 03 00 00 00       	mov    eax,0x3
c0024fbd:	c3                   	ret    

c0024fbe <SATAPI::close(int, int, void*)>:
c0024fbe:	83 ec 0c             	sub    esp,0xc
c0024fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fcb:	85 c0                	test   eax,eax
c0024fcd:	74 0c                	je     c0024fdb <SATAPI::close(int, int, void*)+0x1d>
c0024fcf:	83 ec 0c             	sub    esp,0xc
c0024fd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fd4:	50                   	push   eax
c0024fd5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fd8:	83 c4 10             	add    esp,0x10
c0024fdb:	31 c0                	xor    eax,eax
c0024fdd:	83 c4 0c             	add    esp,0xc
c0024fe0:	c3                   	ret    
c0024fe1:	90                   	nop

c0024fe2 <SATAPI::SATAPI()>:
c0024fe2:	83 ec 0c             	sub    esp,0xc
c0024fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe9:	83 ec 04             	sub    esp,0x4
c0024fec:	68 00 08 00 00       	push   0x800
c0024ff1:	68 44 cf 02 c0       	push   0xc002cf44
c0024ff6:	50                   	push   eax
c0024ff7:	e8 f8 f5 fe ff       	call   c00145f4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ffc:	83 c4 10             	add    esp,0x10
c0024fff:	ba f0 cf 02 c0       	mov    edx,0xc002cff0
c0025004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025008:	89 10                	mov    DWORD PTR [eax],edx
c002500a:	90                   	nop
c002500b:	83 c4 0c             	add    esp,0xc
c002500e:	c3                   	ret    
c002500f:	90                   	nop

c0025010 <SATAPI::diskRemoved()>:
c0025010:	83 ec 18             	sub    esp,0x18
c0025013:	68 50 cf 02 c0       	push   0xc002cf50
c0025018:	e8 86 dd fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c002501d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025021:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025028:	83 c4 1c             	add    esp,0x1c
c002502b:	c3                   	ret    

c002502c <SATAPI::diskInserted()>:
c002502c:	53                   	push   ebx
c002502d:	83 ec 14             	sub    esp,0x14
c0025030:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025034:	68 67 cf 02 c0       	push   0xc002cf67
c0025039:	e8 65 dd fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c002503e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025045:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025048:	e8 0f f6 fe ff       	call   c001465c <PhysicalDisk::startCache()>
c002504d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025051:	83 c4 18             	add    esp,0x18
c0025054:	5b                   	pop    ebx
c0025055:	e9 f2 17 ff ff       	jmp    c001684c <createPartitionsForDisk(PhysicalDisk*)>

c002505a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002505a:	55                   	push   ebp
c002505b:	57                   	push   edi
c002505c:	56                   	push   esi
c002505d:	53                   	push   ebx
c002505e:	83 ec 24             	sub    esp,0x24
c0025061:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025065:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025069:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002506f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025073:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025077:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002507d:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025086:	c1 e3 07             	shl    ebx,0x7
c0025089:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002508d:	89 f8                	mov    eax,edi
c002508f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025093:	c1 e0 07             	shl    eax,0x7
c0025096:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002509a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002509e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250a8:	53                   	push   ebx
c00250a9:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250af:	e8 d6 eb ff ff       	call   c0023c8a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250b8:	83 c4 10             	add    esp,0x10
c00250bb:	b8 01 00 00 00       	mov    eax,0x1
c00250c0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250c5:	0f 84 8a 01 00 00    	je     c0025255 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250cb:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250d3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250d9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00250e3:	c1 e1 05             	shl    ecx,0x5
c00250e6:	01 c8                	add    eax,ecx
c00250e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250ea:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00250f0:	81 c9 25 00 01 00    	or     ecx,0x10025
c00250f6:	89 08                	mov    DWORD PTR [eax],ecx
c00250f8:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250fe:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025104:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002510a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002510d:	52                   	push   edx
c002510e:	68 90 00 00 00       	push   0x90
c0025113:	6a 00                	push   0x0
c0025115:	53                   	push   ebx
c0025116:	e8 65 b6 fd ff       	call   c0000780 <memset>
c002511b:	83 c4 0c             	add    esp,0xc
c002511e:	8d 43 40             	lea    eax,[ebx+0x40]
c0025121:	6a 0c                	push   0xc
c0025123:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025127:	50                   	push   eax
c0025128:	e8 1f b6 fd ff       	call   c000074c <memcpy>
c002512d:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025133:	89 ea                	mov    edx,ebp
c0025135:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002513b:	c1 ea 18             	shr    edx,0x18
c002513e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025142:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025145:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025148:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002514c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025152:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025158:	25 00 00 c0 ff       	and    eax,0xffc00000
c002515d:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025161:	09 c8                	or     eax,ecx
c0025163:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025167:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002516d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025170:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025177:	66 25 00 7f          	and    ax,0x7f00
c002517b:	66 0d 27 80          	or     ax,0x8027
c002517f:	66 89 03             	mov    WORD PTR [ebx],ax
c0025182:	89 e8                	mov    eax,ebp
c0025184:	c1 e8 10             	shr    eax,0x10
c0025187:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002518a:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002518e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025195:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025198:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002519c:	83 c4 10             	add    esp,0x10
c002519f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251a7:	31 c0                	xor    eax,eax
c00251a9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251af:	80 e1 88             	and    cl,0x88
c00251b2:	74 0a                	je     c00251be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251b4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251b9:	74 0a                	je     c00251c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251bb:	40                   	inc    eax
c00251bc:	eb eb                	jmp    c00251a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251c3:	75 0f                	jne    c00251d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251c5:	83 ec 0c             	sub    esp,0xc
c00251c8:	68 ed ce 02 c0       	push   0xc002ceed
c00251cd:	e8 0f 53 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c00251d2:	eb 3a                	jmp    c002520e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251d4:	b8 01 00 00 00       	mov    eax,0x1
c00251d9:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251dd:	c1 e7 07             	shl    edi,0x7
c00251e0:	d3 e0                	shl    eax,cl
c00251e2:	03 3c 24             	add    edi,DWORD PTR [esp]
c00251e5:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00251eb:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00251f1:	85 d0                	test   eax,edx
c00251f3:	74 23                	je     c0025218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00251f5:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00251fb:	0f ba e2 1e          	bt     edx,0x1e
c00251ff:	73 ea                	jae    c00251eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025201:	83 ec 0c             	sub    esp,0xc
c0025204:	68 7f cf 02 c0       	push   0xc002cf7f
c0025209:	e8 95 db fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c002520e:	83 c4 10             	add    esp,0x10
c0025211:	b8 01 00 00 00       	mov    eax,0x1
c0025216:	eb 3d                	jmp    c0025255 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025218:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002521e:	0f ba e0 1e          	bt     eax,0x1e
c0025222:	73 0a                	jae    c002522e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025224:	83 ec 0c             	sub    esp,0xc
c0025227:	68 92 cf 02 c0       	push   0xc002cf92
c002522c:	eb db                	jmp    c0025209 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002522e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025233:	74 1e                	je     c0025253 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025235:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002523a:	74 17                	je     c0025253 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002523c:	50                   	push   eax
c002523d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025241:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025247:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002524b:	e8 fc b4 fd ff       	call   c000074c <memcpy>
c0025250:	83 c4 10             	add    esp,0x10
c0025253:	31 c0                	xor    eax,eax
c0025255:	83 c4 1c             	add    esp,0x1c
c0025258:	5b                   	pop    ebx
c0025259:	5e                   	pop    esi
c002525a:	5f                   	pop    edi
c002525b:	5d                   	pop    ebp
c002525c:	c3                   	ret    
c002525d:	90                   	nop

c002525e <SATAPI::eject()>:
c002525e:	57                   	push   edi
c002525f:	b9 03 00 00 00       	mov    ecx,0x3
c0025264:	53                   	push   ebx
c0025265:	83 ec 14             	sub    esp,0x14
c0025268:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002526c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025270:	fc                   	cld    
c0025271:	31 c0                	xor    eax,eax
c0025273:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025275:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002527a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002527f:	50                   	push   eax
c0025280:	6a 00                	push   0x0
c0025282:	6a 00                	push   0x0
c0025284:	6a 00                	push   0x0
c0025286:	6a 00                	push   0x0
c0025288:	6a 02                	push   0x2
c002528a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002528e:	50                   	push   eax
c002528f:	53                   	push   ebx
c0025290:	e8 c5 fd ff ff       	call   c002505a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025295:	83 c4 14             	add    esp,0x14
c0025298:	53                   	push   ebx
c0025299:	e8 72 fd ff ff       	call   c0025010 <SATAPI::diskRemoved()>
c002529e:	83 c4 24             	add    esp,0x24
c00252a1:	31 c0                	xor    eax,eax
c00252a3:	5b                   	pop    ebx
c00252a4:	5f                   	pop    edi
c00252a5:	c3                   	ret    

c00252a6 <SATAPI::detectMedia()>:
c00252a6:	56                   	push   esi
c00252a7:	53                   	push   ebx
c00252a8:	83 ec 28             	sub    esp,0x28
c00252ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252af:	6a 0c                	push   0xc
c00252b1:	6a 00                	push   0x0
c00252b3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252b7:	56                   	push   esi
c00252b8:	e8 c3 b4 fd ff       	call   c0000780 <memset>
c00252bd:	83 c4 0c             	add    esp,0xc
c00252c0:	6a 00                	push   0x0
c00252c2:	6a 00                	push   0x0
c00252c4:	6a 00                	push   0x0
c00252c6:	6a 00                	push   0x0
c00252c8:	6a 00                	push   0x0
c00252ca:	56                   	push   esi
c00252cb:	53                   	push   ebx
c00252cc:	e8 89 fd ff ff       	call   c002505a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252d1:	83 c4 1c             	add    esp,0x1c
c00252d4:	6a 0c                	push   0xc
c00252d6:	6a 00                	push   0x0
c00252d8:	56                   	push   esi
c00252d9:	e8 a2 b4 fd ff       	call   c0000780 <memset>
c00252de:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00252e3:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252e8:	83 c4 0c             	add    esp,0xc
c00252eb:	6a 01                	push   0x1
c00252ed:	8d 44 24 16          	lea    eax,[esp+0x16]
c00252f1:	50                   	push   eax
c00252f2:	6a 00                	push   0x0
c00252f4:	6a 00                	push   0x0
c00252f6:	6a 12                	push   0x12
c00252f8:	56                   	push   esi
c00252f9:	53                   	push   ebx
c00252fa:	e8 5b fd ff ff       	call   c002505a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252ff:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025303:	83 c4 20             	add    esp,0x20
c0025306:	83 e0 7f             	and    eax,0x7f
c0025309:	3c 70                	cmp    al,0x70
c002530b:	74 15                	je     c0025322 <SATAPI::detectMedia()+0x7c>
c002530d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025314:	75 0c                	jne    c0025322 <SATAPI::detectMedia()+0x7c>
c0025316:	83 ec 0c             	sub    esp,0xc
c0025319:	53                   	push   ebx
c002531a:	e8 0d fd ff ff       	call   c002502c <SATAPI::diskInserted()>
c002531f:	83 c4 10             	add    esp,0x10
c0025322:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025326:	83 e0 0f             	and    eax,0xf
c0025329:	3c 02                	cmp    al,0x2
c002532b:	75 1b                	jne    c0025348 <SATAPI::detectMedia()+0xa2>
c002532d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025332:	75 2d                	jne    c0025361 <SATAPI::detectMedia()+0xbb>
c0025334:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002533b:	74 24                	je     c0025361 <SATAPI::detectMedia()+0xbb>
c002533d:	83 ec 0c             	sub    esp,0xc
c0025340:	53                   	push   ebx
c0025341:	e8 ca fc ff ff       	call   c0025010 <SATAPI::diskRemoved()>
c0025346:	eb 16                	jmp    c002535e <SATAPI::detectMedia()+0xb8>
c0025348:	84 c0                	test   al,al
c002534a:	75 15                	jne    c0025361 <SATAPI::detectMedia()+0xbb>
c002534c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025353:	75 0c                	jne    c0025361 <SATAPI::detectMedia()+0xbb>
c0025355:	83 ec 0c             	sub    esp,0xc
c0025358:	53                   	push   ebx
c0025359:	e8 ce fc ff ff       	call   c002502c <SATAPI::diskInserted()>
c002535e:	83 c4 10             	add    esp,0x10
c0025361:	83 c4 24             	add    esp,0x24
c0025364:	5b                   	pop    ebx
c0025365:	5e                   	pop    esi
c0025366:	c3                   	ret    
c0025367:	90                   	nop

c0025368 <SATAPI::open(int, int, void*)>:
c0025368:	56                   	push   esi
c0025369:	53                   	push   ebx
c002536a:	50                   	push   eax
c002536b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002536f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025373:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002537d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025383:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002538d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025391:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002539b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253a1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253a8:	e8 0a ab fe ff       	call   c000feb7 <Phys::allocatePage()>
c00253ad:	89 c6                	mov    esi,eax
c00253af:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253b5:	81 c6 00 10 00 00    	add    esi,0x1000
c00253bb:	e8 f7 aa fe ff       	call   c000feb7 <Phys::allocatePage()>
c00253c0:	39 c6                	cmp    esi,eax
c00253c2:	74 10                	je     c00253d4 <SATAPI::open(int, int, void*)+0x6c>
c00253c4:	83 ec 0c             	sub    esp,0xc
c00253c7:	68 a7 cf 02 c0       	push   0xc002cfa7
c00253cc:	e8 10 51 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c00253d1:	83 c4 10             	add    esp,0x10
c00253d4:	83 ec 0c             	sub    esp,0xc
c00253d7:	6a 02                	push   0x2
c00253d9:	e8 f1 c5 fe ff       	call   c00119cf <Virt::allocateKernelVirtualPages(int)>
c00253de:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253e4:	e8 25 c8 fe ff       	call   c0011c0e <Virt::getAKernelVAS()>
c00253e9:	6a 03                	push   0x3
c00253eb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00253f1:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253f7:	50                   	push   eax
c00253f8:	e8 ff cd fe ff       	call   c00121fc <VAS::mapPage(unsigned long, unsigned long, int)>
c00253fd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025404:	83 c4 14             	add    esp,0x14
c0025407:	53                   	push   ebx
c0025408:	e8 99 fe ff ff       	call   c00252a6 <SATAPI::detectMedia()>
c002540d:	83 c4 14             	add    esp,0x14
c0025410:	31 c0                	xor    eax,eax
c0025412:	5b                   	pop    ebx
c0025413:	5e                   	pop    esi
c0025414:	c3                   	ret    
c0025415:	90                   	nop

c0025416 <SATAPI::read(unsigned long long, int, void*)>:
c0025416:	55                   	push   ebp
c0025417:	57                   	push   edi
c0025418:	56                   	push   esi
c0025419:	53                   	push   ebx
c002541a:	83 ec 1c             	sub    esp,0x1c
c002541d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025421:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025425:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025429:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025430:	74 19                	je     c002544b <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025432:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025437:	7e 2e                	jle    c0025467 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025439:	83 ec 0c             	sub    esp,0xc
c002543c:	68 bd cf 02 c0       	push   0xc002cfbd
c0025441:	e8 9b 50 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0025446:	83 c4 10             	add    esp,0x10
c0025449:	eb 1c                	jmp    c0025467 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002544b:	83 ec 0c             	sub    esp,0xc
c002544e:	55                   	push   ebp
c002544f:	e8 52 fe ff ff       	call   c00252a6 <SATAPI::detectMedia()>
c0025454:	83 c4 10             	add    esp,0x10
c0025457:	b8 02 00 00 00       	mov    eax,0x2
c002545c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025463:	75 cd                	jne    c0025432 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025465:	eb 49                	jmp    c00254b0 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025467:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002546b:	b9 03 00 00 00       	mov    ecx,0x3
c0025470:	fc                   	cld    
c0025471:	31 c0                	xor    eax,eax
c0025473:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025475:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002547a:	89 d8                	mov    eax,ebx
c002547c:	86 e0                	xchg   al,ah
c002547e:	c1 c0 10             	rol    eax,0x10
c0025481:	86 e0                	xchg   al,ah
c0025483:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025487:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002548b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002548f:	50                   	push   eax
c0025490:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025494:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025498:	56                   	push   esi
c0025499:	53                   	push   ebx
c002549a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002549e:	c1 e0 0b             	shl    eax,0xb
c00254a1:	50                   	push   eax
c00254a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254a6:	50                   	push   eax
c00254a7:	55                   	push   ebp
c00254a8:	e8 ad fb ff ff       	call   c002505a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254ad:	83 c4 20             	add    esp,0x20
c00254b0:	83 c4 1c             	add    esp,0x1c
c00254b3:	5b                   	pop    ebx
c00254b4:	5e                   	pop    esi
c00254b5:	5f                   	pop    edi
c00254b6:	5d                   	pop    ebp
c00254b7:	c3                   	ret    

c00254b8 <AVX::open(int, int, void*)>:
c00254b8:	83 ec 0c             	sub    esp,0xc
c00254bb:	e8 48 11 00 00       	call   c0026608 <avxInit>
c00254c0:	b8 00 00 00 00       	mov    eax,0x0
c00254c5:	83 c4 0c             	add    esp,0xc
c00254c8:	c3                   	ret    
c00254c9:	90                   	nop

c00254ca <AVX::close(int, int, void*)>:
c00254ca:	83 ec 0c             	sub    esp,0xc
c00254cd:	e8 37 11 00 00       	call   c0026609 <avxClose>
c00254d2:	b8 00 00 00 00       	mov    eax,0x0
c00254d7:	83 c4 0c             	add    esp,0xc
c00254da:	c3                   	ret    
c00254db:	90                   	nop

c00254dc <AVX::available()>:
c00254dc:	83 ec 0c             	sub    esp,0xc
c00254df:	e8 1c 11 00 00       	call   c0026600 <avxDetect>
c00254e4:	85 c0                	test   eax,eax
c00254e6:	0f 95 c0             	setne  al
c00254e9:	83 c4 0c             	add    esp,0xc
c00254ec:	c3                   	ret    
c00254ed:	90                   	nop

c00254ee <AVX::save(void*)>:
c00254ee:	83 ec 0c             	sub    esp,0xc
c00254f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254f5:	83 ec 0c             	sub    esp,0xc
c00254f8:	50                   	push   eax
c00254f9:	e8 08 11 00 00       	call   c0026606 <avxSave>
c00254fe:	83 c4 10             	add    esp,0x10
c0025501:	90                   	nop
c0025502:	83 c4 0c             	add    esp,0xc
c0025505:	c3                   	ret    

c0025506 <AVX::load(void*)>:
c0025506:	83 ec 0c             	sub    esp,0xc
c0025509:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002550d:	83 ec 0c             	sub    esp,0xc
c0025510:	50                   	push   eax
c0025511:	e8 f1 10 00 00       	call   c0026607 <avxLoad>
c0025516:	83 c4 10             	add    esp,0x10
c0025519:	90                   	nop
c002551a:	83 c4 0c             	add    esp,0xc
c002551d:	c3                   	ret    

c002551e <AVX::AVX()>:
c002551e:	83 ec 0c             	sub    esp,0xc
c0025521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025525:	83 ec 08             	sub    esp,0x8
c0025528:	68 20 d0 02 c0       	push   0xc002d020
c002552d:	50                   	push   eax
c002552e:	e8 9f f1 fe ff       	call   c00146d2 <FPU::FPU(char const*)>
c0025533:	83 c4 10             	add    esp,0x10
c0025536:	ba 30 d0 02 c0       	mov    edx,0xc002d030
c002553b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002553f:	89 10                	mov    DWORD PTR [eax],edx
c0025541:	90                   	nop
c0025542:	83 c4 0c             	add    esp,0xc
c0025545:	c3                   	ret    

c0025546 <MMX::available()>:
c0025546:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c002554b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025551:	83 e0 20             	and    eax,0x20
c0025554:	84 c0                	test   al,al
c0025556:	0f 95 c0             	setne  al
c0025559:	c3                   	ret    

c002555a <MMX::open(int, int, void*)>:
c002555a:	83 ec 0c             	sub    esp,0xc
c002555d:	e8 30 11 00 00       	call   c0026692 <x87Init>
c0025562:	b8 00 00 00 00       	mov    eax,0x0
c0025567:	83 c4 0c             	add    esp,0xc
c002556a:	c3                   	ret    
c002556b:	90                   	nop

c002556c <MMX::close(int, int, void*)>:
c002556c:	83 ec 0c             	sub    esp,0xc
c002556f:	e8 38 11 00 00       	call   c00266ac <x87Close>
c0025574:	b8 00 00 00 00       	mov    eax,0x0
c0025579:	83 c4 0c             	add    esp,0xc
c002557c:	c3                   	ret    
c002557d:	90                   	nop

c002557e <MMX::save(void*)>:
c002557e:	83 ec 0c             	sub    esp,0xc
c0025581:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025585:	83 ec 0c             	sub    esp,0xc
c0025588:	50                   	push   eax
c0025589:	e8 f3 10 00 00       	call   c0026681 <x87Save>
c002558e:	83 c4 10             	add    esp,0x10
c0025591:	90                   	nop
c0025592:	83 c4 0c             	add    esp,0xc
c0025595:	c3                   	ret    

c0025596 <MMX::load(void*)>:
c0025596:	83 ec 0c             	sub    esp,0xc
c0025599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002559d:	83 ec 0c             	sub    esp,0xc
c00255a0:	50                   	push   eax
c00255a1:	e8 e4 10 00 00       	call   c002668a <x87Load>
c00255a6:	83 c4 10             	add    esp,0x10
c00255a9:	90                   	nop
c00255aa:	83 c4 0c             	add    esp,0xc
c00255ad:	c3                   	ret    

c00255ae <MMX::MMX()>:
c00255ae:	83 ec 0c             	sub    esp,0xc
c00255b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b5:	83 ec 08             	sub    esp,0x8
c00255b8:	68 60 d0 02 c0       	push   0xc002d060
c00255bd:	50                   	push   eax
c00255be:	e8 0f f1 fe ff       	call   c00146d2 <FPU::FPU(char const*)>
c00255c3:	83 c4 10             	add    esp,0x10
c00255c6:	ba 70 d0 02 c0       	mov    edx,0xc002d070
c00255cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255cf:	89 10                	mov    DWORD PTR [eax],edx
c00255d1:	90                   	nop
c00255d2:	83 c4 0c             	add    esp,0xc
c00255d5:	c3                   	ret    

c00255d6 <SSE::open(int, int, void*)>:
c00255d6:	83 ec 0c             	sub    esp,0xc
c00255d9:	e8 66 10 00 00       	call   c0026644 <sseInit>
c00255de:	b8 00 00 00 00       	mov    eax,0x0
c00255e3:	83 c4 0c             	add    esp,0xc
c00255e6:	c3                   	ret    
c00255e7:	90                   	nop

c00255e8 <SSE::close(int, int, void*)>:
c00255e8:	83 ec 0c             	sub    esp,0xc
c00255eb:	e8 64 10 00 00       	call   c0026654 <sseClose>
c00255f0:	b8 00 00 00 00       	mov    eax,0x0
c00255f5:	83 c4 0c             	add    esp,0xc
c00255f8:	c3                   	ret    
c00255f9:	90                   	nop

c00255fa <SSE::available()>:
c00255fa:	83 ec 1c             	sub    esp,0x1c
c00255fd:	e8 1e 10 00 00       	call   c0026620 <absolutelyNoChanceInHell>
c0025602:	85 c0                	test   eax,eax
c0025604:	0f 95 c0             	setne  al
c0025607:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002560b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002560f:	83 c4 1c             	add    esp,0x1c
c0025612:	c3                   	ret    
c0025613:	90                   	nop

c0025614 <SSE::save(void*)>:
c0025614:	83 ec 0c             	sub    esp,0xc
c0025617:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002561b:	83 ec 0c             	sub    esp,0xc
c002561e:	50                   	push   eax
c002561f:	e8 14 10 00 00       	call   c0026638 <sseSave>
c0025624:	83 c4 10             	add    esp,0x10
c0025627:	90                   	nop
c0025628:	83 c4 0c             	add    esp,0xc
c002562b:	c3                   	ret    

c002562c <SSE::load(void*)>:
c002562c:	83 ec 0c             	sub    esp,0xc
c002562f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025633:	83 ec 0c             	sub    esp,0xc
c0025636:	50                   	push   eax
c0025637:	e8 02 10 00 00       	call   c002663e <sseLoad>
c002563c:	83 c4 10             	add    esp,0x10
c002563f:	90                   	nop
c0025640:	83 c4 0c             	add    esp,0xc
c0025643:	c3                   	ret    

c0025644 <SSE::SSE()>:
c0025644:	83 ec 0c             	sub    esp,0xc
c0025647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564b:	83 ec 08             	sub    esp,0x8
c002564e:	68 a0 d0 02 c0       	push   0xc002d0a0
c0025653:	50                   	push   eax
c0025654:	e8 79 f0 fe ff       	call   c00146d2 <FPU::FPU(char const*)>
c0025659:	83 c4 10             	add    esp,0x10
c002565c:	ba b0 d0 02 c0       	mov    edx,0xc002d0b0
c0025661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025665:	89 10                	mov    DWORD PTR [eax],edx
c0025667:	90                   	nop
c0025668:	83 c4 0c             	add    esp,0xc
c002566b:	c3                   	ret    

c002566c <x87::open(int, int, void*)>:
c002566c:	83 ec 0c             	sub    esp,0xc
c002566f:	e8 1e 10 00 00       	call   c0026692 <x87Init>
c0025674:	b8 00 00 00 00       	mov    eax,0x0
c0025679:	83 c4 0c             	add    esp,0xc
c002567c:	c3                   	ret    
c002567d:	90                   	nop

c002567e <x87::close(int, int, void*)>:
c002567e:	83 ec 0c             	sub    esp,0xc
c0025681:	e8 26 10 00 00       	call   c00266ac <x87Close>
c0025686:	b8 00 00 00 00       	mov    eax,0x0
c002568b:	83 c4 0c             	add    esp,0xc
c002568e:	c3                   	ret    
c002568f:	90                   	nop

c0025690 <x87::available()>:
c0025690:	83 ec 0c             	sub    esp,0xc
c0025693:	e8 ce 0f 00 00       	call   c0026666 <x87Detect>
c0025698:	85 c0                	test   eax,eax
c002569a:	0f 95 c0             	setne  al
c002569d:	83 c4 0c             	add    esp,0xc
c00256a0:	c3                   	ret    
c00256a1:	90                   	nop

c00256a2 <x87::save(void*)>:
c00256a2:	83 ec 0c             	sub    esp,0xc
c00256a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256a9:	83 ec 0c             	sub    esp,0xc
c00256ac:	50                   	push   eax
c00256ad:	e8 cf 0f 00 00       	call   c0026681 <x87Save>
c00256b2:	83 c4 10             	add    esp,0x10
c00256b5:	90                   	nop
c00256b6:	83 c4 0c             	add    esp,0xc
c00256b9:	c3                   	ret    

c00256ba <x87::load(void*)>:
c00256ba:	83 ec 0c             	sub    esp,0xc
c00256bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256c1:	83 ec 0c             	sub    esp,0xc
c00256c4:	50                   	push   eax
c00256c5:	e8 c0 0f 00 00       	call   c002668a <x87Load>
c00256ca:	83 c4 10             	add    esp,0x10
c00256cd:	90                   	nop
c00256ce:	83 c4 0c             	add    esp,0xc
c00256d1:	c3                   	ret    

c00256d2 <x87::x87()>:
c00256d2:	83 ec 0c             	sub    esp,0xc
c00256d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d9:	83 ec 08             	sub    esp,0x8
c00256dc:	68 e0 d0 02 c0       	push   0xc002d0e0
c00256e1:	50                   	push   eax
c00256e2:	e8 eb ef fe ff       	call   c00146d2 <FPU::FPU(char const*)>
c00256e7:	83 c4 10             	add    esp,0x10
c00256ea:	ba f0 d0 02 c0       	mov    edx,0xc002d0f0
c00256ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f3:	89 10                	mov    DWORD PTR [eax],edx
c00256f5:	90                   	nop
c00256f6:	83 c4 0c             	add    esp,0xc
c00256f9:	c3                   	ret    

c00256fa <APIC::disable()>:
c00256fa:	90                   	nop
c00256fb:	c3                   	ret    

c00256fc <APIC::close(int, int, void*)>:
c00256fc:	55                   	push   ebp
c00256fd:	89 e5                	mov    ebp,esp
c00256ff:	83 ec 08             	sub    esp,0x8
c0025702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025705:	8b 00                	mov    eax,DWORD PTR [eax]
c0025707:	83 c0 3c             	add    eax,0x3c
c002570a:	8b 00                	mov    eax,DWORD PTR [eax]
c002570c:	83 ec 0c             	sub    esp,0xc
c002570f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025712:	ff d0                	call   eax
c0025714:	83 c4 10             	add    esp,0x10
c0025717:	b8 00 00 00 00       	mov    eax,0x0
c002571c:	c9                   	leave  
c002571d:	c3                   	ret    

c002571e <IOAPIC::close(int, int, void*)>:
c002571e:	b8 00 00 00 00       	mov    eax,0x0
c0025723:	c3                   	ret    

c0025724 <APIC::io_wait()>:
c0025724:	eb 00                	jmp    c0025726 <APIC::io_wait()+0x2>
c0025726:	eb 00                	jmp    c0025728 <APIC::io_wait()+0x4>
c0025728:	90                   	nop
c0025729:	c3                   	ret    

c002572a <APIC::getBase()>:
c002572a:	55                   	push   ebp
c002572b:	89 e5                	mov    ebp,esp
c002572d:	83 ec 18             	sub    esp,0x18
c0025730:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0025735:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002573b:	83 e0 08             	and    eax,0x8
c002573e:	84 c0                	test   al,al
c0025740:	75 07                	jne    c0025749 <APIC::getBase()+0x1f>
c0025742:	b8 00 00 00 00       	mov    eax,0x0
c0025747:	eb 21                	jmp    c002576a <APIC::getBase()+0x40>
c0025749:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c002574e:	83 ec 08             	sub    esp,0x8
c0025751:	6a 1b                	push   0x1b
c0025753:	50                   	push   eax
c0025754:	e8 97 96 fe ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0025759:	83 c4 10             	add    esp,0x10
c002575c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002575f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025762:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025765:	25 00 f0 ff ff       	and    eax,0xfffff000
c002576a:	c9                   	leave  
c002576b:	c3                   	ret    

c002576c <APIC::eoi(unsigned char)>:
c002576c:	55                   	push   ebp
c002576d:	89 e5                	mov    ebp,esp
c002576f:	83 ec 28             	sub    esp,0x28
c0025772:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025775:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025778:	83 ec 0c             	sub    esp,0xc
c002577b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577e:	e8 a7 ff ff ff       	call   c002572a <APIC::getBase()>
c0025783:	83 c4 10             	add    esp,0x10
c0025786:	05 b0 00 00 00       	add    eax,0xb0
c002578b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002578e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025791:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025797:	90                   	nop
c0025798:	c9                   	leave  
c0025799:	c3                   	ret    

c002579a <APIC::open(int, int, void*)>:
c002579a:	55                   	push   ebp
c002579b:	89 e5                	mov    ebp,esp
c002579d:	57                   	push   edi
c002579e:	56                   	push   esi
c002579f:	53                   	push   ebx
c00257a0:	83 ec 2c             	sub    esp,0x2c
c00257a3:	83 ec 0c             	sub    esp,0xc
c00257a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257a9:	e8 7c ff ff ff       	call   c002572a <APIC::getBase()>
c00257ae:	83 c4 10             	add    esp,0x10
c00257b1:	89 c2                	mov    edx,eax
c00257b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257b6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257bc:	0f b6 f8             	movzx  edi,al
c00257bf:	89 d0                	mov    eax,edx
c00257c1:	ba 00 00 00 00       	mov    edx,0x0
c00257c6:	89 c1                	mov    ecx,eax
c00257c8:	80 e5 ff             	and    ch,0xff
c00257cb:	89 cb                	mov    ebx,ecx
c00257cd:	0f b6 f2             	movzx  esi,dl
c00257d0:	89 d8                	mov    eax,ebx
c00257d2:	89 f2                	mov    edx,esi
c00257d4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257d7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257da:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257de:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257e2:	83 e0 00             	and    eax,0x0
c00257e5:	09 d0                	or     eax,edx
c00257e7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ee:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257f4:	8d 50 01             	lea    edx,[eax+0x1]
c00257f7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257fa:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025800:	0f b6 d0             	movzx  edx,al
c0025803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025806:	83 c2 08             	add    edx,0x8
c0025809:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002580d:	0f b6 c9             	movzx  ecx,cl
c0025810:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025816:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002581a:	83 ec 0c             	sub    esp,0xc
c002581d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025820:	e8 05 ff ff ff       	call   c002572a <APIC::getBase()>
c0025825:	83 c4 10             	add    esp,0x10
c0025828:	05 f0 00 00 00       	add    eax,0xf0
c002582d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025830:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025833:	8b 00                	mov    eax,DWORD PTR [eax]
c0025835:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025838:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002583f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025846:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025849:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002584c:	89 10                	mov    DWORD PTR [eax],edx
c002584e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025855:	a1 30 0d 03 c0       	mov    eax,ds:0xc0030d30
c002585a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002585d:	7d 7c                	jge    c00258db <APIC::open(int, int, void*)+0x141>
c002585f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025862:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c0025869:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002586c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002586f:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c0025876:	c1 e8 08             	shr    eax,0x8
c0025879:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002587d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025880:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c0025887:	c1 e8 18             	shr    eax,0x18
c002588a:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002588d:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025891:	75 40                	jne    c00258d3 <APIC::open(int, int, void*)+0x139>
c0025893:	83 ec 0c             	sub    esp,0xc
c0025896:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025899:	e8 8c fe ff ff       	call   c002572a <APIC::getBase()>
c002589e:	83 c4 10             	add    esp,0x10
c00258a1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258a5:	75 07                	jne    c00258ae <APIC::open(int, int, void*)+0x114>
c00258a7:	ba 60 03 00 00       	mov    edx,0x360
c00258ac:	eb 05                	jmp    c00258b3 <APIC::open(int, int, void*)+0x119>
c00258ae:	ba 50 03 00 00       	mov    edx,0x350
c00258b3:	01 d0                	add    eax,edx
c00258b5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258b8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00258bd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258c0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258c7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258cb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258ce:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258d1:	89 10                	mov    DWORD PTR [eax],edx
c00258d3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258d6:	e9 7a ff ff ff       	jmp    c0025855 <APIC::open(int, int, void*)+0xbb>
c00258db:	b8 00 00 00 00       	mov    eax,0x0
c00258e0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258e3:	5b                   	pop    ebx
c00258e4:	5e                   	pop    esi
c00258e5:	5f                   	pop    edi
c00258e6:	5d                   	pop    ebp
c00258e7:	c3                   	ret    

c00258e8 <IOAPIC::IOAPIC()>:
c00258e8:	83 ec 0c             	sub    esp,0xc
c00258eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ef:	83 ec 08             	sub    esp,0x8
c00258f2:	68 20 d1 02 c0       	push   0xc002d120
c00258f7:	50                   	push   eax
c00258f8:	e8 c3 ea fe ff       	call   c00143c0 <Device::Device(char const*)>
c00258fd:	83 c4 10             	add    esp,0x10
c0025900:	ba 48 d2 02 c0       	mov    edx,0xc002d248
c0025905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025909:	89 10                	mov    DWORD PTR [eax],edx
c002590b:	90                   	nop
c002590c:	83 c4 0c             	add    esp,0xc
c002590f:	c3                   	ret    

c0025910 <APIC::APIC()>:
c0025910:	53                   	push   ebx
c0025911:	83 ec 18             	sub    esp,0x18
c0025914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025918:	83 ec 08             	sub    esp,0x8
c002591b:	68 28 d1 02 c0       	push   0xc002d128
c0025920:	50                   	push   eax
c0025921:	e8 06 f2 fe ff       	call   c0014b2c <InterruptController::InterruptController(char const*)>
c0025926:	83 c4 10             	add    esp,0x10
c0025929:	ba 00 d2 02 c0       	mov    edx,0xc002d200
c002592e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025932:	89 10                	mov    DWORD PTR [eax],edx
c0025934:	a0 00 28 03 c0       	mov    al,ds:0xc0032800
c0025939:	83 f0 01             	xor    eax,0x1
c002593c:	84 c0                	test   al,al
c002593e:	0f 84 a1 00 00 00    	je     c00259e5 <APIC::APIC()+0xd5>
c0025944:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025949:	a0 e0 0d 03 c0       	mov    al,ds:0xc0030de0
c002594e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025952:	0f 83 86 00 00 00    	jae    c00259de <APIC::APIC()+0xce>
c0025958:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025960:	83 ec 0c             	sub    esp,0xc
c0025963:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025967:	e8 df 9e fe ff       	call   c000f84b <malloc>
c002596c:	83 c4 10             	add    esp,0x10
c002596f:	89 c3                	mov    ebx,eax
c0025971:	83 ec 0c             	sub    esp,0xc
c0025974:	53                   	push   ebx
c0025975:	e8 6e ff ff ff       	call   c00258e8 <IOAPIC::IOAPIC()>
c002597a:	83 c4 10             	add    esp,0x10
c002597d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025981:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025986:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002598a:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0025991:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0025996:	40                   	inc    eax
c0025997:	a3 c0 27 03 c0       	mov    ds:0xc00327c0,eax
c002599c:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c00259a1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259a7:	83 ec 08             	sub    esp,0x8
c00259aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259ae:	50                   	push   eax
c00259af:	e8 1c e8 fe ff       	call   c00141d0 <Device::addChild(Device*)>
c00259b4:	83 c4 10             	add    esp,0x10
c00259b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00259bd:	83 c0 08             	add    eax,0x8
c00259c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00259c2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259c7:	6a 00                	push   0x0
c00259c9:	6a 00                	push   0x0
c00259cb:	52                   	push   edx
c00259cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259d0:	ff d0                	call   eax
c00259d2:	83 c4 10             	add    esp,0x10
c00259d5:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259d9:	e9 6b ff ff ff       	jmp    c0025949 <APIC::APIC()+0x39>
c00259de:	c6 05 00 28 03 c0 01 	mov    BYTE PTR ds:0xc0032800,0x1
c00259e5:	90                   	nop
c00259e6:	83 c4 18             	add    esp,0x18
c00259e9:	5b                   	pop    ebx
c00259ea:	c3                   	ret    
c00259eb:	90                   	nop

c00259ec <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00259ec:	55                   	push   ebp
c00259ed:	89 e5                	mov    ebp,esp
c00259ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259f8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259fb:	72 1d                	jb     c0025a1a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a00:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a09:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a0f:	01 d0                	add    eax,edx
c0025a11:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a14:	73 04                	jae    c0025a1a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a16:	b0 01                	mov    al,0x1
c0025a18:	eb 02                	jmp    c0025a1c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a1a:	b0 00                	mov    al,0x0
c0025a1c:	5d                   	pop    ebp
c0025a1d:	c3                   	ret    

c0025a1e <IOAPIC::read(int)>:
c0025a1e:	55                   	push   ebp
c0025a1f:	89 e5                	mov    ebp,esp
c0025a21:	83 ec 10             	sub    esp,0x10
c0025a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a27:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a2d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a33:	0f b6 d0             	movzx  edx,al
c0025a36:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a39:	89 10                	mov    DWORD PTR [eax],edx
c0025a3b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a3e:	83 c0 10             	add    eax,0x10
c0025a41:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a43:	c9                   	leave  
c0025a44:	c3                   	ret    
c0025a45:	90                   	nop

c0025a46 <IOAPIC::open(int, int, void*)>:
c0025a46:	55                   	push   ebp
c0025a47:	89 e5                	mov    ebp,esp
c0025a49:	57                   	push   edi
c0025a4a:	56                   	push   esi
c0025a4b:	53                   	push   ebx
c0025a4c:	83 ec 0c             	sub    esp,0xc
c0025a4f:	83 ec 0c             	sub    esp,0xc
c0025a52:	68 53 d1 02 c0       	push   0xc002d153
c0025a57:	e8 47 d3 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0025a5c:	83 c4 10             	add    esp,0x10
c0025a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a62:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a65:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a74:	8b 14 85 20 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1e0]
c0025a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a7e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a8d:	8b 14 85 a0 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf160]
c0025a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a97:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025aaf:	0f b6 f8             	movzx  edi,al
c0025ab2:	89 d0                	mov    eax,edx
c0025ab4:	ba 00 00 00 00       	mov    edx,0x0
c0025ab9:	89 c1                	mov    ecx,eax
c0025abb:	80 e5 ff             	and    ch,0xff
c0025abe:	89 cb                	mov    ebx,ecx
c0025ac0:	0f b6 f2             	movzx  esi,dl
c0025ac3:	89 d8                	mov    eax,ebx
c0025ac5:	89 f2                	mov    edx,esi
c0025ac7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025aca:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025acd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ad1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ad5:	83 e0 00             	and    eax,0x0
c0025ad8:	09 d0                	or     eax,edx
c0025ada:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ae7:	8d 50 01             	lea    edx,[eax+0x1]
c0025aea:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025aed:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025af3:	0f b6 d0             	movzx  edx,al
c0025af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af9:	83 c2 08             	add    edx,0x8
c0025afc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b00:	0f b6 c9             	movzx  ecx,cl
c0025b03:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b09:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b0d:	83 ec 08             	sub    esp,0x8
c0025b10:	6a 01                	push   0x1
c0025b12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b15:	e8 04 ff ff ff       	call   c0025a1e <IOAPIC::read(int)>
c0025b1a:	83 c4 10             	add    esp,0x10
c0025b1d:	c1 f8 10             	sar    eax,0x10
c0025b20:	0f b6 c0             	movzx  eax,al
c0025b23:	8d 50 01             	lea    edx,[eax+0x1]
c0025b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b29:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b2f:	b8 00 00 00 00       	mov    eax,0x0
c0025b34:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b37:	5b                   	pop    ebx
c0025b38:	5e                   	pop    esi
c0025b39:	5f                   	pop    edi
c0025b3a:	5d                   	pop    ebp
c0025b3b:	c3                   	ret    

c0025b3c <IOAPIC::write(int, int)>:
c0025b3c:	55                   	push   ebp
c0025b3d:	89 e5                	mov    ebp,esp
c0025b3f:	83 ec 10             	sub    esp,0x10
c0025b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b4b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b51:	0f b6 d0             	movzx  edx,al
c0025b54:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b57:	89 10                	mov    DWORD PTR [eax],edx
c0025b59:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b5c:	8d 50 10             	lea    edx,[eax+0x10]
c0025b5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b62:	89 02                	mov    DWORD PTR [edx],eax
c0025b64:	90                   	nop
c0025b65:	c9                   	leave  
c0025b66:	c3                   	ret    
c0025b67:	90                   	nop

c0025b68 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b68:	55                   	push   ebp
c0025b69:	89 e5                	mov    ebp,esp
c0025b6b:	53                   	push   ebx
c0025b6c:	83 ec 2c             	sub    esp,0x2c
c0025b6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b72:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b75:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b78:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b7b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b7e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b81:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b84:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b87:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b8a:	88 d8                	mov    al,bl
c0025b8c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b8f:	88 c8                	mov    al,cl
c0025b91:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b94:	88 d0                	mov    al,dl
c0025b96:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b99:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b9d:	83 c0 08             	add    eax,0x8
c0025ba0:	01 c0                	add    eax,eax
c0025ba2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ba5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ba9:	83 c0 08             	add    eax,0x8
c0025bac:	01 c0                	add    eax,eax
c0025bae:	40                   	inc    eax
c0025baf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bb2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bb5:	50                   	push   eax
c0025bb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bb9:	e8 60 fe ff ff       	call   c0025a1e <IOAPIC::read(int)>
c0025bbe:	83 c4 08             	add    esp,0x8
c0025bc1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025bc4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025bcb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bce:	c1 e0 18             	shl    eax,0x18
c0025bd1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bd4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bda:	52                   	push   edx
c0025bdb:	50                   	push   eax
c0025bdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bdf:	e8 58 ff ff ff       	call   c0025b3c <IOAPIC::write(int, int)>
c0025be4:	83 c4 0c             	add    esp,0xc
c0025be7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bea:	50                   	push   eax
c0025beb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bee:	e8 2b fe ff ff       	call   c0025a1e <IOAPIC::read(int)>
c0025bf3:	83 c4 08             	add    esp,0x8
c0025bf6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025bf9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c00:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c07:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c0e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c12:	74 09                	je     c0025c1d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c14:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c1b:	eb 07                	jmp    c0025c24 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c1d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c24:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c28:	74 09                	je     c0025c33 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c2a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c31:	eb 07                	jmp    c0025c3a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c33:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c3a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c41:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c45:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c48:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c4e:	52                   	push   edx
c0025c4f:	50                   	push   eax
c0025c50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c53:	e8 e4 fe ff ff       	call   c0025b3c <IOAPIC::write(int, int)>
c0025c58:	83 c4 0c             	add    esp,0xc
c0025c5b:	90                   	nop
c0025c5c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c5f:	c9                   	leave  
c0025c60:	c3                   	ret    
c0025c61:	90                   	nop

c0025c62 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c62:	55                   	push   ebp
c0025c63:	89 e5                	mov    ebp,esp
c0025c65:	57                   	push   edi
c0025c66:	56                   	push   esi
c0025c67:	53                   	push   ebx
c0025c68:	83 ec 2c             	sub    esp,0x2c
c0025c6b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c6e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c71:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c75:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c79:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c7d:	74 5a                	je     c0025cd9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c7f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c83:	7f 44                	jg     c0025cc9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c85:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c88:	05 a0 d6 02 c0       	add    eax,0xc002d6a0
c0025c8d:	8a 00                	mov    al,BYTE PTR [eax]
c0025c8f:	0f b6 c0             	movzx  eax,al
c0025c92:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c98:	66 8b 84 00 c0 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf240]
c0025ca0:	0f b7 c0             	movzx  eax,ax
c0025ca3:	83 e0 02             	and    eax,0x2
c0025ca6:	85 c0                	test   eax,eax
c0025ca8:	74 04                	je     c0025cae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025caa:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cb1:	66 8b 84 00 c0 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf240]
c0025cb9:	0f b7 c0             	movzx  eax,ax
c0025cbc:	83 e0 08             	and    eax,0x8
c0025cbf:	85 c0                	test   eax,eax
c0025cc1:	74 16                	je     c0025cd9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cc3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cc7:	eb 10                	jmp    c0025cd9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cc9:	83 ec 0c             	sub    esp,0xc
c0025ccc:	68 64 d1 02 c0       	push   0xc002d164
c0025cd1:	e8 0b 48 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0025cd6:	83 c4 10             	add    esp,0x10
c0025cd9:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cdd:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0025ce2:	83 ec 08             	sub    esp,0x8
c0025ce5:	50                   	push   eax
c0025ce6:	68 9c d1 02 c0       	push   0xc002d19c
c0025ceb:	e8 b3 d0 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0025cf0:	83 c4 10             	add    esp,0x10
c0025cf3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025cfa:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0025cff:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d02:	7d 67                	jge    c0025d6b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d04:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d07:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0025d0e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d11:	83 ec 08             	sub    esp,0x8
c0025d14:	52                   	push   edx
c0025d15:	50                   	push   eax
c0025d16:	e8 d1 fc ff ff       	call   c00259ec <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d1b:	83 c4 10             	add    esp,0x10
c0025d1e:	84 c0                	test   al,al
c0025d20:	74 44                	je     c0025d66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d22:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d25:	8b 1c 85 e0 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd820]
c0025d2c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d30:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d33:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d3a:	83 c0 20             	add    eax,0x20
c0025d3d:	0f b6 f0             	movzx  esi,al
c0025d40:	b8 00 00 00 00       	mov    eax,0x0
c0025d45:	99                   	cdq    
c0025d46:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d49:	0f b6 c9             	movzx  ecx,cl
c0025d4c:	83 ec 04             	sub    esp,0x4
c0025d4f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d52:	57                   	push   edi
c0025d53:	56                   	push   esi
c0025d54:	52                   	push   edx
c0025d55:	50                   	push   eax
c0025d56:	51                   	push   ecx
c0025d57:	53                   	push   ebx
c0025d58:	e8 0b fe ff ff       	call   c0025b68 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d5d:	83 c4 20             	add    esp,0x20
c0025d60:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d64:	eb 05                	jmp    c0025d6b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d66:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d69:	eb 8f                	jmp    c0025cfa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d6b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d6e:	83 f0 01             	xor    eax,0x1
c0025d71:	84 c0                	test   al,al
c0025d73:	74 10                	je     c0025d85 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d75:	83 ec 0c             	sub    esp,0xc
c0025d78:	68 b3 d1 02 c0       	push   0xc002d1b3
c0025d7d:	e8 5f 47 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0025d82:	83 c4 10             	add    esp,0x10
c0025d85:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d89:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d90:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d94:	7f 65                	jg     c0025dfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d99:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d9c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025da3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025da6:	01 ca                	add    edx,ecx
c0025da8:	83 c2 54             	add    edx,0x54
c0025dab:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025daf:	85 c0                	test   eax,eax
c0025db1:	75 43                	jne    c0025df6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025db9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dc0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dc3:	01 ca                	add    edx,ecx
c0025dc5:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025dc8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025dcb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dd2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dd5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ddc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ddf:	01 ca                	add    edx,ecx
c0025de1:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025de7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025dea:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025df1:	83 e8 20             	sub    eax,0x20
c0025df4:	eb 1a                	jmp    c0025e10 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025df6:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025df9:	eb 95                	jmp    c0025d90 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025dfb:	83 ec 0c             	sub    esp,0xc
c0025dfe:	68 c0 d1 02 c0       	push   0xc002d1c0
c0025e03:	e8 d9 46 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0025e08:	83 c4 10             	add    esp,0x10
c0025e0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e10:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e13:	5b                   	pop    ebx
c0025e14:	5e                   	pop    esi
c0025e15:	5f                   	pop    edi
c0025e16:	5d                   	pop    ebp
c0025e17:	c3                   	ret    

c0025e18 <PIC::disable()>:
c0025e18:	55                   	push   ebp
c0025e19:	89 e5                	mov    ebp,esp
c0025e1b:	83 ec 10             	sub    esp,0x10
c0025e1e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e24:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e28:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e2b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e2f:	ee                   	out    dx,al
c0025e30:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e36:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e3a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e3d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e41:	ee                   	out    dx,al
c0025e42:	90                   	nop
c0025e43:	c9                   	leave  
c0025e44:	c3                   	ret    
c0025e45:	90                   	nop

c0025e46 <PIC::close(int, int, void*)>:
c0025e46:	55                   	push   ebp
c0025e47:	89 e5                	mov    ebp,esp
c0025e49:	83 ec 08             	sub    esp,0x8
c0025e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e51:	83 c0 3c             	add    eax,0x3c
c0025e54:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e56:	83 ec 0c             	sub    esp,0xc
c0025e59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e5c:	ff d0                	call   eax
c0025e5e:	83 c4 10             	add    esp,0x10
c0025e61:	b8 00 00 00 00       	mov    eax,0x0
c0025e66:	c9                   	leave  
c0025e67:	c3                   	ret    

c0025e68 <PIC::PIC()>:
c0025e68:	83 ec 0c             	sub    esp,0xc
c0025e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6f:	83 ec 08             	sub    esp,0x8
c0025e72:	68 6c d2 02 c0       	push   0xc002d26c
c0025e77:	50                   	push   eax
c0025e78:	e8 af ec fe ff       	call   c0014b2c <InterruptController::InterruptController(char const*)>
c0025e7d:	83 c4 10             	add    esp,0x10
c0025e80:	ba 98 d2 02 c0       	mov    edx,0xc002d298
c0025e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e89:	89 10                	mov    DWORD PTR [eax],edx
c0025e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e95:	0f b6 d0             	movzx  edx,al
c0025e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e9c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ead:	0f b6 d0             	movzx  edx,al
c0025eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ec3:	8d 50 01             	lea    edx,[eax+0x1]
c0025ec6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ed0:	0f b6 d0             	movzx  edx,al
c0025ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025edb:	83 e1 3f             	and    ecx,0x3f
c0025ede:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eec:	0f b6 d0             	movzx  edx,al
c0025eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef3:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f04:	0f b6 d0             	movzx  edx,al
c0025f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f14:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f1a:	8d 50 01             	lea    edx,[eax+0x1]
c0025f1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f21:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f27:	0f b6 d0             	movzx  edx,al
c0025f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f32:	83 e1 3f             	and    ecx,0x3f
c0025f35:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f39:	90                   	nop
c0025f3a:	83 c4 0c             	add    esp,0xc
c0025f3d:	c3                   	ret    

c0025f3e <PIC::ioWait()>:
c0025f3e:	eb 00                	jmp    c0025f40 <PIC::ioWait()+0x2>
c0025f40:	eb 00                	jmp    c0025f42 <PIC::ioWait()+0x4>
c0025f42:	90                   	nop
c0025f43:	c3                   	ret    

c0025f44 <PIC::getIRQReg(int)>:
c0025f44:	55                   	push   ebp
c0025f45:	89 e5                	mov    ebp,esp
c0025f47:	83 ec 10             	sub    esp,0x10
c0025f4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f4d:	0f b6 c0             	movzx  eax,al
c0025f50:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f56:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f59:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f5c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f60:	ee                   	out    dx,al
c0025f61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f64:	0f b6 c0             	movzx  eax,al
c0025f67:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f6d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f70:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f73:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f77:	ee                   	out    dx,al
c0025f78:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f7e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f82:	89 c2                	mov    edx,eax
c0025f84:	ec                   	in     al,dx
c0025f85:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f88:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f8b:	0f b6 c0             	movzx  eax,al
c0025f8e:	c1 e0 08             	shl    eax,0x8
c0025f91:	89 c1                	mov    ecx,eax
c0025f93:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f99:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f9d:	89 c2                	mov    edx,eax
c0025f9f:	ec                   	in     al,dx
c0025fa0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fa3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fa6:	0f b6 c0             	movzx  eax,al
c0025fa9:	09 c8                	or     eax,ecx
c0025fab:	c9                   	leave  
c0025fac:	c3                   	ret    
c0025fad:	90                   	nop

c0025fae <PIC::eoi(unsigned char)>:
c0025fae:	55                   	push   ebp
c0025faf:	89 e5                	mov    ebp,esp
c0025fb1:	83 ec 14             	sub    esp,0x14
c0025fb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fb7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fba:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fbe:	75 1e                	jne    c0025fde <PIC::eoi(unsigned char)+0x30>
c0025fc0:	6a 0b                	push   0xb
c0025fc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fc5:	e8 7a ff ff ff       	call   c0025f44 <PIC::getIRQReg(int)>
c0025fca:	83 c4 08             	add    esp,0x8
c0025fcd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025fd1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025fd5:	25 80 00 00 00       	and    eax,0x80
c0025fda:	85 c0                	test   eax,eax
c0025fdc:	74 5f                	je     c002603d <PIC::eoi(unsigned char)+0x8f>
c0025fde:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025fe2:	75 2d                	jne    c0026011 <PIC::eoi(unsigned char)+0x63>
c0025fe4:	6a 0b                	push   0xb
c0025fe6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe9:	e8 56 ff ff ff       	call   c0025f44 <PIC::getIRQReg(int)>
c0025fee:	83 c4 08             	add    esp,0x8
c0025ff1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025ff5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ff8:	66 85 c0             	test   ax,ax
c0025ffb:	78 14                	js     c0026011 <PIC::eoi(unsigned char)+0x63>
c0025ffd:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026003:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026007:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002600a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002600e:	ee                   	out    dx,al
c002600f:	eb 2d                	jmp    c002603e <PIC::eoi(unsigned char)+0x90>
c0026011:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026015:	76 12                	jbe    c0026029 <PIC::eoi(unsigned char)+0x7b>
c0026017:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002601d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026021:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026024:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026028:	ee                   	out    dx,al
c0026029:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002602f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026033:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026036:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002603a:	ee                   	out    dx,al
c002603b:	eb 01                	jmp    c002603e <PIC::eoi(unsigned char)+0x90>
c002603d:	90                   	nop
c002603e:	c9                   	leave  
c002603f:	c3                   	ret    

c0026040 <PIC::remap()>:
c0026040:	55                   	push   ebp
c0026041:	89 e5                	mov    ebp,esp
c0026043:	83 ec 48             	sub    esp,0x48
c0026046:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002604d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026054:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002605a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002605d:	89 c2                	mov    edx,eax
c002605f:	ec                   	in     al,dx
c0026060:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026063:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026066:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026069:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002606f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026072:	89 c2                	mov    edx,eax
c0026074:	ec                   	in     al,dx
c0026075:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026078:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002607b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002607e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026084:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026088:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002608b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002608e:	ee                   	out    dx,al
c002608f:	83 ec 0c             	sub    esp,0xc
c0026092:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026095:	e8 a4 fe ff ff       	call   c0025f3e <PIC::ioWait()>
c002609a:	83 c4 10             	add    esp,0x10
c002609d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260a3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260a7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260aa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260ad:	ee                   	out    dx,al
c00260ae:	83 ec 0c             	sub    esp,0xc
c00260b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b4:	e8 85 fe ff ff       	call   c0025f3e <PIC::ioWait()>
c00260b9:	83 c4 10             	add    esp,0x10
c00260bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260bf:	0f b6 c0             	movzx  eax,al
c00260c2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260c8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260cb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260ce:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260d1:	ee                   	out    dx,al
c00260d2:	83 ec 0c             	sub    esp,0xc
c00260d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d8:	e8 61 fe ff ff       	call   c0025f3e <PIC::ioWait()>
c00260dd:	83 c4 10             	add    esp,0x10
c00260e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260e3:	0f b6 c0             	movzx  eax,al
c00260e6:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00260ec:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00260ef:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00260f2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00260f5:	ee                   	out    dx,al
c00260f6:	83 ec 0c             	sub    esp,0xc
c00260f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260fc:	e8 3d fe ff ff       	call   c0025f3e <PIC::ioWait()>
c0026101:	83 c4 10             	add    esp,0x10
c0026104:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002610a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002610e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026111:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026114:	ee                   	out    dx,al
c0026115:	83 ec 0c             	sub    esp,0xc
c0026118:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611b:	e8 1e fe ff ff       	call   c0025f3e <PIC::ioWait()>
c0026120:	83 c4 10             	add    esp,0x10
c0026123:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026129:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002612d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026130:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026133:	ee                   	out    dx,al
c0026134:	83 ec 0c             	sub    esp,0xc
c0026137:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002613a:	e8 ff fd ff ff       	call   c0025f3e <PIC::ioWait()>
c002613f:	83 c4 10             	add    esp,0x10
c0026142:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026148:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002614c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002614f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026152:	ee                   	out    dx,al
c0026153:	83 ec 0c             	sub    esp,0xc
c0026156:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026159:	e8 e0 fd ff ff       	call   c0025f3e <PIC::ioWait()>
c002615e:	83 c4 10             	add    esp,0x10
c0026161:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026167:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002616b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002616e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026171:	ee                   	out    dx,al
c0026172:	83 ec 0c             	sub    esp,0xc
c0026175:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026178:	e8 c1 fd ff ff       	call   c0025f3e <PIC::ioWait()>
c002617d:	83 c4 10             	add    esp,0x10
c0026180:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026184:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002618a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002618d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026190:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026193:	ee                   	out    dx,al
c0026194:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026198:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002619e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261a1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261a7:	ee                   	out    dx,al
c00261a8:	90                   	nop
c00261a9:	c9                   	leave  
c00261aa:	c3                   	ret    
c00261ab:	90                   	nop

c00261ac <PIC::open(int, int, void*)>:
c00261ac:	55                   	push   ebp
c00261ad:	89 e5                	mov    ebp,esp
c00261af:	83 ec 18             	sub    esp,0x18
c00261b2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261b8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261bc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261bf:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261c3:	ee                   	out    dx,al
c00261c4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261ca:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261ce:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261d1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261d5:	ee                   	out    dx,al
c00261d6:	83 ec 0c             	sub    esp,0xc
c00261d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261dc:	e8 5f fe ff ff       	call   c0026040 <PIC::remap()>
c00261e1:	83 c4 10             	add    esp,0x10
c00261e4:	b8 00 00 00 00       	mov    eax,0x0
c00261e9:	c9                   	leave  
c00261ea:	c3                   	ret    
c00261eb:	90                   	nop

c00261ec <APICTimer::close(int, int, void*)>:
c00261ec:	b8 00 00 00 00       	mov    eax,0x0
c00261f1:	c3                   	ret    

c00261f2 <apicTimerHandler(regs*, void*)>:
c00261f2:	83 ec 0c             	sub    esp,0xc
c00261f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00261fb:	99                   	cdq    
c00261fc:	52                   	push   edx
c00261fd:	50                   	push   eax
c00261fe:	6a 00                	push   0x0
c0026200:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026205:	e8 9a 07 00 00       	call   c00269a4 <__udivdi3>
c002620a:	83 c4 10             	add    esp,0x10
c002620d:	83 ec 08             	sub    esp,0x8
c0026210:	52                   	push   edx
c0026211:	50                   	push   eax
c0026212:	e8 da 09 ff ff       	call   c0016bf1 <timerHandler(unsigned long long)>
c0026217:	83 c4 10             	add    esp,0x10
c002621a:	90                   	nop
c002621b:	83 c4 0c             	add    esp,0xc
c002621e:	c3                   	ret    
c002621f:	90                   	nop

c0026220 <APICTimer::write(int)>:
c0026220:	53                   	push   ebx
c0026221:	83 ec 28             	sub    esp,0x28
c0026224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026228:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002622c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026232:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0026237:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002623d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026243:	83 ec 0c             	sub    esp,0xc
c0026246:	50                   	push   eax
c0026247:	e8 de f4 ff ff       	call   c002572a <APIC::getBase()>
c002624c:	83 c4 10             	add    esp,0x10
c002624f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026253:	a1 d0 ea 02 c0       	mov    eax,ds:0xc002ead0
c0026258:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c002625e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026262:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002626a:	05 e0 03 00 00       	add    eax,0x3e0
c002626f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026275:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026279:	05 80 03 00 00       	add    eax,0x380
c002627e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026284:	fb                   	sti    
c0026285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002628d:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026292:	83 d2 00             	adc    edx,0x0
c0026295:	89 c1                	mov    ecx,eax
c0026297:	89 d3                	mov    ebx,edx
c0026299:	a1 d0 ea 02 c0       	mov    eax,ds:0xc002ead0
c002629e:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c00262a4:	39 c8                	cmp    eax,ecx
c00262a6:	89 d0                	mov    eax,edx
c00262a8:	19 d8                	sbb    eax,ebx
c00262aa:	73 02                	jae    c00262ae <APICTimer::write(int)+0x8e>
c00262ac:	eb d7                	jmp    c0026285 <APICTimer::write(int)+0x65>
c00262ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262b2:	05 20 03 00 00       	add    eax,0x320
c00262b7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262c1:	05 90 03 00 00       	add    eax,0x390
c00262c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00262c8:	f7 d0                	not    eax
c00262ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262d6:	ba 00 00 00 00       	mov    edx,0x0
c00262db:	f7 f3                	div    ebx
c00262dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262eb:	0d 00 00 02 00       	or     eax,0x20000
c00262f0:	89 c2                	mov    edx,eax
c00262f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262f6:	05 20 03 00 00       	add    eax,0x320
c00262fb:	89 10                	mov    DWORD PTR [eax],edx
c00262fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026301:	05 e0 03 00 00       	add    eax,0x3e0
c0026306:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002630c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026310:	05 80 03 00 00       	add    eax,0x380
c0026315:	89 c2                	mov    edx,eax
c0026317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002631b:	89 02                	mov    DWORD PTR [edx],eax
c002631d:	90                   	nop
c002631e:	83 c4 28             	add    esp,0x28
c0026321:	5b                   	pop    ebx
c0026322:	c3                   	ret    
c0026323:	90                   	nop

c0026324 <APICTimer::open(int, int, void*)>:
c0026324:	57                   	push   edi
c0026325:	56                   	push   esi
c0026326:	53                   	push   ebx
c0026327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632b:	8b 00                	mov    eax,DWORD PTR [eax]
c002632d:	83 c0 24             	add    eax,0x24
c0026330:	8b 00                	mov    eax,DWORD PTR [eax]
c0026332:	83 ec 08             	sub    esp,0x8
c0026335:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026339:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002633d:	ff d0                	call   eax
c002633f:	83 c4 10             	add    esp,0x10
c0026342:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0026347:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002634d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026353:	83 ec 0c             	sub    esp,0xc
c0026356:	50                   	push   eax
c0026357:	e8 ce f3 ff ff       	call   c002572a <APIC::getBase()>
c002635c:	83 c4 10             	add    esp,0x10
c002635f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026369:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002636f:	0f b6 f8             	movzx  edi,al
c0026372:	89 d0                	mov    eax,edx
c0026374:	ba 00 00 00 00       	mov    edx,0x0
c0026379:	89 c1                	mov    ecx,eax
c002637b:	80 e5 ff             	and    ch,0xff
c002637e:	89 cb                	mov    ebx,ecx
c0026380:	0f b6 f2             	movzx  esi,dl
c0026383:	89 d8                	mov    eax,ebx
c0026385:	89 f2                	mov    edx,esi
c0026387:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002638b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002638e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026392:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026396:	83 e0 00             	and    eax,0x0
c0026399:	09 d0                	or     eax,edx
c002639b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002639f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263a9:	8d 50 01             	lea    edx,[eax+0x1]
c00263ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263b0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263b6:	0f b6 d0             	movzx  edx,al
c00263b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263bd:	83 c2 08             	add    edx,0x8
c00263c0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263c4:	0f b6 c9             	movzx  ecx,cl
c00263c7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263cd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263d9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263e7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00263ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263f1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00263f7:	83 ec 0c             	sub    esp,0xc
c00263fa:	51                   	push   ecx
c00263fb:	6a 01                	push   0x1
c00263fd:	68 f2 61 02 c0       	push   0xc00261f2
c0026402:	52                   	push   edx
c0026403:	50                   	push   eax
c0026404:	e8 4b dd fe ff       	call   c0014154 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026409:	83 c4 20             	add    esp,0x20
c002640c:	89 c2                	mov    edx,eax
c002640e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026412:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026418:	b8 00 00 00 00       	mov    eax,0x0
c002641d:	5b                   	pop    ebx
c002641e:	5e                   	pop    esi
c002641f:	5f                   	pop    edi
c0026420:	c3                   	ret    
c0026421:	90                   	nop

c0026422 <APICTimer::APICTimer()>:
c0026422:	83 ec 0c             	sub    esp,0xc
c0026425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026429:	83 ec 08             	sub    esp,0x8
c002642c:	68 d8 d2 02 c0       	push   0xc002d2d8
c0026431:	50                   	push   eax
c0026432:	e8 2b 07 ff ff       	call   c0016b62 <Timer::Timer(char const*)>
c0026437:	83 c4 10             	add    esp,0x10
c002643a:	ba ec d2 02 c0       	mov    edx,0xc002d2ec
c002643f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026443:	89 10                	mov    DWORD PTR [eax],edx
c0026445:	90                   	nop
c0026446:	83 c4 0c             	add    esp,0xc
c0026449:	c3                   	ret    

c002644a <PIT::write(int)>:
c002644a:	83 ec 10             	sub    esp,0x10
c002644d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026451:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026455:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002645b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002645f:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c0026464:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026469:	99                   	cdq    
c002646a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002646e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026472:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026479:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002647e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026482:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026487:	ee                   	out    dx,al
c0026488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002648c:	0f b6 c0             	movzx  eax,al
c002648f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026496:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002649a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002649e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264a3:	ee                   	out    dx,al
c00264a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264a8:	c1 f8 08             	sar    eax,0x8
c00264ab:	0f b6 c0             	movzx  eax,al
c00264ae:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264b5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264b9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264bd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264c2:	ee                   	out    dx,al
c00264c3:	90                   	nop
c00264c4:	83 c4 10             	add    esp,0x10
c00264c7:	c3                   	ret    

c00264c8 <pitHandler(regs*, void*)>:
c00264c8:	83 ec 0c             	sub    esp,0xc
c00264cb:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c00264d0:	99                   	cdq    
c00264d1:	52                   	push   edx
c00264d2:	50                   	push   eax
c00264d3:	6a 00                	push   0x0
c00264d5:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264da:	e8 c5 04 00 00       	call   c00269a4 <__udivdi3>
c00264df:	83 c4 10             	add    esp,0x10
c00264e2:	83 ec 08             	sub    esp,0x8
c00264e5:	52                   	push   edx
c00264e6:	50                   	push   eax
c00264e7:	e8 05 07 ff ff       	call   c0016bf1 <timerHandler(unsigned long long)>
c00264ec:	83 c4 10             	add    esp,0x10
c00264ef:	90                   	nop
c00264f0:	83 c4 0c             	add    esp,0xc
c00264f3:	c3                   	ret    

c00264f4 <PIT::open(int, int, void*)>:
c00264f4:	83 ec 0c             	sub    esp,0xc
c00264f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00264fd:	83 c0 24             	add    eax,0x24
c0026500:	8b 00                	mov    eax,DWORD PTR [eax]
c0026502:	83 ec 08             	sub    esp,0x8
c0026505:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002650d:	ff d0                	call   eax
c002650f:	83 c4 10             	add    esp,0x10
c0026512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026516:	83 ec 0c             	sub    esp,0xc
c0026519:	6a 00                	push   0x0
c002651b:	6a 01                	push   0x1
c002651d:	68 c8 64 02 c0       	push   0xc00264c8
c0026522:	6a 00                	push   0x0
c0026524:	50                   	push   eax
c0026525:	e8 2a dc fe ff       	call   c0014154 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002652a:	83 c4 20             	add    esp,0x20
c002652d:	89 c2                	mov    edx,eax
c002652f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026533:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026539:	b8 00 00 00 00       	mov    eax,0x0
c002653e:	83 c4 0c             	add    esp,0xc
c0026541:	c3                   	ret    

c0026542 <PIT::close(int, int, void*)>:
c0026542:	83 ec 0c             	sub    esp,0xc
c0026545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026549:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026557:	6a 01                	push   0x1
c0026559:	68 c8 64 02 c0       	push   0xc00264c8
c002655e:	6a 00                	push   0x0
c0026560:	50                   	push   eax
c0026561:	e8 2c dc fe ff       	call   c0014192 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026566:	83 c4 10             	add    esp,0x10
c0026569:	b8 00 00 00 00       	mov    eax,0x0
c002656e:	83 c4 0c             	add    esp,0xc
c0026571:	c3                   	ret    

c0026572 <PIT::PIT()>:
c0026572:	83 ec 0c             	sub    esp,0xc
c0026575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026579:	83 ec 08             	sub    esp,0x8
c002657c:	68 14 d3 02 c0       	push   0xc002d314
c0026581:	50                   	push   eax
c0026582:	e8 db 05 ff ff       	call   c0016b62 <Timer::Timer(char const*)>
c0026587:	83 c4 10             	add    esp,0x10
c002658a:	ba 3c d3 02 c0       	mov    edx,0xc002d33c
c002658f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026593:	89 10                	mov    DWORD PTR [eax],edx
c0026595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026599:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002659f:	0f b6 d0             	movzx  edx,al
c00265a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265b7:	0f b6 d0             	movzx  edx,al
c00265ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265be:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265cd:	8d 50 01             	lea    edx,[eax+0x1]
c00265d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265d4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265da:	0f b6 d0             	movzx  edx,al
c00265dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00265e5:	83 e1 3f             	and    ecx,0x3f
c00265e8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00265ec:	90                   	nop
c00265ed:	83 c4 0c             	add    esp,0xc
c00265f0:	c3                   	ret    
c00265f1:	66 90                	xchg   ax,ax
c00265f3:	66 90                	xchg   ax,ax
c00265f5:	66 90                	xchg   ax,ax
c00265f7:	66 90                	xchg   ax,ax
c00265f9:	66 90                	xchg   ax,ax
c00265fb:	66 90                	xchg   ax,ax
c00265fd:	66 90                	xchg   ax,ax
c00265ff:	90                   	nop

c0026600 <avxDetect>:
c0026600:	b8 00 00 00 00       	mov    eax,0x0
c0026605:	c3                   	ret    

c0026606 <avxSave>:
c0026606:	c3                   	ret    

c0026607 <avxLoad>:
c0026607:	c3                   	ret    

c0026608 <avxInit>:
c0026608:	c3                   	ret    

c0026609 <avxClose>:
c0026609:	c3                   	ret    

c002660a <wouldSheSayYes>:
c002660a:	c3                   	ret    
c002660b:	49                   	dec    ecx
c002660c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026610:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026614:	75 20                	jne    c0026636 <sseDetect.noSSE+0x1>
c0026616:	4e                   	dec    esi
c0026617:	79 61                	jns    c002667a <x87Detect+0x14>
c0026619:	68 2e 2e 2e 00       	push   0x2e2e2e
c002661e:	66 90                	xchg   ax,ax

c0026620 <absolutelyNoChanceInHell>:
c0026620:	b8 01 00 00 00       	mov    eax,0x1
c0026625:	0f a2                	cpuid  
c0026627:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002662d:	74 06                	je     c0026635 <sseDetect.noSSE>
c002662f:	b8 01 00 00 00       	mov    eax,0x1
c0026634:	c3                   	ret    

c0026635 <sseDetect.noSSE>:
c0026635:	31 c0                	xor    eax,eax
c0026637:	c3                   	ret    

c0026638 <sseSave>:
c0026638:	0f ae 44 24 04       	fxsave [esp+0x4]
c002663d:	c3                   	ret    

c002663e <sseLoad>:
c002663e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026643:	c3                   	ret    

c0026644 <sseInit>:
c0026644:	e8 49 00 00 00       	call   c0026692 <x87Init>
c0026649:	0f 20 e0             	mov    eax,cr4
c002664c:	66 0d 00 06          	or     ax,0x600
c0026650:	0f 22 e0             	mov    cr4,eax
c0026653:	c3                   	ret    

c0026654 <sseClose>:
c0026654:	c3                   	ret    
c0026655:	66 90                	xchg   ax,ax
c0026657:	66 90                	xchg   ax,ax
c0026659:	66 90                	xchg   ax,ax
c002665b:	66 90                	xchg   ax,ax
c002665d:	66 90                	xchg   ax,ax
c002665f:	90                   	nop

c0026660 <value_37F>:
c0026660:	7f 03                	jg     c0026665 <value_37A+0x1>

c0026662 <value_37E>:
c0026662:	7e 03                	jle    c0026667 <x87Detect+0x1>

c0026664 <value_37A>:
c0026664:	7a 03                	jp     c0026669 <x87Detect+0x3>

c0026666 <x87Detect>:
c0026666:	b8 01 00 00 00       	mov    eax,0x1
c002666b:	0f a2                	cpuid  
c002666d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026673:	74 06                	je     c002667b <x87Detect.nox87>
c0026675:	b8 01 00 00 00       	mov    eax,0x1
c002667a:	c3                   	ret    

c002667b <x87Detect.nox87>:
c002667b:	b8 00 00 00 00       	mov    eax,0x0
c0026680:	c3                   	ret    

c0026681 <x87Save>:
c0026681:	55                   	push   ebp
c0026682:	89 e5                	mov    ebp,esp
c0026684:	9b dd 75 08          	fsave  [ebp+0x8]
c0026688:	c9                   	leave  
c0026689:	c3                   	ret    

c002668a <x87Load>:
c002668a:	55                   	push   ebp
c002668b:	89 e5                	mov    ebp,esp
c002668d:	dd 65 08             	frstor [ebp+0x8]
c0026690:	c9                   	leave  
c0026691:	c3                   	ret    

c0026692 <x87Init>:
c0026692:	9b db e3             	finit  
c0026695:	0f 20 c0             	mov    eax,cr0
c0026698:	66 25 fb ff          	and    ax,0xfffb
c002669c:	66 0d 22 00          	or     ax,0x22
c00266a0:	0f 22 c0             	mov    cr0,eax
c00266a3:	0f 06                	clts   
c00266a5:	d9 2d 64 66 02 c0    	fldcw  WORD PTR ds:0xc0026664
c00266ab:	c3                   	ret    

c00266ac <x87Close>:
c00266ac:	c3                   	ret    
c00266ad:	66 90                	xchg   ax,ax
c00266af:	90                   	nop

c00266b0 <__do_global_ctors_aux>:
c00266b0:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c00266b5:	83 f8 ff             	cmp    eax,0xffffffff
c00266b8:	74 1a                	je     c00266d4 <__do_global_ctors_aux+0x24>
c00266ba:	55                   	push   ebp
c00266bb:	89 e5                	mov    ebp,esp
c00266bd:	53                   	push   ebx
c00266be:	52                   	push   edx
c00266bf:	bb 08 92 02 c0       	mov    ebx,0xc0029208
c00266c4:	ff d0                	call   eax
c00266c6:	83 eb 04             	sub    ebx,0x4
c00266c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266cb:	83 f8 ff             	cmp    eax,0xffffffff
c00266ce:	75 f4                	jne    c00266c4 <__do_global_ctors_aux+0x14>
c00266d0:	58                   	pop    eax
c00266d1:	5b                   	pop    ebx
c00266d2:	5d                   	pop    ebp
c00266d3:	c3                   	ret    
c00266d4:	c3                   	ret    
c00266d5:	66 90                	xchg   ax,ax
c00266d7:	90                   	nop

c00266d8 <__divdi3>:
c00266d8:	55                   	push   ebp
c00266d9:	57                   	push   edi
c00266da:	56                   	push   esi
c00266db:	53                   	push   ebx
c00266dc:	83 ec 1c             	sub    esp,0x1c
c00266df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266f6:	85 db                	test   ebx,ebx
c00266f8:	0f 88 8e 00 00 00    	js     c002678c <__divdi3+0xb4>
c00266fe:	89 dd                	mov    ebp,ebx
c0026700:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026708:	89 d3                	mov    ebx,edx
c002670a:	85 d2                	test   edx,edx
c002670c:	79 0d                	jns    c002671b <__divdi3+0x43>
c002670e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026712:	f7 d8                	neg    eax
c0026714:	83 d2 00             	adc    edx,0x0
c0026717:	f7 da                	neg    edx
c0026719:	89 d3                	mov    ebx,edx
c002671b:	89 c7                	mov    edi,eax
c002671d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026720:	85 db                	test   ebx,ebx
c0026722:	75 48                	jne    c002676c <__divdi3+0x94>
c0026724:	39 ef                	cmp    edi,ebp
c0026726:	76 24                	jbe    c002674c <__divdi3+0x74>
c0026728:	89 ea                	mov    edx,ebp
c002672a:	f7 f7                	div    edi
c002672c:	89 c1                	mov    ecx,eax
c002672e:	31 f6                	xor    esi,esi
c0026730:	89 c8                	mov    eax,ecx
c0026732:	89 f2                	mov    edx,esi
c0026734:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026738:	85 c9                	test   ecx,ecx
c002673a:	74 07                	je     c0026743 <__divdi3+0x6b>
c002673c:	f7 d8                	neg    eax
c002673e:	83 d2 00             	adc    edx,0x0
c0026741:	f7 da                	neg    edx
c0026743:	83 c4 1c             	add    esp,0x1c
c0026746:	5b                   	pop    ebx
c0026747:	5e                   	pop    esi
c0026748:	5f                   	pop    edi
c0026749:	5d                   	pop    ebp
c002674a:	c3                   	ret    
c002674b:	90                   	nop
c002674c:	85 ff                	test   edi,edi
c002674e:	75 0b                	jne    c002675b <__divdi3+0x83>
c0026750:	b8 01 00 00 00       	mov    eax,0x1
c0026755:	31 d2                	xor    edx,edx
c0026757:	f7 f3                	div    ebx
c0026759:	89 c7                	mov    edi,eax
c002675b:	31 d2                	xor    edx,edx
c002675d:	89 e8                	mov    eax,ebp
c002675f:	f7 f7                	div    edi
c0026761:	89 c6                	mov    esi,eax
c0026763:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026766:	f7 f7                	div    edi
c0026768:	89 c1                	mov    ecx,eax
c002676a:	eb c4                	jmp    c0026730 <__divdi3+0x58>
c002676c:	39 eb                	cmp    ebx,ebp
c002676e:	77 3c                	ja     c00267ac <__divdi3+0xd4>
c0026770:	0f bd f3             	bsr    esi,ebx
c0026773:	83 f6 1f             	xor    esi,0x1f
c0026776:	75 40                	jne    c00267b8 <__divdi3+0xe0>
c0026778:	39 eb                	cmp    ebx,ebp
c002677a:	72 09                	jb     c0026785 <__divdi3+0xad>
c002677c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002677f:	0f 87 97 00 00 00    	ja     c002681c <__divdi3+0x144>
c0026785:	b9 01 00 00 00       	mov    ecx,0x1
c002678a:	eb a4                	jmp    c0026730 <__divdi3+0x58>
c002678c:	f7 d9                	neg    ecx
c002678e:	83 d3 00             	adc    ebx,0x0
c0026791:	f7 db                	neg    ebx
c0026793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026796:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002679a:	89 dd                	mov    ebp,ebx
c002679c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267a4:	e9 5f ff ff ff       	jmp    c0026708 <__divdi3+0x30>
c00267a9:	8d 76 00             	lea    esi,[esi+0x0]
c00267ac:	31 f6                	xor    esi,esi
c00267ae:	31 c9                	xor    ecx,ecx
c00267b0:	e9 7b ff ff ff       	jmp    c0026730 <__divdi3+0x58>
c00267b5:	8d 76 00             	lea    esi,[esi+0x0]
c00267b8:	b8 20 00 00 00       	mov    eax,0x20
c00267bd:	29 f0                	sub    eax,esi
c00267bf:	89 f1                	mov    ecx,esi
c00267c1:	d3 e3                	shl    ebx,cl
c00267c3:	89 fa                	mov    edx,edi
c00267c5:	88 c1                	mov    cl,al
c00267c7:	d3 ea                	shr    edx,cl
c00267c9:	09 da                	or     edx,ebx
c00267cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267cf:	89 f1                	mov    ecx,esi
c00267d1:	d3 e7                	shl    edi,cl
c00267d3:	89 eb                	mov    ebx,ebp
c00267d5:	88 c1                	mov    cl,al
c00267d7:	d3 eb                	shr    ebx,cl
c00267d9:	89 f1                	mov    ecx,esi
c00267db:	d3 e5                	shl    ebp,cl
c00267dd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267e0:	88 c1                	mov    cl,al
c00267e2:	d3 ea                	shr    edx,cl
c00267e4:	09 d5                	or     ebp,edx
c00267e6:	89 e8                	mov    eax,ebp
c00267e8:	89 da                	mov    edx,ebx
c00267ea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267ee:	89 d3                	mov    ebx,edx
c00267f0:	89 c5                	mov    ebp,eax
c00267f2:	f7 e7                	mul    edi
c00267f4:	39 d3                	cmp    ebx,edx
c00267f6:	72 18                	jb     c0026810 <__divdi3+0x138>
c00267f8:	74 0a                	je     c0026804 <__divdi3+0x12c>
c00267fa:	89 e9                	mov    ecx,ebp
c00267fc:	31 f6                	xor    esi,esi
c00267fe:	e9 2d ff ff ff       	jmp    c0026730 <__divdi3+0x58>
c0026803:	90                   	nop
c0026804:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026807:	89 f1                	mov    ecx,esi
c0026809:	d3 e7                	shl    edi,cl
c002680b:	39 c7                	cmp    edi,eax
c002680d:	73 eb                	jae    c00267fa <__divdi3+0x122>
c002680f:	90                   	nop
c0026810:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026813:	31 f6                	xor    esi,esi
c0026815:	e9 16 ff ff ff       	jmp    c0026730 <__divdi3+0x58>
c002681a:	66 90                	xchg   ax,ax
c002681c:	31 c9                	xor    ecx,ecx
c002681e:	e9 0d ff ff ff       	jmp    c0026730 <__divdi3+0x58>
c0026823:	90                   	nop

c0026824 <__moddi3>:
c0026824:	55                   	push   ebp
c0026825:	57                   	push   edi
c0026826:	56                   	push   esi
c0026827:	53                   	push   ebx
c0026828:	83 ec 2c             	sub    esp,0x2c
c002682b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002682f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026833:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026837:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002683b:	85 db                	test   ebx,ebx
c002683d:	0f 88 85 00 00 00    	js     c00268c8 <__moddi3+0xa4>
c0026843:	89 de                	mov    esi,ebx
c0026845:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002684d:	89 d7                	mov    edi,edx
c002684f:	85 d2                	test   edx,edx
c0026851:	79 09                	jns    c002685c <__moddi3+0x38>
c0026853:	f7 d8                	neg    eax
c0026855:	83 d2 00             	adc    edx,0x0
c0026858:	f7 da                	neg    edx
c002685a:	89 d7                	mov    edi,edx
c002685c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026860:	89 cd                	mov    ebp,ecx
c0026862:	85 ff                	test   edi,edi
c0026864:	75 52                	jne    c00268b8 <__moddi3+0x94>
c0026866:	89 c3                	mov    ebx,eax
c0026868:	39 f0                	cmp    eax,esi
c002686a:	76 24                	jbe    c0026890 <__moddi3+0x6c>
c002686c:	89 c8                	mov    eax,ecx
c002686e:	89 f2                	mov    edx,esi
c0026870:	f7 f3                	div    ebx
c0026872:	89 d6                	mov    esi,edx
c0026874:	89 f0                	mov    eax,esi
c0026876:	31 d2                	xor    edx,edx
c0026878:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002687c:	85 c9                	test   ecx,ecx
c002687e:	74 07                	je     c0026887 <__moddi3+0x63>
c0026880:	f7 d8                	neg    eax
c0026882:	83 d2 00             	adc    edx,0x0
c0026885:	f7 da                	neg    edx
c0026887:	83 c4 2c             	add    esp,0x2c
c002688a:	5b                   	pop    ebx
c002688b:	5e                   	pop    esi
c002688c:	5f                   	pop    edi
c002688d:	5d                   	pop    ebp
c002688e:	c3                   	ret    
c002688f:	90                   	nop
c0026890:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026894:	85 db                	test   ebx,ebx
c0026896:	75 0d                	jne    c00268a5 <__moddi3+0x81>
c0026898:	b8 01 00 00 00       	mov    eax,0x1
c002689d:	31 d2                	xor    edx,edx
c002689f:	f7 f7                	div    edi
c00268a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268a5:	89 f0                	mov    eax,esi
c00268a7:	31 d2                	xor    edx,edx
c00268a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268ad:	f7 f7                	div    edi
c00268af:	89 e8                	mov    eax,ebp
c00268b1:	f7 f7                	div    edi
c00268b3:	89 d6                	mov    esi,edx
c00268b5:	eb bd                	jmp    c0026874 <__moddi3+0x50>
c00268b7:	90                   	nop
c00268b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268bc:	39 f7                	cmp    edi,esi
c00268be:	76 20                	jbe    c00268e0 <__moddi3+0xbc>
c00268c0:	89 c8                	mov    eax,ecx
c00268c2:	89 f2                	mov    edx,esi
c00268c4:	eb b2                	jmp    c0026878 <__moddi3+0x54>
c00268c6:	66 90                	xchg   ax,ax
c00268c8:	f7 d9                	neg    ecx
c00268ca:	83 d3 00             	adc    ebx,0x0
c00268cd:	f7 db                	neg    ebx
c00268cf:	89 de                	mov    esi,ebx
c00268d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268d9:	e9 6f ff ff ff       	jmp    c002684d <__moddi3+0x29>
c00268de:	66 90                	xchg   ax,ax
c00268e0:	0f bd c7             	bsr    eax,edi
c00268e3:	83 f0 1f             	xor    eax,0x1f
c00268e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268ea:	75 24                	jne    c0026910 <__moddi3+0xec>
c00268ec:	39 f7                	cmp    edi,esi
c00268ee:	72 06                	jb     c00268f6 <__moddi3+0xd2>
c00268f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268f4:	77 0c                	ja     c0026902 <__moddi3+0xde>
c00268f6:	89 e9                	mov    ecx,ebp
c00268f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00268fc:	19 fe                	sbb    esi,edi
c00268fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026906:	89 f2                	mov    edx,esi
c0026908:	e9 6b ff ff ff       	jmp    c0026878 <__moddi3+0x54>
c002690d:	8d 76 00             	lea    esi,[esi+0x0]
c0026910:	b8 20 00 00 00       	mov    eax,0x20
c0026915:	89 c2                	mov    edx,eax
c0026917:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002691b:	29 da                	sub    edx,ebx
c002691d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026921:	88 d9                	mov    cl,bl
c0026923:	d3 e7                	shl    edi,cl
c0026925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026929:	88 d1                	mov    cl,dl
c002692b:	d3 e8                	shr    eax,cl
c002692d:	09 c7                	or     edi,eax
c002692f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026933:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026937:	89 d8                	mov    eax,ebx
c0026939:	88 d9                	mov    cl,bl
c002693b:	d3 e7                	shl    edi,cl
c002693d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026941:	89 f3                	mov    ebx,esi
c0026943:	88 d1                	mov    cl,dl
c0026945:	d3 eb                	shr    ebx,cl
c0026947:	89 c7                	mov    edi,eax
c0026949:	88 c1                	mov    cl,al
c002694b:	d3 e6                	shl    esi,cl
c002694d:	89 e8                	mov    eax,ebp
c002694f:	88 d1                	mov    cl,dl
c0026951:	d3 e8                	shr    eax,cl
c0026953:	09 f0                	or     eax,esi
c0026955:	89 f9                	mov    ecx,edi
c0026957:	d3 e5                	shl    ebp,cl
c0026959:	89 da                	mov    edx,ebx
c002695b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002695f:	89 d3                	mov    ebx,edx
c0026961:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026965:	89 c6                	mov    esi,eax
c0026967:	89 d1                	mov    ecx,edx
c0026969:	39 d3                	cmp    ebx,edx
c002696b:	72 27                	jb     c0026994 <__moddi3+0x170>
c002696d:	74 21                	je     c0026990 <__moddi3+0x16c>
c002696f:	29 f5                	sub    ebp,esi
c0026971:	19 cb                	sbb    ebx,ecx
c0026973:	89 de                	mov    esi,ebx
c0026975:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026979:	d3 e6                	shl    esi,cl
c002697b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002697f:	89 f9                	mov    ecx,edi
c0026981:	d3 ed                	shr    ebp,cl
c0026983:	09 ee                	or     esi,ebp
c0026985:	89 f0                	mov    eax,esi
c0026987:	d3 eb                	shr    ebx,cl
c0026989:	89 da                	mov    edx,ebx
c002698b:	e9 e8 fe ff ff       	jmp    c0026878 <__moddi3+0x54>
c0026990:	39 c5                	cmp    ebp,eax
c0026992:	73 db                	jae    c002696f <__moddi3+0x14b>
c0026994:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026998:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002699c:	89 d1                	mov    ecx,edx
c002699e:	89 c6                	mov    esi,eax
c00269a0:	eb cd                	jmp    c002696f <__moddi3+0x14b>
c00269a2:	66 90                	xchg   ax,ax

c00269a4 <__udivdi3>:
c00269a4:	55                   	push   ebp
c00269a5:	57                   	push   edi
c00269a6:	56                   	push   esi
c00269a7:	53                   	push   ebx
c00269a8:	83 ec 1c             	sub    esp,0x1c
c00269ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269bb:	85 d2                	test   edx,edx
c00269bd:	75 41                	jne    c0026a00 <__udivdi3+0x5c>
c00269bf:	39 f7                	cmp    edi,esi
c00269c1:	76 15                	jbe    c00269d8 <__udivdi3+0x34>
c00269c3:	89 e8                	mov    eax,ebp
c00269c5:	89 f2                	mov    edx,esi
c00269c7:	f7 f7                	div    edi
c00269c9:	31 db                	xor    ebx,ebx
c00269cb:	89 da                	mov    edx,ebx
c00269cd:	83 c4 1c             	add    esp,0x1c
c00269d0:	5b                   	pop    ebx
c00269d1:	5e                   	pop    esi
c00269d2:	5f                   	pop    edi
c00269d3:	5d                   	pop    ebp
c00269d4:	c3                   	ret    
c00269d5:	8d 76 00             	lea    esi,[esi+0x0]
c00269d8:	89 f9                	mov    ecx,edi
c00269da:	85 ff                	test   edi,edi
c00269dc:	75 0b                	jne    c00269e9 <__udivdi3+0x45>
c00269de:	b8 01 00 00 00       	mov    eax,0x1
c00269e3:	31 d2                	xor    edx,edx
c00269e5:	f7 f7                	div    edi
c00269e7:	89 c1                	mov    ecx,eax
c00269e9:	31 d2                	xor    edx,edx
c00269eb:	89 f0                	mov    eax,esi
c00269ed:	f7 f1                	div    ecx
c00269ef:	89 c3                	mov    ebx,eax
c00269f1:	89 e8                	mov    eax,ebp
c00269f3:	f7 f1                	div    ecx
c00269f5:	89 da                	mov    edx,ebx
c00269f7:	83 c4 1c             	add    esp,0x1c
c00269fa:	5b                   	pop    ebx
c00269fb:	5e                   	pop    esi
c00269fc:	5f                   	pop    edi
c00269fd:	5d                   	pop    ebp
c00269fe:	c3                   	ret    
c00269ff:	90                   	nop
c0026a00:	39 f2                	cmp    edx,esi
c0026a02:	77 1c                	ja     c0026a20 <__udivdi3+0x7c>
c0026a04:	0f bd da             	bsr    ebx,edx
c0026a07:	83 f3 1f             	xor    ebx,0x1f
c0026a0a:	75 24                	jne    c0026a30 <__udivdi3+0x8c>
c0026a0c:	39 f2                	cmp    edx,esi
c0026a0e:	72 08                	jb     c0026a18 <__udivdi3+0x74>
c0026a10:	39 ef                	cmp    edi,ebp
c0026a12:	0f 87 84 00 00 00    	ja     c0026a9c <__udivdi3+0xf8>
c0026a18:	b8 01 00 00 00       	mov    eax,0x1
c0026a1d:	eb ac                	jmp    c00269cb <__udivdi3+0x27>
c0026a1f:	90                   	nop
c0026a20:	31 db                	xor    ebx,ebx
c0026a22:	31 c0                	xor    eax,eax
c0026a24:	89 da                	mov    edx,ebx
c0026a26:	83 c4 1c             	add    esp,0x1c
c0026a29:	5b                   	pop    ebx
c0026a2a:	5e                   	pop    esi
c0026a2b:	5f                   	pop    edi
c0026a2c:	5d                   	pop    ebp
c0026a2d:	c3                   	ret    
c0026a2e:	66 90                	xchg   ax,ax
c0026a30:	b8 20 00 00 00       	mov    eax,0x20
c0026a35:	29 d8                	sub    eax,ebx
c0026a37:	88 d9                	mov    cl,bl
c0026a39:	d3 e2                	shl    edx,cl
c0026a3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a3f:	89 fa                	mov    edx,edi
c0026a41:	88 c1                	mov    cl,al
c0026a43:	d3 ea                	shr    edx,cl
c0026a45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a49:	09 d1                	or     ecx,edx
c0026a4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a4f:	88 d9                	mov    cl,bl
c0026a51:	d3 e7                	shl    edi,cl
c0026a53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a57:	89 f7                	mov    edi,esi
c0026a59:	88 c1                	mov    cl,al
c0026a5b:	d3 ef                	shr    edi,cl
c0026a5d:	88 d9                	mov    cl,bl
c0026a5f:	d3 e6                	shl    esi,cl
c0026a61:	89 ea                	mov    edx,ebp
c0026a63:	88 c1                	mov    cl,al
c0026a65:	d3 ea                	shr    edx,cl
c0026a67:	09 d6                	or     esi,edx
c0026a69:	89 f0                	mov    eax,esi
c0026a6b:	89 fa                	mov    edx,edi
c0026a6d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a71:	89 d7                	mov    edi,edx
c0026a73:	89 c6                	mov    esi,eax
c0026a75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a79:	39 d7                	cmp    edi,edx
c0026a7b:	72 13                	jb     c0026a90 <__udivdi3+0xec>
c0026a7d:	74 09                	je     c0026a88 <__udivdi3+0xe4>
c0026a7f:	89 f0                	mov    eax,esi
c0026a81:	31 db                	xor    ebx,ebx
c0026a83:	e9 43 ff ff ff       	jmp    c00269cb <__udivdi3+0x27>
c0026a88:	88 d9                	mov    cl,bl
c0026a8a:	d3 e5                	shl    ebp,cl
c0026a8c:	39 c5                	cmp    ebp,eax
c0026a8e:	73 ef                	jae    c0026a7f <__udivdi3+0xdb>
c0026a90:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a93:	31 db                	xor    ebx,ebx
c0026a95:	e9 31 ff ff ff       	jmp    c00269cb <__udivdi3+0x27>
c0026a9a:	66 90                	xchg   ax,ax
c0026a9c:	31 c0                	xor    eax,eax
c0026a9e:	e9 28 ff ff ff       	jmp    c00269cb <__udivdi3+0x27>
c0026aa3:	90                   	nop

c0026aa4 <__umoddi3>:
c0026aa4:	55                   	push   ebp
c0026aa5:	57                   	push   edi
c0026aa6:	56                   	push   esi
c0026aa7:	53                   	push   ebx
c0026aa8:	83 ec 1c             	sub    esp,0x1c
c0026aab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026aaf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ab3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026ab7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026abb:	89 da                	mov    edx,ebx
c0026abd:	85 c0                	test   eax,eax
c0026abf:	75 37                	jne    c0026af8 <__umoddi3+0x54>
c0026ac1:	39 df                	cmp    edi,ebx
c0026ac3:	76 13                	jbe    c0026ad8 <__umoddi3+0x34>
c0026ac5:	89 f0                	mov    eax,esi
c0026ac7:	f7 f7                	div    edi
c0026ac9:	89 d0                	mov    eax,edx
c0026acb:	31 d2                	xor    edx,edx
c0026acd:	83 c4 1c             	add    esp,0x1c
c0026ad0:	5b                   	pop    ebx
c0026ad1:	5e                   	pop    esi
c0026ad2:	5f                   	pop    edi
c0026ad3:	5d                   	pop    ebp
c0026ad4:	c3                   	ret    
c0026ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0026ad8:	89 fd                	mov    ebp,edi
c0026ada:	85 ff                	test   edi,edi
c0026adc:	75 0b                	jne    c0026ae9 <__umoddi3+0x45>
c0026ade:	b8 01 00 00 00       	mov    eax,0x1
c0026ae3:	31 d2                	xor    edx,edx
c0026ae5:	f7 f7                	div    edi
c0026ae7:	89 c5                	mov    ebp,eax
c0026ae9:	89 d8                	mov    eax,ebx
c0026aeb:	31 d2                	xor    edx,edx
c0026aed:	f7 f5                	div    ebp
c0026aef:	89 f0                	mov    eax,esi
c0026af1:	f7 f5                	div    ebp
c0026af3:	89 d0                	mov    eax,edx
c0026af5:	eb d4                	jmp    c0026acb <__umoddi3+0x27>
c0026af7:	90                   	nop
c0026af8:	89 f1                	mov    ecx,esi
c0026afa:	39 d8                	cmp    eax,ebx
c0026afc:	76 0a                	jbe    c0026b08 <__umoddi3+0x64>
c0026afe:	89 f0                	mov    eax,esi
c0026b00:	83 c4 1c             	add    esp,0x1c
c0026b03:	5b                   	pop    ebx
c0026b04:	5e                   	pop    esi
c0026b05:	5f                   	pop    edi
c0026b06:	5d                   	pop    ebp
c0026b07:	c3                   	ret    
c0026b08:	0f bd e8             	bsr    ebp,eax
c0026b0b:	83 f5 1f             	xor    ebp,0x1f
c0026b0e:	75 1c                	jne    c0026b2c <__umoddi3+0x88>
c0026b10:	39 d8                	cmp    eax,ebx
c0026b12:	72 04                	jb     c0026b18 <__umoddi3+0x74>
c0026b14:	39 f7                	cmp    edi,esi
c0026b16:	77 08                	ja     c0026b20 <__umoddi3+0x7c>
c0026b18:	89 da                	mov    edx,ebx
c0026b1a:	29 fe                	sub    esi,edi
c0026b1c:	19 c2                	sbb    edx,eax
c0026b1e:	89 f1                	mov    ecx,esi
c0026b20:	89 c8                	mov    eax,ecx
c0026b22:	83 c4 1c             	add    esp,0x1c
c0026b25:	5b                   	pop    ebx
c0026b26:	5e                   	pop    esi
c0026b27:	5f                   	pop    edi
c0026b28:	5d                   	pop    ebp
c0026b29:	c3                   	ret    
c0026b2a:	66 90                	xchg   ax,ax
c0026b2c:	ba 20 00 00 00       	mov    edx,0x20
c0026b31:	29 ea                	sub    edx,ebp
c0026b33:	89 e9                	mov    ecx,ebp
c0026b35:	d3 e0                	shl    eax,cl
c0026b37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b3b:	89 f8                	mov    eax,edi
c0026b3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b41:	88 d1                	mov    cl,dl
c0026b43:	d3 e8                	shr    eax,cl
c0026b45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b49:	09 c1                	or     ecx,eax
c0026b4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b4f:	89 e9                	mov    ecx,ebp
c0026b51:	d3 e7                	shl    edi,cl
c0026b53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b57:	89 d8                	mov    eax,ebx
c0026b59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b5d:	88 d1                	mov    cl,dl
c0026b5f:	d3 e8                	shr    eax,cl
c0026b61:	89 c7                	mov    edi,eax
c0026b63:	89 e9                	mov    ecx,ebp
c0026b65:	d3 e3                	shl    ebx,cl
c0026b67:	89 f0                	mov    eax,esi
c0026b69:	88 d1                	mov    cl,dl
c0026b6b:	d3 e8                	shr    eax,cl
c0026b6d:	09 d8                	or     eax,ebx
c0026b6f:	89 e9                	mov    ecx,ebp
c0026b71:	d3 e6                	shl    esi,cl
c0026b73:	89 f3                	mov    ebx,esi
c0026b75:	89 fa                	mov    edx,edi
c0026b77:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b7b:	89 d1                	mov    ecx,edx
c0026b7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b81:	89 c6                	mov    esi,eax
c0026b83:	89 d7                	mov    edi,edx
c0026b85:	39 d1                	cmp    ecx,edx
c0026b87:	72 27                	jb     c0026bb0 <__umoddi3+0x10c>
c0026b89:	74 21                	je     c0026bac <__umoddi3+0x108>
c0026b8b:	89 ca                	mov    edx,ecx
c0026b8d:	29 f3                	sub    ebx,esi
c0026b8f:	19 fa                	sbb    edx,edi
c0026b91:	89 d0                	mov    eax,edx
c0026b93:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b97:	d3 e0                	shl    eax,cl
c0026b99:	89 e9                	mov    ecx,ebp
c0026b9b:	d3 eb                	shr    ebx,cl
c0026b9d:	09 d8                	or     eax,ebx
c0026b9f:	d3 ea                	shr    edx,cl
c0026ba1:	83 c4 1c             	add    esp,0x1c
c0026ba4:	5b                   	pop    ebx
c0026ba5:	5e                   	pop    esi
c0026ba6:	5f                   	pop    edi
c0026ba7:	5d                   	pop    ebp
c0026ba8:	c3                   	ret    
c0026ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0026bac:	39 c3                	cmp    ebx,eax
c0026bae:	73 db                	jae    c0026b8b <__umoddi3+0xe7>
c0026bb0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bb4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bb8:	89 d7                	mov    edi,edx
c0026bba:	89 c6                	mov    esi,eax
c0026bbc:	eb cd                	jmp    c0026b8b <__umoddi3+0xe7>

c0026bbe <__addsf3>:
c0026bbe:	55                   	push   ebp
c0026bbf:	89 e5                	mov    ebp,esp
c0026bc1:	57                   	push   edi
c0026bc2:	56                   	push   esi
c0026bc3:	53                   	push   ebx
c0026bc4:	83 ec 08             	sub    esp,0x8
c0026bc7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026bca:	89 fa                	mov    edx,edi
c0026bcc:	89 f8                	mov    eax,edi
c0026bce:	c1 f8 17             	sar    eax,0x17
c0026bd1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bd4:	c1 e2 08             	shl    edx,0x8
c0026bd7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026bdd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026be0:	89 de                	mov    esi,ebx
c0026be2:	c1 fe 17             	sar    esi,0x17
c0026be5:	c1 e3 08             	shl    ebx,0x8
c0026be8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026bee:	31 f0                	xor    eax,esi
c0026bf0:	0f 88 3b 01 00 00    	js     c0026d31 <__addsf3+0x173>
c0026bf6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026bf9:	29 f1                	sub    ecx,esi
c0026bfb:	85 c9                	test   ecx,ecx
c0026bfd:	7e 54                	jle    c0026c53 <__addsf3+0x95>
c0026bff:	89 f0                	mov    eax,esi
c0026c01:	84 c0                	test   al,al
c0026c03:	75 10                	jne    c0026c15 <__addsf3+0x57>
c0026c05:	85 db                	test   ebx,ebx
c0026c07:	0f 84 aa 02 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026c0d:	49                   	dec    ecx
c0026c0e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c11:	74 38                	je     c0026c4b <__addsf3+0x8d>
c0026c13:	eb 13                	jmp    c0026c28 <__addsf3+0x6a>
c0026c15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c18:	f7 d0                	not    eax
c0026c1a:	84 c0                	test   al,al
c0026c1c:	0f 84 95 02 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026c22:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c28:	83 f9 1f             	cmp    ecx,0x1f
c0026c2b:	0f 8f 86 02 00 00    	jg     c0026eb7 <__addsf3+0x2f9>
c0026c31:	89 de                	mov    esi,ebx
c0026c33:	d3 ee                	shr    esi,cl
c0026c35:	b8 20 00 00 00       	mov    eax,0x20
c0026c3a:	29 c8                	sub    eax,ecx
c0026c3c:	89 c1                	mov    ecx,eax
c0026c3e:	d3 e3                	shl    ebx,cl
c0026c40:	31 c0                	xor    eax,eax
c0026c42:	85 db                	test   ebx,ebx
c0026c44:	0f 95 c0             	setne  al
c0026c47:	09 f0                	or     eax,esi
c0026c49:	01 d0                	add    eax,edx
c0026c4b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c4e:	e9 b6 00 00 00       	jmp    c0026d09 <__addsf3+0x14b>
c0026c53:	74 5c                	je     c0026cb1 <__addsf3+0xf3>
c0026c55:	89 f1                	mov    ecx,esi
c0026c57:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c5a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c5d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c61:	75 14                	jne    c0026c77 <__addsf3+0xb9>
c0026c63:	85 d2                	test   edx,edx
c0026c65:	0f 84 4c 02 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026c6b:	49                   	dec    ecx
c0026c6c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c6f:	0f 84 94 00 00 00    	je     c0026d09 <__addsf3+0x14b>
c0026c75:	eb 12                	jmp    c0026c89 <__addsf3+0xcb>
c0026c77:	89 f0                	mov    eax,esi
c0026c79:	f7 d0                	not    eax
c0026c7b:	84 c0                	test   al,al
c0026c7d:	0f 84 34 02 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026c83:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c89:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c8c:	83 f9 1f             	cmp    ecx,0x1f
c0026c8f:	0f 8f 22 02 00 00    	jg     c0026eb7 <__addsf3+0x2f9>
c0026c95:	89 d7                	mov    edi,edx
c0026c97:	d3 ef                	shr    edi,cl
c0026c99:	b8 20 00 00 00       	mov    eax,0x20
c0026c9e:	29 c8                	sub    eax,ecx
c0026ca0:	89 c1                	mov    ecx,eax
c0026ca2:	d3 e2                	shl    edx,cl
c0026ca4:	31 c0                	xor    eax,eax
c0026ca6:	85 d2                	test   edx,edx
c0026ca8:	0f 95 c0             	setne  al
c0026cab:	09 f8                	or     eax,edi
c0026cad:	01 d8                	add    eax,ebx
c0026caf:	eb 58                	jmp    c0026d09 <__addsf3+0x14b>
c0026cb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cb4:	8d 70 01             	lea    esi,[eax+0x1]
c0026cb7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cbd:	75 32                	jne    c0026cf1 <__addsf3+0x133>
c0026cbf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cc3:	75 1f                	jne    c0026ce4 <__addsf3+0x126>
c0026cc5:	85 d2                	test   edx,edx
c0026cc7:	0f 84 e0 01 00 00    	je     c0026ead <__addsf3+0x2ef>
c0026ccd:	85 db                	test   ebx,ebx
c0026ccf:	0f 84 e2 01 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026cd5:	89 d0                	mov    eax,edx
c0026cd7:	01 d8                	add    eax,ebx
c0026cd9:	0f 89 a9 01 00 00    	jns    c0026e88 <__addsf3+0x2ca>
c0026cdf:	e9 9d 01 00 00       	jmp    c0026e81 <__addsf3+0x2c3>
c0026ce4:	85 d2                	test   edx,edx
c0026ce6:	0f 85 cb 01 00 00    	jne    c0026eb7 <__addsf3+0x2f9>
c0026cec:	e9 bc 01 00 00       	jmp    c0026ead <__addsf3+0x2ef>
c0026cf1:	31 c0                	xor    eax,eax
c0026cf3:	89 f1                	mov    ecx,esi
c0026cf5:	f7 d1                	not    ecx
c0026cf7:	84 c9                	test   cl,cl
c0026cf9:	0f 84 90 01 00 00    	je     c0026e8f <__addsf3+0x2d1>
c0026cff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d02:	d1 e8                	shr    eax,1
c0026d04:	e9 86 01 00 00       	jmp    c0026e8f <__addsf3+0x2d1>
c0026d09:	85 c0                	test   eax,eax
c0026d0b:	0f 89 7e 01 00 00    	jns    c0026e8f <__addsf3+0x2d1>
c0026d11:	46                   	inc    esi
c0026d12:	89 f2                	mov    edx,esi
c0026d14:	f7 d2                	not    edx
c0026d16:	84 d2                	test   dl,dl
c0026d18:	0f 84 6f 01 00 00    	je     c0026e8d <__addsf3+0x2cf>
c0026d1e:	89 c2                	mov    edx,eax
c0026d20:	83 e2 01             	and    edx,0x1
c0026d23:	d1 e8                	shr    eax,1
c0026d25:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d2a:	09 d0                	or     eax,edx
c0026d2c:	e9 5e 01 00 00       	jmp    c0026e8f <__addsf3+0x2d1>
c0026d31:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d35:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d38:	89 f0                	mov    eax,esi
c0026d3a:	0f b6 c0             	movzx  eax,al
c0026d3d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d40:	29 c1                	sub    ecx,eax
c0026d42:	85 c9                	test   ecx,ecx
c0026d44:	7e 55                	jle    c0026d9b <__addsf3+0x1dd>
c0026d46:	85 c0                	test   eax,eax
c0026d48:	75 11                	jne    c0026d5b <__addsf3+0x19d>
c0026d4a:	85 db                	test   ebx,ebx
c0026d4c:	0f 84 65 01 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026d52:	49                   	dec    ecx
c0026d53:	75 19                	jne    c0026d6e <__addsf3+0x1b0>
c0026d55:	89 d0                	mov    eax,edx
c0026d57:	29 d8                	sub    eax,ebx
c0026d59:	eb 38                	jmp    c0026d93 <__addsf3+0x1d5>
c0026d5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d5e:	f7 d0                	not    eax
c0026d60:	84 c0                	test   al,al
c0026d62:	0f 84 4f 01 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026d68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d6e:	83 f9 1f             	cmp    ecx,0x1f
c0026d71:	0f 8f 40 01 00 00    	jg     c0026eb7 <__addsf3+0x2f9>
c0026d77:	89 de                	mov    esi,ebx
c0026d79:	d3 ee                	shr    esi,cl
c0026d7b:	b8 20 00 00 00       	mov    eax,0x20
c0026d80:	29 c8                	sub    eax,ecx
c0026d82:	89 c1                	mov    ecx,eax
c0026d84:	d3 e3                	shl    ebx,cl
c0026d86:	31 c0                	xor    eax,eax
c0026d88:	85 db                	test   ebx,ebx
c0026d8a:	0f 95 c0             	setne  al
c0026d8d:	09 f0                	or     eax,esi
c0026d8f:	29 c2                	sub    edx,eax
c0026d91:	89 d0                	mov    eax,edx
c0026d93:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d96:	e9 af 00 00 00       	jmp    c0026e4a <__addsf3+0x28c>
c0026d9b:	74 5c                	je     c0026df9 <__addsf3+0x23b>
c0026d9d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026da0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026da3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026da7:	75 14                	jne    c0026dbd <__addsf3+0x1ff>
c0026da9:	85 d2                	test   edx,edx
c0026dab:	0f 84 06 01 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026db1:	48                   	dec    eax
c0026db2:	75 1b                	jne    c0026dcf <__addsf3+0x211>
c0026db4:	89 d8                	mov    eax,ebx
c0026db6:	29 d0                	sub    eax,edx
c0026db8:	e9 8d 00 00 00       	jmp    c0026e4a <__addsf3+0x28c>
c0026dbd:	89 f1                	mov    ecx,esi
c0026dbf:	f7 d1                	not    ecx
c0026dc1:	84 c9                	test   cl,cl
c0026dc3:	0f 84 ee 00 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026dc9:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dcf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dd2:	83 f8 1f             	cmp    eax,0x1f
c0026dd5:	0f 8f dc 00 00 00    	jg     c0026eb7 <__addsf3+0x2f9>
c0026ddb:	89 d7                	mov    edi,edx
c0026ddd:	88 c1                	mov    cl,al
c0026ddf:	d3 ef                	shr    edi,cl
c0026de1:	b9 20 00 00 00       	mov    ecx,0x20
c0026de6:	29 c1                	sub    ecx,eax
c0026de8:	d3 e2                	shl    edx,cl
c0026dea:	31 c0                	xor    eax,eax
c0026dec:	85 d2                	test   edx,edx
c0026dee:	0f 95 c0             	setne  al
c0026df1:	09 f8                	or     eax,edi
c0026df3:	29 c3                	sub    ebx,eax
c0026df5:	89 d8                	mov    eax,ebx
c0026df7:	eb 51                	jmp    c0026e4a <__addsf3+0x28c>
c0026df9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dfc:	40                   	inc    eax
c0026dfd:	a8 fe                	test   al,0xfe
c0026dff:	75 3d                	jne    c0026e3e <__addsf3+0x280>
c0026e01:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e05:	0f 85 a7 00 00 00    	jne    c0026eb2 <__addsf3+0x2f4>
c0026e0b:	85 d2                	test   edx,edx
c0026e0d:	75 12                	jne    c0026e21 <__addsf3+0x263>
c0026e0f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e12:	85 db                	test   ebx,ebx
c0026e14:	0f 85 9d 00 00 00    	jne    c0026eb7 <__addsf3+0x2f9>
c0026e1a:	31 ff                	xor    edi,edi
c0026e1c:	e9 96 00 00 00       	jmp    c0026eb7 <__addsf3+0x2f9>
c0026e21:	85 db                	test   ebx,ebx
c0026e23:	0f 84 8e 00 00 00    	je     c0026eb7 <__addsf3+0x2f9>
c0026e29:	89 d0                	mov    eax,edx
c0026e2b:	29 d8                	sub    eax,ebx
c0026e2d:	79 06                	jns    c0026e35 <__addsf3+0x277>
c0026e2f:	89 d8                	mov    eax,ebx
c0026e31:	29 d0                	sub    eax,edx
c0026e33:	eb 5a                	jmp    c0026e8f <__addsf3+0x2d1>
c0026e35:	bf 00 00 00 00       	mov    edi,0x0
c0026e3a:	74 7b                	je     c0026eb7 <__addsf3+0x2f9>
c0026e3c:	eb 4a                	jmp    c0026e88 <__addsf3+0x2ca>
c0026e3e:	89 d0                	mov    eax,edx
c0026e40:	29 d8                	sub    eax,ebx
c0026e42:	79 12                	jns    c0026e56 <__addsf3+0x298>
c0026e44:	89 d8                	mov    eax,ebx
c0026e46:	29 d0                	sub    eax,edx
c0026e48:	eb 09                	jmp    c0026e53 <__addsf3+0x295>
c0026e4a:	85 c0                	test   eax,eax
c0026e4c:	79 41                	jns    c0026e8f <__addsf3+0x2d1>
c0026e4e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e53:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e56:	31 f6                	xor    esi,esi
c0026e58:	85 c0                	test   eax,eax
c0026e5a:	74 33                	je     c0026e8f <__addsf3+0x2d1>
c0026e5c:	0f bd c8             	bsr    ecx,eax
c0026e5f:	83 f1 1f             	xor    ecx,0x1f
c0026e62:	d3 e0                	shl    eax,cl
c0026e64:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e68:	39 ca                	cmp    edx,ecx
c0026e6a:	7f 10                	jg     c0026e7c <__addsf3+0x2be>
c0026e6c:	29 d1                	sub    ecx,edx
c0026e6e:	41                   	inc    ecx
c0026e6f:	d3 e8                	shr    eax,cl
c0026e71:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e74:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e7a:	eb 13                	jmp    c0026e8f <__addsf3+0x2d1>
c0026e7c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e7f:	29 ce                	sub    esi,ecx
c0026e81:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e86:	eb 07                	jmp    c0026e8f <__addsf3+0x2d1>
c0026e88:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e8b:	eb 02                	jmp    c0026e8f <__addsf3+0x2d1>
c0026e8d:	31 c0                	xor    eax,eax
c0026e8f:	89 c2                	mov    edx,eax
c0026e91:	c1 ea 08             	shr    edx,0x8
c0026e94:	a8 7f                	test   al,0x7f
c0026e96:	0f 95 c1             	setne  cl
c0026e99:	09 d1                	or     ecx,edx
c0026e9b:	83 e1 01             	and    ecx,0x1
c0026e9e:	c1 e8 07             	shr    eax,0x7
c0026ea1:	21 c8                	and    eax,ecx
c0026ea3:	c1 e6 17             	shl    esi,0x17
c0026ea6:	09 d6                	or     esi,edx
c0026ea8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026eab:	eb 0a                	jmp    c0026eb7 <__addsf3+0x2f9>
c0026ead:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eb0:	eb 05                	jmp    c0026eb7 <__addsf3+0x2f9>
c0026eb2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026eb7:	89 f8                	mov    eax,edi
c0026eb9:	5a                   	pop    edx
c0026eba:	59                   	pop    ecx
c0026ebb:	5b                   	pop    ebx
c0026ebc:	5e                   	pop    esi
c0026ebd:	5f                   	pop    edi
c0026ebe:	5d                   	pop    ebp
c0026ebf:	c3                   	ret    

c0026ec0 <__subsf3>:
c0026ec0:	55                   	push   ebp
c0026ec1:	89 e5                	mov    ebp,esp
c0026ec3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ec6:	05 00 00 00 80       	add    eax,0x80000000
c0026ecb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ece:	5d                   	pop    ebp
c0026ecf:	e9 ea fc ff ff       	jmp    c0026bbe <__addsf3>

c0026ed4 <__negsf2>:
c0026ed4:	55                   	push   ebp
c0026ed5:	89 e5                	mov    ebp,esp
c0026ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026eda:	05 00 00 00 80       	add    eax,0x80000000
c0026edf:	5d                   	pop    ebp
c0026ee0:	c3                   	ret    

c0026ee1 <__mulsf3>:
c0026ee1:	55                   	push   ebp
c0026ee2:	89 e5                	mov    ebp,esp
c0026ee4:	57                   	push   edi
c0026ee5:	56                   	push   esi
c0026ee6:	53                   	push   ebx
c0026ee7:	83 ec 1c             	sub    esp,0x1c
c0026eea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026eed:	89 f0                	mov    eax,esi
c0026eef:	89 f1                	mov    ecx,esi
c0026ef1:	c1 f9 17             	sar    ecx,0x17
c0026ef4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026ef7:	c1 e0 08             	shl    eax,0x8
c0026efa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026eff:	89 c1                	mov    ecx,eax
c0026f01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f04:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f07:	89 c7                	mov    edi,eax
c0026f09:	c1 ff 17             	sar    edi,0x17
c0026f0c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f10:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f13:	89 f8                	mov    eax,edi
c0026f15:	0f b6 c0             	movzx  eax,al
c0026f18:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f1b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f1f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f22:	42                   	inc    edx
c0026f23:	80 e2 fe             	and    dl,0xfe
c0026f26:	75 7b                	jne    c0026fa3 <__mulsf3+0xc2>
c0026f28:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f2c:	74 54                	je     c0026f82 <__mulsf3+0xa1>
c0026f2e:	85 c9                	test   ecx,ecx
c0026f30:	0f 85 64 01 00 00    	jne    c002709a <__mulsf3+0x1b9>
c0026f36:	8d 57 01             	lea    edx,[edi+0x1]
c0026f39:	80 e2 fe             	and    dl,0xfe
c0026f3c:	75 1f                	jne    c0026f5d <__mulsf3+0x7c>
c0026f3e:	85 c0                	test   eax,eax
c0026f40:	b8 00 00 00 00       	mov    eax,0x0
c0026f45:	74 29                	je     c0026f70 <__mulsf3+0x8f>
c0026f47:	53                   	push   ebx
c0026f48:	53                   	push   ebx
c0026f49:	50                   	push   eax
c0026f4a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f4d:	e8 96 05 00 00       	call   c00274e8 <__nesf2>
c0026f52:	83 c4 10             	add    esp,0x10
c0026f55:	85 c0                	test   eax,eax
c0026f57:	0f 85 3a 01 00 00    	jne    c0027097 <__mulsf3+0x1b6>
c0026f5d:	85 ff                	test   edi,edi
c0026f5f:	0f 89 35 01 00 00    	jns    c002709a <__mulsf3+0x1b9>
c0026f65:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f6b:	e9 2a 01 00 00       	jmp    c002709a <__mulsf3+0x1b9>
c0026f70:	51                   	push   ecx
c0026f71:	51                   	push   ecx
c0026f72:	50                   	push   eax
c0026f73:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f76:	e8 6d 05 00 00       	call   c00274e8 <__nesf2>
c0026f7b:	83 c4 10             	add    esp,0x10
c0026f7e:	85 c0                	test   eax,eax
c0026f80:	eb 15                	jmp    c0026f97 <__mulsf3+0xb6>
c0026f82:	85 c9                	test   ecx,ecx
c0026f84:	74 0b                	je     c0026f91 <__mulsf3+0xb0>
c0026f86:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f89:	01 c9                	add    ecx,ecx
c0026f8b:	78 16                	js     c0026fa3 <__mulsf3+0xc2>
c0026f8d:	89 d3                	mov    ebx,edx
c0026f8f:	eb f5                	jmp    c0026f86 <__mulsf3+0xa5>
c0026f91:	89 f8                	mov    eax,edi
c0026f93:	f7 d0                	not    eax
c0026f95:	84 c0                	test   al,al
c0026f97:	75 c4                	jne    c0026f5d <__mulsf3+0x7c>
c0026f99:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f9e:	e9 f7 00 00 00       	jmp    c002709a <__mulsf3+0x1b9>
c0026fa3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fa6:	c1 e6 08             	shl    esi,0x8
c0026fa9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026faf:	8d 57 01             	lea    edx,[edi+0x1]
c0026fb2:	80 e2 fe             	and    dl,0xfe
c0026fb5:	75 63                	jne    c002701a <__mulsf3+0x139>
c0026fb7:	85 c0                	test   eax,eax
c0026fb9:	74 2f                	je     c0026fea <__mulsf3+0x109>
c0026fbb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fbf:	0f 89 d2 00 00 00    	jns    c0027097 <__mulsf3+0x1b6>
c0026fc5:	52                   	push   edx
c0026fc6:	52                   	push   edx
c0026fc7:	6a 00                	push   0x0
c0026fc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fcc:	e8 dc 04 00 00       	call   c00274ad <__eqsf2>
c0026fd1:	83 c4 10             	add    esp,0x10
c0026fd4:	85 c0                	test   eax,eax
c0026fd6:	0f 85 bb 00 00 00    	jne    c0027097 <__mulsf3+0x1b6>
c0026fdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fdf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026fe5:	e9 b0 00 00 00       	jmp    c002709a <__mulsf3+0x1b9>
c0026fea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026fed:	50                   	push   eax
c0026fee:	50                   	push   eax
c0026fef:	6a 00                	push   0x0
c0026ff1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ff4:	e8 b4 04 00 00       	call   c00274ad <__eqsf2>
c0026ff9:	83 c4 10             	add    esp,0x10
c0026ffc:	85 c0                	test   eax,eax
c0026ffe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027001:	75 0c                	jne    c002700f <__mulsf3+0x12e>
c0027003:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027007:	0f 89 8a 00 00 00    	jns    c0027097 <__mulsf3+0x1b6>
c002700d:	eb cd                	jmp    c0026fdc <__mulsf3+0xfb>
c002700f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027012:	01 f6                	add    esi,esi
c0027014:	78 04                	js     c002701a <__mulsf3+0x139>
c0027016:	89 c3                	mov    ebx,eax
c0027018:	eb f5                	jmp    c002700f <__mulsf3+0x12e>
c002701a:	89 c8                	mov    eax,ecx
c002701c:	0d 00 00 00 80       	or     eax,0x80000000
c0027021:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027027:	f7 e6                	mul    esi
c0027029:	85 c0                	test   eax,eax
c002702b:	0f 95 c0             	setne  al
c002702e:	0f b6 c0             	movzx  eax,al
c0027031:	09 c2                	or     edx,eax
c0027033:	78 03                	js     c0027038 <__mulsf3+0x157>
c0027035:	01 d2                	add    edx,edx
c0027037:	4b                   	dec    ebx
c0027038:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002703e:	7f 22                	jg     c0027062 <__mulsf3+0x181>
c0027040:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027046:	85 db                	test   ebx,ebx
c0027048:	7f 23                	jg     c002706d <__mulsf3+0x18c>
c002704a:	83 fb e9             	cmp    ebx,0xffffffe9
c002704d:	7c 1a                	jl     c0027069 <__mulsf3+0x188>
c002704f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027055:	b9 01 00 00 00       	mov    ecx,0x1
c002705a:	29 d9                	sub    ecx,ebx
c002705c:	d3 ea                	shr    edx,cl
c002705e:	31 db                	xor    ebx,ebx
c0027060:	eb 0b                	jmp    c002706d <__mulsf3+0x18c>
c0027062:	bb ff 00 00 00       	mov    ebx,0xff
c0027067:	eb 02                	jmp    c002706b <__mulsf3+0x18a>
c0027069:	31 db                	xor    ebx,ebx
c002706b:	31 d2                	xor    edx,edx
c002706d:	89 d0                	mov    eax,edx
c002706f:	c1 e8 08             	shr    eax,0x8
c0027072:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027075:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002707b:	09 fb                	or     ebx,edi
c002707d:	c1 e3 17             	shl    ebx,0x17
c0027080:	09 c3                	or     ebx,eax
c0027082:	f6 c2 7f             	test   dl,0x7f
c0027085:	0f 95 c1             	setne  cl
c0027088:	09 c8                	or     eax,ecx
c002708a:	83 e0 01             	and    eax,0x1
c002708d:	c1 ea 07             	shr    edx,0x7
c0027090:	21 c2                	and    edx,eax
c0027092:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027095:	eb 03                	jmp    c002709a <__mulsf3+0x1b9>
c0027097:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002709a:	89 f0                	mov    eax,esi
c002709c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002709f:	5b                   	pop    ebx
c00270a0:	5e                   	pop    esi
c00270a1:	5f                   	pop    edi
c00270a2:	5d                   	pop    ebp
c00270a3:	c3                   	ret    

c00270a4 <__divsf3>:
c00270a4:	55                   	push   ebp
c00270a5:	89 e5                	mov    ebp,esp
c00270a7:	57                   	push   edi
c00270a8:	56                   	push   esi
c00270a9:	53                   	push   ebx
c00270aa:	83 ec 1c             	sub    esp,0x1c
c00270ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270b0:	89 d8                	mov    eax,ebx
c00270b2:	89 d9                	mov    ecx,ebx
c00270b4:	c1 f9 17             	sar    ecx,0x17
c00270b7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270ba:	c1 e0 08             	shl    eax,0x8
c00270bd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270c2:	89 c1                	mov    ecx,eax
c00270c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270c7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270ca:	89 c7                	mov    edi,eax
c00270cc:	c1 ff 17             	sar    edi,0x17
c00270cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270d6:	89 f8                	mov    eax,edi
c00270d8:	0f b6 c0             	movzx  eax,al
c00270db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270de:	29 c6                	sub    esi,eax
c00270e0:	83 c6 7f             	add    esi,0x7f
c00270e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270e6:	42                   	inc    edx
c00270e7:	80 e2 fe             	and    dl,0xfe
c00270ea:	0f 85 9c 00 00 00    	jne    c002718c <__divsf3+0xe8>
c00270f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270f4:	74 33                	je     c0027129 <__divsf3+0x85>
c00270f6:	85 c9                	test   ecx,ecx
c00270f8:	0f 85 c7 01 00 00    	jne    c00272c5 <__divsf3+0x221>
c00270fe:	8d 57 01             	lea    edx,[edi+0x1]
c0027101:	80 e2 fe             	and    dl,0xfe
c0027104:	75 2f                	jne    c0027135 <__divsf3+0x91>
c0027106:	85 c0                	test   eax,eax
c0027108:	74 2b                	je     c0027135 <__divsf3+0x91>
c002710a:	51                   	push   ecx
c002710b:	51                   	push   ecx
c002710c:	6a 00                	push   0x0
c002710e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027111:	e8 d2 03 00 00       	call   c00274e8 <__nesf2>
c0027116:	83 c4 10             	add    esp,0x10
c0027119:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002711c:	85 c0                	test   eax,eax
c002711e:	0f 85 a1 01 00 00    	jne    c00272c5 <__divsf3+0x221>
c0027124:	e9 92 01 00 00       	jmp    c00272bb <__divsf3+0x217>
c0027129:	85 c9                	test   ecx,ecx
c002712b:	75 1b                	jne    c0027148 <__divsf3+0xa4>
c002712d:	8d 57 01             	lea    edx,[edi+0x1]
c0027130:	80 e2 fe             	and    dl,0xfe
c0027133:	74 1e                	je     c0027153 <__divsf3+0xaf>
c0027135:	85 ff                	test   edi,edi
c0027137:	0f 89 88 01 00 00    	jns    c00272c5 <__divsf3+0x221>
c002713d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027143:	e9 7d 01 00 00       	jmp    c00272c5 <__divsf3+0x221>
c0027148:	8d 56 ff             	lea    edx,[esi-0x1]
c002714b:	01 c9                	add    ecx,ecx
c002714d:	78 3d                	js     c002718c <__divsf3+0xe8>
c002714f:	89 d6                	mov    esi,edx
c0027151:	eb f5                	jmp    c0027148 <__divsf3+0xa4>
c0027153:	85 c0                	test   eax,eax
c0027155:	b8 00 00 00 00       	mov    eax,0x0
c002715a:	74 18                	je     c0027174 <__divsf3+0xd0>
c002715c:	52                   	push   edx
c002715d:	52                   	push   edx
c002715e:	50                   	push   eax
c002715f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027162:	e8 81 03 00 00       	call   c00274e8 <__nesf2>
c0027167:	83 c4 10             	add    esp,0x10
c002716a:	85 c0                	test   eax,eax
c002716c:	0f 85 50 01 00 00    	jne    c00272c2 <__divsf3+0x21e>
c0027172:	eb c1                	jmp    c0027135 <__divsf3+0x91>
c0027174:	56                   	push   esi
c0027175:	56                   	push   esi
c0027176:	50                   	push   eax
c0027177:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002717a:	e8 69 03 00 00       	call   c00274e8 <__nesf2>
c002717f:	83 c4 10             	add    esp,0x10
c0027182:	85 c0                	test   eax,eax
c0027184:	0f 84 31 01 00 00    	je     c00272bb <__divsf3+0x217>
c002718a:	eb a9                	jmp    c0027135 <__divsf3+0x91>
c002718c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002718f:	c1 e3 08             	shl    ebx,0x8
c0027192:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027198:	8d 57 01             	lea    edx,[edi+0x1]
c002719b:	80 e2 fe             	and    dl,0xfe
c002719e:	75 71                	jne    c0027211 <__divsf3+0x16d>
c00271a0:	85 c0                	test   eax,eax
c00271a2:	ba 00 00 00 00       	mov    edx,0x0
c00271a7:	74 2f                	je     c00271d8 <__divsf3+0x134>
c00271a9:	51                   	push   ecx
c00271aa:	51                   	push   ecx
c00271ab:	52                   	push   edx
c00271ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271af:	e8 f9 02 00 00       	call   c00274ad <__eqsf2>
c00271b4:	83 c4 10             	add    esp,0x10
c00271b7:	85 c0                	test   eax,eax
c00271b9:	0f 85 03 01 00 00    	jne    c00272c2 <__divsf3+0x21e>
c00271bf:	31 d2                	xor    edx,edx
c00271c1:	89 d3                	mov    ebx,edx
c00271c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271c6:	31 f8                	xor    eax,edi
c00271c8:	0f 89 f7 00 00 00    	jns    c00272c5 <__divsf3+0x221>
c00271ce:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271d3:	e9 ed 00 00 00       	jmp    c00272c5 <__divsf3+0x221>
c00271d8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271db:	50                   	push   eax
c00271dc:	50                   	push   eax
c00271dd:	52                   	push   edx
c00271de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271e1:	e8 c7 02 00 00       	call   c00274ad <__eqsf2>
c00271e6:	83 c4 10             	add    esp,0x10
c00271e9:	85 c0                	test   eax,eax
c00271eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271ee:	75 16                	jne    c0027206 <__divsf3+0x162>
c00271f0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271f3:	31 fb                	xor    ebx,edi
c00271f5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00271fb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027201:	e9 bf 00 00 00       	jmp    c00272c5 <__divsf3+0x221>
c0027206:	8d 46 01             	lea    eax,[esi+0x1]
c0027209:	01 db                	add    ebx,ebx
c002720b:	78 04                	js     c0027211 <__divsf3+0x16d>
c002720d:	89 c6                	mov    esi,eax
c002720f:	eb f5                	jmp    c0027206 <__divsf3+0x162>
c0027211:	89 c8                	mov    eax,ecx
c0027213:	0d 00 00 00 80       	or     eax,0x80000000
c0027218:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002721e:	31 d2                	xor    edx,edx
c0027220:	39 d8                	cmp    eax,ebx
c0027222:	72 07                	jb     c002722b <__divsf3+0x187>
c0027224:	29 d8                	sub    eax,ebx
c0027226:	ba 01 00 00 00       	mov    edx,0x1
c002722b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027232:	01 d2                	add    edx,edx
c0027234:	89 c1                	mov    ecx,eax
c0027236:	01 c0                	add    eax,eax
c0027238:	85 c9                	test   ecx,ecx
c002723a:	78 04                	js     c0027240 <__divsf3+0x19c>
c002723c:	39 c3                	cmp    ebx,eax
c002723e:	77 05                	ja     c0027245 <__divsf3+0x1a1>
c0027240:	29 d8                	sub    eax,ebx
c0027242:	83 ca 01             	or     edx,0x1
c0027245:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027248:	75 e8                	jne    c0027232 <__divsf3+0x18e>
c002724a:	85 c0                	test   eax,eax
c002724c:	0f 95 c0             	setne  al
c002724f:	0f b6 c0             	movzx  eax,al
c0027252:	c1 e2 06             	shl    edx,0x6
c0027255:	09 c2                	or     edx,eax
c0027257:	78 03                	js     c002725c <__divsf3+0x1b8>
c0027259:	01 d2                	add    edx,edx
c002725b:	4e                   	dec    esi
c002725c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027262:	7f 22                	jg     c0027286 <__divsf3+0x1e2>
c0027264:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002726a:	85 f6                	test   esi,esi
c002726c:	7f 23                	jg     c0027291 <__divsf3+0x1ed>
c002726e:	83 fe e9             	cmp    esi,0xffffffe9
c0027271:	7c 1a                	jl     c002728d <__divsf3+0x1e9>
c0027273:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027279:	b9 01 00 00 00       	mov    ecx,0x1
c002727e:	29 f1                	sub    ecx,esi
c0027280:	d3 ea                	shr    edx,cl
c0027282:	31 f6                	xor    esi,esi
c0027284:	eb 0b                	jmp    c0027291 <__divsf3+0x1ed>
c0027286:	be ff 00 00 00       	mov    esi,0xff
c002728b:	eb 02                	jmp    c002728f <__divsf3+0x1eb>
c002728d:	31 f6                	xor    esi,esi
c002728f:	31 d2                	xor    edx,edx
c0027291:	89 d0                	mov    eax,edx
c0027293:	c1 e8 08             	shr    eax,0x8
c0027296:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027299:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002729f:	09 fe                	or     esi,edi
c00272a1:	c1 e6 17             	shl    esi,0x17
c00272a4:	09 c6                	or     esi,eax
c00272a6:	f6 c2 7f             	test   dl,0x7f
c00272a9:	0f 95 c1             	setne  cl
c00272ac:	09 c8                	or     eax,ecx
c00272ae:	83 e0 01             	and    eax,0x1
c00272b1:	c1 ea 07             	shr    edx,0x7
c00272b4:	21 c2                	and    edx,eax
c00272b6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272b9:	eb 0a                	jmp    c00272c5 <__divsf3+0x221>
c00272bb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272c0:	eb 03                	jmp    c00272c5 <__divsf3+0x221>
c00272c2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272c5:	89 d8                	mov    eax,ebx
c00272c7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272ca:	5b                   	pop    ebx
c00272cb:	5e                   	pop    esi
c00272cc:	5f                   	pop    edi
c00272cd:	5d                   	pop    ebp
c00272ce:	c3                   	ret    

c00272cf <__floatsisf>:
c00272cf:	55                   	push   ebp
c00272d0:	89 e5                	mov    ebp,esp
c00272d2:	53                   	push   ebx
c00272d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272d6:	85 d2                	test   edx,edx
c00272d8:	7e 2b                	jle    c0027305 <__floatsisf+0x36>
c00272da:	0f bd ca             	bsr    ecx,edx
c00272dd:	83 f1 1f             	xor    ecx,0x1f
c00272e0:	d3 e2                	shl    edx,cl
c00272e2:	89 d0                	mov    eax,edx
c00272e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272e9:	89 c3                	mov    ebx,eax
c00272eb:	c1 eb 08             	shr    ebx,0x8
c00272ee:	80 e2 7f             	and    dl,0x7f
c00272f1:	0f 95 c2             	setne  dl
c00272f4:	09 da                	or     edx,ebx
c00272f6:	83 e2 01             	and    edx,0x1
c00272f9:	c1 e8 07             	shr    eax,0x7
c00272fc:	21 c2                	and    edx,eax
c00272fe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027303:	eb 32                	jmp    c0027337 <__floatsisf+0x68>
c0027305:	b8 00 00 00 00       	mov    eax,0x0
c002730a:	74 34                	je     c0027340 <__floatsisf+0x71>
c002730c:	f7 da                	neg    edx
c002730e:	0f bd ca             	bsr    ecx,edx
c0027311:	83 f1 1f             	xor    ecx,0x1f
c0027314:	d3 e2                	shl    edx,cl
c0027316:	89 d0                	mov    eax,edx
c0027318:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002731d:	89 c3                	mov    ebx,eax
c002731f:	c1 eb 08             	shr    ebx,0x8
c0027322:	80 e2 7f             	and    dl,0x7f
c0027325:	0f 95 c2             	setne  dl
c0027328:	09 da                	or     edx,ebx
c002732a:	83 e2 01             	and    edx,0x1
c002732d:	c1 e8 07             	shr    eax,0x7
c0027330:	21 c2                	and    edx,eax
c0027332:	b8 9e 01 00 00       	mov    eax,0x19e
c0027337:	29 c8                	sub    eax,ecx
c0027339:	c1 e0 17             	shl    eax,0x17
c002733c:	09 d8                	or     eax,ebx
c002733e:	01 d0                	add    eax,edx
c0027340:	5b                   	pop    ebx
c0027341:	5d                   	pop    ebp
c0027342:	c3                   	ret    

c0027343 <__floatunsisf>:
c0027343:	55                   	push   ebp
c0027344:	89 e5                	mov    ebp,esp
c0027346:	53                   	push   ebx
c0027347:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002734a:	31 c0                	xor    eax,eax
c002734c:	85 d2                	test   edx,edx
c002734e:	74 32                	je     c0027382 <__floatunsisf+0x3f>
c0027350:	0f bd ca             	bsr    ecx,edx
c0027353:	83 f1 1f             	xor    ecx,0x1f
c0027356:	d3 e2                	shl    edx,cl
c0027358:	89 d0                	mov    eax,edx
c002735a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002735f:	89 c3                	mov    ebx,eax
c0027361:	c1 eb 08             	shr    ebx,0x8
c0027364:	80 e2 7f             	and    dl,0x7f
c0027367:	0f 95 c2             	setne  dl
c002736a:	09 da                	or     edx,ebx
c002736c:	83 e2 01             	and    edx,0x1
c002736f:	c1 e8 07             	shr    eax,0x7
c0027372:	21 c2                	and    edx,eax
c0027374:	b8 9e 00 00 00       	mov    eax,0x9e
c0027379:	29 c8                	sub    eax,ecx
c002737b:	c1 e0 17             	shl    eax,0x17
c002737e:	09 d8                	or     eax,ebx
c0027380:	01 d0                	add    eax,edx
c0027382:	5b                   	pop    ebx
c0027383:	5d                   	pop    ebp
c0027384:	c3                   	ret    

c0027385 <__fixsfsi>:
c0027385:	55                   	push   ebp
c0027386:	89 e5                	mov    ebp,esp
c0027388:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002738b:	89 d1                	mov    ecx,edx
c002738d:	c1 e1 08             	shl    ecx,0x8
c0027390:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027396:	c1 fa 17             	sar    edx,0x17
c0027399:	78 1c                	js     c00273b7 <__fixsfsi+0x32>
c002739b:	83 ea 7f             	sub    edx,0x7f
c002739e:	31 c0                	xor    eax,eax
c00273a0:	83 fa 1e             	cmp    edx,0x1e
c00273a3:	77 40                	ja     c00273e5 <__fixsfsi+0x60>
c00273a5:	89 c8                	mov    eax,ecx
c00273a7:	0d 00 00 00 80       	or     eax,0x80000000
c00273ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273b1:	29 d1                	sub    ecx,edx
c00273b3:	d3 e8                	shr    eax,cl
c00273b5:	eb 2e                	jmp    c00273e5 <__fixsfsi+0x60>
c00273b7:	31 c0                	xor    eax,eax
c00273b9:	81 c2 81 00 00 00    	add    edx,0x81
c00273bf:	78 24                	js     c00273e5 <__fixsfsi+0x60>
c00273c1:	83 fa 1e             	cmp    edx,0x1e
c00273c4:	7e 09                	jle    c00273cf <__fixsfsi+0x4a>
c00273c6:	83 fa 1f             	cmp    edx,0x1f
c00273c9:	75 18                	jne    c00273e3 <__fixsfsi+0x5e>
c00273cb:	85 c9                	test   ecx,ecx
c00273cd:	75 14                	jne    c00273e3 <__fixsfsi+0x5e>
c00273cf:	89 c8                	mov    eax,ecx
c00273d1:	0d 00 00 00 80       	or     eax,0x80000000
c00273d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273db:	29 d1                	sub    ecx,edx
c00273dd:	d3 e8                	shr    eax,cl
c00273df:	f7 d8                	neg    eax
c00273e1:	eb 02                	jmp    c00273e5 <__fixsfsi+0x60>
c00273e3:	31 c0                	xor    eax,eax
c00273e5:	5d                   	pop    ebp
c00273e6:	c3                   	ret    

c00273e7 <__fixunssfsi>:
c00273e7:	55                   	push   ebp
c00273e8:	89 e5                	mov    ebp,esp
c00273ea:	53                   	push   ebx
c00273eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273ee:	89 d3                	mov    ebx,edx
c00273f0:	c1 fb 17             	sar    ebx,0x17
c00273f3:	83 eb 7f             	sub    ebx,0x7f
c00273f6:	31 c0                	xor    eax,eax
c00273f8:	83 fb 1f             	cmp    ebx,0x1f
c00273fb:	77 18                	ja     c0027415 <__fixunssfsi+0x2e>
c00273fd:	89 d0                	mov    eax,edx
c00273ff:	c1 e0 08             	shl    eax,0x8
c0027402:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027407:	0d 00 00 00 80       	or     eax,0x80000000
c002740c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027411:	29 d9                	sub    ecx,ebx
c0027413:	d3 e8                	shr    eax,cl
c0027415:	5b                   	pop    ebx
c0027416:	5d                   	pop    ebp
c0027417:	c3                   	ret    

c0027418 <__cmpsf2>:
c0027418:	55                   	push   ebp
c0027419:	89 e5                	mov    ebp,esp
c002741b:	57                   	push   edi
c002741c:	56                   	push   esi
c002741d:	53                   	push   ebx
c002741e:	83 ec 24             	sub    esp,0x24
c0027421:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027424:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027427:	e8 4f 10 00 00       	call   c002847b <__truncdfsf2>
c002742c:	5a                   	pop    edx
c002742d:	59                   	pop    ecx
c002742e:	89 c3                	mov    ebx,eax
c0027430:	c1 e8 17             	shr    eax,0x17
c0027433:	0f b6 f0             	movzx  esi,al
c0027436:	89 d8                	mov    eax,ebx
c0027438:	c1 e8 1f             	shr    eax,0x1f
c002743b:	31 c6                	xor    esi,eax
c002743d:	c1 e3 08             	shl    ebx,0x8
c0027440:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027443:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027446:	e8 30 10 00 00       	call   c002847b <__truncdfsf2>
c002744b:	83 c4 10             	add    esp,0x10
c002744e:	89 c1                	mov    ecx,eax
c0027450:	c1 e9 17             	shr    ecx,0x17
c0027453:	0f b6 c9             	movzx  ecx,cl
c0027456:	89 c7                	mov    edi,eax
c0027458:	c1 ef 1f             	shr    edi,0x1f
c002745b:	89 ca                	mov    edx,ecx
c002745d:	31 fa                	xor    edx,edi
c002745f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027462:	c1 e0 08             	shl    eax,0x8
c0027465:	89 c2                	mov    edx,eax
c0027467:	89 d8                	mov    eax,ebx
c0027469:	09 d0                	or     eax,edx
c002746b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027470:	09 f0                	or     eax,esi
c0027472:	75 08                	jne    c002747c <__cmpsf2+0x64>
c0027474:	31 c0                	xor    eax,eax
c0027476:	39 f9                	cmp    ecx,edi
c0027478:	75 0c                	jne    c0027486 <__cmpsf2+0x6e>
c002747a:	eb 29                	jmp    c00274a5 <__cmpsf2+0x8d>
c002747c:	b8 01 00 00 00       	mov    eax,0x1
c0027481:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027484:	7f 1f                	jg     c00274a5 <__cmpsf2+0x8d>
c0027486:	83 c8 ff             	or     eax,0xffffffff
c0027489:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002748c:	7c 17                	jl     c00274a5 <__cmpsf2+0x8d>
c002748e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027494:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002749a:	b8 01 00 00 00       	mov    eax,0x1
c002749f:	39 d3                	cmp    ebx,edx
c00274a1:	77 02                	ja     c00274a5 <__cmpsf2+0x8d>
c00274a3:	19 c0                	sbb    eax,eax
c00274a5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274a8:	5b                   	pop    ebx
c00274a9:	5e                   	pop    esi
c00274aa:	5f                   	pop    edi
c00274ab:	5d                   	pop    ebp
c00274ac:	c3                   	ret    

c00274ad <__eqsf2>:
c00274ad:	55                   	push   ebp
c00274ae:	89 e5                	mov    ebp,esp
c00274b0:	83 ec 24             	sub    esp,0x24
c00274b3:	6a 01                	push   0x1
c00274b5:	83 ec 0c             	sub    esp,0xc
c00274b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274bb:	e8 df 10 00 00       	call   c002859f <__extendsfdf2>
c00274c0:	83 c4 10             	add    esp,0x10
c00274c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274c9:	52                   	push   edx
c00274ca:	50                   	push   eax
c00274cb:	50                   	push   eax
c00274cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274cf:	e8 cb 10 00 00       	call   c002859f <__extendsfdf2>
c00274d4:	59                   	pop    ecx
c00274d5:	59                   	pop    ecx
c00274d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274dc:	52                   	push   edx
c00274dd:	50                   	push   eax
c00274de:	e8 35 ff ff ff       	call   c0027418 <__cmpsf2>
c00274e3:	83 c4 20             	add    esp,0x20
c00274e6:	c9                   	leave  
c00274e7:	c3                   	ret    

c00274e8 <__nesf2>:
c00274e8:	eb c3                	jmp    c00274ad <__eqsf2>

c00274ea <__gtsf2>:
c00274ea:	55                   	push   ebp
c00274eb:	89 e5                	mov    ebp,esp
c00274ed:	83 ec 24             	sub    esp,0x24
c00274f0:	6a ff                	push   0xffffffff
c00274f2:	83 ec 0c             	sub    esp,0xc
c00274f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274f8:	e8 a2 10 00 00       	call   c002859f <__extendsfdf2>
c00274fd:	83 c4 10             	add    esp,0x10
c0027500:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027503:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027506:	52                   	push   edx
c0027507:	50                   	push   eax
c0027508:	50                   	push   eax
c0027509:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002750c:	e8 8e 10 00 00       	call   c002859f <__extendsfdf2>
c0027511:	59                   	pop    ecx
c0027512:	59                   	pop    ecx
c0027513:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027516:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027519:	52                   	push   edx
c002751a:	50                   	push   eax
c002751b:	e8 f8 fe ff ff       	call   c0027418 <__cmpsf2>
c0027520:	83 c4 20             	add    esp,0x20
c0027523:	c9                   	leave  
c0027524:	c3                   	ret    

c0027525 <__gesf2>:
c0027525:	eb c3                	jmp    c00274ea <__gtsf2>

c0027527 <__ltsf2>:
c0027527:	eb 84                	jmp    c00274ad <__eqsf2>

c0027529 <__lesf2>:
c0027529:	eb 82                	jmp    c00274ad <__eqsf2>

c002752b <__adddf3>:
c002752b:	55                   	push   ebp
c002752c:	89 e5                	mov    ebp,esp
c002752e:	57                   	push   edi
c002752f:	56                   	push   esi
c0027530:	53                   	push   ebx
c0027531:	83 ec 24             	sub    esp,0x24
c0027534:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027537:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002753a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002753d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027540:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027543:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027546:	89 c8                	mov    eax,ecx
c0027548:	89 ce                	mov    esi,ecx
c002754a:	c1 fe 14             	sar    esi,0x14
c002754d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027550:	89 fb                	mov    ebx,edi
c0027552:	89 fa                	mov    edx,edi
c0027554:	c1 e2 0b             	shl    edx,0xb
c0027557:	c1 e0 0b             	shl    eax,0xb
c002755a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002755f:	c1 eb 15             	shr    ebx,0x15
c0027562:	09 d8                	or     eax,ebx
c0027564:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027567:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002756a:	c1 fe 14             	sar    esi,0x14
c002756d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027570:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027573:	89 f3                	mov    ebx,esi
c0027575:	c1 e3 0b             	shl    ebx,0xb
c0027578:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002757b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002757e:	c1 e3 0b             	shl    ebx,0xb
c0027581:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027587:	c1 ee 15             	shr    esi,0x15
c002758a:	09 f3                	or     ebx,esi
c002758c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002758f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027592:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027595:	0f 88 5f 02 00 00    	js     c00277fa <__adddf3+0x2cf>
c002759b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002759e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275a1:	85 db                	test   ebx,ebx
c00275a3:	0f 8e c7 00 00 00    	jle    c0027670 <__adddf3+0x145>
c00275a9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275b0:	75 1a                	jne    c00275cc <__adddf3+0xa1>
c00275b2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275b5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275b8:	0f 84 b2 05 00 00    	je     c0027b70 <__adddf3+0x645>
c00275be:	4b                   	dec    ebx
c00275bf:	75 23                	jne    c00275e4 <__adddf3+0xb9>
c00275c1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275c4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275c7:	e9 99 00 00 00       	jmp    c0027665 <__adddf3+0x13a>
c00275cc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275cf:	f7 d6                	not    esi
c00275d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275d7:	0f 84 93 05 00 00    	je     c0027b70 <__adddf3+0x645>
c00275dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275e4:	83 fb 1f             	cmp    ebx,0x1f
c00275e7:	7e 42                	jle    c002762b <__adddf3+0x100>
c00275e9:	83 fb 3f             	cmp    ebx,0x3f
c00275ec:	0f 8f 7e 05 00 00    	jg     c0027b70 <__adddf3+0x645>
c00275f2:	83 e3 1f             	and    ebx,0x1f
c00275f5:	89 d9                	mov    ecx,ebx
c00275f7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275fa:	d3 ef                	shr    edi,cl
c00275fc:	31 db                	xor    ebx,ebx
c00275fe:	85 c9                	test   ecx,ecx
c0027600:	74 15                	je     c0027617 <__adddf3+0xec>
c0027602:	be 20 00 00 00       	mov    esi,0x20
c0027607:	29 ce                	sub    esi,ecx
c0027609:	89 f1                	mov    ecx,esi
c002760b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002760e:	d3 e6                	shl    esi,cl
c0027610:	31 db                	xor    ebx,ebx
c0027612:	85 f6                	test   esi,esi
c0027614:	0f 95 c3             	setne  bl
c0027617:	31 c9                	xor    ecx,ecx
c0027619:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002761d:	0f 95 c1             	setne  cl
c0027620:	09 cf                	or     edi,ecx
c0027622:	09 fb                	or     ebx,edi
c0027624:	01 da                	add    edx,ebx
c0027626:	83 d0 00             	adc    eax,0x0
c0027629:	eb 3a                	jmp    c0027665 <__adddf3+0x13a>
c002762b:	bf 20 00 00 00       	mov    edi,0x20
c0027630:	29 df                	sub    edi,ebx
c0027632:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027635:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027638:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002763b:	d3 e6                	shl    esi,cl
c002763d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027640:	88 d9                	mov    cl,bl
c0027642:	d3 ef                	shr    edi,cl
c0027644:	09 fe                	or     esi,edi
c0027646:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027649:	88 d9                	mov    cl,bl
c002764b:	d3 ef                	shr    edi,cl
c002764d:	89 fb                	mov    ebx,edi
c002764f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027652:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027655:	d3 e7                	shl    edi,cl
c0027657:	85 ff                	test   edi,edi
c0027659:	0f 95 c1             	setne  cl
c002765c:	0f b6 c9             	movzx  ecx,cl
c002765f:	09 ce                	or     esi,ecx
c0027661:	01 f2                	add    edx,esi
c0027663:	11 d8                	adc    eax,ebx
c0027665:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027668:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002766b:	e9 52 01 00 00       	jmp    c00277c2 <__adddf3+0x297>
c0027670:	0f 84 d5 00 00 00    	je     c002774b <__adddf3+0x220>
c0027676:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027679:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002767c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002767f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027682:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027689:	75 20                	jne    c00276ab <__adddf3+0x180>
c002768b:	89 d6                	mov    esi,edx
c002768d:	09 c6                	or     esi,eax
c002768f:	0f 84 db 04 00 00    	je     c0027b70 <__adddf3+0x645>
c0027695:	4b                   	dec    ebx
c0027696:	75 29                	jne    c00276c1 <__adddf3+0x196>
c0027698:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002769b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002769e:	01 d1                	add    ecx,edx
c00276a0:	11 c6                	adc    esi,eax
c00276a2:	89 f0                	mov    eax,esi
c00276a4:	89 ca                	mov    edx,ecx
c00276a6:	e9 17 01 00 00       	jmp    c00277c2 <__adddf3+0x297>
c00276ab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276ae:	f7 d6                	not    esi
c00276b0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276b6:	0f 84 b4 04 00 00    	je     c0027b70 <__adddf3+0x645>
c00276bc:	0d 00 00 00 80       	or     eax,0x80000000
c00276c1:	83 fb 1f             	cmp    ebx,0x1f
c00276c4:	7e 48                	jle    c002770e <__adddf3+0x1e3>
c00276c6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276cc:	83 fb 3f             	cmp    ebx,0x3f
c00276cf:	0f 8f 9b 04 00 00    	jg     c0027b70 <__adddf3+0x645>
c00276d5:	83 e3 1f             	and    ebx,0x1f
c00276d8:	89 d9                	mov    ecx,ebx
c00276da:	89 c7                	mov    edi,eax
c00276dc:	d3 ef                	shr    edi,cl
c00276de:	31 db                	xor    ebx,ebx
c00276e0:	85 c9                	test   ecx,ecx
c00276e2:	74 12                	je     c00276f6 <__adddf3+0x1cb>
c00276e4:	be 20 00 00 00       	mov    esi,0x20
c00276e9:	29 ce                	sub    esi,ecx
c00276eb:	89 f1                	mov    ecx,esi
c00276ed:	d3 e0                	shl    eax,cl
c00276ef:	31 db                	xor    ebx,ebx
c00276f1:	85 c0                	test   eax,eax
c00276f3:	0f 95 c3             	setne  bl
c00276f6:	31 c0                	xor    eax,eax
c00276f8:	85 d2                	test   edx,edx
c00276fa:	0f 95 c0             	setne  al
c00276fd:	09 c7                	or     edi,eax
c00276ff:	09 fb                	or     ebx,edi
c0027701:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027704:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027707:	01 da                	add    edx,ebx
c0027709:	83 d6 00             	adc    esi,0x0
c002770c:	eb 39                	jmp    c0027747 <__adddf3+0x21c>
c002770e:	be 20 00 00 00       	mov    esi,0x20
c0027713:	29 de                	sub    esi,ebx
c0027715:	89 c7                	mov    edi,eax
c0027717:	89 f1                	mov    ecx,esi
c0027719:	d3 e7                	shl    edi,cl
c002771b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002771e:	89 d7                	mov    edi,edx
c0027720:	88 d9                	mov    cl,bl
c0027722:	d3 ef                	shr    edi,cl
c0027724:	89 f9                	mov    ecx,edi
c0027726:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027729:	09 cf                	or     edi,ecx
c002772b:	88 d9                	mov    cl,bl
c002772d:	d3 e8                	shr    eax,cl
c002772f:	89 f1                	mov    ecx,esi
c0027731:	d3 e2                	shl    edx,cl
c0027733:	85 d2                	test   edx,edx
c0027735:	0f 95 c2             	setne  dl
c0027738:	0f b6 d2             	movzx  edx,dl
c002773b:	09 d7                	or     edi,edx
c002773d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027740:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027743:	01 fa                	add    edx,edi
c0027745:	11 c6                	adc    esi,eax
c0027747:	89 f0                	mov    eax,esi
c0027749:	eb 77                	jmp    c00277c2 <__adddf3+0x297>
c002774b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002774e:	46                   	inc    esi
c002774f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027752:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027758:	75 41                	jne    c002779b <__adddf3+0x270>
c002775a:	89 d3                	mov    ebx,edx
c002775c:	09 c3                	or     ebx,eax
c002775e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027765:	75 27                	jne    c002778e <__adddf3+0x263>
c0027767:	85 db                	test   ebx,ebx
c0027769:	0f 84 fb 03 00 00    	je     c0027b6a <__adddf3+0x63f>
c002776f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027772:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027775:	0f 84 f5 03 00 00    	je     c0027b70 <__adddf3+0x645>
c002777b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002777e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027781:	85 c0                	test   eax,eax
c0027783:	0f 89 91 03 00 00    	jns    c0027b1a <__adddf3+0x5ef>
c0027789:	e9 85 03 00 00       	jmp    c0027b13 <__adddf3+0x5e8>
c002778e:	85 db                	test   ebx,ebx
c0027790:	0f 85 da 03 00 00    	jne    c0027b70 <__adddf3+0x645>
c0027796:	e9 cf 03 00 00       	jmp    c0027b6a <__adddf3+0x63f>
c002779b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002779e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277a4:	f7 d1                	not    ecx
c00277a6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277ac:	0f 84 70 03 00 00    	je     c0027b22 <__adddf3+0x5f7>
c00277b2:	d1 ea                	shr    edx,1
c00277b4:	89 c1                	mov    ecx,eax
c00277b6:	c1 e1 1f             	shl    ecx,0x1f
c00277b9:	09 ca                	or     edx,ecx
c00277bb:	d1 e8                	shr    eax,1
c00277bd:	e9 6f 03 00 00       	jmp    c0027b31 <__adddf3+0x606>
c00277c2:	85 c0                	test   eax,eax
c00277c4:	0f 89 67 03 00 00    	jns    c0027b31 <__adddf3+0x606>
c00277ca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277d0:	f7 d1                	not    ecx
c00277d2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277d8:	0f 84 44 03 00 00    	je     c0027b22 <__adddf3+0x5f7>
c00277de:	89 d1                	mov    ecx,edx
c00277e0:	d1 e9                	shr    ecx,1
c00277e2:	83 e2 01             	and    edx,0x1
c00277e5:	09 ca                	or     edx,ecx
c00277e7:	89 c1                	mov    ecx,eax
c00277e9:	c1 e1 1f             	shl    ecx,0x1f
c00277ec:	09 ca                	or     edx,ecx
c00277ee:	d1 e8                	shr    eax,1
c00277f0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277f5:	e9 37 03 00 00       	jmp    c0027b31 <__adddf3+0x606>
c00277fa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277fd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027803:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027806:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027809:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002780f:	29 de                	sub    esi,ebx
c0027811:	85 f6                	test   esi,esi
c0027813:	0f 8e bd 00 00 00    	jle    c00278d6 <__adddf3+0x3ab>
c0027819:	85 db                	test   ebx,ebx
c002781b:	75 17                	jne    c0027834 <__adddf3+0x309>
c002781d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027820:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027823:	0f 84 47 03 00 00    	je     c0027b70 <__adddf3+0x645>
c0027829:	4e                   	dec    esi
c002782a:	75 20                	jne    c002784c <__adddf3+0x321>
c002782c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002782f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027832:	eb 5b                	jmp    c002788f <__adddf3+0x364>
c0027834:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027837:	f7 d3                	not    ebx
c0027839:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002783f:	0f 84 2b 03 00 00    	je     c0027b70 <__adddf3+0x645>
c0027845:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002784c:	83 fe 1f             	cmp    esi,0x1f
c002784f:	7e 49                	jle    c002789a <__adddf3+0x36f>
c0027851:	83 fe 3f             	cmp    esi,0x3f
c0027854:	0f 8f 16 03 00 00    	jg     c0027b70 <__adddf3+0x645>
c002785a:	83 e6 1f             	and    esi,0x1f
c002785d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027860:	89 f1                	mov    ecx,esi
c0027862:	d3 ef                	shr    edi,cl
c0027864:	31 db                	xor    ebx,ebx
c0027866:	85 f6                	test   esi,esi
c0027868:	74 13                	je     c002787d <__adddf3+0x352>
c002786a:	b9 20 00 00 00       	mov    ecx,0x20
c002786f:	29 f1                	sub    ecx,esi
c0027871:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027874:	d3 e6                	shl    esi,cl
c0027876:	31 db                	xor    ebx,ebx
c0027878:	85 f6                	test   esi,esi
c002787a:	0f 95 c3             	setne  bl
c002787d:	31 c9                	xor    ecx,ecx
c002787f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027883:	0f 95 c1             	setne  cl
c0027886:	09 cf                	or     edi,ecx
c0027888:	09 fb                	or     ebx,edi
c002788a:	29 da                	sub    edx,ebx
c002788c:	83 d8 00             	sbb    eax,0x0
c002788f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027892:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027895:	e9 aa 01 00 00       	jmp    c0027a44 <__adddf3+0x519>
c002789a:	bf 20 00 00 00       	mov    edi,0x20
c002789f:	29 f7                	sub    edi,esi
c00278a1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278a4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278a7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278aa:	d3 e3                	shl    ebx,cl
c00278ac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278af:	89 f1                	mov    ecx,esi
c00278b1:	d3 ef                	shr    edi,cl
c00278b3:	09 fb                	or     ebx,edi
c00278b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278b8:	89 f1                	mov    ecx,esi
c00278ba:	d3 ef                	shr    edi,cl
c00278bc:	89 fe                	mov    esi,edi
c00278be:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278c1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278c4:	d3 e7                	shl    edi,cl
c00278c6:	85 ff                	test   edi,edi
c00278c8:	0f 95 c1             	setne  cl
c00278cb:	0f b6 c9             	movzx  ecx,cl
c00278ce:	09 cb                	or     ebx,ecx
c00278d0:	29 da                	sub    edx,ebx
c00278d2:	19 f0                	sbb    eax,esi
c00278d4:	eb b9                	jmp    c002788f <__adddf3+0x364>
c00278d6:	0f 84 cd 00 00 00    	je     c00279a9 <__adddf3+0x47e>
c00278dc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278df:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278e2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278e5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278e9:	75 1b                	jne    c0027906 <__adddf3+0x3db>
c00278eb:	89 d6                	mov    esi,edx
c00278ed:	09 c6                	or     esi,eax
c00278ef:	0f 84 7b 02 00 00    	je     c0027b70 <__adddf3+0x645>
c00278f5:	4b                   	dec    ebx
c00278f6:	75 24                	jne    c002791c <__adddf3+0x3f1>
c00278f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278fe:	29 d1                	sub    ecx,edx
c0027900:	19 c6                	sbb    esi,eax
c0027902:	89 ca                	mov    edx,ecx
c0027904:	eb 61                	jmp    c0027967 <__adddf3+0x43c>
c0027906:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027909:	f7 d6                	not    esi
c002790b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027911:	0f 84 59 02 00 00    	je     c0027b70 <__adddf3+0x645>
c0027917:	0d 00 00 00 80       	or     eax,0x80000000
c002791c:	83 fb 1f             	cmp    ebx,0x1f
c002791f:	7e 4d                	jle    c002796e <__adddf3+0x443>
c0027921:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027924:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027927:	83 fb 3f             	cmp    ebx,0x3f
c002792a:	0f 8f 40 02 00 00    	jg     c0027b70 <__adddf3+0x645>
c0027930:	83 e3 1f             	and    ebx,0x1f
c0027933:	89 d9                	mov    ecx,ebx
c0027935:	89 c7                	mov    edi,eax
c0027937:	d3 ef                	shr    edi,cl
c0027939:	31 db                	xor    ebx,ebx
c002793b:	85 c9                	test   ecx,ecx
c002793d:	74 12                	je     c0027951 <__adddf3+0x426>
c002793f:	be 20 00 00 00       	mov    esi,0x20
c0027944:	29 ce                	sub    esi,ecx
c0027946:	89 f1                	mov    ecx,esi
c0027948:	d3 e0                	shl    eax,cl
c002794a:	31 db                	xor    ebx,ebx
c002794c:	85 c0                	test   eax,eax
c002794e:	0f 95 c3             	setne  bl
c0027951:	31 c0                	xor    eax,eax
c0027953:	85 d2                	test   edx,edx
c0027955:	0f 95 c0             	setne  al
c0027958:	09 c7                	or     edi,eax
c002795a:	09 fb                	or     ebx,edi
c002795c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002795f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027962:	29 da                	sub    edx,ebx
c0027964:	83 de 00             	sbb    esi,0x0
c0027967:	89 f0                	mov    eax,esi
c0027969:	e9 d6 00 00 00       	jmp    c0027a44 <__adddf3+0x519>
c002796e:	be 20 00 00 00       	mov    esi,0x20
c0027973:	29 de                	sub    esi,ebx
c0027975:	89 c7                	mov    edi,eax
c0027977:	89 f1                	mov    ecx,esi
c0027979:	d3 e7                	shl    edi,cl
c002797b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002797e:	89 d7                	mov    edi,edx
c0027980:	88 d9                	mov    cl,bl
c0027982:	d3 ef                	shr    edi,cl
c0027984:	89 f9                	mov    ecx,edi
c0027986:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027989:	09 cf                	or     edi,ecx
c002798b:	88 d9                	mov    cl,bl
c002798d:	d3 e8                	shr    eax,cl
c002798f:	89 f1                	mov    ecx,esi
c0027991:	d3 e2                	shl    edx,cl
c0027993:	85 d2                	test   edx,edx
c0027995:	0f 95 c2             	setne  dl
c0027998:	0f b6 d2             	movzx  edx,dl
c002799b:	09 d7                	or     edi,edx
c002799d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279a3:	29 fa                	sub    edx,edi
c00279a5:	19 c6                	sbb    esi,eax
c00279a7:	eb be                	jmp    c0027967 <__adddf3+0x43c>
c00279a9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279ac:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279af:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279b5:	75 6a                	jne    c0027a21 <__adddf3+0x4f6>
c00279b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279bb:	75 58                	jne    c0027a15 <__adddf3+0x4ea>
c00279bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279c3:	89 d6                	mov    esi,edx
c00279c5:	09 c6                	or     esi,eax
c00279c7:	75 17                	jne    c00279e0 <__adddf3+0x4b5>
c00279c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279cf:	85 db                	test   ebx,ebx
c00279d1:	0f 85 99 01 00 00    	jne    c0027b70 <__adddf3+0x645>
c00279d7:	31 ff                	xor    edi,edi
c00279d9:	31 c9                	xor    ecx,ecx
c00279db:	e9 90 01 00 00       	jmp    c0027b70 <__adddf3+0x645>
c00279e0:	85 db                	test   ebx,ebx
c00279e2:	0f 84 88 01 00 00    	je     c0027b70 <__adddf3+0x645>
c00279e8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279eb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279ee:	85 c0                	test   eax,eax
c00279f0:	79 10                	jns    c0027a02 <__adddf3+0x4d7>
c00279f2:	31 c9                	xor    ecx,ecx
c00279f4:	f7 da                	neg    edx
c00279f6:	0f 95 c1             	setne  cl
c00279f9:	01 c8                	add    eax,ecx
c00279fb:	f7 d8                	neg    eax
c00279fd:	e9 2f 01 00 00       	jmp    c0027b31 <__adddf3+0x606>
c0027a02:	31 ff                	xor    edi,edi
c0027a04:	31 c9                	xor    ecx,ecx
c0027a06:	89 c3                	mov    ebx,eax
c0027a08:	09 d3                	or     ebx,edx
c0027a0a:	0f 84 60 01 00 00    	je     c0027b70 <__adddf3+0x645>
c0027a10:	e9 05 01 00 00       	jmp    c0027b1a <__adddf3+0x5ef>
c0027a15:	31 ff                	xor    edi,edi
c0027a17:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a1c:	e9 4f 01 00 00       	jmp    c0027b70 <__adddf3+0x645>
c0027a21:	89 c1                	mov    ecx,eax
c0027a23:	89 d0                	mov    eax,edx
c0027a25:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a28:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a2b:	89 ca                	mov    edx,ecx
c0027a2d:	85 c9                	test   ecx,ecx
c0027a2f:	79 2c                	jns    c0027a5d <__adddf3+0x532>
c0027a31:	31 c9                	xor    ecx,ecx
c0027a33:	f7 d8                	neg    eax
c0027a35:	0f 95 c1             	setne  cl
c0027a38:	01 ca                	add    edx,ecx
c0027a3a:	f7 da                	neg    edx
c0027a3c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a3f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a42:	eb 19                	jmp    c0027a5d <__adddf3+0x532>
c0027a44:	85 c0                	test   eax,eax
c0027a46:	0f 89 e5 00 00 00    	jns    c0027b31 <__adddf3+0x606>
c0027a4c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a51:	89 c1                	mov    ecx,eax
c0027a53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a56:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a59:	89 d0                	mov    eax,edx
c0027a5b:	89 ca                	mov    edx,ecx
c0027a5d:	85 d2                	test   edx,edx
c0027a5f:	74 59                	je     c0027aba <__adddf3+0x58f>
c0027a61:	0f bd da             	bsr    ebx,edx
c0027a64:	83 f3 1f             	xor    ebx,0x1f
c0027a67:	88 d9                	mov    cl,bl
c0027a69:	d3 e2                	shl    edx,cl
c0027a6b:	bf 20 00 00 00       	mov    edi,0x20
c0027a70:	89 f9                	mov    ecx,edi
c0027a72:	29 d9                	sub    ecx,ebx
c0027a74:	89 c6                	mov    esi,eax
c0027a76:	d3 ee                	shr    esi,cl
c0027a78:	09 d6                	or     esi,edx
c0027a7a:	88 d9                	mov    cl,bl
c0027a7c:	d3 e0                	shl    eax,cl
c0027a7e:	89 c2                	mov    edx,eax
c0027a80:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a83:	25 ff 07 00 00       	and    eax,0x7ff
c0027a88:	39 d8                	cmp    eax,ebx
c0027a8a:	7f 22                	jg     c0027aae <__adddf3+0x583>
c0027a8c:	29 c3                	sub    ebx,eax
c0027a8e:	43                   	inc    ebx
c0027a8f:	88 d9                	mov    cl,bl
c0027a91:	d3 ea                	shr    edx,cl
c0027a93:	29 df                	sub    edi,ebx
c0027a95:	89 f9                	mov    ecx,edi
c0027a97:	89 f0                	mov    eax,esi
c0027a99:	d3 e0                	shl    eax,cl
c0027a9b:	09 c2                	or     edx,eax
c0027a9d:	89 f0                	mov    eax,esi
c0027a9f:	88 d9                	mov    cl,bl
c0027aa1:	d3 e8                	shr    eax,cl
c0027aa3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aa6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027aac:	eb 6f                	jmp    c0027b1d <__adddf3+0x5f2>
c0027aae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ab1:	29 d8                	sub    eax,ebx
c0027ab3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ab6:	89 f0                	mov    eax,esi
c0027ab8:	eb 59                	jmp    c0027b13 <__adddf3+0x5e8>
c0027aba:	85 c0                	test   eax,eax
c0027abc:	74 6a                	je     c0027b28 <__adddf3+0x5fd>
c0027abe:	0f bd c8             	bsr    ecx,eax
c0027ac1:	83 f1 1f             	xor    ecx,0x1f
c0027ac4:	d3 e0                	shl    eax,cl
c0027ac6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ac9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027acf:	83 c1 20             	add    ecx,0x20
c0027ad2:	39 cb                	cmp    ebx,ecx
c0027ad4:	7f 35                	jg     c0027b0b <__adddf3+0x5e0>
c0027ad6:	29 d9                	sub    ecx,ebx
c0027ad8:	8d 71 01             	lea    esi,[ecx+0x1]
c0027adb:	83 fe 1f             	cmp    esi,0x1f
c0027ade:	7e 09                	jle    c0027ae9 <__adddf3+0x5be>
c0027ae0:	83 e9 1f             	sub    ecx,0x1f
c0027ae3:	d3 e8                	shr    eax,cl
c0027ae5:	89 c3                	mov    ebx,eax
c0027ae7:	eb 11                	jmp    c0027afa <__adddf3+0x5cf>
c0027ae9:	b9 20 00 00 00       	mov    ecx,0x20
c0027aee:	29 f1                	sub    ecx,esi
c0027af0:	89 c3                	mov    ebx,eax
c0027af2:	d3 e3                	shl    ebx,cl
c0027af4:	89 f1                	mov    ecx,esi
c0027af6:	d3 e8                	shr    eax,cl
c0027af8:	89 c2                	mov    edx,eax
c0027afa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027afd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b02:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b05:	89 d0                	mov    eax,edx
c0027b07:	89 da                	mov    edx,ebx
c0027b09:	eb 26                	jmp    c0027b31 <__adddf3+0x606>
c0027b0b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b0e:	29 cf                	sub    edi,ecx
c0027b10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b13:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b18:	eb 17                	jmp    c0027b31 <__adddf3+0x606>
c0027b1a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b1d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b20:	eb 0f                	jmp    c0027b31 <__adddf3+0x606>
c0027b22:	31 d2                	xor    edx,edx
c0027b24:	31 c0                	xor    eax,eax
c0027b26:	eb 09                	jmp    c0027b31 <__adddf3+0x606>
c0027b28:	89 c2                	mov    edx,eax
c0027b2a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b31:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b34:	c1 e1 14             	shl    ecx,0x14
c0027b37:	89 c3                	mov    ebx,eax
c0027b39:	c1 eb 0b             	shr    ebx,0xb
c0027b3c:	09 d9                	or     ecx,ebx
c0027b3e:	89 d3                	mov    ebx,edx
c0027b40:	c1 eb 0b             	shr    ebx,0xb
c0027b43:	c1 e0 15             	shl    eax,0x15
c0027b46:	09 d8                	or     eax,ebx
c0027b48:	89 c7                	mov    edi,eax
c0027b4a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b50:	0f 95 c0             	setne  al
c0027b53:	89 c6                	mov    esi,eax
c0027b55:	09 f3                	or     ebx,esi
c0027b57:	83 e3 01             	and    ebx,0x1
c0027b5a:	c1 ea 0a             	shr    edx,0xa
c0027b5d:	21 da                	and    edx,ebx
c0027b5f:	89 f8                	mov    eax,edi
c0027b61:	01 d0                	add    eax,edx
c0027b63:	83 d1 00             	adc    ecx,0x0
c0027b66:	89 c7                	mov    edi,eax
c0027b68:	eb 06                	jmp    c0027b70 <__adddf3+0x645>
c0027b6a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b6d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b70:	89 f8                	mov    eax,edi
c0027b72:	89 ca                	mov    edx,ecx
c0027b74:	83 c4 24             	add    esp,0x24
c0027b77:	5b                   	pop    ebx
c0027b78:	5e                   	pop    esi
c0027b79:	5f                   	pop    edi
c0027b7a:	5d                   	pop    ebp
c0027b7b:	c3                   	ret    

c0027b7c <__subdf3>:
c0027b7c:	55                   	push   ebp
c0027b7d:	89 e5                	mov    ebp,esp
c0027b7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b85:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b8b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b8e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b91:	5d                   	pop    ebp
c0027b92:	e9 94 f9 ff ff       	jmp    c002752b <__adddf3>

c0027b97 <__negdf2>:
c0027b97:	55                   	push   ebp
c0027b98:	89 e5                	mov    ebp,esp
c0027b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b9d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ba0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ba6:	5d                   	pop    ebp
c0027ba7:	c3                   	ret    

c0027ba8 <__muldf3>:
c0027ba8:	55                   	push   ebp
c0027ba9:	89 e5                	mov    ebp,esp
c0027bab:	57                   	push   edi
c0027bac:	56                   	push   esi
c0027bad:	53                   	push   ebx
c0027bae:	83 ec 24             	sub    esp,0x24
c0027bb1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bb7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bbd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bc0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bc3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bc6:	89 c8                	mov    eax,ecx
c0027bc8:	c1 f8 14             	sar    eax,0x14
c0027bcb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bce:	89 f8                	mov    eax,edi
c0027bd0:	89 fb                	mov    ebx,edi
c0027bd2:	c1 e3 0b             	shl    ebx,0xb
c0027bd5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027bd8:	c1 e1 0b             	shl    ecx,0xb
c0027bdb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027be1:	c1 e8 15             	shr    eax,0x15
c0027be4:	09 c1                	or     ecx,eax
c0027be6:	89 d6                	mov    esi,edx
c0027be8:	89 d0                	mov    eax,edx
c0027bea:	c1 f8 14             	sar    eax,0x14
c0027bed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027bf0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027bf3:	89 c3                	mov    ebx,eax
c0027bf5:	c1 e3 0b             	shl    ebx,0xb
c0027bf8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027bfb:	c1 e6 0b             	shl    esi,0xb
c0027bfe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c04:	c1 e8 15             	shr    eax,0x15
c0027c07:	09 c6                	or     esi,eax
c0027c09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c0c:	25 ff 07 00 00       	and    eax,0x7ff
c0027c11:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c14:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c17:	25 ff 07 00 00       	and    eax,0x7ff
c0027c1c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c22:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c25:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c2c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c2f:	40                   	inc    eax
c0027c30:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c35:	0f 85 8d 00 00 00    	jne    c0027cc8 <__muldf3+0x120>
c0027c3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c3e:	09 c8                	or     eax,ecx
c0027c40:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c44:	74 44                	je     c0027c8a <__muldf3+0xe2>
c0027c46:	85 c0                	test   eax,eax
c0027c48:	0f 85 31 02 00 00    	jne    c0027e7f <__muldf3+0x2d7>
c0027c4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c51:	40                   	inc    eax
c0027c52:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c57:	75 13                	jne    c0027c6c <__muldf3+0xc4>
c0027c59:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c5c:	09 f1                	or     ecx,esi
c0027c5e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c62:	74 22                	je     c0027c86 <__muldf3+0xde>
c0027c64:	85 c9                	test   ecx,ecx
c0027c66:	0f 85 0d 02 00 00    	jne    c0027e79 <__muldf3+0x2d1>
c0027c6c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c70:	0f 89 09 02 00 00    	jns    c0027e7f <__muldf3+0x2d7>
c0027c76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c79:	05 00 00 00 80       	add    eax,0x80000000
c0027c7e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c81:	e9 f9 01 00 00       	jmp    c0027e7f <__muldf3+0x2d7>
c0027c86:	85 c9                	test   ecx,ecx
c0027c88:	eb 2e                	jmp    c0027cb8 <__muldf3+0x110>
c0027c8a:	85 c0                	test   eax,eax
c0027c8c:	74 20                	je     c0027cae <__muldf3+0x106>
c0027c8e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c94:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c97:	c1 ef 1f             	shr    edi,0x1f
c0027c9a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c9d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ca0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ca3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ca6:	09 f9                	or     ecx,edi
c0027ca8:	78 1e                	js     c0027cc8 <__muldf3+0x120>
c0027caa:	89 c3                	mov    ebx,eax
c0027cac:	eb e0                	jmp    c0027c8e <__muldf3+0xe6>
c0027cae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cb1:	f7 d0                	not    eax
c0027cb3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cb8:	75 b2                	jne    c0027c6c <__muldf3+0xc4>
c0027cba:	31 ff                	xor    edi,edi
c0027cbc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027cc3:	e9 b7 01 00 00       	jmp    c0027e7f <__muldf3+0x2d7>
c0027cc8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ccb:	40                   	inc    eax
c0027ccc:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cd1:	75 57                	jne    c0027d2a <__muldf3+0x182>
c0027cd3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cd6:	09 f0                	or     eax,esi
c0027cd8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cdc:	74 23                	je     c0027d01 <__muldf3+0x159>
c0027cde:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ce2:	0f 89 91 01 00 00    	jns    c0027e79 <__muldf3+0x2d1>
c0027ce8:	85 c0                	test   eax,eax
c0027cea:	0f 85 89 01 00 00    	jne    c0027e79 <__muldf3+0x2d1>
c0027cf0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027cf3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027cf9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cfc:	e9 7e 01 00 00       	jmp    c0027e7f <__muldf3+0x2d7>
c0027d01:	85 c0                	test   eax,eax
c0027d03:	75 0c                	jne    c0027d11 <__muldf3+0x169>
c0027d05:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d09:	0f 89 6a 01 00 00    	jns    c0027e79 <__muldf3+0x2d1>
c0027d0f:	eb df                	jmp    c0027cf0 <__muldf3+0x148>
c0027d11:	01 f6                	add    esi,esi
c0027d13:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d16:	c1 ea 1f             	shr    edx,0x1f
c0027d19:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d1c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d1f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d22:	09 d6                	or     esi,edx
c0027d24:	78 04                	js     c0027d2a <__muldf3+0x182>
c0027d26:	89 c3                	mov    ebx,eax
c0027d28:	eb e7                	jmp    c0027d11 <__muldf3+0x169>
c0027d2a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d30:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d36:	89 c8                	mov    eax,ecx
c0027d38:	f7 e6                	mul    esi
c0027d3a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d3d:	89 c7                	mov    edi,eax
c0027d3f:	89 c8                	mov    eax,ecx
c0027d41:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d44:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d47:	89 c1                	mov    ecx,eax
c0027d49:	89 f0                	mov    eax,esi
c0027d4b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d4e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d51:	89 c6                	mov    esi,eax
c0027d53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d56:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d59:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d5c:	31 c0                	xor    eax,eax
c0027d5e:	01 f1                	add    ecx,esi
c0027d60:	0f 92 c0             	setb   al
c0027d63:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d66:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d69:	83 d6 00             	adc    esi,0x0
c0027d6c:	01 c7                	add    edi,eax
c0027d6e:	83 d6 00             	adc    esi,0x0
c0027d71:	01 ca                	add    edx,ecx
c0027d73:	0f 92 c1             	setb   cl
c0027d76:	0f b6 c9             	movzx  ecx,cl
c0027d79:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d7c:	83 d6 00             	adc    esi,0x0
c0027d7f:	01 cf                	add    edi,ecx
c0027d81:	83 d6 00             	adc    esi,0x0
c0027d84:	31 c9                	xor    ecx,ecx
c0027d86:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d89:	0f 95 c1             	setne  cl
c0027d8c:	09 cf                	or     edi,ecx
c0027d8e:	85 f6                	test   esi,esi
c0027d90:	78 0c                	js     c0027d9e <__muldf3+0x1f6>
c0027d92:	01 f6                	add    esi,esi
c0027d94:	89 f8                	mov    eax,edi
c0027d96:	c1 e8 1f             	shr    eax,0x1f
c0027d99:	09 c6                	or     esi,eax
c0027d9b:	01 ff                	add    edi,edi
c0027d9d:	4b                   	dec    ebx
c0027d9e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027da4:	0f 8f 85 00 00 00    	jg     c0027e2f <__muldf3+0x287>
c0027daa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027db0:	85 db                	test   ebx,ebx
c0027db2:	0f 8f 84 00 00 00    	jg     c0027e3c <__muldf3+0x294>
c0027db8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027dbb:	7c 79                	jl     c0027e36 <__muldf3+0x28e>
c0027dbd:	ba 01 00 00 00       	mov    edx,0x1
c0027dc2:	29 da                	sub    edx,ebx
c0027dc4:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dca:	83 fa 1f             	cmp    edx,0x1f
c0027dcd:	7e 30                	jle    c0027dff <__muldf3+0x257>
c0027dcf:	83 fa 20             	cmp    edx,0x20
c0027dd2:	75 0b                	jne    c0027ddf <__muldf3+0x237>
c0027dd4:	31 c0                	xor    eax,eax
c0027dd6:	85 ff                	test   edi,edi
c0027dd8:	0f 95 c0             	setne  al
c0027ddb:	89 c7                	mov    edi,eax
c0027ddd:	eb 1a                	jmp    c0027df9 <__muldf3+0x251>
c0027ddf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027de2:	89 f0                	mov    eax,esi
c0027de4:	d3 e0                	shl    eax,cl
c0027de6:	09 f8                	or     eax,edi
c0027de8:	0f 95 c0             	setne  al
c0027deb:	0f b6 c0             	movzx  eax,al
c0027dee:	89 c7                	mov    edi,eax
c0027df0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027df5:	29 d9                	sub    ecx,ebx
c0027df7:	d3 ee                	shr    esi,cl
c0027df9:	09 f7                	or     edi,esi
c0027dfb:	31 db                	xor    ebx,ebx
c0027dfd:	eb 3b                	jmp    c0027e3a <__muldf3+0x292>
c0027dff:	83 c3 1f             	add    ebx,0x1f
c0027e02:	89 f0                	mov    eax,esi
c0027e04:	88 d9                	mov    cl,bl
c0027e06:	d3 e0                	shl    eax,cl
c0027e08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e0b:	89 f8                	mov    eax,edi
c0027e0d:	88 d1                	mov    cl,dl
c0027e0f:	d3 e8                	shr    eax,cl
c0027e11:	89 c1                	mov    ecx,eax
c0027e13:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e16:	09 c8                	or     eax,ecx
c0027e18:	88 d9                	mov    cl,bl
c0027e1a:	d3 e7                	shl    edi,cl
c0027e1c:	31 db                	xor    ebx,ebx
c0027e1e:	85 ff                	test   edi,edi
c0027e20:	0f 95 c3             	setne  bl
c0027e23:	89 df                	mov    edi,ebx
c0027e25:	09 c7                	or     edi,eax
c0027e27:	88 d1                	mov    cl,dl
c0027e29:	d3 ee                	shr    esi,cl
c0027e2b:	31 db                	xor    ebx,ebx
c0027e2d:	eb 0d                	jmp    c0027e3c <__muldf3+0x294>
c0027e2f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e34:	eb 02                	jmp    c0027e38 <__muldf3+0x290>
c0027e36:	31 db                	xor    ebx,ebx
c0027e38:	31 ff                	xor    edi,edi
c0027e3a:	31 f6                	xor    esi,esi
c0027e3c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e3f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e42:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e47:	09 c3                	or     ebx,eax
c0027e49:	c1 e3 14             	shl    ebx,0x14
c0027e4c:	89 f0                	mov    eax,esi
c0027e4e:	c1 e8 0b             	shr    eax,0xb
c0027e51:	09 c3                	or     ebx,eax
c0027e53:	89 f8                	mov    eax,edi
c0027e55:	c1 e8 0b             	shr    eax,0xb
c0027e58:	c1 e6 15             	shl    esi,0x15
c0027e5b:	09 c6                	or     esi,eax
c0027e5d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e63:	0f 95 c1             	setne  cl
c0027e66:	09 c8                	or     eax,ecx
c0027e68:	83 e0 01             	and    eax,0x1
c0027e6b:	c1 ef 0a             	shr    edi,0xa
c0027e6e:	21 c7                	and    edi,eax
c0027e70:	01 f7                	add    edi,esi
c0027e72:	83 d3 00             	adc    ebx,0x0
c0027e75:	89 da                	mov    edx,ebx
c0027e77:	eb 03                	jmp    c0027e7c <__muldf3+0x2d4>
c0027e79:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e7c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e7f:	89 f8                	mov    eax,edi
c0027e81:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e84:	83 c4 24             	add    esp,0x24
c0027e87:	5b                   	pop    ebx
c0027e88:	5e                   	pop    esi
c0027e89:	5f                   	pop    edi
c0027e8a:	5d                   	pop    ebp
c0027e8b:	c3                   	ret    

c0027e8c <__divdf3>:
c0027e8c:	55                   	push   ebp
c0027e8d:	89 e5                	mov    ebp,esp
c0027e8f:	57                   	push   edi
c0027e90:	56                   	push   esi
c0027e91:	53                   	push   ebx
c0027e92:	83 ec 2c             	sub    esp,0x2c
c0027e95:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e98:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e9e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ea1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027ea4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ea7:	89 ce                	mov    esi,ecx
c0027ea9:	89 c8                	mov    eax,ecx
c0027eab:	c1 f8 14             	sar    eax,0x14
c0027eae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027eb1:	89 f8                	mov    eax,edi
c0027eb3:	89 fb                	mov    ebx,edi
c0027eb5:	c1 e3 0b             	shl    ebx,0xb
c0027eb8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ebb:	c1 e6 0b             	shl    esi,0xb
c0027ebe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ec4:	c1 e8 15             	shr    eax,0x15
c0027ec7:	09 c6                	or     esi,eax
c0027ec9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ecc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ecf:	89 c2                	mov    edx,eax
c0027ed1:	c1 fa 14             	sar    edx,0x14
c0027ed4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ed7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027eda:	89 de                	mov    esi,ebx
c0027edc:	c1 e6 0b             	shl    esi,0xb
c0027edf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027ee2:	c1 e0 0b             	shl    eax,0xb
c0027ee5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027eea:	c1 eb 15             	shr    ebx,0x15
c0027eed:	09 d8                	or     eax,ebx
c0027eef:	89 c2                	mov    edx,eax
c0027ef1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ef4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ef9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027efc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027eff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f05:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f08:	29 d8                	sub    eax,ebx
c0027f0a:	05 ff 03 00 00       	add    eax,0x3ff
c0027f0f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f12:	46                   	inc    esi
c0027f13:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f19:	0f 85 a5 00 00 00    	jne    c0027fc4 <__divdf3+0x138>
c0027f1f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f22:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f25:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f29:	74 2a                	je     c0027f55 <__divdf3+0xc9>
c0027f2b:	85 f6                	test   esi,esi
c0027f2d:	0f 85 cc 02 00 00    	jne    c00281ff <__divdf3+0x373>
c0027f33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f36:	40                   	inc    eax
c0027f37:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f3c:	75 26                	jne    c0027f64 <__divdf3+0xd8>
c0027f3e:	85 db                	test   ebx,ebx
c0027f40:	74 22                	je     c0027f64 <__divdf3+0xd8>
c0027f42:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f45:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f48:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f4b:	09 d0                	or     eax,edx
c0027f4d:	0f 85 ac 02 00 00    	jne    c00281ff <__divdf3+0x373>
c0027f53:	eb 63                	jmp    c0027fb8 <__divdf3+0x12c>
c0027f55:	85 f6                	test   esi,esi
c0027f57:	75 22                	jne    c0027f7b <__divdf3+0xef>
c0027f59:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f5c:	40                   	inc    eax
c0027f5d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f62:	74 36                	je     c0027f9a <__divdf3+0x10e>
c0027f64:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f68:	0f 89 91 02 00 00    	jns    c00281ff <__divdf3+0x373>
c0027f6e:	89 f8                	mov    eax,edi
c0027f70:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f76:	e9 80 02 00 00       	jmp    c00281fb <__divdf3+0x36f>
c0027f7b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f7e:	01 f6                	add    esi,esi
c0027f80:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f83:	c1 ef 1f             	shr    edi,0x1f
c0027f86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f89:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f8c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f8f:	09 f7                	or     edi,esi
c0027f91:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f94:	78 2e                	js     c0027fc4 <__divdf3+0x138>
c0027f96:	89 c8                	mov    eax,ecx
c0027f98:	eb e1                	jmp    c0027f7b <__divdf3+0xef>
c0027f9a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f9d:	09 d0                	or     eax,edx
c0027f9f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fa3:	74 0f                	je     c0027fb4 <__divdf3+0x128>
c0027fa5:	85 c0                	test   eax,eax
c0027fa7:	74 bb                	je     c0027f64 <__divdf3+0xd8>
c0027fa9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027faf:	e9 4b 02 00 00       	jmp    c00281ff <__divdf3+0x373>
c0027fb4:	85 c0                	test   eax,eax
c0027fb6:	75 ac                	jne    c0027f64 <__divdf3+0xd8>
c0027fb8:	31 ff                	xor    edi,edi
c0027fba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fbf:	e9 3b 02 00 00       	jmp    c00281ff <__divdf3+0x373>
c0027fc4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fc7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fd0:	75 6b                	jne    c002803d <__divdf3+0x1b1>
c0027fd2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fd5:	09 d6                	or     esi,edx
c0027fd7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fdb:	74 28                	je     c0028005 <__divdf3+0x179>
c0027fdd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fe0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fe3:	85 f6                	test   esi,esi
c0027fe5:	0f 85 14 02 00 00    	jne    c00281ff <__divdf3+0x373>
c0027feb:	31 ff                	xor    edi,edi
c0027fed:	31 c9                	xor    ecx,ecx
c0027fef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ff2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ff5:	0f 89 04 02 00 00    	jns    c00281ff <__divdf3+0x373>
c0027ffb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028000:	e9 fa 01 00 00       	jmp    c00281ff <__divdf3+0x373>
c0028005:	85 f6                	test   esi,esi
c0028007:	75 1b                	jne    c0028024 <__divdf3+0x198>
c0028009:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002800c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002800f:	25 00 00 00 80       	and    eax,0x80000000
c0028014:	31 c9                	xor    ecx,ecx
c0028016:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002801b:	89 cf                	mov    edi,ecx
c002801d:	89 c1                	mov    ecx,eax
c002801f:	e9 db 01 00 00       	jmp    c00281ff <__divdf3+0x373>
c0028024:	01 d2                	add    edx,edx
c0028026:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028029:	c1 eb 1f             	shr    ebx,0x1f
c002802c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002802f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028032:	8d 48 01             	lea    ecx,[eax+0x1]
c0028035:	09 da                	or     edx,ebx
c0028037:	78 04                	js     c002803d <__divdf3+0x1b1>
c0028039:	89 c8                	mov    eax,ecx
c002803b:	eb e7                	jmp    c0028024 <__divdf3+0x198>
c002803d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028040:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028046:	81 ca 00 00 00 80    	or     edx,0x80000000
c002804c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002804f:	39 d6                	cmp    esi,edx
c0028051:	77 0d                	ja     c0028060 <__divdf3+0x1d4>
c0028053:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028056:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028059:	72 1b                	jb     c0028076 <__divdf3+0x1ea>
c002805b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002805e:	75 16                	jne    c0028076 <__divdf3+0x1ea>
c0028060:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028063:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028066:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028069:	83 de 00             	sbb    esi,0x0
c002806c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002806f:	ba 01 00 00 00       	mov    edx,0x1
c0028074:	eb 02                	jmp    c0028078 <__divdf3+0x1ec>
c0028076:	31 d2                	xor    edx,edx
c0028078:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002807f:	31 ff                	xor    edi,edi
c0028081:	01 ff                	add    edi,edi
c0028083:	89 d1                	mov    ecx,edx
c0028085:	c1 e9 1f             	shr    ecx,0x1f
c0028088:	09 cf                	or     edi,ecx
c002808a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002808d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028090:	89 da                	mov    edx,ebx
c0028092:	89 f3                	mov    ebx,esi
c0028094:	8d 34 36             	lea    esi,[esi+esi*1]
c0028097:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002809a:	c1 e9 1f             	shr    ecx,0x1f
c002809d:	09 ce                	or     esi,ecx
c002809f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280a2:	01 c9                	add    ecx,ecx
c00280a4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280aa:	85 db                	test   ebx,ebx
c00280ac:	78 29                	js     c00280d7 <__divdf3+0x24b>
c00280ae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280b1:	72 07                	jb     c00280ba <__divdf3+0x22e>
c00280b3:	75 3c                	jne    c00280f1 <__divdf3+0x265>
c00280b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280b8:	77 37                	ja     c00280f1 <__divdf3+0x265>
c00280ba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280bd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280c0:	31 d2                	xor    edx,edx
c00280c2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280c5:	0f 97 c2             	seta   dl
c00280c8:	29 d6                	sub    esi,edx
c00280ca:	89 d9                	mov    ecx,ebx
c00280cc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280cf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280d2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280d5:	eb 17                	jmp    c00280ee <__divdf3+0x262>
c00280d7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280da:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280e0:	0f 97 c1             	seta   cl
c00280e3:	0f b6 c9             	movzx  ecx,cl
c00280e6:	29 ce                	sub    esi,ecx
c00280e8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280eb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280ee:	83 ca 01             	or     edx,0x1
c00280f1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280f4:	75 8b                	jne    c0028081 <__divdf3+0x1f5>
c00280f6:	c1 e7 09             	shl    edi,0x9
c00280f9:	89 d1                	mov    ecx,edx
c00280fb:	c1 e9 17             	shr    ecx,0x17
c00280fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028101:	09 f3                	or     ebx,esi
c0028103:	0f 95 c3             	setne  bl
c0028106:	0f b6 db             	movzx  ebx,bl
c0028109:	c1 e2 09             	shl    edx,0x9
c002810c:	09 d3                	or     ebx,edx
c002810e:	89 ca                	mov    edx,ecx
c0028110:	09 fa                	or     edx,edi
c0028112:	78 0c                	js     c0028120 <__divdf3+0x294>
c0028114:	01 d2                	add    edx,edx
c0028116:	89 d9                	mov    ecx,ebx
c0028118:	c1 e9 1f             	shr    ecx,0x1f
c002811b:	09 ca                	or     edx,ecx
c002811d:	01 db                	add    ebx,ebx
c002811f:	48                   	dec    eax
c0028120:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028125:	0f 8f 83 00 00 00    	jg     c00281ae <__divdf3+0x322>
c002812b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028131:	85 c0                	test   eax,eax
c0028133:	0f 8f 82 00 00 00    	jg     c00281bb <__divdf3+0x32f>
c0028139:	83 f8 cc             	cmp    eax,0xffffffcc
c002813c:	7c 77                	jl     c00281b5 <__divdf3+0x329>
c002813e:	be 01 00 00 00       	mov    esi,0x1
c0028143:	29 c6                	sub    esi,eax
c0028145:	81 ca 00 00 00 80    	or     edx,0x80000000
c002814b:	83 fe 1f             	cmp    esi,0x1f
c002814e:	7e 2f                	jle    c002817f <__divdf3+0x2f3>
c0028150:	83 fe 20             	cmp    esi,0x20
c0028153:	75 0a                	jne    c002815f <__divdf3+0x2d3>
c0028155:	85 db                	test   ebx,ebx
c0028157:	0f 95 c3             	setne  bl
c002815a:	0f b6 db             	movzx  ebx,bl
c002815d:	eb 1a                	jmp    c0028179 <__divdf3+0x2ed>
c002815f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028162:	89 d7                	mov    edi,edx
c0028164:	d3 e7                	shl    edi,cl
c0028166:	89 f9                	mov    ecx,edi
c0028168:	09 d9                	or     ecx,ebx
c002816a:	0f 95 c3             	setne  bl
c002816d:	0f b6 db             	movzx  ebx,bl
c0028170:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028175:	29 c1                	sub    ecx,eax
c0028177:	d3 ea                	shr    edx,cl
c0028179:	09 d3                	or     ebx,edx
c002817b:	31 c0                	xor    eax,eax
c002817d:	eb 3a                	jmp    c00281b9 <__divdf3+0x32d>
c002817f:	83 c0 1f             	add    eax,0x1f
c0028182:	89 d7                	mov    edi,edx
c0028184:	88 c1                	mov    cl,al
c0028186:	d3 e7                	shl    edi,cl
c0028188:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002818b:	89 df                	mov    edi,ebx
c002818d:	89 f1                	mov    ecx,esi
c002818f:	d3 ef                	shr    edi,cl
c0028191:	89 f9                	mov    ecx,edi
c0028193:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028196:	09 cf                	or     edi,ecx
c0028198:	88 c1                	mov    cl,al
c002819a:	d3 e3                	shl    ebx,cl
c002819c:	85 db                	test   ebx,ebx
c002819e:	0f 95 c3             	setne  bl
c00281a1:	0f b6 db             	movzx  ebx,bl
c00281a4:	09 fb                	or     ebx,edi
c00281a6:	89 f1                	mov    ecx,esi
c00281a8:	d3 ea                	shr    edx,cl
c00281aa:	31 c0                	xor    eax,eax
c00281ac:	eb 0d                	jmp    c00281bb <__divdf3+0x32f>
c00281ae:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281b3:	eb 02                	jmp    c00281b7 <__divdf3+0x32b>
c00281b5:	31 c0                	xor    eax,eax
c00281b7:	31 db                	xor    ebx,ebx
c00281b9:	31 d2                	xor    edx,edx
c00281bb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281be:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281c1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281c7:	09 c8                	or     eax,ecx
c00281c9:	c1 e0 14             	shl    eax,0x14
c00281cc:	89 d1                	mov    ecx,edx
c00281ce:	c1 e9 0b             	shr    ecx,0xb
c00281d1:	09 c8                	or     eax,ecx
c00281d3:	89 c6                	mov    esi,eax
c00281d5:	89 d9                	mov    ecx,ebx
c00281d7:	c1 e9 0b             	shr    ecx,0xb
c00281da:	c1 e2 15             	shl    edx,0x15
c00281dd:	09 ca                	or     edx,ecx
c00281df:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281e5:	0f 95 c0             	setne  al
c00281e8:	09 c1                	or     ecx,eax
c00281ea:	83 e1 01             	and    ecx,0x1
c00281ed:	c1 eb 0a             	shr    ebx,0xa
c00281f0:	21 cb                	and    ebx,ecx
c00281f2:	01 d3                	add    ebx,edx
c00281f4:	89 d8                	mov    eax,ebx
c00281f6:	83 d6 00             	adc    esi,0x0
c00281f9:	89 f2                	mov    edx,esi
c00281fb:	89 c7                	mov    edi,eax
c00281fd:	89 d1                	mov    ecx,edx
c00281ff:	89 f8                	mov    eax,edi
c0028201:	89 ca                	mov    edx,ecx
c0028203:	83 c4 2c             	add    esp,0x2c
c0028206:	5b                   	pop    ebx
c0028207:	5e                   	pop    esi
c0028208:	5f                   	pop    edi
c0028209:	5d                   	pop    ebp
c002820a:	c3                   	ret    

c002820b <__floatsidf>:
c002820b:	55                   	push   ebp
c002820c:	89 e5                	mov    ebp,esp
c002820e:	56                   	push   esi
c002820f:	53                   	push   ebx
c0028210:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028213:	85 db                	test   ebx,ebx
c0028215:	7e 15                	jle    c002822c <__floatsidf+0x21>
c0028217:	0f bd cb             	bsr    ecx,ebx
c002821a:	83 f1 1f             	xor    ecx,0x1f
c002821d:	d3 e3                	shl    ebx,cl
c002821f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028225:	b8 1e 04 00 00       	mov    eax,0x41e
c002822a:	eb 21                	jmp    c002824d <__floatsidf+0x42>
c002822c:	b8 00 00 00 00       	mov    eax,0x0
c0028231:	ba 00 00 00 00       	mov    edx,0x0
c0028236:	74 2a                	je     c0028262 <__floatsidf+0x57>
c0028238:	f7 db                	neg    ebx
c002823a:	0f bd cb             	bsr    ecx,ebx
c002823d:	83 f1 1f             	xor    ecx,0x1f
c0028240:	d3 e3                	shl    ebx,cl
c0028242:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028248:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002824d:	29 c8                	sub    eax,ecx
c002824f:	c1 e0 14             	shl    eax,0x14
c0028252:	89 c1                	mov    ecx,eax
c0028254:	89 de                	mov    esi,ebx
c0028256:	c1 ee 0b             	shr    esi,0xb
c0028259:	09 f1                	or     ecx,esi
c002825b:	89 ca                	mov    edx,ecx
c002825d:	c1 e3 15             	shl    ebx,0x15
c0028260:	89 d8                	mov    eax,ebx
c0028262:	5b                   	pop    ebx
c0028263:	5e                   	pop    esi
c0028264:	5d                   	pop    ebp
c0028265:	c3                   	ret    

c0028266 <__floatunsidf>:
c0028266:	55                   	push   ebp
c0028267:	89 e5                	mov    ebp,esp
c0028269:	56                   	push   esi
c002826a:	53                   	push   ebx
c002826b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002826e:	85 db                	test   ebx,ebx
c0028270:	74 2a                	je     c002829c <__floatunsidf+0x36>
c0028272:	0f bd cb             	bsr    ecx,ebx
c0028275:	83 f1 1f             	xor    ecx,0x1f
c0028278:	d3 e3                	shl    ebx,cl
c002827a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028280:	b8 1e 04 00 00       	mov    eax,0x41e
c0028285:	29 c8                	sub    eax,ecx
c0028287:	c1 e0 14             	shl    eax,0x14
c002828a:	89 c1                	mov    ecx,eax
c002828c:	89 de                	mov    esi,ebx
c002828e:	c1 ee 0b             	shr    esi,0xb
c0028291:	09 f1                	or     ecx,esi
c0028293:	89 ca                	mov    edx,ecx
c0028295:	c1 e3 15             	shl    ebx,0x15
c0028298:	89 d8                	mov    eax,ebx
c002829a:	eb 04                	jmp    c00282a0 <__floatunsidf+0x3a>
c002829c:	31 c0                	xor    eax,eax
c002829e:	31 d2                	xor    edx,edx
c00282a0:	5b                   	pop    ebx
c00282a1:	5e                   	pop    esi
c00282a2:	5d                   	pop    ebp
c00282a3:	c3                   	ret    

c00282a4 <__fixdfsi>:
c00282a4:	55                   	push   ebp
c00282a5:	89 e5                	mov    ebp,esp
c00282a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282aa:	89 d1                	mov    ecx,edx
c00282ac:	c1 e1 0b             	shl    ecx,0xb
c00282af:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282b8:	c1 e8 15             	shr    eax,0x15
c00282bb:	09 c1                	or     ecx,eax
c00282bd:	c1 fa 14             	sar    edx,0x14
c00282c0:	78 1f                	js     c00282e1 <__fixdfsi+0x3d>
c00282c2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282c8:	31 c0                	xor    eax,eax
c00282ca:	83 fa 1e             	cmp    edx,0x1e
c00282cd:	77 40                	ja     c002830f <__fixdfsi+0x6b>
c00282cf:	89 c8                	mov    eax,ecx
c00282d1:	0d 00 00 00 80       	or     eax,0x80000000
c00282d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282db:	29 d1                	sub    ecx,edx
c00282dd:	d3 e8                	shr    eax,cl
c00282df:	eb 2e                	jmp    c002830f <__fixdfsi+0x6b>
c00282e1:	31 c0                	xor    eax,eax
c00282e3:	81 c2 01 04 00 00    	add    edx,0x401
c00282e9:	78 24                	js     c002830f <__fixdfsi+0x6b>
c00282eb:	83 fa 1e             	cmp    edx,0x1e
c00282ee:	7e 09                	jle    c00282f9 <__fixdfsi+0x55>
c00282f0:	83 fa 1f             	cmp    edx,0x1f
c00282f3:	75 18                	jne    c002830d <__fixdfsi+0x69>
c00282f5:	85 c9                	test   ecx,ecx
c00282f7:	75 14                	jne    c002830d <__fixdfsi+0x69>
c00282f9:	89 c8                	mov    eax,ecx
c00282fb:	0d 00 00 00 80       	or     eax,0x80000000
c0028300:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028305:	29 d1                	sub    ecx,edx
c0028307:	d3 e8                	shr    eax,cl
c0028309:	f7 d8                	neg    eax
c002830b:	eb 02                	jmp    c002830f <__fixdfsi+0x6b>
c002830d:	31 c0                	xor    eax,eax
c002830f:	5d                   	pop    ebp
c0028310:	c3                   	ret    

c0028311 <__fixunsdfsi>:
c0028311:	55                   	push   ebp
c0028312:	89 e5                	mov    ebp,esp
c0028314:	53                   	push   ebx
c0028315:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028318:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002831b:	89 d3                	mov    ebx,edx
c002831d:	c1 fb 14             	sar    ebx,0x14
c0028320:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028326:	31 c0                	xor    eax,eax
c0028328:	83 fb 1f             	cmp    ebx,0x1f
c002832b:	77 1d                	ja     c002834a <__fixunsdfsi+0x39>
c002832d:	89 d0                	mov    eax,edx
c002832f:	c1 e0 0b             	shl    eax,0xb
c0028332:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028337:	c1 e9 15             	shr    ecx,0x15
c002833a:	09 c8                	or     eax,ecx
c002833c:	0d 00 00 00 80       	or     eax,0x80000000
c0028341:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028346:	29 d9                	sub    ecx,ebx
c0028348:	d3 e8                	shr    eax,cl
c002834a:	5b                   	pop    ebx
c002834b:	5d                   	pop    ebp
c002834c:	c3                   	ret    

c002834d <__cmpdf2>:
c002834d:	55                   	push   ebp
c002834e:	89 e5                	mov    ebp,esp
c0028350:	57                   	push   edi
c0028351:	56                   	push   esi
c0028352:	53                   	push   ebx
c0028353:	83 ec 0c             	sub    esp,0xc
c0028356:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028359:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002835c:	89 ca                	mov    edx,ecx
c002835e:	c1 ea 14             	shr    edx,0x14
c0028361:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028367:	89 cb                	mov    ebx,ecx
c0028369:	c1 fb 1f             	sar    ebx,0x1f
c002836c:	31 da                	xor    edx,ebx
c002836e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028371:	89 df                	mov    edi,ebx
c0028373:	c1 e7 0b             	shl    edi,0xb
c0028376:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028379:	c1 e1 0b             	shl    ecx,0xb
c002837c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028382:	c1 eb 15             	shr    ebx,0x15
c0028385:	09 d9                	or     ecx,ebx
c0028387:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002838a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002838d:	89 ce                	mov    esi,ecx
c002838f:	c1 ee 14             	shr    esi,0x14
c0028392:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028398:	89 cb                	mov    ebx,ecx
c002839a:	c1 fb 1f             	sar    ebx,0x1f
c002839d:	31 de                	xor    esi,ebx
c002839f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283a2:	89 df                	mov    edi,ebx
c00283a4:	c1 e7 0b             	shl    edi,0xb
c00283a7:	c1 e1 0b             	shl    ecx,0xb
c00283aa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283b0:	c1 eb 15             	shr    ebx,0x15
c00283b3:	09 d9                	or     ecx,ebx
c00283b5:	89 d3                	mov    ebx,edx
c00283b7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283bd:	43                   	inc    ebx
c00283be:	83 fb 01             	cmp    ebx,0x1
c00283c1:	77 08                	ja     c00283cb <__cmpdf2+0x7e>
c00283c3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283c6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283c9:	75 68                	jne    c0028433 <__cmpdf2+0xe6>
c00283cb:	89 f3                	mov    ebx,esi
c00283cd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283d3:	43                   	inc    ebx
c00283d4:	83 fb 01             	cmp    ebx,0x1
c00283d7:	77 06                	ja     c00283df <__cmpdf2+0x92>
c00283d9:	89 fb                	mov    ebx,edi
c00283db:	09 cb                	or     ebx,ecx
c00283dd:	75 54                	jne    c0028433 <__cmpdf2+0xe6>
c00283df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283e2:	09 f8                	or     eax,edi
c00283e4:	09 c8                	or     eax,ecx
c00283e6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283e9:	75 12                	jne    c00283fd <__cmpdf2+0xb0>
c00283eb:	8d 42 01             	lea    eax,[edx+0x1]
c00283ee:	83 f8 01             	cmp    eax,0x1
c00283f1:	77 0a                	ja     c00283fd <__cmpdf2+0xb0>
c00283f3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283f6:	31 c0                	xor    eax,eax
c00283f8:	83 fb 01             	cmp    ebx,0x1
c00283fb:	76 36                	jbe    c0028433 <__cmpdf2+0xe6>
c00283fd:	b8 01 00 00 00       	mov    eax,0x1
c0028402:	39 f2                	cmp    edx,esi
c0028404:	7f 2d                	jg     c0028433 <__cmpdf2+0xe6>
c0028406:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002840b:	7c 26                	jl     c0028433 <__cmpdf2+0xe6>
c002840d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028410:	77 07                	ja     c0028419 <__cmpdf2+0xcc>
c0028412:	72 16                	jb     c002842a <__cmpdf2+0xdd>
c0028414:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028417:	76 0a                	jbe    c0028423 <__cmpdf2+0xd6>
c0028419:	89 d0                	mov    eax,edx
c002841b:	c1 f8 1f             	sar    eax,0x1f
c002841e:	83 c8 01             	or     eax,0x1
c0028421:	eb 10                	jmp    c0028433 <__cmpdf2+0xe6>
c0028423:	b8 00 00 00 00       	mov    eax,0x0
c0028428:	73 09                	jae    c0028433 <__cmpdf2+0xe6>
c002842a:	89 d0                	mov    eax,edx
c002842c:	c1 f8 1f             	sar    eax,0x1f
c002842f:	83 e0 02             	and    eax,0x2
c0028432:	48                   	dec    eax
c0028433:	83 c4 0c             	add    esp,0xc
c0028436:	5b                   	pop    ebx
c0028437:	5e                   	pop    esi
c0028438:	5f                   	pop    edi
c0028439:	5d                   	pop    ebp
c002843a:	c3                   	ret    

c002843b <__eqdf2>:
c002843b:	55                   	push   ebp
c002843c:	89 e5                	mov    ebp,esp
c002843e:	50                   	push   eax
c002843f:	6a 01                	push   0x1
c0028441:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028444:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028447:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002844a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002844d:	e8 fb fe ff ff       	call   c002834d <__cmpdf2>
c0028452:	83 c4 18             	add    esp,0x18
c0028455:	c9                   	leave  
c0028456:	c3                   	ret    

c0028457 <__nedf2>:
c0028457:	eb e2                	jmp    c002843b <__eqdf2>

c0028459 <__gtdf2>:
c0028459:	55                   	push   ebp
c002845a:	89 e5                	mov    ebp,esp
c002845c:	50                   	push   eax
c002845d:	6a ff                	push   0xffffffff
c002845f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028462:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028465:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028468:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002846b:	e8 dd fe ff ff       	call   c002834d <__cmpdf2>
c0028470:	83 c4 18             	add    esp,0x18
c0028473:	c9                   	leave  
c0028474:	c3                   	ret    

c0028475 <__gedf2>:
c0028475:	eb e2                	jmp    c0028459 <__gtdf2>

c0028477 <__ltdf2>:
c0028477:	eb c2                	jmp    c002843b <__eqdf2>

c0028479 <__ledf2>:
c0028479:	eb c0                	jmp    c002843b <__eqdf2>

c002847b <__truncdfsf2>:
c002847b:	55                   	push   ebp
c002847c:	89 e5                	mov    ebp,esp
c002847e:	57                   	push   edi
c002847f:	56                   	push   esi
c0028480:	53                   	push   ebx
c0028481:	83 ec 0c             	sub    esp,0xc
c0028484:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028487:	89 d1                	mov    ecx,edx
c0028489:	c1 f9 14             	sar    ecx,0x14
c002848c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002848f:	89 df                	mov    edi,ebx
c0028491:	c1 e7 0b             	shl    edi,0xb
c0028494:	89 d0                	mov    eax,edx
c0028496:	c1 e0 0b             	shl    eax,0xb
c0028499:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002849e:	c1 eb 15             	shr    ebx,0x15
c00284a1:	09 d8                	or     eax,ebx
c00284a3:	89 cb                	mov    ebx,ecx
c00284a5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284ab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284b1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284b7:	0f 86 9e 00 00 00    	jbe    c002855b <__truncdfsf2+0xe0>
c00284bd:	85 db                	test   ebx,ebx
c00284bf:	75 0a                	jne    c00284cb <__truncdfsf2+0x50>
c00284c1:	c1 fa 17             	sar    edx,0x17
c00284c4:	30 d2                	xor    dl,dl
c00284c6:	e9 84 00 00 00       	jmp    c002854f <__truncdfsf2+0xd4>
c00284cb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284d1:	83 fe 83             	cmp    esi,0xffffff83
c00284d4:	7d 4b                	jge    c0028521 <__truncdfsf2+0xa6>
c00284d6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284db:	29 f1                	sub    ecx,esi
c00284dd:	83 f9 1f             	cmp    ecx,0x1f
c00284e0:	7f 6b                	jg     c002854d <__truncdfsf2+0xd2>
c00284e2:	0d 00 00 00 80       	or     eax,0x80000000
c00284e7:	89 c3                	mov    ebx,eax
c00284e9:	d3 eb                	shr    ebx,cl
c00284eb:	be 01 00 00 00       	mov    esi,0x1
c00284f0:	d3 e6                	shl    esi,cl
c00284f2:	4e                   	dec    esi
c00284f3:	21 f0                	and    eax,esi
c00284f5:	09 f8                	or     eax,edi
c00284f7:	0f 95 c0             	setne  al
c00284fa:	0f b6 c0             	movzx  eax,al
c00284fd:	09 c3                	or     ebx,eax
c00284ff:	89 d9                	mov    ecx,ebx
c0028501:	c1 e9 08             	shr    ecx,0x8
c0028504:	f6 c3 7f             	test   bl,0x7f
c0028507:	0f 95 c0             	setne  al
c002850a:	09 c8                	or     eax,ecx
c002850c:	83 e0 01             	and    eax,0x1
c002850f:	c1 eb 07             	shr    ebx,0x7
c0028512:	21 c3                	and    ebx,eax
c0028514:	81 e2 00 00 00 80    	and    edx,0x80000000
c002851a:	09 d1                	or     ecx,edx
c002851c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002851f:	eb 76                	jmp    c0028597 <__truncdfsf2+0x11c>
c0028521:	83 c6 80             	add    esi,0xffffff80
c0028524:	7e 1d                	jle    c0028543 <__truncdfsf2+0xc8>
c0028526:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002852c:	75 0b                	jne    c0028539 <__truncdfsf2+0xbe>
c002852e:	09 f8                	or     eax,edi
c0028530:	74 09                	je     c002853b <__truncdfsf2+0xc0>
c0028532:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028537:	eb 02                	jmp    c002853b <__truncdfsf2+0xc0>
c0028539:	31 c0                	xor    eax,eax
c002853b:	c1 fa 17             	sar    edx,0x17
c002853e:	80 ca ff             	or     dl,0xff
c0028541:	eb 0e                	jmp    c0028551 <__truncdfsf2+0xd6>
c0028543:	c1 fa 1f             	sar    edx,0x1f
c0028546:	c1 e2 08             	shl    edx,0x8
c0028549:	09 ca                	or     edx,ecx
c002854b:	eb 04                	jmp    c0028551 <__truncdfsf2+0xd6>
c002854d:	31 d2                	xor    edx,edx
c002854f:	31 c0                	xor    eax,eax
c0028551:	c1 e2 17             	shl    edx,0x17
c0028554:	c1 e8 08             	shr    eax,0x8
c0028557:	09 d0                	or     eax,edx
c0028559:	eb 3c                	jmp    c0028597 <__truncdfsf2+0x11c>
c002855b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028561:	89 ca                	mov    edx,ecx
c0028563:	c1 fa 0b             	sar    edx,0xb
c0028566:	c1 e2 08             	shl    edx,0x8
c0028569:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002856c:	31 db                	xor    ebx,ebx
c002856e:	85 ff                	test   edi,edi
c0028570:	0f 95 c3             	setne  bl
c0028573:	09 d8                	or     eax,ebx
c0028575:	89 c3                	mov    ebx,eax
c0028577:	c1 eb 08             	shr    ebx,0x8
c002857a:	a8 7f                	test   al,0x7f
c002857c:	0f 95 c2             	setne  dl
c002857f:	89 d6                	mov    esi,edx
c0028581:	09 de                	or     esi,ebx
c0028583:	83 e6 01             	and    esi,0x1
c0028586:	c1 e8 07             	shr    eax,0x7
c0028589:	21 f0                	and    eax,esi
c002858b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002858e:	09 ca                	or     edx,ecx
c0028590:	c1 e2 17             	shl    edx,0x17
c0028593:	09 da                	or     edx,ebx
c0028595:	01 d0                	add    eax,edx
c0028597:	83 c4 0c             	add    esp,0xc
c002859a:	5b                   	pop    ebx
c002859b:	5e                   	pop    esi
c002859c:	5f                   	pop    edi
c002859d:	5d                   	pop    ebp
c002859e:	c3                   	ret    

c002859f <__extendsfdf2>:
c002859f:	55                   	push   ebp
c00285a0:	89 e5                	mov    ebp,esp
c00285a2:	57                   	push   edi
c00285a3:	56                   	push   esi
c00285a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285a7:	89 d1                	mov    ecx,edx
c00285a9:	c1 f9 17             	sar    ecx,0x17
c00285ac:	c1 e2 08             	shl    edx,0x8
c00285af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285b5:	89 c8                	mov    eax,ecx
c00285b7:	80 e4 f8             	and    ah,0xf8
c00285ba:	8d 71 01             	lea    esi,[ecx+0x1]
c00285bd:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285c3:	75 27                	jne    c00285ec <__extendsfdf2+0x4d>
c00285c5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285cb:	75 18                	jne    c00285e5 <__extendsfdf2+0x46>
c00285cd:	85 d2                	test   edx,edx
c00285cf:	74 20                	je     c00285f1 <__extendsfdf2+0x52>
c00285d1:	41                   	inc    ecx
c00285d2:	01 d2                	add    edx,edx
c00285d4:	79 fb                	jns    c00285d1 <__extendsfdf2+0x32>
c00285d6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285dc:	29 c8                	sub    eax,ecx
c00285de:	05 81 03 00 00       	add    eax,0x381
c00285e3:	eb 0c                	jmp    c00285f1 <__extendsfdf2+0x52>
c00285e5:	05 00 07 00 00       	add    eax,0x700
c00285ea:	eb 05                	jmp    c00285f1 <__extendsfdf2+0x52>
c00285ec:	05 80 03 00 00       	add    eax,0x380
c00285f1:	c1 e0 14             	shl    eax,0x14
c00285f4:	89 c1                	mov    ecx,eax
c00285f6:	89 d0                	mov    eax,edx
c00285f8:	c1 e8 0b             	shr    eax,0xb
c00285fb:	09 c1                	or     ecx,eax
c00285fd:	c1 e2 15             	shl    edx,0x15
c0028600:	89 d0                	mov    eax,edx
c0028602:	89 ca                	mov    edx,ecx
c0028604:	5e                   	pop    esi
c0028605:	5f                   	pop    edi
c0028606:	5d                   	pop    ebp
c0028607:	c3                   	ret    
c0028608:	66 90                	xchg   ax,ax
c002860a:	66 90                	xchg   ax,ax
c002860c:	66 90                	xchg   ax,ax
c002860e:	66 90                	xchg   ax,ax

c0028610 <fabs>:
c0028610:	83 ec 0c             	sub    esp,0xc
c0028613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028617:	89 04 24             	mov    DWORD PTR [esp],eax
c002861a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002861e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028623:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028627:	dd 04 24             	fld    QWORD PTR [esp]
c002862a:	83 c4 0c             	add    esp,0xc
c002862d:	c3                   	ret    
c002862e:	66 90                	xchg   ax,ax

c0028630 <lrint>:
c0028630:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028634:	83 ec 04             	sub    esp,0x4
c0028637:	db 1c 24             	fistp  DWORD PTR [esp]
c002863a:	58                   	pop    eax
c002863b:	c3                   	ret    

c002863c <lrintf>:
c002863c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028640:	83 ec 04             	sub    esp,0x4
c0028643:	db 1c 24             	fistp  DWORD PTR [esp]
c0028646:	58                   	pop    eax
c0028647:	c3                   	ret    

Disassembly of section .init:

c0028648 <_init>:
c0028648:	55                   	push   ebp
c0028649:	89 e5                	mov    ebp,esp
c002864b:	e8 c8 7a fd ff       	call   c0000118 <frame_dummy>
c0028650:	e8 5b e0 ff ff       	call   c00266b0 <__do_global_ctors_aux>
c0028655:	5d                   	pop    ebp
c0028656:	c3                   	ret    

Disassembly of section .fini:

c0028657 <_fini>:
c0028657:	55                   	push   ebp
c0028658:	89 e5                	mov    ebp,esp
c002865a:	e8 49 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002865f:	5d                   	pop    ebp
c0028660:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028662 <Computer::~Computer()>:
c0028662:	83 ec 0c             	sub    esp,0xc
c0028665:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c002866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866e:	89 10                	mov    DWORD PTR [eax],edx
c0028670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028674:	83 ec 0c             	sub    esp,0xc
c0028677:	50                   	push   eax
c0028678:	e8 25 ba fe ff       	call   c00140a2 <Device::~Device()>
c002867d:	83 c4 10             	add    esp,0x10
c0028680:	90                   	nop
c0028681:	83 c4 0c             	add    esp,0xc
c0028684:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028686 <Computer::~Computer()>:
c0028686:	83 ec 0c             	sub    esp,0xc
c0028689:	83 ec 0c             	sub    esp,0xc
c002868c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028690:	e8 cd ff ff ff       	call   c0028662 <Computer::~Computer()>
c0028695:	83 c4 10             	add    esp,0x10
c0028698:	83 ec 08             	sub    esp,0x8
c002869b:	68 ec 01 00 00       	push   0x1ec
c00286a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286a4:	e8 1a a6 fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00286a9:	83 c4 10             	add    esp,0x10
c00286ac:	83 c4 0c             	add    esp,0xc
c00286af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286b0 <idleCommon()>:
c00286b0:	83 ec 0c             	sub    esp,0xc
c00286b3:	e8 04 56 ff ff       	call   c001dcbc <lockScheduler()>
c00286b8:	e8 75 59 ff ff       	call   c001e032 <schedule()>
c00286bd:	83 c4 0c             	add    esp,0xc
c00286c0:	e9 f9 55 ff ff       	jmp    c001dcbe <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286c6 <LinkedList<UnixFile>::~LinkedList()>:
c00286c6:	90                   	nop
c00286c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286c8 <LinkedList<UnixFile>::LinkedList()>:
c00286c8:	83 ec 0c             	sub    esp,0xc
c00286cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002870b:	83 ec 0c             	sub    esp,0xc
c002870e:	68 66 a4 02 c0       	push   0xc002a466
c0028713:	e8 8b a6 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0028718:	83 c4 10             	add    esp,0x10
c002871b:	90                   	nop
c002871c:	83 c4 0c             	add    esp,0xc
c002871f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028720:	83 ec 0c             	sub    esp,0xc
c0028723:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028728:	75 10                	jne    c002873a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002872a:	83 ec 0c             	sub    esp,0xc
c002872d:	68 80 a4 02 c0       	push   0xc002a480
c0028732:	e8 aa 1d ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028737:	83 c4 10             	add    esp,0x10
c002873a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028740:	85 c0                	test   eax,eax
c0028742:	74 34                	je     c0028778 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002874b:	85 c0                	test   eax,eax
c002874d:	74 29                	je     c0028778 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002874f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028753:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028756:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002875a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002875d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028761:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028765:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002876f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028776:	eb 65                	jmp    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 00                	mov    eax,DWORD PTR [eax]
c002877e:	85 c0                	test   eax,eax
c0028780:	75 4b                	jne    c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028786:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028789:	85 c0                	test   eax,eax
c002878b:	75 40                	jne    c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028795:	89 10                	mov    DWORD PTR [eax],edx
c0028797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002879f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b7:	85 c0                	test   eax,eax
c00287b9:	74 22                	je     c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287bb:	83 ec 0c             	sub    esp,0xc
c00287be:	68 a2 a4 02 c0       	push   0xc002a4a2
c00287c3:	e8 19 1d ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c00287c8:	83 c4 10             	add    esp,0x10
c00287cb:	eb 10                	jmp    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287cd:	83 ec 0c             	sub    esp,0xc
c00287d0:	68 ac a4 02 c0       	push   0xc002a4ac
c00287d5:	e8 07 1d ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c00287da:	83 c4 10             	add    esp,0x10
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287e4:	8d 50 01             	lea    edx,[eax+0x1]
c00287e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287ee:	90                   	nop
c00287ef:	83 c4 0c             	add    esp,0xc
c00287f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287f4 <LinkedList<UnixFile>::getFirstElement()>:
c00287f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287fc <LinkedList<UnixFile>::removeFirst()>:
c00287fc:	83 ec 0c             	sub    esp,0xc
c00287ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028803:	8b 00                	mov    eax,DWORD PTR [eax]
c0028805:	85 c0                	test   eax,eax
c0028807:	75 12                	jne    c002881b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028809:	83 ec 0c             	sub    esp,0xc
c002880c:	68 b8 a4 02 c0       	push   0xc002a4b8
c0028811:	e8 cb 1c ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028816:	83 c4 10             	add    esp,0x10
c0028819:	eb 7e                	jmp    c0028899 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028822:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028825:	85 c0                	test   eax,eax
c0028827:	74 10                	je     c0028839 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028829:	83 ec 0c             	sub    esp,0xc
c002882c:	68 03 a5 02 c0       	push   0xc002a503
c0028831:	e8 ab 1c ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028836:	83 c4 10             	add    esp,0x10
c0028839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883d:	8b 00                	mov    eax,DWORD PTR [eax]
c002883f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028842:	85 c0                	test   eax,eax
c0028844:	75 33                	jne    c0028879 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028862:	83 f8 01             	cmp    eax,0x1
c0028865:	74 21                	je     c0028888 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028867:	83 ec 0c             	sub    esp,0xc
c002886a:	68 dc a4 02 c0       	push   0xc002a4dc
c002886f:	e8 6d 1c ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028874:	83 c4 10             	add    esp,0x10
c0028877:	eb 0f                	jmp    c0028888 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887d:	8b 00                	mov    eax,DWORD PTR [eax]
c002887f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028886:	89 10                	mov    DWORD PTR [eax],edx
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002888f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028899:	83 c4 0c             	add    esp,0xc
c002889c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002889e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002889e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288a6 <DriverlessDevice::~DriverlessDevice()>:
c00288a6:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c00288ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288af:	89 10                	mov    DWORD PTR [eax],edx
c00288b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b5:	50                   	push   eax
c00288b6:	e8 e7 b7 fe ff       	call   c00140a2 <Device::~Device()>
c00288bb:	83 c4 04             	add    esp,0x4
c00288be:	90                   	nop
c00288bf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288c0 <DriverlessDevice::~DriverlessDevice()>:
c00288c0:	83 ec 0c             	sub    esp,0xc
c00288c3:	83 ec 0c             	sub    esp,0xc
c00288c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ca:	e8 d7 ff ff ff       	call   c00288a6 <DriverlessDevice::~DriverlessDevice()>
c00288cf:	83 c4 10             	add    esp,0x10
c00288d2:	83 ec 08             	sub    esp,0x8
c00288d5:	68 58 01 00 00       	push   0x158
c00288da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288de:	e8 e0 a3 fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00288e3:	83 c4 10             	add    esp,0x10
c00288e6:	83 c4 0c             	add    esp,0xc
c00288e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288ea <LinkedList<Device>::addElement(Device*)>:
c00288ea:	83 ec 0c             	sub    esp,0xc
c00288ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288f2:	75 10                	jne    c0028904 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288f4:	83 ec 0c             	sub    esp,0xc
c00288f7:	68 80 a4 02 c0       	push   0xc002a480
c00288fc:	e8 e0 1b ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028901:	83 c4 10             	add    esp,0x10
c0028904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028908:	8b 00                	mov    eax,DWORD PTR [eax]
c002890a:	85 c0                	test   eax,eax
c002890c:	74 3a                	je     c0028948 <LinkedList<Device>::addElement(Device*)+0x5e>
c002890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028912:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028915:	85 c0                	test   eax,eax
c0028917:	74 2f                	je     c0028948 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028920:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028924:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028932:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028939:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002893c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028946:	eb 68                	jmp    c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	8b 00                	mov    eax,DWORD PTR [eax]
c002894e:	85 c0                	test   eax,eax
c0028950:	75 4e                	jne    c00289a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028959:	85 c0                	test   eax,eax
c002895b:	75 43                	jne    c00289a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028961:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028965:	89 10                	mov    DWORD PTR [eax],edx
c0028967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002896f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028979:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002898a:	85 c0                	test   eax,eax
c002898c:	74 22                	je     c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002898e:	83 ec 0c             	sub    esp,0xc
c0028991:	68 a2 a4 02 c0       	push   0xc002a4a2
c0028996:	e8 46 1b ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c002899b:	83 c4 10             	add    esp,0x10
c002899e:	eb 10                	jmp    c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289a0:	83 ec 0c             	sub    esp,0xc
c00289a3:	68 ac a4 02 c0       	push   0xc002a4ac
c00289a8:	e8 34 1b ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c00289ad:	83 c4 10             	add    esp,0x10
c00289b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b7:	8d 50 01             	lea    edx,[eax+0x1]
c00289ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289c1:	90                   	nop
c00289c2:	83 c4 0c             	add    esp,0xc
c00289c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289c6 <LinkedList<Device>::LinkedList()>:
c00289c6:	83 ec 0c             	sub    esp,0xc
c00289c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a09:	83 ec 0c             	sub    esp,0xc
c0028a0c:	68 66 a4 02 c0       	push   0xc002a466
c0028a11:	e8 8d a3 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0028a16:	83 c4 10             	add    esp,0x10
c0028a19:	90                   	nop
c0028a1a:	83 c4 0c             	add    esp,0xc
c0028a1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a2c:	85 c0                	test   eax,eax
c0028a2e:	75 0e                	jne    c0028a3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a37:	85 c0                	test   eax,eax
c0028a39:	75 03                	jne    c0028a3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a3b:	b0 01                	mov    al,0x1
c0028a3d:	c3                   	ret    
c0028a3e:	b0 00                	mov    al,0x0
c0028a40:	90                   	nop
c0028a41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a42:	83 ec 0c             	sub    esp,0xc
c0028a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a4b:	85 c0                	test   eax,eax
c0028a4d:	75 15                	jne    c0028a64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a4f:	83 ec 0c             	sub    esp,0xc
c0028a52:	68 b8 a4 02 c0       	push   0xc002a4b8
c0028a57:	e8 85 1a ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028a5c:	83 c4 10             	add    esp,0x10
c0028a5f:	e9 88 00 00 00       	jmp    c0028aec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a6e:	85 c0                	test   eax,eax
c0028a70:	0f 95 c0             	setne  al
c0028a73:	84 c0                	test   al,al
c0028a75:	74 10                	je     c0028a87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a77:	83 ec 0c             	sub    esp,0xc
c0028a7a:	68 03 a5 02 c0       	push   0xc002a503
c0028a7f:	e8 5d 1a ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028a84:	83 c4 10             	add    esp,0x10
c0028a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a90:	85 c0                	test   eax,eax
c0028a92:	0f 94 c0             	sete   al
c0028a95:	84 c0                	test   al,al
c0028a97:	74 33                	je     c0028acc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab5:	83 f8 01             	cmp    eax,0x1
c0028ab8:	74 21                	je     c0028adb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aba:	83 ec 0c             	sub    esp,0xc
c0028abd:	68 dc a4 02 c0       	push   0xc002a4dc
c0028ac2:	e8 1a 1a ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	eb 0f                	jmp    c0028adb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad9:	89 10                	mov    DWORD PTR [eax],edx
c0028adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aec:	83 c4 0c             	add    esp,0xc
c0028aef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028af0:	83 ec 0c             	sub    esp,0xc
c0028af3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028af8:	75 10                	jne    c0028b0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028afa:	83 ec 0c             	sub    esp,0xc
c0028afd:	68 80 a4 02 c0       	push   0xc002a480
c0028b02:	e8 da 19 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028b07:	83 c4 10             	add    esp,0x10
c0028b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b10:	85 c0                	test   eax,eax
c0028b12:	74 34                	je     c0028b48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b1b:	85 c0                	test   eax,eax
c0028b1d:	74 29                	je     c0028b48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b46:	eb 65                	jmp    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b4e:	85 c0                	test   eax,eax
c0028b50:	75 4b                	jne    c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b59:	85 c0                	test   eax,eax
c0028b5b:	75 40                	jne    c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b65:	89 10                	mov    DWORD PTR [eax],edx
c0028b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b87:	85 c0                	test   eax,eax
c0028b89:	74 22                	je     c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b8b:	83 ec 0c             	sub    esp,0xc
c0028b8e:	68 a2 a4 02 c0       	push   0xc002a4a2
c0028b93:	e8 49 19 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028b98:	83 c4 10             	add    esp,0x10
c0028b9b:	eb 10                	jmp    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b9d:	83 ec 0c             	sub    esp,0xc
c0028ba0:	68 ac a4 02 c0       	push   0xc002a4ac
c0028ba5:	e8 37 19 ff ff       	call   c001a4e1 <Krnl::panic(char const*)>
c0028baa:	83 c4 10             	add    esp,0x10
c0028bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bbe:	90                   	nop
c0028bbf:	83 c4 0c             	add    esp,0xc
c0028bc2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bc4 <ACPI::~ACPI()>:
c0028bc4:	83 ec 0c             	sub    esp,0xc
c0028bc7:	ba fc b5 02 c0       	mov    edx,0xc002b5fc
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	89 10                	mov    DWORD PTR [eax],edx
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	83 ec 0c             	sub    esp,0xc
c0028bd9:	50                   	push   eax
c0028bda:	e8 c3 b4 fe ff       	call   c00140a2 <Device::~Device()>
c0028bdf:	83 c4 10             	add    esp,0x10
c0028be2:	90                   	nop
c0028be3:	83 c4 0c             	add    esp,0xc
c0028be6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028be8 <ACPI::~ACPI()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf2:	e8 cd ff ff ff       	call   c0028bc4 <ACPI::~ACPI()>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	83 ec 08             	sub    esp,0x8
c0028bfd:	68 68 12 00 00       	push   0x1268
c0028c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c06:	e8 b8 a0 fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028c0b:	83 c4 10             	add    esp,0x10
c0028c0e:	83 c4 0c             	add    esp,0xc
c0028c11:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c12 <CPU::~CPU()>:
c0028c12:	83 ec 0c             	sub    esp,0xc
c0028c15:	ba ec b9 02 c0       	mov    edx,0xc002b9ec
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	89 10                	mov    DWORD PTR [eax],edx
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	50                   	push   eax
c0028c28:	e8 75 b4 fe ff       	call   c00140a2 <Device::~Device()>
c0028c2d:	83 c4 10             	add    esp,0x10
c0028c30:	90                   	nop
c0028c31:	83 c4 0c             	add    esp,0xc
c0028c34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c36 <CPU::~CPU()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	83 ec 0c             	sub    esp,0xc
c0028c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c40:	e8 cd ff ff ff       	call   c0028c12 <CPU::~CPU()>
c0028c45:	83 c4 10             	add    esp,0x10
c0028c48:	83 ec 08             	sub    esp,0x8
c0028c4b:	68 98 11 00 00       	push   0x1198
c0028c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c54:	e8 6a a0 fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028c59:	83 c4 10             	add    esp,0x10
c0028c5c:	83 c4 0c             	add    esp,0xc
c0028c5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c60 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c60:	90                   	nop
c0028c61:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c62 <ThreadControlBlock::ThreadControlBlock()>:
c0028c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c7c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c87:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c92:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028c99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c9d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ca1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028ca9:	90                   	nop
c0028caa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cac <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cac:	83 ec 0c             	sub    esp,0xc
c0028caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cef:	83 ec 0c             	sub    esp,0xc
c0028cf2:	68 66 a4 02 c0       	push   0xc002a466
c0028cf7:	e8 a7 a0 fe ff       	call   c0012da3 <Dbg::kprintf(char const*, ...)>
c0028cfc:	83 c4 10             	add    esp,0x10
c0028cff:	90                   	nop
c0028d00:	83 c4 0c             	add    esp,0xc
c0028d03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d08:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d0b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d0c <Vm::_FPUState::_FPUState()>:
c0028d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d10:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d17:	90                   	nop
c0028d18:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d1a <PCI::~PCI()>:
c0028d1a:	83 ec 0c             	sub    esp,0xc
c0028d1d:	ba 98 ca 02 c0       	mov    edx,0xc002ca98
c0028d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d26:	89 10                	mov    DWORD PTR [eax],edx
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	83 ec 0c             	sub    esp,0xc
c0028d2f:	50                   	push   eax
c0028d30:	e8 45 ad fe ff       	call   c0013a7a <Bus::~Bus()>
c0028d35:	83 c4 10             	add    esp,0x10
c0028d38:	90                   	nop
c0028d39:	83 c4 0c             	add    esp,0xc
c0028d3c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d3e <PCI::~PCI()>:
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	83 ec 0c             	sub    esp,0xc
c0028d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d48:	e8 cd ff ff ff       	call   c0028d1a <PCI::~PCI()>
c0028d4d:	83 c4 10             	add    esp,0x10
c0028d50:	83 ec 08             	sub    esp,0x8
c0028d53:	68 58 01 00 00       	push   0x158
c0028d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5c:	e8 62 9f fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028d61:	83 c4 10             	add    esp,0x10
c0028d64:	83 c4 0c             	add    esp,0xc
c0028d67:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d68 <IDE::~IDE()>:
c0028d68:	83 ec 0c             	sub    esp,0xc
c0028d6b:	ba fc cc 02 c0       	mov    edx,0xc002ccfc
c0028d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d74:	89 10                	mov    DWORD PTR [eax],edx
c0028d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	50                   	push   eax
c0028d7e:	e8 0f b8 fe ff       	call   c0014592 <HardDiskController::~HardDiskController()>
c0028d83:	83 c4 10             	add    esp,0x10
c0028d86:	90                   	nop
c0028d87:	83 c4 0c             	add    esp,0xc
c0028d8a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d8c <IDE::~IDE()>:
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	83 ec 0c             	sub    esp,0xc
c0028d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d96:	e8 cd ff ff ff       	call   c0028d68 <IDE::~IDE()>
c0028d9b:	83 c4 10             	add    esp,0x10
c0028d9e:	83 ec 08             	sub    esp,0x8
c0028da1:	68 70 02 00 00       	push   0x270
c0028da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028daa:	e8 14 9f fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028daf:	83 c4 10             	add    esp,0x10
c0028db2:	83 c4 0c             	add    esp,0xc
c0028db5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028db6 <SATABus::~SATABus()>:
c0028db6:	83 ec 0c             	sub    esp,0xc
c0028db9:	ba dc cd 02 c0       	mov    edx,0xc002cddc
c0028dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc2:	89 10                	mov    DWORD PTR [eax],edx
c0028dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc8:	83 ec 0c             	sub    esp,0xc
c0028dcb:	50                   	push   eax
c0028dcc:	e8 c1 b7 fe ff       	call   c0014592 <HardDiskController::~HardDiskController()>
c0028dd1:	83 c4 10             	add    esp,0x10
c0028dd4:	90                   	nop
c0028dd5:	83 c4 0c             	add    esp,0xc
c0028dd8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dda <SATABus::~SATABus()>:
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	83 ec 0c             	sub    esp,0xc
c0028de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de4:	e8 cd ff ff ff       	call   c0028db6 <SATABus::~SATABus()>
c0028de9:	83 c4 10             	add    esp,0x10
c0028dec:	83 ec 08             	sub    esp,0x8
c0028def:	68 64 01 00 00       	push   0x164
c0028df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df8:	e8 c6 9e fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028dfd:	83 c4 10             	add    esp,0x10
c0028e00:	83 c4 0c             	add    esp,0xc
c0028e03:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e04 <ATA::~ATA()>:
c0028e04:	83 ec 0c             	sub    esp,0xc
c0028e07:	ba 28 ce 02 c0       	mov    edx,0xc002ce28
c0028e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e10:	89 10                	mov    DWORD PTR [eax],edx
c0028e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	50                   	push   eax
c0028e1a:	e8 65 b8 fe ff       	call   c0014684 <PhysicalDisk::~PhysicalDisk()>
c0028e1f:	83 c4 10             	add    esp,0x10
c0028e22:	90                   	nop
c0028e23:	83 c4 0c             	add    esp,0xc
c0028e26:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e28 <ATA::~ATA()>:
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	83 ec 0c             	sub    esp,0xc
c0028e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e32:	e8 cd ff ff ff       	call   c0028e04 <ATA::~ATA()>
c0028e37:	83 c4 10             	add    esp,0x10
c0028e3a:	83 ec 08             	sub    esp,0x8
c0028e3d:	68 7c 01 00 00       	push   0x17c
c0028e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e46:	e8 78 9e fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028e4b:	83 c4 10             	add    esp,0x10
c0028e4e:	83 c4 0c             	add    esp,0xc
c0028e51:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e52 <ATAPI::~ATAPI()>:
c0028e52:	83 ec 0c             	sub    esp,0xc
c0028e55:	ba 60 ce 02 c0       	mov    edx,0xc002ce60
c0028e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5e:	89 10                	mov    DWORD PTR [eax],edx
c0028e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	50                   	push   eax
c0028e68:	e8 17 b8 fe ff       	call   c0014684 <PhysicalDisk::~PhysicalDisk()>
c0028e6d:	83 c4 10             	add    esp,0x10
c0028e70:	90                   	nop
c0028e71:	83 c4 0c             	add    esp,0xc
c0028e74:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e76 <ATAPI::~ATAPI()>:
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	83 ec 0c             	sub    esp,0xc
c0028e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e80:	e8 cd ff ff ff       	call   c0028e52 <ATAPI::~ATAPI()>
c0028e85:	83 c4 10             	add    esp,0x10
c0028e88:	83 ec 08             	sub    esp,0x8
c0028e8b:	68 80 01 00 00       	push   0x180
c0028e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e94:	e8 2a 9e fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028e99:	83 c4 10             	add    esp,0x10
c0028e9c:	83 c4 0c             	add    esp,0xc
c0028e9f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ea0 <SATA::~SATA()>:
c0028ea0:	83 ec 0c             	sub    esp,0xc
c0028ea3:	ba 14 cf 02 c0       	mov    edx,0xc002cf14
c0028ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eac:	89 10                	mov    DWORD PTR [eax],edx
c0028eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	50                   	push   eax
c0028eb6:	e8 c9 b7 fe ff       	call   c0014684 <PhysicalDisk::~PhysicalDisk()>
c0028ebb:	83 c4 10             	add    esp,0x10
c0028ebe:	90                   	nop
c0028ebf:	83 c4 0c             	add    esp,0xc
c0028ec2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ec4 <SATA::~SATA()>:
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	83 ec 0c             	sub    esp,0xc
c0028eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ece:	e8 cd ff ff ff       	call   c0028ea0 <SATA::~SATA()>
c0028ed3:	83 c4 10             	add    esp,0x10
c0028ed6:	83 ec 08             	sub    esp,0x8
c0028ed9:	68 7c 01 00 00       	push   0x17c
c0028ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee2:	e8 dc 9d fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028ee7:	83 c4 10             	add    esp,0x10
c0028eea:	83 c4 0c             	add    esp,0xc
c0028eed:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028eee <SATAPI::~SATAPI()>:
c0028eee:	83 ec 0c             	sub    esp,0xc
c0028ef1:	ba f0 cf 02 c0       	mov    edx,0xc002cff0
c0028ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efa:	89 10                	mov    DWORD PTR [eax],edx
c0028efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	50                   	push   eax
c0028f04:	e8 7b b7 fe ff       	call   c0014684 <PhysicalDisk::~PhysicalDisk()>
c0028f09:	83 c4 10             	add    esp,0x10
c0028f0c:	90                   	nop
c0028f0d:	83 c4 0c             	add    esp,0xc
c0028f10:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f12 <SATAPI::~SATAPI()>:
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	83 ec 0c             	sub    esp,0xc
c0028f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1c:	e8 cd ff ff ff       	call   c0028eee <SATAPI::~SATAPI()>
c0028f21:	83 c4 10             	add    esp,0x10
c0028f24:	83 ec 08             	sub    esp,0x8
c0028f27:	68 80 01 00 00       	push   0x180
c0028f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f30:	e8 8e 9d fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028f35:	83 c4 10             	add    esp,0x10
c0028f38:	83 c4 0c             	add    esp,0xc
c0028f3b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f3c <AVX::~AVX()>:
c0028f3c:	83 ec 0c             	sub    esp,0xc
c0028f3f:	ba 30 d0 02 c0       	mov    edx,0xc002d030
c0028f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f48:	89 10                	mov    DWORD PTR [eax],edx
c0028f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4e:	83 ec 0c             	sub    esp,0xc
c0028f51:	50                   	push   eax
c0028f52:	e8 b1 b7 fe ff       	call   c0014708 <FPU::~FPU()>
c0028f57:	83 c4 10             	add    esp,0x10
c0028f5a:	90                   	nop
c0028f5b:	83 c4 0c             	add    esp,0xc
c0028f5e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f60 <AVX::~AVX()>:
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	83 ec 0c             	sub    esp,0xc
c0028f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6a:	e8 cd ff ff ff       	call   c0028f3c <AVX::~AVX()>
c0028f6f:	83 c4 10             	add    esp,0x10
c0028f72:	83 ec 08             	sub    esp,0x8
c0028f75:	68 58 01 00 00       	push   0x158
c0028f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7e:	e8 40 9d fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	83 c4 0c             	add    esp,0xc
c0028f89:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f8a <MMX::~MMX()>:
c0028f8a:	83 ec 0c             	sub    esp,0xc
c0028f8d:	ba 70 d0 02 c0       	mov    edx,0xc002d070
c0028f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f96:	89 10                	mov    DWORD PTR [eax],edx
c0028f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	50                   	push   eax
c0028fa0:	e8 63 b7 fe ff       	call   c0014708 <FPU::~FPU()>
c0028fa5:	83 c4 10             	add    esp,0x10
c0028fa8:	90                   	nop
c0028fa9:	83 c4 0c             	add    esp,0xc
c0028fac:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fae <MMX::~MMX()>:
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	83 ec 0c             	sub    esp,0xc
c0028fb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb8:	e8 cd ff ff ff       	call   c0028f8a <MMX::~MMX()>
c0028fbd:	83 c4 10             	add    esp,0x10
c0028fc0:	83 ec 08             	sub    esp,0x8
c0028fc3:	68 58 01 00 00       	push   0x158
c0028fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fcc:	e8 f2 9c fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0028fd1:	83 c4 10             	add    esp,0x10
c0028fd4:	83 c4 0c             	add    esp,0xc
c0028fd7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fd8 <SSE::~SSE()>:
c0028fd8:	83 ec 0c             	sub    esp,0xc
c0028fdb:	ba b0 d0 02 c0       	mov    edx,0xc002d0b0
c0028fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe4:	89 10                	mov    DWORD PTR [eax],edx
c0028fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fea:	83 ec 0c             	sub    esp,0xc
c0028fed:	50                   	push   eax
c0028fee:	e8 15 b7 fe ff       	call   c0014708 <FPU::~FPU()>
c0028ff3:	83 c4 10             	add    esp,0x10
c0028ff6:	90                   	nop
c0028ff7:	83 c4 0c             	add    esp,0xc
c0028ffa:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ffc <SSE::~SSE()>:
c0028ffc:	83 ec 0c             	sub    esp,0xc
c0028fff:	83 ec 0c             	sub    esp,0xc
c0029002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029006:	e8 cd ff ff ff       	call   c0028fd8 <SSE::~SSE()>
c002900b:	83 c4 10             	add    esp,0x10
c002900e:	83 ec 08             	sub    esp,0x8
c0029011:	68 58 01 00 00       	push   0x158
c0029016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901a:	e8 a4 9c fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c002901f:	83 c4 10             	add    esp,0x10
c0029022:	83 c4 0c             	add    esp,0xc
c0029025:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029026 <x87::~x87()>:
c0029026:	83 ec 0c             	sub    esp,0xc
c0029029:	ba f0 d0 02 c0       	mov    edx,0xc002d0f0
c002902e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029032:	89 10                	mov    DWORD PTR [eax],edx
c0029034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029038:	83 ec 0c             	sub    esp,0xc
c002903b:	50                   	push   eax
c002903c:	e8 c7 b6 fe ff       	call   c0014708 <FPU::~FPU()>
c0029041:	83 c4 10             	add    esp,0x10
c0029044:	90                   	nop
c0029045:	83 c4 0c             	add    esp,0xc
c0029048:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002904a <x87::~x87()>:
c002904a:	83 ec 0c             	sub    esp,0xc
c002904d:	83 ec 0c             	sub    esp,0xc
c0029050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029054:	e8 cd ff ff ff       	call   c0029026 <x87::~x87()>
c0029059:	83 c4 10             	add    esp,0x10
c002905c:	83 ec 08             	sub    esp,0x8
c002905f:	68 58 01 00 00       	push   0x158
c0029064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029068:	e8 56 9c fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c002906d:	83 c4 10             	add    esp,0x10
c0029070:	83 c4 0c             	add    esp,0xc
c0029073:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029074 <IOAPIC::~IOAPIC()>:
c0029074:	83 ec 0c             	sub    esp,0xc
c0029077:	ba 48 d2 02 c0       	mov    edx,0xc002d248
c002907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029080:	89 10                	mov    DWORD PTR [eax],edx
c0029082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029086:	83 ec 0c             	sub    esp,0xc
c0029089:	50                   	push   eax
c002908a:	e8 13 b0 fe ff       	call   c00140a2 <Device::~Device()>
c002908f:	83 c4 10             	add    esp,0x10
c0029092:	90                   	nop
c0029093:	83 c4 0c             	add    esp,0xc
c0029096:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029098 <IOAPIC::~IOAPIC()>:
c0029098:	83 ec 0c             	sub    esp,0xc
c002909b:	83 ec 0c             	sub    esp,0xc
c002909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a2:	e8 cd ff ff ff       	call   c0029074 <IOAPIC::~IOAPIC()>
c00290a7:	83 c4 10             	add    esp,0x10
c00290aa:	83 ec 08             	sub    esp,0x8
c00290ad:	68 68 01 00 00       	push   0x168
c00290b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b6:	e8 08 9c fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00290bb:	83 c4 10             	add    esp,0x10
c00290be:	83 c4 0c             	add    esp,0xc
c00290c1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290c2 <APIC::~APIC()>:
c00290c2:	83 ec 0c             	sub    esp,0xc
c00290c5:	ba 00 d2 02 c0       	mov    edx,0xc002d200
c00290ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ce:	89 10                	mov    DWORD PTR [eax],edx
c00290d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d4:	83 ec 0c             	sub    esp,0xc
c00290d7:	50                   	push   eax
c00290d8:	e8 f5 ba fe ff       	call   c0014bd2 <InterruptController::~InterruptController()>
c00290dd:	83 c4 10             	add    esp,0x10
c00290e0:	90                   	nop
c00290e1:	83 c4 0c             	add    esp,0xc
c00290e4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290e6 <APIC::~APIC()>:
c00290e6:	83 ec 0c             	sub    esp,0xc
c00290e9:	83 ec 0c             	sub    esp,0xc
c00290ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f0:	e8 cd ff ff ff       	call   c00290c2 <APIC::~APIC()>
c00290f5:	83 c4 10             	add    esp,0x10
c00290f8:	83 ec 08             	sub    esp,0x8
c00290fb:	68 58 21 00 00       	push   0x2158
c0029100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029104:	e8 ba 9b fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0029109:	83 c4 10             	add    esp,0x10
c002910c:	83 c4 0c             	add    esp,0xc
c002910f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029110 <PIC::~PIC()>:
c0029110:	83 ec 0c             	sub    esp,0xc
c0029113:	ba 98 d2 02 c0       	mov    edx,0xc002d298
c0029118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911c:	89 10                	mov    DWORD PTR [eax],edx
c002911e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029122:	83 ec 0c             	sub    esp,0xc
c0029125:	50                   	push   eax
c0029126:	e8 a7 ba fe ff       	call   c0014bd2 <InterruptController::~InterruptController()>
c002912b:	83 c4 10             	add    esp,0x10
c002912e:	90                   	nop
c002912f:	83 c4 0c             	add    esp,0xc
c0029132:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029134 <PIC::~PIC()>:
c0029134:	83 ec 0c             	sub    esp,0xc
c0029137:	83 ec 0c             	sub    esp,0xc
c002913a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002913e:	e8 cd ff ff ff       	call   c0029110 <PIC::~PIC()>
c0029143:	83 c4 10             	add    esp,0x10
c0029146:	83 ec 08             	sub    esp,0x8
c0029149:	68 58 21 00 00       	push   0x2158
c002914e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029152:	e8 6c 9b fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c0029157:	83 c4 10             	add    esp,0x10
c002915a:	83 c4 0c             	add    esp,0xc
c002915d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002915e <APICTimer::~APICTimer()>:
c002915e:	83 ec 0c             	sub    esp,0xc
c0029161:	ba ec d2 02 c0       	mov    edx,0xc002d2ec
c0029166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916a:	89 10                	mov    DWORD PTR [eax],edx
c002916c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029170:	83 ec 0c             	sub    esp,0xc
c0029173:	50                   	push   eax
c0029174:	e8 1f da fe ff       	call   c0016b98 <Timer::~Timer()>
c0029179:	83 c4 10             	add    esp,0x10
c002917c:	90                   	nop
c002917d:	83 c4 0c             	add    esp,0xc
c0029180:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029182 <APICTimer::~APICTimer()>:
c0029182:	83 ec 0c             	sub    esp,0xc
c0029185:	83 ec 0c             	sub    esp,0xc
c0029188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002918c:	e8 cd ff ff ff       	call   c002915e <APICTimer::~APICTimer()>
c0029191:	83 c4 10             	add    esp,0x10
c0029194:	83 ec 08             	sub    esp,0x8
c0029197:	68 60 01 00 00       	push   0x160
c002919c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a0:	e8 1e 9b fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00291a5:	83 c4 10             	add    esp,0x10
c00291a8:	83 c4 0c             	add    esp,0xc
c00291ab:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291ac <PIT::~PIT()>:
c00291ac:	83 ec 0c             	sub    esp,0xc
c00291af:	ba 3c d3 02 c0       	mov    edx,0xc002d33c
c00291b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b8:	89 10                	mov    DWORD PTR [eax],edx
c00291ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291be:	83 ec 0c             	sub    esp,0xc
c00291c1:	50                   	push   eax
c00291c2:	e8 d1 d9 fe ff       	call   c0016b98 <Timer::~Timer()>
c00291c7:	83 c4 10             	add    esp,0x10
c00291ca:	90                   	nop
c00291cb:	83 c4 0c             	add    esp,0xc
c00291ce:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291d0 <PIT::~PIT()>:
c00291d0:	83 ec 0c             	sub    esp,0xc
c00291d3:	83 ec 0c             	sub    esp,0xc
c00291d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291da:	e8 cd ff ff ff       	call   c00291ac <PIT::~PIT()>
c00291df:	83 c4 10             	add    esp,0x10
c00291e2:	83 ec 08             	sub    esp,0x8
c00291e5:	68 5c 01 00 00       	push   0x15c
c00291ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ee:	e8 d0 9a fe ff       	call   c0012cc3 <operator delete(void*, unsigned long)>
c00291f3:	83 c4 10             	add    esp,0x10
c00291f6:	83 c4 0c             	add    esp,0xc
c00291f9:	c3                   	ret    
