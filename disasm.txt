
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 25 fc 00 00       	call   c000fc45 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 8e 02 00       	call   c0028ed8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 6e 9b 02 c0       	mov    ebx,0xc0029b6e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 7c 9b 02 c0    	cmp    ebx,0xc0029b7c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 e4 02 c0       	mov    eax,0xc002e458
c0000049:	3d 58 e4 02 c0       	cmp    eax,0xc002e458
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 e4 02 c0       	push   0xc002e458
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 e4 02 c0       	mov    eax,0xc002e458
c0000075:	2d 58 e4 02 c0       	sub    eax,0xc002e458
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 e4 02 c0       	push   0xc002e458
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 84 9b 02 c0       	mov    ebx,0xc0029b84
c00000bb:	81 eb 80 9b 02 c0    	sub    ebx,0xc0029b80
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 80 9b 02 c0       	mov    esi,0xc0029b80
c00000ca:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 e4 02 c0       	push   0xc002e458
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 ea 02 c0       	push   0xc002ea90
c000012c:	68 58 e4 02 c0       	push   0xc002e458
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 f3 d9 01 00       	call   c001dd96 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 9a 28 01 00       	call   c0012c55 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 d1 d9 01 00       	call   c001dd96 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 79 de 01 00       	call   c001e25d <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 d7 e4 01 00       	call   c001e8c4 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 ee 02 c0 	lgdtd  ds:0xc002eed0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 94 45 01 00       	call   c0014b75 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    

c0000662 <memcpy>:
c0000662:	e8 07 df 00 00       	call   c000e56e <__not_memcpy>
c0000667:	90                   	nop

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 a8 ea 02 c0       	mov    ds:0xc002eaa8,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 a8 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa8,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d a8 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002eaa8
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 a0 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd6460],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 a0 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6460],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 a0 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd6460],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 a0 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6460],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 a0 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6460],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <realmemcpy>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000db6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000dba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000dbe:	89 c7                	mov    edi,eax
c0000dc0:	fc                   	cld    
c0000dc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000dc3:	5e                   	pop    esi
c0000dc4:	5f                   	pop    edi
c0000dc5:	c3                   	ret    

c0000dc6 <dlfree>:
c0000dc6:	57                   	push   edi
c0000dc7:	56                   	push   esi
c0000dc8:	53                   	push   ebx
c0000dc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcd:	85 db                	test   ebx,ebx
c0000dcf:	0f 84 e2 00 00 00    	je     c0000eb7 <dlfree+0xf1>
c0000dd5:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd8:	8b 0d c0 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002eac0
c0000dde:	89 f0                	mov    eax,esi
c0000de0:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de3:	83 e0 fc             	and    eax,0xfffffffc
c0000de6:	39 c1                	cmp    ecx,eax
c0000de8:	72 24                	jb     c0000e0e <dlfree+0x48>
c0000dea:	83 c9 03             	or     ecx,0x3
c0000ded:	c1 e8 03             	shr    eax,0x3
c0000df0:	89 0d c0 ea 02 c0    	mov    DWORD PTR ds:0xc002eac0,ecx
c0000df6:	83 e8 02             	sub    eax,0x2
c0000df9:	8b 0c 85 c4 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd153c]
c0000e00:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e02:	89 14 85 c4 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd153c],edx
c0000e09:	e9 a9 00 00 00       	jmp    c0000eb7 <dlfree+0xf1>
c0000e0e:	83 e6 02             	and    esi,0x2
c0000e11:	0f 85 a0 00 00 00    	jne    c0000eb7 <dlfree+0xf1>
c0000e17:	83 c9 01             	or     ecx,0x1
c0000e1a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1d:	89 0d c0 ea 02 c0    	mov    DWORD PTR ds:0xc002eac0,ecx
c0000e23:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e26:	83 e1 fc             	and    ecx,0xfffffffc
c0000e29:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2d:	75 13                	jne    c0000e42 <dlfree+0x7c>
c0000e2f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e32:	29 da                	sub    edx,ebx
c0000e34:	01 d8                	add    eax,ebx
c0000e36:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e39:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e42:	39 35 ec ea 02 c0    	cmp    DWORD PTR ds:0xc002eaec,esi
c0000e48:	74 40                	je     c0000e8a <dlfree+0xc4>
c0000e4a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e51:	80 e3 01             	and    bl,0x1
c0000e54:	75 0e                	jne    c0000e64 <dlfree+0x9e>
c0000e56:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e59:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5c:	01 c8                	add    eax,ecx
c0000e5e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e61:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e64:	8b 0d fc ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002eafc
c0000e6a:	c7 42 0c f4 ea 02 c0 	mov    DWORD PTR [edx+0xc],0xc002eaf4
c0000e71:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e74:	89 15 fc ea 02 c0    	mov    DWORD PTR ds:0xc002eafc,edx
c0000e7a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7d:	89 c1                	mov    ecx,eax
c0000e7f:	83 c9 01             	or     ecx,0x1
c0000e82:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e85:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e88:	eb 10                	jmp    c0000e9a <dlfree+0xd4>
c0000e8a:	01 c8                	add    eax,ecx
c0000e8c:	89 c1                	mov    ecx,eax
c0000e8e:	83 c9 01             	or     ecx,0x1
c0000e91:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e94:	89 15 ec ea 02 c0    	mov    DWORD PTR ds:0xc002eaec,edx
c0000e9a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9f:	76 16                	jbe    c0000eb7 <dlfree+0xf1>
c0000ea1:	f6 05 c0 ea 02 c0 02 	test   BYTE PTR ds:0xc002eac0,0x2
c0000ea8:	74 0d                	je     c0000eb7 <dlfree+0xf1>
c0000eaa:	5b                   	pop    ebx
c0000eab:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c0000eb0:	5e                   	pop    esi
c0000eb1:	5f                   	pop    edi
c0000eb2:	e9 12 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000eb7:	5b                   	pop    ebx
c0000eb8:	5e                   	pop    esi
c0000eb9:	5f                   	pop    edi
c0000eba:	c3                   	ret    

c0000ebb <sYSMALLOc>:
c0000ebb:	55                   	push   ebp
c0000ebc:	57                   	push   edi
c0000ebd:	56                   	push   esi
c0000ebe:	53                   	push   ebx
c0000ebf:	89 d3                	mov    ebx,edx
c0000ec1:	83 ec 2c             	sub    esp,0x2c
c0000ec4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec8:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ece:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ed1:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed8:	74 1f                	je     c0000ef9 <sYSMALLOc+0x3e>
c0000eda:	89 d8                	mov    eax,ebx
c0000edc:	e8 e8 fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ee1:	83 ec 0c             	sub    esp,0xc
c0000ee4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee8:	83 e8 07             	sub    eax,0x7
c0000eeb:	50                   	push   eax
c0000eec:	e8 30 02 00 00       	call   c0001121 <dlmalloc>
c0000ef1:	83 c4 10             	add    esp,0x10
c0000ef4:	e9 20 02 00 00       	jmp    c0001119 <sYSMALLOc+0x25e>
c0000ef9:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efc:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f02:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f05:	83 e0 fc             	and    eax,0xfffffffc
c0000f08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f10:	83 c0 10             	add    eax,0x10
c0000f13:	01 c1                	add    ecx,eax
c0000f15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f19:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f20:	74 04                	je     c0000f26 <sYSMALLOc+0x6b>
c0000f22:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f26:	f7 da                	neg    edx
c0000f28:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f30:	21 d1                	and    ecx,edx
c0000f32:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f36:	7f 07                	jg     c0000f3f <sYSMALLOc+0x84>
c0000f38:	31 c0                	xor    eax,eax
c0000f3a:	e9 da 01 00 00       	jmp    c0001119 <sYSMALLOc+0x25e>
c0000f3f:	83 ec 0c             	sub    esp,0xc
c0000f42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f46:	e8 d1 e7 00 00       	call   c000f71c <sbrk>
c0000f4b:	83 c4 10             	add    esp,0x10
c0000f4e:	89 c6                	mov    esi,eax
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 e3                	je     c0000f38 <sYSMALLOc+0x7d>
c0000f55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f59:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f60:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f66:	39 f1                	cmp    ecx,esi
c0000f68:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6e:	75 13                	jne    c0000f83 <sYSMALLOc+0xc8>
c0000f70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f74:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f78:	83 c8 01             	or     eax,0x1
c0000f7b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7e:	e9 3e 01 00 00       	jmp    c00010c1 <sYSMALLOc+0x206>
c0000f83:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f89:	88 d0                	mov    al,dl
c0000f8b:	83 e0 01             	and    eax,0x1
c0000f8e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f93:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f97:	0f 95 c0             	setne  al
c0000f9a:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9e:	39 f1                	cmp    ecx,esi
c0000fa0:	76 12                	jbe    c0000fb4 <sYSMALLOc+0xf9>
c0000fa2:	84 c0                	test   al,al
c0000fa4:	74 0e                	je     c0000fb4 <sYSMALLOc+0xf9>
c0000fa6:	83 e2 fe             	and    edx,0xfffffffe
c0000fa9:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000faf:	e9 83 00 00 00       	jmp    c0001037 <sYSMALLOc+0x17c>
c0000fb4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb9:	74 7c                	je     c0001037 <sYSMALLOc+0x17c>
c0000fbb:	84 c0                	test   al,al
c0000fbd:	74 0c                	je     c0000fcb <sYSMALLOc+0x110>
c0000fbf:	89 f0                	mov    eax,esi
c0000fc1:	29 c8                	sub    eax,ecx
c0000fc3:	01 e8                	add    eax,ebp
c0000fc5:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fcb:	89 f2                	mov    edx,esi
c0000fcd:	83 e2 07             	and    edx,0x7
c0000fd0:	74 0c                	je     c0000fde <sYSMALLOc+0x123>
c0000fd2:	b8 08 00 00 00       	mov    eax,0x8
c0000fd7:	29 d0                	sub    eax,edx
c0000fd9:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fdc:	eb 04                	jmp    c0000fe2 <sYSMALLOc+0x127>
c0000fde:	89 f5                	mov    ebp,esi
c0000fe0:	31 c0                	xor    eax,eax
c0000fe2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fee:	01 c1                	add    ecx,eax
c0000ff0:	83 ec 0c             	sub    esp,0xc
c0000ff3:	01 f1                	add    ecx,esi
c0000ff5:	01 ca                	add    edx,ecx
c0000ff7:	29 c8                	sub    eax,ecx
c0000ff9:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffd:	01 c2                	add    edx,eax
c0000fff:	52                   	push   edx
c0001000:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001004:	e8 13 e7 00 00       	call   c000f71c <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	83 f8 ff             	cmp    eax,0xffffffff
c000100f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001013:	75 0f                	jne    c0001024 <sYSMALLOc+0x169>
c0001015:	83 ec 0c             	sub    esp,0xc
c0001018:	6a 00                	push   0x0
c000101a:	e8 fd e6 00 00       	call   c000f71c <sbrk>
c000101f:	83 c4 10             	add    esp,0x10
c0001022:	eb 30                	jmp    c0001054 <sYSMALLOc+0x199>
c0001024:	39 c6                	cmp    esi,eax
c0001026:	76 33                	jbe    c000105b <sYSMALLOc+0x1a0>
c0001028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001033:	01 f0                	add    eax,esi
c0001035:	eb 1d                	jmp    c0001054 <sYSMALLOc+0x199>
c0001037:	83 ec 0c             	sub    esp,0xc
c000103a:	89 f5                	mov    ebp,esi
c000103c:	6a 00                	push   0x0
c000103e:	e8 d9 e6 00 00       	call   c000f71c <sbrk>
c0001043:	89 c2                	mov    edx,eax
c0001045:	29 f2                	sub    edx,esi
c0001047:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000104b:	83 c4 10             	add    esp,0x10
c000104e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001054:	31 d2                	xor    edx,edx
c0001056:	83 f8 ff             	cmp    eax,0xffffffff
c0001059:	74 66                	je     c00010c1 <sYSMALLOc+0x206>
c000105b:	29 e8                	sub    eax,ebp
c000105d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001060:	01 d0                	add    eax,edx
c0001062:	83 c8 01             	or     eax,0x1
c0001065:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001068:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001073:	74 4c                	je     c00010c1 <sYSMALLOc+0x206>
c0001075:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001079:	83 e8 0c             	sub    eax,0xc
c000107c:	83 e0 f8             	and    eax,0xfffffff8
c000107f:	89 c2                	mov    edx,eax
c0001081:	83 ca 01             	or     edx,0x1
c0001084:	83 f8 0f             	cmp    eax,0xf
c0001087:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000108a:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001092:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c000109a:	76 25                	jbe    c00010c1 <sYSMALLOc+0x206>
c000109c:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a2:	83 ec 0c             	sub    esp,0xc
c00010a5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010af:	83 c7 08             	add    edi,0x8
c00010b2:	57                   	push   edi
c00010b3:	e8 0e fd ff ff       	call   c0000dc6 <dlfree>
c00010b8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010be:	83 c4 10             	add    esp,0x10
c00010c1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cd:	73 06                	jae    c00010d5 <sYSMALLOc+0x21a>
c00010cf:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010db:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010e1:	73 06                	jae    c00010e9 <sYSMALLOc+0x22e>
c00010e3:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ef:	83 e2 fc             	and    edx,0xfffffffc
c00010f2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f6:	0f 82 3c fe ff ff    	jb     c0000f38 <sYSMALLOc+0x7d>
c00010fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001100:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001103:	29 fa                	sub    edx,edi
c0001105:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001108:	83 ca 01             	or     edx,0x1
c000110b:	89 fb                	mov    ebx,edi
c000110d:	83 c0 08             	add    eax,0x8
c0001110:	83 cb 01             	or     ebx,0x1
c0001113:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001116:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001119:	83 c4 2c             	add    esp,0x2c
c000111c:	5b                   	pop    ebx
c000111d:	5e                   	pop    esi
c000111e:	5f                   	pop    edi
c000111f:	5d                   	pop    ebp
c0001120:	c3                   	ret    

c0001121 <dlmalloc>:
c0001121:	55                   	push   ebp
c0001122:	57                   	push   edi
c0001123:	56                   	push   esi
c0001124:	53                   	push   ebx
c0001125:	83 ec 1c             	sub    esp,0x1c
c0001128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112c:	83 f8 df             	cmp    eax,0xffffffdf
c000112f:	0f 87 70 03 00 00    	ja     c00014a5 <dlmalloc+0x384>
c0001135:	83 c0 0b             	add    eax,0xb
c0001138:	be 10 00 00 00       	mov    esi,0x10
c000113d:	83 f8 0f             	cmp    eax,0xf
c0001140:	76 05                	jbe    c0001147 <dlmalloc+0x26>
c0001142:	83 e0 f8             	and    eax,0xfffffff8
c0001145:	89 c6                	mov    esi,eax
c0001147:	8b 3d c0 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eac0
c000114d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001153:	75 17                	jne    c000116c <dlmalloc+0x4b>
c0001155:	85 ff                	test   edi,edi
c0001157:	0f 85 05 03 00 00    	jne    c0001462 <dlmalloc+0x341>
c000115d:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c0001162:	e8 62 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001167:	e9 f6 02 00 00       	jmp    c0001462 <dlmalloc+0x341>
c000116c:	39 f7                	cmp    edi,esi
c000116e:	72 1f                	jb     c000118f <dlmalloc+0x6e>
c0001170:	89 f2                	mov    edx,esi
c0001172:	c1 ea 03             	shr    edx,0x3
c0001175:	83 ea 02             	sub    edx,0x2
c0001178:	8b 04 95 c4 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd153c]
c000117f:	85 c0                	test   eax,eax
c0001181:	74 0c                	je     c000118f <dlmalloc+0x6e>
c0001183:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001186:	89 0c 95 c4 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd153c],ecx
c000118d:	eb 30                	jmp    c00011bf <dlmalloc+0x9e>
c000118f:	89 f0                	mov    eax,esi
c0001191:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001197:	77 2e                	ja     c00011c7 <dlmalloc+0xa6>
c0001199:	c1 e8 03             	shr    eax,0x3
c000119c:	8d 14 c5 f4 ea 02 c0 	lea    edx,[eax*8-0x3ffd150c]
c00011a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011aa:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ad:	39 c3                	cmp    ebx,eax
c00011af:	74 2e                	je     c00011df <dlmalloc+0xbe>
c00011b1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011bc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bf:	83 c0 08             	add    eax,0x8
c00011c2:	e9 e0 02 00 00       	jmp    c00014a7 <dlmalloc+0x386>
c00011c7:	e8 79 fa ff ff       	call   c0000c45 <largebin_index>
c00011cc:	83 e7 02             	and    edi,0x2
c00011cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d3:	74 0a                	je     c00011df <dlmalloc+0xbe>
c00011d5:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c00011da:	e8 ea fa ff ff       	call   c0000cc9 <malloc_consolidate>
c00011df:	8d 46 10             	lea    eax,[esi+0x10]
c00011e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e6:	8b 1d 00 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002eb00
c00011ec:	81 fb f4 ea 02 c0    	cmp    ebx,0xc002eaf4
c00011f2:	0f 84 13 01 00 00    	je     c000130b <dlmalloc+0x1ea>
c00011f8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fe:	83 e7 fc             	and    edi,0xfffffffc
c0001201:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001207:	77 4c                	ja     c0001255 <dlmalloc+0x134>
c0001209:	3d f4 ea 02 c0       	cmp    eax,0xc002eaf4
c000120e:	75 45                	jne    c0001255 <dlmalloc+0x134>
c0001210:	39 1d f0 ea 02 c0    	cmp    DWORD PTR ds:0xc002eaf0,ebx
c0001216:	75 3d                	jne    c0001255 <dlmalloc+0x134>
c0001218:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121c:	73 37                	jae    c0001255 <dlmalloc+0x134>
c000121e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001221:	89 fa                	mov    edx,edi
c0001223:	a3 fc ea 02 c0       	mov    ds:0xc002eafc,eax
c0001228:	a3 00 eb 02 c0       	mov    ds:0xc002eb00,eax
c000122d:	a3 f0 ea 02 c0       	mov    ds:0xc002eaf0,eax
c0001232:	29 f2                	sub    edx,esi
c0001234:	c7 40 08 f4 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eaf4
c000123b:	c7 40 0c f4 ea 02 c0 	mov    DWORD PTR [eax+0xc],0xc002eaf4
c0001242:	83 ce 01             	or     esi,0x1
c0001245:	89 d1                	mov    ecx,edx
c0001247:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000124a:	83 c9 01             	or     ecx,0x1
c000124d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001250:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001253:	eb 15                	jmp    c000126a <dlmalloc+0x149>
c0001255:	a3 00 eb 02 c0       	mov    ds:0xc002eb00,eax
c000125a:	39 fe                	cmp    esi,edi
c000125c:	c7 40 08 f4 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eaf4
c0001263:	75 0d                	jne    c0001272 <dlmalloc+0x151>
c0001265:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000126a:	8d 43 08             	lea    eax,[ebx+0x8]
c000126d:	e9 35 02 00 00       	jmp    c00014a7 <dlmalloc+0x386>
c0001272:	89 f8                	mov    eax,edi
c0001274:	81 ff ff 00 00 00    	cmp    edi,0xff
c000127a:	77 19                	ja     c0001295 <dlmalloc+0x174>
c000127c:	c1 e8 03             	shr    eax,0x3
c000127f:	8d 14 00             	lea    edx,[eax+eax*1]
c0001282:	83 c2 0d             	add    edx,0xd
c0001285:	8d 2c 95 b8 ea 02 c0 	lea    ebp,[edx*4-0x3ffd1548]
c000128c:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0001293:	eb 46                	jmp    c00012db <dlmalloc+0x1ba>
c0001295:	e8 ab f9 ff ff       	call   c0000c45 <largebin_index>
c000129a:	8d 14 00             	lea    edx,[eax+eax*1]
c000129d:	83 c2 0d             	add    edx,0xd
c00012a0:	8d 0c 95 c0 ea 02 c0 	lea    ecx,[edx*4-0x3ffd1540]
c00012a7:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c00012ae:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012b1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b5:	89 d5                	mov    ebp,edx
c00012b7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012bb:	74 1e                	je     c00012db <dlmalloc+0x1ba>
c00012bd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012c0:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c3:	77 12                	ja     c00012d7 <dlmalloc+0x1b6>
c00012c5:	83 cf 01             	or     edi,0x1
c00012c8:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012cb:	76 05                	jbe    c00012d2 <dlmalloc+0x1b1>
c00012cd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012d0:	eb f6                	jmp    c00012c8 <dlmalloc+0x1a7>
c00012d2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d5:	eb 04                	jmp    c00012db <dlmalloc+0x1ba>
c00012d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012db:	89 c7                	mov    edi,eax
c00012dd:	88 c1                	mov    cl,al
c00012df:	c1 ff 05             	sar    edi,0x5
c00012e2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e6:	bf 01 00 00 00       	mov    edi,0x1
c00012eb:	d3 e7                	shl    edi,cl
c00012ed:	89 f8                	mov    eax,edi
c00012ef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f3:	09 04 bd f4 ed 02 c0 	or     DWORD PTR [edi*4-0x3ffd120c],eax
c00012fa:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001300:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001303:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001306:	e9 db fe ff ff       	jmp    c00011e6 <dlmalloc+0xc5>
c000130b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001311:	76 78                	jbe    c000138b <dlmalloc+0x26a>
c0001313:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001317:	8d 04 c5 f4 ea 02 c0 	lea    eax,[eax*8-0x3ffd150c]
c000131e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001321:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001324:	39 ca                	cmp    edx,ecx
c0001326:	74 63                	je     c000138b <dlmalloc+0x26a>
c0001328:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000132b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132e:	83 e3 fc             	and    ebx,0xfffffffc
c0001331:	39 de                	cmp    esi,ebx
c0001333:	77 52                	ja     c0001387 <dlmalloc+0x266>
c0001335:	89 df                	mov    edi,ebx
c0001337:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000133a:	29 f7                	sub    edi,esi
c000133c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133f:	01 d3                	add    ebx,edx
c0001341:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001344:	83 ff 0f             	cmp    edi,0xf
c0001347:	8d 42 08             	lea    eax,[edx+0x8]
c000134a:	77 09                	ja     c0001355 <dlmalloc+0x234>
c000134c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001350:	e9 52 01 00 00       	jmp    c00014a7 <dlmalloc+0x386>
c0001355:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001358:	83 ce 01             	or     esi,0x1
c000135b:	89 0d fc ea 02 c0    	mov    DWORD PTR ds:0xc002eafc,ecx
c0001361:	89 0d 00 eb 02 c0    	mov    DWORD PTR ds:0xc002eb00,ecx
c0001367:	c7 41 08 f4 ea 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002eaf4
c000136e:	c7 41 0c f4 ea 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002eaf4
c0001375:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001378:	89 fa                	mov    edx,edi
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	89 3b                	mov    DWORD PTR [ebx],edi
c0001382:	e9 20 01 00 00       	jmp    c00014a7 <dlmalloc+0x386>
c0001387:	89 c2                	mov    edx,eax
c0001389:	eb 99                	jmp    c0001324 <dlmalloc+0x203>
c000138b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138f:	b8 01 00 00 00       	mov    eax,0x1
c0001394:	41                   	inc    ecx
c0001395:	89 cb                	mov    ebx,ecx
c0001397:	8d 14 cd ec ea 02 c0 	lea    edx,[ecx*8-0x3ffd1514]
c000139e:	c1 eb 05             	shr    ebx,0x5
c00013a1:	d3 e0                	shl    eax,cl
c00013a3:	8b 3c 9d f4 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd120c]
c00013aa:	39 f8                	cmp    eax,edi
c00013ac:	77 04                	ja     c00013b2 <dlmalloc+0x291>
c00013ae:	85 c0                	test   eax,eax
c00013b0:	75 26                	jne    c00013d8 <dlmalloc+0x2b7>
c00013b2:	43                   	inc    ebx
c00013b3:	83 fb 02             	cmp    ebx,0x2
c00013b6:	0f 87 a6 00 00 00    	ja     c0001462 <dlmalloc+0x341>
c00013bc:	8b 3c 9d f4 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd120c]
c00013c3:	85 ff                	test   edi,edi
c00013c5:	74 eb                	je     c00013b2 <dlmalloc+0x291>
c00013c7:	89 d8                	mov    eax,ebx
c00013c9:	c1 e0 06             	shl    eax,0x6
c00013cc:	8d 14 85 ec ea 02 c0 	lea    edx,[eax*4-0x3ffd1514]
c00013d3:	b8 01 00 00 00       	mov    eax,0x1
c00013d8:	85 f8                	test   eax,edi
c00013da:	75 07                	jne    c00013e3 <dlmalloc+0x2c2>
c00013dc:	83 c2 08             	add    edx,0x8
c00013df:	01 c0                	add    eax,eax
c00013e1:	eb f5                	jmp    c00013d8 <dlmalloc+0x2b7>
c00013e3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e6:	39 ca                	cmp    edx,ecx
c00013e8:	75 14                	jne    c00013fe <dlmalloc+0x2dd>
c00013ea:	89 c1                	mov    ecx,eax
c00013ec:	83 c2 08             	add    edx,0x8
c00013ef:	f7 d1                	not    ecx
c00013f1:	01 c0                	add    eax,eax
c00013f3:	21 cf                	and    edi,ecx
c00013f5:	89 3c 9d f4 ed 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd120c],edi
c00013fc:	eb ac                	jmp    c00013aa <dlmalloc+0x289>
c00013fe:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001401:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001404:	83 e0 fc             	and    eax,0xfffffffc
c0001407:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000140a:	89 c3                	mov    ebx,eax
c000140c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140f:	29 f3                	sub    ebx,esi
c0001411:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001414:	83 fb 0f             	cmp    ebx,0xf
c0001417:	8d 41 08             	lea    eax,[ecx+0x8]
c000141a:	77 09                	ja     c0001425 <dlmalloc+0x304>
c000141c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001420:	e9 82 00 00 00       	jmp    c00014a7 <dlmalloc+0x386>
c0001425:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001428:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142e:	89 3d fc ea 02 c0    	mov    DWORD PTR ds:0xc002eafc,edi
c0001434:	89 3d 00 eb 02 c0    	mov    DWORD PTR ds:0xc002eb00,edi
c000143a:	c7 47 08 f4 ea 02 c0 	mov    DWORD PTR [edi+0x8],0xc002eaf4
c0001441:	c7 47 0c f4 ea 02 c0 	mov    DWORD PTR [edi+0xc],0xc002eaf4
c0001448:	77 06                	ja     c0001450 <dlmalloc+0x32f>
c000144a:	89 3d f0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaf0,edi
c0001450:	83 ce 01             	or     esi,0x1
c0001453:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001456:	89 d9                	mov    ecx,ebx
c0001458:	83 c9 01             	or     ecx,0x1
c000145b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145e:	89 1a                	mov    DWORD PTR [edx],ebx
c0001460:	eb 45                	jmp    c00014a7 <dlmalloc+0x386>
c0001462:	a1 ec ea 02 c0       	mov    eax,ds:0xc002eaec
c0001467:	8d 4e 10             	lea    ecx,[esi+0x10]
c000146a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146d:	83 e2 fc             	and    edx,0xfffffffc
c0001470:	39 d1                	cmp    ecx,edx
c0001472:	77 1e                	ja     c0001492 <dlmalloc+0x371>
c0001474:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001477:	89 f3                	mov    ebx,esi
c0001479:	89 0d ec ea 02 c0    	mov    DWORD PTR ds:0xc002eaec,ecx
c000147f:	83 cb 01             	or     ebx,0x1
c0001482:	29 f2                	sub    edx,esi
c0001484:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001487:	83 ca 01             	or     edx,0x1
c000148a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148d:	e9 2d fd ff ff       	jmp    c00011bf <dlmalloc+0x9e>
c0001492:	83 c4 1c             	add    esp,0x1c
c0001495:	89 f0                	mov    eax,esi
c0001497:	5b                   	pop    ebx
c0001498:	ba c0 ea 02 c0       	mov    edx,0xc002eac0
c000149d:	5e                   	pop    esi
c000149e:	5f                   	pop    edi
c000149f:	5d                   	pop    ebp
c00014a0:	e9 16 fa ff ff       	jmp    c0000ebb <sYSMALLOc>
c00014a5:	31 c0                	xor    eax,eax
c00014a7:	83 c4 1c             	add    esp,0x1c
c00014aa:	5b                   	pop    ebx
c00014ab:	5e                   	pop    esi
c00014ac:	5f                   	pop    edi
c00014ad:	5d                   	pop    ebp
c00014ae:	c3                   	ret    

c00014af <iALLOc>:
c00014af:	55                   	push   ebp
c00014b0:	89 c5                	mov    ebp,eax
c00014b2:	57                   	push   edi
c00014b3:	56                   	push   esi
c00014b4:	53                   	push   ebx
c00014b5:	83 ec 2c             	sub    esp,0x2c
c00014b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014bc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c4:	83 3d c0 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002eac0,0x0
c00014cb:	75 12                	jne    c00014df <iALLOc+0x30>
c00014cd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014d1:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c00014d6:	e8 ee f7 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e4:	74 12                	je     c00014f8 <iALLOc+0x49>
c00014e6:	85 ed                	test   ebp,ebp
c00014e8:	0f 84 64 01 00 00    	je     c0001652 <iALLOc+0x1a3>
c00014ee:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f6:	eb 33                	jmp    c000152b <iALLOc+0x7c>
c00014f8:	85 ed                	test   ebp,ebp
c00014fa:	75 14                	jne    c0001510 <iALLOc+0x61>
c00014fc:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001504:	83 c4 2c             	add    esp,0x2c
c0001507:	5b                   	pop    ebx
c0001508:	5e                   	pop    esi
c0001509:	5f                   	pop    edi
c000150a:	5d                   	pop    ebp
c000150b:	e9 11 fc ff ff       	jmp    c0001121 <dlmalloc>
c0001510:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001517:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151f:	83 f8 0f             	cmp    eax,0xf
c0001522:	76 07                	jbe    c000152b <iALLOc+0x7c>
c0001524:	83 e0 f8             	and    eax,0xfffffff8
c0001527:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000152b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001530:	75 09                	jne    c000153b <iALLOc+0x8c>
c0001532:	89 d0                	mov    eax,edx
c0001534:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001537:	31 f6                	xor    esi,esi
c0001539:	eb 3b                	jmp    c0001576 <iALLOc+0xc7>
c000153b:	8b 02                	mov    eax,DWORD PTR [edx]
c000153d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001545:	83 c0 0b             	add    eax,0xb
c0001548:	83 f8 0f             	cmp    eax,0xf
c000154b:	76 07                	jbe    c0001554 <iALLOc+0xa5>
c000154d:	83 e0 f8             	and    eax,0xfffffff8
c0001550:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001554:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001558:	0f af f5             	imul   esi,ebp
c000155b:	eb 25                	jmp    c0001582 <iALLOc+0xd3>
c000155d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001562:	bb 10 00 00 00       	mov    ebx,0x10
c0001567:	83 f9 0f             	cmp    ecx,0xf
c000156a:	76 05                	jbe    c0001571 <iALLOc+0xc2>
c000156c:	83 e1 f8             	and    ecx,0xfffffff8
c000156f:	89 cb                	mov    ebx,ecx
c0001571:	01 de                	add    esi,ebx
c0001573:	83 c0 04             	add    eax,0x4
c0001576:	39 c7                	cmp    edi,eax
c0001578:	75 e3                	jne    c000155d <iALLOc+0xae>
c000157a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001582:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001586:	8b 1d 14 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee14
c000158c:	83 ec 0c             	sub    esp,0xc
c000158f:	c7 05 14 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee14,0x0
c0001599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159d:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015a1:	50                   	push   eax
c00015a2:	e8 7a fb ff ff       	call   c0001121 <dlmalloc>
c00015a7:	83 c4 10             	add    esp,0x10
c00015aa:	89 1d 14 ee 02 c0    	mov    DWORD PTR ds:0xc002ee14,ebx
c00015b0:	85 c0                	test   eax,eax
c00015b2:	0f 84 92 00 00 00    	je     c000164a <iALLOc+0x19b>
c00015b8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015bb:	8d 78 f8             	lea    edi,[eax-0x8]
c00015be:	83 e3 fc             	and    ebx,0xfffffffc
c00015c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c5:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015ca:	74 1e                	je     c00015ea <iALLOc+0x13b>
c00015cc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015d0:	89 d9                	mov    ecx,ebx
c00015d2:	52                   	push   edx
c00015d3:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d7:	83 e9 04             	sub    ecx,0x4
c00015da:	51                   	push   ecx
c00015db:	6a 00                	push   0x0
c00015dd:	50                   	push   eax
c00015de:	e8 89 f1 ff ff       	call   c000076c <memset>
c00015e3:	83 c4 10             	add    esp,0x10
c00015e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ef:	75 14                	jne    c0001605 <iALLOc+0x156>
c00015f1:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f4:	29 f3                	sub    ebx,esi
c00015f6:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f9:	83 cb 01             	or     ebx,0x1
c00015fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001600:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001603:	89 f3                	mov    ebx,esi
c0001605:	31 c0                	xor    eax,eax
c0001607:	4d                   	dec    ebp
c0001608:	8d 4f 08             	lea    ecx,[edi+0x8]
c000160b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160f:	39 c5                	cmp    ebp,eax
c0001611:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001614:	74 2c                	je     c0001642 <iALLOc+0x193>
c0001616:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000161a:	85 c9                	test   ecx,ecx
c000161c:	75 15                	jne    c0001633 <iALLOc+0x184>
c000161e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001621:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001624:	b9 10 00 00 00       	mov    ecx,0x10
c0001629:	83 fe 0f             	cmp    esi,0xf
c000162c:	76 05                	jbe    c0001633 <iALLOc+0x184>
c000162e:	83 e6 f8             	and    esi,0xfffffff8
c0001631:	89 f1                	mov    ecx,esi
c0001633:	89 ce                	mov    esi,ecx
c0001635:	29 cb                	sub    ebx,ecx
c0001637:	83 ce 01             	or     esi,0x1
c000163a:	40                   	inc    eax
c000163b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163e:	01 cf                	add    edi,ecx
c0001640:	eb c6                	jmp    c0001608 <iALLOc+0x159>
c0001642:	83 cb 01             	or     ebx,0x1
c0001645:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001648:	eb 08                	jmp    c0001652 <iALLOc+0x1a3>
c000164a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001656:	83 c4 2c             	add    esp,0x2c
c0001659:	5b                   	pop    ebx
c000165a:	5e                   	pop    esi
c000165b:	5f                   	pop    edi
c000165c:	5d                   	pop    ebp
c000165d:	c3                   	ret    

c000165e <dlrealloc>:
c000165e:	55                   	push   ebp
c000165f:	57                   	push   edi
c0001660:	56                   	push   esi
c0001661:	53                   	push   ebx
c0001662:	83 ec 1c             	sub    esp,0x1c
c0001665:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001669:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166d:	85 db                	test   ebx,ebx
c000166f:	75 10                	jne    c0001681 <dlrealloc+0x23>
c0001671:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001675:	83 c4 1c             	add    esp,0x1c
c0001678:	5b                   	pop    ebx
c0001679:	5e                   	pop    esi
c000167a:	5f                   	pop    edi
c000167b:	5d                   	pop    ebp
c000167c:	e9 a0 fa ff ff       	jmp    c0001121 <dlmalloc>
c0001681:	83 f8 df             	cmp    eax,0xffffffdf
c0001684:	76 07                	jbe    c000168d <dlrealloc+0x2f>
c0001686:	31 db                	xor    ebx,ebx
c0001688:	e9 7c 01 00 00       	jmp    c0001809 <dlrealloc+0x1ab>
c000168d:	83 c0 0b             	add    eax,0xb
c0001690:	bf 10 00 00 00       	mov    edi,0x10
c0001695:	83 f8 0f             	cmp    eax,0xf
c0001698:	76 05                	jbe    c000169f <dlrealloc+0x41>
c000169a:	83 e0 f8             	and    eax,0xfffffff8
c000169d:	89 c7                	mov    edi,eax
c000169f:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a2:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a5:	89 c6                	mov    esi,eax
c00016a7:	83 e6 fc             	and    esi,0xfffffffc
c00016aa:	a8 02                	test   al,0x2
c00016ac:	75 d8                	jne    c0001686 <dlrealloc+0x28>
c00016ae:	39 f7                	cmp    edi,esi
c00016b0:	0f 86 15 01 00 00    	jbe    c00017cb <dlrealloc+0x16d>
c00016b6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016ba:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bd:	39 15 ec ea 02 c0    	cmp    DWORD PTR ds:0xc002eaec,edx
c00016c3:	75 33                	jne    c00016f8 <dlrealloc+0x9a>
c00016c5:	83 e1 fc             	and    ecx,0xfffffffc
c00016c8:	01 f1                	add    ecx,esi
c00016ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016ce:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016d1:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d5:	77 49                	ja     c0001720 <dlrealloc+0xc2>
c00016d7:	01 fd                	add    ebp,edi
c00016d9:	83 e0 01             	and    eax,0x1
c00016dc:	09 f8                	or     eax,edi
c00016de:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016e1:	89 2d ec ea 02 c0    	mov    DWORD PTR ds:0xc002eaec,ebp
c00016e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016eb:	29 f8                	sub    eax,edi
c00016ed:	83 c8 01             	or     eax,0x1
c00016f0:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f3:	e9 11 01 00 00       	jmp    c0001809 <dlrealloc+0x1ab>
c00016f8:	89 c8                	mov    eax,ecx
c00016fa:	83 e0 fe             	and    eax,0xfffffffe
c00016fd:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001702:	75 1c                	jne    c0001720 <dlrealloc+0xc2>
c0001704:	83 e1 fc             	and    ecx,0xfffffffc
c0001707:	01 f1                	add    ecx,esi
c0001709:	39 cf                	cmp    edi,ecx
c000170b:	77 13                	ja     c0001720 <dlrealloc+0xc2>
c000170d:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001710:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001713:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001716:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001719:	89 ce                	mov    esi,ecx
c000171b:	e9 ab 00 00 00       	jmp    c00017cb <dlrealloc+0x16d>
c0001720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001724:	8d 47 f9             	lea    eax,[edi-0x7]
c0001727:	83 ec 0c             	sub    esp,0xc
c000172a:	50                   	push   eax
c000172b:	e8 f1 f9 ff ff       	call   c0001121 <dlmalloc>
c0001730:	83 c4 10             	add    esp,0x10
c0001733:	89 c1                	mov    ecx,eax
c0001735:	85 c0                	test   eax,eax
c0001737:	0f 84 49 ff ff ff    	je     c0001686 <dlrealloc+0x28>
c000173d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001744:	39 c2                	cmp    edx,eax
c0001746:	75 0a                	jne    c0001752 <dlrealloc+0xf4>
c0001748:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000174b:	83 e0 fc             	and    eax,0xfffffffc
c000174e:	01 c6                	add    esi,eax
c0001750:	eb 79                	jmp    c00017cb <dlrealloc+0x16d>
c0001752:	83 ee 04             	sub    esi,0x4
c0001755:	83 fe 27             	cmp    esi,0x27
c0001758:	76 16                	jbe    c0001770 <dlrealloc+0x112>
c000175a:	50                   	push   eax
c000175b:	56                   	push   esi
c000175c:	53                   	push   ebx
c000175d:	51                   	push   ecx
c000175e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001762:	e8 49 f6 ff ff       	call   c0000db0 <realmemcpy>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176e:	eb 43                	jmp    c00017b3 <dlrealloc+0x155>
c0001770:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001772:	83 fe 13             	cmp    esi,0x13
c0001775:	89 01                	mov    DWORD PTR [ecx],eax
c0001777:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000177a:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001780:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001783:	76 2e                	jbe    c00017b3 <dlrealloc+0x155>
c0001785:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001788:	83 fe 1b             	cmp    esi,0x1b
c000178b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001791:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001794:	76 1d                	jbe    c00017b3 <dlrealloc+0x155>
c0001796:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001799:	83 fe 23             	cmp    esi,0x23
c000179c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a2:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a5:	76 0c                	jbe    c00017b3 <dlrealloc+0x155>
c00017a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017aa:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017b0:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	53                   	push   ebx
c00017bb:	e8 06 f6 ff ff       	call   c0000dc6 <dlfree>
c00017c0:	83 c4 10             	add    esp,0x10
c00017c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c7:	89 cb                	mov    ebx,ecx
c00017c9:	eb 3e                	jmp    c0001809 <dlrealloc+0x1ab>
c00017cb:	89 f2                	mov    edx,esi
c00017cd:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017d0:	29 fa                	sub    edx,edi
c00017d2:	83 e1 01             	and    ecx,0x1
c00017d5:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d9:	83 fa 0f             	cmp    edx,0xf
c00017dc:	77 0b                	ja     c00017e9 <dlrealloc+0x18b>
c00017de:	09 ce                	or     esi,ecx
c00017e0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e7:	eb 20                	jmp    c0001809 <dlrealloc+0x1ab>
c00017e9:	01 fd                	add    ebp,edi
c00017eb:	83 ec 0c             	sub    esp,0xc
c00017ee:	09 cf                	or     edi,ecx
c00017f0:	83 ca 01             	or     edx,0x1
c00017f3:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f6:	83 c5 08             	add    ebp,0x8
c00017f9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001800:	55                   	push   ebp
c0001801:	e8 c0 f5 ff ff       	call   c0000dc6 <dlfree>
c0001806:	83 c4 10             	add    esp,0x10
c0001809:	83 c4 1c             	add    esp,0x1c
c000180c:	89 d8                	mov    eax,ebx
c000180e:	5b                   	pop    ebx
c000180f:	5e                   	pop    esi
c0001810:	5f                   	pop    edi
c0001811:	5d                   	pop    ebp
c0001812:	c3                   	ret    

c0001813 <dlmemalign>:
c0001813:	55                   	push   ebp
c0001814:	57                   	push   edi
c0001815:	56                   	push   esi
c0001816:	53                   	push   ebx
c0001817:	83 ec 0c             	sub    esp,0xc
c000181a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001822:	83 fa 08             	cmp    edx,0x8
c0001825:	77 10                	ja     c0001837 <dlmemalign+0x24>
c0001827:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000182b:	83 c4 0c             	add    esp,0xc
c000182e:	5b                   	pop    ebx
c000182f:	5e                   	pop    esi
c0001830:	5f                   	pop    edi
c0001831:	5d                   	pop    ebp
c0001832:	e9 ea f8 ff ff       	jmp    c0001121 <dlmalloc>
c0001837:	bf 10 00 00 00       	mov    edi,0x10
c000183c:	83 fa 0f             	cmp    edx,0xf
c000183f:	76 13                	jbe    c0001854 <dlmemalign+0x41>
c0001841:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001844:	85 d1                	test   ecx,edx
c0001846:	75 04                	jne    c000184c <dlmemalign+0x39>
c0001848:	89 d7                	mov    edi,edx
c000184a:	eb 08                	jmp    c0001854 <dlmemalign+0x41>
c000184c:	39 d7                	cmp    edi,edx
c000184e:	73 04                	jae    c0001854 <dlmemalign+0x41>
c0001850:	01 ff                	add    edi,edi
c0001852:	eb f8                	jmp    c000184c <dlmemalign+0x39>
c0001854:	83 f8 df             	cmp    eax,0xffffffdf
c0001857:	76 07                	jbe    c0001860 <dlmemalign+0x4d>
c0001859:	31 c0                	xor    eax,eax
c000185b:	e9 ce 00 00 00       	jmp    c000192e <dlmemalign+0x11b>
c0001860:	83 c0 0b             	add    eax,0xb
c0001863:	bd 10 00 00 00       	mov    ebp,0x10
c0001868:	83 f8 0f             	cmp    eax,0xf
c000186b:	76 05                	jbe    c0001872 <dlmemalign+0x5f>
c000186d:	83 e0 f8             	and    eax,0xfffffff8
c0001870:	89 c5                	mov    ebp,eax
c0001872:	83 ec 0c             	sub    esp,0xc
c0001875:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001879:	50                   	push   eax
c000187a:	e8 a2 f8 ff ff       	call   c0001121 <dlmalloc>
c000187f:	83 c4 10             	add    esp,0x10
c0001882:	89 c1                	mov    ecx,eax
c0001884:	85 c0                	test   eax,eax
c0001886:	74 d1                	je     c0001859 <dlmemalign+0x46>
c0001888:	31 d2                	xor    edx,edx
c000188a:	8d 70 f8             	lea    esi,[eax-0x8]
c000188d:	f7 f7                	div    edi
c000188f:	85 d2                	test   edx,edx
c0001891:	74 62                	je     c00018f5 <dlmemalign+0xe2>
c0001893:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001897:	89 f8                	mov    eax,edi
c0001899:	f7 d8                	neg    eax
c000189b:	21 c3                	and    ebx,eax
c000189d:	83 eb 08             	sub    ebx,0x8
c00018a0:	89 d8                	mov    eax,ebx
c00018a2:	29 f0                	sub    eax,esi
c00018a4:	83 f8 0f             	cmp    eax,0xf
c00018a7:	77 02                	ja     c00018ab <dlmemalign+0x98>
c00018a9:	01 fb                	add    ebx,edi
c00018ab:	89 d8                	mov    eax,ebx
c00018ad:	29 f0                	sub    eax,esi
c00018af:	89 c6                	mov    esi,eax
c00018b1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b4:	89 c2                	mov    edx,eax
c00018b6:	83 e2 fc             	and    edx,0xfffffffc
c00018b9:	29 f2                	sub    edx,esi
c00018bb:	a8 02                	test   al,0x2
c00018bd:	74 10                	je     c00018cf <dlmemalign+0xbc>
c00018bf:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c2:	83 ca 02             	or     edx,0x2
c00018c5:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c8:	89 33                	mov    DWORD PTR [ebx],esi
c00018ca:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cd:	eb 5f                	jmp    c000192e <dlmemalign+0x11b>
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	89 d0                	mov    eax,edx
c00018d4:	83 c8 01             	or     eax,0x1
c00018d7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018da:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e2:	83 e0 01             	and    eax,0x1
c00018e5:	09 f0                	or     eax,esi
c00018e7:	89 de                	mov    esi,ebx
c00018e9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ec:	51                   	push   ecx
c00018ed:	e8 d4 f4 ff ff       	call   c0000dc6 <dlfree>
c00018f2:	83 c4 10             	add    esp,0x10
c00018f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f8:	a8 02                	test   al,0x2
c00018fa:	75 2f                	jne    c000192b <dlmemalign+0x118>
c00018fc:	83 e0 fc             	and    eax,0xfffffffc
c00018ff:	8d 55 10             	lea    edx,[ebp+0x10]
c0001902:	39 c2                	cmp    edx,eax
c0001904:	73 25                	jae    c000192b <dlmemalign+0x118>
c0001906:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001909:	83 ec 0c             	sub    esp,0xc
c000190c:	29 e8                	sub    eax,ebp
c000190e:	83 c2 08             	add    edx,0x8
c0001911:	83 c8 01             	or     eax,0x1
c0001914:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001917:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000191a:	83 e0 01             	and    eax,0x1
c000191d:	09 c5                	or     ebp,eax
c000191f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001922:	52                   	push   edx
c0001923:	e8 9e f4 ff ff       	call   c0000dc6 <dlfree>
c0001928:	83 c4 10             	add    esp,0x10
c000192b:	8d 46 08             	lea    eax,[esi+0x8]
c000192e:	83 c4 0c             	add    esp,0xc
c0001931:	5b                   	pop    ebx
c0001932:	5e                   	pop    esi
c0001933:	5f                   	pop    edi
c0001934:	5d                   	pop    ebp
c0001935:	c3                   	ret    

c0001936 <dlcalloc>:
c0001936:	53                   	push   ebx
c0001937:	83 ec 14             	sub    esp,0x14
c000193a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001943:	50                   	push   eax
c0001944:	e8 d8 f7 ff ff       	call   c0001121 <dlmalloc>
c0001949:	83 c4 10             	add    esp,0x10
c000194c:	89 c3                	mov    ebx,eax
c000194e:	85 c0                	test   eax,eax
c0001950:	74 77                	je     c00019c9 <dlcalloc+0x93>
c0001952:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001955:	89 d0                	mov    eax,edx
c0001957:	83 e0 fc             	and    eax,0xfffffffc
c000195a:	80 e2 02             	and    dl,0x2
c000195d:	75 5a                	jne    c00019b9 <dlcalloc+0x83>
c000195f:	83 e8 04             	sub    eax,0x4
c0001962:	83 f8 27             	cmp    eax,0x27
c0001965:	76 03                	jbe    c000196a <dlcalloc+0x34>
c0001967:	51                   	push   ecx
c0001968:	eb 53                	jmp    c00019bd <dlcalloc+0x87>
c000196a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001970:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001977:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197e:	83 f8 13             	cmp    eax,0x13
c0001981:	76 46                	jbe    c00019c9 <dlcalloc+0x93>
c0001983:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000198a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001991:	83 f8 1b             	cmp    eax,0x1b
c0001994:	76 33                	jbe    c00019c9 <dlcalloc+0x93>
c0001996:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a4:	83 f8 23             	cmp    eax,0x23
c00019a7:	76 20                	jbe    c00019c9 <dlcalloc+0x93>
c00019a9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019b0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b7:	eb 10                	jmp    c00019c9 <dlcalloc+0x93>
c00019b9:	83 e8 08             	sub    eax,0x8
c00019bc:	52                   	push   edx
c00019bd:	50                   	push   eax
c00019be:	6a 00                	push   0x0
c00019c0:	53                   	push   ebx
c00019c1:	e8 a6 ed ff ff       	call   c000076c <memset>
c00019c6:	83 c4 10             	add    esp,0x10
c00019c9:	89 d8                	mov    eax,ebx
c00019cb:	83 c4 08             	add    esp,0x8
c00019ce:	5b                   	pop    ebx
c00019cf:	c3                   	ret    

c00019d0 <dlcfree>:
c00019d0:	e9 f1 f3 ff ff       	jmp    c0000dc6 <dlfree>

c00019d5 <dlindependent_calloc>:
c00019d5:	83 ec 28             	sub    esp,0x28
c00019d8:	b9 03 00 00 00       	mov    ecx,0x3
c00019dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019f1:	e8 b9 fa ff ff       	call   c00014af <iALLOc>
c00019f6:	83 c4 2c             	add    esp,0x2c
c00019f9:	c3                   	ret    

c00019fa <dlindependent_comalloc>:
c00019fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a02:	31 c9                	xor    ecx,ecx
c0001a04:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0c:	e9 9e fa ff ff       	jmp    c00014af <iALLOc>

c0001a11 <dlvalloc>:
c0001a11:	83 ec 0c             	sub    esp,0xc
c0001a14:	83 3d c0 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002eac0,0x0
c0001a1b:	75 0a                	jne    c0001a27 <dlvalloc+0x16>
c0001a1d:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c0001a22:	e8 a2 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a27:	50                   	push   eax
c0001a28:	50                   	push   eax
c0001a29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2d:	ff 35 1c ee 02 c0    	push   DWORD PTR ds:0xc002ee1c
c0001a33:	e8 db fd ff ff       	call   c0001813 <dlmemalign>
c0001a38:	83 c4 1c             	add    esp,0x1c
c0001a3b:	c3                   	ret    

c0001a3c <dlpvalloc>:
c0001a3c:	83 ec 0c             	sub    esp,0xc
c0001a3f:	83 3d c0 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002eac0,0x0
c0001a46:	75 0a                	jne    c0001a52 <dlpvalloc+0x16>
c0001a48:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c0001a4d:	e8 77 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a52:	a1 1c ee 02 c0       	mov    eax,ds:0xc002ee1c
c0001a57:	89 c1                	mov    ecx,eax
c0001a59:	52                   	push   edx
c0001a5a:	f7 d9                	neg    ecx
c0001a5c:	52                   	push   edx
c0001a5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a61:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a65:	21 ca                	and    edx,ecx
c0001a67:	52                   	push   edx
c0001a68:	50                   	push   eax
c0001a69:	e8 a5 fd ff ff       	call   c0001813 <dlmemalign>
c0001a6e:	83 c4 1c             	add    esp,0x1c
c0001a71:	c3                   	ret    

c0001a72 <dlmalloc_trim>:
c0001a72:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c0001a77:	e8 4d f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a7c:	31 c0                	xor    eax,eax
c0001a7e:	c3                   	ret    

c0001a7f <dlmalloc_usable_size>:
c0001a7f:	53                   	push   ebx
c0001a80:	31 c0                	xor    eax,eax
c0001a82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a86:	85 c9                	test   ecx,ecx
c0001a88:	74 24                	je     c0001aae <dlmalloc_usable_size+0x2f>
c0001a8a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8d:	f6 c2 02             	test   dl,0x2
c0001a90:	74 08                	je     c0001a9a <dlmalloc_usable_size+0x1b>
c0001a92:	83 e2 fc             	and    edx,0xfffffffc
c0001a95:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a98:	eb 14                	jmp    c0001aae <dlmalloc_usable_size+0x2f>
c0001a9a:	89 d3                	mov    ebx,edx
c0001a9c:	31 c0                	xor    eax,eax
c0001a9e:	83 e3 fe             	and    ebx,0xfffffffe
c0001aa1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa6:	74 06                	je     c0001aae <dlmalloc_usable_size+0x2f>
c0001aa8:	83 e2 fc             	and    edx,0xfffffffc
c0001aab:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aae:	5b                   	pop    ebx
c0001aaf:	c3                   	ret    

c0001ab0 <dlmallinfo>:
c0001ab0:	55                   	push   ebp
c0001ab1:	57                   	push   edi
c0001ab2:	56                   	push   esi
c0001ab3:	53                   	push   ebx
c0001ab4:	83 ec 08             	sub    esp,0x8
c0001ab7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001abb:	83 3d ec ea 02 c0 00 	cmp    DWORD PTR ds:0xc002eaec,0x0
c0001ac2:	75 0a                	jne    c0001ace <dlmallinfo+0x1e>
c0001ac4:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c0001ac9:	e8 fb f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001ace:	a1 ec ea 02 c0       	mov    eax,ds:0xc002eaec
c0001ad3:	31 ed                	xor    ebp,ebp
c0001ad5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad8:	31 c9                	xor    ecx,ecx
c0001ada:	83 e0 fc             	and    eax,0xfffffffc
c0001add:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ae1:	31 c0                	xor    eax,eax
c0001ae3:	8b 14 85 c4 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd153c]
c0001aea:	85 d2                	test   edx,edx
c0001aec:	74 0e                	je     c0001afc <dlmallinfo+0x4c>
c0001aee:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001af1:	45                   	inc    ebp
c0001af2:	83 e6 fc             	and    esi,0xfffffffc
c0001af5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af8:	01 f1                	add    ecx,esi
c0001afa:	eb ee                	jmp    c0001aea <dlmallinfo+0x3a>
c0001afc:	40                   	inc    eax
c0001afd:	83 f8 0a             	cmp    eax,0xa
c0001b00:	75 e1                	jne    c0001ae3 <dlmallinfo+0x33>
c0001b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b06:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b10:	b8 f4 ea 02 c0       	mov    eax,0xc002eaf4
c0001b15:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b18:	39 f0                	cmp    eax,esi
c0001b1a:	74 10                	je     c0001b2c <dlmallinfo+0x7c>
c0001b1c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1f:	ff 04 24             	inc    DWORD PTR [esp]
c0001b22:	83 e7 fc             	and    edi,0xfffffffc
c0001b25:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b28:	01 fa                	add    edx,edi
c0001b2a:	eb ec                	jmp    c0001b18 <dlmallinfo+0x68>
c0001b2c:	83 c0 08             	add    eax,0x8
c0001b2f:	3d ec ed 02 c0       	cmp    eax,0xc002edec
c0001b34:	75 df                	jne    c0001b15 <dlmallinfo+0x65>
c0001b36:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b39:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3f:	a1 28 ee 02 c0       	mov    eax,ds:0xc002ee28
c0001b44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b47:	89 03                	mov    DWORD PTR [ebx],eax
c0001b49:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4c:	8b 35 10 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee10
c0001b52:	29 d0                	sub    eax,edx
c0001b54:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b57:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b5a:	8b 35 24 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee24
c0001b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b64:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b67:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b6a:	8b 35 34 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee34
c0001b70:	89 d8                	mov    eax,ebx
c0001b72:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b75:	83 c4 08             	add    esp,0x8
c0001b78:	5b                   	pop    ebx
c0001b79:	5e                   	pop    esi
c0001b7a:	5f                   	pop    edi
c0001b7b:	5d                   	pop    ebp
c0001b7c:	c2 04 00             	ret    0x4

c0001b7f <dlmalloc_stats>:
c0001b7f:	83 ec 30             	sub    esp,0x30
c0001b82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b86:	50                   	push   eax
c0001b87:	e8 24 ff ff ff       	call   c0001ab0 <dlmallinfo>
c0001b8c:	83 c4 30             	add    esp,0x30
c0001b8f:	c3                   	ret    

c0001b90 <dlmallopt>:
c0001b90:	56                   	push   esi
c0001b91:	b8 c0 ea 02 c0       	mov    eax,0xc002eac0
c0001b96:	53                   	push   ebx
c0001b97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9f:	e8 25 f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001ba4:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba7:	83 f8 05             	cmp    eax,0x5
c0001baa:	77 67                	ja     c0001c13 <dlmallopt+0x83>
c0001bac:	ff 24 85 a4 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd635c]
c0001bb3:	83 fb 50             	cmp    ebx,0x50
c0001bb6:	77 5b                	ja     c0001c13 <dlmallopt+0x83>
c0001bb8:	ba 08 00 00 00       	mov    edx,0x8
c0001bbd:	85 db                	test   ebx,ebx
c0001bbf:	74 12                	je     c0001bd3 <dlmallopt+0x43>
c0001bc1:	83 c3 0b             	add    ebx,0xb
c0001bc4:	ba 10 00 00 00       	mov    edx,0x10
c0001bc9:	83 fb 0f             	cmp    ebx,0xf
c0001bcc:	76 05                	jbe    c0001bd3 <dlmallopt+0x43>
c0001bce:	89 da                	mov    edx,ebx
c0001bd0:	83 e2 f8             	and    edx,0xfffffff8
c0001bd3:	a1 c0 ea 02 c0       	mov    eax,ds:0xc002eac0
c0001bd8:	83 e0 03             	and    eax,0x3
c0001bdb:	09 d0                	or     eax,edx
c0001bdd:	a3 c0 ea 02 c0       	mov    ds:0xc002eac0,eax
c0001be2:	eb 31                	jmp    c0001c15 <dlmallopt+0x85>
c0001be4:	89 1d 04 ee 02 c0    	mov    DWORD PTR ds:0xc002ee04,ebx
c0001bea:	eb 06                	jmp    c0001bf2 <dlmallopt+0x62>
c0001bec:	89 1d 08 ee 02 c0    	mov    DWORD PTR ds:0xc002ee08,ebx
c0001bf2:	be 01 00 00 00       	mov    esi,0x1
c0001bf7:	eb 1c                	jmp    c0001c15 <dlmallopt+0x85>
c0001bf9:	89 1d 0c ee 02 c0    	mov    DWORD PTR ds:0xc002ee0c,ebx
c0001bff:	eb f1                	jmp    c0001bf2 <dlmallopt+0x62>
c0001c01:	31 f6                	xor    esi,esi
c0001c03:	85 db                	test   ebx,ebx
c0001c05:	75 0e                	jne    c0001c15 <dlmallopt+0x85>
c0001c07:	c7 05 14 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee14,0x0
c0001c11:	eb df                	jmp    c0001bf2 <dlmallopt+0x62>
c0001c13:	31 f6                	xor    esi,esi
c0001c15:	89 f0                	mov    eax,esi
c0001c17:	5b                   	pop    ebx
c0001c18:	5e                   	pop    esi
c0001c19:	c3                   	ret    

c0001c1a <disk_status>:
c0001c1a:	31 c0                	xor    eax,eax
c0001c1c:	c3                   	ret    

c0001c1d <disk_initialize>:
c0001c1d:	31 c0                	xor    eax,eax
c0001c1f:	c3                   	ret    

c0001c20 <disk_read>:
c0001c20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c25:	0f b6 04 85 a0 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcda60]
c0001c2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c31:	e9 32 f9 01 00       	jmp    c0021568 <fatWrapperReadDisk>

c0001c36 <disk_write>:
c0001c36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c3b:	0f b6 04 85 a0 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcda60]
c0001c43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c47:	e9 63 f9 01 00       	jmp    c00215af <fatWrapperWriteDisk>

c0001c4c <disk_ioctl>:
c0001c4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c55:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c5a:	0f b6 04 85 a0 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcda60]
c0001c62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c66:	e9 8b f9 01 00       	jmp    c00215f6 <fatWrapperIoctl>

c0001c6b <ld_word>:
c0001c6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c72:	c1 e2 08             	shl    edx,0x8
c0001c75:	09 d0                	or     eax,edx
c0001c77:	c3                   	ret    

c0001c78 <ld_dword>:
c0001c78:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7c:	89 d1                	mov    ecx,edx
c0001c7e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c82:	c1 e1 08             	shl    ecx,0x8
c0001c85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c88:	09 ca                	or     edx,ecx
c0001c8a:	c1 e2 08             	shl    edx,0x8
c0001c8d:	09 d0                	or     eax,edx
c0001c8f:	c3                   	ret    

c0001c90 <ld_qword>:
c0001c90:	57                   	push   edi
c0001c91:	56                   	push   esi
c0001c92:	53                   	push   ebx
c0001c93:	31 db                	xor    ebx,ebx
c0001c95:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c98:	89 df                	mov    edi,ebx
c0001c9a:	89 ce                	mov    esi,ecx
c0001c9c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ca0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca4:	c1 e6 08             	shl    esi,0x8
c0001ca7:	09 f2                	or     edx,esi
c0001ca9:	89 d6                	mov    esi,edx
c0001cab:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001caf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb3:	c1 e6 08             	shl    esi,0x8
c0001cb6:	09 f2                	or     edx,esi
c0001cb8:	89 d6                	mov    esi,edx
c0001cba:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc5:	c1 e6 08             	shl    esi,0x8
c0001cc8:	89 fb                	mov    ebx,edi
c0001cca:	09 f2                	or     edx,esi
c0001ccc:	89 d1                	mov    ecx,edx
c0001cce:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd2:	c1 e1 08             	shl    ecx,0x8
c0001cd5:	89 da                	mov    edx,ebx
c0001cd7:	09 c8                	or     eax,ecx
c0001cd9:	5b                   	pop    ebx
c0001cda:	5e                   	pop    esi
c0001cdb:	5f                   	pop    edi
c0001cdc:	c3                   	ret    

c0001cdd <st_word>:
c0001cdd:	66 89 10             	mov    WORD PTR [eax],dx
c0001ce0:	c3                   	ret    

c0001ce1 <st_dword>:
c0001ce1:	89 10                	mov    DWORD PTR [eax],edx
c0001ce3:	c3                   	ret    

c0001ce4 <st_qword>:
c0001ce4:	89 10                	mov    DWORD PTR [eax],edx
c0001ce6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce9:	c3                   	ret    

c0001cea <mem_cpy>:
c0001cea:	85 c9                	test   ecx,ecx
c0001cec:	74 10                	je     c0001cfe <mem_cpy+0x14>
c0001cee:	57                   	push   edi
c0001cef:	01 c1                	add    ecx,eax
c0001cf1:	56                   	push   esi
c0001cf2:	89 c7                	mov    edi,eax
c0001cf4:	89 d6                	mov    esi,edx
c0001cf6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf7:	39 f9                	cmp    ecx,edi
c0001cf9:	75 fb                	jne    c0001cf6 <mem_cpy+0xc>
c0001cfb:	5e                   	pop    esi
c0001cfc:	5f                   	pop    edi
c0001cfd:	c3                   	ret    
c0001cfe:	c3                   	ret    

c0001cff <mem_set>:
c0001cff:	01 c1                	add    ecx,eax
c0001d01:	40                   	inc    eax
c0001d02:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d05:	39 c8                	cmp    eax,ecx
c0001d07:	75 f8                	jne    c0001d01 <mem_set+0x2>
c0001d09:	c3                   	ret    

c0001d0a <mem_cmp>:
c0001d0a:	57                   	push   edi
c0001d0b:	56                   	push   esi
c0001d0c:	89 c6                	mov    esi,eax
c0001d0e:	53                   	push   ebx
c0001d0f:	46                   	inc    esi
c0001d10:	42                   	inc    edx
c0001d11:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d15:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d19:	29 fb                	sub    ebx,edi
c0001d1b:	89 cf                	mov    edi,ecx
c0001d1d:	29 f7                	sub    edi,esi
c0001d1f:	01 c7                	add    edi,eax
c0001d21:	74 04                	je     c0001d27 <mem_cmp+0x1d>
c0001d23:	85 db                	test   ebx,ebx
c0001d25:	74 e8                	je     c0001d0f <mem_cmp+0x5>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	5b                   	pop    ebx
c0001d2a:	5e                   	pop    esi
c0001d2b:	5f                   	pop    edi
c0001d2c:	c3                   	ret    

c0001d2d <chk_chr>:
c0001d2d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d30:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d33:	74 07                	je     c0001d3c <chk_chr+0xf>
c0001d35:	39 d1                	cmp    ecx,edx
c0001d37:	74 03                	je     c0001d3c <chk_chr+0xf>
c0001d39:	40                   	inc    eax
c0001d3a:	eb f1                	jmp    c0001d2d <chk_chr>
c0001d3c:	89 c8                	mov    eax,ecx
c0001d3e:	c3                   	ret    

c0001d3f <dbc_1st>:
c0001d3f:	31 c0                	xor    eax,eax
c0001d41:	c3                   	ret    

c0001d42 <dbc_2nd>:
c0001d42:	31 c0                	xor    eax,eax
c0001d44:	c3                   	ret    

c0001d45 <tchar2uni>:
c0001d45:	57                   	push   edi
c0001d46:	89 c7                	mov    edi,eax
c0001d48:	56                   	push   esi
c0001d49:	53                   	push   ebx
c0001d4a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d51:	84 c9                	test   cl,cl
c0001d53:	78 0a                	js     c0001d5f <tchar2uni+0x1a>
c0001d55:	0f b6 d1             	movzx  edx,cl
c0001d58:	89 f3                	mov    ebx,esi
c0001d5a:	e9 9f 00 00 00       	jmp    c0001dfe <tchar2uni+0xb9>
c0001d5f:	88 ca                	mov    dl,cl
c0001d61:	83 e2 e0             	and    edx,0xffffffe0
c0001d64:	80 fa c0             	cmp    dl,0xc0
c0001d67:	75 0c                	jne    c0001d75 <tchar2uni+0x30>
c0001d69:	89 ca                	mov    edx,ecx
c0001d6b:	b9 01 00 00 00       	mov    ecx,0x1
c0001d70:	83 e2 1f             	and    edx,0x1f
c0001d73:	eb 2e                	jmp    c0001da3 <tchar2uni+0x5e>
c0001d75:	88 ca                	mov    dl,cl
c0001d77:	83 e2 f0             	and    edx,0xfffffff0
c0001d7a:	80 fa e0             	cmp    dl,0xe0
c0001d7d:	75 0c                	jne    c0001d8b <tchar2uni+0x46>
c0001d7f:	89 ca                	mov    edx,ecx
c0001d81:	b9 02 00 00 00       	mov    ecx,0x2
c0001d86:	83 e2 0f             	and    edx,0xf
c0001d89:	eb 18                	jmp    c0001da3 <tchar2uni+0x5e>
c0001d8b:	88 ca                	mov    dl,cl
c0001d8d:	83 e2 f8             	and    edx,0xfffffff8
c0001d90:	88 d0                	mov    al,dl
c0001d92:	83 ca ff             	or     edx,0xffffffff
c0001d95:	3c f0                	cmp    al,0xf0
c0001d97:	75 6c                	jne    c0001e05 <tchar2uni+0xc0>
c0001d99:	89 ca                	mov    edx,ecx
c0001d9b:	b9 03 00 00 00       	mov    ecx,0x3
c0001da0:	83 e2 07             	and    edx,0x7
c0001da3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da7:	46                   	inc    esi
c0001da8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dab:	88 c8                	mov    al,cl
c0001dad:	83 e0 c0             	and    eax,0xffffffc0
c0001db0:	3c 80                	cmp    al,0x80
c0001db2:	75 4e                	jne    c0001e02 <tchar2uni+0xbd>
c0001db4:	c1 e2 06             	shl    edx,0x6
c0001db7:	83 e1 3f             	and    ecx,0x3f
c0001dba:	09 ca                	or     edx,ecx
c0001dbc:	39 de                	cmp    esi,ebx
c0001dbe:	75 e7                	jne    c0001da7 <tchar2uni+0x62>
c0001dc0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc9:	77 37                	ja     c0001e02 <tchar2uni+0xbd>
c0001dcb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dd1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd7:	76 29                	jbe    c0001e02 <tchar2uni+0xbd>
c0001dd9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddf:	76 1d                	jbe    c0001dfe <tchar2uni+0xb9>
c0001de1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ded:	c1 e1 06             	shl    ecx,0x6
c0001df0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df6:	09 ca                	or     edx,ecx
c0001df8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfe:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e00:	eb 03                	jmp    c0001e05 <tchar2uni+0xc0>
c0001e02:	83 ca ff             	or     edx,0xffffffff
c0001e05:	5b                   	pop    ebx
c0001e06:	89 d0                	mov    eax,edx
c0001e08:	5e                   	pop    esi
c0001e09:	5f                   	pop    edi
c0001e0a:	c3                   	ret    

c0001e0b <put_utf>:
c0001e0b:	53                   	push   ebx
c0001e0c:	83 f8 7f             	cmp    eax,0x7f
c0001e0f:	89 c3                	mov    ebx,eax
c0001e11:	b0 00                	mov    al,0x0
c0001e13:	77 11                	ja     c0001e26 <put_utf+0x1b>
c0001e15:	85 c9                	test   ecx,ecx
c0001e17:	0f 84 e5 00 00 00    	je     c0001f02 <put_utf+0xf7>
c0001e1d:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1f:	b0 01                	mov    al,0x1
c0001e21:	e9 dc 00 00 00       	jmp    c0001f02 <put_utf+0xf7>
c0001e26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2c:	77 23                	ja     c0001e51 <put_utf+0x46>
c0001e2e:	83 f9 01             	cmp    ecx,0x1
c0001e31:	0f 86 cb 00 00 00    	jbe    c0001f02 <put_utf+0xf7>
c0001e37:	89 d8                	mov    eax,ebx
c0001e39:	83 e3 3f             	and    ebx,0x3f
c0001e3c:	c1 e8 06             	shr    eax,0x6
c0001e3f:	83 cb 80             	or     ebx,0xffffff80
c0001e42:	83 c8 c0             	or     eax,0xffffffc0
c0001e45:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e48:	88 02                	mov    BYTE PTR [edx],al
c0001e4a:	b0 02                	mov    al,0x2
c0001e4c:	e9 b1 00 00 00       	jmp    c0001f02 <put_utf+0xf7>
c0001e51:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e57:	77 40                	ja     c0001e99 <put_utf+0x8e>
c0001e59:	83 f9 02             	cmp    ecx,0x2
c0001e5c:	0f 86 a0 00 00 00    	jbe    c0001f02 <put_utf+0xf7>
c0001e62:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e68:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6e:	0f 86 8e 00 00 00    	jbe    c0001f02 <put_utf+0xf7>
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	c1 e8 0c             	shr    eax,0xc
c0001e79:	83 c8 e0             	or     eax,0xffffffe0
c0001e7c:	88 02                	mov    BYTE PTR [edx],al
c0001e7e:	89 d8                	mov    eax,ebx
c0001e80:	83 e3 3f             	and    ebx,0x3f
c0001e83:	c1 e8 06             	shr    eax,0x6
c0001e86:	83 cb 80             	or     ebx,0xffffff80
c0001e89:	83 e0 3f             	and    eax,0x3f
c0001e8c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8f:	83 c8 80             	or     eax,0xffffff80
c0001e92:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e95:	b0 03                	mov    al,0x3
c0001e97:	eb 69                	jmp    c0001f02 <put_utf+0xf7>
c0001e99:	83 f9 03             	cmp    ecx,0x3
c0001e9c:	76 64                	jbe    c0001f02 <put_utf+0xf7>
c0001e9e:	89 d9                	mov    ecx,ebx
c0001ea0:	0f b7 c3             	movzx  eax,bx
c0001ea3:	66 31 c9             	xor    cx,cx
c0001ea6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eac:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb2:	c1 e9 06             	shr    ecx,0x6
c0001eb5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ebb:	77 43                	ja     c0001f00 <put_utf+0xf5>
c0001ebd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec3:	77 3b                	ja     c0001f00 <put_utf+0xf5>
c0001ec5:	09 cb                	or     ebx,ecx
c0001ec7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 12             	shr    eax,0x12
c0001ed2:	83 c8 f0             	or     eax,0xfffffff0
c0001ed5:	88 02                	mov    BYTE PTR [edx],al
c0001ed7:	89 d8                	mov    eax,ebx
c0001ed9:	c1 e8 0c             	shr    eax,0xc
c0001edc:	83 e0 3f             	and    eax,0x3f
c0001edf:	83 c8 80             	or     eax,0xffffff80
c0001ee2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee5:	89 d8                	mov    eax,ebx
c0001ee7:	83 e3 3f             	and    ebx,0x3f
c0001eea:	c1 e8 06             	shr    eax,0x6
c0001eed:	83 cb 80             	or     ebx,0xffffff80
c0001ef0:	83 e0 3f             	and    eax,0x3f
c0001ef3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef6:	83 c8 80             	or     eax,0xffffff80
c0001ef9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efc:	b0 04                	mov    al,0x4
c0001efe:	eb 02                	jmp    c0001f02 <put_utf+0xf7>
c0001f00:	31 c0                	xor    eax,eax
c0001f02:	5b                   	pop    ebx
c0001f03:	c3                   	ret    

c0001f04 <clst2sect>:
c0001f04:	89 c1                	mov    ecx,eax
c0001f06:	83 ea 02             	sub    edx,0x2
c0001f09:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0c:	83 e8 02             	sub    eax,0x2
c0001f0f:	39 d0                	cmp    eax,edx
c0001f11:	76 0d                	jbe    c0001f20 <clst2sect+0x1c>
c0001f13:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f17:	f7 e2                	mul    edx
c0001f19:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1f:	c3                   	ret    
c0001f20:	31 c0                	xor    eax,eax
c0001f22:	31 d2                	xor    edx,edx
c0001f24:	c3                   	ret    

c0001f25 <clmt_clust>:
c0001f25:	57                   	push   edi
c0001f26:	89 cf                	mov    edi,ecx
c0001f28:	56                   	push   esi
c0001f29:	89 d6                	mov    esi,edx
c0001f2b:	53                   	push   ebx
c0001f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f30:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f33:	89 f2                	mov    edx,esi
c0001f35:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f37:	c1 ef 09             	shr    edi,0x9
c0001f3a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f41:	89 f9                	mov    ecx,edi
c0001f43:	31 ff                	xor    edi,edi
c0001f45:	57                   	push   edi
c0001f46:	56                   	push   esi
c0001f47:	51                   	push   ecx
c0001f48:	52                   	push   edx
c0001f49:	e8 e6 52 02 00       	call   c0027234 <__udivdi3>
c0001f4e:	83 c4 10             	add    esp,0x10
c0001f51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f53:	85 d2                	test   edx,edx
c0001f55:	74 10                	je     c0001f67 <clmt_clust+0x42>
c0001f57:	39 d0                	cmp    eax,edx
c0001f59:	72 07                	jb     c0001f62 <clmt_clust+0x3d>
c0001f5b:	29 d0                	sub    eax,edx
c0001f5d:	83 c3 08             	add    ebx,0x8
c0001f60:	eb ef                	jmp    c0001f51 <clmt_clust+0x2c>
c0001f62:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f65:	89 c2                	mov    edx,eax
c0001f67:	5b                   	pop    ebx
c0001f68:	89 d0                	mov    eax,edx
c0001f6a:	5e                   	pop    esi
c0001f6b:	5f                   	pop    edi
c0001f6c:	c3                   	ret    

c0001f6d <pick_lfn>:
c0001f6d:	55                   	push   ebp
c0001f6e:	57                   	push   edi
c0001f6f:	56                   	push   esi
c0001f70:	89 d6                	mov    esi,edx
c0001f72:	53                   	push   ebx
c0001f73:	89 c3                	mov    ebx,eax
c0001f75:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f78:	e8 ee fc ff ff       	call   c0001c6b <ld_word>
c0001f7d:	66 85 c0             	test   ax,ax
c0001f80:	74 04                	je     c0001f86 <pick_lfn+0x19>
c0001f82:	31 c0                	xor    eax,eax
c0001f84:	eb 5c                	jmp    c0001fe2 <pick_lfn+0x75>
c0001f86:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f89:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8e:	83 e1 bf             	and    ecx,0xffffffbf
c0001f91:	31 ff                	xor    edi,edi
c0001f93:	49                   	dec    ecx
c0001f94:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f97:	0f b6 87 c0 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6240]
c0001f9e:	01 f0                	add    eax,esi
c0001fa0:	e8 c6 fc ff ff       	call   c0001c6b <ld_word>
c0001fa5:	66 85 ed             	test   bp,bp
c0001fa8:	74 11                	je     c0001fbb <pick_lfn+0x4e>
c0001faa:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb0:	77 d0                	ja     c0001f82 <pick_lfn+0x15>
c0001fb2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb6:	89 c5                	mov    ebp,eax
c0001fb8:	41                   	inc    ecx
c0001fb9:	eb 04                	jmp    c0001fbf <pick_lfn+0x52>
c0001fbb:	66 40                	inc    ax
c0001fbd:	75 c3                	jne    c0001f82 <pick_lfn+0x15>
c0001fbf:	47                   	inc    edi
c0001fc0:	83 ff 0d             	cmp    edi,0xd
c0001fc3:	75 d2                	jne    c0001f97 <pick_lfn+0x2a>
c0001fc5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc8:	74 13                	je     c0001fdd <pick_lfn+0x70>
c0001fca:	66 85 ed             	test   bp,bp
c0001fcd:	74 0e                	je     c0001fdd <pick_lfn+0x70>
c0001fcf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd5:	77 ab                	ja     c0001f82 <pick_lfn+0x15>
c0001fd7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdd:	b8 01 00 00 00       	mov    eax,0x1
c0001fe2:	5b                   	pop    ebx
c0001fe3:	5e                   	pop    esi
c0001fe4:	5f                   	pop    edi
c0001fe5:	5d                   	pop    ebp
c0001fe6:	c3                   	ret    

c0001fe7 <put_lfn>:
c0001fe7:	55                   	push   ebp
c0001fe8:	31 ed                	xor    ebp,ebp
c0001fea:	57                   	push   edi
c0001feb:	89 d7                	mov    edi,edx
c0001fed:	56                   	push   esi
c0001fee:	31 f6                	xor    esi,esi
c0001ff0:	53                   	push   ebx
c0001ff1:	83 ec 08             	sub    esp,0x8
c0001ff4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ffb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fff:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002005:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002008:	8d 42 1a             	lea    eax,[edx+0x1a]
c000200b:	31 d2                	xor    edx,edx
c000200d:	e8 cb fc ff ff       	call   c0001cdd <st_word>
c0002012:	0f b6 d9             	movzx  ebx,cl
c0002015:	4b                   	dec    ebx
c0002016:	6b db 0d             	imul   ebx,ebx,0xd
c0002019:	66 83 fe ff          	cmp    si,0xffff
c000201d:	74 08                	je     c0002027 <put_lfn+0x40>
c000201f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002022:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002026:	43                   	inc    ebx
c0002027:	0f b6 85 c0 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6240]
c000202e:	0f b7 d6             	movzx  edx,si
c0002031:	01 f8                	add    eax,edi
c0002033:	e8 a5 fc ff ff       	call   c0001cdd <st_word>
c0002038:	66 85 f6             	test   si,si
c000203b:	75 03                	jne    c0002040 <put_lfn+0x59>
c000203d:	83 ce ff             	or     esi,0xffffffff
c0002040:	45                   	inc    ebp
c0002041:	83 fd 0d             	cmp    ebp,0xd
c0002044:	75 d3                	jne    c0002019 <put_lfn+0x32>
c0002046:	66 46                	inc    si
c0002048:	74 0a                	je     c0002054 <put_lfn+0x6d>
c000204a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002052:	75 09                	jne    c000205d <put_lfn+0x76>
c0002054:	88 c8                	mov    al,cl
c0002056:	83 c8 40             	or     eax,0x40
c0002059:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002061:	88 07                	mov    BYTE PTR [edi],al
c0002063:	83 c4 08             	add    esp,0x8
c0002066:	5b                   	pop    ebx
c0002067:	5e                   	pop    esi
c0002068:	5f                   	pop    edi
c0002069:	5d                   	pop    ebp
c000206a:	c3                   	ret    

c000206b <gen_numname>:
c000206b:	57                   	push   edi
c000206c:	89 cf                	mov    edi,ecx
c000206e:	56                   	push   esi
c000206f:	b9 0b 00 00 00       	mov    ecx,0xb
c0002074:	53                   	push   ebx
c0002075:	89 c6                	mov    esi,eax
c0002077:	83 ec 10             	sub    esp,0x10
c000207a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207e:	e8 67 fc ff ff       	call   c0001cea <mem_cpy>
c0002083:	83 fb 05             	cmp    ebx,0x5
c0002086:	76 2d                	jbe    c00020b5 <gen_numname+0x4a>
c0002088:	66 8b 07             	mov    ax,WORD PTR [edi]
c000208b:	66 85 c0             	test   ax,ax
c000208e:	74 25                	je     c00020b5 <gen_numname+0x4a>
c0002090:	83 c7 02             	add    edi,0x2
c0002093:	ba 10 00 00 00       	mov    edx,0x10
c0002098:	01 db                	add    ebx,ebx
c000209a:	89 c1                	mov    ecx,eax
c000209c:	66 d1 e8             	shr    ax,1
c000209f:	83 e1 01             	and    ecx,0x1
c00020a2:	01 cb                	add    ebx,ecx
c00020a4:	0f ba e3 10          	bt     ebx,0x10
c00020a8:	73 06                	jae    c00020b0 <gen_numname+0x45>
c00020aa:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020b0:	4a                   	dec    edx
c00020b1:	75 e5                	jne    c0002098 <gen_numname+0x2d>
c00020b3:	eb d3                	jmp    c0002088 <gen_numname+0x1d>
c00020b5:	b8 07 00 00 00       	mov    eax,0x7
c00020ba:	88 d9                	mov    cl,bl
c00020bc:	83 e1 0f             	and    ecx,0xf
c00020bf:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c2:	80 fa 39             	cmp    dl,0x39
c00020c5:	76 03                	jbe    c00020ca <gen_numname+0x5f>
c00020c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020d1:	89 da                	mov    edx,ebx
c00020d3:	c1 ea 04             	shr    edx,0x4
c00020d6:	83 fb 0f             	cmp    ebx,0xf
c00020d9:	76 06                	jbe    c00020e1 <gen_numname+0x76>
c00020db:	89 c8                	mov    eax,ecx
c00020dd:	89 d3                	mov    ebx,edx
c00020df:	eb d9                	jmp    c00020ba <gen_numname+0x4f>
c00020e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e6:	31 d2                	xor    edx,edx
c00020e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ee:	39 ca                	cmp    edx,ecx
c00020f0:	73 18                	jae    c000210a <gen_numname+0x9f>
c00020f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f5:	3c 20                	cmp    al,0x20
c00020f7:	74 11                	je     c000210a <gen_numname+0x9f>
c00020f9:	e8 41 fc ff ff       	call   c0001d3f <dbc_1st>
c00020fe:	85 c0                	test   eax,eax
c0002100:	74 05                	je     c0002107 <gen_numname+0x9c>
c0002102:	39 d3                	cmp    ebx,edx
c0002104:	74 04                	je     c000210a <gen_numname+0x9f>
c0002106:	42                   	inc    edx
c0002107:	42                   	inc    edx
c0002108:	eb e1                	jmp    c00020eb <gen_numname+0x80>
c000210a:	b0 20                	mov    al,0x20
c000210c:	83 f9 07             	cmp    ecx,0x7
c000210f:	77 05                	ja     c0002116 <gen_numname+0xab>
c0002111:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002115:	41                   	inc    ecx
c0002116:	42                   	inc    edx
c0002117:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000211b:	83 fa 07             	cmp    edx,0x7
c000211e:	76 ea                	jbe    c000210a <gen_numname+0x9f>
c0002120:	83 c4 10             	add    esp,0x10
c0002123:	5b                   	pop    ebx
c0002124:	5e                   	pop    esi
c0002125:	5f                   	pop    edi
c0002126:	c3                   	ret    

c0002127 <sum_sfn>:
c0002127:	31 c9                	xor    ecx,ecx
c0002129:	31 d2                	xor    edx,edx
c000212b:	d0 ca                	ror    dl,1
c000212d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002130:	41                   	inc    ecx
c0002131:	83 f9 0b             	cmp    ecx,0xb
c0002134:	75 f5                	jne    c000212b <sum_sfn+0x4>
c0002136:	88 d0                	mov    al,dl
c0002138:	c3                   	ret    

c0002139 <xdir_sum>:
c0002139:	56                   	push   esi
c000213a:	31 c9                	xor    ecx,ecx
c000213c:	53                   	push   ebx
c000213d:	31 d2                	xor    edx,edx
c000213f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002143:	43                   	inc    ebx
c0002144:	c1 e3 05             	shl    ebx,0x5
c0002147:	83 fa 02             	cmp    edx,0x2
c000214a:	74 0b                	je     c0002157 <xdir_sum+0x1e>
c000214c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002150:	66 d1 c9             	ror    cx,1
c0002153:	01 f1                	add    ecx,esi
c0002155:	eb 05                	jmp    c000215c <xdir_sum+0x23>
c0002157:	ba 03 00 00 00       	mov    edx,0x3
c000215c:	42                   	inc    edx
c000215d:	39 d3                	cmp    ebx,edx
c000215f:	77 e6                	ja     c0002147 <xdir_sum+0xe>
c0002161:	89 c8                	mov    eax,ecx
c0002163:	5b                   	pop    ebx
c0002164:	5e                   	pop    esi
c0002165:	c3                   	ret    

c0002166 <xsum32>:
c0002166:	d1 ca                	ror    edx,1
c0002168:	0f b6 c0             	movzx  eax,al
c000216b:	01 d0                	add    eax,edx
c000216d:	c3                   	ret    

c000216e <get_xfileinfo>:
c000216e:	55                   	push   ebp
c000216f:	31 c9                	xor    ecx,ecx
c0002171:	57                   	push   edi
c0002172:	bd 40 00 00 00       	mov    ebp,0x40
c0002177:	56                   	push   esi
c0002178:	31 ff                	xor    edi,edi
c000217a:	53                   	push   ebx
c000217b:	89 c6                	mov    esi,eax
c000217d:	83 ec 0c             	sub    esp,0xc
c0002180:	89 d3                	mov    ebx,edx
c0002182:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002189:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002190:	76 6d                	jbe    c00021ff <get_xfileinfo+0x91>
c0002192:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002198:	76 0b                	jbe    c00021a5 <get_xfileinfo+0x37>
c000219a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219e:	bf 01 00 00 00       	mov    edi,0x1
c00021a3:	eb 63                	jmp    c0002208 <get_xfileinfo+0x9a>
c00021a5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021ab:	75 03                	jne    c00021b0 <get_xfileinfo+0x42>
c00021ad:	83 c5 02             	add    ebp,0x2
c00021b0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b3:	83 c5 02             	add    ebp,0x2
c00021b6:	e8 b0 fa ff ff       	call   c0001c6b <ld_word>
c00021bb:	ff 04 24             	inc    DWORD PTR [esp]
c00021be:	66 85 c9             	test   cx,cx
c00021c1:	75 0d                	jne    c00021d0 <get_xfileinfo+0x62>
c00021c3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021ce:	76 2b                	jbe    c00021fb <get_xfileinfo+0x8d>
c00021d0:	c1 e1 10             	shl    ecx,0x10
c00021d3:	ba ff 00 00 00       	mov    edx,0xff
c00021d8:	0f b7 c0             	movzx  eax,ax
c00021db:	29 fa                	sub    edx,edi
c00021dd:	09 c8                	or     eax,ecx
c00021df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021eb:	e8 1b fc ff ff       	call   c0001e0b <put_utf>
c00021f0:	84 c0                	test   al,al
c00021f2:	74 a6                	je     c000219a <get_xfileinfo+0x2c>
c00021f4:	0f b6 c0             	movzx  eax,al
c00021f7:	01 c7                	add    edi,eax
c00021f9:	31 c0                	xor    eax,eax
c00021fb:	89 c1                	mov    ecx,eax
c00021fd:	eb 8a                	jmp    c0002189 <get_xfileinfo+0x1b>
c00021ff:	85 ff                	test   edi,edi
c0002201:	74 97                	je     c000219a <get_xfileinfo+0x2c>
c0002203:	66 85 c9             	test   cx,cx
c0002206:	75 92                	jne    c000219a <get_xfileinfo+0x2c>
c0002208:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220d:	31 c0                	xor    eax,eax
c000220f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002213:	31 d2                	xor    edx,edx
c0002215:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002218:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000221b:	80 e1 10             	and    cl,0x10
c000221e:	75 08                	jne    c0002228 <get_xfileinfo+0xba>
c0002220:	8d 46 38             	lea    eax,[esi+0x38]
c0002223:	e8 68 fa ff ff       	call   c0001c90 <ld_qword>
c0002228:	89 03                	mov    DWORD PTR [ebx],eax
c000222a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002230:	e8 36 fa ff ff       	call   c0001c6b <ld_word>
c0002235:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002239:	8d 46 0e             	lea    eax,[esi+0xe]
c000223c:	e8 2a fa ff ff       	call   c0001c6b <ld_word>
c0002241:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002245:	83 c4 0c             	add    esp,0xc
c0002248:	5b                   	pop    ebx
c0002249:	5e                   	pop    esi
c000224a:	5f                   	pop    edi
c000224b:	5d                   	pop    ebp
c000224c:	c3                   	ret    

c000224d <get_ldnumber>:
c000224d:	8b 10                	mov    edx,DWORD PTR [eax]
c000224f:	85 d2                	test   edx,edx
c0002251:	74 14                	je     c0002267 <get_ldnumber+0x1a>
c0002253:	56                   	push   esi
c0002254:	53                   	push   ebx
c0002255:	89 d3                	mov    ebx,edx
c0002257:	43                   	inc    ebx
c0002258:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000225b:	80 f9 1f             	cmp    cl,0x1f
c000225e:	76 0d                	jbe    c000226d <get_ldnumber+0x20>
c0002260:	80 f9 3a             	cmp    cl,0x3a
c0002263:	75 f2                	jne    c0002257 <get_ldnumber+0xa>
c0002265:	eb 0a                	jmp    c0002271 <get_ldnumber+0x24>
c0002267:	83 c9 ff             	or     ecx,0xffffffff
c000226a:	89 c8                	mov    eax,ecx
c000226c:	c3                   	ret    
c000226d:	31 c9                	xor    ecx,ecx
c000226f:	eb 24                	jmp    c0002295 <get_ldnumber+0x48>
c0002271:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002274:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002277:	80 f9 09             	cmp    cl,0x9
c000227a:	77 16                	ja     c0002292 <get_ldnumber+0x45>
c000227c:	83 c2 02             	add    edx,0x2
c000227f:	83 c9 ff             	or     ecx,0xffffffff
c0002282:	39 d3                	cmp    ebx,edx
c0002284:	75 0f                	jne    c0002295 <get_ldnumber+0x48>
c0002286:	89 f2                	mov    edx,esi
c0002288:	89 18                	mov    DWORD PTR [eax],ebx
c000228a:	0f be ca             	movsx  ecx,dl
c000228d:	83 e9 30             	sub    ecx,0x30
c0002290:	eb 03                	jmp    c0002295 <get_ldnumber+0x48>
c0002292:	83 c9 ff             	or     ecx,0xffffffff
c0002295:	89 c8                	mov    eax,ecx
c0002297:	5b                   	pop    ebx
c0002298:	5e                   	pop    esi
c0002299:	c3                   	ret    

c000229a <crc32>:
c000229a:	56                   	push   esi
c000229b:	89 d6                	mov    esi,edx
c000229d:	53                   	push   ebx
c000229e:	b2 01                	mov    dl,0x1
c00022a0:	bb 08 00 00 00       	mov    ebx,0x8
c00022a5:	89 f1                	mov    ecx,esi
c00022a7:	84 d1                	test   cl,dl
c00022a9:	0f 95 c1             	setne  cl
c00022ac:	0f b6 c9             	movzx  ecx,cl
c00022af:	31 c1                	xor    ecx,eax
c00022b1:	89 c8                	mov    eax,ecx
c00022b3:	d1 e8                	shr    eax,1
c00022b5:	80 e1 01             	and    cl,0x1
c00022b8:	74 05                	je     c00022bf <crc32+0x25>
c00022ba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bf:	d1 e2                	shl    edx,1
c00022c1:	4b                   	dec    ebx
c00022c2:	75 e1                	jne    c00022a5 <crc32+0xb>
c00022c4:	5b                   	pop    ebx
c00022c5:	5e                   	pop    esi
c00022c6:	c3                   	ret    

c00022c7 <test_gpt_header>:
c00022c7:	55                   	push   ebp
c00022c8:	b9 10 00 00 00       	mov    ecx,0x10
c00022cd:	57                   	push   edi
c00022ce:	ba c0 9c 02 c0       	mov    edx,0xc0029cc0
c00022d3:	56                   	push   esi
c00022d4:	31 ff                	xor    edi,edi
c00022d6:	53                   	push   ebx
c00022d7:	89 c3                	mov    ebx,eax
c00022d9:	e8 2c fa ff ff       	call   c0001d0a <mem_cmp>
c00022de:	85 c0                	test   eax,eax
c00022e0:	75 55                	jne    c0002337 <test_gpt_header+0x70>
c00022e2:	89 c7                	mov    edi,eax
c00022e4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e9:	83 ce ff             	or     esi,0xffffffff
c00022ec:	31 d2                	xor    edx,edx
c00022ee:	83 fd 03             	cmp    ebp,0x3
c00022f1:	76 05                	jbe    c00022f8 <test_gpt_header+0x31>
c00022f3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f8:	89 f0                	mov    eax,esi
c00022fa:	45                   	inc    ebp
c00022fb:	e8 9a ff ff ff       	call   c000229a <crc32>
c0002300:	83 fd 4c             	cmp    ebp,0x4c
c0002303:	89 c6                	mov    esi,eax
c0002305:	75 e5                	jne    c00022ec <test_gpt_header+0x25>
c0002307:	8d 43 10             	lea    eax,[ebx+0x10]
c000230a:	f7 d6                	not    esi
c000230c:	e8 67 f9 ff ff       	call   c0001c78 <ld_dword>
c0002311:	39 c6                	cmp    esi,eax
c0002313:	75 22                	jne    c0002337 <test_gpt_header+0x70>
c0002315:	8d 43 54             	lea    eax,[ebx+0x54]
c0002318:	e8 5b f9 ff ff       	call   c0001c78 <ld_dword>
c000231d:	83 c0 80             	add    eax,0xffffff80
c0002320:	75 15                	jne    c0002337 <test_gpt_header+0x70>
c0002322:	8d 43 50             	lea    eax,[ebx+0x50]
c0002325:	e8 4e f9 ff ff       	call   c0001c78 <ld_dword>
c000232a:	3d 80 00 00 00       	cmp    eax,0x80
c000232f:	0f 96 c0             	setbe  al
c0002332:	0f b6 c0             	movzx  eax,al
c0002335:	89 c7                	mov    edi,eax
c0002337:	5b                   	pop    ebx
c0002338:	89 f8                	mov    eax,edi
c000233a:	5e                   	pop    esi
c000233b:	5f                   	pop    edi
c000233c:	5d                   	pop    ebp
c000233d:	c3                   	ret    

c000233e <make_rand>:
c000233e:	56                   	push   esi
c000233f:	85 c0                	test   eax,eax
c0002341:	53                   	push   ebx
c0002342:	75 05                	jne    c0002349 <make_rand+0xb>
c0002344:	b8 01 00 00 00       	mov    eax,0x1
c0002349:	01 d1                	add    ecx,edx
c000234b:	bb 08 00 00 00       	mov    ebx,0x8
c0002350:	89 c6                	mov    esi,eax
c0002352:	d1 e8                	shr    eax,1
c0002354:	83 e6 01             	and    esi,0x1
c0002357:	85 f6                	test   esi,esi
c0002359:	74 05                	je     c0002360 <make_rand+0x22>
c000235b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002360:	4b                   	dec    ebx
c0002361:	75 ed                	jne    c0002350 <make_rand+0x12>
c0002363:	42                   	inc    edx
c0002364:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002367:	39 ca                	cmp    edx,ecx
c0002369:	75 e0                	jne    c000234b <make_rand+0xd>
c000236b:	5b                   	pop    ebx
c000236c:	5e                   	pop    esi
c000236d:	c3                   	ret    

c000236e <validate>:
c000236e:	56                   	push   esi
c000236f:	53                   	push   ebx
c0002370:	89 d6                	mov    esi,edx
c0002372:	51                   	push   ecx
c0002373:	85 c0                	test   eax,eax
c0002375:	75 09                	jne    c0002380 <validate+0x12>
c0002377:	b8 09 00 00 00       	mov    eax,0x9
c000237c:	31 c9                	xor    ecx,ecx
c000237e:	eb 2f                	jmp    c00023af <validate+0x41>
c0002380:	89 c3                	mov    ebx,eax
c0002382:	8b 00                	mov    eax,DWORD PTR [eax]
c0002384:	85 c0                	test   eax,eax
c0002386:	74 ef                	je     c0002377 <validate+0x9>
c0002388:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000238b:	74 ea                	je     c0002377 <validate+0x9>
c000238d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002391:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002395:	75 e0                	jne    c0002377 <validate+0x9>
c0002397:	83 ec 0c             	sub    esp,0xc
c000239a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239e:	50                   	push   eax
c000239f:	e8 76 f8 ff ff       	call   c0001c1a <disk_status>
c00023a4:	83 c4 10             	add    esp,0x10
c00023a7:	a8 01                	test   al,0x1
c00023a9:	75 cc                	jne    c0002377 <validate+0x9>
c00023ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ad:	31 c0                	xor    eax,eax
c00023af:	89 0e                	mov    DWORD PTR [esi],ecx
c00023b1:	5a                   	pop    edx
c00023b2:	5b                   	pop    ebx
c00023b3:	5e                   	pop    esi
c00023b4:	c3                   	ret    

c00023b5 <sync_window>:
c00023b5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b9:	0f 84 85 00 00 00    	je     c0002444 <sync_window+0x8f>
c00023bf:	55                   	push   ebp
c00023c0:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c3:	57                   	push   edi
c00023c4:	56                   	push   esi
c00023c5:	53                   	push   ebx
c00023c6:	89 c3                	mov    ebx,eax
c00023c8:	83 ec 28             	sub    esp,0x28
c00023cb:	6a 01                	push   0x1
c00023cd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023d0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d3:	55                   	push   ebp
c00023d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d8:	50                   	push   eax
c00023d9:	e8 58 f8 ff ff       	call   c0001c36 <disk_write>
c00023de:	83 c4 20             	add    esp,0x20
c00023e1:	ba 01 00 00 00       	mov    edx,0x1
c00023e6:	85 c0                	test   eax,eax
c00023e8:	75 50                	jne    c000243a <sync_window+0x85>
c00023ea:	31 ff                	xor    edi,edi
c00023ec:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023fa:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fd:	89 c6                	mov    esi,eax
c00023ff:	89 d7                	mov    edi,edx
c0002401:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002404:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002408:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000240b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002413:	73 23                	jae    c0002438 <sync_window+0x83>
c0002415:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002419:	75 1d                	jne    c0002438 <sync_window+0x83>
c000241b:	83 ec 0c             	sub    esp,0xc
c000241e:	6a 01                	push   0x1
c0002420:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002424:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002428:	52                   	push   edx
c0002429:	50                   	push   eax
c000242a:	55                   	push   ebp
c000242b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242f:	50                   	push   eax
c0002430:	e8 01 f8 ff ff       	call   c0001c36 <disk_write>
c0002435:	83 c4 20             	add    esp,0x20
c0002438:	31 d2                	xor    edx,edx
c000243a:	83 c4 1c             	add    esp,0x1c
c000243d:	89 d0                	mov    eax,edx
c000243f:	5b                   	pop    ebx
c0002440:	5e                   	pop    esi
c0002441:	5f                   	pop    edi
c0002442:	5d                   	pop    ebp
c0002443:	c3                   	ret    
c0002444:	31 d2                	xor    edx,edx
c0002446:	89 d0                	mov    eax,edx
c0002448:	c3                   	ret    

c0002449 <move_window>:
c0002449:	56                   	push   esi
c000244a:	53                   	push   ebx
c000244b:	89 c3                	mov    ebx,eax
c000244d:	83 ec 14             	sub    esp,0x14
c0002450:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002453:	75 07                	jne    c000245c <move_window+0x13>
c0002455:	31 f6                	xor    esi,esi
c0002457:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000245a:	74 59                	je     c00024b5 <move_window+0x6c>
c000245c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002460:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002464:	89 d8                	mov    eax,ebx
c0002466:	e8 4a ff ff ff       	call   c00023b5 <sync_window>
c000246b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246f:	89 c6                	mov    esi,eax
c0002471:	85 c0                	test   eax,eax
c0002473:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002477:	75 3c                	jne    c00024b5 <move_window+0x6c>
c0002479:	83 ec 0c             	sub    esp,0xc
c000247c:	8d 43 54             	lea    eax,[ebx+0x54]
c000247f:	6a 01                	push   0x1
c0002481:	51                   	push   ecx
c0002482:	52                   	push   edx
c0002483:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002487:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000248b:	50                   	push   eax
c000248c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002490:	50                   	push   eax
c0002491:	e8 8a f7 ff ff       	call   c0001c20 <disk_read>
c0002496:	83 c4 20             	add    esp,0x20
c0002499:	85 c0                	test   eax,eax
c000249b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a3:	74 0a                	je     c00024af <move_window+0x66>
c00024a5:	83 ca ff             	or     edx,0xffffffff
c00024a8:	be 01 00 00 00       	mov    esi,0x1
c00024ad:	89 d1                	mov    ecx,edx
c00024af:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b5:	89 f0                	mov    eax,esi
c00024b7:	83 c4 14             	add    esp,0x14
c00024ba:	5b                   	pop    ebx
c00024bb:	5e                   	pop    esi
c00024bc:	c3                   	ret    

c00024bd <check_fs>:
c00024bd:	53                   	push   ebx
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	83 ec 08             	sub    esp,0x8
c00024c3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024ce:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d5:	e8 6f ff ff ff       	call   c0002449 <move_window>
c00024da:	ba 04 00 00 00       	mov    edx,0x4
c00024df:	85 c0                	test   eax,eax
c00024e1:	0f 85 89 00 00 00    	jne    c0002570 <check_fs+0xb3>
c00024e7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024ed:	e8 79 f7 ff ff       	call   c0001c6b <ld_word>
c00024f2:	ba 03 00 00 00       	mov    edx,0x3
c00024f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00024fb:	75 73                	jne    c0002570 <check_fs+0xb3>
c00024fd:	ba e0 9d 02 c0       	mov    edx,0xc0029de0
c0002502:	8d 43 54             	lea    eax,[ebx+0x54]
c0002505:	b9 0b 00 00 00       	mov    ecx,0xb
c000250a:	e8 fb f7 ff ff       	call   c0001d0a <mem_cmp>
c000250f:	ba 01 00 00 00       	mov    edx,0x1
c0002514:	85 c0                	test   eax,eax
c0002516:	74 58                	je     c0002570 <check_fs+0xb3>
c0002518:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000251b:	8d 50 18             	lea    edx,[eax+0x18]
c000251e:	80 fa 01             	cmp    dl,0x1
c0002521:	76 09                	jbe    c000252c <check_fs+0x6f>
c0002523:	ba 02 00 00 00       	mov    edx,0x2
c0002528:	3c eb                	cmp    al,0xeb
c000252a:	75 44                	jne    c0002570 <check_fs+0xb3>
c000252c:	ba b0 d2 02 c0       	mov    edx,0xc002d2b0
c0002531:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002537:	b9 03 00 00 00       	mov    ecx,0x3
c000253c:	e8 c9 f7 ff ff       	call   c0001d0a <mem_cmp>
c0002541:	31 d2                	xor    edx,edx
c0002543:	85 c0                	test   eax,eax
c0002545:	74 29                	je     c0002570 <check_fs+0xb3>
c0002547:	ba ec 9d 02 c0       	mov    edx,0xc0029dec
c000254c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002552:	b9 05 00 00 00       	mov    ecx,0x5
c0002557:	e8 ae f7 ff ff       	call   c0001d0a <mem_cmp>
c000255c:	31 d2                	xor    edx,edx
c000255e:	85 c0                	test   eax,eax
c0002560:	74 0e                	je     c0002570 <check_fs+0xb3>
c0002562:	31 d2                	xor    edx,edx
c0002564:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000256b:	0f 95 c2             	setne  dl
c000256e:	01 d2                	add    edx,edx
c0002570:	89 d0                	mov    eax,edx
c0002572:	83 c4 08             	add    esp,0x8
c0002575:	5b                   	pop    ebx
c0002576:	c3                   	ret    

c0002577 <find_volume>:
c0002577:	55                   	push   ebp
c0002578:	31 c9                	xor    ecx,ecx
c000257a:	57                   	push   edi
c000257b:	56                   	push   esi
c000257c:	89 d6                	mov    esi,edx
c000257e:	53                   	push   ebx
c000257f:	31 d2                	xor    edx,edx
c0002581:	83 ec 3c             	sub    esp,0x3c
c0002584:	89 c3                	mov    ebx,eax
c0002586:	e8 32 ff ff ff       	call   c00024bd <check_fs>
c000258b:	83 f8 02             	cmp    eax,0x2
c000258e:	74 0e                	je     c000259e <find_volume+0x27>
c0002590:	0f 87 5d 01 00 00    	ja     c00026f3 <find_volume+0x17c>
c0002596:	85 f6                	test   esi,esi
c0002598:	0f 84 55 01 00 00    	je     c00026f3 <find_volume+0x17c>
c000259e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a5:	0f 85 dd 00 00 00    	jne    c0002688 <find_volume+0x111>
c00025ab:	31 c9                	xor    ecx,ecx
c00025ad:	ba 01 00 00 00       	mov    edx,0x1
c00025b2:	89 d8                	mov    eax,ebx
c00025b4:	e8 90 fe ff ff       	call   c0002449 <move_window>
c00025b9:	85 c0                	test   eax,eax
c00025bb:	74 0a                	je     c00025c7 <find_volume+0x50>
c00025bd:	b8 04 00 00 00       	mov    eax,0x4
c00025c2:	e9 2c 01 00 00       	jmp    c00026f3 <find_volume+0x17c>
c00025c7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025ca:	89 e8                	mov    eax,ebp
c00025cc:	e8 f6 fc ff ff       	call   c00022c7 <test_gpt_header>
c00025d1:	85 c0                	test   eax,eax
c00025d3:	75 0a                	jne    c00025df <find_volume+0x68>
c00025d5:	b8 03 00 00 00       	mov    eax,0x3
c00025da:	e9 14 01 00 00       	jmp    c00026f3 <find_volume+0x17c>
c00025df:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e5:	e8 8e f6 ff ff       	call   c0001c78 <ld_dword>
c00025ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ee:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f4:	e8 97 f6 ff ff       	call   c0001c90 <ld_qword>
c00025f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002601:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002605:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002609:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002611:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002615:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002619:	74 ba                	je     c00025d5 <find_volume+0x5e>
c000261b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261f:	31 c9                	xor    ecx,ecx
c0002621:	c1 e7 07             	shl    edi,0x7
c0002624:	89 d8                	mov    eax,ebx
c0002626:	89 fa                	mov    edx,edi
c0002628:	c1 ea 09             	shr    edx,0x9
c000262b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002633:	e8 11 fe ff ff       	call   c0002449 <move_window>
c0002638:	85 c0                	test   eax,eax
c000263a:	75 81                	jne    c00025bd <find_volume+0x46>
c000263c:	81 e7 80 01 00 00    	and    edi,0x180
c0002642:	b9 10 00 00 00       	mov    ecx,0x10
c0002647:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000264b:	ba d0 9d 02 c0       	mov    edx,0xc0029dd0
c0002650:	e8 b5 f6 ff ff       	call   c0001d0a <mem_cmp>
c0002655:	85 c0                	test   eax,eax
c0002657:	75 29                	jne    c0002682 <find_volume+0x10b>
c0002659:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002661:	e8 2a f6 ff ff       	call   c0001c90 <ld_qword>
c0002666:	89 d1                	mov    ecx,edx
c0002668:	89 c2                	mov    edx,eax
c000266a:	89 d8                	mov    eax,ebx
c000266c:	e8 4c fe ff ff       	call   c00024bd <check_fs>
c0002671:	85 f6                	test   esi,esi
c0002673:	75 07                	jne    c000267c <find_volume+0x105>
c0002675:	83 f8 01             	cmp    eax,0x1
c0002678:	77 08                	ja     c0002682 <find_volume+0x10b>
c000267a:	eb 77                	jmp    c00026f3 <find_volume+0x17c>
c000267c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002680:	74 71                	je     c00026f3 <find_volume+0x17c>
c0002682:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002686:	eb 89                	jmp    c0002611 <find_volume+0x9a>
c0002688:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002692:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002698:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269c:	89 cd                	mov    ebp,ecx
c000269e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a2:	89 f8                	mov    eax,edi
c00026a4:	83 c7 10             	add    edi,0x10
c00026a7:	e8 cc f5 ff ff       	call   c0001c78 <ld_dword>
c00026ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026b0:	89 01                	mov    DWORD PTR [ecx],eax
c00026b2:	83 c1 04             	add    ecx,0x4
c00026b5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b9:	75 e3                	jne    c000269e <find_volume+0x127>
c00026bb:	31 ff                	xor    edi,edi
c00026bd:	85 f6                	test   esi,esi
c00026bf:	74 03                	je     c00026c4 <find_volume+0x14d>
c00026c1:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c8:	85 d2                	test   edx,edx
c00026ca:	74 14                	je     c00026e0 <find_volume+0x169>
c00026cc:	31 c9                	xor    ecx,ecx
c00026ce:	89 d8                	mov    eax,ebx
c00026d0:	e8 e8 fd ff ff       	call   c00024bd <check_fs>
c00026d5:	83 f8 01             	cmp    eax,0x1
c00026d8:	76 19                	jbe    c00026f3 <find_volume+0x17c>
c00026da:	85 f6                	test   esi,esi
c00026dc:	74 0f                	je     c00026ed <find_volume+0x176>
c00026de:	eb 13                	jmp    c00026f3 <find_volume+0x17c>
c00026e0:	85 f6                	test   esi,esi
c00026e2:	0f 85 ed fe ff ff    	jne    c00025d5 <find_volume+0x5e>
c00026e8:	b8 03 00 00 00       	mov    eax,0x3
c00026ed:	47                   	inc    edi
c00026ee:	83 ff 03             	cmp    edi,0x3
c00026f1:	76 d1                	jbe    c00026c4 <find_volume+0x14d>
c00026f3:	83 c4 3c             	add    esp,0x3c
c00026f6:	5b                   	pop    ebx
c00026f7:	5e                   	pop    esi
c00026f8:	5f                   	pop    edi
c00026f9:	5d                   	pop    ebp
c00026fa:	c3                   	ret    

c00026fb <mount_volume>:
c00026fb:	55                   	push   ebp
c00026fc:	57                   	push   edi
c00026fd:	89 cf                	mov    edi,ecx
c00026ff:	56                   	push   esi
c0002700:	53                   	push   ebx
c0002701:	bb 0b 00 00 00       	mov    ebx,0xb
c0002706:	83 ec 3c             	sub    esp,0x3c
c0002709:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002713:	e8 35 fb ff ff       	call   c000224d <get_ldnumber>
c0002718:	85 c0                	test   eax,eax
c000271a:	0f 88 3a 05 00 00    	js     c0002c5a <mount_volume+0x55f>
c0002720:	8b 2c 85 60 ee 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd11a0]
c0002727:	89 c6                	mov    esi,eax
c0002729:	bb 0c 00 00 00       	mov    ebx,0xc
c000272e:	85 ed                	test   ebp,ebp
c0002730:	0f 84 24 05 00 00    	je     c0002c5a <mount_volume+0x55f>
c0002736:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000273a:	83 e7 fe             	and    edi,0xfffffffe
c000273d:	89 2a                	mov    DWORD PTR [edx],ebp
c000273f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002743:	74 32                	je     c0002777 <mount_volume+0x7c>
c0002745:	83 ec 0c             	sub    esp,0xc
c0002748:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274c:	50                   	push   eax
c000274d:	e8 c8 f4 ff ff       	call   c0001c1a <disk_status>
c0002752:	83 c4 10             	add    esp,0x10
c0002755:	a8 01                	test   al,0x1
c0002757:	75 1e                	jne    c0002777 <mount_volume+0x7c>
c0002759:	31 db                	xor    ebx,ebx
c000275b:	89 f9                	mov    ecx,edi
c000275d:	84 c9                	test   cl,cl
c000275f:	0f 84 f5 04 00 00    	je     c0002c5a <mount_volume+0x55f>
c0002765:	a8 04                	test   al,0x4
c0002767:	0f 84 ed 04 00 00    	je     c0002c5a <mount_volume+0x55f>
c000276d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002772:	e9 e3 04 00 00       	jmp    c0002c5a <mount_volume+0x55f>
c0002777:	83 ec 0c             	sub    esp,0xc
c000277a:	89 f0                	mov    eax,esi
c000277c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002780:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002783:	0f b6 f0             	movzx  esi,al
c0002786:	bb 03 00 00 00       	mov    ebx,0x3
c000278b:	56                   	push   esi
c000278c:	e8 8c f4 ff ff       	call   c0001c1d <disk_initialize>
c0002791:	83 c4 10             	add    esp,0x10
c0002794:	a8 01                	test   al,0x1
c0002796:	0f 85 be 04 00 00    	jne    c0002c5a <mount_volume+0x55f>
c000279c:	89 f9                	mov    ecx,edi
c000279e:	84 c9                	test   cl,cl
c00027a0:	74 04                	je     c00027a6 <mount_volume+0xab>
c00027a2:	a8 04                	test   al,0x4
c00027a4:	75 c7                	jne    c000276d <mount_volume+0x72>
c00027a6:	31 d2                	xor    edx,edx
c00027a8:	89 e8                	mov    eax,ebp
c00027aa:	e8 c8 fd ff ff       	call   c0002577 <find_volume>
c00027af:	83 f8 04             	cmp    eax,0x4
c00027b2:	75 0a                	jne    c00027be <mount_volume+0xc3>
c00027b4:	bb 01 00 00 00       	mov    ebx,0x1
c00027b9:	e9 9c 04 00 00       	jmp    c0002c5a <mount_volume+0x55f>
c00027be:	83 f8 01             	cmp    eax,0x1
c00027c1:	76 0a                	jbe    c00027cd <mount_volume+0xd2>
c00027c3:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c8:	e9 8d 04 00 00       	jmp    c0002c5a <mount_volume+0x55f>
c00027cd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027d0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027db:	75 17                	jne    c00027f4 <mount_volume+0xf9>
c00027dd:	b8 0b 00 00 00       	mov    eax,0xb
c00027e2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e7:	75 da                	jne    c00027c3 <mount_volume+0xc8>
c00027e9:	40                   	inc    eax
c00027ea:	83 f8 40             	cmp    eax,0x40
c00027ed:	75 f3                	jne    c00027e2 <mount_volume+0xe7>
c00027ef:	e9 5a 02 00 00       	jmp    c0002a4e <mount_volume+0x353>
c00027f4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f7:	e8 6f f4 ff ff       	call   c0001c6b <ld_word>
c00027fc:	66 3d 00 02          	cmp    ax,0x200
c0002800:	75 c1                	jne    c00027c3 <mount_volume+0xc8>
c0002802:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002805:	e8 61 f4 ff ff       	call   c0001c6b <ld_word>
c000280a:	0f b7 c0             	movzx  eax,ax
c000280d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002811:	85 c0                	test   eax,eax
c0002813:	75 0c                	jne    c0002821 <mount_volume+0x126>
c0002815:	8d 45 78             	lea    eax,[ebp+0x78]
c0002818:	e8 5b f4 ff ff       	call   c0001c78 <ld_dword>
c000281d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002825:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002828:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000282b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002832:	48                   	dec    eax
c0002833:	3c 01                	cmp    al,0x1
c0002835:	77 8c                	ja     c00027c3 <mount_volume+0xc8>
c0002837:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000283b:	89 c3                	mov    ebx,eax
c000283d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002841:	66 85 c0             	test   ax,ax
c0002844:	0f 84 79 ff ff ff    	je     c00027c3 <mount_volume+0xc8>
c000284a:	8d 40 ff             	lea    eax,[eax-0x1]
c000284d:	85 d8                	test   eax,ebx
c000284f:	0f 85 6e ff ff ff    	jne    c00027c3 <mount_volume+0xc8>
c0002855:	8d 45 65             	lea    eax,[ebp+0x65]
c0002858:	e8 0e f4 ff ff       	call   c0001c6b <ld_word>
c000285d:	89 c7                	mov    edi,eax
c000285f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002863:	a8 0f                	test   al,0xf
c0002865:	0f 85 58 ff ff ff    	jne    c00027c3 <mount_volume+0xc8>
c000286b:	8d 45 67             	lea    eax,[ebp+0x67]
c000286e:	e8 f8 f3 ff ff       	call   c0001c6b <ld_word>
c0002873:	0f b7 f0             	movzx  esi,ax
c0002876:	85 f6                	test   esi,esi
c0002878:	75 0a                	jne    c0002884 <mount_volume+0x189>
c000287a:	8d 45 74             	lea    eax,[ebp+0x74]
c000287d:	e8 f6 f3 ff ff       	call   c0001c78 <ld_dword>
c0002882:	89 c6                	mov    esi,eax
c0002884:	8d 45 62             	lea    eax,[ebp+0x62]
c0002887:	e8 df f3 ff ff       	call   c0001c6b <ld_word>
c000288c:	66 85 c0             	test   ax,ax
c000288f:	0f 84 2e ff ff ff    	je     c00027c3 <mount_volume+0xc8>
c0002895:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000289a:	0f b7 c8             	movzx  ecx,ax
c000289d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a6:	89 fa                	mov    edx,edi
c00028a8:	66 c1 ea 04          	shr    dx,0x4
c00028ac:	0f b7 d2             	movzx  edx,dx
c00028af:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028ba:	39 c6                	cmp    esi,eax
c00028bc:	0f 82 01 ff ff ff    	jb     c00027c3 <mount_volume+0xc8>
c00028c2:	29 c6                	sub    esi,eax
c00028c4:	31 d2                	xor    edx,edx
c00028c6:	89 f0                	mov    eax,esi
c00028c8:	f7 f3                	div    ebx
c00028ca:	39 de                	cmp    esi,ebx
c00028cc:	0f 82 f1 fe ff ff    	jb     c00027c3 <mount_volume+0xc8>
c00028d2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d7:	0f 87 e6 fe ff ff    	ja     c00027c3 <mount_volume+0xc8>
c00028dd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e2:	0f 86 63 03 00 00    	jbe    c0002c4b <mount_volume+0x550>
c00028e8:	bb 03 00 00 00       	mov    ebx,0x3
c00028ed:	8d 70 02             	lea    esi,[eax+0x2]
c00028f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028fb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 c8                	mov    eax,ecx
c0002902:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002905:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002909:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002911:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002915:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002918:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000291b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291f:	31 d2                	xor    edx,edx
c0002921:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002925:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002929:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292f:	83 fb 03             	cmp    ebx,0x3
c0002932:	75 2b                	jne    c000295f <mount_volume+0x264>
c0002934:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002937:	e8 2f f3 ff ff       	call   c0001c6b <ld_word>
c000293c:	66 09 c7             	or     di,ax
c000293f:	0f 85 7e fe ff ff    	jne    c00027c3 <mount_volume+0xc8>
c0002945:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000294b:	c1 e6 02             	shl    esi,0x2
c000294e:	e8 25 f3 ff ff       	call   c0001c78 <ld_dword>
c0002953:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000295a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295d:	eb 30                	jmp    c000298f <mount_volume+0x294>
c000295f:	66 85 ff             	test   di,di
c0002962:	0f 84 5b fe ff ff    	je     c00027c3 <mount_volume+0xc8>
c0002968:	31 d2                	xor    edx,edx
c000296a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002972:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002976:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002979:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297c:	83 fb 02             	cmp    ebx,0x2
c000297f:	75 04                	jne    c0002985 <mount_volume+0x28a>
c0002981:	01 f6                	add    esi,esi
c0002983:	eb 0a                	jmp    c000298f <mount_volume+0x294>
c0002985:	8d 04 76             	lea    eax,[esi+esi*2]
c0002988:	83 e6 01             	and    esi,0x1
c000298b:	d1 e8                	shr    eax,1
c000298d:	01 c6                	add    esi,eax
c000298f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002995:	c1 ee 09             	shr    esi,0x9
c0002998:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299c:	0f 87 21 fe ff ff    	ja     c00027c3 <mount_volume+0xc8>
c00029a2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029b0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b4:	83 fb 03             	cmp    ebx,0x3
c00029b7:	75 7a                	jne    c0002a33 <mount_volume+0x338>
c00029b9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bf:	e8 a7 f2 ff ff       	call   c0001c6b <ld_word>
c00029c4:	66 48                	dec    ax
c00029c6:	75 6b                	jne    c0002a33 <mount_volume+0x338>
c00029c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d0:	83 c2 01             	add    edx,0x1
c00029d3:	89 e8                	mov    eax,ebp
c00029d5:	83 d1 00             	adc    ecx,0x0
c00029d8:	e8 6c fa ff ff       	call   c0002449 <move_window>
c00029dd:	85 c0                	test   eax,eax
c00029df:	75 52                	jne    c0002a33 <mount_volume+0x338>
c00029e1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029eb:	e8 7b f2 ff ff       	call   c0001c6b <ld_word>
c00029f0:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f4:	75 3d                	jne    c0002a33 <mount_volume+0x338>
c00029f6:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f9:	e8 7a f2 ff ff       	call   c0001c78 <ld_dword>
c00029fe:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a03:	75 2e                	jne    c0002a33 <mount_volume+0x338>
c0002a05:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a0b:	e8 68 f2 ff ff       	call   c0001c78 <ld_dword>
c0002a10:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a15:	75 1c                	jne    c0002a33 <mount_volume+0x338>
c0002a17:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1d:	e8 56 f2 ff ff       	call   c0001c78 <ld_dword>
c0002a22:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a25:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a2b:	e8 48 f2 ff ff       	call   c0001c78 <ld_dword>
c0002a30:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a33:	66 a1 40 ee 02 c0    	mov    ax,ds:0xc002ee40
c0002a39:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3c:	40                   	inc    eax
c0002a3d:	31 db                	xor    ebx,ebx
c0002a3f:	66 a3 40 ee 02 c0    	mov    ds:0xc002ee40,ax
c0002a45:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a49:	e9 0c 02 00 00       	jmp    c0002c5a <mount_volume+0x55f>
c0002a4e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a54:	e8 12 f2 ff ff       	call   c0001c6b <ld_word>
c0002a59:	66 3d 00 01          	cmp    ax,0x100
c0002a5d:	0f 85 60 fd ff ff    	jne    c00027c3 <mount_volume+0xc8>
c0002a63:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a6a:	0f 85 53 fd ff ff    	jne    c00027c3 <mount_volume+0xc8>
c0002a70:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a76:	e8 15 f2 ff ff       	call   c0001c90 <ld_qword>
c0002a7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a83:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a89:	e8 ea f1 ff ff       	call   c0001c78 <ld_dword>
c0002a8e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a91:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a97:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a9a:	fe c8                	dec    al
c0002a9c:	0f 85 21 fd ff ff    	jne    c00027c3 <mount_volume+0xc8>
c0002aa2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa9:	bb 01 00 00 00       	mov    ebx,0x1
c0002aae:	d3 e3                	shl    ebx,cl
c0002ab0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab4:	66 85 db             	test   bx,bx
c0002ab7:	0f 84 06 fd ff ff    	je     c00027c3 <mount_volume+0xc8>
c0002abd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac3:	e8 b0 f1 ff ff       	call   c0001c78 <ld_dword>
c0002ac8:	89 c6                	mov    esi,eax
c0002aca:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acf:	0f 87 ee fc ff ff    	ja     c00027c3 <mount_volume+0xc8>
c0002ad5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad9:	8d 40 02             	lea    eax,[eax+0x2]
c0002adc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002adf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aef:	e8 84 f1 ff ff       	call   c0001c78 <ld_dword>
c0002af4:	31 d2                	xor    edx,edx
c0002af6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002afa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b06:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b09:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b12:	e8 61 f1 ff ff       	call   c0001c78 <ld_dword>
c0002b17:	31 d2                	xor    edx,edx
c0002b19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b21:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b25:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b28:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b2b:	0f b7 c3             	movzx  eax,bx
c0002b2e:	31 d2                	xor    edx,edx
c0002b30:	0f af f0             	imul   esi,eax
c0002b33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b37:	89 f0                	mov    eax,esi
c0002b39:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b41:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b45:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b49:	39 c1                	cmp    ecx,eax
c0002b4b:	89 df                	mov    edi,ebx
c0002b4d:	19 d7                	sbb    edi,edx
c0002b4f:	0f 82 6e fc ff ff    	jb     c00027c3 <mount_volume+0xc8>
c0002b55:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b5b:	31 db                	xor    ebx,ebx
c0002b5d:	e8 16 f1 ff ff       	call   c0001c78 <ld_dword>
c0002b62:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b69:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b74:	85 db                	test   ebx,ebx
c0002b76:	75 39                	jne    c0002bb1 <mount_volume+0x4b6>
c0002b78:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b80:	0f 86 3d fc ff ff    	jbe    c00027c3 <mount_volume+0xc8>
c0002b86:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b89:	31 ff                	xor    edi,edi
c0002b8b:	89 e8                	mov    eax,ebp
c0002b8d:	e8 72 f3 ff ff       	call   c0001f04 <clst2sect>
c0002b92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b96:	01 c6                	add    esi,eax
c0002b98:	89 e8                	mov    eax,ebp
c0002b9a:	11 d7                	adc    edi,edx
c0002b9c:	89 f2                	mov    edx,esi
c0002b9e:	89 f9                	mov    ecx,edi
c0002ba0:	e8 a4 f8 ff ff       	call   c0002449 <move_window>
c0002ba5:	85 c0                	test   eax,eax
c0002ba7:	0f 85 07 fc ff ff    	jne    c00027b4 <mount_volume+0xb9>
c0002bad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bb1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb6:	74 0b                	je     c0002bc3 <mount_volume+0x4c8>
c0002bb8:	83 c3 20             	add    ebx,0x20
c0002bbb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bc1:	eb b1                	jmp    c0002b74 <mount_volume+0x479>
c0002bc3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bca:	e8 a9 f0 ff ff       	call   c0001c78 <ld_dword>
c0002bcf:	89 c3                	mov    ebx,eax
c0002bd1:	83 f8 01             	cmp    eax,0x1
c0002bd4:	0f 86 e9 fb ff ff    	jbe    c00027c3 <mount_volume+0xc8>
c0002bda:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdd:	0f 86 e0 fb ff ff    	jbe    c00027c3 <mount_volume+0xc8>
c0002be3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bea:	0f af c2             	imul   eax,edx
c0002bed:	31 d2                	xor    edx,edx
c0002bef:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bfb:	31 c9                	xor    ecx,ecx
c0002bfd:	89 da                	mov    edx,ebx
c0002bff:	89 e8                	mov    eax,ebp
c0002c01:	c1 ea 07             	shr    edx,0x7
c0002c04:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c07:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c0a:	e8 3a f8 ff ff       	call   c0002449 <move_window>
c0002c0f:	85 c0                	test   eax,eax
c0002c11:	0f 85 9d fb ff ff    	jne    c00027b4 <mount_volume+0xb9>
c0002c17:	89 d8                	mov    eax,ebx
c0002c19:	83 e0 7f             	and    eax,0x7f
c0002c1c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1f:	e8 54 f0 ff ff       	call   c0001c78 <ld_dword>
c0002c24:	83 f8 ff             	cmp    eax,0xffffffff
c0002c27:	74 0a                	je     c0002c33 <mount_volume+0x538>
c0002c29:	43                   	inc    ebx
c0002c2a:	39 d8                	cmp    eax,ebx
c0002c2c:	74 cd                	je     c0002bfb <mount_volume+0x500>
c0002c2e:	e9 90 fb ff ff       	jmp    c00027c3 <mount_volume+0xc8>
c0002c33:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c3a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c41:	bb 04 00 00 00       	mov    ebx,0x4
c0002c46:	e9 e8 fd ff ff       	jmp    c0002a33 <mount_volume+0x338>
c0002c4b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c50:	19 db                	sbb    ebx,ebx
c0002c52:	83 c3 02             	add    ebx,0x2
c0002c55:	e9 93 fc ff ff       	jmp    c00028ed <mount_volume+0x1f2>
c0002c5a:	83 c4 3c             	add    esp,0x3c
c0002c5d:	89 d8                	mov    eax,ebx
c0002c5f:	5b                   	pop    ebx
c0002c60:	5e                   	pop    esi
c0002c61:	5f                   	pop    edi
c0002c62:	5d                   	pop    ebp
c0002c63:	c3                   	ret    

c0002c64 <find_bitmap>:
c0002c64:	55                   	push   ebp
c0002c65:	57                   	push   edi
c0002c66:	89 c7                	mov    edi,eax
c0002c68:	56                   	push   esi
c0002c69:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6c:	53                   	push   ebx
c0002c6d:	83 ec 1c             	sub    esp,0x1c
c0002c70:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c77:	83 e8 02             	sub    eax,0x2
c0002c7a:	39 f0                	cmp    eax,esi
c0002c7c:	77 02                	ja     c0002c80 <find_bitmap+0x1c>
c0002c7e:	31 f6                	xor    esi,esi
c0002c80:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c84:	89 f3                	mov    ebx,esi
c0002c86:	31 ed                	xor    ebp,ebp
c0002c88:	31 c9                	xor    ecx,ecx
c0002c8a:	89 da                	mov    edx,ebx
c0002c8c:	89 f8                	mov    eax,edi
c0002c8e:	c1 ea 0c             	shr    edx,0xc
c0002c91:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c94:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c97:	e8 ad f7 ff ff       	call   c0002449 <move_window>
c0002c9c:	85 c0                	test   eax,eax
c0002c9e:	75 68                	jne    c0002d08 <find_bitmap+0xa4>
c0002ca0:	89 da                	mov    edx,ebx
c0002ca2:	89 d9                	mov    ecx,ebx
c0002ca4:	c1 ea 03             	shr    edx,0x3
c0002ca7:	83 e1 07             	and    ecx,0x7
c0002caa:	b8 01 00 00 00       	mov    eax,0x1
c0002caf:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb5:	d3 e0                	shl    eax,cl
c0002cb7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cba:	83 e9 02             	sub    ecx,0x2
c0002cbd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cc1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc5:	43                   	inc    ebx
c0002cc6:	21 c1                	and    ecx,eax
c0002cc8:	d1 e0                	shl    eax,1
c0002cca:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cce:	77 09                	ja     c0002cd9 <find_bitmap+0x75>
c0002cd0:	31 db                	xor    ebx,ebx
c0002cd2:	ba 00 02 00 00       	mov    edx,0x200
c0002cd7:	31 c0                	xor    eax,eax
c0002cd9:	84 c9                	test   cl,cl
c0002cdb:	75 10                	jne    c0002ced <find_bitmap+0x89>
c0002cdd:	45                   	inc    ebp
c0002cde:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce2:	75 0f                	jne    c0002cf3 <find_bitmap+0x8f>
c0002ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce8:	83 c0 02             	add    eax,0x2
c0002ceb:	eb 22                	jmp    c0002d0f <find_bitmap+0xab>
c0002ced:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cf1:	31 ed                	xor    ebp,ebp
c0002cf3:	39 de                	cmp    esi,ebx
c0002cf5:	74 16                	je     c0002d0d <find_bitmap+0xa9>
c0002cf7:	84 c0                	test   al,al
c0002cf9:	75 c6                	jne    c0002cc1 <find_bitmap+0x5d>
c0002cfb:	42                   	inc    edx
c0002cfc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d02:	77 84                	ja     c0002c88 <find_bitmap+0x24>
c0002d04:	b0 01                	mov    al,0x1
c0002d06:	eb b9                	jmp    c0002cc1 <find_bitmap+0x5d>
c0002d08:	83 c8 ff             	or     eax,0xffffffff
c0002d0b:	eb 02                	jmp    c0002d0f <find_bitmap+0xab>
c0002d0d:	31 c0                	xor    eax,eax
c0002d0f:	83 c4 1c             	add    esp,0x1c
c0002d12:	5b                   	pop    ebx
c0002d13:	5e                   	pop    esi
c0002d14:	5f                   	pop    edi
c0002d15:	5d                   	pop    ebp
c0002d16:	c3                   	ret    

c0002d17 <change_bitmap>:
c0002d17:	55                   	push   ebp
c0002d18:	89 cd                	mov    ebp,ecx
c0002d1a:	57                   	push   edi
c0002d1b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1e:	56                   	push   esi
c0002d1f:	89 c7                	mov    edi,eax
c0002d21:	53                   	push   ebx
c0002d22:	89 c8                	mov    eax,ecx
c0002d24:	83 ec 1c             	sub    esp,0x1c
c0002d27:	31 d2                	xor    edx,edx
c0002d29:	89 ce                	mov    esi,ecx
c0002d2b:	c1 e8 0c             	shr    eax,0xc
c0002d2e:	bb 01 00 00 00       	mov    ebx,0x1
c0002d33:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d36:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d39:	c1 ee 03             	shr    esi,0x3
c0002d3c:	83 e1 07             	and    ecx,0x7
c0002d3f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d45:	d3 e3                	shl    ebx,cl
c0002d47:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d4b:	89 c1                	mov    ecx,eax
c0002d4d:	89 d3                	mov    ebx,edx
c0002d4f:	83 c1 01             	add    ecx,0x1
c0002d52:	83 d3 00             	adc    ebx,0x0
c0002d55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d59:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5d:	89 d1                	mov    ecx,edx
c0002d5f:	89 c2                	mov    edx,eax
c0002d61:	89 f8                	mov    eax,edi
c0002d63:	e8 e1 f6 ff ff       	call   c0002449 <move_window>
c0002d68:	89 c1                	mov    ecx,eax
c0002d6a:	85 c0                	test   eax,eax
c0002d6c:	75 48                	jne    c0002db6 <change_bitmap+0x9f>
c0002d6e:	31 d2                	xor    edx,edx
c0002d70:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d74:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d78:	0f 95 c2             	setne  dl
c0002d7b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7f:	74 3c                	je     c0002dbd <change_bitmap+0xa6>
c0002d81:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d85:	4d                   	dec    ebp
c0002d86:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d8a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8e:	74 32                	je     c0002dc2 <change_bitmap+0xab>
c0002d90:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d94:	75 d8                	jne    c0002d6e <change_bitmap+0x57>
c0002d96:	8d 46 01             	lea    eax,[esi+0x1]
c0002d99:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9e:	89 c3                	mov    ebx,eax
c0002da0:	31 f6                	xor    esi,esi
c0002da2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002daa:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002db0:	74 99                	je     c0002d4b <change_bitmap+0x34>
c0002db2:	89 de                	mov    esi,ebx
c0002db4:	eb b8                	jmp    c0002d6e <change_bitmap+0x57>
c0002db6:	b9 01 00 00 00       	mov    ecx,0x1
c0002dbb:	eb 05                	jmp    c0002dc2 <change_bitmap+0xab>
c0002dbd:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc2:	83 c4 1c             	add    esp,0x1c
c0002dc5:	89 c8                	mov    eax,ecx
c0002dc7:	5b                   	pop    ebx
c0002dc8:	5e                   	pop    esi
c0002dc9:	5f                   	pop    edi
c0002dca:	5d                   	pop    ebp
c0002dcb:	c3                   	ret    

c0002dcc <put_fat>:
c0002dcc:	83 fa 01             	cmp    edx,0x1
c0002dcf:	0f 86 7b 01 00 00    	jbe    c0002f50 <put_fat+0x184>
c0002dd5:	55                   	push   ebp
c0002dd6:	57                   	push   edi
c0002dd7:	89 cf                	mov    edi,ecx
c0002dd9:	56                   	push   esi
c0002dda:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddf:	53                   	push   ebx
c0002de0:	89 c6                	mov    esi,eax
c0002de2:	83 ec 1c             	sub    esp,0x1c
c0002de5:	89 d3                	mov    ebx,edx
c0002de7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dea:	0f 86 68 01 00 00    	jbe    c0002f58 <put_fat+0x18c>
c0002df0:	8a 00                	mov    al,BYTE PTR [eax]
c0002df2:	3c 02                	cmp    al,0x2
c0002df4:	0f 84 c7 00 00 00    	je     c0002ec1 <put_fat+0xf5>
c0002dfa:	77 09                	ja     c0002e05 <put_fat+0x39>
c0002dfc:	fe c8                	dec    al
c0002dfe:	74 17                	je     c0002e17 <put_fat+0x4b>
c0002e00:	e9 53 01 00 00       	jmp    c0002f58 <put_fat+0x18c>
c0002e05:	b9 02 00 00 00       	mov    ecx,0x2
c0002e0a:	3c 04                	cmp    al,0x4
c0002e0c:	0f 86 e1 00 00 00    	jbe    c0002ef3 <put_fat+0x127>
c0002e12:	e9 41 01 00 00       	jmp    c0002f58 <put_fat+0x18c>
c0002e17:	89 d5                	mov    ebp,edx
c0002e19:	31 c9                	xor    ecx,ecx
c0002e1b:	d1 ed                	shr    ebp,1
c0002e1d:	89 f0                	mov    eax,esi
c0002e1f:	01 d5                	add    ebp,edx
c0002e21:	89 ea                	mov    edx,ebp
c0002e23:	c1 ea 09             	shr    edx,0x9
c0002e26:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e29:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2c:	e8 18 f6 ff ff       	call   c0002449 <move_window>
c0002e31:	89 c1                	mov    ecx,eax
c0002e33:	85 c0                	test   eax,eax
c0002e35:	0f 85 1d 01 00 00    	jne    c0002f58 <put_fat+0x18c>
c0002e3b:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e42:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e45:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e53:	89 f8                	mov    eax,edi
c0002e55:	83 e3 01             	and    ebx,0x1
c0002e58:	74 0d                	je     c0002e67 <put_fat+0x9b>
c0002e5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5d:	89 fa                	mov    edx,edi
c0002e5f:	83 e0 0f             	and    eax,0xf
c0002e62:	c1 e2 04             	shl    edx,0x4
c0002e65:	09 d0                	or     eax,edx
c0002e67:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6e:	31 c9                	xor    ecx,ecx
c0002e70:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e74:	c1 ea 09             	shr    edx,0x9
c0002e77:	89 f0                	mov    eax,esi
c0002e79:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7f:	e8 c5 f5 ff ff       	call   c0002449 <move_window>
c0002e84:	89 c1                	mov    ecx,eax
c0002e86:	85 c0                	test   eax,eax
c0002e88:	0f 85 ca 00 00 00    	jne    c0002f58 <put_fat+0x18c>
c0002e8e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e92:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e98:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9c:	85 db                	test   ebx,ebx
c0002e9e:	74 07                	je     c0002ea7 <put_fat+0xdb>
c0002ea0:	c1 ef 04             	shr    edi,0x4
c0002ea3:	89 fa                	mov    edx,edi
c0002ea5:	eb 0e                	jmp    c0002eb5 <put_fat+0xe9>
c0002ea7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002eaa:	c1 ef 08             	shr    edi,0x8
c0002ead:	83 e2 f0             	and    edx,0xfffffff0
c0002eb0:	83 e7 0f             	and    edi,0xf
c0002eb3:	09 fa                	or     edx,edi
c0002eb5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ebc:	e9 97 00 00 00       	jmp    c0002f58 <put_fat+0x18c>
c0002ec1:	31 c9                	xor    ecx,ecx
c0002ec3:	c1 ea 08             	shr    edx,0x8
c0002ec6:	89 f0                	mov    eax,esi
c0002ec8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ecb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ece:	e8 76 f5 ff ff       	call   c0002449 <move_window>
c0002ed3:	89 c1                	mov    ecx,eax
c0002ed5:	85 c0                	test   eax,eax
c0002ed7:	75 7f                	jne    c0002f58 <put_fat+0x18c>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	01 db                	add    ebx,ebx
c0002edf:	0f b7 d7             	movzx  edx,di
c0002ee2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eec:	e8 ec ed ff ff       	call   c0001cdd <st_word>
c0002ef1:	eb 53                	jmp    c0002f46 <put_fat+0x17a>
c0002ef3:	31 c9                	xor    ecx,ecx
c0002ef5:	c1 ea 07             	shr    edx,0x7
c0002ef8:	89 f0                	mov    eax,esi
c0002efa:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f00:	e8 44 f5 ff ff       	call   c0002449 <move_window>
c0002f05:	89 c1                	mov    ecx,eax
c0002f07:	85 c0                	test   eax,eax
c0002f09:	75 4d                	jne    c0002f58 <put_fat+0x18c>
c0002f0b:	c1 e3 02             	shl    ebx,0x2
c0002f0e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f14:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f17:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f1b:	74 1c                	je     c0002f39 <put_fat+0x16d>
c0002f1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f21:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f27:	89 d8                	mov    eax,ebx
c0002f29:	e8 4a ed ff ff       	call   c0001c78 <ld_dword>
c0002f2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f32:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f37:	09 c7                	or     edi,eax
c0002f39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3d:	89 fa                	mov    edx,edi
c0002f3f:	89 d8                	mov    eax,ebx
c0002f41:	e8 9b ed ff ff       	call   c0001ce1 <st_dword>
c0002f46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4e:	eb 08                	jmp    c0002f58 <put_fat+0x18c>
c0002f50:	b9 02 00 00 00       	mov    ecx,0x2
c0002f55:	89 c8                	mov    eax,ecx
c0002f57:	c3                   	ret    
c0002f58:	83 c4 1c             	add    esp,0x1c
c0002f5b:	89 c8                	mov    eax,ecx
c0002f5d:	5b                   	pop    ebx
c0002f5e:	5e                   	pop    esi
c0002f5f:	5f                   	pop    edi
c0002f60:	5d                   	pop    ebp
c0002f61:	c3                   	ret    

c0002f62 <fill_last_frag>:
c0002f62:	57                   	push   edi
c0002f63:	89 cf                	mov    edi,ecx
c0002f65:	56                   	push   esi
c0002f66:	89 d6                	mov    esi,edx
c0002f68:	53                   	push   ebx
c0002f69:	89 c3                	mov    ebx,eax
c0002f6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6e:	85 c0                	test   eax,eax
c0002f70:	74 21                	je     c0002f93 <fill_last_frag+0x31>
c0002f72:	89 f9                	mov    ecx,edi
c0002f74:	83 f8 01             	cmp    eax,0x1
c0002f77:	76 05                	jbe    c0002f7e <fill_last_frag+0x1c>
c0002f79:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7c:	29 c1                	sub    ecx,eax
c0002f7e:	8d 56 01             	lea    edx,[esi+0x1]
c0002f81:	29 c2                	sub    edx,eax
c0002f83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f85:	e8 42 fe ff ff       	call   c0002dcc <put_fat>
c0002f8a:	85 c0                	test   eax,eax
c0002f8c:	75 05                	jne    c0002f93 <fill_last_frag+0x31>
c0002f8e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f91:	eb d8                	jmp    c0002f6b <fill_last_frag+0x9>
c0002f93:	5b                   	pop    ebx
c0002f94:	5e                   	pop    esi
c0002f95:	5f                   	pop    edi
c0002f96:	c3                   	ret    

c0002f97 <fill_first_frag>:
c0002f97:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f9b:	75 2d                	jne    c0002fca <fill_first_frag+0x33>
c0002f9d:	57                   	push   edi
c0002f9e:	56                   	push   esi
c0002f9f:	53                   	push   ebx
c0002fa0:	89 c3                	mov    ebx,eax
c0002fa2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa8:	01 d7                	add    edi,edx
c0002faa:	39 fa                	cmp    edx,edi
c0002fac:	74 14                	je     c0002fc2 <fill_first_frag+0x2b>
c0002fae:	8d 72 01             	lea    esi,[edx+0x1]
c0002fb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb3:	89 f1                	mov    ecx,esi
c0002fb5:	e8 12 fe ff ff       	call   c0002dcc <put_fat>
c0002fba:	89 f2                	mov    edx,esi
c0002fbc:	85 c0                	test   eax,eax
c0002fbe:	74 ea                	je     c0002faa <fill_first_frag+0x13>
c0002fc0:	eb 0b                	jmp    c0002fcd <fill_first_frag+0x36>
c0002fc2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc6:	31 c0                	xor    eax,eax
c0002fc8:	eb 03                	jmp    c0002fcd <fill_first_frag+0x36>
c0002fca:	31 c0                	xor    eax,eax
c0002fcc:	c3                   	ret    
c0002fcd:	5b                   	pop    ebx
c0002fce:	5e                   	pop    esi
c0002fcf:	5f                   	pop    edi
c0002fd0:	c3                   	ret    

c0002fd1 <get_fat>:
c0002fd1:	83 fa 01             	cmp    edx,0x1
c0002fd4:	0f 86 db 01 00 00    	jbe    c00031b5 <get_fat+0x1e4>
c0002fda:	55                   	push   ebp
c0002fdb:	b9 01 00 00 00       	mov    ecx,0x1
c0002fe0:	57                   	push   edi
c0002fe1:	56                   	push   esi
c0002fe2:	53                   	push   ebx
c0002fe3:	83 ec 1c             	sub    esp,0x1c
c0002fe6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002feb:	0f 86 cc 01 00 00    	jbe    c00031bd <get_fat+0x1ec>
c0002ff1:	89 c3                	mov    ebx,eax
c0002ff3:	89 d6                	mov    esi,edx
c0002ff5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff7:	3c 02                	cmp    al,0x2
c0002ff9:	0f 84 99 00 00 00    	je     c0003098 <get_fat+0xc7>
c0002fff:	77 09                	ja     c000300a <get_fat+0x39>
c0003001:	fe c8                	dec    al
c0003003:	74 1a                	je     c000301f <get_fat+0x4e>
c0003005:	e9 b3 01 00 00       	jmp    c00031bd <get_fat+0x1ec>
c000300a:	3c 03                	cmp    al,0x3
c000300c:	0f 84 b5 00 00 00    	je     c00030c7 <get_fat+0xf6>
c0003012:	3c 04                	cmp    al,0x4
c0003014:	0f 84 e3 00 00 00    	je     c00030fd <get_fat+0x12c>
c000301a:	e9 9e 01 00 00       	jmp    c00031bd <get_fat+0x1ec>
c000301f:	89 d3                	mov    ebx,edx
c0003021:	31 c9                	xor    ecx,ecx
c0003023:	d1 eb                	shr    ebx,1
c0003025:	89 f8                	mov    eax,edi
c0003027:	01 d3                	add    ebx,edx
c0003029:	89 da                	mov    edx,ebx
c000302b:	c1 ea 09             	shr    edx,0x9
c000302e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003031:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003034:	e8 10 f4 ff ff       	call   c0002449 <move_window>
c0003039:	85 c0                	test   eax,eax
c000303b:	74 08                	je     c0003045 <get_fat+0x74>
c000303d:	83 c9 ff             	or     ecx,0xffffffff
c0003040:	e9 78 01 00 00       	jmp    c00031bd <get_fat+0x1ec>
c0003045:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003048:	31 c9                	xor    ecx,ecx
c000304a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003050:	89 ea                	mov    edx,ebp
c0003052:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003056:	c1 ea 09             	shr    edx,0x9
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 e3 f3 ff ff       	call   c0002449 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 d3                	jne    c000303d <get_fat+0x6c>
c000306a:	0f b6 c3             	movzx  eax,bl
c000306d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003073:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003078:	c1 e3 08             	shl    ebx,0x8
c000307b:	09 c3                	or     ebx,eax
c000307d:	89 d9                	mov    ecx,ebx
c000307f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003085:	83 e6 01             	and    esi,0x1
c0003088:	0f 84 2f 01 00 00    	je     c00031bd <get_fat+0x1ec>
c000308e:	89 d9                	mov    ecx,ebx
c0003090:	c1 e9 04             	shr    ecx,0x4
c0003093:	e9 25 01 00 00       	jmp    c00031bd <get_fat+0x1ec>
c0003098:	31 c9                	xor    ecx,ecx
c000309a:	c1 ea 08             	shr    edx,0x8
c000309d:	89 f8                	mov    eax,edi
c000309f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a5:	e8 9f f3 ff ff       	call   c0002449 <move_window>
c00030aa:	85 c0                	test   eax,eax
c00030ac:	75 8f                	jne    c000303d <get_fat+0x6c>
c00030ae:	01 f6                	add    esi,esi
c00030b0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ba:	e8 ac eb ff ff       	call   c0001c6b <ld_word>
c00030bf:	0f b7 c8             	movzx  ecx,ax
c00030c2:	e9 f6 00 00 00       	jmp    c00031bd <get_fat+0x1ec>
c00030c7:	31 c9                	xor    ecx,ecx
c00030c9:	c1 ea 07             	shr    edx,0x7
c00030cc:	89 f8                	mov    eax,edi
c00030ce:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030d1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d4:	e8 70 f3 ff ff       	call   c0002449 <move_window>
c00030d9:	85 c0                	test   eax,eax
c00030db:	0f 85 5c ff ff ff    	jne    c000303d <get_fat+0x6c>
c00030e1:	c1 e6 02             	shl    esi,0x2
c00030e4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030ea:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ee:	e8 85 eb ff ff       	call   c0001c78 <ld_dword>
c00030f3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f8:	e9 b4 00 00 00       	jmp    c00031b1 <get_fat+0x1e0>
c00030fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003100:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003103:	89 d1                	mov    ecx,edx
c0003105:	09 c1                	or     ecx,eax
c0003107:	74 06                	je     c000310f <get_fat+0x13e>
c0003109:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310d:	75 0f                	jne    c000311e <get_fat+0x14d>
c000310f:	b9 01 00 00 00       	mov    ecx,0x1
c0003114:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003118:	0f 85 9f 00 00 00    	jne    c00031bd <get_fat+0x1ec>
c000311e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003122:	89 f5                	mov    ebp,esi
c0003124:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003129:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312f:	80 f9 02             	cmp    cl,0x2
c0003132:	75 35                	jne    c0003169 <get_fat+0x198>
c0003134:	83 c0 ff             	add    eax,0xffffffff
c0003137:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313c:	83 d2 ff             	adc    edx,0xffffffff
c000313f:	31 db                	xor    ebx,ebx
c0003141:	0f ac d0 09          	shrd   eax,edx,0x9
c0003145:	53                   	push   ebx
c0003146:	c1 ea 09             	shr    edx,0x9
c0003149:	51                   	push   ecx
c000314a:	52                   	push   edx
c000314b:	50                   	push   eax
c000314c:	e8 e3 40 02 00       	call   c0027234 <__udivdi3>
c0003151:	83 c4 10             	add    esp,0x10
c0003154:	b9 01 00 00 00       	mov    ecx,0x1
c0003159:	39 c5                	cmp    ebp,eax
c000315b:	77 60                	ja     c00031bd <get_fat+0x1ec>
c000315d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003162:	74 59                	je     c00031bd <get_fat+0x1ec>
c0003164:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003167:	eb 54                	jmp    c00031bd <get_fat+0x1ec>
c0003169:	80 f9 03             	cmp    cl,0x3
c000316c:	75 05                	jne    c0003173 <get_fat+0x1a2>
c000316e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003171:	77 f1                	ja     c0003164 <get_fat+0x193>
c0003173:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003178:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317c:	75 3f                	jne    c00031bd <get_fat+0x1ec>
c000317e:	31 c9                	xor    ecx,ecx
c0003180:	89 f2                	mov    edx,esi
c0003182:	89 f8                	mov    eax,edi
c0003184:	c1 ea 07             	shr    edx,0x7
c0003187:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000318a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318d:	e8 b7 f2 ff ff       	call   c0002449 <move_window>
c0003192:	85 c0                	test   eax,eax
c0003194:	0f 85 a3 fe ff ff    	jne    c000303d <get_fat+0x6c>
c000319a:	c1 e6 02             	shl    esi,0x2
c000319d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a7:	e8 cc ea ff ff       	call   c0001c78 <ld_dword>
c00031ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031b1:	89 c1                	mov    ecx,eax
c00031b3:	eb 08                	jmp    c00031bd <get_fat+0x1ec>
c00031b5:	b9 01 00 00 00       	mov    ecx,0x1
c00031ba:	89 c8                	mov    eax,ecx
c00031bc:	c3                   	ret    
c00031bd:	83 c4 1c             	add    esp,0x1c
c00031c0:	89 c8                	mov    eax,ecx
c00031c2:	5b                   	pop    ebx
c00031c3:	5e                   	pop    esi
c00031c4:	5f                   	pop    edi
c00031c5:	5d                   	pop    ebp
c00031c6:	c3                   	ret    

c00031c7 <dir_sdi>:
c00031c7:	55                   	push   ebp
c00031c8:	57                   	push   edi
c00031c9:	56                   	push   esi
c00031ca:	53                   	push   ebx
c00031cb:	89 c3                	mov    ebx,eax
c00031cd:	83 ec 1c             	sub    esp,0x1c
c00031d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d2:	31 c0                	xor    eax,eax
c00031d4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d7:	0f 94 c0             	sete   al
c00031da:	48                   	dec    eax
c00031db:	25 00 00 20 f0       	and    eax,0xf0200000
c00031e0:	05 00 00 00 10       	add    eax,0x10000000
c00031e5:	39 d0                	cmp    eax,edx
c00031e7:	77 0a                	ja     c00031f3 <dir_sdi+0x2c>
c00031e9:	b8 02 00 00 00       	mov    eax,0x2
c00031ee:	e9 c4 00 00 00       	jmp    c00032b7 <dir_sdi+0xf0>
c00031f3:	89 d6                	mov    esi,edx
c00031f5:	f6 c2 1f             	test   dl,0x1f
c00031f8:	75 ef                	jne    c00031e9 <dir_sdi+0x22>
c00031fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003200:	85 c9                	test   ecx,ecx
c0003202:	75 2d                	jne    c0003231 <dir_sdi+0x6a>
c0003204:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003207:	77 1b                	ja     c0003224 <dir_sdi+0x5d>
c0003209:	89 f2                	mov    edx,esi
c000320b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320f:	c1 ea 05             	shr    edx,0x5
c0003212:	39 c2                	cmp    edx,eax
c0003214:	73 d3                	jae    c00031e9 <dir_sdi+0x22>
c0003216:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003219:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003222:	eb 4b                	jmp    c000326f <dir_sdi+0xa8>
c0003224:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003227:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000322b:	85 c0                	test   eax,eax
c000322d:	74 da                	je     c0003209 <dir_sdi+0x42>
c000322f:	89 c1                	mov    ecx,eax
c0003231:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003235:	c1 e5 09             	shl    ebp,0x9
c0003238:	89 ca                	mov    edx,ecx
c000323a:	39 ee                	cmp    esi,ebp
c000323c:	72 1c                	jb     c000325a <dir_sdi+0x93>
c000323e:	89 d8                	mov    eax,ebx
c0003240:	e8 8c fd ff ff       	call   c0002fd1 <get_fat>
c0003245:	89 c1                	mov    ecx,eax
c0003247:	83 f8 ff             	cmp    eax,0xffffffff
c000324a:	74 66                	je     c00032b2 <dir_sdi+0xeb>
c000324c:	83 f8 01             	cmp    eax,0x1
c000324f:	76 98                	jbe    c00031e9 <dir_sdi+0x22>
c0003251:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003254:	76 93                	jbe    c00031e9 <dir_sdi+0x22>
c0003256:	29 ee                	sub    esi,ebp
c0003258:	eb de                	jmp    c0003238 <dir_sdi+0x71>
c000325a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325e:	89 f8                	mov    eax,edi
c0003260:	e8 9f ec ff ff       	call   c0001f04 <clst2sect>
c0003265:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003269:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003272:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003275:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003278:	89 d1                	mov    ecx,edx
c000327a:	09 c1                	or     ecx,eax
c000327c:	0f 84 67 ff ff ff    	je     c00031e9 <dir_sdi+0x22>
c0003282:	89 f1                	mov    ecx,esi
c0003284:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328c:	c1 e9 09             	shr    ecx,0x9
c000328f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003293:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003297:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000329b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ae:	31 c0                	xor    eax,eax
c00032b0:	eb 05                	jmp    c00032b7 <dir_sdi+0xf0>
c00032b2:	b8 01 00 00 00       	mov    eax,0x1
c00032b7:	83 c4 1c             	add    esp,0x1c
c00032ba:	5b                   	pop    ebx
c00032bb:	5e                   	pop    esi
c00032bc:	5f                   	pop    edi
c00032bd:	5d                   	pop    ebp
c00032be:	c3                   	ret    

c00032bf <create_chain>:
c00032bf:	55                   	push   ebp
c00032c0:	89 c5                	mov    ebp,eax
c00032c2:	57                   	push   edi
c00032c3:	56                   	push   esi
c00032c4:	53                   	push   ebx
c00032c5:	83 ec 1c             	sub    esp,0x1c
c00032c8:	85 d2                	test   edx,edx
c00032ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032ce:	8b 30                	mov    esi,DWORD PTR [eax]
c00032d0:	75 0e                	jne    c00032e0 <create_chain+0x21>
c00032d2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d5:	85 ff                	test   edi,edi
c00032d7:	74 39                	je     c0003312 <create_chain+0x53>
c00032d9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032dc:	77 39                	ja     c0003317 <create_chain+0x58>
c00032de:	eb 32                	jmp    c0003312 <create_chain+0x53>
c00032e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e4:	e8 e8 fc ff ff       	call   c0002fd1 <get_fat>
c00032e9:	89 c3                	mov    ebx,eax
c00032eb:	83 f8 01             	cmp    eax,0x1
c00032ee:	77 0a                	ja     c00032fa <create_chain+0x3b>
c00032f0:	bb 01 00 00 00       	mov    ebx,0x1
c00032f5:	e9 ba 01 00 00       	jmp    c00034b4 <create_chain+0x1f5>
c00032fa:	83 f8 ff             	cmp    eax,0xffffffff
c00032fd:	0f 84 62 01 00 00    	je     c0003465 <create_chain+0x1a6>
c0003303:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003306:	0f 87 a8 01 00 00    	ja     c00034b4 <create_chain+0x1f5>
c000330c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003310:	eb 05                	jmp    c0003317 <create_chain+0x58>
c0003312:	bf 01 00 00 00       	mov    edi,0x1
c0003317:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000331b:	75 07                	jne    c0003324 <create_chain+0x65>
c000331d:	31 db                	xor    ebx,ebx
c000331f:	e9 90 01 00 00       	jmp    c00034b4 <create_chain+0x1f5>
c0003324:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003327:	75 74                	jne    c000339d <create_chain+0xde>
c0003329:	b9 01 00 00 00       	mov    ecx,0x1
c000332e:	89 fa                	mov    edx,edi
c0003330:	89 f0                	mov    eax,esi
c0003332:	e8 2d f9 ff ff       	call   c0002c64 <find_bitmap>
c0003337:	89 c3                	mov    ebx,eax
c0003339:	8d 40 ff             	lea    eax,[eax-0x1]
c000333c:	83 f8 fd             	cmp    eax,0xfffffffd
c000333f:	0f 87 6f 01 00 00    	ja     c00034b4 <create_chain+0x1f5>
c0003345:	83 ec 0c             	sub    esp,0xc
c0003348:	b9 01 00 00 00       	mov    ecx,0x1
c000334d:	6a 01                	push   0x1
c000334f:	89 da                	mov    edx,ebx
c0003351:	89 f0                	mov    eax,esi
c0003353:	e8 bf f9 ff ff       	call   c0002d17 <change_bitmap>
c0003358:	83 c4 10             	add    esp,0x10
c000335b:	83 f8 02             	cmp    eax,0x2
c000335e:	74 90                	je     c00032f0 <create_chain+0x31>
c0003360:	83 f8 01             	cmp    eax,0x1
c0003363:	0f 84 fc 00 00 00    	je     c0003465 <create_chain+0x1a6>
c0003369:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336e:	75 09                	jne    c0003379 <create_chain+0xba>
c0003370:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003374:	e9 0c 01 00 00       	jmp    c0003485 <create_chain+0x1c6>
c0003379:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337d:	0f 85 e7 00 00 00    	jne    c000346a <create_chain+0x1ab>
c0003383:	8d 57 01             	lea    edx,[edi+0x1]
c0003386:	39 da                	cmp    edx,ebx
c0003388:	0f 84 f7 00 00 00    	je     c0003485 <create_chain+0x1c6>
c000338e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003391:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003395:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003398:	e9 cd 00 00 00       	jmp    c000346a <create_chain+0x1ab>
c000339d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033a1:	75 41                	jne    c00033e4 <create_chain+0x125>
c00033a3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a9:	77 05                	ja     c00033b0 <create_chain+0xf1>
c00033ab:	bb 02 00 00 00       	mov    ebx,0x2
c00033b0:	89 da                	mov    edx,ebx
c00033b2:	89 e8                	mov    eax,ebp
c00033b4:	e8 18 fc ff ff       	call   c0002fd1 <get_fat>
c00033b9:	83 f8 01             	cmp    eax,0x1
c00033bc:	0f 84 2e ff ff ff    	je     c00032f0 <create_chain+0x31>
c00033c2:	83 f8 ff             	cmp    eax,0xffffffff
c00033c5:	0f 84 9a 00 00 00    	je     c0003465 <create_chain+0x1a6>
c00033cb:	85 c0                	test   eax,eax
c00033cd:	74 11                	je     c00033e0 <create_chain+0x121>
c00033cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d2:	83 f8 01             	cmp    eax,0x1
c00033d5:	76 0d                	jbe    c00033e4 <create_chain+0x125>
c00033d7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033da:	76 08                	jbe    c00033e4 <create_chain+0x125>
c00033dc:	89 c7                	mov    edi,eax
c00033de:	eb 04                	jmp    c00033e4 <create_chain+0x125>
c00033e0:	85 db                	test   ebx,ebx
c00033e2:	75 38                	jne    c000341c <create_chain+0x15d>
c00033e4:	89 fb                	mov    ebx,edi
c00033e6:	43                   	inc    ebx
c00033e7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033ea:	77 0e                	ja     c00033fa <create_chain+0x13b>
c00033ec:	83 ff 01             	cmp    edi,0x1
c00033ef:	0f 86 28 ff ff ff    	jbe    c000331d <create_chain+0x5e>
c00033f5:	bb 02 00 00 00       	mov    ebx,0x2
c00033fa:	89 da                	mov    edx,ebx
c00033fc:	89 e8                	mov    eax,ebp
c00033fe:	e8 ce fb ff ff       	call   c0002fd1 <get_fat>
c0003403:	85 c0                	test   eax,eax
c0003405:	74 15                	je     c000341c <create_chain+0x15d>
c0003407:	83 f8 01             	cmp    eax,0x1
c000340a:	0f 84 e0 fe ff ff    	je     c00032f0 <create_chain+0x31>
c0003410:	40                   	inc    eax
c0003411:	74 52                	je     c0003465 <create_chain+0x1a6>
c0003413:	39 fb                	cmp    ebx,edi
c0003415:	75 cf                	jne    c00033e6 <create_chain+0x127>
c0003417:	e9 01 ff ff ff       	jmp    c000331d <create_chain+0x5e>
c000341c:	83 c9 ff             	or     ecx,0xffffffff
c000341f:	89 da                	mov    edx,ebx
c0003421:	89 f0                	mov    eax,esi
c0003423:	e8 a4 f9 ff ff       	call   c0002dcc <put_fat>
c0003428:	85 c0                	test   eax,eax
c000342a:	75 32                	jne    c000345e <create_chain+0x19f>
c000342c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003431:	74 11                	je     c0003444 <create_chain+0x185>
c0003433:	89 d9                	mov    ecx,ebx
c0003435:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003439:	89 f0                	mov    eax,esi
c000343b:	e8 8c f9 ff ff       	call   c0002dcc <put_fat>
c0003440:	85 c0                	test   eax,eax
c0003442:	75 1a                	jne    c000345e <create_chain+0x19f>
c0003444:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003447:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000344a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003450:	39 d0                	cmp    eax,edx
c0003452:	77 04                	ja     c0003458 <create_chain+0x199>
c0003454:	48                   	dec    eax
c0003455:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003458:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345c:	eb 56                	jmp    c00034b4 <create_chain+0x1f5>
c000345e:	48                   	dec    eax
c000345f:	0f 85 8b fe ff ff    	jne    c00032f0 <create_chain+0x31>
c0003465:	83 cb ff             	or     ebx,0xffffffff
c0003468:	eb 4a                	jmp    c00034b4 <create_chain+0x1f5>
c000346a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003471:	41                   	inc    ecx
c0003472:	39 d9                	cmp    ecx,ebx
c0003474:	75 19                	jne    c000348f <create_chain+0x1d0>
c0003476:	b9 02 00 00 00       	mov    ecx,0x2
c000347b:	85 d2                	test   edx,edx
c000347d:	74 03                	je     c0003482 <create_chain+0x1c3>
c000347f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003482:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003485:	85 c0                	test   eax,eax
c0003487:	0f 85 63 fe ff ff    	jne    c00032f0 <create_chain+0x31>
c000348d:	eb b5                	jmp    c0003444 <create_chain+0x185>
c000348f:	85 d2                	test   edx,edx
c0003491:	75 07                	jne    c000349a <create_chain+0x1db>
c0003493:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000349a:	89 d9                	mov    ecx,ebx
c000349c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034a0:	89 e8                	mov    eax,ebp
c00034a2:	e8 bb fa ff ff       	call   c0002f62 <fill_last_frag>
c00034a7:	85 c0                	test   eax,eax
c00034a9:	75 b3                	jne    c000345e <create_chain+0x19f>
c00034ab:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b2:	eb 90                	jmp    c0003444 <create_chain+0x185>
c00034b4:	83 c4 1c             	add    esp,0x1c
c00034b7:	89 d8                	mov    eax,ebx
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <remove_chain>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	83 fa 01             	cmp    edx,0x1
c00034c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034cc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034ce:	77 0a                	ja     c00034da <remove_chain+0x1c>
c00034d0:	b8 02 00 00 00       	mov    eax,0x2
c00034d5:	e9 24 01 00 00       	jmp    c00035fe <remove_chain+0x140>
c00034da:	89 d6                	mov    esi,edx
c00034dc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034df:	76 ef                	jbe    c00034d0 <remove_chain+0x12>
c00034e1:	89 c7                	mov    edi,eax
c00034e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e8:	75 06                	jne    c00034f0 <remove_chain+0x32>
c00034ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ee:	eb 54                	jmp    c0003544 <remove_chain+0x86>
c00034f0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f3:	75 06                	jne    c00034fb <remove_chain+0x3d>
c00034f5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f9:	74 ef                	je     c00034ea <remove_chain+0x2c>
c00034fb:	83 c9 ff             	or     ecx,0xffffffff
c00034fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003502:	89 d8                	mov    eax,ebx
c0003504:	e8 c3 f8 ff ff       	call   c0002dcc <put_fat>
c0003509:	85 c0                	test   eax,eax
c000350b:	74 dd                	je     c00034ea <remove_chain+0x2c>
c000350d:	e9 ec 00 00 00       	jmp    c00035fe <remove_chain+0x140>
c0003512:	83 f8 01             	cmp    eax,0x1
c0003515:	74 b9                	je     c00034d0 <remove_chain+0x12>
c0003517:	83 f8 ff             	cmp    eax,0xffffffff
c000351a:	74 6d                	je     c0003589 <remove_chain+0xcb>
c000351c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351f:	75 6f                	jne    c0003590 <remove_chain+0xd2>
c0003521:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003524:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003527:	8d 51 fe             	lea    edx,[ecx-0x2]
c000352a:	39 d0                	cmp    eax,edx
c000352c:	73 08                	jae    c0003536 <remove_chain+0x78>
c000352e:	40                   	inc    eax
c000352f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003533:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003536:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003539:	39 e9                	cmp    ecx,ebp
c000353b:	75 64                	jne    c00035a1 <remove_chain+0xe3>
c000353d:	89 ee                	mov    esi,ebp
c000353f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003542:	76 0f                	jbe    c0003553 <remove_chain+0x95>
c0003544:	89 f2                	mov    edx,esi
c0003546:	89 f8                	mov    eax,edi
c0003548:	e8 84 fa ff ff       	call   c0002fd1 <get_fat>
c000354d:	89 c5                	mov    ebp,eax
c000354f:	85 c0                	test   eax,eax
c0003551:	75 bf                	jne    c0003512 <remove_chain+0x54>
c0003553:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003556:	0f 85 a0 00 00 00    	jne    c00035fc <remove_chain+0x13e>
c000355c:	eb 6c                	jmp    c00035ca <remove_chain+0x10c>
c000355e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003561:	84 c0                	test   al,al
c0003563:	75 7d                	jne    c00035e2 <remove_chain+0x124>
c0003565:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003568:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356c:	0f 84 86 00 00 00    	je     c00035f8 <remove_chain+0x13a>
c0003572:	89 da                	mov    edx,ebx
c0003574:	89 f8                	mov    eax,edi
c0003576:	e8 56 fa ff ff       	call   c0002fd1 <get_fat>
c000357b:	83 f8 01             	cmp    eax,0x1
c000357e:	0f 86 4c ff ff ff    	jbe    c00034d0 <remove_chain+0x12>
c0003584:	83 f8 ff             	cmp    eax,0xffffffff
c0003587:	75 4e                	jne    c00035d7 <remove_chain+0x119>
c0003589:	b8 01 00 00 00       	mov    eax,0x1
c000358e:	eb 6e                	jmp    c00035fe <remove_chain+0x140>
c0003590:	31 c9                	xor    ecx,ecx
c0003592:	89 f2                	mov    edx,esi
c0003594:	89 d8                	mov    eax,ebx
c0003596:	e8 31 f8 ff ff       	call   c0002dcc <put_fat>
c000359b:	85 c0                	test   eax,eax
c000359d:	74 82                	je     c0003521 <remove_chain+0x63>
c000359f:	eb 5d                	jmp    c00035fe <remove_chain+0x140>
c00035a1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a4:	75 1b                	jne    c00035c1 <remove_chain+0x103>
c00035a6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035aa:	89 d8                	mov    eax,ebx
c00035ac:	83 ec 0c             	sub    esp,0xc
c00035af:	6a 00                	push   0x0
c00035b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b5:	e8 5d f7 ff ff       	call   c0002d17 <change_bitmap>
c00035ba:	83 c4 10             	add    esp,0x10
c00035bd:	85 c0                	test   eax,eax
c00035bf:	75 3d                	jne    c00035fe <remove_chain+0x140>
c00035c1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c5:	e9 73 ff ff ff       	jmp    c000353d <remove_chain+0x7f>
c00035ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cf:	75 8d                	jne    c000355e <remove_chain+0xa0>
c00035d1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d5:	eb 25                	jmp    c00035fc <remove_chain+0x13e>
c00035d7:	8d 53 01             	lea    edx,[ebx+0x1]
c00035da:	89 c3                	mov    ebx,eax
c00035dc:	39 c2                	cmp    edx,eax
c00035de:	74 88                	je     c0003568 <remove_chain+0xaa>
c00035e0:	eb 1a                	jmp    c00035fc <remove_chain+0x13e>
c00035e2:	3c 03                	cmp    al,0x3
c00035e4:	75 16                	jne    c00035fc <remove_chain+0x13e>
c00035e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ed:	77 0d                	ja     c00035fc <remove_chain+0x13e>
c00035ef:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f6:	72 04                	jb     c00035fc <remove_chain+0x13e>
c00035f8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fc:	31 c0                	xor    eax,eax
c00035fe:	83 c4 1c             	add    esp,0x1c
c0003601:	5b                   	pop    ebx
c0003602:	5e                   	pop    esi
c0003603:	5f                   	pop    edi
c0003604:	5d                   	pop    ebp
c0003605:	c3                   	ret    

c0003606 <dir_clear>:
c0003606:	55                   	push   ebp
c0003607:	57                   	push   edi
c0003608:	56                   	push   esi
c0003609:	89 c6                	mov    esi,eax
c000360b:	53                   	push   ebx
c000360c:	83 ec 1c             	sub    esp,0x1c
c000360f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003613:	e8 9d ed ff ff       	call   c00023b5 <sync_window>
c0003618:	85 c0                	test   eax,eax
c000361a:	0f 85 de 00 00 00    	jne    c00036fe <dir_clear+0xf8>
c0003620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003624:	89 f0                	mov    eax,esi
c0003626:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003629:	e8 d6 e8 ff ff       	call   c0001f04 <clst2sect>
c000362e:	b9 00 02 00 00       	mov    ecx,0x200
c0003633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003641:	89 e8                	mov    eax,ebp
c0003643:	31 d2                	xor    edx,edx
c0003645:	e8 b5 e6 ff ff       	call   c0001cff <mem_set>
c000364a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364e:	c1 e3 09             	shl    ebx,0x9
c0003651:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003657:	76 1f                	jbe    c0003678 <dir_clear+0x72>
c0003659:	bb 00 80 00 00       	mov    ebx,0x8000
c000365e:	eb 18                	jmp    c0003678 <dir_clear+0x72>
c0003660:	83 ec 0c             	sub    esp,0xc
c0003663:	53                   	push   ebx
c0003664:	e8 35 4e 00 00       	call   c000849e <ff_memalloc>
c0003669:	83 c4 10             	add    esp,0x10
c000366c:	89 c7                	mov    edi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	0f 85 8f 00 00 00    	jne    c0003705 <dir_clear+0xff>
c0003676:	d1 eb                	shr    ebx,1
c0003678:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367e:	77 e0                	ja     c0003660 <dir_clear+0x5a>
c0003680:	31 db                	xor    ebx,ebx
c0003682:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003686:	39 d8                	cmp    eax,ebx
c0003688:	76 66                	jbe    c00036f0 <dir_clear+0xea>
c000368a:	83 ec 0c             	sub    esp,0xc
c000368d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003691:	6a 01                	push   0x1
c0003693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000369b:	55                   	push   ebp
c000369c:	50                   	push   eax
c000369d:	e8 94 e5 ff ff       	call   c0001c36 <disk_write>
c00036a2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036ac:	83 c4 20             	add    esp,0x20
c00036af:	85 c0                	test   eax,eax
c00036b1:	75 3d                	jne    c00036f0 <dir_clear+0xea>
c00036b3:	43                   	inc    ebx
c00036b4:	eb cc                	jmp    c0003682 <dir_clear+0x7c>
c00036b6:	83 ec 0c             	sub    esp,0xc
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	55                   	push   ebp
c00036bc:	89 d8                	mov    eax,ebx
c00036be:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c6:	52                   	push   edx
c00036c7:	50                   	push   eax
c00036c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036cc:	57                   	push   edi
c00036cd:	50                   	push   eax
c00036ce:	e8 63 e5 ff ff       	call   c0001c36 <disk_write>
c00036d3:	83 c4 20             	add    esp,0x20
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 0a                	jne    c00036e4 <dir_clear+0xde>
c00036da:	01 eb                	add    ebx,ebp
c00036dc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036e0:	39 d8                	cmp    eax,ebx
c00036e2:	77 d2                	ja     c00036b6 <dir_clear+0xb0>
c00036e4:	83 ec 0c             	sub    esp,0xc
c00036e7:	57                   	push   edi
c00036e8:	e8 c7 4d 00 00       	call   c00084b4 <ff_memfree>
c00036ed:	83 c4 10             	add    esp,0x10
c00036f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f4:	39 d8                	cmp    eax,ebx
c00036f6:	0f 95 c0             	setne  al
c00036f9:	0f b6 c0             	movzx  eax,al
c00036fc:	eb 19                	jmp    c0003717 <dir_clear+0x111>
c00036fe:	b8 01 00 00 00       	mov    eax,0x1
c0003703:	eb 12                	jmp    c0003717 <dir_clear+0x111>
c0003705:	89 d9                	mov    ecx,ebx
c0003707:	31 d2                	xor    edx,edx
c0003709:	c1 eb 09             	shr    ebx,0x9
c000370c:	e8 ee e5 ff ff       	call   c0001cff <mem_set>
c0003711:	89 dd                	mov    ebp,ebx
c0003713:	31 db                	xor    ebx,ebx
c0003715:	eb c5                	jmp    c00036dc <dir_clear+0xd6>
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	5b                   	pop    ebx
c000371b:	5e                   	pop    esi
c000371c:	5f                   	pop    edi
c000371d:	5d                   	pop    ebp
c000371e:	c3                   	ret    

c000371f <dir_next>:
c000371f:	55                   	push   ebp
c0003720:	57                   	push   edi
c0003721:	56                   	push   esi
c0003722:	53                   	push   ebx
c0003723:	89 c3                	mov    ebx,eax
c0003725:	83 ec 1c             	sub    esp,0x1c
c0003728:	8b 28                	mov    ebp,DWORD PTR [eax]
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003731:	8d 78 20             	lea    edi,[eax+0x20]
c0003734:	31 c0                	xor    eax,eax
c0003736:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000373a:	0f 94 c0             	sete   al
c000373d:	48                   	dec    eax
c000373e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003743:	05 00 00 00 10       	add    eax,0x10000000
c0003748:	39 f8                	cmp    eax,edi
c000374a:	77 0e                	ja     c000375a <dir_next+0x3b>
c000374c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003753:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000375a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003760:	b8 04 00 00 00       	mov    eax,0x4
c0003765:	89 ce                	mov    esi,ecx
c0003767:	09 d6                	or     esi,edx
c0003769:	0f 84 da 00 00 00    	je     c0003849 <dir_next+0x12a>
c000376f:	89 f8                	mov    eax,edi
c0003771:	25 ff 01 00 00       	and    eax,0x1ff
c0003776:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000377a:	0f 85 b9 00 00 00    	jne    c0003839 <dir_next+0x11a>
c0003780:	83 c2 01             	add    edx,0x1
c0003783:	83 d1 00             	adc    ecx,0x0
c0003786:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003789:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378f:	85 d2                	test   edx,edx
c0003791:	75 29                	jne    c00037bc <dir_next+0x9d>
c0003793:	89 fa                	mov    edx,edi
c0003795:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003799:	c1 ea 05             	shr    edx,0x5
c000379c:	39 c2                	cmp    edx,eax
c000379e:	0f 82 95 00 00 00    	jb     c0003839 <dir_next+0x11a>
c00037a4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037ab:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b2:	b8 04 00 00 00       	mov    eax,0x4
c00037b7:	e9 8d 00 00 00       	jmp    c0003849 <dir_next+0x12a>
c00037bc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037c0:	89 f9                	mov    ecx,edi
c00037c2:	48                   	dec    eax
c00037c3:	c1 e9 09             	shr    ecx,0x9
c00037c6:	85 c8                	test   eax,ecx
c00037c8:	75 6f                	jne    c0003839 <dir_next+0x11a>
c00037ca:	89 d8                	mov    eax,ebx
c00037cc:	e8 00 f8 ff ff       	call   c0002fd1 <get_fat>
c00037d1:	89 c6                	mov    esi,eax
c00037d3:	83 f8 01             	cmp    eax,0x1
c00037d6:	77 07                	ja     c00037df <dir_next+0xc0>
c00037d8:	b8 02 00 00 00       	mov    eax,0x2
c00037dd:	eb 6a                	jmp    c0003849 <dir_next+0x12a>
c00037df:	83 f8 ff             	cmp    eax,0xffffffff
c00037e2:	75 07                	jne    c00037eb <dir_next+0xcc>
c00037e4:	b8 01 00 00 00       	mov    eax,0x1
c00037e9:	eb 5e                	jmp    c0003849 <dir_next+0x12a>
c00037eb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ee:	77 37                	ja     c0003827 <dir_next+0x108>
c00037f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f5:	74 ad                	je     c00037a4 <dir_next+0x85>
c00037f7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037fa:	89 d8                	mov    eax,ebx
c00037fc:	e8 be fa ff ff       	call   c00032bf <create_chain>
c0003801:	89 c6                	mov    esi,eax
c0003803:	b8 07 00 00 00       	mov    eax,0x7
c0003808:	85 f6                	test   esi,esi
c000380a:	74 3d                	je     c0003849 <dir_next+0x12a>
c000380c:	83 fe 01             	cmp    esi,0x1
c000380f:	74 c7                	je     c00037d8 <dir_next+0xb9>
c0003811:	83 fe ff             	cmp    esi,0xffffffff
c0003814:	74 ce                	je     c00037e4 <dir_next+0xc5>
c0003816:	89 f2                	mov    edx,esi
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 e7 fd ff ff       	call   c0003606 <dir_clear>
c000381f:	85 c0                	test   eax,eax
c0003821:	75 c1                	jne    c00037e4 <dir_next+0xc5>
c0003823:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003827:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000382a:	89 f2                	mov    edx,esi
c000382c:	89 e8                	mov    eax,ebp
c000382e:	e8 d1 e6 ff ff       	call   c0001f04 <clst2sect>
c0003833:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003836:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003839:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003840:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003844:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003847:	31 c0                	xor    eax,eax
c0003849:	83 c4 1c             	add    esp,0x1c
c000384c:	5b                   	pop    ebx
c000384d:	5e                   	pop    esi
c000384e:	5f                   	pop    edi
c000384f:	5d                   	pop    ebp
c0003850:	c3                   	ret    

c0003851 <load_xdir>:
c0003851:	55                   	push   ebp
c0003852:	57                   	push   edi
c0003853:	56                   	push   esi
c0003854:	89 c6                	mov    esi,eax
c0003856:	53                   	push   ebx
c0003857:	83 ec 1c             	sub    esp,0x1c
c000385a:	8b 00                	mov    eax,DWORD PTR [eax]
c000385c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003862:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003865:	e8 df eb ff ff       	call   c0002449 <move_window>
c000386a:	89 c3                	mov    ebx,eax
c000386c:	85 c0                	test   eax,eax
c000386e:	0f 85 0c 01 00 00    	jne    c0003980 <load_xdir+0x12f>
c0003874:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003877:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000387a:	0f 85 fb 00 00 00    	jne    c000397b <load_xdir+0x12a>
c0003880:	89 f8                	mov    eax,edi
c0003882:	b9 20 00 00 00       	mov    ecx,0x20
c0003887:	e8 5e e4 ff ff       	call   c0001cea <mem_cpy>
c000388c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003890:	40                   	inc    eax
c0003891:	c1 e0 05             	shl    eax,0x5
c0003894:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003898:	83 e8 60             	sub    eax,0x60
c000389b:	3d 00 02 00 00       	cmp    eax,0x200
c00038a0:	0f 87 d5 00 00 00    	ja     c000397b <load_xdir+0x12a>
c00038a6:	31 d2                	xor    edx,edx
c00038a8:	89 f0                	mov    eax,esi
c00038aa:	e8 70 fe ff ff       	call   c000371f <dir_next>
c00038af:	89 c3                	mov    ebx,eax
c00038b1:	83 f8 04             	cmp    eax,0x4
c00038b4:	0f 84 c1 00 00 00    	je     c000397b <load_xdir+0x12a>
c00038ba:	85 c0                	test   eax,eax
c00038bc:	0f 85 be 00 00 00    	jne    c0003980 <load_xdir+0x12f>
c00038c2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00038ca:	e8 7a eb ff ff       	call   c0002449 <move_window>
c00038cf:	89 c3                	mov    ebx,eax
c00038d1:	85 c0                	test   eax,eax
c00038d3:	0f 85 a7 00 00 00    	jne    c0003980 <load_xdir+0x12f>
c00038d9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038dc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038df:	0f 85 96 00 00 00    	jne    c000397b <load_xdir+0x12a>
c00038e5:	8d 47 20             	lea    eax,[edi+0x20]
c00038e8:	b9 20 00 00 00       	mov    ecx,0x20
c00038ed:	e8 f8 e3 ff ff       	call   c0001cea <mem_cpy>
c00038f2:	31 d2                	xor    edx,edx
c00038f4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f8:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fd:	83 c0 2c             	add    eax,0x2c
c0003900:	f7 f1                	div    ecx
c0003902:	c1 e0 05             	shl    eax,0x5
c0003905:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003909:	77 70                	ja     c000397b <load_xdir+0x12a>
c000390b:	bd 40 00 00 00       	mov    ebp,0x40
c0003910:	31 d2                	xor    edx,edx
c0003912:	89 f0                	mov    eax,esi
c0003914:	e8 06 fe ff ff       	call   c000371f <dir_next>
c0003919:	89 c3                	mov    ebx,eax
c000391b:	83 f8 04             	cmp    eax,0x4
c000391e:	74 5b                	je     c000397b <load_xdir+0x12a>
c0003920:	85 c0                	test   eax,eax
c0003922:	75 5c                	jne    c0003980 <load_xdir+0x12f>
c0003924:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003927:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000392a:	8b 06                	mov    eax,DWORD PTR [esi]
c000392c:	e8 18 eb ff ff       	call   c0002449 <move_window>
c0003931:	89 c3                	mov    ebx,eax
c0003933:	85 c0                	test   eax,eax
c0003935:	75 49                	jne    c0003980 <load_xdir+0x12f>
c0003937:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000393a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393d:	75 3c                	jne    c000397b <load_xdir+0x12a>
c000393f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003945:	77 0d                	ja     c0003954 <load_xdir+0x103>
c0003947:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000394a:	b9 20 00 00 00       	mov    ecx,0x20
c000394f:	e8 96 e3 ff ff       	call   c0001cea <mem_cpy>
c0003954:	83 c5 20             	add    ebp,0x20
c0003957:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000395b:	77 b3                	ja     c0003910 <load_xdir+0xbf>
c000395d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003963:	77 1b                	ja     c0003980 <load_xdir+0x12f>
c0003965:	89 f8                	mov    eax,edi
c0003967:	e8 cd e7 ff ff       	call   c0002139 <xdir_sum>
c000396c:	89 c1                	mov    ecx,eax
c000396e:	8d 47 02             	lea    eax,[edi+0x2]
c0003971:	e8 f5 e2 ff ff       	call   c0001c6b <ld_word>
c0003976:	66 39 c1             	cmp    cx,ax
c0003979:	74 05                	je     c0003980 <load_xdir+0x12f>
c000397b:	bb 02 00 00 00       	mov    ebx,0x2
c0003980:	83 c4 1c             	add    esp,0x1c
c0003983:	89 d8                	mov    eax,ebx
c0003985:	5b                   	pop    ebx
c0003986:	5e                   	pop    esi
c0003987:	5f                   	pop    edi
c0003988:	5d                   	pop    ebp
c0003989:	c3                   	ret    

c000398a <load_obj_xdir>:
c000398a:	53                   	push   ebx
c000398b:	89 c3                	mov    ebx,eax
c000398d:	83 ec 08             	sub    esp,0x8
c0003990:	8b 02                	mov    eax,DWORD PTR [edx]
c0003992:	89 03                	mov    DWORD PTR [ebx],eax
c0003994:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003997:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000399a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039aa:	30 c0                	xor    al,al
c00039ac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b6:	89 d8                	mov    eax,ebx
c00039b8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039bb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039be:	e8 04 f8 ff ff       	call   c00031c7 <dir_sdi>
c00039c3:	85 c0                	test   eax,eax
c00039c5:	75 0b                	jne    c00039d2 <load_obj_xdir+0x48>
c00039c7:	89 d8                	mov    eax,ebx
c00039c9:	83 c4 08             	add    esp,0x8
c00039cc:	5b                   	pop    ebx
c00039cd:	e9 7f fe ff ff       	jmp    c0003851 <load_xdir>
c00039d2:	83 c4 08             	add    esp,0x8
c00039d5:	5b                   	pop    ebx
c00039d6:	c3                   	ret    

c00039d7 <dir_read>:
c00039d7:	55                   	push   ebp
c00039d8:	bd 04 00 00 00       	mov    ebp,0x4
c00039dd:	57                   	push   edi
c00039de:	56                   	push   esi
c00039df:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e4:	53                   	push   ebx
c00039e5:	89 c3                	mov    ebx,eax
c00039e7:	83 ec 1c             	sub    esp,0x1c
c00039ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ee:	8b 38                	mov    edi,DWORD PTR [eax]
c00039f0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039fb:	89 c8                	mov    eax,ecx
c00039fd:	09 d0                	or     eax,edx
c00039ff:	0f 84 25 01 00 00    	je     c0003b2a <dir_read+0x153>
c0003a05:	89 f8                	mov    eax,edi
c0003a07:	e8 3d ea ff ff       	call   c0002449 <move_window>
c0003a0c:	89 c5                	mov    ebp,eax
c0003a0e:	85 c0                	test   eax,eax
c0003a10:	0f 85 23 01 00 00    	jne    c0003b39 <dir_read+0x162>
c0003a16:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a19:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a1b:	84 c9                	test   cl,cl
c0003a1d:	0f 84 11 01 00 00    	je     c0003b34 <dir_read+0x15d>
c0003a23:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a26:	75 48                	jne    c0003a70 <dir_read+0x99>
c0003a28:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2d:	74 10                	je     c0003a3f <dir_read+0x68>
c0003a2f:	80 f9 83             	cmp    cl,0x83
c0003a32:	0f 85 dd 00 00 00    	jne    c0003b15 <dir_read+0x13e>
c0003a38:	31 ed                	xor    ebp,ebp
c0003a3a:	e9 08 01 00 00       	jmp    c0003b47 <dir_read+0x170>
c0003a3f:	80 f9 85             	cmp    cl,0x85
c0003a42:	0f 85 cd 00 00 00    	jne    c0003b15 <dir_read+0x13e>
c0003a48:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a4b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 fc fd ff ff       	call   c0003851 <load_xdir>
c0003a55:	89 c5                	mov    ebp,eax
c0003a57:	85 c0                	test   eax,eax
c0003a59:	0f 85 da 00 00 00    	jne    c0003b39 <dir_read+0x162>
c0003a5f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a62:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a65:	83 e0 3f             	and    eax,0x3f
c0003a68:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a6b:	e9 d7 00 00 00       	jmp    c0003b47 <dir_read+0x170>
c0003a70:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a73:	83 e0 3f             	and    eax,0x3f
c0003a76:	80 f9 2e             	cmp    cl,0x2e
c0003a79:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a80:	0f 84 8a 00 00 00    	je     c0003b10 <dir_read+0x139>
c0003a86:	80 f9 e5             	cmp    cl,0xe5
c0003a89:	0f 84 81 00 00 00    	je     c0003b10 <dir_read+0x139>
c0003a8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a93:	83 e0 1f             	and    eax,0x1f
c0003a96:	83 f8 08             	cmp    eax,0x8
c0003a99:	0f 94 c0             	sete   al
c0003a9c:	0f b6 c0             	movzx  eax,al
c0003a9f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa3:	75 6b                	jne    c0003b10 <dir_read+0x139>
c0003aa5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aaa:	75 44                	jne    c0003af0 <dir_read+0x119>
c0003aac:	f6 c1 40             	test   cl,0x40
c0003aaf:	74 12                	je     c0003ac3 <dir_read+0xec>
c0003ab1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab4:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003abb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abe:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ac1:	eb 06                	jmp    c0003ac9 <dir_read+0xf2>
c0003ac3:	89 f0                	mov    eax,esi
c0003ac5:	38 c8                	cmp    al,cl
c0003ac7:	75 47                	jne    c0003b10 <dir_read+0x139>
c0003ac9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acd:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad5:	75 3e                	jne    c0003b15 <dir_read+0x13e>
c0003ad7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003adb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ade:	e8 8a e4 ff ff       	call   c0001f6d <pick_lfn>
c0003ae3:	85 c0                	test   eax,eax
c0003ae5:	74 2e                	je     c0003b15 <dir_read+0x13e>
c0003ae7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aeb:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aee:	eb 25                	jmp    c0003b15 <dir_read+0x13e>
c0003af0:	89 f0                	mov    eax,esi
c0003af2:	84 c0                	test   al,al
c0003af4:	75 11                	jne    c0003b07 <dir_read+0x130>
c0003af6:	89 d0                	mov    eax,edx
c0003af8:	e8 2a e6 ff ff       	call   c0002127 <sum_sfn>
c0003afd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b01:	0f 84 31 ff ff ff    	je     c0003a38 <dir_read+0x61>
c0003b07:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0e:	eb 37                	jmp    c0003b47 <dir_read+0x170>
c0003b10:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b15:	31 d2                	xor    edx,edx
c0003b17:	89 d8                	mov    eax,ebx
c0003b19:	e8 01 fc ff ff       	call   c000371f <dir_next>
c0003b1e:	89 c5                	mov    ebp,eax
c0003b20:	85 c0                	test   eax,eax
c0003b22:	0f 84 cd fe ff ff    	je     c00039f5 <dir_read+0x1e>
c0003b28:	eb 0f                	jmp    c0003b39 <dir_read+0x162>
c0003b2a:	85 ed                	test   ebp,ebp
c0003b2c:	0f 84 06 ff ff ff    	je     c0003a38 <dir_read+0x61>
c0003b32:	eb 05                	jmp    c0003b39 <dir_read+0x162>
c0003b34:	bd 04 00 00 00       	mov    ebp,0x4
c0003b39:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b47:	83 c4 1c             	add    esp,0x1c
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	5b                   	pop    ebx
c0003b4d:	5e                   	pop    esi
c0003b4e:	5f                   	pop    edi
c0003b4f:	5d                   	pop    ebp
c0003b50:	c3                   	ret    

c0003b51 <dir_alloc>:
c0003b51:	55                   	push   ebp
c0003b52:	89 d5                	mov    ebp,edx
c0003b54:	57                   	push   edi
c0003b55:	31 d2                	xor    edx,edx
c0003b57:	56                   	push   esi
c0003b58:	53                   	push   ebx
c0003b59:	89 c3                	mov    ebx,eax
c0003b5b:	83 ec 0c             	sub    esp,0xc
c0003b5e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b60:	e8 62 f6 ff ff       	call   c00031c7 <dir_sdi>
c0003b65:	85 c0                	test   eax,eax
c0003b67:	75 4e                	jne    c0003bb7 <dir_alloc+0x66>
c0003b69:	31 f6                	xor    esi,esi
c0003b6b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 d1 e8 ff ff       	call   c0002449 <move_window>
c0003b78:	85 c0                	test   eax,eax
c0003b7a:	75 3b                	jne    c0003bb7 <dir_alloc+0x66>
c0003b7c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b82:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b84:	75 07                	jne    c0003b8d <dir_alloc+0x3c>
c0003b86:	f7 d2                	not    edx
c0003b88:	c0 ea 07             	shr    dl,0x7
c0003b8b:	eb 0d                	jmp    c0003b9a <dir_alloc+0x49>
c0003b8d:	84 d2                	test   dl,dl
c0003b8f:	0f 94 c1             	sete   cl
c0003b92:	80 fa e5             	cmp    dl,0xe5
c0003b95:	0f 94 c2             	sete   dl
c0003b98:	09 ca                	or     edx,ecx
c0003b9a:	84 d2                	test   dl,dl
c0003b9c:	74 07                	je     c0003ba5 <dir_alloc+0x54>
c0003b9e:	46                   	inc    esi
c0003b9f:	39 ee                	cmp    esi,ebp
c0003ba1:	75 04                	jne    c0003ba7 <dir_alloc+0x56>
c0003ba3:	eb 1c                	jmp    c0003bc1 <dir_alloc+0x70>
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	ba 01 00 00 00       	mov    edx,0x1
c0003bac:	89 d8                	mov    eax,ebx
c0003bae:	e8 6c fb ff ff       	call   c000371f <dir_next>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	74 b4                	je     c0003b6b <dir_alloc+0x1a>
c0003bb7:	83 f8 04             	cmp    eax,0x4
c0003bba:	75 05                	jne    c0003bc1 <dir_alloc+0x70>
c0003bbc:	b8 07 00 00 00       	mov    eax,0x7
c0003bc1:	83 c4 0c             	add    esp,0xc
c0003bc4:	5b                   	pop    ebx
c0003bc5:	5e                   	pop    esi
c0003bc6:	5f                   	pop    edi
c0003bc7:	5d                   	pop    ebp
c0003bc8:	c3                   	ret    

c0003bc9 <store_xdir>:
c0003bc9:	55                   	push   ebp
c0003bca:	57                   	push   edi
c0003bcb:	89 c7                	mov    edi,eax
c0003bcd:	56                   	push   esi
c0003bce:	53                   	push   ebx
c0003bcf:	83 ec 0c             	sub    esp,0xc
c0003bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd7:	89 e8                	mov    eax,ebp
c0003bd9:	e8 5b e5 ff ff       	call   c0002139 <xdir_sum>
c0003bde:	0f b7 d0             	movzx  edx,ax
c0003be1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be4:	e8 f4 e0 ff ff       	call   c0001cdd <st_word>
c0003be9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bed:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bf0:	89 f8                	mov    eax,edi
c0003bf2:	e8 d0 f5 ff ff       	call   c00031c7 <dir_sdi>
c0003bf7:	89 c6                	mov    esi,eax
c0003bf9:	85 f6                	test   esi,esi
c0003bfb:	75 3d                	jne    c0003c3a <store_xdir+0x71>
c0003bfd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c00:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c03:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c05:	e8 3f e8 ff ff       	call   c0002449 <move_window>
c0003c0a:	89 c6                	mov    esi,eax
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 2a                	jne    c0003c3a <store_xdir+0x71>
c0003c10:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c13:	b9 20 00 00 00       	mov    ecx,0x20
c0003c18:	89 ea                	mov    edx,ebp
c0003c1a:	e8 cb e0 ff ff       	call   c0001cea <mem_cpy>
c0003c1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c21:	85 db                	test   ebx,ebx
c0003c23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c27:	74 11                	je     c0003c3a <store_xdir+0x71>
c0003c29:	31 d2                	xor    edx,edx
c0003c2b:	89 f8                	mov    eax,edi
c0003c2d:	83 c5 20             	add    ebp,0x20
c0003c30:	e8 ea fa ff ff       	call   c000371f <dir_next>
c0003c35:	4b                   	dec    ebx
c0003c36:	89 c6                	mov    esi,eax
c0003c38:	eb bf                	jmp    c0003bf9 <store_xdir+0x30>
c0003c3a:	89 f0                	mov    eax,esi
c0003c3c:	83 fe 02             	cmp    esi,0x2
c0003c3f:	76 05                	jbe    c0003c46 <store_xdir+0x7d>
c0003c41:	b8 02 00 00 00       	mov    eax,0x2
c0003c46:	83 c4 0c             	add    esp,0xc
c0003c49:	5b                   	pop    ebx
c0003c4a:	5e                   	pop    esi
c0003c4b:	5f                   	pop    edi
c0003c4c:	5d                   	pop    ebp
c0003c4d:	c3                   	ret    

c0003c4e <dir_remove>:
c0003c4e:	57                   	push   edi
c0003c4f:	56                   	push   esi
c0003c50:	53                   	push   ebx
c0003c51:	89 c3                	mov    ebx,eax
c0003c53:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c56:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c58:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c5b:	83 fa ff             	cmp    edx,0xffffffff
c0003c5e:	74 09                	je     c0003c69 <dir_remove+0x1b>
c0003c60:	e8 62 f5 ff ff       	call   c00031c7 <dir_sdi>
c0003c65:	85 c0                	test   eax,eax
c0003c67:	75 41                	jne    c0003caa <dir_remove+0x5c>
c0003c69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6f:	89 f0                	mov    eax,esi
c0003c71:	e8 d3 e7 ff ff       	call   c0002449 <move_window>
c0003c76:	85 c0                	test   eax,eax
c0003c78:	75 26                	jne    c0003ca0 <dir_remove+0x52>
c0003c7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c80:	75 05                	jne    c0003c87 <dir_remove+0x39>
c0003c82:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c85:	eb 03                	jmp    c0003c8a <dir_remove+0x3c>
c0003c87:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c91:	73 17                	jae    c0003caa <dir_remove+0x5c>
c0003c93:	31 d2                	xor    edx,edx
c0003c95:	89 d8                	mov    eax,ebx
c0003c97:	e8 83 fa ff ff       	call   c000371f <dir_next>
c0003c9c:	85 c0                	test   eax,eax
c0003c9e:	74 c9                	je     c0003c69 <dir_remove+0x1b>
c0003ca0:	83 f8 04             	cmp    eax,0x4
c0003ca3:	75 05                	jne    c0003caa <dir_remove+0x5c>
c0003ca5:	b8 02 00 00 00       	mov    eax,0x2
c0003caa:	5b                   	pop    ebx
c0003cab:	5e                   	pop    esi
c0003cac:	5f                   	pop    edi
c0003cad:	c3                   	ret    

c0003cae <create_name>:
c0003cae:	55                   	push   ebp
c0003caf:	89 d5                	mov    ebp,edx
c0003cb1:	57                   	push   edi
c0003cb2:	89 c7                	mov    edi,eax
c0003cb4:	56                   	push   esi
c0003cb5:	31 f6                	xor    esi,esi
c0003cb7:	53                   	push   ebx
c0003cb8:	83 ec 3c             	sub    esp,0x3c
c0003cbb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cc1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cce:	e8 72 e0 ff ff       	call   c0001d45 <tchar2uni>
c0003cd3:	89 c3                	mov    ebx,eax
c0003cd5:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd8:	75 0a                	jne    c0003ce4 <create_name+0x36>
c0003cda:	b8 06 00 00 00       	mov    eax,0x6
c0003cdf:	e9 9e 02 00 00       	jmp    c0003f82 <create_name+0x2d4>
c0003ce4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce9:	76 0c                	jbe    c0003cf7 <create_name+0x49>
c0003ceb:	c1 e8 10             	shr    eax,0x10
c0003cee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf6:	46                   	inc    esi
c0003cf7:	66 83 fb 1f          	cmp    bx,0x1f
c0003cfb:	76 4f                	jbe    c0003d4c <create_name+0x9e>
c0003cfd:	66 83 fb 5c          	cmp    bx,0x5c
c0003d01:	74 35                	je     c0003d38 <create_name+0x8a>
c0003d03:	66 83 fb 2f          	cmp    bx,0x2f
c0003d07:	74 2f                	je     c0003d38 <create_name+0x8a>
c0003d09:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0d:	77 11                	ja     c0003d20 <create_name+0x72>
c0003d0f:	0f b7 d3             	movzx  edx,bx
c0003d12:	b8 f2 9d 02 c0       	mov    eax,0xc0029df2
c0003d17:	e8 11 e0 ff ff       	call   c0001d2d <chk_chr>
c0003d1c:	85 c0                	test   eax,eax
c0003d1e:	75 ba                	jne    c0003cda <create_name+0x2c>
c0003d20:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d26:	77 b2                	ja     c0003cda <create_name+0x2c>
c0003d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d30:	46                   	inc    esi
c0003d31:	eb 97                	jmp    c0003cca <create_name+0x1c>
c0003d33:	40                   	inc    eax
c0003d34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3e:	80 fa 2f             	cmp    dl,0x2f
c0003d41:	74 f0                	je     c0003d33 <create_name+0x85>
c0003d43:	80 fa 5c             	cmp    dl,0x5c
c0003d46:	74 eb                	je     c0003d33 <create_name+0x85>
c0003d48:	31 db                	xor    ebx,ebx
c0003d4a:	eb 02                	jmp    c0003d4e <create_name+0xa0>
c0003d4c:	b3 04                	mov    bl,0x4
c0003d4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d52:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d55:	85 f6                	test   esi,esi
c0003d57:	74 18                	je     c0003d71 <create_name+0xc3>
c0003d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d62:	66 83 f8 20          	cmp    ax,0x20
c0003d66:	74 06                	je     c0003d6e <create_name+0xc0>
c0003d68:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6c:	75 03                	jne    c0003d71 <create_name+0xc3>
c0003d6e:	4e                   	dec    esi
c0003d6f:	eb e4                	jmp    c0003d55 <create_name+0xa7>
c0003d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d75:	31 ed                	xor    ebp,ebp
c0003d77:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7d:	85 f6                	test   esi,esi
c0003d7f:	0f 84 55 ff ff ff    	je     c0003cda <create_name+0x2c>
c0003d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d89:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d90:	66 83 f8 20          	cmp    ax,0x20
c0003d94:	75 04                	jne    c0003d9a <create_name+0xec>
c0003d96:	89 d5                	mov    ebp,edx
c0003d98:	eb eb                	jmp    c0003d85 <create_name+0xd7>
c0003d9a:	85 ed                	test   ebp,ebp
c0003d9c:	75 06                	jne    c0003da4 <create_name+0xf6>
c0003d9e:	66 83 f8 2e          	cmp    ax,0x2e
c0003da2:	75 08                	jne    c0003dac <create_name+0xfe>
c0003da4:	83 cb 03             	or     ebx,0x3
c0003da7:	eb 03                	jmp    c0003dac <create_name+0xfe>
c0003da9:	4e                   	dec    esi
c0003daa:	74 0c                	je     c0003db8 <create_name+0x10a>
c0003dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003db0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db6:	75 f1                	jne    c0003da9 <create_name+0xfb>
c0003db8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dc0:	ba 20 00 00 00       	mov    edx,0x20
c0003dc5:	e8 35 df ff ff       	call   c0001cff <mem_set>
c0003dca:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd2:	31 c9                	xor    ecx,ecx
c0003dd4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ddc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de8:	66 85 ed             	test   bp,bp
c0003deb:	0f 84 30 01 00 00    	je     c0003f21 <create_name+0x273>
c0003df1:	66 83 fd 20          	cmp    bp,0x20
c0003df5:	74 10                	je     c0003e07 <create_name+0x159>
c0003df7:	66 83 fd 2e          	cmp    bp,0x2e
c0003dfb:	75 13                	jne    c0003e10 <create_name+0x162>
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 84 6b 01 00 00    	je     c0003f72 <create_name+0x2c4>
c0003e07:	83 cb 03             	or     ebx,0x3
c0003e0a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0e:	eb c9                	jmp    c0003dd9 <create_name+0x12b>
c0003e10:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e14:	73 0b                	jae    c0003e21 <create_name+0x173>
c0003e16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1a:	75 47                	jne    c0003e63 <create_name+0x1b5>
c0003e1c:	e9 51 01 00 00       	jmp    c0003f72 <create_name+0x2c4>
c0003e21:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e26:	75 10                	jne    c0003e38 <create_name+0x18a>
c0003e28:	83 cb 03             	or     ebx,0x3
c0003e2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e33:	e9 e9 00 00 00       	jmp    c0003f21 <create_name+0x273>
c0003e38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3c:	74 0d                	je     c0003e4b <create_name+0x19d>
c0003e3e:	83 cb 03             	or     ebx,0x3
c0003e41:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e45:	0f 87 d6 00 00 00    	ja     c0003f21 <create_name+0x273>
c0003e4b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e50:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e54:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5c:	b9 08 00 00 00       	mov    ecx,0x8
c0003e61:	eb a7                	jmp    c0003e0a <create_name+0x15c>
c0003e63:	66 83 fd 7f          	cmp    bp,0x7f
c0003e67:	76 68                	jbe    c0003ed1 <create_name+0x223>
c0003e69:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6d:	88 da                	mov    dl,bl
c0003e6f:	83 ca 02             	or     edx,0x2
c0003e72:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e76:	50                   	push   eax
c0003e77:	50                   	push   eax
c0003e78:	68 b5 01 00 00       	push   0x1b5
c0003e7d:	55                   	push   ebp
c0003e7e:	e8 48 46 00 00       	call   c00084cb <ff_uni2oem>
c0003e83:	83 c4 10             	add    esp,0x10
c0003e86:	89 c5                	mov    ebp,eax
c0003e88:	a8 80                	test   al,0x80
c0003e8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e92:	74 0c                	je     c0003ea0 <create_name+0x1f2>
c0003e94:	83 e5 7f             	and    ebp,0x7f
c0003e97:	0f b6 ad 40 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd62c0]
c0003e9e:	eb 2a                	jmp    c0003eca <create_name+0x21c>
c0003ea0:	66 3d ff 00          	cmp    ax,0xff
c0003ea4:	76 24                	jbe    c0003eca <create_name+0x21c>
c0003ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eaa:	48                   	dec    eax
c0003eab:	39 c8                	cmp    eax,ecx
c0003ead:	77 0c                	ja     c0003ebb <create_name+0x20d>
c0003eaf:	83 cb 03             	or     ebx,0x3
c0003eb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb6:	e9 4f ff ff ff       	jmp    c0003e0a <create_name+0x15c>
c0003ebb:	89 e8                	mov    eax,ebp
c0003ebd:	88 d3                	mov    bl,dl
c0003ebf:	66 c1 e8 08          	shr    ax,0x8
c0003ec3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec7:	41                   	inc    ecx
c0003ec8:	eb 4b                	jmp    c0003f15 <create_name+0x267>
c0003eca:	88 d3                	mov    bl,dl
c0003ecc:	66 85 ed             	test   bp,bp
c0003ecf:	74 19                	je     c0003eea <create_name+0x23c>
c0003ed1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed5:	0f b7 d5             	movzx  edx,bp
c0003ed8:	b8 fb 9d 02 c0       	mov    eax,0xc0029dfb
c0003edd:	e8 4b de ff ff       	call   c0001d2d <chk_chr>
c0003ee2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee6:	85 c0                	test   eax,eax
c0003ee8:	74 0a                	je     c0003ef4 <create_name+0x246>
c0003eea:	83 cb 03             	or     ebx,0x3
c0003eed:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef2:	eb 21                	jmp    c0003f15 <create_name+0x267>
c0003ef4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef7:	66 83 f8 19          	cmp    ax,0x19
c0003efb:	77 07                	ja     c0003f04 <create_name+0x256>
c0003efd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f02:	eb 11                	jmp    c0003f15 <create_name+0x267>
c0003f04:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f07:	66 83 f8 19          	cmp    ax,0x19
c0003f0b:	77 08                	ja     c0003f15 <create_name+0x267>
c0003f0d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f12:	83 ed 20             	sub    ebp,0x20
c0003f15:	89 e8                	mov    eax,ebp
c0003f17:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f1b:	41                   	inc    ecx
c0003f1c:	e9 e9 fe ff ff       	jmp    c0003e0a <create_name+0x15c>
c0003f21:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f25:	75 04                	jne    c0003f2b <create_name+0x27d>
c0003f27:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f2b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f30:	75 05                	jne    c0003f37 <create_name+0x289>
c0003f32:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3b:	83 e0 0c             	and    eax,0xc
c0003f3e:	3c 0c                	cmp    al,0xc
c0003f40:	74 0b                	je     c0003f4d <create_name+0x29f>
c0003f42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f46:	83 e0 03             	and    eax,0x3
c0003f49:	3c 03                	cmp    al,0x3
c0003f4b:	75 05                	jne    c0003f52 <create_name+0x2a4>
c0003f4d:	83 cb 02             	or     ebx,0x2
c0003f50:	eb 19                	jmp    c0003f6b <create_name+0x2bd>
c0003f52:	f6 c3 02             	test   bl,0x2
c0003f55:	75 14                	jne    c0003f6b <create_name+0x2bd>
c0003f57:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2b3>
c0003f5e:	83 cb 10             	or     ebx,0x10
c0003f61:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f66:	74 03                	je     c0003f6b <create_name+0x2bd>
c0003f68:	83 cb 08             	or     ebx,0x8
c0003f6b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6e:	31 c0                	xor    eax,eax
c0003f70:	eb 10                	jmp    c0003f82 <create_name+0x2d4>
c0003f72:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f77:	0f 85 ce fe ff ff    	jne    c0003e4b <create_name+0x19d>
c0003f7d:	e9 a6 fe ff ff       	jmp    c0003e28 <create_name+0x17a>
c0003f82:	83 c4 3c             	add    esp,0x3c
c0003f85:	5b                   	pop    ebx
c0003f86:	5e                   	pop    esi
c0003f87:	5f                   	pop    edi
c0003f88:	5d                   	pop    ebp
c0003f89:	c3                   	ret    

c0003f8a <xname_sum>:
c0003f8a:	56                   	push   esi
c0003f8b:	53                   	push   ebx
c0003f8c:	89 c6                	mov    esi,eax
c0003f8e:	51                   	push   ecx
c0003f8f:	31 db                	xor    ebx,ebx
c0003f91:	83 c6 02             	add    esi,0x2
c0003f94:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f98:	66 85 c0             	test   ax,ax
c0003f9b:	74 1f                	je     c0003fbc <xname_sum+0x32>
c0003f9d:	83 ec 0c             	sub    esp,0xc
c0003fa0:	66 d1 cb             	ror    bx,1
c0003fa3:	50                   	push   eax
c0003fa4:	e8 1e 46 00 00       	call   c00085c7 <ff_wtoupper>
c0003fa9:	83 c4 10             	add    esp,0x10
c0003fac:	0f b6 d0             	movzx  edx,al
c0003faf:	66 c1 e8 08          	shr    ax,0x8
c0003fb3:	01 d3                	add    ebx,edx
c0003fb5:	66 d1 cb             	ror    bx,1
c0003fb8:	01 c3                	add    ebx,eax
c0003fba:	eb d5                	jmp    c0003f91 <xname_sum+0x7>
c0003fbc:	89 d8                	mov    eax,ebx
c0003fbe:	5a                   	pop    edx
c0003fbf:	5b                   	pop    ebx
c0003fc0:	5e                   	pop    esi
c0003fc1:	c3                   	ret    

c0003fc2 <create_xdir>:
c0003fc2:	55                   	push   ebp
c0003fc3:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc8:	57                   	push   edi
c0003fc9:	bd 01 00 00 00       	mov    ebp,0x1
c0003fce:	56                   	push   esi
c0003fcf:	31 ff                	xor    edi,edi
c0003fd1:	53                   	push   ebx
c0003fd2:	be 40 00 00 00       	mov    esi,0x40
c0003fd7:	89 c3                	mov    ebx,eax
c0003fd9:	83 ec 1c             	sub    esp,0x1c
c0003fdc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fe0:	31 d2                	xor    edx,edx
c0003fe2:	e8 18 dd ff ff       	call   c0001cff <mem_set>
c0003fe7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fea:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fee:	31 c9                	xor    ecx,ecx
c0003ff0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff7:	83 c6 02             	add    esi,0x2
c0003ffa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffe:	66 85 ed             	test   bp,bp
c0004001:	74 12                	je     c0004015 <create_xdir+0x53>
c0004003:	0f b6 c1             	movzx  eax,cl
c0004006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000400a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400e:	66 83 fd 01          	cmp    bp,0x1
c0004012:	80 d9 ff             	sbb    cl,0xff
c0004015:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004018:	0f b7 d5             	movzx  edx,bp
c000401b:	83 c6 02             	add    esi,0x2
c000401e:	e8 ba dc ff ff       	call   c0001cdd <st_word>
c0004023:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004029:	75 d3                	jne    c0003ffe <create_xdir+0x3c>
c000402b:	8d 47 01             	lea    eax,[edi+0x1]
c000402e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004032:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004036:	0f b6 c1             	movzx  eax,cl
c0004039:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403e:	74 07                	je     c0004047 <create_xdir+0x85>
c0004040:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004045:	eb a9                	jmp    c0003ff0 <create_xdir+0x2e>
c0004047:	8d 47 02             	lea    eax,[edi+0x2]
c000404a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004050:	89 d0                	mov    eax,edx
c0004052:	e8 33 ff ff ff       	call   c0003f8a <xname_sum>
c0004057:	83 c4 1c             	add    esp,0x1c
c000405a:	0f b7 d0             	movzx  edx,ax
c000405d:	8d 43 24             	lea    eax,[ebx+0x24]
c0004060:	5b                   	pop    ebx
c0004061:	5e                   	pop    esi
c0004062:	5f                   	pop    edi
c0004063:	5d                   	pop    ebp
c0004064:	e9 74 dc ff ff       	jmp    c0001cdd <st_word>

c0004069 <cmp_lfn>:
c0004069:	55                   	push   ebp
c000406a:	57                   	push   edi
c000406b:	89 d7                	mov    edi,edx
c000406d:	56                   	push   esi
c000406e:	53                   	push   ebx
c000406f:	83 ec 1c             	sub    esp,0x1c
c0004072:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004076:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004079:	e8 ed db ff ff       	call   c0001c6b <ld_word>
c000407e:	66 85 c0             	test   ax,ax
c0004081:	74 07                	je     c000408a <cmp_lfn+0x21>
c0004083:	31 c0                	xor    eax,eax
c0004085:	e9 9a 00 00 00       	jmp    c0004124 <cmp_lfn+0xbb>
c000408a:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408c:	bd 01 00 00 00       	mov    ebp,0x1
c0004091:	83 e3 3f             	and    ebx,0x3f
c0004094:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409c:	4b                   	dec    ebx
c000409d:	6b db 0d             	imul   ebx,ebx,0xd
c00040a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a4:	0f b6 80 c0 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6240]
c00040ab:	01 f8                	add    eax,edi
c00040ad:	e8 b9 db ff ff       	call   c0001c6b <ld_word>
c00040b2:	66 85 ed             	test   bp,bp
c00040b5:	89 c6                	mov    esi,eax
c00040b7:	74 3c                	je     c00040f5 <cmp_lfn+0x8c>
c00040b9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bf:	77 c2                	ja     c0004083 <cmp_lfn+0x1a>
c00040c1:	83 ec 0c             	sub    esp,0xc
c00040c4:	0f b7 c0             	movzx  eax,ax
c00040c7:	50                   	push   eax
c00040c8:	e8 fa 44 00 00       	call   c00085c7 <ff_wtoupper>
c00040cd:	89 c5                	mov    ebp,eax
c00040cf:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040da:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040de:	89 04 24             	mov    DWORD PTR [esp],eax
c00040e1:	e8 e1 44 00 00       	call   c00085c7 <ff_wtoupper>
c00040e6:	83 c4 10             	add    esp,0x10
c00040e9:	39 c5                	cmp    ebp,eax
c00040eb:	75 96                	jne    c0004083 <cmp_lfn+0x1a>
c00040ed:	89 f5                	mov    ebp,esi
c00040ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f3:	eb 04                	jmp    c00040f9 <cmp_lfn+0x90>
c00040f5:	66 46                	inc    si
c00040f7:	75 8a                	jne    c0004083 <cmp_lfn+0x1a>
c00040f9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004102:	75 9c                	jne    c00040a0 <cmp_lfn+0x37>
c0004104:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004107:	74 16                	je     c000411f <cmp_lfn+0xb6>
c0004109:	66 85 ed             	test   bp,bp
c000410c:	74 11                	je     c000411f <cmp_lfn+0xb6>
c000410e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004112:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004117:	0f 94 c0             	sete   al
c000411a:	0f b6 c0             	movzx  eax,al
c000411d:	eb 05                	jmp    c0004124 <cmp_lfn+0xbb>
c000411f:	b8 01 00 00 00       	mov    eax,0x1
c0004124:	83 c4 1c             	add    esp,0x1c
c0004127:	5b                   	pop    ebx
c0004128:	5e                   	pop    esi
c0004129:	5f                   	pop    edi
c000412a:	5d                   	pop    ebp
c000412b:	c3                   	ret    

c000412c <dir_find>:
c000412c:	55                   	push   ebp
c000412d:	31 d2                	xor    edx,edx
c000412f:	57                   	push   edi
c0004130:	56                   	push   esi
c0004131:	53                   	push   ebx
c0004132:	89 c3                	mov    ebx,eax
c0004134:	83 ec 1c             	sub    esp,0x1c
c0004137:	8b 30                	mov    esi,DWORD PTR [eax]
c0004139:	e8 89 f0 ff ff       	call   c00031c7 <dir_sdi>
c000413e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004141:	85 c0                	test   eax,eax
c0004143:	0f 85 9e 01 00 00    	jne    c00042e7 <dir_find+0x1bb>
c0004149:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414c:	0f 85 8d 00 00 00    	jne    c00041df <dir_find+0xb3>
c0004152:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004155:	e8 30 fe ff ff       	call   c0003f8a <xname_sum>
c000415a:	89 c7                	mov    edi,eax
c000415c:	31 d2                	xor    edx,edx
c000415e:	89 d8                	mov    eax,ebx
c0004160:	e8 72 f8 ff ff       	call   c00039d7 <dir_read>
c0004165:	85 c0                	test   eax,eax
c0004167:	0f 85 5e 01 00 00    	jne    c00042cb <dir_find+0x19f>
c000416d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004170:	8d 41 24             	lea    eax,[ecx+0x24]
c0004173:	e8 f3 da ff ff       	call   c0001c6b <ld_word>
c0004178:	66 39 f8             	cmp    ax,di
c000417b:	75 df                	jne    c000415c <dir_find+0x30>
c000417d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004180:	31 ed                	xor    ebp,ebp
c0004182:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004186:	ba 40 00 00 00       	mov    edx,0x40
c000418b:	89 e9                	mov    ecx,ebp
c000418d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004191:	0f 84 42 01 00 00    	je     c00042d9 <dir_find+0x1ad>
c0004197:	f6 c2 1f             	test   dl,0x1f
c000419a:	75 03                	jne    c000419f <dir_find+0x73>
c000419c:	83 c2 02             	add    edx,0x2
c000419f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a3:	89 d0                	mov    eax,edx
c00041a5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a8:	e8 be da ff ff       	call   c0001c6b <ld_word>
c00041ad:	83 ec 0c             	sub    esp,0xc
c00041b0:	0f b7 c0             	movzx  eax,ax
c00041b3:	50                   	push   eax
c00041b4:	e8 0e 44 00 00       	call   c00085c7 <ff_wtoupper>
c00041b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c7:	e8 fb 43 00 00       	call   c00085c7 <ff_wtoupper>
c00041cc:	83 c4 10             	add    esp,0x10
c00041cf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d3:	75 87                	jne    c000415c <dir_find+0x30>
c00041d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d9:	45                   	inc    ebp
c00041da:	83 c2 02             	add    edx,0x2
c00041dd:	eb ac                	jmp    c000418b <dir_find+0x5f>
c00041df:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f6:	89 f0                	mov    eax,esi
c00041f8:	e8 4c e2 ff ff       	call   c0002449 <move_window>
c00041fd:	85 c0                	test   eax,eax
c00041ff:	0f 85 c6 00 00 00    	jne    c00042cb <dir_find+0x19f>
c0004205:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004208:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000420b:	84 c9                	test   cl,cl
c000420d:	0f 84 bd 00 00 00    	je     c00042d0 <dir_find+0x1a4>
c0004213:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004216:	88 d0                	mov    al,dl
c0004218:	83 e0 3f             	and    eax,0x3f
c000421b:	80 f9 e5             	cmp    cl,0xe5
c000421e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004221:	0f 84 87 00 00 00    	je     c00042ae <dir_find+0x182>
c0004227:	80 e2 08             	and    dl,0x8
c000422a:	74 06                	je     c0004232 <dir_find+0x106>
c000422c:	3c 0f                	cmp    al,0xf
c000422e:	75 7e                	jne    c00042ae <dir_find+0x182>
c0004230:	eb 04                	jmp    c0004236 <dir_find+0x10a>
c0004232:	3c 0f                	cmp    al,0xf
c0004234:	75 4c                	jne    c0004282 <dir_find+0x156>
c0004236:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000423a:	75 7e                	jne    c00042ba <dir_find+0x18e>
c000423c:	f6 c1 40             	test   cl,0x40
c000423f:	74 12                	je     c0004253 <dir_find+0x127>
c0004241:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004244:	83 e1 bf             	and    ecx,0xffffffbf
c0004247:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000424b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004251:	eb 06                	jmp    c0004259 <dir_find+0x12d>
c0004253:	89 f8                	mov    eax,edi
c0004255:	38 c8                	cmp    al,cl
c0004257:	75 5c                	jne    c00042b5 <dir_find+0x189>
c0004259:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004262:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004265:	75 53                	jne    c00042ba <dir_find+0x18e>
c0004267:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000426b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426e:	89 ea                	mov    edx,ebp
c0004270:	e8 f4 fd ff ff       	call   c0004069 <cmp_lfn>
c0004275:	85 c0                	test   eax,eax
c0004277:	74 41                	je     c00042ba <dir_find+0x18e>
c0004279:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004280:	eb 38                	jmp    c00042ba <dir_find+0x18e>
c0004282:	89 f8                	mov    eax,edi
c0004284:	84 c0                	test   al,al
c0004286:	75 0d                	jne    c0004295 <dir_find+0x169>
c0004288:	89 e8                	mov    eax,ebp
c000428a:	e8 98 de ff ff       	call   c0002127 <sum_sfn>
c000428f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004293:	74 52                	je     c00042e7 <dir_find+0x1bb>
c0004295:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004299:	75 13                	jne    c00042ae <dir_find+0x182>
c000429b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429e:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a3:	89 e8                	mov    eax,ebp
c00042a5:	e8 60 da ff ff       	call   c0001d0a <mem_cmp>
c00042aa:	85 c0                	test   eax,eax
c00042ac:	74 39                	je     c00042e7 <dir_find+0x1bb>
c00042ae:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042ba:	31 d2                	xor    edx,edx
c00042bc:	89 d8                	mov    eax,ebx
c00042be:	e8 5c f4 ff ff       	call   c000371f <dir_next>
c00042c3:	85 c0                	test   eax,eax
c00042c5:	0f 84 25 ff ff ff    	je     c00041f0 <dir_find+0xc4>
c00042cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00042ce:	eb 17                	jmp    c00042e7 <dir_find+0x1bb>
c00042d0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d7:	eb 0e                	jmp    c00042e7 <dir_find+0x1bb>
c00042d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042dc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042e1:	0f 85 75 fe ff ff    	jne    c000415c <dir_find+0x30>
c00042e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042ea:	83 c4 1c             	add    esp,0x1c
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	5f                   	pop    edi
c00042f0:	5d                   	pop    ebp
c00042f1:	c3                   	ret    

c00042f2 <dir_register>:
c00042f2:	55                   	push   ebp
c00042f3:	57                   	push   edi
c00042f4:	56                   	push   esi
c00042f5:	be 06 00 00 00       	mov    esi,0x6
c00042fa:	53                   	push   ebx
c00042fb:	83 ec 6c             	sub    esp,0x6c
c00042fe:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004302:	0f 85 62 02 00 00    	jne    c000456a <dir_register+0x278>
c0004308:	8b 28                	mov    ebp,DWORD PTR [eax]
c000430a:	31 ff                	xor    edi,edi
c000430c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004314:	74 03                	je     c0004319 <dir_register+0x27>
c0004316:	47                   	inc    edi
c0004317:	eb f6                	jmp    c000430f <dir_register+0x1d>
c0004319:	89 c3                	mov    ebx,eax
c000431b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431f:	0f 85 e1 00 00 00    	jne    c0004406 <dir_register+0x114>
c0004325:	83 c7 0e             	add    edi,0xe
c0004328:	b9 0f 00 00 00       	mov    ecx,0xf
c000432d:	89 f8                	mov    eax,edi
c000432f:	31 d2                	xor    edx,edx
c0004331:	f7 f1                	div    ecx
c0004333:	8d 50 02             	lea    edx,[eax+0x2]
c0004336:	89 c7                	mov    edi,eax
c0004338:	89 d8                	mov    eax,ebx
c000433a:	e8 12 f8 ff ff       	call   c0003b51 <dir_alloc>
c000433f:	89 c6                	mov    esi,eax
c0004341:	85 c0                	test   eax,eax
c0004343:	0f 85 21 02 00 00    	jne    c000456a <dir_register+0x278>
c0004349:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004352:	c1 e7 05             	shl    edi,0x5
c0004355:	29 f8                	sub    eax,edi
c0004357:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000435a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435d:	a8 04                	test   al,0x4
c000435f:	0f 84 91 00 00 00    	je     c00043f6 <dir_register+0x104>
c0004365:	83 e0 fb             	and    eax,0xfffffffb
c0004368:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000436b:	89 d8                	mov    eax,ebx
c000436d:	e8 25 ec ff ff       	call   c0002f97 <fill_first_frag>
c0004372:	85 c0                	test   eax,eax
c0004374:	0f 85 ee 01 00 00    	jne    c0004568 <dir_register+0x276>
c000437a:	83 c9 ff             	or     ecx,0xffffffff
c000437d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004380:	89 d8                	mov    eax,ebx
c0004382:	e8 db eb ff ff       	call   c0002f62 <fill_last_frag>
c0004387:	85 c0                	test   eax,eax
c0004389:	0f 85 d9 01 00 00    	jne    c0004568 <dir_register+0x276>
c000438f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004393:	74 61                	je     c00043f6 <dir_register+0x104>
c0004395:	89 da                	mov    edx,ebx
c0004397:	8d 44 24 14          	lea    eax,[esp+0x14]
c000439b:	e8 ea f5 ff ff       	call   c000398a <load_obj_xdir>
c00043a0:	85 c0                	test   eax,eax
c00043a2:	0f 85 c0 01 00 00    	jne    c0004568 <dir_register+0x276>
c00043a8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043ac:	31 c9                	xor    ecx,ecx
c00043ae:	c1 e2 09             	shl    edx,0x9
c00043b1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043ba:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c0:	83 c0 38             	add    eax,0x38
c00043c3:	e8 1c d9 ff ff       	call   c0001ce4 <st_qword>
c00043c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043cb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ce:	83 c0 28             	add    eax,0x28
c00043d1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d4:	e8 0b d9 ff ff       	call   c0001ce4 <st_qword>
c00043d9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043dc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043df:	83 c8 01             	or     eax,0x1
c00043e2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e9:	e8 db f7 ff ff       	call   c0003bc9 <store_xdir>
c00043ee:	85 c0                	test   eax,eax
c00043f0:	0f 85 72 01 00 00    	jne    c0004568 <dir_register+0x276>
c00043f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fc:	e8 c1 fb ff ff       	call   c0003fc2 <create_xdir>
c0004401:	e9 64 01 00 00       	jmp    c000456a <dir_register+0x278>
c0004406:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004409:	b9 0c 00 00 00       	mov    ecx,0xc
c000440e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004412:	89 c2                	mov    edx,eax
c0004414:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004418:	e8 cd d8 ff ff       	call   c0001cea <mem_cpy>
c000441d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004422:	74 58                	je     c000447c <dir_register+0x18a>
c0004424:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004428:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004430:	83 ec 0c             	sub    esp,0xc
c0004433:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004436:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000443a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004442:	e8 24 dc ff ff       	call   c000206b <gen_numname>
c0004447:	89 d8                	mov    eax,ebx
c0004449:	e8 de fc ff ff       	call   c000412c <dir_find>
c000444e:	83 c4 10             	add    esp,0x10
c0004451:	89 c6                	mov    esi,eax
c0004453:	85 c0                	test   eax,eax
c0004455:	75 15                	jne    c000446c <dir_register+0x17a>
c0004457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000445b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004460:	75 ce                	jne    c0004430 <dir_register+0x13e>
c0004462:	be 07 00 00 00       	mov    esi,0x7
c0004467:	e9 fe 00 00 00       	jmp    c000456a <dir_register+0x278>
c000446c:	83 f8 04             	cmp    eax,0x4
c000446f:	0f 85 f5 00 00 00    	jne    c000456a <dir_register+0x278>
c0004475:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004479:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447c:	b9 01 00 00 00       	mov    ecx,0x1
c0004481:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004486:	74 0f                	je     c0004497 <dir_register+0x1a5>
c0004488:	b9 0d 00 00 00       	mov    ecx,0xd
c000448d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004490:	31 d2                	xor    edx,edx
c0004492:	f7 f1                	div    ecx
c0004494:	8d 48 01             	lea    ecx,[eax+0x1]
c0004497:	89 ca                	mov    edx,ecx
c0004499:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449d:	89 d8                	mov    eax,ebx
c000449f:	e8 ad f6 ff ff       	call   c0003b51 <dir_alloc>
c00044a4:	89 c6                	mov    esi,eax
c00044a6:	85 c0                	test   eax,eax
c00044a8:	0f 85 bc 00 00 00    	jne    c000456a <dir_register+0x278>
c00044ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b2:	49                   	dec    ecx
c00044b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b7:	74 6a                	je     c0004523 <dir_register+0x231>
c00044b9:	89 c8                	mov    eax,ecx
c00044bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044be:	c1 e0 05             	shl    eax,0x5
c00044c1:	29 c2                	sub    edx,eax
c00044c3:	89 d8                	mov    eax,ebx
c00044c5:	e8 fd ec ff ff       	call   c00031c7 <dir_sdi>
c00044ca:	89 c6                	mov    esi,eax
c00044cc:	85 c0                	test   eax,eax
c00044ce:	0f 85 96 00 00 00    	jne    c000456a <dir_register+0x278>
c00044d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d8:	e8 4a dc ff ff       	call   c0002127 <sum_sfn>
c00044dd:	0f b6 f8             	movzx  edi,al
c00044e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e6:	89 e8                	mov    eax,ebp
c00044e8:	e8 5c df ff ff       	call   c0002449 <move_window>
c00044ed:	89 c6                	mov    esi,eax
c00044ef:	85 c0                	test   eax,eax
c00044f1:	75 77                	jne    c000456a <dir_register+0x278>
c00044f3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044fb:	83 ec 0c             	sub    esp,0xc
c00044fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004501:	57                   	push   edi
c0004502:	e8 e0 da ff ff       	call   c0001fe7 <put_lfn>
c0004507:	31 d2                	xor    edx,edx
c0004509:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450d:	89 d8                	mov    eax,ebx
c000450f:	e8 0b f2 ff ff       	call   c000371f <dir_next>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	89 c6                	mov    esi,eax
c0004519:	85 c0                	test   eax,eax
c000451b:	75 4d                	jne    c000456a <dir_register+0x278>
c000451d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004521:	75 bd                	jne    c00044e0 <dir_register+0x1ee>
c0004523:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004526:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004529:	89 e8                	mov    eax,ebp
c000452b:	e8 19 df ff ff       	call   c0002449 <move_window>
c0004530:	89 c6                	mov    esi,eax
c0004532:	85 c0                	test   eax,eax
c0004534:	75 34                	jne    c000456a <dir_register+0x278>
c0004536:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004539:	b9 20 00 00 00       	mov    ecx,0x20
c000453e:	31 d2                	xor    edx,edx
c0004540:	e8 ba d7 ff ff       	call   c0001cff <mem_set>
c0004545:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004551:	e8 94 d7 ff ff       	call   c0001cea <mem_cpy>
c0004556:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004559:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455c:	83 e0 18             	and    eax,0x18
c000455f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004562:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004566:	eb 02                	jmp    c000456a <dir_register+0x278>
c0004568:	89 c6                	mov    esi,eax
c000456a:	83 c4 6c             	add    esp,0x6c
c000456d:	89 f0                	mov    eax,esi
c000456f:	5b                   	pop    ebx
c0004570:	5e                   	pop    esi
c0004571:	5f                   	pop    edi
c0004572:	5d                   	pop    ebp
c0004573:	c3                   	ret    

c0004574 <sync_fs>:
c0004574:	56                   	push   esi
c0004575:	53                   	push   ebx
c0004576:	53                   	push   ebx
c0004577:	89 c3                	mov    ebx,eax
c0004579:	e8 37 de ff ff       	call   c00023b5 <sync_window>
c000457e:	85 c0                	test   eax,eax
c0004580:	0f 85 b1 00 00 00    	jne    c0004637 <sync_fs+0xc3>
c0004586:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004589:	0f 85 8e 00 00 00    	jne    c000461d <sync_fs+0xa9>
c000458f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004593:	0f 85 84 00 00 00    	jne    c000461d <sync_fs+0xa9>
c0004599:	b9 00 02 00 00       	mov    ecx,0x200
c000459e:	8d 73 54             	lea    esi,[ebx+0x54]
c00045a1:	31 d2                	xor    edx,edx
c00045a3:	89 f0                	mov    eax,esi
c00045a5:	e8 55 d7 ff ff       	call   c0001cff <mem_set>
c00045aa:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b5:	e8 23 d7 ff ff       	call   c0001cdd <st_word>
c00045ba:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bf:	89 f0                	mov    eax,esi
c00045c1:	e8 1b d7 ff ff       	call   c0001ce1 <st_dword>
c00045c6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045cc:	ba 72 72 41 61       	mov    edx,0x61417272
c00045d1:	e8 0b d7 ff ff       	call   c0001ce1 <st_dword>
c00045d6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045df:	e8 fd d6 ff ff       	call   c0001ce1 <st_dword>
c00045e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045ed:	e8 ef d6 ff ff       	call   c0001ce1 <st_dword>
c00045f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f8:	83 c0 01             	add    eax,0x1
c00045fb:	83 d2 00             	adc    edx,0x0
c00045fe:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004601:	83 ec 0c             	sub    esp,0xc
c0004604:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004607:	6a 01                	push   0x1
c0004609:	52                   	push   edx
c000460a:	50                   	push   eax
c000460b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460f:	56                   	push   esi
c0004610:	50                   	push   eax
c0004611:	e8 20 d6 ff ff       	call   c0001c36 <disk_write>
c0004616:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000461a:	83 c4 20             	add    esp,0x20
c000461d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004621:	51                   	push   ecx
c0004622:	6a 00                	push   0x0
c0004624:	6a 00                	push   0x0
c0004626:	50                   	push   eax
c0004627:	e8 20 d6 ff ff       	call   c0001c4c <disk_ioctl>
c000462c:	83 c4 10             	add    esp,0x10
c000462f:	85 c0                	test   eax,eax
c0004631:	0f 95 c0             	setne  al
c0004634:	0f b6 c0             	movzx  eax,al
c0004637:	5a                   	pop    edx
c0004638:	5b                   	pop    ebx
c0004639:	5e                   	pop    esi
c000463a:	c3                   	ret    

c000463b <create_partition>:
c000463b:	55                   	push   ebp
c000463c:	0f b6 c0             	movzx  eax,al
c000463f:	57                   	push   edi
c0004640:	56                   	push   esi
c0004641:	53                   	push   ebx
c0004642:	83 ec 60             	sub    esp,0x60
c0004645:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004649:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004651:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004655:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004659:	50                   	push   eax
c000465a:	6a 01                	push   0x1
c000465c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004660:	e8 e7 d5 ff ff       	call   c0001c4c <disk_ioctl>
c0004665:	83 c4 10             	add    esp,0x10
c0004668:	85 c0                	test   eax,eax
c000466a:	74 0a                	je     c0004676 <create_partition+0x3b>
c000466c:	b8 01 00 00 00       	mov    eax,0x1
c0004671:	e9 67 05 00 00       	jmp    c0004bdd <create_partition+0x5a2>
c0004676:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000467a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004686:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000468b:	0f 86 ed 03 00 00    	jbe    c0004a7e <create_partition+0x443>
c0004691:	83 c0 df             	add    eax,0xffffffdf
c0004694:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469c:	83 d2 ff             	adc    edx,0xffffffff
c000469f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046af:	83 c0 bd             	add    eax,0xffffffbd
c00046b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b9:	83 d2 ff             	adc    edx,0xffffffff
c00046bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046cc:	be 22 00 00 00       	mov    esi,0x22
c00046d1:	31 ff                	xor    edi,edi
c00046d3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046db:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ef:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f5:	75 0e                	jne    c0004705 <create_partition+0xca>
c00046f7:	b9 00 02 00 00       	mov    ecx,0x200
c00046fc:	31 d2                	xor    edx,edx
c00046fe:	89 d8                	mov    eax,ebx
c0004700:	e8 fa d5 ff ff       	call   c0001cff <mem_set>
c0004705:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004709:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004711:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004714:	0f 84 23 01 00 00    	je     c000483d <create_partition+0x202>
c000471a:	89 f0                	mov    eax,esi
c000471c:	89 fa                	mov    edx,edi
c000471e:	05 ff 07 00 00       	add    eax,0x7ff
c0004723:	83 d2 00             	adc    edx,0x0
c0004726:	89 c1                	mov    ecx,eax
c0004728:	89 d7                	mov    edi,edx
c000472a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004730:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004734:	89 ce                	mov    esi,ecx
c0004736:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000473a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004742:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004745:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004749:	89 04 24             	mov    DWORD PTR [esp],eax
c000474c:	b8 64 00 00 00       	mov    eax,0x64
c0004751:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004754:	b8 00 00 00 00       	mov    eax,0x0
c0004759:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475d:	72 41                	jb     c00047a0 <create_partition+0x165>
c000475f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004767:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000476b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004770:	01 c1                	add    ecx,eax
c0004772:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004776:	f7 24 24             	mul    DWORD PTR [esp]
c0004779:	6a 00                	push   0x0
c000477b:	01 ca                	add    edx,ecx
c000477d:	6a 64                	push   0x64
c000477f:	52                   	push   edx
c0004780:	50                   	push   eax
c0004781:	e8 ae 2a 02 00       	call   c0027234 <__udivdi3>
c0004786:	83 c4 10             	add    esp,0x10
c0004789:	05 ff 07 00 00       	add    eax,0x7ff
c000478e:	83 d2 00             	adc    edx,0x0
c0004791:	89 c1                	mov    ecx,eax
c0004793:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004797:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a7:	01 f0                	add    eax,esi
c00047a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ad:	11 fa                	adc    edx,edi
c00047af:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b3:	19 d1                	sbb    ecx,edx
c00047b5:	73 2e                	jae    c00047e5 <create_partition+0x1aa>
c00047b7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047bb:	89 f8                	mov    eax,edi
c00047bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047d0:	73 6b                	jae    c000483d <create_partition+0x202>
c00047d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047da:	29 f0                	sub    eax,esi
c00047dc:	19 fa                	sbb    edx,edi
c00047de:	89 04 24             	mov    DWORD PTR [esp],eax
c00047e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ec:	74 4f                	je     c000483d <create_partition+0x202>
c00047ee:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047f1:	b9 10 00 00 00       	mov    ecx,0x10
c00047f6:	ba d0 9d 02 c0       	mov    edx,0xc0029dd0
c00047fb:	e8 ea d4 ff ff       	call   c0001cea <mem_cpy>
c0004800:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004804:	b9 10 00 00 00       	mov    ecx,0x10
c0004809:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480d:	e8 2c db ff ff       	call   c000233e <make_rand>
c0004812:	89 f2                	mov    edx,esi
c0004814:	89 f9                	mov    ecx,edi
c0004816:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000481a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481e:	e8 c1 d4 ff ff       	call   c0001ce4 <st_qword>
c0004823:	03 34 24             	add    esi,DWORD PTR [esp]
c0004826:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000482a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482e:	89 f2                	mov    edx,esi
c0004830:	89 f9                	mov    ecx,edi
c0004832:	83 c2 ff             	add    edx,0xffffffff
c0004835:	83 d1 ff             	adc    ecx,0xffffffff
c0004838:	e8 a7 d4 ff ff       	call   c0001ce4 <st_qword>
c000483d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004841:	83 e8 80             	sub    eax,0xffffff80
c0004844:	89 c5                	mov    ebp,eax
c0004846:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000484a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004850:	75 6b                	jne    c00048bd <create_partition+0x282>
c0004852:	45                   	inc    ebp
c0004853:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004857:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485c:	e8 39 da ff ff       	call   c000229a <crc32>
c0004861:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004867:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000486b:	75 e5                	jne    c0004852 <create_partition+0x217>
c000486d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004871:	31 d2                	xor    edx,edx
c0004873:	83 ec 0c             	sub    esp,0xc
c0004876:	c1 ed 09             	shr    ebp,0x9
c0004879:	6a 01                	push   0x1
c000487b:	8d 45 02             	lea    eax,[ebp+0x2]
c000487e:	52                   	push   edx
c000487f:	50                   	push   eax
c0004880:	53                   	push   ebx
c0004881:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004885:	e8 ac d3 ff ff       	call   c0001c36 <disk_write>
c000488a:	83 c4 20             	add    esp,0x20
c000488d:	85 c0                	test   eax,eax
c000488f:	0f 85 d7 fd ff ff    	jne    c000466c <create_partition+0x31>
c0004895:	83 ec 0c             	sub    esp,0xc
c0004898:	31 d2                	xor    edx,edx
c000489a:	6a 01                	push   0x1
c000489c:	89 e8                	mov    eax,ebp
c000489e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a6:	52                   	push   edx
c00048a7:	50                   	push   eax
c00048a8:	53                   	push   ebx
c00048a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ad:	e8 84 d3 ff ff       	call   c0001c36 <disk_write>
c00048b2:	83 c4 20             	add    esp,0x20
c00048b5:	85 c0                	test   eax,eax
c00048b7:	0f 85 af fd ff ff    	jne    c000466c <create_partition+0x31>
c00048bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c5:	3d 00 40 00 00       	cmp    eax,0x4000
c00048ca:	74 0d                	je     c00048d9 <create_partition+0x29e>
c00048cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d4:	e9 12 fe ff ff       	jmp    c00046eb <create_partition+0xb0>
c00048d9:	31 d2                	xor    edx,edx
c00048db:	b9 00 02 00 00       	mov    ecx,0x200
c00048e0:	89 d8                	mov    eax,ebx
c00048e2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e5:	e8 15 d4 ff ff       	call   c0001cff <mem_set>
c00048ea:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048ed:	b9 10 00 00 00       	mov    ecx,0x10
c00048f2:	ba c0 9c 02 c0       	mov    edx,0xc0029cc0
c00048f7:	89 d8                	mov    eax,ebx
c00048f9:	e8 ec d3 ff ff       	call   c0001cea <mem_cpy>
c00048fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004902:	8d 43 58             	lea    eax,[ebx+0x58]
c0004905:	f7 d2                	not    edx
c0004907:	e8 d5 d3 ff ff       	call   c0001ce1 <st_dword>
c000490c:	8d 43 18             	lea    eax,[ebx+0x18]
c000490f:	31 c9                	xor    ecx,ecx
c0004911:	89 04 24             	mov    DWORD PTR [esp],eax
c0004914:	ba 01 00 00 00       	mov    edx,0x1
c0004919:	e8 c6 d3 ff ff       	call   c0001ce4 <st_qword>
c000491e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004922:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004926:	83 c2 ff             	add    edx,0xffffffff
c0004929:	89 e8                	mov    eax,ebp
c000492b:	83 d1 ff             	adc    ecx,0xffffffff
c000492e:	e8 b1 d3 ff ff       	call   c0001ce4 <st_qword>
c0004933:	31 c9                	xor    ecx,ecx
c0004935:	8d 43 28             	lea    eax,[ebx+0x28]
c0004938:	ba 22 00 00 00       	mov    edx,0x22
c000493d:	e8 a2 d3 ff ff       	call   c0001ce4 <st_qword>
c0004942:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004946:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000494a:	83 c2 de             	add    edx,0xffffffde
c000494d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004950:	83 d1 ff             	adc    ecx,0xffffffff
c0004953:	31 f6                	xor    esi,esi
c0004955:	e8 8a d3 ff ff       	call   c0001ce4 <st_qword>
c000495a:	8d 43 54             	lea    eax,[ebx+0x54]
c000495d:	ba 80 00 00 00       	mov    edx,0x80
c0004962:	e8 7a d3 ff ff       	call   c0001ce1 <st_dword>
c0004967:	8d 43 50             	lea    eax,[ebx+0x50]
c000496a:	ba 80 00 00 00       	mov    edx,0x80
c000496f:	e8 6d d3 ff ff       	call   c0001ce1 <st_dword>
c0004974:	ba 02 00 00 00       	mov    edx,0x2
c0004979:	89 f8                	mov    eax,edi
c000497b:	e8 61 d3 ff ff       	call   c0001ce1 <st_dword>
c0004980:	8d 53 38             	lea    edx,[ebx+0x38]
c0004983:	b9 10 00 00 00       	mov    ecx,0x10
c0004988:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498c:	e8 ad d9 ff ff       	call   c000233e <make_rand>
c0004991:	83 c8 ff             	or     eax,0xffffffff
c0004994:	46                   	inc    esi
c0004995:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000499a:	e8 fb d8 ff ff       	call   c000229a <crc32>
c000499f:	83 fe 5c             	cmp    esi,0x5c
c00049a2:	75 f0                	jne    c0004994 <create_partition+0x359>
c00049a4:	f7 d0                	not    eax
c00049a6:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a9:	89 c2                	mov    edx,eax
c00049ab:	89 f0                	mov    eax,esi
c00049ad:	e8 2f d3 ff ff       	call   c0001ce1 <st_dword>
c00049b2:	83 ec 0c             	sub    esp,0xc
c00049b5:	6a 01                	push   0x1
c00049b7:	6a 00                	push   0x0
c00049b9:	6a 01                	push   0x1
c00049bb:	53                   	push   ebx
c00049bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049c0:	e8 71 d2 ff ff       	call   c0001c36 <disk_write>
c00049c5:	83 c4 20             	add    esp,0x20
c00049c8:	85 c0                	test   eax,eax
c00049ca:	0f 85 9c fc ff ff    	jne    c000466c <create_partition+0x31>
c00049d0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d8:	83 c2 ff             	add    edx,0xffffffff
c00049db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049de:	83 d1 ff             	adc    ecx,0xffffffff
c00049e1:	e8 fe d2 ff ff       	call   c0001ce4 <st_qword>
c00049e6:	ba 01 00 00 00       	mov    edx,0x1
c00049eb:	31 c9                	xor    ecx,ecx
c00049ed:	89 e8                	mov    eax,ebp
c00049ef:	e8 f0 d2 ff ff       	call   c0001ce4 <st_qword>
c00049f4:	89 f8                	mov    eax,edi
c00049f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fe:	31 ff                	xor    edi,edi
c0004a00:	e8 df d2 ff ff       	call   c0001ce4 <st_qword>
c0004a05:	89 f0                	mov    eax,esi
c0004a07:	31 d2                	xor    edx,edx
c0004a09:	e8 d3 d2 ff ff       	call   c0001ce1 <st_dword>
c0004a0e:	83 c8 ff             	or     eax,0xffffffff
c0004a11:	47                   	inc    edi
c0004a12:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a17:	e8 7e d8 ff ff       	call   c000229a <crc32>
c0004a1c:	83 ff 5c             	cmp    edi,0x5c
c0004a1f:	75 f0                	jne    c0004a11 <create_partition+0x3d6>
c0004a21:	f7 d0                	not    eax
c0004a23:	89 c2                	mov    edx,eax
c0004a25:	89 f0                	mov    eax,esi
c0004a27:	e8 b5 d2 ff ff       	call   c0001ce1 <st_dword>
c0004a2c:	83 ec 0c             	sub    esp,0xc
c0004a2f:	6a 01                	push   0x1
c0004a31:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a35:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a39:	83 c0 ff             	add    eax,0xffffffff
c0004a3c:	83 d2 ff             	adc    edx,0xffffffff
c0004a3f:	52                   	push   edx
c0004a40:	50                   	push   eax
c0004a41:	53                   	push   ebx
c0004a42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a46:	e8 eb d1 ff ff       	call   c0001c36 <disk_write>
c0004a4b:	83 c4 20             	add    esp,0x20
c0004a4e:	85 c0                	test   eax,eax
c0004a50:	0f 85 16 fc ff ff    	jne    c000466c <create_partition+0x31>
c0004a56:	31 d2                	xor    edx,edx
c0004a58:	89 d8                	mov    eax,ebx
c0004a5a:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5f:	e8 9b d2 ff ff       	call   c0001cff <mem_set>
c0004a64:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a6a:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6f:	ba d0 9c 02 c0       	mov    edx,0xc0029cd0
c0004a74:	e8 71 d2 ff ff       	call   c0001cea <mem_cpy>
c0004a79:	e9 21 01 00 00       	jmp    c0004b9f <create_partition+0x564>
c0004a7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a82:	b9 05 00 00 00       	mov    ecx,0x5
c0004a87:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a8a:	bf 08 00 00 00       	mov    edi,0x8
c0004a8f:	89 f8                	mov    eax,edi
c0004a91:	31 d2                	xor    edx,edx
c0004a93:	0f b6 f0             	movzx  esi,al
c0004a96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a99:	f7 f6                	div    esi
c0004a9b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004aa0:	76 0a                	jbe    c0004aac <create_partition+0x471>
c0004aa2:	d1 e7                	shl    edi,1
c0004aa4:	49                   	dec    ecx
c0004aa5:	75 e8                	jne    c0004a8f <create_partition+0x454>
c0004aa7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aac:	b9 00 02 00 00       	mov    ecx,0x200
c0004ab1:	31 d2                	xor    edx,edx
c0004ab3:	89 d8                	mov    eax,ebx
c0004ab5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004abb:	e8 3f d2 ff ff       	call   c0001cff <mem_set>
c0004ac0:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac8:	31 d2                	xor    edx,edx
c0004aca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad2:	f7 f1                	div    ecx
c0004ad4:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004add:	89 f8                	mov    eax,edi
c0004adf:	0f b6 c0             	movzx  eax,al
c0004ae2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae6:	e9 80 00 00 00       	jmp    c0004b6b <create_partition+0x530>
c0004aeb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aee:	29 cf                	sub    edi,ecx
c0004af0:	89 ca                	mov    edx,ecx
c0004af2:	89 f0                	mov    eax,esi
c0004af4:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af9:	e8 e3 d1 ff ff       	call   c0001ce1 <st_dword>
c0004afe:	8d 46 04             	lea    eax,[esi+0x4]
c0004b01:	89 fa                	mov    edx,edi
c0004b03:	83 c6 10             	add    esi,0x10
c0004b06:	e8 d6 d1 ff ff       	call   c0001ce1 <st_dword>
c0004b0b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0f:	31 d2                	xor    edx,edx
c0004b11:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b14:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b18:	89 c8                	mov    eax,ecx
c0004b1a:	01 f9                	add    ecx,edi
c0004b1c:	f7 f5                	div    ebp
c0004b1e:	89 d5                	mov    ebp,edx
c0004b20:	31 d2                	xor    edx,edx
c0004b22:	45                   	inc    ebp
c0004b23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b27:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b2a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2d:	89 c2                	mov    edx,eax
c0004b2f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b32:	c1 ea 02             	shr    edx,0x2
c0004b35:	83 e2 c0             	and    edx,0xffffffc0
c0004b38:	09 ea                	or     edx,ebp
c0004b3a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b42:	31 d2                	xor    edx,edx
c0004b44:	f7 f5                	div    ebp
c0004b46:	89 d7                	mov    edi,edx
c0004b48:	31 d2                	xor    edx,edx
c0004b4a:	47                   	inc    edi
c0004b4b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b52:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b55:	89 c5                	mov    ebp,eax
c0004b57:	c1 ed 02             	shr    ebp,0x2
c0004b5a:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5d:	09 ef                	or     edi,ebp
c0004b5f:	89 fa                	mov    edx,edi
c0004b61:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b64:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b69:	74 34                	je     c0004b9f <create_partition+0x564>
c0004b6b:	85 c9                	test   ecx,ecx
c0004b6d:	74 30                	je     c0004b9f <create_partition+0x564>
c0004b6f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b72:	76 2b                	jbe    c0004b9f <create_partition+0x564>
c0004b74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b78:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7f:	83 ff 64             	cmp    edi,0x64
c0004b82:	76 4b                	jbe    c0004bcf <create_partition+0x594>
c0004b84:	89 f8                	mov    eax,edi
c0004b86:	01 c8                	add    eax,ecx
c0004b88:	0f 82 5d ff ff ff    	jb     c0004aeb <create_partition+0x4b0>
c0004b8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b91:	0f 87 54 ff ff ff    	ja     c0004aeb <create_partition+0x4b0>
c0004b97:	85 ff                	test   edi,edi
c0004b99:	0f 85 51 ff ff ff    	jne    c0004af0 <create_partition+0x4b5>
c0004b9f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004baa:	e8 2e d1 ff ff       	call   c0001cdd <st_word>
c0004baf:	83 ec 0c             	sub    esp,0xc
c0004bb2:	6a 01                	push   0x1
c0004bb4:	6a 00                	push   0x0
c0004bb6:	6a 00                	push   0x0
c0004bb8:	53                   	push   ebx
c0004bb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbd:	e8 74 d0 ff ff       	call   c0001c36 <disk_write>
c0004bc2:	83 c4 20             	add    esp,0x20
c0004bc5:	85 c0                	test   eax,eax
c0004bc7:	0f 95 c0             	setne  al
c0004bca:	0f b6 c0             	movzx  eax,al
c0004bcd:	eb 0e                	jmp    c0004bdd <create_partition+0x5a2>
c0004bcf:	74 07                	je     c0004bd8 <create_partition+0x59d>
c0004bd1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd6:	eb ac                	jmp    c0004b84 <create_partition+0x549>
c0004bd8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bdb:	eb a7                	jmp    c0004b84 <create_partition+0x549>
c0004bdd:	83 c4 5c             	add    esp,0x5c
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	5f                   	pop    edi
c0004be3:	5d                   	pop    ebp
c0004be4:	c3                   	ret    

c0004be5 <get_fileinfo>:
c0004be5:	55                   	push   ebp
c0004be6:	57                   	push   edi
c0004be7:	56                   	push   esi
c0004be8:	53                   	push   ebx
c0004be9:	83 ec 1c             	sub    esp,0x1c
c0004bec:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bee:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfc:	0f 84 dc 01 00 00    	je     c0004dde <get_fileinfo+0x1f9>
c0004c02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c05:	75 0f                	jne    c0004c16 <get_fileinfo+0x31>
c0004c07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c0a:	83 c4 1c             	add    esp,0x1c
c0004c0d:	5b                   	pop    ebx
c0004c0e:	5e                   	pop    esi
c0004c0f:	5f                   	pop    edi
c0004c10:	5d                   	pop    ebp
c0004c11:	e9 58 d5 ff ff       	jmp    c000216e <get_xfileinfo>
c0004c16:	89 d3                	mov    ebx,edx
c0004c18:	89 c6                	mov    esi,eax
c0004c1a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1e:	74 6a                	je     c0004c8a <get_fileinfo+0xa5>
c0004c20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c28:	31 ed                	xor    ebp,ebp
c0004c2a:	31 ff                	xor    edi,edi
c0004c2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c37:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c3b:	66 85 d2             	test   dx,dx
c0004c3e:	74 3e                	je     c0004c7e <get_fileinfo+0x99>
c0004c40:	66 85 ed             	test   bp,bp
c0004c43:	75 0c                	jne    c0004c51 <get_fileinfo+0x6c>
c0004c45:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c4b:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4f:	76 22                	jbe    c0004c73 <get_fileinfo+0x8e>
c0004c51:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c56:	89 e8                	mov    eax,ebp
c0004c58:	29 f9                	sub    ecx,edi
c0004c5a:	c1 e0 10             	shl    eax,0x10
c0004c5d:	09 d0                	or     eax,edx
c0004c5f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c63:	e8 a3 d1 ff ff       	call   c0001e0b <put_utf>
c0004c68:	84 c0                	test   al,al
c0004c6a:	74 10                	je     c0004c7c <get_fileinfo+0x97>
c0004c6c:	0f b6 c0             	movzx  eax,al
c0004c6f:	31 d2                	xor    edx,edx
c0004c71:	01 c7                	add    edi,eax
c0004c73:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c78:	89 d5                	mov    ebp,edx
c0004c7a:	eb b0                	jmp    c0004c2c <get_fileinfo+0x47>
c0004c7c:	31 ff                	xor    edi,edi
c0004c7e:	66 85 ed             	test   bp,bp
c0004c81:	74 02                	je     c0004c85 <get_fileinfo+0xa0>
c0004c83:	31 ff                	xor    edi,edi
c0004c85:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c8a:	31 ff                	xor    edi,edi
c0004c8c:	31 c9                	xor    ecx,ecx
c0004c8e:	83 f9 0a             	cmp    ecx,0xa
c0004c91:	0f 87 ad 00 00 00    	ja     c0004d44 <get_fileinfo+0x15f>
c0004c97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ca1:	66 83 fa 20          	cmp    dx,0x20
c0004ca5:	0f 84 92 00 00 00    	je     c0004d3d <get_fileinfo+0x158>
c0004cab:	66 83 fa 05          	cmp    dx,0x5
c0004caf:	75 05                	jne    c0004cb6 <get_fileinfo+0xd1>
c0004cb1:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb6:	83 ff 0b             	cmp    edi,0xb
c0004cb9:	77 0b                	ja     c0004cc6 <get_fileinfo+0xe1>
c0004cbb:	83 fd 09             	cmp    ebp,0x9
c0004cbe:	75 06                	jne    c0004cc6 <get_fileinfo+0xe1>
c0004cc0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc5:	47                   	inc    edi
c0004cc6:	0f b7 c2             	movzx  eax,dx
c0004cc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccd:	e8 6d d0 ff ff       	call   c0001d3f <dbc_1st>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	74 2f                	je     c0004d05 <get_fileinfo+0x120>
c0004cd6:	83 fd 08             	cmp    ebp,0x8
c0004cd9:	74 2a                	je     c0004d05 <get_fileinfo+0x120>
c0004cdb:	83 fd 0b             	cmp    ebp,0xb
c0004cde:	74 25                	je     c0004d05 <get_fileinfo+0x120>
c0004ce0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ceb:	e8 52 d0 ff ff       	call   c0001d42 <dbc_2nd>
c0004cf0:	85 c0                	test   eax,eax
c0004cf2:	74 11                	je     c0004d05 <get_fileinfo+0x120>
c0004cf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfd:	c1 e2 08             	shl    edx,0x8
c0004d00:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d03:	09 c2                	or     edx,eax
c0004d05:	0f b7 d2             	movzx  edx,dx
c0004d08:	50                   	push   eax
c0004d09:	50                   	push   eax
c0004d0a:	68 b5 01 00 00       	push   0x1b5
c0004d0f:	52                   	push   edx
c0004d10:	e8 46 38 00 00       	call   c000855b <ff_oem2uni>
c0004d15:	83 c4 10             	add    esp,0x10
c0004d18:	66 85 c0             	test   ax,ax
c0004d1b:	75 04                	jne    c0004d21 <get_fileinfo+0x13c>
c0004d1d:	31 ff                	xor    edi,edi
c0004d1f:	eb 23                	jmp    c0004d44 <get_fileinfo+0x15f>
c0004d21:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d26:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d2a:	29 f9                	sub    ecx,edi
c0004d2c:	0f b7 c0             	movzx  eax,ax
c0004d2f:	e8 d7 d0 ff ff       	call   c0001e0b <put_utf>
c0004d34:	84 c0                	test   al,al
c0004d36:	74 e5                	je     c0004d1d <get_fileinfo+0x138>
c0004d38:	0f b6 c0             	movzx  eax,al
c0004d3b:	01 c7                	add    edi,eax
c0004d3d:	89 e9                	mov    ecx,ebp
c0004d3f:	e9 4a ff ff ff       	jmp    c0004c8e <get_fileinfo+0xa9>
c0004d44:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d49:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4d:	75 54                	jne    c0004da3 <get_fileinfo+0x1be>
c0004d4f:	85 ff                	test   edi,edi
c0004d51:	75 0b                	jne    c0004d5e <get_fileinfo+0x179>
c0004d53:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d57:	ba 01 00 00 00       	mov    edx,0x1
c0004d5c:	eb 33                	jmp    c0004d91 <get_fileinfo+0x1ac>
c0004d5e:	b1 08                	mov    cl,0x8
c0004d60:	31 d2                	xor    edx,edx
c0004d62:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d68:	84 c0                	test   al,al
c0004d6a:	74 25                	je     c0004d91 <get_fileinfo+0x1ac>
c0004d6c:	66 83 f8 2e          	cmp    ax,0x2e
c0004d70:	74 16                	je     c0004d88 <get_fileinfo+0x1a3>
c0004d72:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d75:	66 83 ff 19          	cmp    di,0x19
c0004d79:	77 0f                	ja     c0004d8a <get_fileinfo+0x1a5>
c0004d7b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d81:	74 07                	je     c0004d8a <get_fileinfo+0x1a5>
c0004d83:	83 c0 20             	add    eax,0x20
c0004d86:	eb 02                	jmp    c0004d8a <get_fileinfo+0x1a5>
c0004d88:	b1 10                	mov    cl,0x10
c0004d8a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8e:	42                   	inc    edx
c0004d8f:	eb d1                	jmp    c0004d62 <get_fileinfo+0x17d>
c0004d91:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d99:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9d:	75 04                	jne    c0004da3 <get_fileinfo+0x1be>
c0004d9f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004daf:	83 c0 1c             	add    eax,0x1c
c0004db2:	e8 c1 ce ff ff       	call   c0001c78 <ld_dword>
c0004db7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbe:	89 03                	mov    DWORD PTR [ebx],eax
c0004dc0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc3:	83 c0 16             	add    eax,0x16
c0004dc6:	e8 a0 ce ff ff       	call   c0001c6b <ld_word>
c0004dcb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd2:	83 c0 18             	add    eax,0x18
c0004dd5:	e8 91 ce ff ff       	call   c0001c6b <ld_word>
c0004dda:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dde:	83 c4 1c             	add    esp,0x1c
c0004de1:	5b                   	pop    ebx
c0004de2:	5e                   	pop    esi
c0004de3:	5f                   	pop    edi
c0004de4:	5d                   	pop    ebp
c0004de5:	c3                   	ret    

c0004de6 <ld_clust.isra.0>:
c0004de6:	56                   	push   esi
c0004de7:	89 c6                	mov    esi,eax
c0004de9:	53                   	push   ebx
c0004dea:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004ded:	89 d3                	mov    ebx,edx
c0004def:	e8 77 ce ff ff       	call   c0001c6b <ld_word>
c0004df4:	0f b7 c8             	movzx  ecx,ax
c0004df7:	89 f0                	mov    eax,esi
c0004df9:	3c 03                	cmp    al,0x3
c0004dfb:	75 0d                	jne    c0004e0a <ld_clust.isra.0+0x24>
c0004dfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e00:	e8 66 ce ff ff       	call   c0001c6b <ld_word>
c0004e05:	c1 e0 10             	shl    eax,0x10
c0004e08:	09 c1                	or     ecx,eax
c0004e0a:	89 c8                	mov    eax,ecx
c0004e0c:	5b                   	pop    ebx
c0004e0d:	5e                   	pop    esi
c0004e0e:	c3                   	ret    

c0004e0f <st_clust.isra.1>:
c0004e0f:	56                   	push   esi
c0004e10:	89 c6                	mov    esi,eax
c0004e12:	53                   	push   ebx
c0004e13:	89 d3                	mov    ebx,edx
c0004e15:	0f b7 d1             	movzx  edx,cx
c0004e18:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e1b:	e8 bd ce ff ff       	call   c0001cdd <st_word>
c0004e20:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e23:	75 0f                	jne    c0004e34 <st_clust.isra.1+0x25>
c0004e25:	c1 e9 10             	shr    ecx,0x10
c0004e28:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e2b:	89 ca                	mov    edx,ecx
c0004e2d:	5b                   	pop    ebx
c0004e2e:	5e                   	pop    esi
c0004e2f:	e9 a9 ce ff ff       	jmp    c0001cdd <st_word>
c0004e34:	5b                   	pop    ebx
c0004e35:	5e                   	pop    esi
c0004e36:	c3                   	ret    

c0004e37 <init_alloc_info.isra.2>:
c0004e37:	56                   	push   esi
c0004e38:	53                   	push   ebx
c0004e39:	89 c6                	mov    esi,eax
c0004e3b:	89 d3                	mov    ebx,edx
c0004e3d:	51                   	push   ecx
c0004e3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e40:	83 c0 34             	add    eax,0x34
c0004e43:	e8 30 ce ff ff       	call   c0001c78 <ld_dword>
c0004e48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4d:	83 c0 38             	add    eax,0x38
c0004e50:	e8 3b ce ff ff       	call   c0001c90 <ld_qword>
c0004e55:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e58:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e67:	83 e0 02             	and    eax,0x2
c0004e6a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6d:	5b                   	pop    ebx
c0004e6e:	5b                   	pop    ebx
c0004e6f:	5e                   	pop    esi
c0004e70:	c3                   	ret    

c0004e71 <follow_path>:
c0004e71:	56                   	push   esi
c0004e72:	53                   	push   ebx
c0004e73:	89 c3                	mov    ebx,eax
c0004e75:	83 ec 14             	sub    esp,0x14
c0004e78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e82:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e84:	80 fa 5c             	cmp    dl,0x5c
c0004e87:	75 07                	jne    c0004e90 <follow_path+0x1f>
c0004e89:	40                   	inc    eax
c0004e8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8e:	eb ee                	jmp    c0004e7e <follow_path+0xd>
c0004e90:	80 fa 2f             	cmp    dl,0x2f
c0004e93:	74 f4                	je     c0004e89 <follow_path+0x18>
c0004e95:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea6:	77 52                	ja     c0004efa <follow_path+0x89>
c0004ea8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eac:	31 d2                	xor    edx,edx
c0004eae:	89 d8                	mov    eax,ebx
c0004eb0:	e8 12 e3 ff ff       	call   c00031c7 <dir_sdi>
c0004eb5:	eb 7c                	jmp    c0004f33 <follow_path+0xc2>
c0004eb7:	89 d8                	mov    eax,ebx
c0004eb9:	e8 6e f2 ff ff       	call   c000412c <dir_find>
c0004ebe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	75 46                	jne    c0004f0b <follow_path+0x9a>
c0004ec5:	80 e2 04             	and    dl,0x4
c0004ec8:	75 69                	jne    c0004f33 <follow_path+0xc2>
c0004eca:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ece:	74 5e                	je     c0004f2e <follow_path+0xbd>
c0004ed0:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed2:	3c 04                	cmp    al,0x4
c0004ed4:	75 41                	jne    c0004f17 <follow_path+0xa6>
c0004ed6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ee0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee3:	30 c0                	xor    al,al
c0004ee5:	09 d0                	or     eax,edx
c0004ee7:	89 da                	mov    edx,ebx
c0004ee9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eec:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eef:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef2:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef5:	e8 3d ff ff ff       	call   c0004e37 <init_alloc_info.isra.2>
c0004efa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efe:	89 d8                	mov    eax,ebx
c0004f00:	e8 a9 ed ff ff       	call   c0003cae <create_name>
c0004f05:	85 c0                	test   eax,eax
c0004f07:	74 ae                	je     c0004eb7 <follow_path+0x46>
c0004f09:	eb 28                	jmp    c0004f33 <follow_path+0xc2>
c0004f0b:	83 f8 04             	cmp    eax,0x4
c0004f0e:	75 23                	jne    c0004f33 <follow_path+0xc2>
c0004f10:	80 e2 04             	and    dl,0x4
c0004f13:	74 19                	je     c0004f2e <follow_path+0xbd>
c0004f15:	eb 1c                	jmp    c0004f33 <follow_path+0xc2>
c0004f17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f20:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f24:	e8 bd fe ff ff       	call   c0004de6 <ld_clust.isra.0>
c0004f29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2c:	eb cc                	jmp    c0004efa <follow_path+0x89>
c0004f2e:	b8 05 00 00 00       	mov    eax,0x5
c0004f33:	83 c4 14             	add    esp,0x14
c0004f36:	5b                   	pop    ebx
c0004f37:	5e                   	pop    esi
c0004f38:	c3                   	ret    

c0004f39 <f_mount>:
c0004f39:	53                   	push   ebx
c0004f3a:	83 ec 18             	sub    esp,0x18
c0004f3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4d:	e8 fb d2 ff ff       	call   c000224d <get_ldnumber>
c0004f52:	89 c2                	mov    edx,eax
c0004f54:	b8 0b 00 00 00       	mov    eax,0xb
c0004f59:	85 d2                	test   edx,edx
c0004f5b:	78 39                	js     c0004f96 <f_mount+0x5d>
c0004f5d:	8b 04 95 60 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd11a0]
c0004f64:	85 c0                	test   eax,eax
c0004f66:	74 03                	je     c0004f6b <f_mount+0x32>
c0004f68:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6f:	85 c0                	test   eax,eax
c0004f71:	74 03                	je     c0004f76 <f_mount+0x3d>
c0004f73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f7a:	89 04 95 60 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd11a0],eax
c0004f81:	31 c0                	xor    eax,eax
c0004f83:	84 db                	test   bl,bl
c0004f85:	74 0f                	je     c0004f96 <f_mount+0x5d>
c0004f87:	31 c9                	xor    ecx,ecx
c0004f89:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f91:	e8 65 d7 ff ff       	call   c00026fb <mount_volume>
c0004f96:	83 c4 18             	add    esp,0x18
c0004f99:	5b                   	pop    ebx
c0004f9a:	c3                   	ret    

c0004f9b <f_open>:
c0004f9b:	55                   	push   ebp
c0004f9c:	bd 09 00 00 00       	mov    ebp,0x9
c0004fa1:	57                   	push   edi
c0004fa2:	56                   	push   esi
c0004fa3:	53                   	push   ebx
c0004fa4:	83 ec 7c             	sub    esp,0x7c
c0004fa7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fae:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb5:	85 db                	test   ebx,ebx
c0004fb7:	0f 84 10 04 00 00    	je     c00053cd <f_open+0x432>
c0004fbd:	89 fe                	mov    esi,edi
c0004fbf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc3:	83 e6 3f             	and    esi,0x3f
c0004fc6:	89 f0                	mov    eax,esi
c0004fc8:	0f b6 c8             	movzx  ecx,al
c0004fcb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd2:	e8 24 d7 ff ff       	call   c00026fb <mount_volume>
c0004fd7:	89 c5                	mov    ebp,eax
c0004fd9:	85 c0                	test   eax,eax
c0004fdb:	0f 85 e6 03 00 00    	jne    c00053c7 <f_open+0x42c>
c0004fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe5:	bd 11 00 00 00       	mov    ebp,0x11
c0004fea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fee:	83 ec 0c             	sub    esp,0xc
c0004ff1:	68 60 04 00 00       	push   0x460
c0004ff6:	e8 a3 34 00 00       	call   c000849e <ff_memalloc>
c0004ffb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fff:	83 c4 10             	add    esp,0x10
c0005002:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005007:	0f 84 c0 03 00 00    	je     c00053cd <f_open+0x432>
c000500d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005011:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005015:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c000501b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005021:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005028:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502c:	e8 40 fe ff ff       	call   c0004e71 <follow_path>
c0005031:	89 c5                	mov    ebp,eax
c0005033:	85 c0                	test   eax,eax
c0005035:	75 0c                	jne    c0005043 <f_open+0xa8>
c0005037:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503c:	79 05                	jns    c0005043 <f_open+0xa8>
c000503e:	bd 06 00 00 00       	mov    ebp,0x6
c0005043:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005049:	0f 84 84 01 00 00    	je     c00051d3 <f_open+0x238>
c000504f:	85 ed                	test   ebp,ebp
c0005051:	74 20                	je     c0005073 <f_open+0xd8>
c0005053:	83 fd 04             	cmp    ebp,0x4
c0005056:	0f 85 58 03 00 00    	jne    c00053b4 <f_open+0x419>
c000505c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005060:	83 ce 08             	or     esi,0x8
c0005063:	e8 8a f2 ff ff       	call   c00042f2 <dir_register>
c0005068:	89 c5                	mov    ebp,eax
c000506a:	85 c0                	test   eax,eax
c000506c:	74 2f                	je     c000509d <f_open+0x102>
c000506e:	e9 41 03 00 00       	jmp    c00053b4 <f_open+0x419>
c0005073:	bd 07 00 00 00       	mov    ebp,0x7
c0005078:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507d:	0f 85 31 03 00 00    	jne    c00053b4 <f_open+0x419>
c0005083:	bd 08 00 00 00       	mov    ebp,0x8
c0005088:	f7 c7 04 00 00 00    	test   edi,0x4
c000508e:	0f 85 20 03 00 00    	jne    c00053b4 <f_open+0x419>
c0005094:	83 e7 08             	and    edi,0x8
c0005097:	0f 84 65 01 00 00    	je     c0005202 <f_open+0x267>
c000509d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050a1:	8a 02                	mov    al,BYTE PTR [edx]
c00050a3:	3c 04                	cmp    al,0x4
c00050a5:	0f 85 97 00 00 00    	jne    c0005142 <f_open+0x1a7>
c00050ab:	8d 42 10             	lea    eax,[edx+0x10]
c00050ae:	89 13                	mov    DWORD PTR [ebx],edx
c00050b0:	89 da                	mov    edx,ebx
c00050b2:	e8 80 fd ff ff       	call   c0004e37 <init_alloc_info.isra.2>
c00050b7:	31 d2                	xor    edx,edx
c00050b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bd:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c5:	83 c0 02             	add    eax,0x2
c00050c8:	e8 32 cc ff ff       	call   c0001cff <mem_set>
c00050cd:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d2:	31 d2                	xor    edx,edx
c00050d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050db:	83 c0 26             	add    eax,0x26
c00050de:	e8 1c cc ff ff       	call   c0001cff <mem_set>
c00050e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050ea:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ee:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f6:	83 c0 08             	add    eax,0x8
c00050f9:	e8 e3 cb ff ff       	call   c0001ce1 <st_dword>
c00050fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005102:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005105:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005109:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510d:	e8 b7 ea ff ff       	call   c0003bc9 <store_xdir>
c0005112:	89 c5                	mov    ebp,eax
c0005114:	85 c0                	test   eax,eax
c0005116:	0f 85 98 02 00 00    	jne    c00053b4 <f_open+0x419>
c000511c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511f:	85 d2                	test   edx,edx
c0005121:	0f 84 db 00 00 00    	je     c0005202 <f_open+0x267>
c0005127:	31 c9                	xor    ecx,ecx
c0005129:	89 d8                	mov    eax,ebx
c000512b:	e8 8e e3 ff ff       	call   c00034be <remove_chain>
c0005130:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005134:	89 c5                	mov    ebp,eax
c0005136:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005139:	48                   	dec    eax
c000513a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513d:	e9 b8 00 00 00       	jmp    c00051fa <f_open+0x25f>
c0005142:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005146:	89 ea                	mov    edx,ebp
c0005148:	e8 99 fc ff ff       	call   c0004de6 <ld_clust.isra.0>
c000514d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005152:	89 c7                	mov    edi,eax
c0005154:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005157:	e8 85 cb ff ff       	call   c0001ce1 <st_dword>
c000515c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005160:	31 c9                	xor    ecx,ecx
c0005162:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000516a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516e:	e8 9c fc ff ff       	call   c0004e0f <st_clust.isra.1>
c0005173:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005177:	31 d2                	xor    edx,edx
c0005179:	83 c0 1c             	add    eax,0x1c
c000517c:	e8 60 cb ff ff       	call   c0001ce1 <st_dword>
c0005181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005185:	85 ff                	test   edi,edi
c0005187:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000518b:	74 75                	je     c0005202 <f_open+0x267>
c000518d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005191:	31 c9                	xor    ecx,ecx
c0005193:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005196:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051a1:	89 fa                	mov    edx,edi
c00051a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a7:	e8 12 e3 ff ff       	call   c00034be <remove_chain>
c00051ac:	89 c5                	mov    ebp,eax
c00051ae:	85 c0                	test   eax,eax
c00051b0:	0f 85 fe 01 00 00    	jne    c00053b4 <f_open+0x419>
c00051b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c2:	4f                   	dec    edi
c00051c3:	e8 81 d2 ff ff       	call   c0002449 <move_window>
c00051c8:	89 c5                	mov    ebp,eax
c00051ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051ce:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051d1:	eb 27                	jmp    c00051fa <f_open+0x25f>
c00051d3:	85 ed                	test   ebp,ebp
c00051d5:	0f 85 d9 01 00 00    	jne    c00053b4 <f_open+0x419>
c00051db:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051df:	bd 04 00 00 00       	mov    ebp,0x4
c00051e4:	a8 10                	test   al,0x10
c00051e6:	0f 85 c8 01 00 00    	jne    c00053b4 <f_open+0x419>
c00051ec:	83 e7 02             	and    edi,0x2
c00051ef:	74 11                	je     c0005202 <f_open+0x267>
c00051f1:	bd 07 00 00 00       	mov    ebp,0x7
c00051f6:	a8 01                	test   al,0x1
c00051f8:	eb 02                	jmp    c00051fc <f_open+0x261>
c00051fa:	85 ed                	test   ebp,ebp
c00051fc:	0f 85 b2 01 00 00    	jne    c00053b4 <f_open+0x419>
c0005202:	f7 c6 08 00 00 00    	test   esi,0x8
c0005208:	74 03                	je     c000520d <f_open+0x272>
c000520a:	83 ce 40             	or     esi,0x40
c000520d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005211:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005214:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005217:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000521a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005221:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005224:	8a 02                	mov    al,BYTE PTR [edx]
c0005226:	3c 04                	cmp    al,0x4
c0005228:	75 2a                	jne    c0005254 <f_open+0x2b9>
c000522a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005233:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000523a:	30 c0                	xor    al,al
c000523c:	09 c8                	or     eax,ecx
c000523e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005241:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005245:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005248:	8d 42 10             	lea    eax,[edx+0x10]
c000524b:	89 da                	mov    edx,ebx
c000524d:	e8 e5 fb ff ff       	call   c0004e37 <init_alloc_info.isra.2>
c0005252:	eb 1c                	jmp    c0005270 <f_open+0x2d5>
c0005254:	89 fa                	mov    edx,edi
c0005256:	e8 8b fb ff ff       	call   c0004de6 <ld_clust.isra.0>
c000525b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005261:	e8 12 ca ff ff       	call   c0001c78 <ld_dword>
c0005266:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005274:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000527b:	89 03                	mov    DWORD PTR [ebx],eax
c000527d:	31 d2                	xor    edx,edx
c000527f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005283:	b9 00 02 00 00       	mov    ecx,0x200
c0005288:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005290:	89 f0                	mov    eax,esi
c0005292:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005299:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ad:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b8:	e8 42 ca ff ff       	call   c0001cff <mem_set>
c00052bd:	83 e6 20             	and    esi,0x20
c00052c0:	75 07                	jne    c00052c9 <f_open+0x32e>
c00052c2:	31 ed                	xor    ebp,ebp
c00052c4:	e9 eb 00 00 00       	jmp    c00053b4 <f_open+0x419>
c00052c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052cc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052db:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052df:	74 e1                	je     c00052c2 <f_open+0x327>
c00052e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052fa:	31 ff                	xor    edi,edi
c00052fc:	c1 e5 09             	shl    ebp,0x9
c00052ff:	89 ee                	mov    esi,ebp
c0005301:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005305:	89 f8                	mov    eax,edi
c0005307:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000530b:	73 22                	jae    c000532f <f_open+0x394>
c000530d:	89 d8                	mov    eax,ebx
c000530f:	e8 bd dc ff ff       	call   c0002fd1 <get_fat>
c0005314:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005318:	89 c2                	mov    edx,eax
c000531a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531e:	83 f8 01             	cmp    eax,0x1
c0005321:	76 10                	jbe    c0005333 <f_open+0x398>
c0005323:	83 f8 ff             	cmp    eax,0xffffffff
c0005326:	75 d9                	jne    c0005301 <f_open+0x366>
c0005328:	bd 01 00 00 00       	mov    ebp,0x1
c000532d:	eb 09                	jmp    c0005338 <f_open+0x39d>
c000532f:	31 ed                	xor    ebp,ebp
c0005331:	eb 05                	jmp    c0005338 <f_open+0x39d>
c0005333:	bd 02 00 00 00       	mov    ebp,0x2
c0005338:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000533b:	85 ed                	test   ebp,ebp
c000533d:	75 75                	jne    c00053b4 <f_open+0x419>
c000533f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005343:	25 ff 01 00 00       	and    eax,0x1ff
c0005348:	0f 84 74 ff ff ff    	je     c00052c2 <f_open+0x327>
c000534e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005352:	bd 02 00 00 00       	mov    ebp,0x2
c0005357:	89 c8                	mov    eax,ecx
c0005359:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535d:	e8 a2 cb ff ff       	call   c0001f04 <clst2sect>
c0005362:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005366:	89 d7                	mov    edi,edx
c0005368:	09 c7                	or     edi,eax
c000536a:	74 48                	je     c00053b4 <f_open+0x419>
c000536c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005370:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005374:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005380:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005384:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005388:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000538b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538f:	83 ec 0c             	sub    esp,0xc
c0005392:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005395:	6a 01                	push   0x1
c0005397:	52                   	push   edx
c0005398:	50                   	push   eax
c0005399:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053a1:	50                   	push   eax
c00053a2:	e8 79 c8 ff ff       	call   c0001c20 <disk_read>
c00053a7:	83 c4 20             	add    esp,0x20
c00053aa:	85 c0                	test   eax,eax
c00053ac:	0f 95 c0             	setne  al
c00053af:	0f b6 c0             	movzx  eax,al
c00053b2:	89 c5                	mov    ebp,eax
c00053b4:	83 ec 0c             	sub    esp,0xc
c00053b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053bb:	e8 f4 30 00 00       	call   c00084b4 <ff_memfree>
c00053c0:	83 c4 10             	add    esp,0x10
c00053c3:	85 ed                	test   ebp,ebp
c00053c5:	74 06                	je     c00053cd <f_open+0x432>
c00053c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cd:	83 c4 7c             	add    esp,0x7c
c00053d0:	89 e8                	mov    eax,ebp
c00053d2:	5b                   	pop    ebx
c00053d3:	5e                   	pop    esi
c00053d4:	5f                   	pop    edi
c00053d5:	5d                   	pop    ebp
c00053d6:	c3                   	ret    

c00053d7 <f_read>:
c00053d7:	55                   	push   ebp
c00053d8:	57                   	push   edi
c00053d9:	56                   	push   esi
c00053da:	53                   	push   ebx
c00053db:	83 ec 2c             	sub    esp,0x2c
c00053de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053f0:	89 d8                	mov    eax,ebx
c00053f2:	e8 77 cf ff ff       	call   c000236e <validate>
c00053f7:	89 c5                	mov    ebp,eax
c00053f9:	85 c0                	test   eax,eax
c00053fb:	0f 85 4c 02 00 00    	jne    c000564d <f_read+0x276>
c0005401:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005405:	85 ed                	test   ebp,ebp
c0005407:	0f 85 40 02 00 00    	jne    c000564d <f_read+0x276>
c000540d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005411:	0f 84 31 02 00 00    	je     c0005648 <f_read+0x271>
c0005417:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000541a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005420:	bf 00 00 00 00       	mov    edi,0x0
c0005425:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005428:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542c:	89 d1                	mov    ecx,edx
c000542e:	19 f9                	sbb    ecx,edi
c0005430:	0f 83 cf 00 00 00    	jae    c0005505 <f_read+0x12e>
c0005436:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000543a:	e9 c6 00 00 00       	jmp    c0005505 <f_read+0x12e>
c000543f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005442:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005445:	89 d0                	mov    eax,edx
c0005447:	25 ff 01 00 00       	and    eax,0x1ff
c000544c:	0f 85 c9 01 00 00    	jne    c000561b <f_read+0x244>
c0005452:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005456:	89 d6                	mov    esi,edx
c0005458:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545c:	89 cf                	mov    edi,ecx
c000545e:	48                   	dec    eax
c000545f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005463:	21 f0                	and    eax,esi
c0005465:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005469:	0f 84 a6 00 00 00    	je     c0005515 <f_read+0x13e>
c000546f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005473:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005476:	89 c8                	mov    eax,ecx
c0005478:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000547b:	e8 84 ca ff ff       	call   c0001f04 <clst2sect>
c0005480:	89 d7                	mov    edi,edx
c0005482:	09 c7                	or     edi,eax
c0005484:	0f 84 b4 00 00 00    	je     c000553e <f_read+0x167>
c000548a:	31 ff                	xor    edi,edi
c000548c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005490:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005493:	01 c6                	add    esi,eax
c0005495:	11 d7                	adc    edi,edx
c0005497:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549f:	0f 86 fd 00 00 00    	jbe    c00055a2 <f_read+0x1cb>
c00054a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ad:	c1 e8 09             	shr    eax,0x9
c00054b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b7:	03 14 24             	add    edx,DWORD PTR [esp]
c00054ba:	39 c2                	cmp    edx,eax
c00054bc:	76 07                	jbe    c00054c5 <f_read+0xee>
c00054be:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c5:	83 ec 0c             	sub    esp,0xc
c00054c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054cc:	57                   	push   edi
c00054cd:	56                   	push   esi
c00054ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d6:	50                   	push   eax
c00054d7:	e8 44 c7 ff ff       	call   c0001c20 <disk_read>
c00054dc:	83 c4 20             	add    esp,0x20
c00054df:	85 c0                	test   eax,eax
c00054e1:	75 6e                	jne    c0005551 <f_read+0x17a>
c00054e3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e7:	78 7e                	js     c0005567 <f_read+0x190>
c00054e9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ec:	c1 e6 09             	shl    esi,0x9
c00054ef:	31 ff                	xor    edi,edi
c00054f1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fd:	01 30                	add    DWORD PTR [eax],esi
c00054ff:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005502:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005505:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550a:	0f 85 2f ff ff ff    	jne    c000543f <f_read+0x68>
c0005510:	e9 38 01 00 00       	jmp    c000564d <f_read+0x276>
c0005515:	89 c8                	mov    eax,ecx
c0005517:	09 d0                	or     eax,edx
c0005519:	75 05                	jne    c0005520 <f_read+0x149>
c000551b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551e:	eb 19                	jmp    c0005539 <f_read+0x162>
c0005520:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005524:	74 09                	je     c000552f <f_read+0x158>
c0005526:	89 d8                	mov    eax,ebx
c0005528:	e8 f8 c9 ff ff       	call   c0001f25 <clmt_clust>
c000552d:	eb 0a                	jmp    c0005539 <f_read+0x162>
c000552f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005532:	89 d8                	mov    eax,ebx
c0005534:	e8 98 da ff ff       	call   c0002fd1 <get_fat>
c0005539:	83 f8 01             	cmp    eax,0x1
c000553c:	77 0e                	ja     c000554c <f_read+0x175>
c000553e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005542:	bd 02 00 00 00       	mov    ebp,0x2
c0005547:	e9 01 01 00 00       	jmp    c000564d <f_read+0x276>
c000554c:	83 f8 ff             	cmp    eax,0xffffffff
c000554f:	75 0e                	jne    c000555f <f_read+0x188>
c0005551:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005555:	bd 01 00 00 00       	mov    ebp,0x1
c000555a:	e9 ee 00 00 00       	jmp    c000564d <f_read+0x276>
c000555f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005562:	e9 08 ff ff ff       	jmp    c000546f <f_read+0x98>
c0005567:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000556a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556d:	29 f0                	sub    eax,esi
c000556f:	19 fa                	sbb    edx,edi
c0005571:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005574:	89 d7                	mov    edi,edx
c0005576:	ba 00 00 00 00       	mov    edx,0x0
c000557b:	89 f9                	mov    ecx,edi
c000557d:	19 d1                	sbb    ecx,edx
c000557f:	0f 83 64 ff ff ff    	jae    c00054e9 <f_read+0x112>
c0005585:	89 c7                	mov    edi,eax
c0005587:	8d 53 50             	lea    edx,[ebx+0x50]
c000558a:	c1 e7 09             	shl    edi,0x9
c000558d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005591:	b9 00 02 00 00       	mov    ecx,0x200
c0005596:	01 f8                	add    eax,edi
c0005598:	e8 4d c7 ff ff       	call   c0001cea <mem_cpy>
c000559d:	e9 47 ff ff ff       	jmp    c00054e9 <f_read+0x112>
c00055a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00055ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055af:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b3:	75 05                	jne    c00055ba <f_read+0x1e3>
c00055b5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b8:	74 5b                	je     c0005615 <f_read+0x23e>
c00055ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c5:	79 2a                	jns    c00055f1 <f_read+0x21a>
c00055c7:	83 ec 0c             	sub    esp,0xc
c00055ca:	6a 01                	push   0x1
c00055cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dc:	50                   	push   eax
c00055dd:	e8 54 c6 ff ff       	call   c0001c36 <disk_write>
c00055e2:	83 c4 20             	add    esp,0x20
c00055e5:	85 c0                	test   eax,eax
c00055e7:	0f 85 64 ff ff ff    	jne    c0005551 <f_read+0x17a>
c00055ed:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055f1:	83 ec 0c             	sub    esp,0xc
c00055f4:	6a 01                	push   0x1
c00055f6:	57                   	push   edi
c00055f7:	56                   	push   esi
c00055f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005600:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005604:	50                   	push   eax
c0005605:	e8 16 c6 ff ff       	call   c0001c20 <disk_read>
c000560a:	83 c4 20             	add    esp,0x20
c000560d:	85 c0                	test   eax,eax
c000560f:	0f 85 3c ff ff ff    	jne    c0005551 <f_read+0x17a>
c0005615:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005618:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000561b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561e:	ba 00 02 00 00       	mov    edx,0x200
c0005623:	25 ff 01 00 00       	and    eax,0x1ff
c0005628:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562c:	29 c2                	sub    edx,eax
c000562e:	39 d6                	cmp    esi,edx
c0005630:	76 02                	jbe    c0005634 <f_read+0x25d>
c0005632:	89 d6                	mov    esi,edx
c0005634:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005638:	89 f1                	mov    ecx,esi
c000563a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563e:	e8 a7 c6 ff ff       	call   c0001cea <mem_cpy>
c0005643:	e9 a7 fe ff ff       	jmp    c00054ef <f_read+0x118>
c0005648:	bd 07 00 00 00       	mov    ebp,0x7
c000564d:	83 c4 2c             	add    esp,0x2c
c0005650:	89 e8                	mov    eax,ebp
c0005652:	5b                   	pop    ebx
c0005653:	5e                   	pop    esi
c0005654:	5f                   	pop    edi
c0005655:	5d                   	pop    ebp
c0005656:	c3                   	ret    

c0005657 <f_write>:
c0005657:	55                   	push   ebp
c0005658:	57                   	push   edi
c0005659:	56                   	push   esi
c000565a:	53                   	push   ebx
c000565b:	83 ec 2c             	sub    esp,0x2c
c000565e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005662:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005666:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005670:	89 d8                	mov    eax,ebx
c0005672:	e8 f7 cc ff ff       	call   c000236e <validate>
c0005677:	89 c5                	mov    ebp,eax
c0005679:	85 c0                	test   eax,eax
c000567b:	0f 85 86 02 00 00    	jne    c0005907 <f_write+0x2b0>
c0005681:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005685:	85 ed                	test   ebp,ebp
c0005687:	0f 85 7a 02 00 00    	jne    c0005907 <f_write+0x2b0>
c000568d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005691:	0f 84 6b 02 00 00    	je     c0005902 <f_write+0x2ab>
c0005697:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000569b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569e:	0f 84 43 01 00 00    	je     c00057e7 <f_write+0x190>
c00056a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a7:	89 c1                	mov    ecx,eax
c00056a9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ad:	0f 83 34 01 00 00    	jae    c00057e7 <f_write+0x190>
c00056b3:	f7 d0                	not    eax
c00056b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b9:	e9 29 01 00 00       	jmp    c00057e7 <f_write+0x190>
c00056be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056c1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c4:	89 d0                	mov    eax,edx
c00056c6:	25 ff 01 00 00       	and    eax,0x1ff
c00056cb:	0f 85 00 02 00 00    	jne    c00058d1 <f_write+0x27a>
c00056d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d5:	89 d6                	mov    esi,edx
c00056d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056db:	89 cf                	mov    edi,ecx
c00056dd:	48                   	dec    eax
c00056de:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e2:	21 f0                	and    eax,esi
c00056e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e8:	0f 84 06 01 00 00    	je     c00057f4 <f_write+0x19d>
c00056ee:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f2:	0f 88 6e 01 00 00    	js     c0005866 <f_write+0x20f>
c00056f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 c8                	mov    eax,ecx
c0005701:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005705:	e8 fa c7 ff ff       	call   c0001f04 <clst2sect>
c000570a:	89 d1                	mov    ecx,edx
c000570c:	09 c1                	or     ecx,eax
c000570e:	0f 84 1c 01 00 00    	je     c0005830 <f_write+0x1d9>
c0005714:	31 ff                	xor    edi,edi
c0005716:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000571a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571e:	01 c6                	add    esi,eax
c0005720:	11 d7                	adc    edi,edx
c0005722:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000572a:	0f 86 63 01 00 00    	jbe    c0005893 <f_write+0x23c>
c0005730:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005734:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005738:	c1 e8 09             	shr    eax,0x9
c000573b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005743:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005747:	39 c2                	cmp    edx,eax
c0005749:	76 08                	jbe    c0005753 <f_write+0xfc>
c000574b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005753:	83 ec 0c             	sub    esp,0xc
c0005756:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000575a:	57                   	push   edi
c000575b:	56                   	push   esi
c000575c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005760:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005764:	50                   	push   eax
c0005765:	e8 cc c4 ff ff       	call   c0001c36 <disk_write>
c000576a:	83 c4 20             	add    esp,0x20
c000576d:	85 c0                	test   eax,eax
c000576f:	0f 85 ce 00 00 00    	jne    c0005843 <f_write+0x1ec>
c0005775:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005778:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000577b:	29 f0                	sub    eax,esi
c000577d:	19 fa                	sbb    edx,edi
c000577f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005783:	89 d7                	mov    edi,edx
c0005785:	ba 00 00 00 00       	mov    edx,0x0
c000578a:	89 f9                	mov    ecx,edi
c000578c:	19 d1                	sbb    ecx,edx
c000578e:	73 1c                	jae    c00057ac <f_write+0x155>
c0005790:	89 c7                	mov    edi,eax
c0005792:	b9 00 02 00 00       	mov    ecx,0x200
c0005797:	c1 e7 09             	shl    edi,0x9
c000579a:	8d 43 50             	lea    eax,[ebx+0x50]
c000579d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057a1:	89 fa                	mov    edx,edi
c00057a3:	e8 42 c5 ff ff       	call   c0001cea <mem_cpy>
c00057a8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057b0:	c1 e6 09             	shl    esi,0x9
c00057b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b7:	31 ff                	xor    edi,edi
c00057b9:	01 30                	add    DWORD PTR [eax],esi
c00057bb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057cc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cf:	89 c1                	mov    ecx,eax
c00057d1:	39 f2                	cmp    edx,esi
c00057d3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d9:	19 f9                	sbb    ecx,edi
c00057db:	73 04                	jae    c00057e1 <f_write+0x18a>
c00057dd:	89 f2                	mov    edx,esi
c00057df:	89 f8                	mov    eax,edi
c00057e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ec:	0f 85 cc fe ff ff    	jne    c00056be <f_write+0x67>
c00057f2:	eb 2e                	jmp    c0005822 <f_write+0x1cb>
c00057f4:	89 c8                	mov    eax,ecx
c00057f6:	09 d0                	or     eax,edx
c00057f8:	75 0b                	jne    c0005805 <f_write+0x1ae>
c00057fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fd:	31 d2                	xor    edx,edx
c00057ff:	85 c0                	test   eax,eax
c0005801:	75 28                	jne    c000582b <f_write+0x1d4>
c0005803:	eb 12                	jmp    c0005817 <f_write+0x1c0>
c0005805:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005809:	74 09                	je     c0005814 <f_write+0x1bd>
c000580b:	89 d8                	mov    eax,ebx
c000580d:	e8 13 c7 ff ff       	call   c0001f25 <clmt_clust>
c0005812:	eb 0a                	jmp    c000581e <f_write+0x1c7>
c0005814:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005817:	89 d8                	mov    eax,ebx
c0005819:	e8 a1 da ff ff       	call   c00032bf <create_chain>
c000581e:	85 c0                	test   eax,eax
c0005820:	75 09                	jne    c000582b <f_write+0x1d4>
c0005822:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005826:	e9 dc 00 00 00       	jmp    c0005907 <f_write+0x2b0>
c000582b:	83 f8 01             	cmp    eax,0x1
c000582e:	75 0e                	jne    c000583e <f_write+0x1e7>
c0005830:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005834:	bd 02 00 00 00       	mov    ebp,0x2
c0005839:	e9 c9 00 00 00       	jmp    c0005907 <f_write+0x2b0>
c000583e:	83 f8 ff             	cmp    eax,0xffffffff
c0005841:	75 0e                	jne    c0005851 <f_write+0x1fa>
c0005843:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005847:	bd 01 00 00 00       	mov    ebp,0x1
c000584c:	e9 b6 00 00 00       	jmp    c0005907 <f_write+0x2b0>
c0005851:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005854:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005858:	0f 85 90 fe ff ff    	jne    c00056ee <f_write+0x97>
c000585e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005861:	e9 88 fe ff ff       	jmp    c00056ee <f_write+0x97>
c0005866:	83 ec 0c             	sub    esp,0xc
c0005869:	8d 43 50             	lea    eax,[ebx+0x50]
c000586c:	6a 01                	push   0x1
c000586e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005871:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005874:	50                   	push   eax
c0005875:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005879:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587d:	50                   	push   eax
c000587e:	e8 b3 c3 ff ff       	call   c0001c36 <disk_write>
c0005883:	83 c4 20             	add    esp,0x20
c0005886:	85 c0                	test   eax,eax
c0005888:	75 b9                	jne    c0005843 <f_write+0x1ec>
c000588a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588e:	e9 65 fe ff ff       	jmp    c00056f8 <f_write+0xa1>
c0005893:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005896:	75 05                	jne    c000589d <f_write+0x246>
c0005898:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000589b:	74 2e                	je     c00058cb <f_write+0x274>
c000589d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a9:	73 20                	jae    c00058cb <f_write+0x274>
c00058ab:	83 ec 0c             	sub    esp,0xc
c00058ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00058b1:	6a 01                	push   0x1
c00058b3:	57                   	push   edi
c00058b4:	56                   	push   esi
c00058b5:	50                   	push   eax
c00058b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058ba:	50                   	push   eax
c00058bb:	e8 60 c3 ff ff       	call   c0001c20 <disk_read>
c00058c0:	83 c4 20             	add    esp,0x20
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 78 ff ff ff    	jne    c0005843 <f_write+0x1ec>
c00058cb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058ce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d4:	ba 00 02 00 00       	mov    edx,0x200
c00058d9:	25 ff 01 00 00       	and    eax,0x1ff
c00058de:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e2:	29 c2                	sub    edx,eax
c00058e4:	39 d6                	cmp    esi,edx
c00058e6:	76 02                	jbe    c00058ea <f_write+0x293>
c00058e8:	89 d6                	mov    esi,edx
c00058ea:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ee:	89 f1                	mov    ecx,esi
c00058f0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f4:	e8 f1 c3 ff ff       	call   c0001cea <mem_cpy>
c00058f9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fd:	e9 b1 fe ff ff       	jmp    c00057b3 <f_write+0x15c>
c0005902:	bd 07 00 00 00       	mov    ebp,0x7
c0005907:	83 c4 2c             	add    esp,0x2c
c000590a:	89 e8                	mov    eax,ebp
c000590c:	5b                   	pop    ebx
c000590d:	5e                   	pop    esi
c000590e:	5f                   	pop    edi
c000590f:	5d                   	pop    ebp
c0005910:	c3                   	ret    

c0005911 <f_sync>:
c0005911:	56                   	push   esi
c0005912:	53                   	push   ebx
c0005913:	83 ec 64             	sub    esp,0x64
c0005916:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000591a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 49 ca ff ff       	call   c000236e <validate>
c0005925:	85 c0                	test   eax,eax
c0005927:	0f 85 ba 01 00 00    	jne    c0005ae7 <f_sync+0x1d6>
c000592d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005930:	f6 c2 40             	test   dl,0x40
c0005933:	0f 84 ae 01 00 00    	je     c0005ae7 <f_sync+0x1d6>
c0005939:	84 d2                	test   dl,dl
c000593b:	79 33                	jns    c0005970 <f_sync+0x5f>
c000593d:	83 ec 0c             	sub    esp,0xc
c0005940:	8d 43 50             	lea    eax,[ebx+0x50]
c0005943:	6a 01                	push   0x1
c0005945:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005948:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000594b:	50                   	push   eax
c000594c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005950:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005954:	50                   	push   eax
c0005955:	e8 dc c2 ff ff       	call   c0001c36 <disk_write>
c000595a:	83 c4 20             	add    esp,0x20
c000595d:	89 c2                	mov    edx,eax
c000595f:	b8 01 00 00 00       	mov    eax,0x1
c0005964:	85 d2                	test   edx,edx
c0005966:	0f 85 7b 01 00 00    	jne    c0005ae7 <f_sync+0x1d6>
c000596c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005974:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005977:	0f 85 11 01 00 00    	jne    c0005a8e <f_sync+0x17d>
c000597d:	89 d8                	mov    eax,ebx
c000597f:	e8 13 d6 ff ff       	call   c0002f97 <fill_first_frag>
c0005984:	85 c0                	test   eax,eax
c0005986:	0f 85 5b 01 00 00    	jne    c0005ae7 <f_sync+0x1d6>
c000598c:	83 c9 ff             	or     ecx,0xffffffff
c000598f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005992:	89 d8                	mov    eax,ebx
c0005994:	e8 c9 d5 ff ff       	call   c0002f62 <fill_last_frag>
c0005999:	85 c0                	test   eax,eax
c000599b:	0f 85 46 01 00 00    	jne    c0005ae7 <f_sync+0x1d6>
c00059a1:	83 ec 0c             	sub    esp,0xc
c00059a4:	68 60 04 00 00       	push   0x460
c00059a9:	e8 f0 2a 00 00       	call   c000849e <ff_memalloc>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	89 c6                	mov    esi,eax
c00059b3:	b8 11 00 00 00       	mov    eax,0x11
c00059b8:	85 f6                	test   esi,esi
c00059ba:	0f 84 27 01 00 00    	je     c0005ae7 <f_sync+0x1d6>
c00059c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059ca:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059d0:	89 da                	mov    edx,ebx
c00059d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d6:	e8 af df ff ff       	call   c000398a <load_obj_xdir>
c00059db:	85 c0                	test   eax,eax
c00059dd:	0f 85 95 00 00 00    	jne    c0005a78 <f_sync+0x167>
c00059e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059ea:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ee:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059f1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f4:	83 ca 01             	or     edx,0x1
c00059f7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a00:	83 c0 34             	add    eax,0x34
c0005a03:	e8 d9 c2 ff ff       	call   c0001ce1 <st_dword>
c0005a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a15:	83 c0 38             	add    eax,0x38
c0005a18:	e8 c7 c2 ff ff       	call   c0001ce4 <st_qword>
c0005a1d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a24:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a27:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2a:	83 c0 28             	add    eax,0x28
c0005a2d:	e8 b2 c2 ff ff       	call   c0001ce4 <st_qword>
c0005a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a36:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a3b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3e:	83 c0 0c             	add    eax,0xc
c0005a41:	e8 9b c2 ff ff       	call   c0001ce1 <st_dword>
c0005a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a4a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a51:	31 d2                	xor    edx,edx
c0005a53:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a56:	83 c0 10             	add    eax,0x10
c0005a59:	e8 83 c2 ff ff       	call   c0001ce1 <st_dword>
c0005a5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a62:	e8 62 e1 ff ff       	call   c0003bc9 <store_xdir>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	75 0d                	jne    c0005a78 <f_sync+0x167>
c0005a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6f:	e8 00 eb ff ff       	call   c0004574 <sync_fs>
c0005a74:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7c:	83 ec 0c             	sub    esp,0xc
c0005a7f:	56                   	push   esi
c0005a80:	e8 2f 2a 00 00       	call   c00084b4 <ff_memfree>
c0005a85:	83 c4 10             	add    esp,0x10
c0005a88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8c:	eb 59                	jmp    c0005ae7 <f_sync+0x1d6>
c0005a8e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a91:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a94:	e8 b0 c9 ff ff       	call   c0002449 <move_window>
c0005a99:	85 c0                	test   eax,eax
c0005a9b:	75 4a                	jne    c0005ae7 <f_sync+0x1d6>
c0005a9d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005aa0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa4:	89 f2                	mov    edx,esi
c0005aa6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aab:	e8 5f f3 ff ff       	call   c0004e0f <st_clust.isra.1>
c0005ab0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab3:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab6:	e8 26 c2 ff ff       	call   c0001ce1 <st_dword>
c0005abb:	8d 46 16             	lea    eax,[esi+0x16]
c0005abe:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac3:	e8 19 c2 ff ff       	call   c0001ce1 <st_dword>
c0005ac8:	8d 46 12             	lea    eax,[esi+0x12]
c0005acb:	31 d2                	xor    edx,edx
c0005acd:	e8 0b c2 ff ff       	call   c0001cdd <st_word>
c0005ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ade:	e8 91 ea ff ff       	call   c0004574 <sync_fs>
c0005ae3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae7:	83 c4 64             	add    esp,0x64
c0005aea:	5b                   	pop    ebx
c0005aeb:	5e                   	pop    esi
c0005aec:	c3                   	ret    

c0005aed <f_close>:
c0005aed:	53                   	push   ebx
c0005aee:	83 ec 24             	sub    esp,0x24
c0005af1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af5:	53                   	push   ebx
c0005af6:	e8 16 fe ff ff       	call   c0005911 <f_sync>
c0005afb:	83 c4 10             	add    esp,0x10
c0005afe:	85 c0                	test   eax,eax
c0005b00:	75 15                	jne    c0005b17 <f_close+0x2a>
c0005b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b06:	89 d8                	mov    eax,ebx
c0005b08:	e8 61 c8 ff ff       	call   c000236e <validate>
c0005b0d:	85 c0                	test   eax,eax
c0005b0f:	75 06                	jne    c0005b17 <f_close+0x2a>
c0005b11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b17:	83 c4 18             	add    esp,0x18
c0005b1a:	5b                   	pop    ebx
c0005b1b:	c3                   	ret    

c0005b1c <f_lseek>:
c0005b1c:	55                   	push   ebp
c0005b1d:	57                   	push   edi
c0005b1e:	56                   	push   esi
c0005b1f:	53                   	push   ebx
c0005b20:	83 ec 3c             	sub    esp,0x3c
c0005b23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b2b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b36:	89 d8                	mov    eax,ebx
c0005b38:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3c:	e8 2d c8 ff ff       	call   c000236e <validate>
c0005b41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b45:	85 c0                	test   eax,eax
c0005b47:	0f 85 7a 04 00 00    	jne    c0005fc7 <f_lseek+0x4ab>
c0005b4d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b55:	85 c0                	test   eax,eax
c0005b57:	0f 85 6a 04 00 00    	jne    c0005fc7 <f_lseek+0x4ab>
c0005b5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b61:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b64:	74 0c                	je     c0005b72 <f_lseek+0x56>
c0005b66:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	75 1f                	jne    c0005b8c <f_lseek+0x70>
c0005b6d:	e9 b5 01 00 00       	jmp    c0005d27 <f_lseek+0x20b>
c0005b72:	83 c9 ff             	or     ecx,0xffffffff
c0005b75:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b78:	89 d8                	mov    eax,ebx
c0005b7a:	e8 e3 d3 ff ff       	call   c0002f62 <fill_last_frag>
c0005b7f:	85 c0                	test   eax,eax
c0005b81:	74 e3                	je     c0005b66 <f_lseek+0x4a>
c0005b83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b87:	e9 3b 04 00 00       	jmp    c0005fc7 <f_lseek+0x4ab>
c0005b8c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b91:	0f 85 ac 00 00 00    	jne    c0005c43 <f_lseek+0x127>
c0005b97:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b9b:	0f 85 a2 00 00 00    	jne    c0005c43 <f_lseek+0x127>
c0005ba1:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba9:	be 02 00 00 00       	mov    esi,0x2
c0005bae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb2:	85 ed                	test   ebp,ebp
c0005bb4:	74 73                	je     c0005c29 <f_lseek+0x10d>
c0005bb6:	89 e9                	mov    ecx,ebp
c0005bb8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbf:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc2:	89 ca                	mov    edx,ecx
c0005bc4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc8:	89 d8                	mov    eax,ebx
c0005bca:	e8 02 d4 ff ff       	call   c0002fd1 <get_fat>
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	83 f8 01             	cmp    eax,0x1
c0005bd6:	77 11                	ja     c0005be9 <f_lseek+0xcd>
c0005bd8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bdc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be4:	e9 de 03 00 00       	jmp    c0005fc7 <f_lseek+0x4ab>
c0005be9:	83 f8 ff             	cmp    eax,0xffffffff
c0005bec:	75 11                	jne    c0005bff <f_lseek+0xe3>
c0005bee:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bfa:	e9 c8 03 00 00       	jmp    c0005fc7 <f_lseek+0x4ab>
c0005bff:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c02:	89 c1                	mov    ecx,eax
c0005c04:	39 c2                	cmp    edx,eax
c0005c06:	74 b7                	je     c0005bbf <f_lseek+0xa3>
c0005c08:	83 c6 02             	add    esi,0x2
c0005c0b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0f:	72 0b                	jb     c0005c1c <f_lseek+0x100>
c0005c11:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c14:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c17:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c19:	83 c7 08             	add    edi,0x8
c0005c1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c20:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c23:	76 04                	jbe    c0005c29 <f_lseek+0x10d>
c0005c25:	89 c5                	mov    ebp,eax
c0005c27:	eb 8d                	jmp    c0005bb6 <f_lseek+0x9a>
c0005c29:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c30:	89 30                	mov    DWORD PTR [eax],esi
c0005c32:	0f 87 87 03 00 00    	ja     c0005fbf <f_lseek+0x4a3>
c0005c38:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3e:	e9 84 03 00 00       	jmp    c0005fc7 <f_lseek+0x4ab>
c0005c43:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c46:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c55:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c60:	73 0f                	jae    c0005c71 <f_lseek+0x155>
c0005c62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c87:	0f 84 3a 03 00 00    	je     c0005fc7 <f_lseek+0x4ab>
c0005c8d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c91:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c95:	83 c6 ff             	add    esi,0xffffffff
c0005c98:	89 d8                	mov    eax,ebx
c0005c9a:	83 d7 ff             	adc    edi,0xffffffff
c0005c9d:	89 f2                	mov    edx,esi
c0005c9f:	89 f9                	mov    ecx,edi
c0005ca1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca8:	e8 78 c2 ff ff       	call   c0001f25 <clmt_clust>
c0005cad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005cb1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb4:	89 c2                	mov    edx,eax
c0005cb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cba:	89 c8                	mov    eax,ecx
c0005cbc:	e8 43 c2 ff ff       	call   c0001f04 <clst2sect>
c0005cc1:	89 d7                	mov    edi,edx
c0005cc3:	09 c7                	or     edi,eax
c0005cc5:	0f 84 0d ff ff ff    	je     c0005bd8 <f_lseek+0xbc>
c0005ccb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd5:	0f 84 ec 02 00 00    	je     c0005fc7 <f_lseek+0x4ab>
c0005cdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cee:	4d                   	dec    ebp
c0005cef:	31 ff                	xor    edi,edi
c0005cf1:	21 ee                	and    esi,ebp
c0005cf3:	01 c6                	add    esi,eax
c0005cf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf8:	11 d7                	adc    edi,edx
c0005cfa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfd:	39 fa                	cmp    edx,edi
c0005cff:	75 08                	jne    c0005d09 <f_lseek+0x1ed>
c0005d01:	39 f0                	cmp    eax,esi
c0005d03:	0f 84 be 02 00 00    	je     c0005fc7 <f_lseek+0x4ab>
c0005d09:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d10:	0f 89 80 02 00 00    	jns    c0005f96 <f_lseek+0x47a>
c0005d16:	83 ec 0c             	sub    esp,0xc
c0005d19:	6a 01                	push   0x1
c0005d1b:	52                   	push   edx
c0005d1c:	50                   	push   eax
c0005d1d:	55                   	push   ebp
c0005d1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d22:	e9 5a 02 00 00       	jmp    c0005f81 <f_lseek+0x465>
c0005d27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d2b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2e:	74 16                	je     c0005d46 <f_lseek+0x22a>
c0005d30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d35:	76 0f                	jbe    c0005d46 <f_lseek+0x22a>
c0005d37:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4f:	89 c7                	mov    edi,eax
c0005d51:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d55:	73 0d                	jae    c0005d64 <f_lseek+0x248>
c0005d57:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d5b:	75 07                	jne    c0005d64 <f_lseek+0x248>
c0005d5d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d6a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d75:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7f:	75 09                	jne    c0005d8a <f_lseek+0x26e>
c0005d81:	31 f6                	xor    esi,esi
c0005d83:	31 ff                	xor    edi,edi
c0005d85:	e9 af 01 00 00       	jmp    c0005f39 <f_lseek+0x41d>
c0005d8a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8e:	89 d7                	mov    edi,edx
c0005d90:	c1 e1 09             	shl    ecx,0x9
c0005d93:	09 c7                	or     edi,eax
c0005d95:	89 cd                	mov    ebp,ecx
c0005d97:	74 6d                	je     c0005e06 <f_lseek+0x2ea>
c0005d99:	83 c0 ff             	add    eax,0xffffffff
c0005d9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005da0:	83 d2 ff             	adc    edx,0xffffffff
c0005da3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daa:	83 c0 ff             	add    eax,0xffffffff
c0005dad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005db1:	83 d2 ff             	adc    edx,0xffffffff
c0005db4:	31 ff                	xor    edi,edi
c0005db6:	57                   	push   edi
c0005db7:	51                   	push   ecx
c0005db8:	52                   	push   edx
c0005db9:	50                   	push   eax
c0005dba:	e8 75 14 02 00       	call   c0027234 <__udivdi3>
c0005dbf:	83 c4 10             	add    esp,0x10
c0005dc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dca:	57                   	push   edi
c0005dcb:	55                   	push   ebp
c0005dcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd4:	e8 5b 14 02 00       	call   c0027234 <__udivdi3>
c0005dd9:	83 c4 10             	add    esp,0x10
c0005ddc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005de0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de4:	19 d1                	sbb    ecx,edx
c0005de6:	72 1e                	jb     c0005e06 <f_lseek+0x2ea>
c0005de8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dec:	89 e9                	mov    ecx,ebp
c0005dee:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005df1:	f7 d9                	neg    ecx
c0005df3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dfa:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e00:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e04:	eb 28                	jmp    c0005e2e <f_lseek+0x312>
c0005e06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e09:	85 c0                	test   eax,eax
c0005e0b:	75 1e                	jne    c0005e2b <f_lseek+0x30f>
c0005e0d:	31 d2                	xor    edx,edx
c0005e0f:	89 d8                	mov    eax,ebx
c0005e11:	e8 a9 d4 ff ff       	call   c00032bf <create_chain>
c0005e16:	83 f8 01             	cmp    eax,0x1
c0005e19:	0f 84 b9 fd ff ff    	je     c0005bd8 <f_lseek+0xbc>
c0005e1f:	83 f8 ff             	cmp    eax,0xffffffff
c0005e22:	0f 84 c6 fd ff ff    	je     c0005bee <f_lseek+0xd2>
c0005e28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e2b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2e:	85 c0                	test   eax,eax
c0005e30:	0f 84 4b ff ff ff    	je     c0005d81 <f_lseek+0x265>
c0005e36:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e42:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e49:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e53:	0f 83 9d 00 00 00    	jae    c0005ef6 <f_lseek+0x3da>
c0005e59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e61:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e64:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e68:	01 f2                	add    edx,esi
c0005e6a:	11 f9                	adc    ecx,edi
c0005e6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e74:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e77:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e7a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7d:	f6 c1 02             	test   cl,0x2
c0005e80:	74 35                	je     c0005eb7 <f_lseek+0x39b>
c0005e82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e86:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e89:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e90:	73 16                	jae    c0005ea8 <f_lseek+0x38c>
c0005e92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e9a:	88 ca                	mov    dl,cl
c0005e9c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9f:	83 ca 40             	or     edx,0x40
c0005ea2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea8:	89 c2                	mov    edx,eax
c0005eaa:	89 d8                	mov    eax,ebx
c0005eac:	e8 0e d4 ff ff       	call   c00032bf <create_chain>
c0005eb1:	85 c0                	test   eax,eax
c0005eb3:	75 0b                	jne    c0005ec0 <f_lseek+0x3a4>
c0005eb5:	eb 30                	jmp    c0005ee7 <f_lseek+0x3cb>
c0005eb7:	89 c2                	mov    edx,eax
c0005eb9:	89 d8                	mov    eax,ebx
c0005ebb:	e8 11 d1 ff ff       	call   c0002fd1 <get_fat>
c0005ec0:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec3:	0f 84 25 fd ff ff    	je     c0005bee <f_lseek+0xd2>
c0005ec9:	83 f8 01             	cmp    eax,0x1
c0005ecc:	0f 86 06 fd ff ff    	jbe    c0005bd8 <f_lseek+0xbc>
c0005ed2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed9:	0f 86 f9 fc ff ff    	jbe    c0005bd8 <f_lseek+0xbc>
c0005edf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee2:	e9 5b ff ff ff       	jmp    c0005e42 <f_lseek+0x326>
c0005ee7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f03:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f06:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0c:	0f 84 6f fe ff ff    	je     c0005d81 <f_lseek+0x265>
c0005f12:	89 c2                	mov    edx,eax
c0005f14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f18:	e8 e7 bf ff ff       	call   c0001f04 <clst2sect>
c0005f1d:	89 d7                	mov    edi,edx
c0005f1f:	09 c7                	or     edi,eax
c0005f21:	0f 84 b1 fc ff ff    	je     c0005bd8 <f_lseek+0xbc>
c0005f27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f32:	c1 ef 09             	shr    edi,0x9
c0005f35:	01 c6                	add    esi,eax
c0005f37:	11 d7                	adc    edi,edx
c0005f39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f42:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f45:	19 d1                	sbb    ecx,edx
c0005f47:	73 0a                	jae    c0005f53 <f_lseek+0x437>
c0005f49:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f53:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f58:	74 6d                	je     c0005fc7 <f_lseek+0x4ab>
c0005f5a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f60:	39 fa                	cmp    edx,edi
c0005f62:	75 04                	jne    c0005f68 <f_lseek+0x44c>
c0005f64:	39 f0                	cmp    eax,esi
c0005f66:	74 5f                	je     c0005fc7 <f_lseek+0x4ab>
c0005f68:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f6b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6f:	79 25                	jns    c0005f96 <f_lseek+0x47a>
c0005f71:	83 ec 0c             	sub    esp,0xc
c0005f74:	6a 01                	push   0x1
c0005f76:	52                   	push   edx
c0005f77:	50                   	push   eax
c0005f78:	55                   	push   ebp
c0005f79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f81:	50                   	push   eax
c0005f82:	e8 af bc ff ff       	call   c0001c36 <disk_write>
c0005f87:	83 c4 20             	add    esp,0x20
c0005f8a:	85 c0                	test   eax,eax
c0005f8c:	0f 85 5c fc ff ff    	jne    c0005bee <f_lseek+0xd2>
c0005f92:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f96:	83 ec 0c             	sub    esp,0xc
c0005f99:	6a 01                	push   0x1
c0005f9b:	57                   	push   edi
c0005f9c:	56                   	push   esi
c0005f9d:	55                   	push   ebp
c0005f9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa6:	50                   	push   eax
c0005fa7:	e8 74 bc ff ff       	call   c0001c20 <disk_read>
c0005fac:	83 c4 20             	add    esp,0x20
c0005faf:	85 c0                	test   eax,eax
c0005fb1:	0f 85 37 fc ff ff    	jne    c0005bee <f_lseek+0xd2>
c0005fb7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbd:	eb 08                	jmp    c0005fc7 <f_lseek+0x4ab>
c0005fbf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fcb:	83 c4 3c             	add    esp,0x3c
c0005fce:	5b                   	pop    ebx
c0005fcf:	5e                   	pop    esi
c0005fd0:	5f                   	pop    edi
c0005fd1:	5d                   	pop    ebp
c0005fd2:	c3                   	ret    

c0005fd3 <f_opendir>:
c0005fd3:	56                   	push   esi
c0005fd4:	b8 09 00 00 00       	mov    eax,0x9
c0005fd9:	53                   	push   ebx
c0005fda:	83 ec 24             	sub    esp,0x24
c0005fdd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe1:	85 db                	test   ebx,ebx
c0005fe3:	0f 84 e6 00 00 00    	je     c00060cf <f_opendir+0xfc>
c0005fe9:	31 c9                	xor    ecx,ecx
c0005feb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fef:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff3:	e8 03 c7 ff ff       	call   c00026fb <mount_volume>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	0f 85 c9 00 00 00    	jne    c00060c9 <f_opendir+0xf6>
c0006000:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	89 03                	mov    DWORD PTR [ebx],eax
c0006009:	68 60 04 00 00       	push   0x460
c000600e:	e8 8b 24 00 00       	call   c000849e <ff_memalloc>
c0006013:	83 c4 10             	add    esp,0x10
c0006016:	89 c6                	mov    esi,eax
c0006018:	b8 11 00 00 00       	mov    eax,0x11
c000601d:	85 f6                	test   esi,esi
c000601f:	0f 84 aa 00 00 00    	je     c00060cf <f_opendir+0xfc>
c0006025:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006029:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006032:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006035:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006039:	89 d8                	mov    eax,ebx
c000603b:	e8 31 ee ff ff       	call   c0004e71 <follow_path>
c0006040:	85 c0                	test   eax,eax
c0006042:	75 61                	jne    c00060a5 <f_opendir+0xd2>
c0006044:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006048:	78 46                	js     c0006090 <f_opendir+0xbd>
c000604a:	b8 05 00 00 00       	mov    eax,0x5
c000604f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006053:	74 50                	je     c00060a5 <f_opendir+0xd2>
c0006055:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006059:	8a 01                	mov    al,BYTE PTR [ecx]
c000605b:	3c 04                	cmp    al,0x4
c000605d:	75 26                	jne    c0006085 <f_opendir+0xb2>
c000605f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006062:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006065:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006068:	30 d2                	xor    dl,dl
c000606a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606e:	09 c2                	or     edx,eax
c0006070:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006073:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006076:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006079:	89 da                	mov    edx,ebx
c000607b:	8d 41 10             	lea    eax,[ecx+0x10]
c000607e:	e8 b4 ed ff ff       	call   c0004e37 <init_alloc_info.isra.2>
c0006083:	eb 0b                	jmp    c0006090 <f_opendir+0xbd>
c0006085:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006088:	e8 59 ed ff ff       	call   c0004de6 <ld_clust.isra.0>
c000608d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006090:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006094:	31 d2                	xor    edx,edx
c0006096:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000609a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609e:	89 d8                	mov    eax,ebx
c00060a0:	e8 22 d1 ff ff       	call   c00031c7 <dir_sdi>
c00060a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a9:	83 ec 0c             	sub    esp,0xc
c00060ac:	56                   	push   esi
c00060ad:	e8 02 24 00 00       	call   c00084b4 <ff_memfree>
c00060b2:	83 c4 10             	add    esp,0x10
c00060b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b9:	83 f8 04             	cmp    eax,0x4
c00060bc:	74 06                	je     c00060c4 <f_opendir+0xf1>
c00060be:	85 c0                	test   eax,eax
c00060c0:	74 0d                	je     c00060cf <f_opendir+0xfc>
c00060c2:	eb 05                	jmp    c00060c9 <f_opendir+0xf6>
c00060c4:	b8 05 00 00 00       	mov    eax,0x5
c00060c9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cf:	83 c4 24             	add    esp,0x24
c00060d2:	5b                   	pop    ebx
c00060d3:	5e                   	pop    esi
c00060d4:	c3                   	ret    

c00060d5 <f_closedir>:
c00060d5:	53                   	push   ebx
c00060d6:	83 ec 18             	sub    esp,0x18
c00060d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060e1:	89 d8                	mov    eax,ebx
c00060e3:	e8 86 c2 ff ff       	call   c000236e <validate>
c00060e8:	85 c0                	test   eax,eax
c00060ea:	75 06                	jne    c00060f2 <f_closedir+0x1d>
c00060ec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f2:	83 c4 18             	add    esp,0x18
c00060f5:	5b                   	pop    ebx
c00060f6:	c3                   	ret    

c00060f7 <f_readdir>:
c00060f7:	57                   	push   edi
c00060f8:	56                   	push   esi
c00060f9:	53                   	push   ebx
c00060fa:	83 ec 20             	sub    esp,0x20
c00060fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006101:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006105:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006109:	89 d8                	mov    eax,ebx
c000610b:	e8 5e c2 ff ff       	call   c000236e <validate>
c0006110:	85 c0                	test   eax,eax
c0006112:	75 77                	jne    c000618b <f_readdir+0x94>
c0006114:	85 ff                	test   edi,edi
c0006116:	75 0b                	jne    c0006123 <f_readdir+0x2c>
c0006118:	31 d2                	xor    edx,edx
c000611a:	89 d8                	mov    eax,ebx
c000611c:	e8 a6 d0 ff ff       	call   c00031c7 <dir_sdi>
c0006121:	eb 68                	jmp    c000618b <f_readdir+0x94>
c0006123:	83 ec 0c             	sub    esp,0xc
c0006126:	68 60 04 00 00       	push   0x460
c000612b:	e8 6e 23 00 00       	call   c000849e <ff_memalloc>
c0006130:	83 c4 10             	add    esp,0x10
c0006133:	89 c6                	mov    esi,eax
c0006135:	b8 11 00 00 00       	mov    eax,0x11
c000613a:	85 f6                	test   esi,esi
c000613c:	74 4d                	je     c000618b <f_readdir+0x94>
c000613e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006142:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006148:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000614b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614e:	31 d2                	xor    edx,edx
c0006150:	89 d8                	mov    eax,ebx
c0006152:	e8 80 d8 ff ff       	call   c00039d7 <dir_read>
c0006157:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615c:	75 19                	jne    c0006177 <f_readdir+0x80>
c000615e:	89 fa                	mov    edx,edi
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7e ea ff ff       	call   c0004be5 <get_fileinfo>
c0006167:	31 d2                	xor    edx,edx
c0006169:	89 d8                	mov    eax,ebx
c000616b:	e8 af d5 ff ff       	call   c000371f <dir_next>
c0006170:	83 f8 04             	cmp    eax,0x4
c0006173:	75 02                	jne    c0006177 <f_readdir+0x80>
c0006175:	31 c0                	xor    eax,eax
c0006177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000617b:	83 ec 0c             	sub    esp,0xc
c000617e:	56                   	push   esi
c000617f:	e8 30 23 00 00       	call   c00084b4 <ff_memfree>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618b:	83 c4 20             	add    esp,0x20
c000618e:	5b                   	pop    ebx
c000618f:	5e                   	pop    esi
c0006190:	5f                   	pop    edi
c0006191:	c3                   	ret    

c0006192 <f_stat>:
c0006192:	57                   	push   edi
c0006193:	31 c9                	xor    ecx,ecx
c0006195:	56                   	push   esi
c0006196:	53                   	push   ebx
c0006197:	83 ec 50             	sub    esp,0x50
c000619a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619e:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a6:	e8 50 c5 ff ff       	call   c00026fb <mount_volume>
c00061ab:	89 c3                	mov    ebx,eax
c00061ad:	85 c0                	test   eax,eax
c00061af:	75 67                	jne    c0006218 <f_stat+0x86>
c00061b1:	83 ec 0c             	sub    esp,0xc
c00061b4:	bb 11 00 00 00       	mov    ebx,0x11
c00061b9:	68 60 04 00 00       	push   0x460
c00061be:	e8 db 22 00 00       	call   c000849e <ff_memalloc>
c00061c3:	83 c4 10             	add    esp,0x10
c00061c6:	89 c6                	mov    esi,eax
c00061c8:	85 c0                	test   eax,eax
c00061ca:	74 4c                	je     c0006218 <f_stat+0x86>
c00061cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061d0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061dc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e4:	e8 88 ec ff ff       	call   c0004e71 <follow_path>
c00061e9:	89 c3                	mov    ebx,eax
c00061eb:	85 c0                	test   eax,eax
c00061ed:	75 1d                	jne    c000620c <f_stat+0x7a>
c00061ef:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f4:	78 11                	js     c0006207 <f_stat+0x75>
c00061f6:	85 ff                	test   edi,edi
c00061f8:	74 12                	je     c000620c <f_stat+0x7a>
c00061fa:	89 fa                	mov    edx,edi
c00061fc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006200:	e8 e0 e9 ff ff       	call   c0004be5 <get_fileinfo>
c0006205:	eb 05                	jmp    c000620c <f_stat+0x7a>
c0006207:	bb 06 00 00 00       	mov    ebx,0x6
c000620c:	83 ec 0c             	sub    esp,0xc
c000620f:	56                   	push   esi
c0006210:	e8 9f 22 00 00       	call   c00084b4 <ff_memfree>
c0006215:	83 c4 10             	add    esp,0x10
c0006218:	83 c4 50             	add    esp,0x50
c000621b:	89 d8                	mov    eax,ebx
c000621d:	5b                   	pop    ebx
c000621e:	5e                   	pop    esi
c000621f:	5f                   	pop    edi
c0006220:	c3                   	ret    

c0006221 <f_getfree>:
c0006221:	55                   	push   ebp
c0006222:	31 c9                	xor    ecx,ecx
c0006224:	57                   	push   edi
c0006225:	56                   	push   esi
c0006226:	53                   	push   ebx
c0006227:	83 ec 5c             	sub    esp,0x5c
c000622a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006232:	e8 c4 c4 ff ff       	call   c00026fb <mount_volume>
c0006237:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000623b:	85 c0                	test   eax,eax
c000623d:	0f 85 9d 01 00 00    	jne    c00063e0 <f_getfree+0x1bf>
c0006243:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006247:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000624b:	89 02                	mov    DWORD PTR [edx],eax
c000624d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006250:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006253:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006256:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000625a:	39 f2                	cmp    edx,esi
c000625c:	77 0b                	ja     c0006269 <f_getfree+0x48>
c000625e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006262:	89 10                	mov    DWORD PTR [eax],edx
c0006264:	e9 77 01 00 00       	jmp    c00063e0 <f_getfree+0x1bf>
c0006269:	8a 10                	mov    dl,BYTE PTR [eax]
c000626b:	80 fa 01             	cmp    dl,0x1
c000626e:	75 3a                	jne    c00062aa <f_getfree+0x89>
c0006270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006274:	be 02 00 00 00       	mov    esi,0x2
c0006279:	31 db                	xor    ebx,ebx
c000627b:	89 f2                	mov    edx,esi
c000627d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006281:	e8 4b cd ff ff       	call   c0002fd1 <get_fat>
c0006286:	83 f8 ff             	cmp    eax,0xffffffff
c0006289:	0f 84 28 01 00 00    	je     c00063b7 <f_getfree+0x196>
c000628f:	83 f8 01             	cmp    eax,0x1
c0006292:	0f 84 29 01 00 00    	je     c00063c1 <f_getfree+0x1a0>
c0006298:	83 d3 00             	adc    ebx,0x0
c000629b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629f:	46                   	inc    esi
c00062a0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a3:	77 d6                	ja     c000627b <f_getfree+0x5a>
c00062a5:	e9 25 01 00 00       	jmp    c00063cf <f_getfree+0x1ae>
c00062aa:	80 fa 04             	cmp    dl,0x4
c00062ad:	0f 85 88 00 00 00    	jne    c000633b <f_getfree+0x11a>
c00062b3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b6:	31 ed                	xor    ebp,ebp
c00062b8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c3:	31 db                	xor    ebx,ebx
c00062c5:	85 ed                	test   ebp,ebp
c00062c7:	75 3f                	jne    c0006308 <f_getfree+0xe7>
c00062c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062d1:	83 c0 01             	add    eax,0x1
c00062d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d8:	83 d2 00             	adc    edx,0x0
c00062db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062eb:	e8 59 c1 ff ff       	call   c0002449 <move_window>
c00062f0:	85 c0                	test   eax,eax
c00062f2:	0f 85 d3 00 00 00    	jne    c00063cb <f_getfree+0x1aa>
c00062f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006300:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006304:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006308:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006313:	89 cf                	mov    edi,ecx
c0006315:	85 f6                	test   esi,esi
c0006317:	74 12                	je     c000632b <f_getfree+0x10a>
c0006319:	88 c1                	mov    cl,al
c000631b:	83 e1 01             	and    ecx,0x1
c000631e:	80 f9 01             	cmp    cl,0x1
c0006321:	83 d3 00             	adc    ebx,0x0
c0006324:	d0 e8                	shr    al,1
c0006326:	4e                   	dec    esi
c0006327:	39 fe                	cmp    esi,edi
c0006329:	75 ea                	jne    c0006315 <f_getfree+0xf4>
c000632b:	45                   	inc    ebp
c000632c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006332:	85 f6                	test   esi,esi
c0006334:	75 8f                	jne    c00062c5 <f_getfree+0xa4>
c0006336:	e9 94 00 00 00       	jmp    c00063cf <f_getfree+0x1ae>
c000633b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006341:	31 f6                	xor    esi,esi
c0006343:	31 db                	xor    ebx,ebx
c0006345:	85 f6                	test   esi,esi
c0006347:	75 1b                	jne    c0006364 <f_getfree+0x143>
c0006349:	89 d7                	mov    edi,edx
c000634b:	89 cd                	mov    ebp,ecx
c000634d:	83 c7 01             	add    edi,0x1
c0006350:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006354:	83 d5 00             	adc    ebp,0x0
c0006357:	e8 ed c0 ff ff       	call   c0002449 <move_window>
c000635c:	85 c0                	test   eax,eax
c000635e:	75 6b                	jne    c00063cb <f_getfree+0x1aa>
c0006360:	89 fa                	mov    edx,edi
c0006362:	89 e9                	mov    ecx,ebp
c0006364:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006368:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006370:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006373:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006377:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000637b:	75 11                	jne    c000638e <f_getfree+0x16d>
c000637d:	e8 e9 b8 ff ff       	call   c0001c6b <ld_word>
c0006382:	66 83 f8 01          	cmp    ax,0x1
c0006386:	83 d3 00             	adc    ebx,0x0
c0006389:	83 c6 02             	add    esi,0x2
c000638c:	eb 13                	jmp    c00063a1 <f_getfree+0x180>
c000638e:	e8 e5 b8 ff ff       	call   c0001c78 <ld_dword>
c0006393:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006398:	83 f8 01             	cmp    eax,0x1
c000639b:	83 d3 00             	adc    ebx,0x0
c000639e:	83 c6 04             	add    esi,0x4
c00063a1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063af:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b3:	75 90                	jne    c0006345 <f_getfree+0x124>
c00063b5:	eb 18                	jmp    c00063cf <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bf:	eb 0e                	jmp    c00063cf <f_getfree+0x1ae>
c00063c1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c9:	eb 04                	jmp    c00063cf <f_getfree+0x1ae>
c00063cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d3:	89 18                	mov    DWORD PTR [eax],ebx
c00063d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063dc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e4:	83 c4 5c             	add    esp,0x5c
c00063e7:	5b                   	pop    ebx
c00063e8:	5e                   	pop    esi
c00063e9:	5f                   	pop    edi
c00063ea:	5d                   	pop    ebp
c00063eb:	c3                   	ret    

c00063ec <f_truncate>:
c00063ec:	56                   	push   esi
c00063ed:	53                   	push   ebx
c00063ee:	83 ec 14             	sub    esp,0x14
c00063f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 6e bf ff ff       	call   c000236e <validate>
c0006400:	89 c6                	mov    esi,eax
c0006402:	85 c0                	test   eax,eax
c0006404:	0f 85 d2 00 00 00    	jne    c00064dc <f_truncate+0xf0>
c000640a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640e:	85 f6                	test   esi,esi
c0006410:	0f 85 c6 00 00 00    	jne    c00064dc <f_truncate+0xf0>
c0006416:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000641a:	0f 84 b7 00 00 00    	je     c00064d7 <f_truncate+0xeb>
c0006420:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006423:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006426:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006429:	89 d1                	mov    ecx,edx
c000642b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642e:	0f 83 a8 00 00 00    	jae    c00064dc <f_truncate+0xf0>
c0006434:	09 c2                	or     edx,eax
c0006436:	75 15                	jne    c000644d <f_truncate+0x61>
c0006438:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000643b:	31 c9                	xor    ecx,ecx
c000643d:	89 d8                	mov    eax,ebx
c000643f:	e8 7a d0 ff ff       	call   c00034be <remove_chain>
c0006444:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000644b:	eb 35                	jmp    c0006482 <f_truncate+0x96>
c000644d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006450:	89 d8                	mov    eax,ebx
c0006452:	e8 7a cb ff ff       	call   c0002fd1 <get_fat>
c0006457:	89 c2                	mov    edx,eax
c0006459:	b8 01 00 00 00       	mov    eax,0x1
c000645e:	83 fa ff             	cmp    edx,0xffffffff
c0006461:	74 1f                	je     c0006482 <f_truncate+0x96>
c0006463:	b8 02 00 00 00       	mov    eax,0x2
c0006468:	83 fa 01             	cmp    edx,0x1
c000646b:	74 15                	je     c0006482 <f_truncate+0x96>
c000646d:	31 c0                	xor    eax,eax
c000646f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006473:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006476:	76 0a                	jbe    c0006482 <f_truncate+0x96>
c0006478:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000647b:	89 d8                	mov    eax,ebx
c000647d:	e8 3c d0 ff ff       	call   c00034be <remove_chain>
c0006482:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006485:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006488:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000648b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006491:	83 ca 40             	or     edx,0x40
c0006494:	85 c0                	test   eax,eax
c0006496:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006499:	75 35                	jne    c00064d0 <f_truncate+0xe4>
c000649b:	84 d2                	test   dl,dl
c000649d:	79 3d                	jns    c00064dc <f_truncate+0xf0>
c000649f:	83 ec 0c             	sub    esp,0xc
c00064a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a5:	6a 01                	push   0x1
c00064a7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ad:	50                   	push   eax
c00064ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b6:	50                   	push   eax
c00064b7:	e8 7a b7 ff ff       	call   c0001c36 <disk_write>
c00064bc:	83 c4 20             	add    esp,0x20
c00064bf:	85 c0                	test   eax,eax
c00064c1:	75 08                	jne    c00064cb <f_truncate+0xdf>
c00064c3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c7:	31 f6                	xor    esi,esi
c00064c9:	eb 11                	jmp    c00064dc <f_truncate+0xf0>
c00064cb:	b8 01 00 00 00       	mov    eax,0x1
c00064d0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d3:	89 c6                	mov    esi,eax
c00064d5:	eb 05                	jmp    c00064dc <f_truncate+0xf0>
c00064d7:	be 07 00 00 00       	mov    esi,0x7
c00064dc:	89 f0                	mov    eax,esi
c00064de:	83 c4 14             	add    esp,0x14
c00064e1:	5b                   	pop    ebx
c00064e2:	5e                   	pop    esi
c00064e3:	c3                   	ret    

c00064e4 <f_unlink>:
c00064e4:	56                   	push   esi
c00064e5:	b9 02 00 00 00       	mov    ecx,0x2
c00064ea:	53                   	push   ebx
c00064eb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064f1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fc:	e8 fa c1 ff ff       	call   c00026fb <mount_volume>
c0006501:	85 c0                	test   eax,eax
c0006503:	0f 85 55 01 00 00    	jne    c000665e <f_unlink+0x17a>
c0006509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650d:	83 ec 0c             	sub    esp,0xc
c0006510:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006514:	68 60 04 00 00       	push   0x460
c0006519:	e8 80 1f 00 00       	call   c000849e <ff_memalloc>
c000651e:	83 c4 10             	add    esp,0x10
c0006521:	89 c3                	mov    ebx,eax
c0006523:	b8 11 00 00 00       	mov    eax,0x11
c0006528:	85 db                	test   ebx,ebx
c000652a:	0f 84 2e 01 00 00    	je     c000665e <f_unlink+0x17a>
c0006530:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006534:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000653a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006540:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006547:	8d 44 24 48          	lea    eax,[esp+0x48]
c000654b:	e8 21 e9 ff ff       	call   c0004e71 <follow_path>
c0006550:	85 c0                	test   eax,eax
c0006552:	0f 85 f2 00 00 00    	jne    c000664a <f_unlink+0x166>
c0006558:	b8 06 00 00 00       	mov    eax,0x6
c000655d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006565:	0f 88 df 00 00 00    	js     c000664a <f_unlink+0x166>
c000656b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006570:	74 0a                	je     c000657c <f_unlink+0x98>
c0006572:	b8 07 00 00 00       	mov    eax,0x7
c0006577:	e9 ce 00 00 00       	jmp    c000664a <f_unlink+0x166>
c000657c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006580:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006584:	8a 02                	mov    al,BYTE PTR [edx]
c0006586:	3c 04                	cmp    al,0x4
c0006588:	75 12                	jne    c000659c <f_unlink+0xb8>
c000658a:	8d 42 10             	lea    eax,[edx+0x10]
c000658d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006591:	e8 a1 e8 ff ff       	call   c0004e37 <init_alloc_info.isra.2>
c0006596:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000659a:	eb 0e                	jmp    c00065aa <f_unlink+0xc6>
c000659c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a3:	e8 3e e8 ff ff       	call   c0004de6 <ld_clust.isra.0>
c00065a8:	89 c6                	mov    esi,eax
c00065aa:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065af:	75 12                	jne    c00065c3 <f_unlink+0xdf>
c00065b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b5:	e8 94 d6 ff ff       	call   c0003c4e <dir_remove>
c00065ba:	85 c0                	test   eax,eax
c00065bc:	74 6c                	je     c000662a <f_unlink+0x146>
c00065be:	e9 87 00 00 00       	jmp    c000664a <f_unlink+0x166>
c00065c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065ce:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d8:	75 21                	jne    c00065fb <f_unlink+0x117>
c00065da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065f0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065fb:	31 d2                	xor    edx,edx
c00065fd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006604:	e8 be cb ff ff       	call   c00031c7 <dir_sdi>
c0006609:	85 c0                	test   eax,eax
c000660b:	75 3d                	jne    c000664a <f_unlink+0x166>
c000660d:	31 d2                	xor    edx,edx
c000660f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006616:	e8 bc d3 ff ff       	call   c00039d7 <dir_read>
c000661b:	85 c0                	test   eax,eax
c000661d:	0f 84 4f ff ff ff    	je     c0006572 <f_unlink+0x8e>
c0006623:	83 f8 04             	cmp    eax,0x4
c0006626:	75 22                	jne    c000664a <f_unlink+0x166>
c0006628:	eb 87                	jmp    c00065b1 <f_unlink+0xcd>
c000662a:	85 f6                	test   esi,esi
c000662c:	75 0b                	jne    c0006639 <f_unlink+0x155>
c000662e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006632:	e8 3d df ff ff       	call   c0004574 <sync_fs>
c0006637:	eb 11                	jmp    c000664a <f_unlink+0x166>
c0006639:	31 c9                	xor    ecx,ecx
c000663b:	89 f2                	mov    edx,esi
c000663d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006641:	e8 78 ce ff ff       	call   c00034be <remove_chain>
c0006646:	85 c0                	test   eax,eax
c0006648:	74 e4                	je     c000662e <f_unlink+0x14a>
c000664a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664e:	83 ec 0c             	sub    esp,0xc
c0006651:	53                   	push   ebx
c0006652:	e8 5d 1e 00 00       	call   c00084b4 <ff_memfree>
c0006657:	83 c4 10             	add    esp,0x10
c000665a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006664:	5b                   	pop    ebx
c0006665:	5e                   	pop    esi
c0006666:	c3                   	ret    

c0006667 <f_mkdir>:
c0006667:	57                   	push   edi
c0006668:	b9 02 00 00 00       	mov    ecx,0x2
c000666d:	56                   	push   esi
c000666e:	53                   	push   ebx
c000666f:	83 c4 80             	add    esp,0xffffff80
c0006672:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006676:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667d:	e8 79 c0 ff ff       	call   c00026fb <mount_volume>
c0006682:	89 c3                	mov    ebx,eax
c0006684:	85 c0                	test   eax,eax
c0006686:	0f 85 fe 01 00 00    	jne    c000688a <f_mkdir+0x223>
c000668c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006690:	bb 11 00 00 00       	mov    ebx,0x11
c0006695:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006699:	83 ec 0c             	sub    esp,0xc
c000669c:	68 60 04 00 00       	push   0x460
c00066a1:	e8 f8 1d 00 00       	call   c000849e <ff_memalloc>
c00066a6:	83 c4 10             	add    esp,0x10
c00066a9:	89 c7                	mov    edi,eax
c00066ab:	85 c0                	test   eax,eax
c00066ad:	0f 84 d7 01 00 00    	je     c000688a <f_mkdir+0x223>
c00066b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ce:	e8 9e e7 ff ff       	call   c0004e71 <follow_path>
c00066d3:	89 c3                	mov    ebx,eax
c00066d5:	85 c0                	test   eax,eax
c00066d7:	74 3e                	je     c0006717 <f_mkdir+0xb0>
c00066d9:	83 f8 04             	cmp    eax,0x4
c00066dc:	75 3e                	jne    c000671c <f_mkdir+0xb5>
c00066de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e2:	31 d2                	xor    edx,edx
c00066e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ec:	e8 ce cb ff ff       	call   c00032bf <create_chain>
c00066f1:	89 c6                	mov    esi,eax
c00066f3:	85 c0                	test   eax,eax
c00066f5:	74 0c                	je     c0006703 <f_mkdir+0x9c>
c00066f7:	bb 02 00 00 00       	mov    ebx,0x2
c00066fc:	83 f8 01             	cmp    eax,0x1
c00066ff:	74 07                	je     c0006708 <f_mkdir+0xa1>
c0006701:	eb 2a                	jmp    c000672d <f_mkdir+0xc6>
c0006703:	bb 07 00 00 00       	mov    ebx,0x7
c0006708:	31 c9                	xor    ecx,ecx
c000670a:	89 f2                	mov    edx,esi
c000670c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006710:	e8 a9 cd ff ff       	call   c00034be <remove_chain>
c0006715:	eb 05                	jmp    c000671c <f_mkdir+0xb5>
c0006717:	bb 08 00 00 00       	mov    ebx,0x8
c000671c:	83 ec 0c             	sub    esp,0xc
c000671f:	57                   	push   edi
c0006720:	e8 8f 1d 00 00       	call   c00084b4 <ff_memfree>
c0006725:	83 c4 10             	add    esp,0x10
c0006728:	e9 5d 01 00 00       	jmp    c000688a <f_mkdir+0x223>
c000672d:	bb 01 00 00 00       	mov    ebx,0x1
c0006732:	83 f8 ff             	cmp    eax,0xffffffff
c0006735:	74 d1                	je     c0006708 <f_mkdir+0xa1>
c0006737:	89 f2                	mov    edx,esi
c0006739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673d:	e8 c4 ce ff ff       	call   c0003606 <dir_clear>
c0006742:	89 c3                	mov    ebx,eax
c0006744:	85 c0                	test   eax,eax
c0006746:	75 c0                	jne    c0006708 <f_mkdir+0xa1>
c0006748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674f:	74 69                	je     c00067ba <f_mkdir+0x153>
c0006751:	b9 0b 00 00 00       	mov    ecx,0xb
c0006756:	83 c0 54             	add    eax,0x54
c0006759:	ba 20 00 00 00       	mov    edx,0x20
c000675e:	e8 9c b5 ff ff       	call   c0001cff <mem_set>
c0006763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006767:	ba 00 00 21 50       	mov    edx,0x50210000
c000676c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006770:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006774:	83 c0 6a             	add    eax,0x6a
c0006777:	e8 65 b5 ff ff       	call   c0001ce1 <st_dword>
c000677c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006780:	89 f1                	mov    ecx,esi
c0006782:	8d 50 54             	lea    edx,[eax+0x54]
c0006785:	e8 85 e6 ff ff       	call   c0004e0f <st_clust.isra.1>
c000678a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678e:	b9 20 00 00 00       	mov    ecx,0x20
c0006793:	8d 50 54             	lea    edx,[eax+0x54]
c0006796:	83 c0 74             	add    eax,0x74
c0006799:	e8 4c b5 ff ff       	call   c0001cea <mem_cpy>
c000679e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067aa:	8d 50 74             	lea    edx,[eax+0x74]
c00067ad:	e8 5d e6 ff ff       	call   c0004e0f <st_clust.isra.1>
c00067b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067be:	e8 2f db ff ff       	call   c00042f2 <dir_register>
c00067c3:	89 c3                	mov    ebx,eax
c00067c5:	85 c0                	test   eax,eax
c00067c7:	0f 85 3b ff ff ff    	jne    c0006708 <f_mkdir+0xa1>
c00067cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d4:	75 74                	jne    c000684a <f_mkdir+0x1e3>
c00067d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00067de:	83 c0 0c             	add    eax,0xc
c00067e1:	e8 fb b4 ff ff       	call   c0001ce1 <st_dword>
c00067e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ea:	89 f2                	mov    edx,esi
c00067ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ef:	83 c0 34             	add    eax,0x34
c00067f2:	e8 ea b4 ff ff       	call   c0001ce1 <st_dword>
c00067f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067fb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006802:	c1 e2 09             	shl    edx,0x9
c0006805:	83 c0 38             	add    eax,0x38
c0006808:	e8 d4 b4 ff ff       	call   c0001ce1 <st_dword>
c000680d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006811:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006818:	c1 e2 09             	shl    edx,0x9
c000681b:	83 c0 28             	add    eax,0x28
c000681e:	e8 be b4 ff ff       	call   c0001ce1 <st_dword>
c0006823:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006827:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000682a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006831:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006835:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006839:	e8 8b d3 ff ff       	call   c0003bc9 <store_xdir>
c000683e:	89 c3                	mov    ebx,eax
c0006840:	85 c0                	test   eax,eax
c0006842:	0f 85 d4 fe ff ff    	jne    c000671c <f_mkdir+0xb5>
c0006848:	eb 30                	jmp    c000687a <f_mkdir+0x213>
c000684a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006853:	83 c0 16             	add    eax,0x16
c0006856:	e8 86 b4 ff ff       	call   c0001ce1 <st_dword>
c000685b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685f:	89 f1                	mov    ecx,esi
c0006861:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006865:	e8 a5 e5 ff ff       	call   c0004e0f <st_clust.isra.1>
c000686a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006872:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006876:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000687a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687e:	e8 f1 dc ff ff       	call   c0004574 <sync_fs>
c0006883:	89 c3                	mov    ebx,eax
c0006885:	e9 92 fe ff ff       	jmp    c000671c <f_mkdir+0xb5>
c000688a:	83 ec 80             	sub    esp,0xffffff80
c000688d:	89 d8                	mov    eax,ebx
c000688f:	5b                   	pop    ebx
c0006890:	5e                   	pop    esi
c0006891:	5f                   	pop    edi
c0006892:	c3                   	ret    

c0006893 <f_rename>:
c0006893:	55                   	push   ebp
c0006894:	57                   	push   edi
c0006895:	56                   	push   esi
c0006896:	53                   	push   ebx
c0006897:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a4:	e8 a4 b9 ff ff       	call   c000224d <get_ldnumber>
c00068a9:	b9 02 00 00 00       	mov    ecx,0x2
c00068ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b9:	e8 3d be ff ff       	call   c00026fb <mount_volume>
c00068be:	85 c0                	test   eax,eax
c00068c0:	0f 85 b5 02 00 00    	jne    c0006b7b <f_rename+0x2e8>
c00068c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ca:	83 ec 0c             	sub    esp,0xc
c00068cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068d1:	68 60 04 00 00       	push   0x460
c00068d6:	e8 c3 1b 00 00       	call   c000849e <ff_memalloc>
c00068db:	83 c4 10             	add    esp,0x10
c00068de:	89 c3                	mov    ebx,eax
c00068e0:	b8 11 00 00 00       	mov    eax,0x11
c00068e5:	85 db                	test   ebx,ebx
c00068e7:	0f 84 8e 02 00 00    	je     c0006b7b <f_rename+0x2e8>
c00068ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006904:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006908:	e8 64 e5 ff ff       	call   c0004e71 <follow_path>
c000690d:	85 c0                	test   eax,eax
c000690f:	0f 85 52 02 00 00    	jne    c0006b67 <f_rename+0x2d4>
c0006915:	b8 06 00 00 00       	mov    eax,0x6
c000691a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006922:	0f 85 3f 02 00 00    	jne    c0006b67 <f_rename+0x2d4>
c0006928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692f:	0f 85 05 01 00 00    	jne    c0006a3a <f_rename+0x1a7>
c0006935:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006938:	b9 40 00 00 00       	mov    ecx,0x40
c000693d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006941:	e8 a4 b3 ff ff       	call   c0001cea <mem_cpy>
c0006946:	b9 4c 00 00 00       	mov    ecx,0x4c
c000694b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006956:	e8 8f b3 ff ff       	call   c0001cea <mem_cpy>
c000695b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006962:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006969:	e8 03 e5 ff ff       	call   c0004e71 <follow_path>
c000696e:	85 c0                	test   eax,eax
c0006970:	75 29                	jne    c000699b <f_rename+0x108>
c0006972:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006976:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697d:	74 0a                	je     c0006989 <f_rename+0xf6>
c000697f:	b8 08 00 00 00       	mov    eax,0x8
c0006984:	e9 de 01 00 00       	jmp    c0006b67 <f_rename+0x2d4>
c0006989:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006990:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006997:	75 e6                	jne    c000697f <f_rename+0xec>
c0006999:	eb 09                	jmp    c00069a4 <f_rename+0x111>
c000699b:	83 f8 04             	cmp    eax,0x4
c000699e:	0f 85 c3 01 00 00    	jne    c0006b67 <f_rename+0x2d4>
c00069a4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069ab:	e8 42 d9 ff ff       	call   c00042f2 <dir_register>
c00069b0:	85 c0                	test   eax,eax
c00069b2:	0f 85 af 01 00 00    	jne    c0006b67 <f_rename+0x2d4>
c00069b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069bc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bf:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c2:	89 c5                	mov    ebp,eax
c00069c4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069cb:	8d 46 24             	lea    eax,[esi+0x24]
c00069ce:	e8 98 b2 ff ff       	call   c0001c6b <ld_word>
c00069d3:	b9 40 00 00 00       	mov    ecx,0x40
c00069d8:	89 c7                	mov    edi,eax
c00069da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069de:	89 f0                	mov    eax,esi
c00069e0:	e8 05 b3 ff ff       	call   c0001cea <mem_cpy>
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	89 e9                	mov    ecx,ebp
c00069eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ee:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069f1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069ff:	0f b7 d7             	movzx  edx,di
c0006a02:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a05:	83 c0 24             	add    eax,0x24
c0006a08:	e8 d0 b2 ff ff       	call   c0001cdd <st_word>
c0006a0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a11:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a14:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a17:	a8 10                	test   al,0x10
c0006a19:	75 06                	jne    c0006a21 <f_rename+0x18e>
c0006a1b:	83 c8 20             	or     eax,0x20
c0006a1e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a21:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a28:	e8 9c d1 ff ff       	call   c0003bc9 <store_xdir>
c0006a2d:	85 c0                	test   eax,eax
c0006a2f:	0f 84 1c 01 00 00    	je     c0006b51 <f_rename+0x2be>
c0006a35:	e9 2d 01 00 00       	jmp    c0006b67 <f_rename+0x2d4>
c0006a3a:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a4a:	e8 9b b2 ff ff       	call   c0001cea <mem_cpy>
c0006a4f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a54:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a58:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5f:	e8 86 b2 ff ff       	call   c0001cea <mem_cpy>
c0006a64:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a6b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a72:	e8 fa e3 ff ff       	call   c0004e71 <follow_path>
c0006a77:	85 c0                	test   eax,eax
c0006a79:	75 27                	jne    c0006aa2 <f_rename+0x20f>
c0006a7b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a86:	0f 85 f3 fe ff ff    	jne    c000697f <f_rename+0xec>
c0006a8c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a93:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a9a:	0f 85 df fe ff ff    	jne    c000697f <f_rename+0xec>
c0006aa0:	eb 09                	jmp    c0006aab <f_rename+0x218>
c0006aa2:	83 f8 04             	cmp    eax,0x4
c0006aa5:	0f 85 bc 00 00 00    	jne    c0006b67 <f_rename+0x2d4>
c0006aab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab2:	e8 3b d8 ff ff       	call   c00042f2 <dir_register>
c0006ab7:	85 c0                	test   eax,eax
c0006ab9:	0f 85 a8 00 00 00    	jne    c0006b67 <f_rename+0x2d4>
c0006abf:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac6:	b9 13 00 00 00       	mov    ecx,0x13
c0006acb:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ace:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad2:	e8 13 b2 ff ff       	call   c0001cea <mem_cpy>
c0006ad7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006adb:	a8 10                	test   al,0x10
c0006add:	75 03                	jne    c0006ae2 <f_rename+0x24f>
c0006adf:	83 c8 20             	or     eax,0x20
c0006ae2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aed:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006af1:	74 5e                	je     c0006b51 <f_rename+0x2be>
c0006af3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006afa:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afe:	74 51                	je     c0006b51 <f_rename+0x2be>
c0006b00:	89 f2                	mov    edx,esi
c0006b02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b06:	8a 07                	mov    al,BYTE PTR [edi]
c0006b08:	e8 d9 e2 ff ff       	call   c0004de6 <ld_clust.isra.0>
c0006b0d:	89 c2                	mov    edx,eax
c0006b0f:	89 f8                	mov    eax,edi
c0006b11:	e8 ee b3 ff ff       	call   c0001f04 <clst2sect>
c0006b16:	89 c6                	mov    esi,eax
c0006b18:	89 d1                	mov    ecx,edx
c0006b1a:	b8 02 00 00 00       	mov    eax,0x2
c0006b1f:	09 f2                	or     edx,esi
c0006b21:	74 44                	je     c0006b67 <f_rename+0x2d4>
c0006b23:	89 f2                	mov    edx,esi
c0006b25:	89 f8                	mov    eax,edi
c0006b27:	e8 1d b9 ff ff       	call   c0002449 <move_window>
c0006b2c:	85 c0                	test   eax,eax
c0006b2e:	75 37                	jne    c0006b67 <f_rename+0x2d4>
c0006b30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b34:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b38:	75 17                	jne    c0006b51 <f_rename+0x2be>
c0006b3a:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b44:	e8 c6 e2 ff ff       	call   c0004e0f <st_clust.isra.1>
c0006b49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b51:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b55:	e8 f4 d0 ff ff       	call   c0003c4e <dir_remove>
c0006b5a:	85 c0                	test   eax,eax
c0006b5c:	75 09                	jne    c0006b67 <f_rename+0x2d4>
c0006b5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b62:	e8 0d da ff ff       	call   c0004574 <sync_fs>
c0006b67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b6b:	83 ec 0c             	sub    esp,0xc
c0006b6e:	53                   	push   ebx
c0006b6f:	e8 40 19 00 00       	call   c00084b4 <ff_memfree>
c0006b74:	83 c4 10             	add    esp,0x10
c0006b77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b7b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b81:	5b                   	pop    ebx
c0006b82:	5e                   	pop    esi
c0006b83:	5f                   	pop    edi
c0006b84:	5d                   	pop    ebp
c0006b85:	c3                   	ret    

c0006b86 <f_chmod>:
c0006b86:	57                   	push   edi
c0006b87:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8c:	56                   	push   esi
c0006b8d:	53                   	push   ebx
c0006b8e:	83 ec 60             	sub    esp,0x60
c0006b91:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b95:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b99:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006ba1:	e8 55 bb ff ff       	call   c00026fb <mount_volume>
c0006ba6:	85 c0                	test   eax,eax
c0006ba8:	0f 85 af 00 00 00    	jne    c0006c5d <f_chmod+0xd7>
c0006bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb2:	83 ec 0c             	sub    esp,0xc
c0006bb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb9:	68 60 04 00 00       	push   0x460
c0006bbe:	e8 db 18 00 00       	call   c000849e <ff_memalloc>
c0006bc3:	83 c4 10             	add    esp,0x10
c0006bc6:	89 c6                	mov    esi,eax
c0006bc8:	b8 11 00 00 00       	mov    eax,0x11
c0006bcd:	85 f6                	test   esi,esi
c0006bcf:	0f 84 88 00 00 00    	je     c0006c5d <f_chmod+0xd7>
c0006bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bed:	e8 7f e2 ff ff       	call   c0004e71 <follow_path>
c0006bf2:	85 c0                	test   eax,eax
c0006bf4:	75 53                	jne    c0006c49 <f_chmod+0xc3>
c0006bf6:	b8 06 00 00 00       	mov    eax,0x6
c0006bfb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c00:	75 47                	jne    c0006c49 <f_chmod+0xc3>
c0006c02:	89 f9                	mov    ecx,edi
c0006c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c08:	83 e1 27             	and    ecx,0x27
c0006c0b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0e:	75 1d                	jne    c0006c2d <f_chmod+0xa7>
c0006c10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c13:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c16:	21 cb                	and    ebx,ecx
c0006c18:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c1b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c22:	e8 a2 cf ff ff       	call   c0003bc9 <store_xdir>
c0006c27:	85 c0                	test   eax,eax
c0006c29:	75 1e                	jne    c0006c49 <f_chmod+0xc3>
c0006c2b:	eb 13                	jmp    c0006c40 <f_chmod+0xba>
c0006c2d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c31:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c34:	21 cb                	and    ebx,ecx
c0006c36:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c39:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c44:	e8 2b d9 ff ff       	call   c0004574 <sync_fs>
c0006c49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4d:	83 ec 0c             	sub    esp,0xc
c0006c50:	56                   	push   esi
c0006c51:	e8 5e 18 00 00       	call   c00084b4 <ff_memfree>
c0006c56:	83 c4 10             	add    esp,0x10
c0006c59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5d:	83 c4 60             	add    esp,0x60
c0006c60:	5b                   	pop    ebx
c0006c61:	5e                   	pop    esi
c0006c62:	5f                   	pop    edi
c0006c63:	c3                   	ret    

c0006c64 <f_utime>:
c0006c64:	56                   	push   esi
c0006c65:	b9 02 00 00 00       	mov    ecx,0x2
c0006c6a:	53                   	push   ebx
c0006c6b:	83 ec 64             	sub    esp,0x64
c0006c6e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c72:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c76:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c7a:	e8 7c ba ff ff       	call   c00026fb <mount_volume>
c0006c7f:	85 c0                	test   eax,eax
c0006c81:	0f 85 b5 00 00 00    	jne    c0006d3c <f_utime+0xd8>
c0006c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8b:	83 ec 0c             	sub    esp,0xc
c0006c8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c92:	68 60 04 00 00       	push   0x460
c0006c97:	e8 02 18 00 00       	call   c000849e <ff_memalloc>
c0006c9c:	83 c4 10             	add    esp,0x10
c0006c9f:	89 c3                	mov    ebx,eax
c0006ca1:	b8 11 00 00 00       	mov    eax,0x11
c0006ca6:	85 db                	test   ebx,ebx
c0006ca8:	0f 84 8e 00 00 00    	je     c0006d3c <f_utime+0xd8>
c0006cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cbb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc6:	e8 a6 e1 ff ff       	call   c0004e71 <follow_path>
c0006ccb:	85 c0                	test   eax,eax
c0006ccd:	75 59                	jne    c0006d28 <f_utime+0xc4>
c0006ccf:	b8 06 00 00 00       	mov    eax,0x6
c0006cd4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd9:	75 4d                	jne    c0006d28 <f_utime+0xc4>
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce7:	c1 e2 10             	shl    edx,0x10
c0006cea:	09 ca                	or     edx,ecx
c0006cec:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cef:	75 1a                	jne    c0006d0b <f_utime+0xa7>
c0006cf1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf4:	83 c0 0c             	add    eax,0xc
c0006cf7:	e8 e5 af ff ff       	call   c0001ce1 <st_dword>
c0006cfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d00:	e8 c4 ce ff ff       	call   c0003bc9 <store_xdir>
c0006d05:	85 c0                	test   eax,eax
c0006d07:	75 1f                	jne    c0006d28 <f_utime+0xc4>
c0006d09:	eb 14                	jmp    c0006d1f <f_utime+0xbb>
c0006d0b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0f:	83 c0 16             	add    eax,0x16
c0006d12:	e8 ca af ff ff       	call   c0001ce1 <st_dword>
c0006d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d23:	e8 4c d8 ff ff       	call   c0004574 <sync_fs>
c0006d28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2c:	83 ec 0c             	sub    esp,0xc
c0006d2f:	53                   	push   ebx
c0006d30:	e8 7f 17 00 00       	call   c00084b4 <ff_memfree>
c0006d35:	83 c4 10             	add    esp,0x10
c0006d38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3c:	83 c4 64             	add    esp,0x64
c0006d3f:	5b                   	pop    ebx
c0006d40:	5e                   	pop    esi
c0006d41:	c3                   	ret    

c0006d42 <f_getlabel>:
c0006d42:	55                   	push   ebp
c0006d43:	31 c9                	xor    ecx,ecx
c0006d45:	57                   	push   edi
c0006d46:	56                   	push   esi
c0006d47:	53                   	push   ebx
c0006d48:	83 ec 6c             	sub    esp,0x6c
c0006d4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d56:	e8 a0 b9 ff ff       	call   c00026fb <mount_volume>
c0006d5b:	89 c6                	mov    esi,eax
c0006d5d:	85 c0                	test   eax,eax
c0006d5f:	0f 85 c1 01 00 00    	jne    c0006f26 <f_getlabel+0x1e4>
c0006d65:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6d:	0f 84 5f 01 00 00    	je     c0006ed2 <f_getlabel+0x190>
c0006d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d77:	31 d2                	xor    edx,edx
c0006d79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d89:	e8 39 c4 ff ff       	call   c00031c7 <dir_sdi>
c0006d8e:	85 c0                	test   eax,eax
c0006d90:	0f 85 2d 01 00 00    	jne    c0006ec3 <f_getlabel+0x181>
c0006d96:	ba 01 00 00 00       	mov    edx,0x1
c0006d9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9f:	e8 33 cc ff ff       	call   c00039d7 <dir_read>
c0006da4:	85 c0                	test   eax,eax
c0006da6:	0f 85 17 01 00 00    	jne    c0006ec3 <f_getlabel+0x181>
c0006dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db3:	74 09                	je     c0006dbe <f_getlabel+0x7c>
c0006db5:	31 db                	xor    ebx,ebx
c0006db7:	31 c9                	xor    ecx,ecx
c0006db9:	e9 c8 00 00 00       	jmp    c0006e86 <f_getlabel+0x144>
c0006dbe:	31 ed                	xor    ebp,ebp
c0006dc0:	31 db                	xor    ebx,ebx
c0006dc2:	31 ff                	xor    edi,edi
c0006dc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dcc:	39 fa                	cmp    edx,edi
c0006dce:	76 4b                	jbe    c0006e1b <f_getlabel+0xd9>
c0006dd0:	47                   	inc    edi
c0006dd1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd4:	01 d0                	add    eax,edx
c0006dd6:	e8 90 ae ff ff       	call   c0001c6b <ld_word>
c0006ddb:	66 85 ed             	test   bp,bp
c0006dde:	75 0d                	jne    c0006ded <f_getlabel+0xab>
c0006de0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006deb:	76 28                	jbe    c0006e15 <f_getlabel+0xd3>
c0006ded:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df4:	89 e9                	mov    ecx,ebp
c0006df6:	01 da                	add    edx,ebx
c0006df8:	c1 e1 10             	shl    ecx,0x10
c0006dfb:	0f b7 c0             	movzx  eax,ax
c0006dfe:	09 c8                	or     eax,ecx
c0006e00:	b9 04 00 00 00       	mov    ecx,0x4
c0006e05:	e8 01 b0 ff ff       	call   c0001e0b <put_utf>
c0006e0a:	84 c0                	test   al,al
c0006e0c:	74 0b                	je     c0006e19 <f_getlabel+0xd7>
c0006e0e:	0f b6 c0             	movzx  eax,al
c0006e11:	01 c3                	add    ebx,eax
c0006e13:	31 c0                	xor    eax,eax
c0006e15:	89 c5                	mov    ebp,eax
c0006e17:	eb ab                	jmp    c0006dc4 <f_getlabel+0x82>
c0006e19:	31 db                	xor    ebx,ebx
c0006e1b:	66 85 ed             	test   bp,bp
c0006e1e:	74 02                	je     c0006e22 <f_getlabel+0xe0>
c0006e20:	31 db                	xor    ebx,ebx
c0006e22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e29:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2d:	e9 a0 00 00 00       	jmp    c0006ed2 <f_getlabel+0x190>
c0006e32:	83 ff 0b             	cmp    edi,0xb
c0006e35:	74 11                	je     c0006e48 <f_getlabel+0x106>
c0006e37:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e40:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e43:	c1 e0 08             	shl    eax,0x8
c0006e46:	09 c2                	or     edx,eax
c0006e48:	0f b7 d2             	movzx  edx,dx
c0006e4b:	50                   	push   eax
c0006e4c:	50                   	push   eax
c0006e4d:	68 b5 01 00 00       	push   0x1b5
c0006e52:	52                   	push   edx
c0006e53:	e8 03 17 00 00       	call   c000855b <ff_oem2uni>
c0006e58:	83 c4 10             	add    esp,0x10
c0006e5b:	66 85 c0             	test   ax,ax
c0006e5e:	74 46                	je     c0006ea6 <f_getlabel+0x164>
c0006e60:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e67:	0f b7 c0             	movzx  eax,ax
c0006e6a:	01 da                	add    edx,ebx
c0006e6c:	b9 04 00 00 00       	mov    ecx,0x4
c0006e71:	e8 95 af ff ff       	call   c0001e0b <put_utf>
c0006e76:	84 c0                	test   al,al
c0006e78:	74 2c                	je     c0006ea6 <f_getlabel+0x164>
c0006e7a:	0f b6 c0             	movzx  eax,al
c0006e7d:	01 c3                	add    ebx,eax
c0006e7f:	83 ff 0b             	cmp    edi,0xb
c0006e82:	74 24                	je     c0006ea8 <f_getlabel+0x166>
c0006e84:	89 f9                	mov    ecx,edi
c0006e86:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e8a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e92:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e9b:	e8 9f ae ff ff       	call   c0001d3f <dbc_1st>
c0006ea0:	85 c0                	test   eax,eax
c0006ea2:	74 a4                	je     c0006e48 <f_getlabel+0x106>
c0006ea4:	eb 8c                	jmp    c0006e32 <f_getlabel+0xf0>
c0006ea6:	31 db                	xor    ebx,ebx
c0006ea8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006eaf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb9:	74 17                	je     c0006ed2 <f_getlabel+0x190>
c0006ebb:	4b                   	dec    ebx
c0006ebc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebf:	74 ee                	je     c0006eaf <f_getlabel+0x16d>
c0006ec1:	eb 0f                	jmp    c0006ed2 <f_getlabel+0x190>
c0006ec3:	83 f8 04             	cmp    eax,0x4
c0006ec6:	75 5c                	jne    c0006f24 <f_getlabel+0x1e2>
c0006ec8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eda:	74 4a                	je     c0006f26 <f_getlabel+0x1e4>
c0006edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ee0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee6:	e8 5e b5 ff ff       	call   c0002449 <move_window>
c0006eeb:	89 c6                	mov    esi,eax
c0006eed:	85 c0                	test   eax,eax
c0006eef:	75 35                	jne    c0006f26 <f_getlabel+0x1e4>
c0006ef1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef5:	b8 43 00 00 00       	mov    eax,0x43
c0006efa:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efc:	80 f9 03             	cmp    cl,0x3
c0006eff:	74 0f                	je     c0006f10 <f_getlabel+0x1ce>
c0006f01:	31 c0                	xor    eax,eax
c0006f03:	80 f9 04             	cmp    cl,0x4
c0006f06:	0f 94 c0             	sete   al
c0006f09:	48                   	dec    eax
c0006f0a:	83 e0 c3             	and    eax,0xffffffc3
c0006f0d:	83 c0 64             	add    eax,0x64
c0006f10:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f14:	e8 5f ad ff ff       	call   c0001c78 <ld_dword>
c0006f19:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f20:	89 07                	mov    DWORD PTR [edi],eax
c0006f22:	eb 02                	jmp    c0006f26 <f_getlabel+0x1e4>
c0006f24:	89 c6                	mov    esi,eax
c0006f26:	83 c4 6c             	add    esp,0x6c
c0006f29:	89 f0                	mov    eax,esi
c0006f2b:	5b                   	pop    ebx
c0006f2c:	5e                   	pop    esi
c0006f2d:	5f                   	pop    edi
c0006f2e:	5d                   	pop    ebp
c0006f2f:	c3                   	ret    

c0006f30 <f_setlabel>:
c0006f30:	56                   	push   esi
c0006f31:	b9 02 00 00 00       	mov    ecx,0x2
c0006f36:	53                   	push   ebx
c0006f37:	83 ec 74             	sub    esp,0x74
c0006f3a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f45:	e8 b1 b7 ff ff       	call   c00026fb <mount_volume>
c0006f4a:	89 c6                	mov    esi,eax
c0006f4c:	85 c0                	test   eax,eax
c0006f4e:	0f 85 41 02 00 00    	jne    c0007195 <f_setlabel+0x265>
c0006f54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f58:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f5b:	0f 85 8e 00 00 00    	jne    c0006fef <f_setlabel+0xbf>
c0006f61:	b9 16 00 00 00       	mov    ecx,0x16
c0006f66:	31 d2                	xor    edx,edx
c0006f68:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6c:	31 db                	xor    ebx,ebx
c0006f6e:	e8 8c ad ff ff       	call   c0001cff <mem_set>
c0006f73:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7d:	0f 86 0a 01 00 00    	jbe    c000708d <f_setlabel+0x15d>
c0006f83:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f8a:	e8 b6 ad ff ff       	call   c0001d45 <tchar2uni>
c0006f8f:	89 c6                	mov    esi,eax
c0006f91:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f96:	76 2a                	jbe    c0006fc2 <f_setlabel+0x92>
c0006f98:	83 f8 ff             	cmp    eax,0xffffffff
c0006f9b:	74 05                	je     c0006fa2 <f_setlabel+0x72>
c0006f9d:	83 fb 09             	cmp    ebx,0x9
c0006fa0:	76 0a                	jbe    c0006fac <f_setlabel+0x7c>
c0006fa2:	be 06 00 00 00       	mov    esi,0x6
c0006fa7:	e9 e9 01 00 00       	jmp    c0007195 <f_setlabel+0x265>
c0006fac:	89 c2                	mov    edx,eax
c0006fae:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb5:	c1 ea 10             	shr    edx,0x10
c0006fb8:	01 c8                	add    eax,ecx
c0006fba:	43                   	inc    ebx
c0006fbb:	e8 1d ad ff ff       	call   c0001cdd <st_word>
c0006fc0:	eb 04                	jmp    c0006fc6 <f_setlabel+0x96>
c0006fc2:	85 c0                	test   eax,eax
c0006fc4:	74 dc                	je     c0006fa2 <f_setlabel+0x72>
c0006fc6:	89 f2                	mov    edx,esi
c0006fc8:	b8 17 9d 02 c0       	mov    eax,0xc0029d17
c0006fcd:	e8 5b ad ff ff       	call   c0001d2d <chk_chr>
c0006fd2:	85 c0                	test   eax,eax
c0006fd4:	75 cc                	jne    c0006fa2 <f_setlabel+0x72>
c0006fd6:	83 fb 0a             	cmp    ebx,0xa
c0006fd9:	77 c7                	ja     c0006fa2 <f_setlabel+0x72>
c0006fdb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fde:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe2:	0f b7 d6             	movzx  edx,si
c0006fe5:	01 c8                	add    eax,ecx
c0006fe7:	43                   	inc    ebx
c0006fe8:	e8 f0 ac ff ff       	call   c0001cdd <st_word>
c0006fed:	eb 84                	jmp    c0006f73 <f_setlabel+0x43>
c0006fef:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff4:	ba 20 00 00 00       	mov    edx,0x20
c0006ff9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffd:	31 db                	xor    ebx,ebx
c0006fff:	e8 fb ac ff ff       	call   c0001cff <mem_set>
c0007004:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000700b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700e:	76 60                	jbe    c0007070 <f_setlabel+0x140>
c0007010:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007017:	e8 29 ad ff ff       	call   c0001d45 <tchar2uni>
c000701c:	3d ff ff 00 00       	cmp    eax,0xffff
c0007021:	0f 87 7b ff ff ff    	ja     c0006fa2 <f_setlabel+0x72>
c0007027:	83 ec 0c             	sub    esp,0xc
c000702a:	50                   	push   eax
c000702b:	e8 97 15 00 00       	call   c00085c7 <ff_wtoupper>
c0007030:	5a                   	pop    edx
c0007031:	59                   	pop    ecx
c0007032:	68 b5 01 00 00       	push   0x1b5
c0007037:	50                   	push   eax
c0007038:	e8 8e 14 00 00       	call   c00084cb <ff_uni2oem>
c000703d:	83 c4 10             	add    esp,0x10
c0007040:	89 c6                	mov    esi,eax
c0007042:	66 85 c0             	test   ax,ax
c0007045:	0f 84 57 ff ff ff    	je     c0006fa2 <f_setlabel+0x72>
c000704b:	0f b7 d0             	movzx  edx,ax
c000704e:	b8 10 9d 02 c0       	mov    eax,0xc0029d10
c0007053:	e8 d5 ac ff ff       	call   c0001d2d <chk_chr>
c0007058:	85 c0                	test   eax,eax
c000705a:	0f 85 42 ff ff ff    	jne    c0006fa2 <f_setlabel+0x72>
c0007060:	66 81 fe ff 00       	cmp    si,0xff
c0007065:	0f 87 14 01 00 00    	ja     c000717f <f_setlabel+0x24f>
c000706b:	e9 fa 00 00 00       	jmp    c000716a <f_setlabel+0x23a>
c0007070:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007075:	0f 84 27 ff ff ff    	je     c0006fa2 <f_setlabel+0x72>
c000707b:	85 db                	test   ebx,ebx
c000707d:	74 0e                	je     c000708d <f_setlabel+0x15d>
c000707f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007082:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007087:	75 04                	jne    c000708d <f_setlabel+0x15d>
c0007089:	89 c3                	mov    ebx,eax
c000708b:	eb ee                	jmp    c000707b <f_setlabel+0x14b>
c000708d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007091:	31 d2                	xor    edx,edx
c0007093:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007097:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709f:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a3:	e8 1f c1 ff ff       	call   c00031c7 <dir_sdi>
c00070a8:	89 c6                	mov    esi,eax
c00070aa:	85 c0                	test   eax,eax
c00070ac:	0f 85 e3 00 00 00    	jne    c0007195 <f_setlabel+0x265>
c00070b2:	ba 01 00 00 00       	mov    edx,0x1
c00070b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070bb:	e8 17 c9 ff ff       	call   c00039d7 <dir_read>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	75 21                	jne    c00070e5 <f_setlabel+0x1b5>
c00070c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cf:	74 5d                	je     c000712e <f_setlabel+0x1fe>
c00070d1:	85 db                	test   ebx,ebx
c00070d3:	74 0b                	je     c00070e0 <f_setlabel+0x1b0>
c00070d5:	b9 0b 00 00 00       	mov    ecx,0xb
c00070da:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070de:	eb 70                	jmp    c0007150 <f_setlabel+0x220>
c00070e0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e3:	eb 70                	jmp    c0007155 <f_setlabel+0x225>
c00070e5:	83 f8 04             	cmp    eax,0x4
c00070e8:	75 7c                	jne    c0007166 <f_setlabel+0x236>
c00070ea:	85 db                	test   ebx,ebx
c00070ec:	0f 84 a3 00 00 00    	je     c0007195 <f_setlabel+0x265>
c00070f2:	ba 01 00 00 00       	mov    edx,0x1
c00070f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070fb:	e8 51 ca ff ff       	call   c0003b51 <dir_alloc>
c0007100:	89 c6                	mov    esi,eax
c0007102:	85 c0                	test   eax,eax
c0007104:	0f 85 8b 00 00 00    	jne    c0007195 <f_setlabel+0x265>
c000710a:	31 d2                	xor    edx,edx
c000710c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007110:	b9 20 00 00 00       	mov    ecx,0x20
c0007115:	e8 e5 ab ff ff       	call   c0001cff <mem_set>
c000711a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007121:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007125:	75 18                	jne    c000713f <f_setlabel+0x20f>
c0007127:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000712a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007131:	b9 16 00 00 00       	mov    ecx,0x16
c0007136:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000713a:	83 c0 02             	add    eax,0x2
c000713d:	eb 9b                	jmp    c00070da <f_setlabel+0x1aa>
c000713f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007143:	b9 0b 00 00 00       	mov    ecx,0xb
c0007148:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007150:	e8 95 ab ff ff       	call   c0001cea <mem_cpy>
c0007155:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007159:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007161:	e8 0e d4 ff ff       	call   c0004574 <sync_fs>
c0007166:	89 c6                	mov    esi,eax
c0007168:	eb 2b                	jmp    c0007195 <f_setlabel+0x265>
c000716a:	83 fb 0a             	cmp    ebx,0xa
c000716d:	0f 87 2f fe ff ff    	ja     c0006fa2 <f_setlabel+0x72>
c0007173:	89 f0                	mov    eax,esi
c0007175:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007179:	43                   	inc    ebx
c000717a:	e9 85 fe ff ff       	jmp    c0007004 <f_setlabel+0xd4>
c000717f:	83 fb 09             	cmp    ebx,0x9
c0007182:	0f 87 1a fe ff ff    	ja     c0006fa2 <f_setlabel+0x72>
c0007188:	89 f0                	mov    eax,esi
c000718a:	66 c1 e8 08          	shr    ax,0x8
c000718e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007192:	43                   	inc    ebx
c0007193:	eb de                	jmp    c0007173 <f_setlabel+0x243>
c0007195:	89 f0                	mov    eax,esi
c0007197:	83 c4 74             	add    esp,0x74
c000719a:	5b                   	pop    ebx
c000719b:	5e                   	pop    esi
c000719c:	c3                   	ret    

c000719d <f_forward>:
c000719d:	55                   	push   ebp
c000719e:	57                   	push   edi
c000719f:	56                   	push   esi
c00071a0:	53                   	push   ebx
c00071a1:	83 ec 2c             	sub    esp,0x2c
c00071a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b6:	89 d8                	mov    eax,ebx
c00071b8:	e8 b1 b1 ff ff       	call   c000236e <validate>
c00071bd:	89 c5                	mov    ebp,eax
c00071bf:	85 c0                	test   eax,eax
c00071c1:	0f 85 aa 01 00 00    	jne    c0007371 <f_forward+0x1d4>
c00071c7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071cb:	85 ed                	test   ebp,ebp
c00071cd:	0f 85 9e 01 00 00    	jne    c0007371 <f_forward+0x1d4>
c00071d3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d7:	0f 84 8f 01 00 00    	je     c000736c <f_forward+0x1cf>
c00071dd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071e0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e6:	bf 00 00 00 00       	mov    edi,0x0
c00071eb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ee:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f2:	89 d1                	mov    ecx,edx
c00071f4:	19 f9                	sbb    ecx,edi
c00071f6:	0f 83 cf 00 00 00    	jae    c00072cb <f_forward+0x12e>
c00071fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007200:	e9 c6 00 00 00       	jmp    c00072cb <f_forward+0x12e>
c0007205:	50                   	push   eax
c0007206:	50                   	push   eax
c0007207:	6a 00                	push   0x0
c0007209:	6a 00                	push   0x0
c000720b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720f:	83 c4 10             	add    esp,0x10
c0007212:	85 c0                	test   eax,eax
c0007214:	0f 84 57 01 00 00    	je     c0007371 <f_forward+0x1d4>
c000721a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007221:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007224:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007228:	89 d7                	mov    edi,edx
c000722a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722d:	89 c6                	mov    esi,eax
c000722f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007233:	21 ce                	and    esi,ecx
c0007235:	89 c1                	mov    ecx,eax
c0007237:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723d:	0f 84 98 00 00 00    	je     c00072db <f_forward+0x13e>
c0007243:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007247:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000724a:	89 c8                	mov    eax,ecx
c000724c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007250:	e8 af ac ff ff       	call   c0001f04 <clst2sect>
c0007255:	89 d7                	mov    edi,edx
c0007257:	09 c7                	or     edi,eax
c0007259:	0f 84 9e 00 00 00    	je     c00072fd <f_forward+0x160>
c000725f:	31 ff                	xor    edi,edi
c0007261:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007264:	01 c6                	add    esi,eax
c0007266:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000726a:	11 d7                	adc    edi,edx
c000726c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007276:	39 fa                	cmp    edx,edi
c0007278:	0f 85 a2 00 00 00    	jne    c0007320 <f_forward+0x183>
c000727e:	39 f0                	cmp    eax,esi
c0007280:	0f 85 9a 00 00 00    	jne    c0007320 <f_forward+0x183>
c0007286:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007289:	ba 00 02 00 00       	mov    edx,0x200
c000728e:	25 ff 01 00 00       	and    eax,0x1ff
c0007293:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007297:	29 c2                	sub    edx,eax
c0007299:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729f:	39 d1                	cmp    ecx,edx
c00072a1:	76 02                	jbe    c00072a5 <f_forward+0x108>
c00072a3:	89 d1                	mov    ecx,edx
c00072a5:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a8:	52                   	push   edx
c00072a9:	01 c6                	add    esi,eax
c00072ab:	52                   	push   edx
c00072ac:	51                   	push   ecx
c00072ad:	56                   	push   esi
c00072ae:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b2:	83 c4 10             	add    esp,0x10
c00072b5:	85 c0                	test   eax,eax
c00072b7:	74 44                	je     c00072fd <f_forward+0x160>
c00072b9:	31 ff                	xor    edi,edi
c00072bb:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072c1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c5:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c9:	01 07                	add    DWORD PTR [edi],eax
c00072cb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072d0:	0f 85 2f ff ff ff    	jne    c0007205 <f_forward+0x68>
c00072d6:	e9 96 00 00 00       	jmp    c0007371 <f_forward+0x1d4>
c00072db:	85 f6                	test   esi,esi
c00072dd:	0f 85 60 ff ff ff    	jne    c0007243 <f_forward+0xa6>
c00072e3:	89 d7                	mov    edi,edx
c00072e5:	09 c7                	or     edi,eax
c00072e7:	75 05                	jne    c00072ee <f_forward+0x151>
c00072e9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ec:	eb 0a                	jmp    c00072f8 <f_forward+0x15b>
c00072ee:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072f1:	89 d8                	mov    eax,ebx
c00072f3:	e8 d9 bc ff ff       	call   c0002fd1 <get_fat>
c00072f8:	83 f8 01             	cmp    eax,0x1
c00072fb:	77 0b                	ja     c0007308 <f_forward+0x16b>
c00072fd:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007301:	bd 02 00 00 00       	mov    ebp,0x2
c0007306:	eb 69                	jmp    c0007371 <f_forward+0x1d4>
c0007308:	83 f8 ff             	cmp    eax,0xffffffff
c000730b:	75 0b                	jne    c0007318 <f_forward+0x17b>
c000730d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007311:	bd 01 00 00 00       	mov    ebp,0x1
c0007316:	eb 59                	jmp    c0007371 <f_forward+0x1d4>
c0007318:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000731b:	e9 23 ff ff ff       	jmp    c0007243 <f_forward+0xa6>
c0007320:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007324:	79 20                	jns    c0007346 <f_forward+0x1a9>
c0007326:	83 ec 0c             	sub    esp,0xc
c0007329:	6a 01                	push   0x1
c000732b:	52                   	push   edx
c000732c:	50                   	push   eax
c000732d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007331:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007335:	50                   	push   eax
c0007336:	e8 fb a8 ff ff       	call   c0001c36 <disk_write>
c000733b:	83 c4 20             	add    esp,0x20
c000733e:	85 c0                	test   eax,eax
c0007340:	75 cb                	jne    c000730d <f_forward+0x170>
c0007342:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007346:	83 ec 0c             	sub    esp,0xc
c0007349:	6a 01                	push   0x1
c000734b:	57                   	push   edi
c000734c:	56                   	push   esi
c000734d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007351:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007355:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007359:	50                   	push   eax
c000735a:	e8 c1 a8 ff ff       	call   c0001c20 <disk_read>
c000735f:	83 c4 20             	add    esp,0x20
c0007362:	85 c0                	test   eax,eax
c0007364:	0f 84 1c ff ff ff    	je     c0007286 <f_forward+0xe9>
c000736a:	eb a1                	jmp    c000730d <f_forward+0x170>
c000736c:	bd 07 00 00 00       	mov    ebp,0x7
c0007371:	83 c4 2c             	add    esp,0x2c
c0007374:	89 e8                	mov    eax,ebp
c0007376:	5b                   	pop    ebx
c0007377:	5e                   	pop    esi
c0007378:	5f                   	pop    edi
c0007379:	5d                   	pop    ebp
c000737a:	c3                   	ret    

c000737b <f_mkfs>:
c000737b:	55                   	push   ebp
c000737c:	57                   	push   edi
c000737d:	56                   	push   esi
c000737e:	53                   	push   ebx
c000737f:	bb 0b 00 00 00       	mov    ebx,0xb
c0007384:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000738a:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007391:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007398:	e8 b0 ae ff ff       	call   c000224d <get_ldnumber>
c000739d:	85 c0                	test   eax,eax
c000739f:	0f 88 ec 10 00 00    	js     c0008491 <f_mkfs+0x1116>
c00073a5:	8b 14 85 60 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd11a0]
c00073ac:	85 d2                	test   edx,edx
c00073ae:	74 03                	je     c00073b3 <f_mkfs+0x38>
c00073b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b3:	85 f6                	test   esi,esi
c00073b5:	75 05                	jne    c00073bc <f_mkfs+0x41>
c00073b7:	be 00 9d 02 c0       	mov    esi,0xc0029d00
c00073bc:	83 ec 0c             	sub    esp,0xc
c00073bf:	0f b6 c0             	movzx  eax,al
c00073c2:	bb 03 00 00 00       	mov    ebx,0x3
c00073c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cf:	e8 49 a8 ff ff       	call   c0001c1d <disk_initialize>
c00073d4:	83 c4 10             	add    esp,0x10
c00073d7:	a8 01                	test   al,0x1
c00073d9:	0f 85 b2 10 00 00    	jne    c0008491 <f_mkfs+0x1116>
c00073df:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e4:	a8 04                	test   al,0x4
c00073e6:	0f 85 a5 10 00 00    	jne    c0008491 <f_mkfs+0x1116>
c00073ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ef:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f3:	85 c0                	test   eax,eax
c00073f5:	75 20                	jne    c0007417 <f_mkfs+0x9c>
c00073f7:	51                   	push   ecx
c00073f8:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fc:	50                   	push   eax
c00073fd:	6a 03                	push   0x3
c00073ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007403:	e8 44 a8 ff ff       	call   c0001c4c <disk_ioctl>
c0007408:	83 c4 10             	add    esp,0x10
c000740b:	85 c0                	test   eax,eax
c000740d:	74 08                	je     c0007417 <f_mkfs+0x9c>
c000740f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007417:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000741b:	8d 42 ff             	lea    eax,[edx-0x1]
c000741e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007423:	77 04                	ja     c0007429 <f_mkfs+0xae>
c0007425:	85 c2                	test   edx,eax
c0007427:	74 08                	je     c0007431 <f_mkfs+0xb6>
c0007429:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007431:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007434:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007438:	48                   	dec    eax
c0007439:	3c 01                	cmp    al,0x1
c000743b:	76 05                	jbe    c0007442 <f_mkfs+0xc7>
c000743d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007442:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007445:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007449:	48                   	dec    eax
c000744a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744f:	77 07                	ja     c0007458 <f_mkfs+0xdd>
c0007451:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007456:	74 08                	je     c0007460 <f_mkfs+0xe5>
c0007458:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007460:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007463:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007469:	77 07                	ja     c0007472 <f_mkfs+0xf7>
c000746b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746e:	85 d8                	test   eax,ebx
c0007470:	74 02                	je     c0007474 <f_mkfs+0xf9>
c0007472:	31 db                	xor    ebx,ebx
c0007474:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747f:	77 0a                	ja     c000748b <f_mkfs+0x110>
c0007481:	bb 11 00 00 00       	mov    ebx,0x11
c0007486:	e9 06 10 00 00       	jmp    c0008491 <f_mkfs+0x1116>
c000748b:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007492:	8b 36                	mov    esi,DWORD PTR [esi]
c0007494:	85 ed                	test   ebp,ebp
c0007496:	75 1e                	jne    c00074b6 <f_mkfs+0x13b>
c0007498:	83 ec 0c             	sub    esp,0xc
c000749b:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a7:	50                   	push   eax
c00074a8:	e8 f1 0f 00 00       	call   c000849e <ff_memalloc>
c00074ad:	83 c4 10             	add    esp,0x10
c00074b0:	89 c5                	mov    ebp,eax
c00074b2:	85 c0                	test   eax,eax
c00074b4:	74 cb                	je     c0007481 <f_mkfs+0x106>
c00074b6:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074be:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c6:	52                   	push   edx
c00074c7:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074cb:	50                   	push   eax
c00074cc:	6a 01                	push   0x1
c00074ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d2:	e8 75 a7 ff ff       	call   c0001c4c <disk_ioctl>
c00074d7:	83 c4 10             	add    esp,0x10
c00074da:	85 c0                	test   eax,eax
c00074dc:	0f 85 4a 0f 00 00    	jne    c000842c <f_mkfs+0x10b1>
c00074e2:	89 f1                	mov    ecx,esi
c00074e4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ec:	83 e1 0f             	and    ecx,0xf
c00074ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f7:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074fb:	83 e6 08             	and    esi,0x8
c00074fe:	75 56                	jne    c0007556 <f_mkfs+0x1db>
c0007500:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007504:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007508:	83 ff 00             	cmp    edi,0x0
c000750b:	76 20                	jbe    c000752d <f_mkfs+0x1b2>
c000750d:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007512:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000751a:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007520:	83 d7 ff             	adc    edi,0xffffffff
c0007523:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007527:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000752b:	eb 21                	jmp    c000754e <f_mkfs+0x1d3>
c000752d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007532:	39 f2                	cmp    edx,esi
c0007534:	19 f8                	sbb    eax,edi
c0007536:	73 1e                	jae    c0007556 <f_mkfs+0x1db>
c0007538:	83 c6 c1             	add    esi,0xffffffc1
c000753b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007543:	83 d7 ff             	adc    edi,0xffffffff
c0007546:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000754a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007556:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000755a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007561:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007565:	31 c0                	xor    eax,eax
c0007567:	ba 7f 00 00 00       	mov    edx,0x7f
c000756c:	89 c7                	mov    edi,eax
c000756e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007571:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007575:	0f 83 c5 0a 00 00    	jae    c0008040 <f_mkfs+0xcc5>
c000757b:	89 df                	mov    edi,ebx
c000757d:	c1 ef 09             	shr    edi,0x9
c0007580:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007584:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000758b:	c1 ef 09             	shr    edi,0x9
c000758e:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007593:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007597:	74 29                	je     c00075c2 <f_mkfs+0x247>
c0007599:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759f:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a4:	0f 97 c2             	seta   dl
c00075a7:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075aa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ae:	0f 92 c0             	setb   al
c00075b1:	08 c2                	or     dl,al
c00075b3:	75 5b                	jne    c0007610 <f_mkfs+0x295>
c00075b5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b9:	83 e0 07             	and    eax,0x7
c00075bc:	3c 04                	cmp    al,0x4
c00075be:	74 50                	je     c0007610 <f_mkfs+0x295>
c00075c0:	eb 1b                	jmp    c00075dd <f_mkfs+0x262>
c00075c2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c7:	0f 87 73 0a 00 00    	ja     c0008040 <f_mkfs+0xcc5>
c00075cd:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d3:	76 08                	jbe    c00075dd <f_mkfs+0x262>
c00075d5:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075dd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075e1:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e5:	83 e0 01             	and    eax,0x1
c00075e8:	80 e1 02             	and    cl,0x2
c00075eb:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ef:	74 0d                	je     c00075fe <f_mkfs+0x283>
c00075f1:	84 c0                	test   al,al
c00075f3:	0f 84 53 09 00 00    	je     c0007f4c <f_mkfs+0xbd1>
c00075f9:	e9 12 08 00 00       	jmp    c0007e10 <f_mkfs+0xa95>
c00075fe:	bb 13 00 00 00       	mov    ebx,0x13
c0007603:	84 c0                	test   al,al
c0007605:	0f 85 05 08 00 00    	jne    c0007e10 <f_mkfs+0xa95>
c000760b:	e9 39 0e 00 00       	jmp    c0008449 <f_mkfs+0x10ce>
c0007610:	31 c0                	xor    eax,eax
c0007612:	ba ff 0f 00 00       	mov    edx,0xfff
c0007617:	89 c7                	mov    edi,eax
c0007619:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007620:	0f 83 1a 0a 00 00    	jae    c0008040 <f_mkfs+0xcc5>
c0007626:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762c:	77 39                	ja     c0007667 <f_mkfs+0x2ec>
c000762e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007633:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000763b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007642:	73 08                	jae    c000764c <f_mkfs+0x2d1>
c0007644:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007651:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007654:	b8 00 00 00 00       	mov    eax,0x0
c0007659:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765d:	73 08                	jae    c0007667 <f_mkfs+0x2ec>
c000765f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000766b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766f:	83 c0 20             	add    eax,0x20
c0007672:	83 d2 00             	adc    edx,0x0
c0007675:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007679:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007681:	31 d2                	xor    edx,edx
c0007683:	31 ff                	xor    edi,edi
c0007685:	52                   	push   edx
c0007686:	89 fb                	mov    ebx,edi
c0007688:	50                   	push   eax
c0007689:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007691:	e8 9e fb 01 00       	call   c0027234 <__udivdi3>
c0007696:	83 c4 10             	add    esp,0x10
c0007699:	c1 e0 02             	shl    eax,0x2
c000769c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076a0:	05 07 02 00 00       	add    eax,0x207
c00076a5:	89 f1                	mov    ecx,esi
c00076a7:	c1 e8 09             	shr    eax,0x9
c00076aa:	83 c1 ff             	add    ecx,0xffffffff
c00076ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076b1:	83 d3 ff             	adc    ebx,0xffffffff
c00076b4:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b8:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	01 c8                	add    eax,ecx
c00076c0:	11 da                	adc    edx,ebx
c00076c2:	89 c1                	mov    ecx,eax
c00076c4:	f7 de                	neg    esi
c00076c6:	89 d0                	mov    eax,edx
c00076c8:	83 d7 00             	adc    edi,0x0
c00076cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cf:	f7 df                	neg    edi
c00076d1:	21 f1                	and    ecx,esi
c00076d3:	21 f8                	and    eax,edi
c00076d5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e5:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ec:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076f0:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f4:	89 df                	mov    edi,ebx
c00076f6:	d1 ea                	shr    edx,1
c00076f8:	39 c1                	cmp    ecx,eax
c00076fa:	19 d7                	sbb    edi,edx
c00076fc:	0f 83 3e 09 00 00    	jae    c0008040 <f_mkfs+0xcc5>
c0007702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007706:	31 d2                	xor    edx,edx
c0007708:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007710:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007714:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007717:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000771b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007723:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007727:	83 f8 0f             	cmp    eax,0xf
c000772a:	0f 86 10 09 00 00    	jbe    c0008040 <f_mkfs+0xcc5>
c0007730:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007738:	0f 87 02 09 00 00    	ja     c0008040 <f_mkfs+0xcc5>
c000773e:	31 d2                	xor    edx,edx
c0007740:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007744:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774c:	83 c0 07             	add    eax,0x7
c000774f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007757:	c1 e8 03             	shr    eax,0x3
c000775a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007761:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007765:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007769:	c1 e0 09             	shl    eax,0x9
c000776c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007770:	48                   	dec    eax
c0007771:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007775:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007779:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007781:	31 d2                	xor    edx,edx
c0007783:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007787:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007792:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007797:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000779b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a7:	31 ff                	xor    edi,edi
c00077a9:	31 f6                	xor    esi,esi
c00077ab:	31 db                	xor    ebx,ebx
c00077ad:	85 ff                	test   edi,edi
c00077af:	74 05                	je     c00077b6 <f_mkfs+0x43b>
c00077b1:	4f                   	dec    edi
c00077b2:	74 44                	je     c00077f8 <f_mkfs+0x47d>
c00077b4:	eb 4f                	jmp    c0007805 <f_mkfs+0x48a>
c00077b6:	83 ec 0c             	sub    esp,0xc
c00077b9:	0f b7 c3             	movzx  eax,bx
c00077bc:	50                   	push   eax
c00077bd:	e8 05 0e 00 00       	call   c00085c7 <ff_wtoupper>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	89 c1                	mov    ecx,eax
c00077c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00077ca:	66 39 c3             	cmp    bx,ax
c00077cd:	75 3e                	jne    c000780d <f_mkfs+0x492>
c00077cf:	be 01 00 00 00       	mov    esi,0x1
c00077d4:	89 df                	mov    edi,ebx
c00077d6:	66 01 f7             	add    di,si
c00077d9:	75 07                	jne    c00077e2 <f_mkfs+0x467>
c00077db:	83 fe 7f             	cmp    esi,0x7f
c00077de:	77 31                	ja     c0007811 <f_mkfs+0x496>
c00077e0:	eb 16                	jmp    c00077f8 <f_mkfs+0x47d>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	0f b7 ff             	movzx  edi,di
c00077e8:	57                   	push   edi
c00077e9:	e8 d9 0d 00 00       	call   c00085c7 <ff_wtoupper>
c00077ee:	83 c4 10             	add    esp,0x10
c00077f1:	39 c7                	cmp    edi,eax
c00077f3:	75 e6                	jne    c00077db <f_mkfs+0x460>
c00077f5:	46                   	inc    esi
c00077f6:	eb dc                	jmp    c00077d4 <f_mkfs+0x459>
c00077f8:	31 c0                	xor    eax,eax
c00077fa:	89 d9                	mov    ecx,ebx
c00077fc:	4e                   	dec    esi
c00077fd:	0f 95 c0             	setne  al
c0007800:	43                   	inc    ebx
c0007801:	89 c7                	mov    edi,eax
c0007803:	eb 14                	jmp    c0007819 <f_mkfs+0x49e>
c0007805:	89 f1                	mov    ecx,esi
c0007807:	01 f3                	add    ebx,esi
c0007809:	31 ff                	xor    edi,edi
c000780b:	eb 0c                	jmp    c0007819 <f_mkfs+0x49e>
c000780d:	89 d3                	mov    ebx,edx
c000780f:	eb 08                	jmp    c0007819 <f_mkfs+0x49e>
c0007811:	bf 02 00 00 00       	mov    edi,0x2
c0007816:	83 c9 ff             	or     ecx,0xffffffff
c0007819:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007820:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007824:	0f b6 c1             	movzx  eax,cl
c0007827:	e8 3a a9 ff ff       	call   c0002166 <xsum32>
c000782c:	66 c1 e9 08          	shr    cx,0x8
c0007830:	89 c2                	mov    edx,eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007839:	0f b7 c1             	movzx  eax,cx
c000783c:	e8 25 a9 ff ff       	call   c0002166 <xsum32>
c0007841:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007846:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000784a:	66 85 db             	test   bx,bx
c000784d:	74 1f                	je     c000786e <f_mkfs+0x4f3>
c000784f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007852:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007859:	83 c0 02             	add    eax,0x2
c000785c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007862:	39 c2                	cmp    edx,eax
c0007864:	74 08                	je     c000786e <f_mkfs+0x4f3>
c0007866:	89 04 24             	mov    DWORD PTR [esp],eax
c0007869:	e9 3f ff ff ff       	jmp    c00077ad <f_mkfs+0x432>
c000786e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007871:	83 ec 0c             	sub    esp,0xc
c0007874:	05 01 02 00 00       	add    eax,0x201
c0007879:	c1 e8 09             	shr    eax,0x9
c000787c:	50                   	push   eax
c000787d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007881:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007885:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007889:	55                   	push   ebp
c000788a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788e:	e8 a3 a3 ff ff       	call   c0001c36 <disk_write>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	85 c0                	test   eax,eax
c0007898:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000789b:	0f 85 8b 0b 00 00    	jne    c000842c <f_mkfs+0x10b1>
c00078a1:	89 d0                	mov    eax,edx
c00078a3:	31 d2                	xor    edx,edx
c00078a5:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a9:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ad:	66 85 db             	test   bx,bx
c00078b0:	74 04                	je     c00078b6 <f_mkfs+0x53b>
c00078b2:	31 c0                	xor    eax,eax
c00078b4:	eb b0                	jmp    c0007866 <f_mkfs+0x4eb>
c00078b6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078ba:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078be:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c2:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c8:	31 d2                	xor    edx,edx
c00078ca:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d9:	c1 eb 09             	shr    ebx,0x9
c00078dc:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e7:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f3:	8d 70 01             	lea    esi,[eax+0x1]
c00078f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fe:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007905:	31 d2                	xor    edx,edx
c0007907:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790c:	89 04 24             	mov    DWORD PTR [esp],eax
c000790f:	89 c1                	mov    ecx,eax
c0007911:	89 e8                	mov    eax,ebp
c0007913:	e8 e7 a3 ff ff       	call   c0001cff <mem_set>
c0007918:	31 c0                	xor    eax,eax
c000791a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791d:	76 10                	jbe    c000792f <f_mkfs+0x5b4>
c000791f:	83 fe 07             	cmp    esi,0x7
c0007922:	76 0b                	jbe    c000792f <f_mkfs+0x5b4>
c0007924:	40                   	inc    eax
c0007925:	83 ee 08             	sub    esi,0x8
c0007928:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792d:	eb eb                	jmp    c000791a <f_mkfs+0x59f>
c000792f:	b2 01                	mov    dl,0x1
c0007931:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007935:	85 f6                	test   esi,esi
c0007937:	74 0c                	je     c0007945 <f_mkfs+0x5ca>
c0007939:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793c:	76 07                	jbe    c0007945 <f_mkfs+0x5ca>
c000793e:	08 11                	or     BYTE PTR [ecx],dl
c0007940:	4e                   	dec    esi
c0007941:	d1 e2                	shl    edx,1
c0007943:	eb f0                	jmp    c0007935 <f_mkfs+0x5ba>
c0007945:	89 df                	mov    edi,ebx
c0007947:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000794b:	76 04                	jbe    c0007951 <f_mkfs+0x5d6>
c000794d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007951:	83 ec 0c             	sub    esp,0xc
c0007954:	57                   	push   edi
c0007955:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007959:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795d:	55                   	push   ebp
c000795e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007962:	e8 cf a2 ff ff       	call   c0001c36 <disk_write>
c0007967:	83 c4 20             	add    esp,0x20
c000796a:	85 c0                	test   eax,eax
c000796c:	0f 85 ba 0a 00 00    	jne    c000842c <f_mkfs+0x10b1>
c0007972:	31 d2                	xor    edx,edx
c0007974:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007978:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797c:	29 fb                	sub    ebx,edi
c000797e:	0f 85 7a ff ff ff    	jne    c00078fe <f_mkfs+0x583>
c0007984:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007988:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007990:	31 f6                	xor    esi,esi
c0007992:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007996:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007999:	31 d2                	xor    edx,edx
c000799b:	89 e8                	mov    eax,ebp
c000799d:	e8 5d a3 ff ff       	call   c0001cff <mem_set>
c00079a2:	31 c9                	xor    ecx,ecx
c00079a4:	85 db                	test   ebx,ebx
c00079a6:	75 40                	jne    c00079e8 <f_mkfs+0x66d>
c00079a8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ad:	89 e8                	mov    eax,ebp
c00079af:	bb 02 00 00 00       	mov    ebx,0x2
c00079b4:	e8 28 a3 ff ff       	call   c0001ce1 <st_dword>
c00079b9:	8d 45 04             	lea    eax,[ebp+0x4]
c00079bc:	83 ca ff             	or     edx,0xffffffff
c00079bf:	e8 1d a3 ff ff       	call   c0001ce1 <st_dword>
c00079c4:	b9 08 00 00 00       	mov    ecx,0x8
c00079c9:	eb 1d                	jmp    c00079e8 <f_mkfs+0x66d>
c00079cb:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ce:	76 3b                	jbe    c0007a0b <f_mkfs+0x690>
c00079d0:	43                   	inc    ebx
c00079d1:	83 fe 01             	cmp    esi,0x1
c00079d4:	89 da                	mov    edx,ebx
c00079d6:	77 03                	ja     c00079db <f_mkfs+0x660>
c00079d8:	83 ca ff             	or     edx,0xffffffff
c00079db:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079df:	4e                   	dec    esi
c00079e0:	e8 fc a2 ff ff       	call   c0001ce1 <st_dword>
c00079e5:	83 c1 04             	add    ecx,0x4
c00079e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ec:	85 f6                	test   esi,esi
c00079ee:	75 db                	jne    c00079cb <f_mkfs+0x650>
c00079f0:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f5:	77 14                	ja     c0007a0b <f_mkfs+0x690>
c00079f7:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079fb:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a02:	85 f6                	test   esi,esi
c0007a04:	74 05                	je     c0007a0b <f_mkfs+0x690>
c0007a06:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a09:	77 dd                	ja     c00079e8 <f_mkfs+0x66d>
c0007a0b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a13:	39 cf                	cmp    edi,ecx
c0007a15:	76 02                	jbe    c0007a19 <f_mkfs+0x69e>
c0007a17:	89 cf                	mov    edi,ecx
c0007a19:	83 ec 0c             	sub    esp,0xc
c0007a1c:	57                   	push   edi
c0007a1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a25:	55                   	push   ebp
c0007a26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2a:	e8 07 a2 ff ff       	call   c0001c36 <disk_write>
c0007a2f:	83 c4 20             	add    esp,0x20
c0007a32:	85 c0                	test   eax,eax
c0007a34:	0f 85 f2 09 00 00    	jne    c000842c <f_mkfs+0x10b1>
c0007a3a:	31 d2                	xor    edx,edx
c0007a3c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a40:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a44:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a48:	0f 85 48 ff ff ff    	jne    c0007996 <f_mkfs+0x61b>
c0007a4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a51:	31 d2                	xor    edx,edx
c0007a53:	89 e8                	mov    eax,ebp
c0007a55:	31 ff                	xor    edi,edi
c0007a57:	e8 a3 a2 ff ff       	call   c0001cff <mem_set>
c0007a5c:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5f:	ba 02 00 00 00       	mov    edx,0x2
c0007a64:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a68:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6c:	e8 70 a2 ff ff       	call   c0001ce1 <st_dword>
c0007a71:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a74:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a78:	e8 64 a2 ff ff       	call   c0001ce1 <st_dword>
c0007a7d:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a80:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a84:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a88:	e8 54 a2 ff ff       	call   c0001ce1 <st_dword>
c0007a8d:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a98:	83 c2 02             	add    edx,0x2
c0007a9b:	e8 41 a2 ff ff       	call   c0001ce1 <st_dword>
c0007aa0:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aab:	e8 31 a2 ff ff       	call   c0001ce1 <st_dword>
c0007ab0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab9:	89 c6                	mov    esi,eax
c0007abb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abf:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac3:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac6:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aca:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ad1:	39 cb                	cmp    ebx,ecx
c0007ad3:	76 02                	jbe    c0007ad7 <f_mkfs+0x75c>
c0007ad5:	89 cb                	mov    ebx,ecx
c0007ad7:	83 ec 0c             	sub    esp,0xc
c0007ada:	53                   	push   ebx
c0007adb:	57                   	push   edi
c0007adc:	56                   	push   esi
c0007add:	55                   	push   ebp
c0007ade:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae2:	e8 4f a1 ff ff       	call   c0001c36 <disk_write>
c0007ae7:	83 c4 20             	add    esp,0x20
c0007aea:	85 c0                	test   eax,eax
c0007aec:	0f 85 3a 09 00 00    	jne    c000842c <f_mkfs+0x10b1>
c0007af2:	31 d2                	xor    edx,edx
c0007af4:	b9 00 02 00 00       	mov    ecx,0x200
c0007af9:	89 e8                	mov    eax,ebp
c0007afb:	e8 ff a1 ff ff       	call   c0001cff <mem_set>
c0007b00:	31 d2                	xor    edx,edx
c0007b02:	01 de                	add    esi,ebx
c0007b04:	11 d7                	adc    edi,edx
c0007b06:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b09:	75 bf                	jne    c0007aca <f_mkfs+0x74f>
c0007b0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b13:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b1b:	b9 00 02 00 00       	mov    ecx,0x200
c0007b20:	31 d2                	xor    edx,edx
c0007b22:	89 e8                	mov    eax,ebp
c0007b24:	e8 d6 a1 ff ff       	call   c0001cff <mem_set>
c0007b29:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2e:	ba e0 9d 02 c0       	mov    edx,0xc0029de0
c0007b33:	89 e8                	mov    eax,ebp
c0007b35:	e8 b0 a1 ff ff       	call   c0001cea <mem_cpy>
c0007b3a:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b45:	e8 9a a1 ff ff       	call   c0001ce4 <st_qword>
c0007b4a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b51:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b55:	e8 8a a1 ff ff       	call   c0001ce4 <st_qword>
c0007b5a:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5d:	ba 20 00 00 00       	mov    edx,0x20
c0007b62:	e8 7a a1 ff ff       	call   c0001ce1 <st_dword>
c0007b67:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b6b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6f:	e8 6d a1 ff ff       	call   c0001ce1 <st_dword>
c0007b74:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b78:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7c:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b80:	e8 5c a1 ff ff       	call   c0001ce1 <st_dword>
c0007b85:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b88:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8c:	e8 50 a1 ff ff       	call   c0001ce1 <st_dword>
c0007b91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b95:	8d 50 02             	lea    edx,[eax+0x2]
c0007b98:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b9b:	e8 41 a1 ff ff       	call   c0001ce1 <st_dword>
c0007ba0:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba3:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba8:	e8 34 a1 ff ff       	call   c0001ce1 <st_dword>
c0007bad:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bb0:	ba 00 01 00 00       	mov    edx,0x100
c0007bb5:	e8 23 a1 ff ff       	call   c0001cdd <st_word>
c0007bba:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbe:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc3:	48                   	dec    eax
c0007bc4:	74 05                	je     c0007bcb <f_mkfs+0x850>
c0007bc6:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc9:	eb f8                	jmp    c0007bc3 <f_mkfs+0x848>
c0007bcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcf:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd7:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bdb:	74 05                	je     c0007be2 <f_mkfs+0x867>
c0007bdd:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007be0:	eb f5                	jmp    c0007bd7 <f_mkfs+0x85c>
c0007be2:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be5:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bea:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bf0:	31 db                	xor    ebx,ebx
c0007bf2:	e8 e6 a0 ff ff       	call   c0001cdd <st_word>
c0007bf7:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c02:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c05:	e8 d3 a0 ff ff       	call   c0001cdd <st_word>
c0007c0a:	31 c9                	xor    ecx,ecx
c0007c0c:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0f:	83 f8 01             	cmp    eax,0x1
c0007c12:	76 13                	jbe    c0007c27 <f_mkfs+0x8ac>
c0007c14:	83 f9 70             	cmp    ecx,0x70
c0007c17:	74 0e                	je     c0007c27 <f_mkfs+0x8ac>
c0007c19:	89 da                	mov    edx,ebx
c0007c1b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c20:	e8 41 a5 ff ff       	call   c0002166 <xsum32>
c0007c25:	89 c3                	mov    ebx,eax
c0007c27:	41                   	inc    ecx
c0007c28:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2e:	75 dc                	jne    c0007c0c <f_mkfs+0x891>
c0007c30:	89 f0                	mov    eax,esi
c0007c32:	89 fa                	mov    edx,edi
c0007c34:	83 c0 01             	add    eax,0x1
c0007c37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c3b:	83 d2 00             	adc    edx,0x0
c0007c3e:	83 ec 0c             	sub    esp,0xc
c0007c41:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c45:	6a 01                	push   0x1
c0007c47:	57                   	push   edi
c0007c48:	56                   	push   esi
c0007c49:	55                   	push   ebp
c0007c4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4e:	e8 e3 9f ff ff       	call   c0001c36 <disk_write>
c0007c53:	83 c4 20             	add    esp,0x20
c0007c56:	85 c0                	test   eax,eax
c0007c58:	0f 85 ce 07 00 00    	jne    c000842c <f_mkfs+0x10b1>
c0007c5e:	31 d2                	xor    edx,edx
c0007c60:	b9 00 02 00 00       	mov    ecx,0x200
c0007c65:	89 e8                	mov    eax,ebp
c0007c67:	e8 93 a0 ff ff       	call   c0001cff <mem_set>
c0007c6c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c74:	e8 64 a0 ff ff       	call   c0001cdd <st_word>
c0007c79:	89 f0                	mov    eax,esi
c0007c7b:	89 fa                	mov    edx,edi
c0007c7d:	83 c0 09             	add    eax,0x9
c0007c80:	83 d2 00             	adc    edx,0x0
c0007c83:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c86:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c8a:	31 c9                	xor    ecx,ecx
c0007c8c:	41                   	inc    ecx
c0007c8d:	89 da                	mov    edx,ebx
c0007c8f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c94:	e8 cd a4 ff ff       	call   c0002166 <xsum32>
c0007c99:	89 c3                	mov    ebx,eax
c0007c9b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ca1:	75 e9                	jne    c0007c8c <f_mkfs+0x911>
c0007ca3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007cab:	83 c0 01             	add    eax,0x1
c0007cae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb2:	83 d2 00             	adc    edx,0x0
c0007cb5:	83 ec 0c             	sub    esp,0xc
c0007cb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cbc:	6a 01                	push   0x1
c0007cbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc6:	55                   	push   ebp
c0007cc7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ccb:	e8 66 9f ff ff       	call   c0001c36 <disk_write>
c0007cd0:	83 c4 20             	add    esp,0x20
c0007cd3:	85 c0                	test   eax,eax
c0007cd5:	0f 85 51 07 00 00    	jne    c000842c <f_mkfs+0x10b1>
c0007cdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdf:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce3:	75 09                	jne    c0007cee <f_mkfs+0x973>
c0007ce5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cec:	74 12                	je     c0007d00 <f_mkfs+0x985>
c0007cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cfa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfe:	eb 8a                	jmp    c0007c8a <f_mkfs+0x90f>
c0007d00:	31 d2                	xor    edx,edx
c0007d02:	b9 00 02 00 00       	mov    ecx,0x200
c0007d07:	89 e8                	mov    eax,ebp
c0007d09:	e8 f1 9f ff ff       	call   c0001cff <mem_set>
c0007d0e:	83 c6 0b             	add    esi,0xb
c0007d11:	83 d7 00             	adc    edi,0x0
c0007d14:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d18:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1c:	31 c9                	xor    ecx,ecx
c0007d1e:	41                   	inc    ecx
c0007d1f:	89 da                	mov    edx,ebx
c0007d21:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d26:	e8 3b a4 ff ff       	call   c0002166 <xsum32>
c0007d2b:	89 c3                	mov    ebx,eax
c0007d2d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d33:	75 e9                	jne    c0007d1e <f_mkfs+0x9a3>
c0007d35:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d38:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3c:	83 c6 01             	add    esi,0x1
c0007d3f:	83 d7 00             	adc    edi,0x0
c0007d42:	83 ec 0c             	sub    esp,0xc
c0007d45:	6a 01                	push   0x1
c0007d47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4f:	55                   	push   ebp
c0007d50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d54:	e8 dd 9e ff ff       	call   c0001c36 <disk_write>
c0007d59:	83 c4 20             	add    esp,0x20
c0007d5c:	85 c0                	test   eax,eax
c0007d5e:	0f 85 c8 06 00 00    	jne    c000842c <f_mkfs+0x10b1>
c0007d64:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d68:	75 06                	jne    c0007d70 <f_mkfs+0x9f5>
c0007d6a:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6e:	74 09                	je     c0007d79 <f_mkfs+0x9fe>
c0007d70:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d73:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d77:	eb a3                	jmp    c0007d1c <f_mkfs+0x9a1>
c0007d79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7d:	89 da                	mov    edx,ebx
c0007d7f:	01 e8                	add    eax,ebp
c0007d81:	e8 5b 9f ff ff       	call   c0001ce1 <st_dword>
c0007d86:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d8b:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d93:	75 e4                	jne    c0007d79 <f_mkfs+0x9fe>
c0007d95:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d98:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9c:	83 c6 02             	add    esi,0x2
c0007d9f:	83 d7 00             	adc    edi,0x0
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	6a 01                	push   0x1
c0007da7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007daf:	55                   	push   ebp
c0007db0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db4:	e8 7d 9e ff ff       	call   c0001c36 <disk_write>
c0007db9:	83 c4 20             	add    esp,0x20
c0007dbc:	85 c0                	test   eax,eax
c0007dbe:	0f 85 68 06 00 00    	jne    c000842c <f_mkfs+0x10b1>
c0007dc4:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc9:	74 0d                	je     c0007dd8 <f_mkfs+0xa5d>
c0007dcb:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd3:	e9 43 fd ff ff       	jmp    c0007b1b <f_mkfs+0x7a0>
c0007dd8:	b1 07                	mov    cl,0x7
c0007dda:	e9 e3 05 00 00       	jmp    c00083c2 <f_mkfs+0x1047>
c0007ddf:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de4:	0f 85 4f 02 00 00    	jne    c0008039 <f_mkfs+0xcbe>
c0007dea:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007def:	0f 86 22 02 00 00    	jbe    c0008017 <f_mkfs+0xc9c>
c0007df5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dfa:	0f 85 81 06 00 00    	jne    c0008481 <f_mkfs+0x1106>
c0007e00:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e07:	83 f8 40             	cmp    eax,0x40
c0007e0a:	0f 87 51 06 00 00    	ja     c0008461 <f_mkfs+0x10e6>
c0007e10:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e14:	85 ff                	test   edi,edi
c0007e16:	75 1c                	jne    c0007e34 <f_mkfs+0xab9>
c0007e18:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e1b:	ba e0 9c 02 c0       	mov    edx,0xc0029ce0
c0007e20:	c1 e9 0c             	shr    ecx,0xc
c0007e23:	bf 01 00 00 00       	mov    edi,0x1
c0007e28:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e2b:	66 85 c0             	test   ax,ax
c0007e2e:	0f 85 95 01 00 00    	jne    c0007fc9 <f_mkfs+0xc4e>
c0007e34:	31 d2                	xor    edx,edx
c0007e36:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e39:	f7 f7                	div    edi
c0007e3b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e40:	0f 86 95 01 00 00    	jbe    c0007fdb <f_mkfs+0xc60>
c0007e46:	83 c0 02             	add    eax,0x2
c0007e49:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4e:	01 c0                	add    eax,eax
c0007e50:	05 ff 01 00 00       	add    eax,0x1ff
c0007e55:	be 01 00 00 00       	mov    esi,0x1
c0007e5a:	c1 e8 09             	shr    eax,0x9
c0007e5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e65:	c1 e0 05             	shl    eax,0x5
c0007e68:	c1 e8 09             	shr    eax,0x9
c0007e6b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6f:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e74:	31 d2                	xor    edx,edx
c0007e76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e7a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7e:	89 f0                	mov    eax,esi
c0007e80:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e84:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e88:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e94:	31 d2                	xor    edx,edx
c0007e96:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e9b:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9f:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea3:	31 db                	xor    ebx,ebx
c0007ea5:	01 c8                	add    eax,ecx
c0007ea7:	11 da                	adc    edx,ebx
c0007ea9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ead:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eb1:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb9:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebd:	f7 da                	neg    edx
c0007ebf:	21 d1                	and    ecx,edx
c0007ec1:	29 d9                	sub    ecx,ebx
c0007ec3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec8:	0f 85 20 01 00 00    	jne    c0007fee <f_mkfs+0xc73>
c0007ece:	31 db                	xor    ebx,ebx
c0007ed0:	01 ce                	add    esi,ecx
c0007ed2:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed6:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eda:	31 d2                	xor    edx,edx
c0007edc:	89 f8                	mov    eax,edi
c0007ede:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee2:	c1 e0 04             	shl    eax,0x4
c0007ee5:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee9:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eed:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ef1:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef5:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef8:	19 d3                	sbb    ebx,edx
c0007efa:	0f 82 40 01 00 00    	jb     c0008040 <f_mkfs+0xcc5>
c0007f00:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f03:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f07:	89 c8                	mov    eax,ecx
c0007f09:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0e:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f12:	29 f0                	sub    eax,esi
c0007f14:	29 d0                	sub    eax,edx
c0007f16:	31 d2                	xor    edx,edx
c0007f18:	f7 f7                	div    edi
c0007f1a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1f:	89 c3                	mov    ebx,eax
c0007f21:	0f 85 b8 fe ff ff    	jne    c0007ddf <f_mkfs+0xa64>
c0007f27:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2c:	0f 87 1d 01 00 00    	ja     c000804f <f_mkfs+0xcd4>
c0007f32:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f37:	0f 85 03 01 00 00    	jne    c0008040 <f_mkfs+0xcc5>
c0007f3d:	83 ff 01             	cmp    edi,0x1
c0007f40:	0f 86 fa 00 00 00    	jbe    c0008040 <f_mkfs+0xcc5>
c0007f46:	d1 ef                	shr    edi,1
c0007f48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f50:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f53:	85 db                	test   ebx,ebx
c0007f55:	75 2d                	jne    c0007f84 <f_mkfs+0xc09>
c0007f57:	89 cb                	mov    ebx,ecx
c0007f59:	ba f0 9c 02 c0       	mov    edx,0xc0029cf0
c0007f5e:	c1 eb 11             	shr    ebx,0x11
c0007f61:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f69:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6c:	66 85 c0             	test   ax,ax
c0007f6f:	74 11                	je     c0007f82 <f_mkfs+0xc07>
c0007f71:	83 c2 02             	add    edx,0x2
c0007f74:	39 d8                	cmp    eax,ebx
c0007f76:	77 0a                	ja     c0007f82 <f_mkfs+0xc07>
c0007f78:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7c:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f80:	eb e7                	jmp    c0007f69 <f_mkfs+0xbee>
c0007f82:	31 db                	xor    ebx,ebx
c0007f84:	31 d2                	xor    edx,edx
c0007f86:	89 c8                	mov    eax,ecx
c0007f88:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8c:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f93:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f98:	c1 ea 09             	shr    edx,0x9
c0007f9b:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fa0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa4:	0f 87 96 00 00 00    	ja     c0008040 <f_mkfs+0xcc5>
c0007faa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fae:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fba:	be 20 00 00 00       	mov    esi,0x20
c0007fbf:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc4:	e9 a6 fe ff ff       	jmp    c0007e6f <f_mkfs+0xaf4>
c0007fc9:	83 c2 02             	add    edx,0x2
c0007fcc:	39 c8                	cmp    eax,ecx
c0007fce:	0f 87 60 fe ff ff    	ja     c0007e34 <f_mkfs+0xab9>
c0007fd4:	01 ff                	add    edi,edi
c0007fd6:	e9 4d fe ff ff       	jmp    c0007e28 <f_mkfs+0xaad>
c0007fdb:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fde:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe3:	40                   	inc    eax
c0007fe4:	d1 e8                	shr    eax,1
c0007fe6:	83 c0 03             	add    eax,0x3
c0007fe9:	e9 62 fe ff ff       	jmp    c0007e50 <f_mkfs+0xad5>
c0007fee:	31 d2                	xor    edx,edx
c0007ff0:	89 c8                	mov    eax,ecx
c0007ff2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff6:	85 d2                	test   edx,edx
c0007ff8:	74 0c                	je     c0008006 <f_mkfs+0xc8b>
c0007ffa:	49                   	dec    ecx
c0007ffb:	46                   	inc    esi
c0007ffc:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008001:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008006:	89 c8                	mov    eax,ecx
c0008008:	31 d2                	xor    edx,edx
c000800a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800e:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008012:	e9 c3 fe ff ff       	jmp    c0007eda <f_mkfs+0xb5f>
c0008017:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801c:	77 31                	ja     c000804f <f_mkfs+0xcd4>
c000801e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008023:	75 1b                	jne    c0008040 <f_mkfs+0xcc5>
c0008025:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008028:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802c:	3d 80 00 00 00       	cmp    eax,0x80
c0008031:	0f 86 d9 fd ff ff    	jbe    c0007e10 <f_mkfs+0xa95>
c0008037:	eb 07                	jmp    c0008040 <f_mkfs+0xcc5>
c0008039:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803e:	76 0a                	jbe    c000804a <f_mkfs+0xccf>
c0008040:	bb 0e 00 00 00       	mov    ebx,0xe
c0008045:	e9 ff 03 00 00       	jmp    c0008449 <f_mkfs+0x10ce>
c000804a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804f:	31 d2                	xor    edx,edx
c0008051:	b9 00 02 00 00       	mov    ecx,0x200
c0008056:	89 e8                	mov    eax,ebp
c0008058:	e8 a2 9c ff ff       	call   c0001cff <mem_set>
c000805d:	b9 0b 00 00 00       	mov    ecx,0xb
c0008062:	ba 02 9e 02 c0       	mov    edx,0xc0029e02
c0008067:	89 e8                	mov    eax,ebp
c0008069:	e8 7c 9c ff ff       	call   c0001cea <mem_cpy>
c000806e:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008071:	ba 00 02 00 00       	mov    edx,0x200
c0008076:	e8 62 9c ff ff       	call   c0001cdd <st_word>
c000807b:	89 f8                	mov    eax,edi
c000807d:	0f b7 d6             	movzx  edx,si
c0008080:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008083:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008086:	e8 52 9c ff ff       	call   c0001cdd <st_word>
c000808b:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008094:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008097:	75 08                	jne    c00080a1 <f_mkfs+0xd26>
c0008099:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080a1:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a8:	e8 30 9c ff ff       	call   c0001cdd <st_word>
c00080ad:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b2:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b6:	39 d0                	cmp    eax,edx
c00080b8:	b8 00 00 00 00       	mov    eax,0x0
c00080bd:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080c1:	72 0a                	jb     c00080cd <f_mkfs+0xd52>
c00080c3:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c6:	e8 12 9c ff ff       	call   c0001cdd <st_word>
c00080cb:	eb 08                	jmp    c00080d5 <f_mkfs+0xd5a>
c00080cd:	8d 45 20             	lea    eax,[ebp+0x20]
c00080d0:	e8 0c 9c ff ff       	call   c0001ce1 <st_dword>
c00080d5:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d8:	ba 3f 00 00 00       	mov    edx,0x3f
c00080dd:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080e1:	e8 f7 9b ff ff       	call   c0001cdd <st_word>
c00080e6:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e9:	ba ff 00 00 00       	mov    edx,0xff
c00080ee:	e8 ea 9b ff ff       	call   c0001cdd <st_word>
c00080f3:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080fa:	e8 e2 9b ff ff       	call   c0001ce1 <st_dword>
c00080ff:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008104:	75 57                	jne    c000815d <f_mkfs+0xde2>
c0008106:	8d 45 43             	lea    eax,[ebp+0x43]
c0008109:	ba 00 00 21 50       	mov    edx,0x50210000
c000810e:	e8 ce 9b ff ff       	call   c0001ce1 <st_dword>
c0008113:	8d 45 24             	lea    eax,[ebp+0x24]
c0008116:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000811a:	e8 c2 9b ff ff       	call   c0001ce1 <st_dword>
c000811f:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008122:	ba 02 00 00 00       	mov    edx,0x2
c0008127:	e8 b5 9b ff ff       	call   c0001ce1 <st_dword>
c000812c:	8d 45 30             	lea    eax,[ebp+0x30]
c000812f:	ba 01 00 00 00       	mov    edx,0x1
c0008134:	e8 a4 9b ff ff       	call   c0001cdd <st_word>
c0008139:	8d 45 32             	lea    eax,[ebp+0x32]
c000813c:	ba 06 00 00 00       	mov    edx,0x6
c0008141:	e8 97 9b ff ff       	call   c0001cdd <st_word>
c0008146:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000814a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814e:	8d 45 47             	lea    eax,[ebp+0x47]
c0008151:	b9 13 00 00 00       	mov    ecx,0x13
c0008156:	ba 0e 9e 02 c0       	mov    edx,0xc0029e0e
c000815b:	eb 2f                	jmp    c000818c <f_mkfs+0xe11>
c000815d:	8d 45 27             	lea    eax,[ebp+0x27]
c0008160:	ba 00 00 21 50       	mov    edx,0x50210000
c0008165:	e8 77 9b ff ff       	call   c0001ce1 <st_dword>
c000816a:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816f:	8d 45 16             	lea    eax,[ebp+0x16]
c0008172:	e8 66 9b ff ff       	call   c0001cdd <st_word>
c0008177:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000817b:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817f:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008182:	b9 13 00 00 00       	mov    ecx,0x13
c0008187:	ba 22 9e 02 c0       	mov    edx,0xc0029e22
c000818c:	e8 59 9b ff ff       	call   c0001cea <mem_cpy>
c0008191:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008197:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819c:	89 f0                	mov    eax,esi
c000819e:	e8 3a 9b ff ff       	call   c0001cdd <st_word>
c00081a3:	83 ec 0c             	sub    esp,0xc
c00081a6:	6a 01                	push   0x1
c00081a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081b0:	55                   	push   ebp
c00081b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b5:	e8 7c 9a ff ff       	call   c0001c36 <disk_write>
c00081ba:	83 c4 20             	add    esp,0x20
c00081bd:	85 c0                	test   eax,eax
c00081bf:	0f 85 67 02 00 00    	jne    c000842c <f_mkfs+0x10b1>
c00081c5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ca:	0f 85 b7 00 00 00    	jne    c0008287 <f_mkfs+0xf0c>
c00081d0:	83 ec 0c             	sub    esp,0xc
c00081d3:	6a 01                	push   0x1
c00081d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081dd:	83 c0 06             	add    eax,0x6
c00081e0:	83 d2 00             	adc    edx,0x0
c00081e3:	52                   	push   edx
c00081e4:	50                   	push   eax
c00081e5:	55                   	push   ebp
c00081e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ea:	e8 47 9a ff ff       	call   c0001c36 <disk_write>
c00081ef:	83 c4 20             	add    esp,0x20
c00081f2:	b9 00 02 00 00       	mov    ecx,0x200
c00081f7:	31 d2                	xor    edx,edx
c00081f9:	89 e8                	mov    eax,ebp
c00081fb:	e8 ff 9a ff ff       	call   c0001cff <mem_set>
c0008200:	ba 52 52 61 41       	mov    edx,0x41615252
c0008205:	89 e8                	mov    eax,ebp
c0008207:	e8 d5 9a ff ff       	call   c0001ce1 <st_dword>
c000820c:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008212:	ba 72 72 41 61       	mov    edx,0x61417272
c0008217:	e8 c5 9a ff ff       	call   c0001ce1 <st_dword>
c000821c:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821f:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008225:	e8 b7 9a ff ff       	call   c0001ce1 <st_dword>
c000822a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008230:	ba 02 00 00 00       	mov    edx,0x2
c0008235:	e8 a7 9a ff ff       	call   c0001ce1 <st_dword>
c000823a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823f:	89 f0                	mov    eax,esi
c0008241:	e8 97 9a ff ff       	call   c0001cdd <st_word>
c0008246:	83 ec 0c             	sub    esp,0xc
c0008249:	6a 01                	push   0x1
c000824b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008253:	83 c0 07             	add    eax,0x7
c0008256:	83 d2 00             	adc    edx,0x0
c0008259:	52                   	push   edx
c000825a:	50                   	push   eax
c000825b:	55                   	push   ebp
c000825c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008260:	e8 d1 99 ff ff       	call   c0001c36 <disk_write>
c0008265:	83 c4 14             	add    esp,0x14
c0008268:	6a 01                	push   0x1
c000826a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008272:	83 c0 01             	add    eax,0x1
c0008275:	83 d2 00             	adc    edx,0x0
c0008278:	52                   	push   edx
c0008279:	50                   	push   eax
c000827a:	55                   	push   ebp
c000827b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827f:	e8 b2 99 ff ff       	call   c0001c36 <disk_write>
c0008284:	83 c4 20             	add    esp,0x20
c0008287:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828e:	31 d2                	xor    edx,edx
c0008290:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008296:	31 db                	xor    ebx,ebx
c0008298:	89 e8                	mov    eax,ebp
c000829a:	e8 60 9a ff ff       	call   c0001cff <mem_set>
c000829f:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082ab:	0f 94 c3             	sete   bl
c00082ae:	4b                   	dec    ebx
c00082af:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b5:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082c0:	75 21                	jne    c00082e3 <f_mkfs+0xf68>
c00082c2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c7:	89 e8                	mov    eax,ebp
c00082c9:	e8 13 9a ff ff       	call   c0001ce1 <st_dword>
c00082ce:	8d 45 04             	lea    eax,[ebp+0x4]
c00082d1:	83 ca ff             	or     edx,0xffffffff
c00082d4:	e8 08 9a ff ff       	call   c0001ce1 <st_dword>
c00082d9:	8d 45 08             	lea    eax,[ebp+0x8]
c00082dc:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082e1:	eb 04                	jmp    c00082e7 <f_mkfs+0xf6c>
c00082e3:	89 da                	mov    edx,ebx
c00082e5:	89 e8                	mov    eax,ebp
c00082e7:	e8 f5 99 ff ff       	call   c0001ce1 <st_dword>
c00082ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fc:	39 ce                	cmp    esi,ecx
c00082fe:	76 02                	jbe    c0008302 <f_mkfs+0xf87>
c0008300:	89 ce                	mov    esi,ecx
c0008302:	83 ec 0c             	sub    esp,0xc
c0008305:	56                   	push   esi
c0008306:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830e:	55                   	push   ebp
c000830f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008313:	e8 1e 99 ff ff       	call   c0001c36 <disk_write>
c0008318:	83 c4 20             	add    esp,0x20
c000831b:	85 c0                	test   eax,eax
c000831d:	0f 85 09 01 00 00    	jne    c000842c <f_mkfs+0x10b1>
c0008323:	31 d2                	xor    edx,edx
c0008325:	b9 00 02 00 00       	mov    ecx,0x200
c000832a:	89 e8                	mov    eax,ebp
c000832c:	e8 ce 99 ff ff       	call   c0001cff <mem_set>
c0008331:	31 d2                	xor    edx,edx
c0008333:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008337:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000833b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833f:	75 b3                	jne    c00082f4 <f_mkfs+0xf79>
c0008341:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008344:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000834b:	40                   	inc    eax
c000834c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008350:	0f 87 65 ff ff ff    	ja     c00082bb <f_mkfs+0xf40>
c0008356:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835b:	74 04                	je     c0008361 <f_mkfs+0xfe6>
c000835d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008361:	89 fb                	mov    ebx,edi
c0008363:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008367:	76 04                	jbe    c000836d <f_mkfs+0xff2>
c0008369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836d:	83 ec 0c             	sub    esp,0xc
c0008370:	53                   	push   ebx
c0008371:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008375:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 b3 98 ff ff       	call   c0001c36 <disk_write>
c0008383:	83 c4 20             	add    esp,0x20
c0008386:	85 c0                	test   eax,eax
c0008388:	0f 85 9e 00 00 00    	jne    c000842c <f_mkfs+0x10b1>
c000838e:	31 d2                	xor    edx,edx
c0008390:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008394:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008398:	29 df                	sub    edi,ebx
c000839a:	75 c5                	jne    c0008361 <f_mkfs+0xfe6>
c000839c:	b1 0c                	mov    cl,0xc
c000839e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a3:	74 1d                	je     c00083c2 <f_mkfs+0x1047>
c00083a5:	b8 ff ff 00 00       	mov    eax,0xffff
c00083aa:	b1 06                	mov    cl,0x6
c00083ac:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083b0:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b4:	72 0c                	jb     c00083c2 <f_mkfs+0x1047>
c00083b6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083bb:	0f 94 c1             	sete   cl
c00083be:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c2:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c7:	75 4c                	jne    c0008415 <f_mkfs+0x109a>
c00083c9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cd:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083d1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083df:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083ea:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f5:	0f b6 c9             	movzx  ecx,cl
c00083f8:	83 ec 0c             	sub    esp,0xc
c00083fb:	55                   	push   ebp
c00083fc:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008407:	e8 2f c2 ff ff       	call   c000463b <create_partition>
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	89 c3                	mov    ebx,eax
c0008411:	85 c0                	test   eax,eax
c0008413:	75 34                	jne    c0008449 <f_mkfs+0x10ce>
c0008415:	31 db                	xor    ebx,ebx
c0008417:	50                   	push   eax
c0008418:	6a 00                	push   0x0
c000841a:	6a 00                	push   0x0
c000841c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008420:	e8 27 98 ff ff       	call   c0001c4c <disk_ioctl>
c0008425:	83 c4 10             	add    esp,0x10
c0008428:	85 c0                	test   eax,eax
c000842a:	74 1d                	je     c0008449 <f_mkfs+0x10ce>
c000842c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008434:	75 0c                	jne    c0008442 <f_mkfs+0x10c7>
c0008436:	83 ec 0c             	sub    esp,0xc
c0008439:	55                   	push   ebp
c000843a:	e8 75 00 00 00       	call   c00084b4 <ff_memfree>
c000843f:	83 c4 10             	add    esp,0x10
c0008442:	bb 01 00 00 00       	mov    ebx,0x1
c0008447:	eb 48                	jmp    c0008491 <f_mkfs+0x1116>
c0008449:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008451:	75 3e                	jne    c0008491 <f_mkfs+0x1116>
c0008453:	83 ec 0c             	sub    esp,0xc
c0008456:	55                   	push   ebp
c0008457:	e8 58 00 00 00       	call   c00084b4 <ff_memfree>
c000845c:	83 c4 10             	add    esp,0x10
c000845f:	eb 30                	jmp    c0008491 <f_mkfs+0x1116>
c0008461:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008466:	0f 85 eb fa ff ff    	jne    c0007f57 <f_mkfs+0xbdc>
c000846c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008470:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008476:	0f 86 b8 f9 ff ff    	jbe    c0007e34 <f_mkfs+0xab9>
c000847c:	e9 bf fb ff ff       	jmp    c0008040 <f_mkfs+0xcc5>
c0008481:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008486:	0f 85 c0 fa ff ff    	jne    c0007f4c <f_mkfs+0xbd1>
c000848c:	e9 af fb ff ff       	jmp    c0008040 <f_mkfs+0xcc5>
c0008491:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008497:	89 d8                	mov    eax,ebx
c0008499:	5b                   	pop    ebx
c000849a:	5e                   	pop    esi
c000849b:	5f                   	pop    edi
c000849c:	5d                   	pop    ebp
c000849d:	c3                   	ret    

c000849e <ff_memalloc>:
c000849e:	83 ec 0c             	sub    esp,0xc
c00084a1:	83 ec 0c             	sub    esp,0xc
c00084a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a8:	e8 13 74 00 00       	call   c000f8c0 <malloc>
c00084ad:	83 c4 10             	add    esp,0x10
c00084b0:	83 c4 0c             	add    esp,0xc
c00084b3:	c3                   	ret    

c00084b4 <ff_memfree>:
c00084b4:	83 ec 0c             	sub    esp,0xc
c00084b7:	83 ec 0c             	sub    esp,0xc
c00084ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084be:	e8 0d 74 00 00       	call   c000f8d0 <free>
c00084c3:	83 c4 10             	add    esp,0x10
c00084c6:	90                   	nop
c00084c7:	83 c4 0c             	add    esp,0xc
c00084ca:	c3                   	ret    

c00084cb <ff_uni2oem>:
c00084cb:	83 ec 14             	sub    esp,0x14
c00084ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d2:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d6:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084dd:	c7 44 24 0c 40 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a140
c00084e5:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084ea:	77 0b                	ja     c00084f7 <ff_uni2oem+0x2c>
c00084ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084f0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f5:	eb 5b                	jmp    c0008552 <ff_uni2oem+0x87>
c00084f7:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084ff:	77 51                	ja     c0008552 <ff_uni2oem+0x87>
c0008501:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008507:	75 49                	jne    c0008552 <ff_uni2oem+0x87>
c0008509:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008510:	eb 0b                	jmp    c000851d <ff_uni2oem+0x52>
c0008512:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008517:	40                   	inc    eax
c0008518:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851d:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008523:	77 1b                	ja     c0008540 <ff_uni2oem+0x75>
c0008525:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000852a:	01 c0                	add    eax,eax
c000852c:	89 c2                	mov    edx,eax
c000852e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008532:	01 d0                	add    eax,edx
c0008534:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008537:	0f b7 c0             	movzx  eax,ax
c000853a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853e:	75 d2                	jne    c0008512 <ff_uni2oem+0x47>
c0008540:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008545:	83 e8 80             	sub    eax,0xffffff80
c0008548:	25 ff 00 00 00       	and    eax,0xff
c000854d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008552:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008557:	83 c4 14             	add    esp,0x14
c000855a:	c3                   	ret    

c000855b <ff_oem2uni>:
c000855b:	83 ec 18             	sub    esp,0x18
c000855e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008566:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000856b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856f:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008576:	c7 44 24 10 40 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a140
c000857e:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008584:	77 0b                	ja     c0008591 <ff_oem2uni+0x36>
c0008586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000858a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858f:	eb 2d                	jmp    c00085be <ff_oem2uni+0x63>
c0008591:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008597:	75 25                	jne    c00085be <ff_oem2uni+0x63>
c0008599:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085a0:	77 1c                	ja     c00085be <ff_oem2uni+0x63>
c00085a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a7:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085ac:	01 c0                	add    eax,eax
c00085ae:	89 c2                	mov    edx,eax
c00085b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b4:	01 d0                	add    eax,edx
c00085b6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085be:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c3:	83 c4 18             	add    esp,0x18
c00085c6:	c3                   	ret    

c00085c7 <ff_wtoupper>:
c00085c7:	83 ec 10             	sub    esp,0x10
c00085ca:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d2:	0f 87 3e 01 00 00    	ja     c0008716 <ff_wtoupper+0x14f>
c00085d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085dc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085e1:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e8:	77 07                	ja     c00085f1 <ff_wtoupper+0x2a>
c00085ea:	b8 40 9f 02 c0       	mov    eax,0xc0029f40
c00085ef:	eb 05                	jmp    c00085f6 <ff_wtoupper+0x2f>
c00085f1:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c00085f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fe:	8d 50 02             	lea    edx,[eax+0x2]
c0008601:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008605:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008608:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860d:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008613:	0f 84 f4 00 00 00    	je     c000870d <ff_wtoupper+0x146>
c0008619:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861e:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008623:	0f 82 e4 00 00 00    	jb     c000870d <ff_wtoupper+0x146>
c0008629:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862d:	8d 50 02             	lea    edx,[eax+0x2]
c0008630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008634:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008637:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008641:	66 c1 e8 08          	shr    ax,0x8
c0008645:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000864a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008651:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008656:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000865b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008660:	01 ca                	add    edx,ecx
c0008662:	39 d0                	cmp    eax,edx
c0008664:	0f 8d 86 00 00 00    	jge    c00086f0 <ff_wtoupper+0x129>
c000866a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866f:	83 f8 08             	cmp    eax,0x8
c0008672:	0f 87 94 00 00 00    	ja     c000870c <ff_wtoupper+0x145>
c0008678:	8b 04 85 40 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd61c0]
c000867f:	ff e0                	jmp    eax
c0008681:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008686:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000868b:	29 c2                	sub    edx,eax
c000868d:	89 d0                	mov    eax,edx
c000868f:	01 c0                	add    eax,eax
c0008691:	89 c2                	mov    edx,eax
c0008693:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008697:	01 d0                	add    eax,edx
c0008699:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086a1:	eb 4b                	jmp    c00086ee <ff_wtoupper+0x127>
c00086a3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086ac:	83 e0 01             	and    eax,0x1
c00086af:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b4:	eb 38                	jmp    c00086ee <ff_wtoupper+0x127>
c00086b6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086bc:	eb 30                	jmp    c00086ee <ff_wtoupper+0x127>
c00086be:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c4:	eb 28                	jmp    c00086ee <ff_wtoupper+0x127>
c00086c6:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086cc:	eb 20                	jmp    c00086ee <ff_wtoupper+0x127>
c00086ce:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d4:	eb 18                	jmp    c00086ee <ff_wtoupper+0x127>
c00086d6:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086dc:	eb 10                	jmp    c00086ee <ff_wtoupper+0x127>
c00086de:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e4:	eb 08                	jmp    c00086ee <ff_wtoupper+0x127>
c00086e6:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086ed:	90                   	nop
c00086ee:	eb 1c                	jmp    c000870c <ff_wtoupper+0x145>
c00086f0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f6:	0f 85 fe fe ff ff    	jne    c00085fa <ff_wtoupper+0x33>
c00086fc:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008701:	01 c0                	add    eax,eax
c0008703:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008707:	e9 ee fe ff ff       	jmp    c00085fa <ff_wtoupper+0x33>
c000870c:	90                   	nop
c000870d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008712:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008716:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000871a:	83 c4 10             	add    esp,0x10
c000871d:	c3                   	ret    

c000871e <psrc_set_converter>:
c000871e:	56                   	push   esi
c000871f:	89 d6                	mov    esi,edx
c0008721:	53                   	push   ebx
c0008722:	89 c3                	mov    ebx,eax
c0008724:	83 ec 0c             	sub    esp,0xc
c0008727:	52                   	push   edx
c0008728:	50                   	push   eax
c0008729:	e8 6f 55 00 00       	call   c000dc9d <sinc_set_converter>
c000872e:	83 c4 10             	add    esp,0x10
c0008731:	85 c0                	test   eax,eax
c0008733:	74 25                	je     c000875a <psrc_set_converter+0x3c>
c0008735:	50                   	push   eax
c0008736:	50                   	push   eax
c0008737:	56                   	push   esi
c0008738:	53                   	push   ebx
c0008739:	e8 17 5d 00 00       	call   c000e455 <zoh_set_converter>
c000873e:	83 c4 10             	add    esp,0x10
c0008741:	85 c0                	test   eax,eax
c0008743:	74 15                	je     c000875a <psrc_set_converter+0x3c>
c0008745:	51                   	push   ecx
c0008746:	51                   	push   ecx
c0008747:	56                   	push   esi
c0008748:	53                   	push   ebx
c0008749:	e8 0f 11 00 00       	call   c000985d <linear_set_converter>
c000874e:	83 c4 10             	add    esp,0x10
c0008751:	ba 0a 00 00 00       	mov    edx,0xa
c0008756:	85 c0                	test   eax,eax
c0008758:	75 02                	jne    c000875c <psrc_set_converter+0x3e>
c000875a:	31 d2                	xor    edx,edx
c000875c:	89 d0                	mov    eax,edx
c000875e:	5a                   	pop    edx
c000875f:	5b                   	pop    ebx
c0008760:	5e                   	pop    esi
c0008761:	c3                   	ret    

c0008762 <src_delete>:
c0008762:	53                   	push   ebx
c0008763:	83 ec 08             	sub    esp,0x8
c0008766:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000876a:	85 db                	test   ebx,ebx
c000876c:	74 29                	je     c0008797 <src_delete+0x35>
c000876e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	74 0c                	je     c0008781 <src_delete+0x1f>
c0008775:	83 ec 0c             	sub    esp,0xc
c0008778:	50                   	push   eax
c0008779:	e8 52 71 00 00       	call   c000f8d0 <free>
c000877e:	83 c4 10             	add    esp,0x10
c0008781:	50                   	push   eax
c0008782:	6a 3c                	push   0x3c
c0008784:	6a 00                	push   0x0
c0008786:	53                   	push   ebx
c0008787:	e8 e0 7f ff ff       	call   c000076c <memset>
c000878c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878f:	e8 3c 71 00 00       	call   c000f8d0 <free>
c0008794:	83 c4 10             	add    esp,0x10
c0008797:	31 c0                	xor    eax,eax
c0008799:	83 c4 08             	add    esp,0x8
c000879c:	5b                   	pop    ebx
c000879d:	c3                   	ret    

c000879e <src_process>:
c000879e:	55                   	push   ebp
c000879f:	57                   	push   edi
c00087a0:	56                   	push   esi
c00087a1:	53                   	push   ebx
c00087a2:	83 ec 1c             	sub    esp,0x1c
c00087a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ad:	85 ed                	test   ebp,ebp
c00087af:	0f 84 6f 01 00 00    	je     c0008924 <src_process+0x186>
c00087b5:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b9:	0f 84 6c 01 00 00    	je     c000892b <src_process+0x18d>
c00087bf:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c3:	0f 84 62 01 00 00    	je     c000892b <src_process+0x18d>
c00087c9:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087d0:	0f 85 5c 01 00 00    	jne    c0008932 <src_process+0x194>
c00087d6:	85 db                	test   ebx,ebx
c00087d8:	0f 84 5b 01 00 00    	je     c0008939 <src_process+0x19b>
c00087de:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087e0:	85 f6                	test   esi,esi
c00087e2:	0f 84 58 01 00 00    	je     c0008940 <src_process+0x1a2>
c00087e8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087eb:	85 ff                	test   edi,edi
c00087ed:	0f 84 4d 01 00 00    	je     c0008940 <src_process+0x1a2>
c00087f3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008801:	68 00 00 70 3f       	push   0x3f700000
c0008806:	6a 00                	push   0x0
c0008808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008810:	e8 f2 04 02 00       	call   c0028d07 <__ltdf2>
c0008815:	83 c4 10             	add    esp,0x10
c0008818:	85 c0                	test   eax,eax
c000881a:	0f 88 27 01 00 00    	js     c0008947 <src_process+0x1a9>
c0008820:	68 00 00 70 40       	push   0x40700000
c0008825:	6a 00                	push   0x0
c0008827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882f:	e8 b5 04 02 00       	call   c0028ce9 <__gtdf2>
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	85 c0                	test   eax,eax
c0008839:	0f 8f 08 01 00 00    	jg     c0008947 <src_process+0x1a9>
c000883f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008843:	79 07                	jns    c000884c <src_process+0xae>
c0008845:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884f:	85 c0                	test   eax,eax
c0008851:	79 50                	jns    c00088a3 <src_process+0x105>
c0008853:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000885a:	39 fe                	cmp    esi,edi
c000885c:	72 37                	jb     c0008895 <src_process+0xf7>
c000885e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008865:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886c:	68 00 00 70 3f       	push   0x3f700000
c0008871:	6a 00                	push   0x0
c0008873:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008876:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008879:	e8 89 04 02 00       	call   c0028d07 <__ltdf2>
c000887e:	83 c4 10             	add    esp,0x10
c0008881:	85 c0                	test   eax,eax
c0008883:	79 37                	jns    c00088bc <src_process+0x11e>
c0008885:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008889:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008890:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008893:	eb 27                	jmp    c00088bc <src_process+0x11e>
c0008895:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008898:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889c:	8d 04 86             	lea    eax,[esi+eax*4]
c000889f:	39 c7                	cmp    edi,eax
c00088a1:	eb 0d                	jmp    c00088b0 <src_process+0x112>
c00088a3:	39 fe                	cmp    esi,edi
c00088a5:	72 ee                	jb     c0008895 <src_process+0xf7>
c00088a7:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088ab:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ae:	39 c6                	cmp    esi,eax
c00088b0:	73 ac                	jae    c000885e <src_process+0xc0>
c00088b2:	b8 10 00 00 00       	mov    eax,0x10
c00088b7:	e9 90 00 00 00       	jmp    c000894c <src_process+0x1ae>
c00088bc:	83 ec 10             	sub    esp,0x10
c00088bf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088cb:	e8 3c fb 01 00       	call   c002840c <__subdf3>
c00088d0:	83 c4 18             	add    esp,0x18
c00088d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088db:	52                   	push   edx
c00088dc:	50                   	push   eax
c00088dd:	e8 be 05 02 00       	call   c0028ea0 <fabs>
c00088e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088ea:	83 c4 10             	add    esp,0x10
c00088ed:	68 af 03 d2 3c       	push   0x3cd203af
c00088f2:	68 16 56 e7 9e       	push   0x9ee75616
c00088f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088ff:	e8 03 04 02 00       	call   c0028d07 <__ltdf2>
c0008904:	83 c4 10             	add    esp,0x10
c0008907:	85 c0                	test   eax,eax
c0008909:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890d:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008911:	79 05                	jns    c0008918 <src_process+0x17a>
c0008913:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008916:	eb 03                	jmp    c000891b <src_process+0x17d>
c0008918:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c000891b:	83 c4 1c             	add    esp,0x1c
c000891e:	5b                   	pop    ebx
c000891f:	5e                   	pop    esi
c0008920:	5f                   	pop    edi
c0008921:	5d                   	pop    ebp
c0008922:	ff e0                	jmp    eax
c0008924:	b8 02 00 00 00       	mov    eax,0x2
c0008929:	eb 21                	jmp    c000894c <src_process+0x1ae>
c000892b:	b8 07 00 00 00       	mov    eax,0x7
c0008930:	eb 1a                	jmp    c000894c <src_process+0x1ae>
c0008932:	b8 12 00 00 00       	mov    eax,0x12
c0008937:	eb 13                	jmp    c000894c <src_process+0x1ae>
c0008939:	b8 03 00 00 00       	mov    eax,0x3
c000893e:	eb 0c                	jmp    c000894c <src_process+0x1ae>
c0008940:	b8 04 00 00 00       	mov    eax,0x4
c0008945:	eb 05                	jmp    c000894c <src_process+0x1ae>
c0008947:	b8 06 00 00 00       	mov    eax,0x6
c000894c:	83 c4 1c             	add    esp,0x1c
c000894f:	5b                   	pop    ebx
c0008950:	5e                   	pop    esi
c0008951:	5f                   	pop    edi
c0008952:	5d                   	pop    ebp
c0008953:	c3                   	ret    

c0008954 <src_callback_read>:
c0008954:	55                   	push   ebp
c0008955:	57                   	push   edi
c0008956:	56                   	push   esi
c0008957:	53                   	push   ebx
c0008958:	83 ec 3c             	sub    esp,0x3c
c000895b:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008963:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008967:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000896b:	85 ed                	test   ebp,ebp
c000896d:	0f 8e 52 01 00 00    	jle    c0008ac5 <src_callback_read+0x171>
c0008973:	85 db                	test   ebx,ebx
c0008975:	0f 84 4a 01 00 00    	je     c0008ac5 <src_callback_read+0x171>
c000897b:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008982:	74 0c                	je     c0008990 <src_callback_read+0x3c>
c0008984:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000898b:	e9 35 01 00 00       	jmp    c0008ac5 <src_callback_read+0x171>
c0008990:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008994:	75 0c                	jne    c00089a2 <src_callback_read+0x4e>
c0008996:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899d:	e9 23 01 00 00       	jmp    c0008ac5 <src_callback_read+0x171>
c00089a2:	51                   	push   ecx
c00089a3:	6a 24                	push   0x24
c00089a5:	6a 00                	push   0x0
c00089a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089ab:	50                   	push   eax
c00089ac:	e8 bb 7d ff ff       	call   c000076c <memset>
c00089b1:	83 c4 10             	add    esp,0x10
c00089b4:	68 00 00 70 3f       	push   0x3f700000
c00089b9:	6a 00                	push   0x0
c00089bb:	57                   	push   edi
c00089bc:	56                   	push   esi
c00089bd:	e8 45 03 02 00       	call   c0028d07 <__ltdf2>
c00089c2:	83 c4 10             	add    esp,0x10
c00089c5:	85 c0                	test   eax,eax
c00089c7:	78 3e                	js     c0008a07 <src_callback_read+0xb3>
c00089c9:	68 00 00 70 40       	push   0x40700000
c00089ce:	6a 00                	push   0x0
c00089d0:	57                   	push   edi
c00089d1:	56                   	push   esi
c00089d2:	e8 12 03 02 00       	call   c0028ce9 <__gtdf2>
c00089d7:	83 c4 10             	add    esp,0x10
c00089da:	85 c0                	test   eax,eax
c00089dc:	7f 29                	jg     c0008a07 <src_callback_read+0xb3>
c00089de:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e2:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089ea:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ee:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089f1:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f9:	31 f6                	xor    esi,esi
c00089fb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a02:	e9 97 00 00 00       	jmp    c0008a9e <src_callback_read+0x14a>
c0008a07:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0e:	e9 b2 00 00 00       	jmp    c0008ac5 <src_callback_read+0x171>
c0008a13:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a1b:	52                   	push   edx
c0008a1c:	52                   	push   edx
c0008a1d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a21:	50                   	push   eax
c0008a22:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a25:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a30:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	85 c0                	test   eax,eax
c0008a39:	75 08                	jne    c0008a43 <src_callback_read+0xef>
c0008a3b:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a43:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a50:	50                   	push   eax
c0008a51:	53                   	push   ebx
c0008a52:	e8 47 fd ff ff       	call   c000879e <src_process>
c0008a57:	83 c4 10             	add    esp,0x10
c0008a5a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a61:	85 c0                	test   eax,eax
c0008a63:	75 49                	jne    c0008aae <src_callback_read+0x15a>
c0008a65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a69:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6c:	89 f9                	mov    ecx,edi
c0008a6e:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a72:	0f af ca             	imul   ecx,edx
c0008a75:	c1 e1 02             	shl    ecx,0x2
c0008a78:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a80:	0f af d1             	imul   edx,ecx
c0008a83:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a87:	c1 e2 02             	shl    edx,0x2
c0008a8a:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8e:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a91:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a96:	74 12                	je     c0008aaa <src_callback_read+0x156>
c0008a98:	39 d5                	cmp    ebp,edx
c0008a9a:	7e 14                	jle    c0008ab0 <src_callback_read+0x15c>
c0008a9c:	89 d6                	mov    esi,edx
c0008a9e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa3:	75 9e                	jne    c0008a43 <src_callback_read+0xef>
c0008aa5:	e9 69 ff ff ff       	jmp    c0008a13 <src_callback_read+0xbf>
c0008aaa:	85 c9                	test   ecx,ecx
c0008aac:	75 ea                	jne    c0008a98 <src_callback_read+0x144>
c0008aae:	89 f2                	mov    edx,esi
c0008ab0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab4:	85 c0                	test   eax,eax
c0008ab6:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abd:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ac0:	74 05                	je     c0008ac7 <src_callback_read+0x173>
c0008ac2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac5:	31 d2                	xor    edx,edx
c0008ac7:	83 c4 3c             	add    esp,0x3c
c0008aca:	89 d0                	mov    eax,edx
c0008acc:	5b                   	pop    ebx
c0008acd:	5e                   	pop    esi
c0008ace:	5f                   	pop    edi
c0008acf:	5d                   	pop    ebp
c0008ad0:	c3                   	ret    

c0008ad1 <src_set_ratio>:
c0008ad1:	57                   	push   edi
c0008ad2:	ba 02 00 00 00       	mov    edx,0x2
c0008ad7:	56                   	push   esi
c0008ad8:	53                   	push   ebx
c0008ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008add:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ae1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae5:	85 db                	test   ebx,ebx
c0008ae7:	74 4c                	je     c0008b35 <src_set_ratio+0x64>
c0008ae9:	ba 07 00 00 00       	mov    edx,0x7
c0008aee:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af2:	74 41                	je     c0008b35 <src_set_ratio+0x64>
c0008af4:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af8:	74 3b                	je     c0008b35 <src_set_ratio+0x64>
c0008afa:	68 00 00 70 3f       	push   0x3f700000
c0008aff:	6a 00                	push   0x0
c0008b01:	57                   	push   edi
c0008b02:	56                   	push   esi
c0008b03:	e8 ff 01 02 00       	call   c0028d07 <__ltdf2>
c0008b08:	83 c4 10             	add    esp,0x10
c0008b0b:	ba 06 00 00 00       	mov    edx,0x6
c0008b10:	85 c0                	test   eax,eax
c0008b12:	78 21                	js     c0008b35 <src_set_ratio+0x64>
c0008b14:	68 00 00 70 40       	push   0x40700000
c0008b19:	6a 00                	push   0x0
c0008b1b:	57                   	push   edi
c0008b1c:	56                   	push   esi
c0008b1d:	e8 c7 01 02 00       	call   c0028ce9 <__gtdf2>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	ba 06 00 00 00       	mov    edx,0x6
c0008b2a:	85 c0                	test   eax,eax
c0008b2c:	7f 07                	jg     c0008b35 <src_set_ratio+0x64>
c0008b2e:	89 33                	mov    DWORD PTR [ebx],esi
c0008b30:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b33:	31 d2                	xor    edx,edx
c0008b35:	5b                   	pop    ebx
c0008b36:	89 d0                	mov    eax,edx
c0008b38:	5e                   	pop    esi
c0008b39:	5f                   	pop    edi
c0008b3a:	c3                   	ret    

c0008b3b <src_get_channels>:
c0008b3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3f:	b8 02 00 00 00       	mov    eax,0x2
c0008b44:	85 d2                	test   edx,edx
c0008b46:	74 14                	je     c0008b5c <src_get_channels+0x21>
c0008b48:	b8 07 00 00 00       	mov    eax,0x7
c0008b4d:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b51:	74 09                	je     c0008b5c <src_get_channels+0x21>
c0008b53:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b57:	74 03                	je     c0008b5c <src_get_channels+0x21>
c0008b59:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5c:	c3                   	ret    

c0008b5d <src_reset>:
c0008b5d:	53                   	push   ebx
c0008b5e:	b8 02 00 00 00       	mov    eax,0x2
c0008b63:	83 ec 08             	sub    esp,0x8
c0008b66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b6a:	85 db                	test   ebx,ebx
c0008b6c:	74 36                	je     c0008ba4 <src_reset+0x47>
c0008b6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b71:	85 c0                	test   eax,eax
c0008b73:	74 09                	je     c0008b7e <src_reset+0x21>
c0008b75:	83 ec 0c             	sub    esp,0xc
c0008b78:	53                   	push   ebx
c0008b79:	ff d0                	call   eax
c0008b7b:	83 c4 10             	add    esp,0x10
c0008b7e:	31 c0                	xor    eax,eax
c0008b80:	31 d2                	xor    edx,edx
c0008b82:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b85:	89 03                	mov    DWORD PTR [ebx],eax
c0008b87:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b8a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8d:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b94:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b9b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba2:	31 c0                	xor    eax,eax
c0008ba4:	83 c4 08             	add    esp,0x8
c0008ba7:	5b                   	pop    ebx
c0008ba8:	c3                   	ret    

c0008ba9 <src_new>:
c0008ba9:	57                   	push   edi
c0008baa:	56                   	push   esi
c0008bab:	53                   	push   ebx
c0008bac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bb0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb4:	85 f6                	test   esi,esi
c0008bb6:	74 73                	je     c0008c2b <src_new+0x82>
c0008bb8:	85 ff                	test   edi,edi
c0008bba:	7f 08                	jg     c0008bc4 <src_new+0x1b>
c0008bbc:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc2:	eb 1e                	jmp    c0008be2 <src_new+0x39>
c0008bc4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bca:	50                   	push   eax
c0008bcb:	50                   	push   eax
c0008bcc:	6a 3c                	push   0x3c
c0008bce:	6a 01                	push   0x1
c0008bd0:	e8 1b 6d 00 00       	call   c000f8f0 <calloc>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	89 c3                	mov    ebx,eax
c0008bda:	85 c0                	test   eax,eax
c0008bdc:	75 10                	jne    c0008bee <src_new+0x45>
c0008bde:	85 f6                	test   esi,esi
c0008be0:	75 04                	jne    c0008be6 <src_new+0x3d>
c0008be2:	31 db                	xor    ebx,ebx
c0008be4:	eb 4b                	jmp    c0008c31 <src_new+0x88>
c0008be6:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bec:	eb 43                	jmp    c0008c31 <src_new+0x88>
c0008bee:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bf1:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfc:	e8 1d fb ff ff       	call   c000871e <psrc_set_converter>
c0008c01:	85 c0                	test   eax,eax
c0008c03:	74 18                	je     c0008c1d <src_new+0x74>
c0008c05:	85 f6                	test   esi,esi
c0008c07:	74 06                	je     c0008c0f <src_new+0x66>
c0008c09:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0f:	83 ec 0c             	sub    esp,0xc
c0008c12:	53                   	push   ebx
c0008c13:	31 db                	xor    ebx,ebx
c0008c15:	e8 b6 6c 00 00       	call   c000f8d0 <free>
c0008c1a:	83 c4 10             	add    esp,0x10
c0008c1d:	83 ec 0c             	sub    esp,0xc
c0008c20:	53                   	push   ebx
c0008c21:	e8 37 ff ff ff       	call   c0008b5d <src_reset>
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	eb 06                	jmp    c0008c31 <src_new+0x88>
c0008c2b:	85 ff                	test   edi,edi
c0008c2d:	7f 9b                	jg     c0008bca <src_new+0x21>
c0008c2f:	eb b1                	jmp    c0008be2 <src_new+0x39>
c0008c31:	89 d8                	mov    eax,ebx
c0008c33:	5b                   	pop    ebx
c0008c34:	5e                   	pop    esi
c0008c35:	5f                   	pop    edi
c0008c36:	c3                   	ret    

c0008c37 <src_callback_new>:
c0008c37:	56                   	push   esi
c0008c38:	53                   	push   ebx
c0008c39:	53                   	push   ebx
c0008c3a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c42:	85 f6                	test   esi,esi
c0008c44:	75 0e                	jne    c0008c54 <src_callback_new+0x1d>
c0008c46:	31 db                	xor    ebx,ebx
c0008c48:	85 c0                	test   eax,eax
c0008c4a:	74 47                	je     c0008c93 <src_callback_new+0x5c>
c0008c4c:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c52:	eb 3f                	jmp    c0008c93 <src_callback_new+0x5c>
c0008c54:	85 c0                	test   eax,eax
c0008c56:	74 06                	je     c0008c5e <src_callback_new+0x27>
c0008c58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5e:	51                   	push   ecx
c0008c5f:	50                   	push   eax
c0008c60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c64:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c68:	e8 3c ff ff ff       	call   c0008ba9 <src_new>
c0008c6d:	83 c4 10             	add    esp,0x10
c0008c70:	89 c3                	mov    ebx,eax
c0008c72:	85 c0                	test   eax,eax
c0008c74:	74 1d                	je     c0008c93 <src_callback_new+0x5c>
c0008c76:	83 ec 0c             	sub    esp,0xc
c0008c79:	50                   	push   eax
c0008c7a:	e8 de fe ff ff       	call   c0008b5d <src_reset>
c0008c7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c83:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c8a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c90:	83 c4 10             	add    esp,0x10
c0008c93:	89 d8                	mov    eax,ebx
c0008c95:	5a                   	pop    edx
c0008c96:	5b                   	pop    ebx
c0008c97:	5e                   	pop    esi
c0008c98:	c3                   	ret    

c0008c99 <src_get_name>:
c0008c99:	53                   	push   ebx
c0008c9a:	83 ec 14             	sub    esp,0x14
c0008c9d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ca1:	53                   	push   ebx
c0008ca2:	e8 d0 4f 00 00       	call   c000dc77 <sinc_get_name>
c0008ca7:	83 c4 10             	add    esp,0x10
c0008caa:	85 c0                	test   eax,eax
c0008cac:	75 1d                	jne    c0008ccb <src_get_name+0x32>
c0008cae:	83 ec 0c             	sub    esp,0xc
c0008cb1:	53                   	push   ebx
c0008cb2:	e8 80 57 00 00       	call   c000e437 <zoh_get_name>
c0008cb7:	83 c4 10             	add    esp,0x10
c0008cba:	85 c0                	test   eax,eax
c0008cbc:	75 0d                	jne    c0008ccb <src_get_name+0x32>
c0008cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc2:	83 c4 08             	add    esp,0x8
c0008cc5:	5b                   	pop    ebx
c0008cc6:	e9 74 0b 00 00       	jmp    c000983f <linear_get_name>
c0008ccb:	83 c4 08             	add    esp,0x8
c0008cce:	5b                   	pop    ebx
c0008ccf:	c3                   	ret    

c0008cd0 <src_get_description>:
c0008cd0:	53                   	push   ebx
c0008cd1:	83 ec 14             	sub    esp,0x14
c0008cd4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd8:	53                   	push   ebx
c0008cd9:	e8 ac 4f 00 00       	call   c000dc8a <sinc_get_description>
c0008cde:	83 c4 10             	add    esp,0x10
c0008ce1:	85 c0                	test   eax,eax
c0008ce3:	75 1d                	jne    c0008d02 <src_get_description+0x32>
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	53                   	push   ebx
c0008ce9:	e8 58 57 00 00       	call   c000e446 <zoh_get_description>
c0008cee:	83 c4 10             	add    esp,0x10
c0008cf1:	85 c0                	test   eax,eax
c0008cf3:	75 0d                	jne    c0008d02 <src_get_description+0x32>
c0008cf5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf9:	83 c4 08             	add    esp,0x8
c0008cfc:	5b                   	pop    ebx
c0008cfd:	e9 4c 0b 00 00       	jmp    c000984e <linear_get_description>
c0008d02:	83 c4 08             	add    esp,0x8
c0008d05:	5b                   	pop    ebx
c0008d06:	c3                   	ret    

c0008d07 <src_get_version>:
c0008d07:	b8 40 a2 02 c0       	mov    eax,0xc002a240
c0008d0c:	c3                   	ret    

c0008d0d <src_is_valid_ratio>:
c0008d0d:	83 ec 1c             	sub    esp,0x1c
c0008d10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d20:	68 00 00 70 3f       	push   0x3f700000
c0008d25:	6a 00                	push   0x0
c0008d27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2f:	e8 d3 ff 01 00       	call   c0028d07 <__ltdf2>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	31 d2                	xor    edx,edx
c0008d39:	85 c0                	test   eax,eax
c0008d3b:	78 1e                	js     c0008d5b <src_is_valid_ratio+0x4e>
c0008d3d:	68 00 00 70 40       	push   0x40700000
c0008d42:	6a 00                	push   0x0
c0008d44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4c:	e8 98 ff 01 00       	call   c0028ce9 <__gtdf2>
c0008d51:	31 d2                	xor    edx,edx
c0008d53:	83 c4 10             	add    esp,0x10
c0008d56:	85 c0                	test   eax,eax
c0008d58:	0f 9e c2             	setle  dl
c0008d5b:	89 d0                	mov    eax,edx
c0008d5d:	83 c4 1c             	add    esp,0x1c
c0008d60:	c3                   	ret    

c0008d61 <src_error>:
c0008d61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d65:	31 c0                	xor    eax,eax
c0008d67:	85 d2                	test   edx,edx
c0008d69:	74 03                	je     c0008d6e <src_error+0xd>
c0008d6b:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6e:	c3                   	ret    

c0008d6f <src_strerror>:
c0008d6f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d73:	31 c0                	xor    eax,eax
c0008d75:	83 fa 17             	cmp    edx,0x17
c0008d78:	77 07                	ja     c0008d81 <src_strerror+0x12>
c0008d7a:	8b 04 95 a0 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5960]
c0008d81:	c3                   	ret    

c0008d82 <src_simple>:
c0008d82:	56                   	push   esi
c0008d83:	53                   	push   ebx
c0008d84:	83 ec 18             	sub    esp,0x18
c0008d87:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8f:	50                   	push   eax
c0008d90:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d98:	e8 0c fe ff ff       	call   c0008ba9 <src_new>
c0008d9d:	83 c4 10             	add    esp,0x10
c0008da0:	85 c0                	test   eax,eax
c0008da2:	75 06                	jne    c0008daa <src_simple+0x28>
c0008da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da8:	eb 25                	jmp    c0008dcf <src_simple+0x4d>
c0008daa:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008db1:	89 c3                	mov    ebx,eax
c0008db3:	50                   	push   eax
c0008db4:	50                   	push   eax
c0008db5:	56                   	push   esi
c0008db6:	53                   	push   ebx
c0008db7:	e8 e2 f9 ff ff       	call   c000879e <src_process>
c0008dbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc3:	e8 9a f9 ff ff       	call   c0008762 <src_delete>
c0008dc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dcc:	83 c4 10             	add    esp,0x10
c0008dcf:	83 c4 14             	add    esp,0x14
c0008dd2:	5b                   	pop    ebx
c0008dd3:	5e                   	pop    esi
c0008dd4:	c3                   	ret    

c0008dd5 <src_short_to_float_array>:
c0008dd5:	53                   	push   ebx
c0008dd6:	83 ec 18             	sub    esp,0x18
c0008dd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddd:	85 db                	test   ebx,ebx
c0008ddf:	74 54                	je     c0008e35 <src_short_to_float_array+0x60>
c0008de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de5:	4b                   	dec    ebx
c0008de6:	83 ec 0c             	sub    esp,0xc
c0008de9:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008ded:	50                   	push   eax
c0008dee:	e8 a8 fc 01 00       	call   c0028a9b <__floatsidf>
c0008df3:	83 c4 10             	add    esp,0x10
c0008df6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dfa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfe:	68 00 00 00 3f       	push   0x3f000000
c0008e03:	6a 00                	push   0x0
c0008e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0d:	e8 26 f6 01 00       	call   c0028438 <__muldf3>
c0008e12:	59                   	pop    ecx
c0008e13:	59                   	pop    ecx
c0008e14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e18:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e24:	e8 e2 fe 01 00       	call   c0028d0b <__truncdfsf2>
c0008e29:	83 c4 10             	add    esp,0x10
c0008e2c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e30:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e33:	eb a8                	jmp    c0008ddd <src_short_to_float_array+0x8>
c0008e35:	83 c4 18             	add    esp,0x18
c0008e38:	5b                   	pop    ebx
c0008e39:	c3                   	ret    

c0008e3a <src_float_to_short_array>:
c0008e3a:	56                   	push   esi
c0008e3b:	53                   	push   ebx
c0008e3c:	83 ec 14             	sub    esp,0x14
c0008e3f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e43:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e47:	85 db                	test   ebx,ebx
c0008e49:	0f 84 a4 00 00 00    	je     c0008ef3 <src_float_to_short_array+0xb9>
c0008e4f:	83 ec 0c             	sub    esp,0xc
c0008e52:	4b                   	dec    ebx
c0008e53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e57:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e5a:	e8 d0 ff 01 00       	call   c0028e2f <__extendsfdf2>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e6a:	68 00 00 e0 41       	push   0x41e00000
c0008e6f:	6a 00                	push   0x0
c0008e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e79:	e8 ba f5 01 00       	call   c0028438 <__muldf3>
c0008e7e:	83 c4 10             	add    esp,0x10
c0008e81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e89:	68 ff ff df 41       	push   0x41dfffff
c0008e8e:	68 00 00 c0 ff       	push   0xffc00000
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 65 fe 01 00       	call   c0028d05 <__gedf2>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	85 c0                	test   eax,eax
c0008ea5:	78 08                	js     c0008eaf <src_float_to_short_array+0x75>
c0008ea7:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ead:	eb 98                	jmp    c0008e47 <src_float_to_short_array+0xd>
c0008eaf:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb4:	6a 00                	push   0x0
c0008eb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebe:	e8 46 fe 01 00       	call   c0028d09 <__ledf2>
c0008ec3:	83 c4 10             	add    esp,0x10
c0008ec6:	85 c0                	test   eax,eax
c0008ec8:	7f 0b                	jg     c0008ed5 <src_float_to_short_array+0x9b>
c0008eca:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ed0:	e9 72 ff ff ff       	jmp    c0008e47 <src_float_to_short_array+0xd>
c0008ed5:	50                   	push   eax
c0008ed6:	50                   	push   eax
c0008ed7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edf:	e8 dc ff 01 00       	call   c0028ec0 <lrint>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	c1 f8 10             	sar    eax,0x10
c0008eea:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eee:	e9 54 ff ff ff       	jmp    c0008e47 <src_float_to_short_array+0xd>
c0008ef3:	83 c4 14             	add    esp,0x14
c0008ef6:	5b                   	pop    ebx
c0008ef7:	5e                   	pop    esi
c0008ef8:	c3                   	ret    

c0008ef9 <src_int_to_float_array>:
c0008ef9:	53                   	push   ebx
c0008efa:	83 ec 18             	sub    esp,0x18
c0008efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f01:	85 db                	test   ebx,ebx
c0008f03:	74 52                	je     c0008f57 <src_int_to_float_array+0x5e>
c0008f05:	83 ec 0c             	sub    esp,0xc
c0008f08:	4b                   	dec    ebx
c0008f09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f10:	e8 86 fb 01 00       	call   c0028a9b <__floatsidf>
c0008f15:	83 c4 10             	add    esp,0x10
c0008f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f20:	68 00 00 00 3e       	push   0x3e000000
c0008f25:	6a 00                	push   0x0
c0008f27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2f:	e8 04 f5 01 00       	call   c0028438 <__muldf3>
c0008f34:	59                   	pop    ecx
c0008f35:	59                   	pop    ecx
c0008f36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f3a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f46:	e8 c0 fd 01 00       	call   c0028d0b <__truncdfsf2>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f52:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f55:	eb aa                	jmp    c0008f01 <src_int_to_float_array+0x8>
c0008f57:	83 c4 18             	add    esp,0x18
c0008f5a:	5b                   	pop    ebx
c0008f5b:	c3                   	ret    

c0008f5c <src_float_to_int_array>:
c0008f5c:	56                   	push   esi
c0008f5d:	53                   	push   ebx
c0008f5e:	83 ec 14             	sub    esp,0x14
c0008f61:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f65:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f69:	85 db                	test   ebx,ebx
c0008f6b:	0f 84 a2 00 00 00    	je     c0009013 <src_float_to_int_array+0xb7>
c0008f71:	83 ec 0c             	sub    esp,0xc
c0008f74:	4b                   	dec    ebx
c0008f75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f79:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7c:	e8 ae fe 01 00       	call   c0028e2f <__extendsfdf2>
c0008f81:	83 c4 10             	add    esp,0x10
c0008f84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8c:	68 00 00 e0 41       	push   0x41e00000
c0008f91:	6a 00                	push   0x0
c0008f93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9b:	e8 98 f4 01 00       	call   c0028438 <__muldf3>
c0008fa0:	83 c4 10             	add    esp,0x10
c0008fa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fab:	68 ff ff df 41       	push   0x41dfffff
c0008fb0:	68 00 00 c0 ff       	push   0xffc00000
c0008fb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbd:	e8 43 fd 01 00       	call   c0028d05 <__gedf2>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	85 c0                	test   eax,eax
c0008fc7:	78 09                	js     c0008fd2 <src_float_to_int_array+0x76>
c0008fc9:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fd0:	eb 97                	jmp    c0008f69 <src_float_to_int_array+0xd>
c0008fd2:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd7:	6a 00                	push   0x0
c0008fd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe1:	e8 23 fd 01 00       	call   c0028d09 <__ledf2>
c0008fe6:	83 c4 10             	add    esp,0x10
c0008fe9:	85 c0                	test   eax,eax
c0008feb:	7f 0c                	jg     c0008ff9 <src_float_to_int_array+0x9d>
c0008fed:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff4:	e9 70 ff ff ff       	jmp    c0008f69 <src_float_to_int_array+0xd>
c0008ff9:	50                   	push   eax
c0008ffa:	50                   	push   eax
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009003:	e8 b8 fe 01 00       	call   c0028ec0 <lrint>
c0009008:	83 c4 10             	add    esp,0x10
c000900b:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900e:	e9 56 ff ff ff       	jmp    c0008f69 <src_float_to_int_array+0xd>
c0009013:	83 c4 14             	add    esp,0x14
c0009016:	5b                   	pop    ebx
c0009017:	5e                   	pop    esi
c0009018:	c3                   	ret    

c0009019 <linear_vari_process>:
c0009019:	55                   	push   ebp
c000901a:	31 d2                	xor    edx,edx
c000901c:	57                   	push   edi
c000901d:	56                   	push   esi
c000901e:	53                   	push   ebx
c000901f:	83 ec 3c             	sub    esp,0x3c
c0009022:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009026:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000902a:	0f 8e d3 07 00 00    	jle    c0009803 <linear_vari_process+0x7ea>
c0009030:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009034:	ba 05 00 00 00       	mov    edx,0x5
c0009039:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903c:	85 db                	test   ebx,ebx
c000903e:	0f 84 bf 07 00 00    	je     c0009803 <linear_vari_process+0x7ea>
c0009044:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009047:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000904b:	74 19                	je     c0009066 <linear_vari_process+0x4d>
c000904d:	31 d2                	xor    edx,edx
c000904f:	39 c2                	cmp    edx,eax
c0009051:	7d 0c                	jge    c000905f <linear_vari_process+0x46>
c0009053:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009055:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009058:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905c:	42                   	inc    edx
c000905d:	eb f0                	jmp    c000904f <linear_vari_process+0x36>
c000905f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009066:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009069:	0f af d0             	imul   edx,eax
c000906c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906f:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009073:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000907a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009084:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009088:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000908b:	8b 00                	mov    eax,DWORD PTR [eax]
c000908d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009095:	68 00 00 70 3f       	push   0x3f700000
c000909a:	6a 00                	push   0x0
c000909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a4:	e8 5e fc 01 00       	call   c0028d07 <__ltdf2>
c00090a9:	83 c4 10             	add    esp,0x10
c00090ac:	ba 16 00 00 00       	mov    edx,0x16
c00090b1:	85 c0                	test   eax,eax
c00090b3:	0f 88 4a 07 00 00    	js     c0009803 <linear_vari_process+0x7ea>
c00090b9:	68 00 00 70 40       	push   0x40700000
c00090be:	6a 00                	push   0x0
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c8:	e8 1c fc 01 00       	call   c0028ce9 <__gtdf2>
c00090cd:	83 c4 10             	add    esp,0x10
c00090d0:	ba 16 00 00 00       	mov    edx,0x16
c00090d5:	85 c0                	test   eax,eax
c00090d7:	0f 8f 26 07 00 00    	jg     c0009803 <linear_vari_process+0x7ea>
c00090dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090e1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ef:	68 00 00 f0 3f       	push   0x3ff00000
c00090f4:	6a 00                	push   0x0
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fe:	e8 04 fc 01 00       	call   c0028d07 <__ltdf2>
c0009103:	83 c4 10             	add    esp,0x10
c0009106:	85 c0                	test   eax,eax
c0009108:	0f 89 89 02 00 00    	jns    c0009397 <linear_vari_process+0x37e>
c000910e:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009111:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009114:	0f 8d 7d 02 00 00    	jge    c0009397 <linear_vari_process+0x37e>
c000911a:	83 ec 0c             	sub    esp,0xc
c000911d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009120:	e8 76 f9 01 00       	call   c0028a9b <__floatsidf>
c0009125:	83 c4 10             	add    esp,0x10
c0009128:	89 04 24             	mov    DWORD PTR [esp],eax
c000912b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912f:	68 00 00 f0 3f       	push   0x3ff00000
c0009134:	6a 00                	push   0x0
c0009136:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913e:	e8 78 ec 01 00       	call   c0027dbb <__adddf3>
c0009143:	83 c4 10             	add    esp,0x10
c0009146:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914e:	52                   	push   edx
c000914f:	50                   	push   eax
c0009150:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009154:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009158:	e8 db f2 01 00       	call   c0028438 <__muldf3>
c000915d:	5d                   	pop    ebp
c000915e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009162:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009166:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009169:	e8 2d f9 01 00       	call   c0028a9b <__floatsidf>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009175:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009179:	52                   	push   edx
c000917a:	50                   	push   eax
c000917b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009183:	e8 33 ec 01 00       	call   c0027dbb <__adddf3>
c0009188:	59                   	pop    ecx
c0009189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009191:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009194:	e8 02 f9 01 00       	call   c0028a9b <__floatsidf>
c0009199:	83 c4 10             	add    esp,0x10
c000919c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00091a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ae:	e8 52 fb 01 00       	call   c0028d05 <__gedf2>
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	85 c0                	test   eax,eax
c00091b8:	0f 89 d9 01 00 00    	jns    c0009397 <linear_vari_process+0x37e>
c00091be:	85 ff                	test   edi,edi
c00091c0:	0f 8e f4 00 00 00    	jle    c00092ba <linear_vari_process+0x2a1>
c00091c6:	83 ec 10             	sub    esp,0x10
c00091c9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091cc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d6:	ff 30                	push   DWORD PTR [eax]
c00091d8:	e8 2f f2 01 00       	call   c002840c <__subdf3>
c00091dd:	83 c4 18             	add    esp,0x18
c00091e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	e8 b1 fc 01 00       	call   c0028ea0 <fabs>
c00091ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f7:	83 c4 10             	add    esp,0x10
c00091fa:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091ff:	68 23 42 92 0c       	push   0xc924223
c0009204:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009208:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920c:	e8 d8 fa 01 00       	call   c0028ce9 <__gtdf2>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	85 c0                	test   eax,eax
c0009216:	0f 8e 9e 00 00 00    	jle    c00092ba <linear_vari_process+0x2a1>
c000921c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009220:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009223:	8b 00                	mov    eax,DWORD PTR [eax]
c0009225:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009229:	89 04 24             	mov    DWORD PTR [esp],eax
c000922c:	52                   	push   edx
c000922d:	50                   	push   eax
c000922e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009231:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009234:	e8 d3 f1 01 00       	call   c002840c <__subdf3>
c0009239:	59                   	pop    ecx
c000923a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009242:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009245:	e8 51 f8 01 00       	call   c0028a9b <__floatsidf>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009251:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009255:	52                   	push   edx
c0009256:	50                   	push   eax
c0009257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925f:	e8 d4 f1 01 00       	call   c0028438 <__muldf3>
c0009264:	5f                   	pop    edi
c0009265:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009269:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009270:	e8 26 f8 01 00       	call   c0028a9b <__floatsidf>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009280:	52                   	push   edx
c0009281:	50                   	push   eax
c0009282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000928a:	e8 8d f4 01 00       	call   c002871c <__divdf3>
c000928f:	83 c4 10             	add    esp,0x10
c0009292:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009296:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000929a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092aa:	e8 0c eb 01 00       	call   c0027dbb <__adddf3>
c00092af:	83 c4 10             	add    esp,0x10
c00092b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092ba:	31 ff                	xor    edi,edi
c00092bc:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bf:	0f 8e 9d 00 00 00    	jle    c0009362 <linear_vari_process+0x349>
c00092c5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c8:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092cc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cf:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d6:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d8:	52                   	push   edx
c00092d9:	52                   	push   edx
c00092da:	55                   	push   ebp
c00092db:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092de:	47                   	inc    edi
c00092df:	e8 6c e4 01 00       	call   c0027750 <__subsf3>
c00092e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e7:	e8 43 fb 01 00       	call   c0028e2f <__extendsfdf2>
c00092ec:	83 c4 10             	add    esp,0x10
c00092ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009303:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009307:	e8 2c f1 01 00       	call   c0028438 <__muldf3>
c000930c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009313:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009317:	e8 13 fb 01 00       	call   c0028e2f <__extendsfdf2>
c000931c:	83 c4 10             	add    esp,0x10
c000931f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009323:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009327:	52                   	push   edx
c0009328:	50                   	push   eax
c0009329:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009331:	e8 85 ea 01 00       	call   c0027dbb <__adddf3>
c0009336:	59                   	pop    ecx
c0009337:	5d                   	pop    ebp
c0009338:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009340:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009344:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009348:	e8 be f9 01 00       	call   c0028d0b <__truncdfsf2>
c000934d:	83 c4 10             	add    esp,0x10
c0009350:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009353:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009357:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000935a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935d:	e9 5a ff ff ff       	jmp    c00092bc <linear_vari_process+0x2a3>
c0009362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000936a:	68 00 00 f0 3f       	push   0x3ff00000
c000936f:	6a 00                	push   0x0
c0009371:	e8 a6 f3 01 00       	call   c002871c <__divdf3>
c0009376:	83 c4 10             	add    esp,0x10
c0009379:	89 04 24             	mov    DWORD PTR [esp],eax
c000937c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009380:	52                   	push   edx
c0009381:	50                   	push   eax
c0009382:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009386:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000938a:	e8 2c ea 01 00       	call   c0027dbb <__adddf3>
c000938f:	83 c4 10             	add    esp,0x10
c0009392:	e9 50 fd ff ff       	jmp    c00090e7 <linear_vari_process+0xce>
c0009397:	50                   	push   eax
c0009398:	50                   	push   eax
c0009399:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a1:	e8 1a fb 01 00       	call   c0028ec0 <lrint>
c00093a6:	83 ec 0c             	sub    esp,0xc
c00093a9:	50                   	push   eax
c00093aa:	e8 ec f6 01 00       	call   c0028a9b <__floatsidf>
c00093af:	83 c4 10             	add    esp,0x10
c00093b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ba:	52                   	push   edx
c00093bb:	50                   	push   eax
c00093bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c4:	e8 43 f0 01 00       	call   c002840c <__subdf3>
c00093c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093d1:	83 c4 20             	add    esp,0x20
c00093d4:	6a 00                	push   0x0
c00093d6:	6a 00                	push   0x0
c00093d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093e0:	e8 22 f9 01 00       	call   c0028d07 <__ltdf2>
c00093e5:	83 c4 10             	add    esp,0x10
c00093e8:	85 c0                	test   eax,eax
c00093ea:	79 1e                	jns    c000940a <linear_vari_process+0x3f1>
c00093ec:	68 00 00 f0 3f       	push   0x3ff00000
c00093f1:	6a 00                	push   0x0
c00093f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fb:	e8 bb e9 01 00       	call   c0027dbb <__adddf3>
c0009400:	83 c4 10             	add    esp,0x10
c0009403:	89 04 24             	mov    DWORD PTR [esp],eax
c0009406:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000940a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940d:	83 ec 10             	sub    esp,0x10
c0009410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009418:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009420:	e8 e7 ef 01 00       	call   c002840c <__subdf3>
c0009425:	83 c4 18             	add    esp,0x18
c0009428:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009430:	52                   	push   edx
c0009431:	50                   	push   eax
c0009432:	e8 89 fa 01 00       	call   c0028ec0 <lrint>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	0f af f8             	imul   edi,eax
c000943d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009440:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009443:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009446:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009449:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944c:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009450:	0f 8d 13 03 00 00    	jge    c0009769 <linear_vari_process+0x750>
c0009456:	83 ec 0c             	sub    esp,0xc
c0009459:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945c:	e8 3a f6 01 00       	call   c0028a9b <__floatsidf>
c0009461:	83 c4 10             	add    esp,0x10
c0009464:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009470:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009478:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947c:	e8 b7 ef 01 00       	call   c0028438 <__muldf3>
c0009481:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009484:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009488:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948c:	e8 0a f6 01 00       	call   c0028a9b <__floatsidf>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009498:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949c:	52                   	push   edx
c000949d:	50                   	push   eax
c000949e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a6:	e8 10 e9 01 00       	call   c0027dbb <__adddf3>
c00094ab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b6:	e8 e0 f5 01 00       	call   c0028a9b <__floatsidf>
c00094bb:	83 c4 10             	add    esp,0x10
c00094be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c6:	52                   	push   edx
c00094c7:	50                   	push   eax
c00094c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d0:	e8 32 f8 01 00       	call   c0028d07 <__ltdf2>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	85 c0                	test   eax,eax
c00094da:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094de:	0f 89 85 02 00 00    	jns    c0009769 <linear_vari_process+0x750>
c00094e4:	85 c9                	test   ecx,ecx
c00094e6:	0f 8e f5 00 00 00    	jle    c00095e1 <linear_vari_process+0x5c8>
c00094ec:	83 ec 10             	sub    esp,0x10
c00094ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fc:	ff 30                	push   DWORD PTR [eax]
c00094fe:	e8 09 ef 01 00       	call   c002840c <__subdf3>
c0009503:	83 c4 18             	add    esp,0x18
c0009506:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000950a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950e:	52                   	push   edx
c000950f:	50                   	push   eax
c0009510:	e8 8b f9 01 00       	call   c0028ea0 <fabs>
c0009515:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009519:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951d:	83 c4 10             	add    esp,0x10
c0009520:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009525:	68 23 42 92 0c       	push   0xc924223
c000952a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009532:	e8 b2 f7 01 00       	call   c0028ce9 <__gtdf2>
c0009537:	83 c4 10             	add    esp,0x10
c000953a:	85 c0                	test   eax,eax
c000953c:	0f 8e 9f 00 00 00    	jle    c00095e1 <linear_vari_process+0x5c8>
c0009542:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009546:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009549:	8b 00                	mov    eax,DWORD PTR [eax]
c000954b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009553:	52                   	push   edx
c0009554:	50                   	push   eax
c0009555:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009558:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000955b:	e8 ac ee 01 00       	call   c002840c <__subdf3>
c0009560:	5f                   	pop    edi
c0009561:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009565:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009569:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956c:	e8 2a f5 01 00       	call   c0028a9b <__floatsidf>
c0009571:	83 c4 10             	add    esp,0x10
c0009574:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957c:	52                   	push   edx
c000957d:	50                   	push   eax
c000957e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009586:	e8 ad ee 01 00       	call   c0028438 <__muldf3>
c000958b:	5d                   	pop    ebp
c000958c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009590:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009594:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009597:	e8 ff f4 01 00       	call   c0028a9b <__floatsidf>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a7:	52                   	push   edx
c00095a8:	50                   	push   eax
c00095a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095b1:	e8 66 f1 01 00       	call   c002871c <__divdf3>
c00095b6:	83 c4 10             	add    esp,0x10
c00095b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095d1:	e8 e5 e7 01 00       	call   c0027dbb <__adddf3>
c00095d6:	83 c4 10             	add    esp,0x10
c00095d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095e1:	31 ff                	xor    edi,edi
c00095e3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e6:	39 f8                	cmp    eax,edi
c00095e8:	0f 8e ac 00 00 00    	jle    c000969a <linear_vari_process+0x681>
c00095ee:	8b 16                	mov    edx,DWORD PTR [esi]
c00095f0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f3:	29 c1                	sub    ecx,eax
c00095f5:	89 c8                	mov    eax,ecx
c00095f7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095fa:	01 f8                	add    eax,edi
c00095fc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009600:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009603:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000960a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960d:	51                   	push   ecx
c000960e:	01 f8                	add    eax,edi
c0009610:	51                   	push   ecx
c0009611:	47                   	inc    edi
c0009612:	55                   	push   ebp
c0009613:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009616:	e8 35 e1 01 00       	call   c0027750 <__subsf3>
c000961b:	89 04 24             	mov    DWORD PTR [esp],eax
c000961e:	e8 0c f8 01 00       	call   c0028e2f <__extendsfdf2>
c0009623:	83 c4 10             	add    esp,0x10
c0009626:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000962a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009632:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009636:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963e:	e8 f5 ed 01 00       	call   c0028438 <__muldf3>
c0009643:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009646:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000964a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964e:	e8 dc f7 01 00       	call   c0028e2f <__extendsfdf2>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000965a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965e:	52                   	push   edx
c000965f:	50                   	push   eax
c0009660:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009664:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009668:	e8 4e e7 01 00       	call   c0027dbb <__adddf3>
c000966d:	5d                   	pop    ebp
c000966e:	59                   	pop    ecx
c000966f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009673:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009677:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967f:	e8 87 f6 01 00       	call   c0028d0b <__truncdfsf2>
c0009684:	83 c4 10             	add    esp,0x10
c0009687:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000968b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968f:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009692:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009695:	e9 49 ff ff ff       	jmp    c00095e3 <linear_vari_process+0x5ca>
c000969a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a2:	68 00 00 f0 3f       	push   0x3ff00000
c00096a7:	6a 00                	push   0x0
c00096a9:	e8 6e f0 01 00       	call   c002871c <__divdf3>
c00096ae:	83 c4 10             	add    esp,0x10
c00096b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b9:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bd:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c9:	e8 ed e6 01 00       	call   c0027dbb <__adddf3>
c00096ce:	59                   	pop    ecx
c00096cf:	5f                   	pop    edi
c00096d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e0:	e8 db f7 01 00       	call   c0028ec0 <lrint>
c00096e5:	83 ec 0c             	sub    esp,0xc
c00096e8:	50                   	push   eax
c00096e9:	e8 ad f3 01 00       	call   c0028a9b <__floatsidf>
c00096ee:	83 c4 10             	add    esp,0x10
c00096f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f9:	52                   	push   edx
c00096fa:	50                   	push   eax
c00096fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009703:	e8 04 ed 01 00       	call   c002840c <__subdf3>
c0009708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009710:	83 c4 20             	add    esp,0x20
c0009713:	6a 00                	push   0x0
c0009715:	6a 00                	push   0x0
c0009717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971f:	e8 e3 f5 01 00       	call   c0028d07 <__ltdf2>
c0009724:	83 c4 10             	add    esp,0x10
c0009727:	85 c0                	test   eax,eax
c0009729:	79 1e                	jns    c0009749 <linear_vari_process+0x730>
c000972b:	68 00 00 f0 3f       	push   0x3ff00000
c0009730:	6a 00                	push   0x0
c0009732:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009736:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000973a:	e8 7c e6 01 00       	call   c0027dbb <__adddf3>
c000973f:	83 c4 10             	add    esp,0x10
c0009742:	89 04 24             	mov    DWORD PTR [esp],eax
c0009745:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009749:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974c:	83 ec 10             	sub    esp,0x10
c000974f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009753:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009757:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975f:	e8 a8 ec 01 00       	call   c002840c <__subdf3>
c0009764:	e9 bc fc ff ff       	jmp    c0009425 <linear_vari_process+0x40c>
c0009769:	39 fd                	cmp    ebp,edi
c000976b:	7d 38                	jge    c00097a5 <linear_vari_process+0x78c>
c000976d:	83 ec 0c             	sub    esp,0xc
c0009770:	89 f8                	mov    eax,edi
c0009772:	29 e8                	sub    eax,ebp
c0009774:	99                   	cdq    
c0009775:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009778:	50                   	push   eax
c0009779:	e8 1d f3 01 00       	call   c0028a9b <__floatsidf>
c000977e:	83 c4 10             	add    esp,0x10
c0009781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009785:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009789:	52                   	push   edx
c000978a:	50                   	push   eax
c000978b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009793:	e8 23 e6 01 00       	call   c0027dbb <__adddf3>
c0009798:	83 c4 10             	add    esp,0x10
c000979b:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979e:	89 04 24             	mov    DWORD PTR [esp],eax
c00097a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097b0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b3:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b9:	85 c0                	test   eax,eax
c00097bb:	7f 29                	jg     c00097e6 <linear_vari_process+0x7cd>
c00097bd:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c9:	89 01                	mov    DWORD PTR [ecx],eax
c00097cb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097db:	99                   	cdq    
c00097dc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e4:	eb 1d                	jmp    c0009803 <linear_vari_process+0x7ea>
c00097e6:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e9:	31 d2                	xor    edx,edx
c00097eb:	29 c8                	sub    eax,ecx
c00097ed:	c1 e0 02             	shl    eax,0x2
c00097f0:	39 d1                	cmp    ecx,edx
c00097f2:	7e c9                	jle    c00097bd <linear_vari_process+0x7a4>
c00097f4:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f6:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f9:	83 c0 04             	add    eax,0x4
c00097fc:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009800:	42                   	inc    edx
c0009801:	eb ed                	jmp    c00097f0 <linear_vari_process+0x7d7>
c0009803:	83 c4 3c             	add    esp,0x3c
c0009806:	89 d0                	mov    eax,edx
c0009808:	5b                   	pop    ebx
c0009809:	5e                   	pop    esi
c000980a:	5f                   	pop    edi
c000980b:	5d                   	pop    ebp
c000980c:	c3                   	ret    

c000980d <linear_reset>:
c000980d:	83 ec 0c             	sub    esp,0xc
c0009810:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009814:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009817:	85 c0                	test   eax,eax
c0009819:	74 20                	je     c000983b <linear_reset+0x2e>
c000981b:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981e:	83 c0 1c             	add    eax,0x1c
c0009821:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009824:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000982b:	c1 e2 02             	shl    edx,0x2
c000982e:	51                   	push   ecx
c000982f:	52                   	push   edx
c0009830:	6a 00                	push   0x0
c0009832:	50                   	push   eax
c0009833:	e8 34 6f ff ff       	call   c000076c <memset>
c0009838:	83 c4 10             	add    esp,0x10
c000983b:	83 c4 0c             	add    esp,0xc
c000983e:	c3                   	ret    

c000983f <linear_get_name>:
c000983f:	31 c0                	xor    eax,eax
c0009841:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009846:	75 05                	jne    c000984d <linear_get_name+0xe>
c0009848:	b8 00 a7 02 c0       	mov    eax,0xc002a700
c000984d:	c3                   	ret    

c000984e <linear_get_description>:
c000984e:	31 c0                	xor    eax,eax
c0009850:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009855:	75 05                	jne    c000985c <linear_get_description+0xe>
c0009857:	b8 14 a7 02 c0       	mov    eax,0xc002a714
c000985c:	c3                   	ret    

c000985d <linear_set_converter>:
c000985d:	53                   	push   ebx
c000985e:	b8 0a 00 00 00       	mov    eax,0xa
c0009863:	83 ec 08             	sub    esp,0x8
c0009866:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000986a:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986f:	75 6e                	jne    c00098df <linear_set_converter+0x82>
c0009871:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009874:	85 c0                	test   eax,eax
c0009876:	74 13                	je     c000988b <linear_set_converter+0x2e>
c0009878:	83 ec 0c             	sub    esp,0xc
c000987b:	50                   	push   eax
c000987c:	e8 4f 60 00 00       	call   c000f8d0 <free>
c0009881:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009888:	83 c4 10             	add    esp,0x10
c000988b:	50                   	push   eax
c000988c:	50                   	push   eax
c000988d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009890:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009897:	50                   	push   eax
c0009898:	6a 01                	push   0x1
c000989a:	e8 51 60 00 00       	call   c000f8f0 <calloc>
c000989f:	83 c4 10             	add    esp,0x10
c00098a2:	89 c2                	mov    edx,eax
c00098a4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a7:	85 d2                	test   edx,edx
c00098a9:	b8 01 00 00 00       	mov    eax,0x1
c00098ae:	74 2f                	je     c00098df <linear_set_converter+0x82>
c00098b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b3:	83 ec 0c             	sub    esp,0xc
c00098b6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b9:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bf:	c7 43 24 19 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009019
c00098c6:	c7 43 20 19 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009019
c00098cd:	c7 43 28 0d 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980d
c00098d4:	53                   	push   ebx
c00098d5:	e8 33 ff ff ff       	call   c000980d <linear_reset>
c00098da:	83 c4 10             	add    esp,0x10
c00098dd:	31 c0                	xor    eax,eax
c00098df:	83 c4 08             	add    esp,0x8
c00098e2:	5b                   	pop    ebx
c00098e3:	c3                   	ret    

c00098e4 <int_to_fp>:
c00098e4:	c1 e0 0c             	shl    eax,0xc
c00098e7:	c3                   	ret    

c00098e8 <fp_to_int>:
c00098e8:	c1 f8 0c             	sar    eax,0xc
c00098eb:	c3                   	ret    

c00098ec <fp_fraction_part>:
c00098ec:	25 ff 0f 00 00       	and    eax,0xfff
c00098f1:	c3                   	ret    

c00098f2 <fp_to_double>:
c00098f2:	83 ec 1c             	sub    esp,0x1c
c00098f5:	e8 f2 ff ff ff       	call   c00098ec <fp_fraction_part>
c00098fa:	83 ec 0c             	sub    esp,0xc
c00098fd:	50                   	push   eax
c00098fe:	e8 98 f1 01 00       	call   c0028a9b <__floatsidf>
c0009903:	83 c4 10             	add    esp,0x10
c0009906:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000990a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990e:	68 00 00 30 3f       	push   0x3f300000
c0009913:	6a 00                	push   0x0
c0009915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991d:	e8 16 eb 01 00       	call   c0028438 <__muldf3>
c0009922:	83 c4 2c             	add    esp,0x2c
c0009925:	c3                   	ret    

c0009926 <calc_output_single>:
c0009926:	55                   	push   ebp
c0009927:	57                   	push   edi
c0009928:	56                   	push   esi
c0009929:	89 c6                	mov    esi,eax
c000992b:	53                   	push   ebx
c000992c:	89 d3                	mov    ebx,edx
c000992e:	83 ec 4c             	sub    esp,0x4c
c0009931:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009935:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009938:	e8 a7 ff ff ff       	call   c00098e4 <int_to_fp>
c000993d:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009940:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009944:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009948:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994c:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994f:	99                   	cdq    
c0009950:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009958:	f7 fb                	idiv   ebx
c000995a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009962:	89 da                	mov    edx,ebx
c0009964:	0f af d0             	imul   edx,eax
c0009967:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000996b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009973:	29 c2                	sub    edx,eax
c0009975:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997c:	83 c5 04             	add    ebp,0x4
c000997f:	e8 6e ff ff ff       	call   c00098f2 <fp_to_double>
c0009984:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009988:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009990:	e8 53 ff ff ff       	call   c00098e8 <fp_to_int>
c0009995:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009998:	52                   	push   edx
c0009999:	52                   	push   edx
c000999a:	51                   	push   ecx
c000999b:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999f:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a3:	e8 a8 dd 01 00       	call   c0027750 <__subsf3>
c00099a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00099ab:	e8 7f f4 01 00       	call   c0028e2f <__extendsfdf2>
c00099b0:	83 c4 10             	add    esp,0x10
c00099b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099cb:	e8 68 ea 01 00       	call   c0028438 <__muldf3>
c00099d0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099df:	e8 4b f4 01 00       	call   c0028e2f <__extendsfdf2>
c00099e4:	83 c4 10             	add    esp,0x10
c00099e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099eb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ef:	52                   	push   edx
c00099f0:	50                   	push   eax
c00099f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f9:	e8 bd e3 01 00       	call   c0027dbb <__adddf3>
c00099fe:	59                   	pop    ecx
c00099ff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a03:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a07:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0d:	e8 1d f4 01 00       	call   c0028e2f <__extendsfdf2>
c0009a12:	83 c4 10             	add    esp,0x10
c0009a15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a19:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1d:	52                   	push   edx
c0009a1e:	50                   	push   eax
c0009a1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a27:	e8 0c ea 01 00       	call   c0028438 <__muldf3>
c0009a2c:	83 c4 10             	add    esp,0x10
c0009a2f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a33:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a37:	52                   	push   edx
c0009a38:	50                   	push   eax
c0009a39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a41:	e8 75 e3 01 00       	call   c0027dbb <__adddf3>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a51:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a55:	0f 89 1d ff ff ff    	jns    c0009978 <calc_output_single+0x52>
c0009a5b:	89 d9                	mov    ecx,ebx
c0009a5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a61:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a65:	89 dd                	mov    ebp,ebx
c0009a67:	29 c8                	sub    eax,ecx
c0009a69:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a71:	99                   	cdq    
c0009a72:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a7a:	f7 fb                	idiv   ebx
c0009a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a80:	0f af e8             	imul   ebp,eax
c0009a83:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a87:	01 cd                	add    ebp,ecx
c0009a89:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8c:	89 e8                	mov    eax,ebp
c0009a8e:	83 ee 04             	sub    esi,0x4
c0009a91:	e8 5c fe ff ff       	call   c00098f2 <fp_to_double>
c0009a96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9e:	89 e8                	mov    eax,ebp
c0009aa0:	29 dd                	sub    ebp,ebx
c0009aa2:	e8 41 fe ff ff       	call   c00098e8 <fp_to_int>
c0009aa7:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aaa:	52                   	push   edx
c0009aab:	52                   	push   edx
c0009aac:	51                   	push   ecx
c0009aad:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ab1:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab5:	e8 96 dc 01 00       	call   c0027750 <__subsf3>
c0009aba:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abd:	e8 6d f3 01 00       	call   c0028e2f <__extendsfdf2>
c0009ac2:	83 c4 10             	add    esp,0x10
c0009ac5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009add:	e8 56 e9 01 00       	call   c0028438 <__muldf3>
c0009ae2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009af1:	e8 39 f3 01 00       	call   c0028e2f <__extendsfdf2>
c0009af6:	83 c4 10             	add    esp,0x10
c0009af9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b01:	52                   	push   edx
c0009b02:	50                   	push   eax
c0009b03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0b:	e8 ab e2 01 00       	call   c0027dbb <__adddf3>
c0009b10:	59                   	pop    ecx
c0009b11:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b15:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b19:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1f:	e8 0b f3 01 00       	call   c0028e2f <__extendsfdf2>
c0009b24:	83 c4 10             	add    esp,0x10
c0009b27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b2b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2f:	52                   	push   edx
c0009b30:	50                   	push   eax
c0009b31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b39:	e8 fa e8 01 00       	call   c0028438 <__muldf3>
c0009b3e:	83 c4 10             	add    esp,0x10
c0009b41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b49:	52                   	push   edx
c0009b4a:	50                   	push   eax
c0009b4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b53:	e8 63 e2 01 00       	call   c0027dbb <__adddf3>
c0009b58:	83 c4 10             	add    esp,0x10
c0009b5b:	85 ed                	test   ebp,ebp
c0009b5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b61:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b65:	0f 8f 21 ff ff ff    	jg     c0009a8c <calc_output_single+0x166>
c0009b6b:	52                   	push   edx
c0009b6c:	50                   	push   eax
c0009b6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b75:	e8 41 e2 01 00       	call   c0027dbb <__adddf3>
c0009b7a:	83 c4 5c             	add    esp,0x5c
c0009b7d:	5b                   	pop    ebx
c0009b7e:	5e                   	pop    esi
c0009b7f:	5f                   	pop    edi
c0009b80:	5d                   	pop    ebp
c0009b81:	c3                   	ret    

c0009b82 <calc_output_stereo>:
c0009b82:	55                   	push   ebp
c0009b83:	89 cd                	mov    ebp,ecx
c0009b85:	57                   	push   edi
c0009b86:	56                   	push   esi
c0009b87:	53                   	push   ebx
c0009b88:	89 c3                	mov    ebx,eax
c0009b8a:	83 ec 6c             	sub    esp,0x6c
c0009b8d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b91:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b98:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009baa:	e8 35 fd ff ff       	call   c00098e4 <int_to_fp>
c0009baf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bbb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc3:	29 c8                	sub    eax,ecx
c0009bc5:	99                   	cdq    
c0009bc6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bce:	0f af d0             	imul   edx,eax
c0009bd1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd4:	31 d2                	xor    edx,edx
c0009bd6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bda:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bde:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009be1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be5:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bec:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bf0:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf3:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf8:	29 c1                	sub    ecx,eax
c0009bfa:	31 c0                	xor    eax,eax
c0009bfc:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c07:	83 c7 08             	add    edi,0x8
c0009c0a:	e8 e3 fc ff ff       	call   c00098f2 <fp_to_double>
c0009c0f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c1b:	e8 c8 fc ff ff       	call   c00098e8 <fp_to_int>
c0009c20:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c23:	52                   	push   edx
c0009c24:	52                   	push   edx
c0009c25:	51                   	push   ecx
c0009c26:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c2a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2e:	e8 1d db 01 00       	call   c0027750 <__subsf3>
c0009c33:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c36:	e8 f4 f1 01 00       	call   c0028e2f <__extendsfdf2>
c0009c3b:	83 c4 10             	add    esp,0x10
c0009c3e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c42:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c52:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c56:	e8 dd e7 01 00       	call   c0028438 <__muldf3>
c0009c5b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c66:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c6a:	e8 c0 f1 01 00       	call   c0028e2f <__extendsfdf2>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c76:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c7a:	52                   	push   edx
c0009c7b:	50                   	push   eax
c0009c7c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c80:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c84:	e8 32 e1 01 00       	call   c0027dbb <__adddf3>
c0009c89:	59                   	pop    ecx
c0009c8a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8e:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c92:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c98:	e8 92 f1 01 00       	call   c0028e2f <__extendsfdf2>
c0009c9d:	83 c4 10             	add    esp,0x10
c0009ca0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb8:	e8 7b e7 01 00       	call   c0028438 <__muldf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc8:	52                   	push   edx
c0009cc9:	50                   	push   eax
c0009cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd2:	e8 e4 e0 01 00       	call   c0027dbb <__adddf3>
c0009cd7:	59                   	pop    ecx
c0009cd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cdc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ce0:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce6:	e8 44 f1 01 00       	call   c0028e2f <__extendsfdf2>
c0009ceb:	83 c4 10             	add    esp,0x10
c0009cee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d06:	e8 2d e7 01 00       	call   c0028438 <__muldf3>
c0009d0b:	83 c4 10             	add    esp,0x10
c0009d0e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d12:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d16:	52                   	push   edx
c0009d17:	50                   	push   eax
c0009d18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d20:	e8 96 e0 01 00       	call   c0027dbb <__adddf3>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d30:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d34:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d38:	0f 89 c5 fe ff ff    	jns    c0009c03 <calc_output_stereo+0x81>
c0009d3e:	29 e9                	sub    ecx,ebp
c0009d40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d44:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d48:	29 c8                	sub    eax,ecx
c0009d4a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d52:	99                   	cdq    
c0009d53:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af f8             	imul   edi,eax
c0009d5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d60:	40                   	inc    eax
c0009d61:	01 cf                	add    edi,ecx
c0009d63:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d68:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d74:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d77:	31 c0                	xor    eax,eax
c0009d79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7d:	89 f8                	mov    eax,edi
c0009d7f:	83 eb 08             	sub    ebx,0x8
c0009d82:	e8 6b fb ff ff       	call   c00098f2 <fp_to_double>
c0009d87:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d8b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8f:	89 f8                	mov    eax,edi
c0009d91:	e8 52 fb ff ff       	call   c00098e8 <fp_to_int>
c0009d96:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d99:	52                   	push   edx
c0009d9a:	52                   	push   edx
c0009d9b:	55                   	push   ebp
c0009d9c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009da0:	e8 ab d9 01 00       	call   c0027750 <__subsf3>
c0009da5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da8:	e8 82 f0 01 00       	call   c0028e2f <__extendsfdf2>
c0009dad:	83 c4 10             	add    esp,0x10
c0009db0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dc0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc8:	e8 6b e6 01 00       	call   c0028438 <__muldf3>
c0009dcd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dd0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd8:	e8 52 f0 01 00       	call   c0028e2f <__extendsfdf2>
c0009ddd:	83 c4 10             	add    esp,0x10
c0009de0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de8:	52                   	push   edx
c0009de9:	50                   	push   eax
c0009dea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df2:	e8 c4 df 01 00       	call   c0027dbb <__adddf3>
c0009df7:	59                   	pop    ecx
c0009df8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfc:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009e00:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e06:	e8 24 f0 01 00       	call   c0028e2f <__extendsfdf2>
c0009e0b:	83 c4 10             	add    esp,0x10
c0009e0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e12:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e22:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e26:	e8 0d e6 01 00       	call   c0028438 <__muldf3>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e32:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e36:	52                   	push   edx
c0009e37:	50                   	push   eax
c0009e38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e40:	e8 76 df 01 00       	call   c0027dbb <__adddf3>
c0009e45:	5d                   	pop    ebp
c0009e46:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e4a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e54:	e8 d6 ef 01 00       	call   c0028e2f <__extendsfdf2>
c0009e59:	83 c4 10             	add    esp,0x10
c0009e5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e74:	e8 bf e5 01 00       	call   c0028438 <__muldf3>
c0009e79:	83 c4 10             	add    esp,0x10
c0009e7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e80:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e84:	52                   	push   edx
c0009e85:	50                   	push   eax
c0009e86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8e:	e8 28 df 01 00       	call   c0027dbb <__adddf3>
c0009e93:	83 c4 10             	add    esp,0x10
c0009e96:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea2:	85 ff                	test   edi,edi
c0009ea4:	0f 8f d3 fe ff ff    	jg     c0009d7d <calc_output_stereo+0x1fb>
c0009eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eba:	e8 fc de 01 00       	call   c0027dbb <__adddf3>
c0009ebf:	83 c4 10             	add    esp,0x10
c0009ec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009eca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eda:	e8 59 e5 01 00       	call   c0028438 <__muldf3>
c0009edf:	59                   	pop    ecx
c0009ee0:	5b                   	pop    ebx
c0009ee1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef1:	e8 15 ee 01 00       	call   c0028d0b <__truncdfsf2>
c0009ef6:	83 c4 10             	add    esp,0x10
c0009ef9:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009f00:	89 03                	mov    DWORD PTR [ebx],eax
c0009f02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 a4 de 01 00       	call   c0027dbb <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f22:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f26:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f32:	e8 01 e5 01 00       	call   c0028438 <__muldf3>
c0009f37:	5e                   	pop    esi
c0009f38:	5f                   	pop    edi
c0009f39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f49:	e8 bd ed 01 00       	call   c0028d0b <__truncdfsf2>
c0009f4e:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f55:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f58:	83 c4 7c             	add    esp,0x7c
c0009f5b:	5b                   	pop    ebx
c0009f5c:	5e                   	pop    esi
c0009f5d:	5f                   	pop    edi
c0009f5e:	5d                   	pop    ebp
c0009f5f:	c3                   	ret    

c0009f60 <calc_output_quad>:
c0009f60:	55                   	push   ebp
c0009f61:	57                   	push   edi
c0009f62:	56                   	push   esi
c0009f63:	89 c6                	mov    esi,eax
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 7c             	sub    esp,0x7c
c0009f69:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f71:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f78:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f87:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f8a:	e8 55 f9 ff ff       	call   c00098e4 <int_to_fp>
c0009f8f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f92:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f95:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f99:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009fa1:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa5:	99                   	cdq    
c0009fa6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009faa:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fae:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fb1:	31 d2                	xor    edx,edx
c0009fb3:	0f af d8             	imul   ebx,eax
c0009fb6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbe:	0f af c7             	imul   eax,edi
c0009fc1:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc5:	29 c1                	sub    ecx,eax
c0009fc7:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcf:	31 c0                	xor    eax,eax
c0009fd1:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fdc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fe0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fec:	89 d8                	mov    eax,ebx
c0009fee:	83 c7 10             	add    edi,0x10
c0009ff1:	e8 fc f8 ff ff       	call   c00098f2 <fp_to_double>
c0009ff6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ffa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffe:	89 d8                	mov    eax,ebx
c000a000:	e8 e3 f8 ff ff       	call   c00098e8 <fp_to_int>
c000a005:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a009:	52                   	push   edx
c000a00a:	52                   	push   edx
c000a00b:	51                   	push   ecx
c000a00c:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a010:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a014:	e8 37 d7 01 00       	call   c0027750 <__subsf3>
c000a019:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01c:	e8 0e ee 01 00       	call   c0028e2f <__extendsfdf2>
c000a021:	83 c4 10             	add    esp,0x10
c000a024:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a028:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a034:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a038:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03c:	e8 f7 e3 01 00       	call   c0028438 <__muldf3>
c000a041:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a045:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a049:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a050:	e8 da ed 01 00       	call   c0028e2f <__extendsfdf2>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a060:	52                   	push   edx
c000a061:	50                   	push   eax
c000a062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a066:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a06a:	e8 4c dd 01 00       	call   c0027dbb <__adddf3>
c000a06f:	59                   	pop    ecx
c000a070:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a074:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a078:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07e:	e8 ac ed 01 00       	call   c0028e2f <__extendsfdf2>
c000a083:	83 c4 10             	add    esp,0x10
c000a086:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a096:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09e:	e8 95 e3 01 00       	call   c0028438 <__muldf3>
c000a0a3:	83 c4 10             	add    esp,0x10
c000a0a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ae:	52                   	push   edx
c000a0af:	50                   	push   eax
c000a0b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b8:	e8 fe dc 01 00       	call   c0027dbb <__adddf3>
c000a0bd:	59                   	pop    ecx
c000a0be:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c6:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0cc:	e8 5e ed 01 00       	call   c0028e2f <__extendsfdf2>
c000a0d1:	83 c4 10             	add    esp,0x10
c000a0d4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ec:	e8 47 e3 01 00       	call   c0028438 <__muldf3>
c000a0f1:	83 c4 10             	add    esp,0x10
c000a0f4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fc:	52                   	push   edx
c000a0fd:	50                   	push   eax
c000a0fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a106:	e8 b0 dc 01 00       	call   c0027dbb <__adddf3>
c000a10b:	59                   	pop    ecx
c000a10c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a110:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a114:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a11a:	e8 10 ed 01 00       	call   c0028e2f <__extendsfdf2>
c000a11f:	83 c4 10             	add    esp,0x10
c000a122:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a126:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a132:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a136:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13a:	e8 f9 e2 01 00       	call   c0028438 <__muldf3>
c000a13f:	83 c4 10             	add    esp,0x10
c000a142:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a146:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a14a:	52                   	push   edx
c000a14b:	50                   	push   eax
c000a14c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a150:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a154:	e8 62 dc 01 00       	call   c0027dbb <__adddf3>
c000a159:	59                   	pop    ecx
c000a15a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15e:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a162:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a168:	e8 c2 ec 01 00       	call   c0028e2f <__extendsfdf2>
c000a16d:	83 c4 10             	add    esp,0x10
c000a170:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a174:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a180:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a184:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a188:	e8 ab e2 01 00       	call   c0028438 <__muldf3>
c000a18d:	83 c4 10             	add    esp,0x10
c000a190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a198:	52                   	push   edx
c000a199:	50                   	push   eax
c000a19a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a2:	e8 14 dc 01 00       	call   c0027dbb <__adddf3>
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ae:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b2:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b6:	0f 89 30 fe ff ff    	jns    c0009fec <calc_output_quad+0x8c>
c000a1bc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c8:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1cc:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d4:	29 c8                	sub    eax,ecx
c000a1d6:	99                   	cdq    
c000a1d7:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1db:	31 d2                	xor    edx,edx
c000a1dd:	0f af d8             	imul   ebx,eax
c000a1e0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e4:	40                   	inc    eax
c000a1e5:	01 cb                	add    ebx,ecx
c000a1e7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1f0:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f8:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1fb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a203:	31 c0                	xor    eax,eax
c000a205:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a209:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a211:	89 d8                	mov    eax,ebx
c000a213:	83 ee 10             	sub    esi,0x10
c000a216:	e8 d7 f6 ff ff       	call   c00098f2 <fp_to_double>
c000a21b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a223:	89 d8                	mov    eax,ebx
c000a225:	e8 be f6 ff ff       	call   c00098e8 <fp_to_int>
c000a22a:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22e:	52                   	push   edx
c000a22f:	52                   	push   edx
c000a230:	57                   	push   edi
c000a231:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a235:	e8 16 d5 01 00       	call   c0027750 <__subsf3>
c000a23a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23d:	e8 ed eb 01 00       	call   c0028e2f <__extendsfdf2>
c000a242:	83 c4 10             	add    esp,0x10
c000a245:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a249:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a255:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a259:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25d:	e8 d6 e1 01 00       	call   c0028438 <__muldf3>
c000a262:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a269:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26d:	e8 bd eb 01 00       	call   c0028e2f <__extendsfdf2>
c000a272:	83 c4 10             	add    esp,0x10
c000a275:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a279:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27d:	52                   	push   edx
c000a27e:	50                   	push   eax
c000a27f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a283:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a287:	e8 2f db 01 00       	call   c0027dbb <__adddf3>
c000a28c:	59                   	pop    ecx
c000a28d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a291:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a295:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a29b:	e8 8f eb 01 00       	call   c0028e2f <__extendsfdf2>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2bb:	e8 78 e1 01 00       	call   c0028438 <__muldf3>
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2cb:	52                   	push   edx
c000a2cc:	50                   	push   eax
c000a2cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d5:	e8 e1 da 01 00       	call   c0027dbb <__adddf3>
c000a2da:	5f                   	pop    edi
c000a2db:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2df:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e3:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e9:	e8 41 eb 01 00       	call   c0028e2f <__extendsfdf2>
c000a2ee:	83 c4 10             	add    esp,0x10
c000a2f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a301:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a305:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a309:	e8 2a e1 01 00       	call   c0028438 <__muldf3>
c000a30e:	83 c4 10             	add    esp,0x10
c000a311:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a315:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a319:	52                   	push   edx
c000a31a:	50                   	push   eax
c000a31b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a323:	e8 93 da 01 00       	call   c0027dbb <__adddf3>
c000a328:	59                   	pop    ecx
c000a329:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32d:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a331:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a337:	e8 f3 ea 01 00       	call   c0028e2f <__extendsfdf2>
c000a33c:	83 c4 10             	add    esp,0x10
c000a33f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a343:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a347:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a353:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a357:	e8 dc e0 01 00       	call   c0028438 <__muldf3>
c000a35c:	83 c4 10             	add    esp,0x10
c000a35f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a363:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a367:	52                   	push   edx
c000a368:	50                   	push   eax
c000a369:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a371:	e8 45 da 01 00       	call   c0027dbb <__adddf3>
c000a376:	5f                   	pop    edi
c000a377:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a37b:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37f:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a385:	e8 a5 ea 01 00       	call   c0028e2f <__extendsfdf2>
c000a38a:	83 c4 10             	add    esp,0x10
c000a38d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a391:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a395:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a5:	e8 8e e0 01 00       	call   c0028438 <__muldf3>
c000a3aa:	83 c4 10             	add    esp,0x10
c000a3ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b5:	52                   	push   edx
c000a3b6:	50                   	push   eax
c000a3b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bf:	e8 f7 d9 01 00       	call   c0027dbb <__adddf3>
c000a3c4:	83 c4 10             	add    esp,0x10
c000a3c7:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cf:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d3:	85 db                	test   ebx,ebx
c000a3d5:	0f 8f 36 fe ff ff    	jg     c000a211 <calc_output_quad+0x2b1>
c000a3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3eb:	e8 cb d9 01 00       	call   c0027dbb <__adddf3>
c000a3f0:	83 c4 10             	add    esp,0x10
c000a3f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a403:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a407:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40b:	e8 28 e0 01 00       	call   c0028438 <__muldf3>
c000a410:	59                   	pop    ecx
c000a411:	5b                   	pop    ebx
c000a412:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a416:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a422:	e8 e4 e8 01 00       	call   c0028d0b <__truncdfsf2>
c000a427:	83 c4 10             	add    esp,0x10
c000a42a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a431:	89 06                	mov    DWORD PTR [esi],eax
c000a433:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a437:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a43b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a443:	e8 73 d9 01 00       	call   c0027dbb <__adddf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a463:	e8 d0 df 01 00       	call   c0028438 <__muldf3>
c000a468:	5e                   	pop    esi
c000a469:	5f                   	pop    edi
c000a46a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47a:	e8 8c e8 01 00       	call   c0028d0b <__truncdfsf2>
c000a47f:	83 c4 10             	add    esp,0x10
c000a482:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a489:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a490:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a494:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a498:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49c:	e8 1a d9 01 00       	call   c0027dbb <__adddf3>
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4bc:	e8 77 df 01 00       	call   c0028438 <__muldf3>
c000a4c1:	5d                   	pop    ebp
c000a4c2:	59                   	pop    ecx
c000a4c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	e8 33 e8 01 00       	call   c0028d0b <__truncdfsf2>
c000a4d8:	83 c4 10             	add    esp,0x10
c000a4db:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e2:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f5:	e8 c1 d8 01 00       	call   c0027dbb <__adddf3>
c000a4fa:	83 c4 10             	add    esp,0x10
c000a4fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a501:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a509:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a511:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a515:	e8 1e df 01 00       	call   c0028438 <__muldf3>
c000a51a:	5b                   	pop    ebx
c000a51b:	5e                   	pop    esi
c000a51c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a520:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52c:	e8 da e7 01 00       	call   c0028d0b <__truncdfsf2>
c000a531:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a538:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a53b:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a541:	5b                   	pop    ebx
c000a542:	5e                   	pop    esi
c000a543:	5f                   	pop    edi
c000a544:	5d                   	pop    ebp
c000a545:	c3                   	ret    

c000a546 <calc_output_hex>:
c000a546:	55                   	push   ebp
c000a547:	89 cd                	mov    ebp,ecx
c000a549:	57                   	push   edi
c000a54a:	56                   	push   esi
c000a54b:	53                   	push   ebx
c000a54c:	89 c3                	mov    ebx,eax
c000a54e:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a554:	89 14 24             	mov    DWORD PTR [esp],edx
c000a557:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55e:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a565:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a569:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a570:	e8 6f f3 ff ff       	call   c00098e4 <int_to_fp>
c000a575:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a578:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57f:	29 c8                	sub    eax,ecx
c000a581:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a585:	99                   	cdq    
c000a586:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a591:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a599:	0f af f8             	imul   edi,eax
c000a59c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59f:	01 cf                	add    edi,ecx
c000a5a1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a5:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5ac:	0f af c2             	imul   eax,edx
c000a5af:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b3:	29 c1                	sub    ecx,eax
c000a5b5:	31 d2                	xor    edx,edx
c000a5b7:	31 c0                	xor    eax,eax
c000a5b9:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5cc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5d0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e4:	89 f8                	mov    eax,edi
c000a5e6:	e8 07 f3 ff ff       	call   c00098f2 <fp_to_double>
c000a5eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f3:	89 f8                	mov    eax,edi
c000a5f5:	e8 ee f2 ff ff       	call   c00098e8 <fp_to_int>
c000a5fa:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fe:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a601:	52                   	push   edx
c000a602:	52                   	push   edx
c000a603:	51                   	push   ecx
c000a604:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a608:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a613:	e8 38 d1 01 00       	call   c0027750 <__subsf3>
c000a618:	89 04 24             	mov    DWORD PTR [esp],eax
c000a61b:	e8 0f e8 01 00       	call   c0028e2f <__extendsfdf2>
c000a620:	83 c4 10             	add    esp,0x10
c000a623:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a627:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a62b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a633:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a637:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a63b:	e8 f8 dd 01 00       	call   c0028438 <__muldf3>
c000a640:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a644:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a648:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a64b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64f:	e8 db e7 01 00       	call   c0028e2f <__extendsfdf2>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a65b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65f:	52                   	push   edx
c000a660:	50                   	push   eax
c000a661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a669:	e8 4d d7 01 00       	call   c0027dbb <__adddf3>
c000a66e:	59                   	pop    ecx
c000a66f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a673:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a677:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67d:	e8 ad e7 01 00       	call   c0028e2f <__extendsfdf2>
c000a682:	83 c4 10             	add    esp,0x10
c000a685:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a689:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a695:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a699:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69d:	e8 96 dd 01 00       	call   c0028438 <__muldf3>
c000a6a2:	83 c4 10             	add    esp,0x10
c000a6a5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ad:	52                   	push   edx
c000a6ae:	50                   	push   eax
c000a6af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b7:	e8 ff d6 01 00       	call   c0027dbb <__adddf3>
c000a6bc:	59                   	pop    ecx
c000a6bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6c1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6cb:	e8 5f e7 01 00       	call   c0028e2f <__extendsfdf2>
c000a6d0:	83 c4 10             	add    esp,0x10
c000a6d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6eb:	e8 48 dd 01 00       	call   c0028438 <__muldf3>
c000a6f0:	83 c4 10             	add    esp,0x10
c000a6f3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6fb:	52                   	push   edx
c000a6fc:	50                   	push   eax
c000a6fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a701:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a705:	e8 b1 d6 01 00       	call   c0027dbb <__adddf3>
c000a70a:	59                   	pop    ecx
c000a70b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70f:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a713:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a719:	e8 11 e7 01 00       	call   c0028e2f <__extendsfdf2>
c000a71e:	83 c4 10             	add    esp,0x10
c000a721:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a725:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a731:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a735:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a739:	e8 fa dc 01 00       	call   c0028438 <__muldf3>
c000a73e:	83 c4 10             	add    esp,0x10
c000a741:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a745:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a749:	52                   	push   edx
c000a74a:	50                   	push   eax
c000a74b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a753:	e8 63 d6 01 00       	call   c0027dbb <__adddf3>
c000a758:	59                   	pop    ecx
c000a759:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75d:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a761:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a767:	e8 c3 e6 01 00       	call   c0028e2f <__extendsfdf2>
c000a76c:	83 c4 10             	add    esp,0x10
c000a76f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a773:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a783:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a787:	e8 ac dc 01 00       	call   c0028438 <__muldf3>
c000a78c:	83 c4 10             	add    esp,0x10
c000a78f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a793:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a797:	52                   	push   edx
c000a798:	50                   	push   eax
c000a799:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7a1:	e8 15 d6 01 00       	call   c0027dbb <__adddf3>
c000a7a6:	59                   	pop    ecx
c000a7a7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7ab:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7af:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b5:	e8 75 e6 01 00       	call   c0028e2f <__extendsfdf2>
c000a7ba:	83 c4 10             	add    esp,0x10
c000a7bd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7c1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d5:	e8 5e dc 01 00       	call   c0028438 <__muldf3>
c000a7da:	83 c4 10             	add    esp,0x10
c000a7dd:	83 c6 18             	add    esi,0x18
c000a7e0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e8:	52                   	push   edx
c000a7e9:	50                   	push   eax
c000a7ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f2:	e8 c4 d5 01 00       	call   c0027dbb <__adddf3>
c000a7f7:	59                   	pop    ecx
c000a7f8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fc:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a800:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a806:	e8 24 e6 01 00       	call   c0028e2f <__extendsfdf2>
c000a80b:	83 c4 10             	add    esp,0x10
c000a80e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a812:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a822:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a826:	e8 0d dc 01 00       	call   c0028438 <__muldf3>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a832:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a836:	52                   	push   edx
c000a837:	50                   	push   eax
c000a838:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a840:	e8 76 d5 01 00       	call   c0027dbb <__adddf3>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a850:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a853:	0f 89 8b fd ff ff    	jns    c000a5e4 <calc_output_hex+0x9e>
c000a859:	31 f6                	xor    esi,esi
c000a85b:	31 ff                	xor    edi,edi
c000a85d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a861:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a864:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a868:	29 e9                	sub    ecx,ebp
c000a86a:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86e:	29 c8                	sub    eax,ecx
c000a870:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a873:	99                   	cdq    
c000a874:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a878:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a87b:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87f:	0f af e8             	imul   ebp,eax
c000a882:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a886:	40                   	inc    eax
c000a887:	01 cd                	add    ebp,ecx
c000a889:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88e:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a892:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a896:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a89a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89d:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a8a1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a9:	89 e8                	mov    eax,ebp
c000a8ab:	e8 42 f0 ff ff       	call   c00098f2 <fp_to_double>
c000a8b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b8:	89 e8                	mov    eax,ebp
c000a8ba:	e8 29 f0 ff ff       	call   c00098e8 <fp_to_int>
c000a8bf:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c3:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c6:	52                   	push   edx
c000a8c7:	52                   	push   edx
c000a8c8:	51                   	push   ecx
c000a8c9:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8d0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8db:	e8 70 ce 01 00       	call   c0027750 <__subsf3>
c000a8e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e3:	e8 47 e5 01 00       	call   c0028e2f <__extendsfdf2>
c000a8e8:	83 c4 10             	add    esp,0x10
c000a8eb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ef:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8fb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ff:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a903:	e8 30 db 01 00       	call   c0028438 <__muldf3>
c000a908:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a913:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a916:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a91a:	e8 10 e5 01 00       	call   c0028e2f <__extendsfdf2>
c000a91f:	83 c4 10             	add    esp,0x10
c000a922:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a926:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a92a:	52                   	push   edx
c000a92b:	50                   	push   eax
c000a92c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a934:	e8 82 d4 01 00       	call   c0027dbb <__adddf3>
c000a939:	59                   	pop    ecx
c000a93a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a942:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a948:	e8 e2 e4 01 00       	call   c0028e2f <__extendsfdf2>
c000a94d:	83 c4 10             	add    esp,0x10
c000a950:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a954:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a958:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a960:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a964:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a968:	e8 cb da 01 00       	call   c0028438 <__muldf3>
c000a96d:	83 c4 10             	add    esp,0x10
c000a970:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a974:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a978:	52                   	push   edx
c000a979:	50                   	push   eax
c000a97a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a982:	e8 34 d4 01 00       	call   c0027dbb <__adddf3>
c000a987:	59                   	pop    ecx
c000a988:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a990:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a996:	e8 94 e4 01 00       	call   c0028e2f <__extendsfdf2>
c000a99b:	83 c4 10             	add    esp,0x10
c000a99e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ae:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b6:	e8 7d da 01 00       	call   c0028438 <__muldf3>
c000a9bb:	83 c4 10             	add    esp,0x10
c000a9be:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c6:	52                   	push   edx
c000a9c7:	50                   	push   eax
c000a9c8:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9cc:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9d0:	e8 e6 d3 01 00       	call   c0027dbb <__adddf3>
c000a9d5:	59                   	pop    ecx
c000a9d6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9da:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9de:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e4:	e8 46 e4 01 00       	call   c0028e2f <__extendsfdf2>
c000a9e9:	83 c4 10             	add    esp,0x10
c000a9ec:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9f0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa00:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa04:	e8 2f da 01 00       	call   c0028438 <__muldf3>
c000aa09:	83 c4 10             	add    esp,0x10
c000aa0c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa10:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa14:	52                   	push   edx
c000aa15:	50                   	push   eax
c000aa16:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1e:	e8 98 d3 01 00       	call   c0027dbb <__adddf3>
c000aa23:	59                   	pop    ecx
c000aa24:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa28:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa32:	e8 f8 e3 01 00       	call   c0028e2f <__extendsfdf2>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa4a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa52:	e8 e1 d9 01 00       	call   c0028438 <__muldf3>
c000aa57:	83 c4 10             	add    esp,0x10
c000aa5a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa62:	52                   	push   edx
c000aa63:	50                   	push   eax
c000aa64:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa68:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6c:	e8 4a d3 01 00       	call   c0027dbb <__adddf3>
c000aa71:	59                   	pop    ecx
c000aa72:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa76:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa7a:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa80:	e8 aa e3 01 00       	call   c0028e2f <__extendsfdf2>
c000aa85:	83 c4 10             	add    esp,0x10
c000aa88:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa98:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa0:	e8 93 d9 01 00       	call   c0028438 <__muldf3>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	83 eb 18             	sub    ebx,0x18
c000aaab:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaaf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab3:	52                   	push   edx
c000aab4:	50                   	push   eax
c000aab5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabd:	e8 f9 d2 01 00       	call   c0027dbb <__adddf3>
c000aac2:	59                   	pop    ecx
c000aac3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac7:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aacb:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aad1:	e8 59 e3 01 00       	call   c0028e2f <__extendsfdf2>
c000aad6:	83 c4 10             	add    esp,0x10
c000aad9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	e8 42 d9 01 00       	call   c0028438 <__muldf3>
c000aaf6:	83 c4 10             	add    esp,0x10
c000aaf9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ab01:	52                   	push   edx
c000ab02:	50                   	push   eax
c000ab03:	57                   	push   edi
c000ab04:	56                   	push   esi
c000ab05:	e8 b1 d2 01 00       	call   c0027dbb <__adddf3>
c000ab0a:	83 c4 10             	add    esp,0x10
c000ab0d:	89 c6                	mov    esi,eax
c000ab0f:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab12:	89 d7                	mov    edi,edx
c000ab14:	85 ed                	test   ebp,ebp
c000ab16:	0f 8f 8d fd ff ff    	jg     c000a8a9 <calc_output_hex+0x363>
c000ab1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2c:	e8 8a d2 01 00       	call   c0027dbb <__adddf3>
c000ab31:	83 c4 10             	add    esp,0x10
c000ab34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab37:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab43:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab4b:	e8 e8 d8 01 00       	call   c0028438 <__muldf3>
c000ab50:	59                   	pop    ecx
c000ab51:	5b                   	pop    ebx
c000ab52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab62:	e8 a4 e1 01 00       	call   c0028d0b <__truncdfsf2>
c000ab67:	83 c4 10             	add    esp,0x10
c000ab6a:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab71:	89 03                	mov    DWORD PTR [ebx],eax
c000ab73:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab77:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab83:	e8 33 d2 01 00       	call   c0027dbb <__adddf3>
c000ab88:	83 c4 10             	add    esp,0x10
c000ab8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba2:	e8 91 d8 01 00       	call   c0028438 <__muldf3>
c000aba7:	5d                   	pop    ebp
c000aba8:	59                   	pop    ecx
c000aba9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 4d e1 01 00       	call   c0028d0b <__truncdfsf2>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abcb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abdb:	e8 db d1 01 00       	call   c0027dbb <__adddf3>
c000abe0:	83 c4 10             	add    esp,0x10
c000abe3:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abfa:	e8 39 d8 01 00       	call   c0028438 <__muldf3>
c000abff:	5b                   	pop    ebx
c000ac00:	5d                   	pop    ebp
c000ac01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac11:	e8 f5 e0 01 00       	call   c0028d0b <__truncdfsf2>
c000ac16:	83 c4 10             	add    esp,0x10
c000ac19:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac20:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac23:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac27:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac33:	e8 83 d1 01 00       	call   c0027dbb <__adddf3>
c000ac38:	83 c4 10             	add    esp,0x10
c000ac3b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac46:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac52:	e8 e1 d7 01 00       	call   c0028438 <__muldf3>
c000ac57:	59                   	pop    ecx
c000ac58:	5b                   	pop    ebx
c000ac59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac65:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac69:	e8 9d e0 01 00       	call   c0028d0b <__truncdfsf2>
c000ac6e:	83 c4 10             	add    esp,0x10
c000ac71:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac8b:	e8 2b d1 01 00       	call   c0027dbb <__adddf3>
c000ac90:	83 c4 10             	add    esp,0x10
c000ac93:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acaa:	e8 89 d7 01 00       	call   c0028438 <__muldf3>
c000acaf:	5d                   	pop    ebp
c000acb0:	59                   	pop    ecx
c000acb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc1:	e8 45 e0 01 00       	call   c0028d0b <__truncdfsf2>
c000acc6:	83 c4 10             	add    esp,0x10
c000acc9:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acd0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd3:	57                   	push   edi
c000acd4:	56                   	push   esi
c000acd5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdd:	e8 d9 d0 01 00       	call   c0027dbb <__adddf3>
c000ace2:	83 c4 10             	add    esp,0x10
c000ace5:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfc:	e8 37 d7 01 00       	call   c0028438 <__muldf3>
c000ad01:	5b                   	pop    ebx
c000ad02:	5e                   	pop    esi
c000ad03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad13:	e8 f3 df 01 00       	call   c0028d0b <__truncdfsf2>
c000ad18:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad22:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad28:	5b                   	pop    ebx
c000ad29:	5e                   	pop    esi
c000ad2a:	5f                   	pop    edi
c000ad2b:	5d                   	pop    ebp
c000ad2c:	c3                   	ret    

c000ad2d <sinc_reset>:
c000ad2d:	56                   	push   esi
c000ad2e:	53                   	push   ebx
c000ad2f:	51                   	push   ecx
c000ad30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad34:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad37:	85 db                	test   ebx,ebx
c000ad39:	74 59                	je     c000ad94 <sinc_reset+0x67>
c000ad3b:	31 d2                	xor    edx,edx
c000ad3d:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad44:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad47:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad4a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad51:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad58:	31 c0                	xor    eax,eax
c000ad5a:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad60:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad63:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad66:	52                   	push   edx
c000ad67:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad6a:	c1 e0 02             	shl    eax,0x2
c000ad6d:	50                   	push   eax
c000ad6e:	6a 00                	push   0x0
c000ad70:	56                   	push   esi
c000ad71:	e8 f6 59 ff ff       	call   c000076c <memset>
c000ad76:	83 c4 0c             	add    esp,0xc
c000ad79:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7c:	c1 e0 02             	shl    eax,0x2
c000ad7f:	50                   	push   eax
c000ad80:	68 aa 00 00 00       	push   0xaa
c000ad85:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad88:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad8b:	50                   	push   eax
c000ad8c:	e8 db 59 ff ff       	call   c000076c <memset>
c000ad91:	83 c4 10             	add    esp,0x10
c000ad94:	58                   	pop    eax
c000ad95:	5b                   	pop    ebx
c000ad96:	5e                   	pop    esi
c000ad97:	c3                   	ret    

c000ad98 <calc_output_multi>:
c000ad98:	55                   	push   ebp
c000ad99:	57                   	push   edi
c000ad9a:	56                   	push   esi
c000ad9b:	89 c6                	mov    esi,eax
c000ad9d:	53                   	push   ebx
c000ad9e:	83 ec 4c             	sub    esp,0x4c
c000ada1:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adad:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adb1:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbd:	8d 46 44             	lea    eax,[esi+0x44]
c000adc0:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc3:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000add0:	e8 0f eb ff ff       	call   c00098e4 <int_to_fp>
c000add5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000addc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ade0:	99                   	cdq    
c000ade1:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade9:	0f af d0             	imul   edx,eax
c000adec:	0f af c3             	imul   eax,ebx
c000adef:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf3:	29 c1                	sub    ecx,eax
c000adf5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfd:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae08:	57                   	push   edi
c000ae09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0d:	6a 00                	push   0x0
c000ae0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae13:	e8 54 59 ff ff       	call   c000076c <memset>
c000ae18:	83 c4 10             	add    esp,0x10
c000ae1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1f:	89 df                	mov    edi,ebx
c000ae21:	e8 cc ea ff ff       	call   c00098f2 <fp_to_double>
c000ae26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae32:	e8 b1 ea ff ff       	call   c00098e8 <fp_to_int>
c000ae37:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae3a:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3d:	51                   	push   ecx
c000ae3e:	51                   	push   ecx
c000ae3f:	55                   	push   ebp
c000ae40:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae44:	e8 07 c9 01 00       	call   c0027750 <__subsf3>
c000ae49:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4c:	e8 de df 01 00       	call   c0028e2f <__extendsfdf2>
c000ae51:	83 c4 10             	add    esp,0x10
c000ae54:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae58:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae64:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6c:	e8 c7 d5 01 00       	call   c0028438 <__muldf3>
c000ae71:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae78:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7c:	e8 ae df 01 00       	call   c0028e2f <__extendsfdf2>
c000ae81:	83 c4 10             	add    esp,0x10
c000ae84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8c:	52                   	push   edx
c000ae8d:	50                   	push   eax
c000ae8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae96:	e8 20 cf 01 00       	call   c0027dbb <__adddf3>
c000ae9b:	83 c4 10             	add    esp,0x10
c000ae9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea6:	89 f8                	mov    eax,edi
c000aea8:	b9 08 00 00 00       	mov    ecx,0x8
c000aead:	99                   	cdq    
c000aeae:	f7 f9                	idiv   ecx
c000aeb0:	4a                   	dec    edx
c000aeb1:	83 fa 06             	cmp    edx,0x6
c000aeb4:	77 07                	ja     c000aebd <calc_output_multi+0x125>
c000aeb6:	ff 24 95 44 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58bc]
c000aebd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aec0:	4f                   	dec    edi
c000aec1:	83 ec 0c             	sub    esp,0xc
c000aec4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aecb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed6:	e8 54 df 01 00       	call   c0028e2f <__extendsfdf2>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef6:	e8 3d d5 01 00       	call   c0028438 <__muldf3>
c000aefb:	83 c4 10             	add    esp,0x10
c000aefe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af02:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af06:	52                   	push   edx
c000af07:	50                   	push   eax
c000af08:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af0b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0e:	e8 a8 ce 01 00       	call   c0027dbb <__adddf3>
c000af13:	83 c4 10             	add    esp,0x10
c000af16:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af19:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1f:	4f                   	dec    edi
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af2a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af31:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af35:	e8 f5 de 01 00       	call   c0028e2f <__extendsfdf2>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af55:	e8 de d4 01 00       	call   c0028438 <__muldf3>
c000af5a:	83 c4 10             	add    esp,0x10
c000af5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af61:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af65:	52                   	push   edx
c000af66:	50                   	push   eax
c000af67:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af6a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6d:	e8 49 ce 01 00       	call   c0027dbb <__adddf3>
c000af72:	83 c4 10             	add    esp,0x10
c000af75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af78:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7e:	4f                   	dec    edi
c000af7f:	83 ec 0c             	sub    esp,0xc
c000af82:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af89:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af90:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af94:	e8 96 de 01 00       	call   c0028e2f <__extendsfdf2>
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afa0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb4:	e8 7f d4 01 00       	call   c0028438 <__muldf3>
c000afb9:	83 c4 10             	add    esp,0x10
c000afbc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afc0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc4:	52                   	push   edx
c000afc5:	50                   	push   eax
c000afc6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afcc:	e8 ea cd 01 00       	call   c0027dbb <__adddf3>
c000afd1:	83 c4 10             	add    esp,0x10
c000afd4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afda:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdd:	4f                   	dec    edi
c000afde:	83 ec 0c             	sub    esp,0xc
c000afe1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afef:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff3:	e8 37 de 01 00       	call   c0028e2f <__extendsfdf2>
c000aff8:	83 c4 10             	add    esp,0x10
c000affb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afff:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b003:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b007:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b00b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b013:	e8 20 d4 01 00       	call   c0028438 <__muldf3>
c000b018:	83 c4 10             	add    esp,0x10
c000b01b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b023:	52                   	push   edx
c000b024:	50                   	push   eax
c000b025:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b028:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b02b:	e8 8b cd 01 00       	call   c0027dbb <__adddf3>
c000b030:	83 c4 10             	add    esp,0x10
c000b033:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b036:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b039:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03c:	4f                   	dec    edi
c000b03d:	83 ec 0c             	sub    esp,0xc
c000b040:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b043:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b047:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b052:	e8 d8 dd 01 00       	call   c0028e2f <__extendsfdf2>
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b062:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b066:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b06a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b072:	e8 c1 d3 01 00       	call   c0028438 <__muldf3>
c000b077:	83 c4 10             	add    esp,0x10
c000b07a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b082:	52                   	push   edx
c000b083:	50                   	push   eax
c000b084:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b087:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b08a:	e8 2c cd 01 00       	call   c0027dbb <__adddf3>
c000b08f:	83 c4 10             	add    esp,0x10
c000b092:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b095:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b098:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b09b:	4f                   	dec    edi
c000b09c:	83 ec 0c             	sub    esp,0xc
c000b09f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ad:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0b1:	e8 79 dd 01 00       	call   c0028e2f <__extendsfdf2>
c000b0b6:	83 c4 10             	add    esp,0x10
c000b0b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0d1:	e8 62 d3 01 00       	call   c0028438 <__muldf3>
c000b0d6:	83 c4 10             	add    esp,0x10
c000b0d9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0dd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0e1:	52                   	push   edx
c000b0e2:	50                   	push   eax
c000b0e3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e9:	e8 cd cc 01 00       	call   c0027dbb <__adddf3>
c000b0ee:	83 c4 10             	add    esp,0x10
c000b0f1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0fa:	4f                   	dec    edi
c000b0fb:	83 ec 0c             	sub    esp,0xc
c000b0fe:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b101:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b105:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b110:	e8 1a dd 01 00       	call   c0028e2f <__extendsfdf2>
c000b115:	83 c4 10             	add    esp,0x10
c000b118:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b124:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b128:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b130:	e8 03 d3 01 00       	call   c0028438 <__muldf3>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b140:	52                   	push   edx
c000b141:	50                   	push   eax
c000b142:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b145:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b148:	e8 6e cc 01 00       	call   c0027dbb <__adddf3>
c000b14d:	83 c4 10             	add    esp,0x10
c000b150:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b153:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b156:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b159:	4f                   	dec    edi
c000b15a:	83 ec 0c             	sub    esp,0xc
c000b15d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b160:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b164:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b16b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16f:	e8 bb dc 01 00       	call   c0028e2f <__extendsfdf2>
c000b174:	83 c4 10             	add    esp,0x10
c000b177:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b17b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b183:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b187:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18f:	e8 a4 d2 01 00       	call   c0028438 <__muldf3>
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b19b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19f:	52                   	push   edx
c000b1a0:	50                   	push   eax
c000b1a1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a7:	e8 0f cc 01 00       	call   c0027dbb <__adddf3>
c000b1ac:	83 c4 10             	add    esp,0x10
c000b1af:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b5:	85 ff                	test   edi,edi
c000b1b7:	0f 8f e9 fc ff ff    	jg     c000aea6 <calc_output_multi+0x10e>
c000b1bd:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1c1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c5:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c9:	0f 89 4c fc ff ff    	jns    c000ae1b <calc_output_multi+0x83>
c000b1cf:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d7:	29 c8                	sub    eax,ecx
c000b1d9:	99                   	cdq    
c000b1da:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e2:	0f af d0             	imul   edx,eax
c000b1e5:	40                   	inc    eax
c000b1e6:	01 d1                	add    ecx,edx
c000b1e8:	0f af c3             	imul   eax,ebx
c000b1eb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ef:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f6:	55                   	push   ebp
c000b1f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1fb:	6a 00                	push   0x0
c000b1fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b201:	e8 66 55 ff ff       	call   c000076c <memset>
c000b206:	83 c4 10             	add    esp,0x10
c000b209:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20d:	e8 e0 e6 ff ff       	call   c00098f2 <fp_to_double>
c000b212:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b216:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b21a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21e:	e8 c5 e6 ff ff       	call   c00098e8 <fp_to_int>
c000b223:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b226:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b229:	57                   	push   edi
c000b22a:	57                   	push   edi
c000b22b:	89 df                	mov    edi,ebx
c000b22d:	55                   	push   ebp
c000b22e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b232:	e8 19 c5 01 00       	call   c0027750 <__subsf3>
c000b237:	89 04 24             	mov    DWORD PTR [esp],eax
c000b23a:	e8 f0 db 01 00       	call   c0028e2f <__extendsfdf2>
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b246:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b252:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b256:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25a:	e8 d9 d1 01 00       	call   c0028438 <__muldf3>
c000b25f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b262:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b266:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b26a:	e8 c0 db 01 00       	call   c0028e2f <__extendsfdf2>
c000b26f:	83 c4 10             	add    esp,0x10
c000b272:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b276:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27a:	52                   	push   edx
c000b27b:	50                   	push   eax
c000b27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b284:	e8 32 cb 01 00       	call   c0027dbb <__adddf3>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b290:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b294:	89 f8                	mov    eax,edi
c000b296:	b9 08 00 00 00       	mov    ecx,0x8
c000b29b:	99                   	cdq    
c000b29c:	f7 f9                	idiv   ecx
c000b29e:	4a                   	dec    edx
c000b29f:	83 fa 06             	cmp    edx,0x6
c000b2a2:	77 07                	ja     c000b2ab <calc_output_multi+0x513>
c000b2a4:	ff 24 95 60 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58a0]
c000b2ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2af:	4f                   	dec    edi
c000b2b0:	83 ec 0c             	sub    esp,0xc
c000b2b3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2ba:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2c1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c5:	e8 65 db 01 00       	call   c0028e2f <__extendsfdf2>
c000b2ca:	83 c4 10             	add    esp,0x10
c000b2cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e5:	e8 4e d1 01 00       	call   c0028438 <__muldf3>
c000b2ea:	83 c4 10             	add    esp,0x10
c000b2ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f5:	52                   	push   edx
c000b2f6:	50                   	push   eax
c000b2f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fd:	e8 b9 ca 01 00       	call   c0027dbb <__adddf3>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b308:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b30b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30f:	4f                   	dec    edi
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b31a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b321:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b325:	e8 05 db 01 00       	call   c0028e2f <__extendsfdf2>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b331:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b335:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b339:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b341:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b345:	e8 ee d0 01 00       	call   c0028438 <__muldf3>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b351:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b355:	52                   	push   edx
c000b356:	50                   	push   eax
c000b357:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b35a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35d:	e8 59 ca 01 00       	call   c0027dbb <__adddf3>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b368:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b36b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36f:	4f                   	dec    edi
c000b370:	83 ec 0c             	sub    esp,0xc
c000b373:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b376:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b37a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b381:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b385:	e8 a5 da 01 00       	call   c0028e2f <__extendsfdf2>
c000b38a:	83 c4 10             	add    esp,0x10
c000b38d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b391:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b395:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b399:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a5:	e8 8e d0 01 00       	call   c0028438 <__muldf3>
c000b3aa:	83 c4 10             	add    esp,0x10
c000b3ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b5:	52                   	push   edx
c000b3b6:	50                   	push   eax
c000b3b7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3ba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bd:	e8 f9 c9 01 00       	call   c0027dbb <__adddf3>
c000b3c2:	83 c4 10             	add    esp,0x10
c000b3c5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cf:	4f                   	dec    edi
c000b3d0:	83 ec 0c             	sub    esp,0xc
c000b3d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e5:	e8 45 da 01 00       	call   c0028e2f <__extendsfdf2>
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b401:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b405:	e8 2e d0 01 00       	call   c0028438 <__muldf3>
c000b40a:	83 c4 10             	add    esp,0x10
c000b40d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b411:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b415:	52                   	push   edx
c000b416:	50                   	push   eax
c000b417:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b41a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41d:	e8 99 c9 01 00       	call   c0027dbb <__adddf3>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b428:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b42b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42f:	4f                   	dec    edi
c000b430:	83 ec 0c             	sub    esp,0xc
c000b433:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b436:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b43a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b441:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b445:	e8 e5 d9 01 00       	call   c0028e2f <__extendsfdf2>
c000b44a:	83 c4 10             	add    esp,0x10
c000b44d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b451:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b465:	e8 ce cf 01 00       	call   c0028438 <__muldf3>
c000b46a:	83 c4 10             	add    esp,0x10
c000b46d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b471:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b475:	52                   	push   edx
c000b476:	50                   	push   eax
c000b477:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b47a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47d:	e8 39 c9 01 00       	call   c0027dbb <__adddf3>
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b488:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48f:	4f                   	dec    edi
c000b490:	83 ec 0c             	sub    esp,0xc
c000b493:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b496:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b49a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4a1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a5:	e8 85 d9 01 00       	call   c0028e2f <__extendsfdf2>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c5:	e8 6e cf 01 00       	call   c0028438 <__muldf3>
c000b4ca:	83 c4 10             	add    esp,0x10
c000b4cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d5:	52                   	push   edx
c000b4d6:	50                   	push   eax
c000b4d7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4da:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4dd:	e8 d9 c8 01 00       	call   c0027dbb <__adddf3>
c000b4e2:	83 c4 10             	add    esp,0x10
c000b4e5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ef:	4f                   	dec    edi
c000b4f0:	83 ec 0c             	sub    esp,0xc
c000b4f3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4fa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b501:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b505:	e8 25 d9 01 00       	call   c0028e2f <__extendsfdf2>
c000b50a:	83 c4 10             	add    esp,0x10
c000b50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b521:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b525:	e8 0e cf 01 00       	call   c0028438 <__muldf3>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b531:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b535:	52                   	push   edx
c000b536:	50                   	push   eax
c000b537:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b53a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53d:	e8 79 c8 01 00       	call   c0027dbb <__adddf3>
c000b542:	83 c4 10             	add    esp,0x10
c000b545:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b548:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b54b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54f:	4f                   	dec    edi
c000b550:	83 ec 0c             	sub    esp,0xc
c000b553:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b556:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b55a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b561:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b565:	e8 c5 d8 01 00       	call   c0028e2f <__extendsfdf2>
c000b56a:	83 c4 10             	add    esp,0x10
c000b56d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b571:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b575:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b579:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b585:	e8 ae ce 01 00       	call   c0028438 <__muldf3>
c000b58a:	83 c4 10             	add    esp,0x10
c000b58d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b591:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b595:	52                   	push   edx
c000b596:	50                   	push   eax
c000b597:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b59a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59d:	e8 19 c8 01 00       	call   c0027dbb <__adddf3>
c000b5a2:	83 c4 10             	add    esp,0x10
c000b5a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5ab:	85 ff                	test   edi,edi
c000b5ad:	0f 8f e1 fc ff ff    	jg     c000b294 <calc_output_multi+0x4fc>
c000b5b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b7:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c4:	0f 8f 3f fc ff ff    	jg     c000b209 <calc_output_multi+0x471>
c000b5ca:	be 08 00 00 00       	mov    esi,0x8
c000b5cf:	89 d8                	mov    eax,ebx
c000b5d1:	99                   	cdq    
c000b5d2:	f7 fe                	idiv   esi
c000b5d4:	4a                   	dec    edx
c000b5d5:	83 fa 06             	cmp    edx,0x6
c000b5d8:	77 07                	ja     c000b5e1 <calc_output_multi+0x849>
c000b5da:	ff 24 95 7c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5884]
c000b5e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e5:	4b                   	dec    ebx
c000b5e6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ea:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f8:	e8 be c7 01 00       	call   c0027dbb <__adddf3>
c000b5fd:	83 c4 10             	add    esp,0x10
c000b600:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b604:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b614:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b618:	e8 1b ce 01 00       	call   c0028438 <__muldf3>
c000b61d:	5d                   	pop    ebp
c000b61e:	59                   	pop    ecx
c000b61f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b623:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b627:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62f:	e8 d7 d6 01 00       	call   c0028d0b <__truncdfsf2>
c000b634:	83 c4 10             	add    esp,0x10
c000b637:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b63b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b642:	4b                   	dec    ebx
c000b643:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b647:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b652:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b655:	e8 61 c7 01 00       	call   c0027dbb <__adddf3>
c000b65a:	83 c4 10             	add    esp,0x10
c000b65d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b661:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b675:	e8 be cd 01 00       	call   c0028438 <__muldf3>
c000b67a:	59                   	pop    ecx
c000b67b:	5f                   	pop    edi
c000b67c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b680:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b688:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68c:	e8 7a d6 01 00       	call   c0028d0b <__truncdfsf2>
c000b691:	83 c4 10             	add    esp,0x10
c000b694:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b698:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b69b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69f:	4b                   	dec    ebx
c000b6a0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6ab:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6af:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b2:	e8 04 c7 01 00       	call   c0027dbb <__adddf3>
c000b6b7:	83 c4 10             	add    esp,0x10
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d2:	e8 61 cd 01 00       	call   c0028438 <__muldf3>
c000b6d7:	5f                   	pop    edi
c000b6d8:	5d                   	pop    ebp
c000b6d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e9:	e8 1d d6 01 00       	call   c0028d0b <__truncdfsf2>
c000b6ee:	83 c4 10             	add    esp,0x10
c000b6f1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fc:	4b                   	dec    ebx
c000b6fd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b701:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b708:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70f:	e8 a7 c6 01 00       	call   c0027dbb <__adddf3>
c000b714:	83 c4 10             	add    esp,0x10
c000b717:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b71b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b723:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72f:	e8 04 cd 01 00       	call   c0028438 <__muldf3>
c000b734:	5d                   	pop    ebp
c000b735:	59                   	pop    ecx
c000b736:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b73a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b746:	e8 c0 d5 01 00       	call   c0028d0b <__truncdfsf2>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b752:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b759:	4b                   	dec    ebx
c000b75a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b765:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b769:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76c:	e8 4a c6 01 00       	call   c0027dbb <__adddf3>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b778:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b784:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b788:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78c:	e8 a7 cc 01 00       	call   c0028438 <__muldf3>
c000b791:	59                   	pop    ecx
c000b792:	5f                   	pop    edi
c000b793:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b797:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b79b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a3:	e8 63 d5 01 00       	call   c0028d0b <__truncdfsf2>
c000b7a8:	83 c4 10             	add    esp,0x10
c000b7ab:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7af:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b6:	4b                   	dec    ebx
c000b7b7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c9:	e8 ed c5 01 00       	call   c0027dbb <__adddf3>
c000b7ce:	83 c4 10             	add    esp,0x10
c000b7d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e9:	e8 4a cc 01 00       	call   c0028438 <__muldf3>
c000b7ee:	5f                   	pop    edi
c000b7ef:	5d                   	pop    ebp
c000b7f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b800:	e8 06 d5 01 00       	call   c0028d0b <__truncdfsf2>
c000b805:	83 c4 10             	add    esp,0x10
c000b808:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b813:	4b                   	dec    ebx
c000b814:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b818:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b823:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b826:	e8 90 c5 01 00       	call   c0027dbb <__adddf3>
c000b82b:	83 c4 10             	add    esp,0x10
c000b82e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b832:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b842:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b846:	e8 ed cb 01 00       	call   c0028438 <__muldf3>
c000b84b:	5d                   	pop    ebp
c000b84c:	59                   	pop    ecx
c000b84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b851:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b855:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b859:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85d:	e8 a9 d4 01 00       	call   c0028d0b <__truncdfsf2>
c000b862:	83 c4 10             	add    esp,0x10
c000b865:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b869:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b870:	4b                   	dec    ebx
c000b871:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b875:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b880:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b883:	e8 33 c5 01 00       	call   c0027dbb <__adddf3>
c000b888:	83 c4 10             	add    esp,0x10
c000b88b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a3:	e8 90 cb 01 00       	call   c0028438 <__muldf3>
c000b8a8:	59                   	pop    ecx
c000b8a9:	5f                   	pop    edi
c000b8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ba:	e8 4c d4 01 00       	call   c0028d0b <__truncdfsf2>
c000b8bf:	83 c4 10             	add    esp,0x10
c000b8c2:	85 db                	test   ebx,ebx
c000b8c4:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8cb:	0f 8f fe fc ff ff    	jg     c000b5cf <calc_output_multi+0x837>
c000b8d1:	83 c4 4c             	add    esp,0x4c
c000b8d4:	5b                   	pop    ebx
c000b8d5:	5e                   	pop    esi
c000b8d6:	5f                   	pop    edi
c000b8d7:	5d                   	pop    ebp
c000b8d8:	c3                   	ret    

c000b8d9 <double_to_fp>:
c000b8d9:	83 ec 0c             	sub    esp,0xc
c000b8dc:	68 00 00 b0 40       	push   0x40b00000
c000b8e1:	6a 00                	push   0x0
c000b8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8eb:	e8 48 cb 01 00       	call   c0028438 <__muldf3>
c000b8f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f8:	83 c4 1c             	add    esp,0x1c
c000b8fb:	e9 c0 d5 01 00       	jmp    c0028ec0 <lrint>

c000b900 <prepare_data>:
c000b900:	55                   	push   ebp
c000b901:	57                   	push   edi
c000b902:	56                   	push   esi
c000b903:	53                   	push   ebx
c000b904:	83 ec 1c             	sub    esp,0x1c
c000b907:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b90b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90f:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b913:	0f 89 57 01 00 00    	jns    c000ba70 <prepare_data+0x170>
c000b919:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	85 d2                	test   edx,edx
c000b921:	75 0d                	jne    c000b930 <prepare_data+0x30>
c000b923:	8d 14 36             	lea    edx,[esi+esi*1]
c000b926:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b929:	29 d0                	sub    eax,edx
c000b92b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92e:	eb 44                	jmp    c000b974 <prepare_data+0x74>
c000b930:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b933:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b936:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b939:	39 c1                	cmp    ecx,eax
c000b93b:	7d 04                	jge    c000b941 <prepare_data+0x41>
c000b93d:	29 d0                	sub    eax,edx
c000b93f:	eb 2d                	jmp    c000b96e <prepare_data+0x6e>
c000b941:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b947:	29 d7                	sub    edi,edx
c000b949:	01 f7                	add    edi,esi
c000b94b:	51                   	push   ecx
c000b94c:	29 f2                	sub    edx,esi
c000b94e:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b955:	8d 14 90             	lea    edx,[eax+edx*4]
c000b958:	51                   	push   ecx
c000b959:	52                   	push   edx
c000b95a:	50                   	push   eax
c000b95b:	e8 44 4d ff ff       	call   c00006a4 <memmove>
c000b960:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b963:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b966:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b969:	29 f0                	sub    eax,esi
c000b96b:	83 c4 10             	add    esp,0x10
c000b96e:	29 f0                	sub    eax,esi
c000b970:	79 02                	jns    c000b974 <prepare_data+0x74>
c000b972:	31 c0                	xor    eax,eax
c000b974:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b977:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b97a:	29 ef                	sub    edi,ebp
c000b97c:	39 c7                	cmp    edi,eax
c000b97e:	7e 02                	jle    c000b982 <prepare_data+0x82>
c000b980:	89 c7                	mov    edi,eax
c000b982:	89 f8                	mov    eax,edi
c000b984:	99                   	cdq    
c000b985:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b988:	b8 15 00 00 00       	mov    eax,0x15
c000b98d:	29 d7                	sub    edi,edx
c000b98f:	0f 88 dd 00 00 00    	js     c000ba72 <prepare_data+0x172>
c000b995:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b998:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b99b:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99e:	0f 8f ce 00 00 00    	jg     c000ba72 <prepare_data+0x172>
c000b9a4:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9aa:	50                   	push   eax
c000b9ab:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b2:	50                   	push   eax
c000b9b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b9:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9bc:	50                   	push   eax
c000b9bd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c4:	50                   	push   eax
c000b9c5:	e8 98 4c ff ff       	call   c0000662 <memcpy>
c000b9ca:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cd:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9d0:	01 fd                	add    ebp,edi
c000b9d2:	01 f9                	add    ecx,edi
c000b9d4:	83 c4 10             	add    esp,0x10
c000b9d7:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9da:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9dd:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e4:	0f 85 86 00 00 00    	jne    c000ba70 <prepare_data+0x170>
c000b9ea:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9ed:	89 e8                	mov    eax,ebp
c000b9ef:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f2:	29 c8                	sub    eax,ecx
c000b9f4:	39 f8                	cmp    eax,edi
c000b9f6:	7d 78                	jge    c000ba70 <prepare_data+0x170>
c000b9f8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fc:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000ba00:	74 6e                	je     c000ba70 <prepare_data+0x170>
c000ba02:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba05:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba09:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0c:	29 ef                	sub    edi,ebp
c000ba0e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba12:	7c 29                	jl     c000ba3d <prepare_data+0x13d>
c000ba14:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba17:	29 f1                	sub    ecx,esi
c000ba19:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba20:	55                   	push   ebp
c000ba21:	50                   	push   eax
c000ba22:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba25:	50                   	push   eax
c000ba26:	52                   	push   edx
c000ba27:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba2b:	e8 74 4c ff ff       	call   c00006a4 <memmove>
c000ba30:	83 c4 10             	add    esp,0x10
c000ba33:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba36:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba40:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba43:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba46:	83 c6 05             	add    esi,0x5
c000ba49:	78 07                	js     c000ba52 <prepare_data+0x152>
c000ba4b:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4e:	39 cf                	cmp    edi,ecx
c000ba50:	7e 04                	jle    c000ba56 <prepare_data+0x156>
c000ba52:	89 ce                	mov    esi,ecx
c000ba54:	29 c6                	sub    esi,eax
c000ba56:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba59:	51                   	push   ecx
c000ba5a:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba61:	51                   	push   ecx
c000ba62:	6a 00                	push   0x0
c000ba64:	50                   	push   eax
c000ba65:	e8 02 4d ff ff       	call   c000076c <memset>
c000ba6a:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6d:	83 c4 10             	add    esp,0x10
c000ba70:	31 c0                	xor    eax,eax
c000ba72:	83 c4 1c             	add    esp,0x1c
c000ba75:	5b                   	pop    ebx
c000ba76:	5e                   	pop    esi
c000ba77:	5f                   	pop    edi
c000ba78:	5d                   	pop    ebp
c000ba79:	c3                   	ret    

c000ba7a <sinc_multichan_vari_process>:
c000ba7a:	55                   	push   ebp
c000ba7b:	ba 05 00 00 00       	mov    edx,0x5
c000ba80:	57                   	push   edi
c000ba81:	56                   	push   esi
c000ba82:	53                   	push   ebx
c000ba83:	83 ec 4c             	sub    esp,0x4c
c000ba86:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba8a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8e:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba91:	85 db                	test   ebx,ebx
c000ba93:	0f 84 9b 06 00 00    	je     c000c134 <sinc_multichan_vari_process+0x6ba>
c000ba99:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9f:	0f af c5             	imul   eax,ebp
c000baa2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baaf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab6:	0f af c5             	imul   eax,ebp
c000bab9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000babc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babf:	8b 06                	mov    eax,DWORD PTR [esi]
c000bac1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac9:	68 00 00 70 3f       	push   0x3f700000
c000bace:	6a 00                	push   0x0
c000bad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad8:	e8 2a d2 01 00       	call   c0028d07 <__ltdf2>
c000badd:	83 c4 10             	add    esp,0x10
c000bae0:	ba 16 00 00 00       	mov    edx,0x16
c000bae5:	85 c0                	test   eax,eax
c000bae7:	0f 88 47 06 00 00    	js     c000c134 <sinc_multichan_vari_process+0x6ba>
c000baed:	68 00 00 70 40       	push   0x40700000
c000baf2:	6a 00                	push   0x0
c000baf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafc:	e8 e8 d1 01 00       	call   c0028ce9 <__gtdf2>
c000bb01:	83 c4 10             	add    esp,0x10
c000bb04:	ba 16 00 00 00       	mov    edx,0x16
c000bb09:	85 c0                	test   eax,eax
c000bb0b:	0f 8f 23 06 00 00    	jg     c000c134 <sinc_multichan_vari_process+0x6ba>
c000bb11:	83 ec 0c             	sub    esp,0xc
c000bb14:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb17:	e8 7f cf 01 00       	call   c0028a9b <__floatsidf>
c000bb1c:	83 c4 10             	add    esp,0x10
c000bb1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb27:	68 00 00 00 40       	push   0x40000000
c000bb2c:	6a 00                	push   0x0
c000bb2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb36:	e8 80 c2 01 00       	call   c0027dbb <__adddf3>
c000bb3b:	59                   	pop    ecx
c000bb3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb40:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb44:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb47:	e8 4f cf 01 00       	call   c0028a9b <__floatsidf>
c000bb4c:	83 c4 10             	add    esp,0x10
c000bb4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb53:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb57:	52                   	push   edx
c000bb58:	50                   	push   eax
c000bb59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb61:	e8 b6 cb 01 00       	call   c002871c <__divdf3>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb71:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb74:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	e8 55 d1 01 00       	call   c0028ce9 <__gtdf2>
c000bb94:	83 c4 10             	add    esp,0x10
c000bb97:	85 c0                	test   eax,eax
c000bb99:	7e 2d                	jle    c000bbc8 <sinc_multichan_vari_process+0x14e>
c000bb9b:	68 00 00 f0 3f       	push   0x3ff00000
c000bba0:	6a 00                	push   0x0
c000bba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbaa:	e8 58 d1 01 00       	call   c0028d07 <__ltdf2>
c000bbaf:	83 c4 10             	add    esp,0x10
c000bbb2:	85 c0                	test   eax,eax
c000bbb4:	79 4d                	jns    c000bc03 <sinc_multichan_vari_process+0x189>
c000bbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc6:	eb 1b                	jmp    c000bbe3 <sinc_multichan_vari_process+0x169>
c000bbc8:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcd:	6a 00                	push   0x0
c000bbcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd7:	e8 2b d1 01 00       	call   c0028d07 <__ltdf2>
c000bbdc:	83 c4 10             	add    esp,0x10
c000bbdf:	85 c0                	test   eax,eax
c000bbe1:	79 20                	jns    c000bc03 <sinc_multichan_vari_process+0x189>
c000bbe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf3:	e8 24 cb 01 00       	call   c002871c <__divdf3>
c000bbf8:	83 c4 10             	add    esp,0x10
c000bbfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc03:	50                   	push   eax
c000bc04:	50                   	push   eax
c000bc05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0d:	e8 ae d2 01 00       	call   c0028ec0 <lrint>
c000bc12:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc15:	40                   	inc    eax
c000bc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1a:	0f af c5             	imul   eax,ebp
c000bc1d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc21:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc28:	58                   	pop    eax
c000bc29:	5a                   	pop    edx
c000bc2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc32:	e8 89 d2 01 00       	call   c0028ec0 <lrint>
c000bc37:	83 ec 0c             	sub    esp,0xc
c000bc3a:	50                   	push   eax
c000bc3b:	e8 5b ce 01 00       	call   c0028a9b <__floatsidf>
c000bc40:	83 c4 10             	add    esp,0x10
c000bc43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc47:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc4b:	52                   	push   edx
c000bc4c:	50                   	push   eax
c000bc4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc55:	e8 b2 c7 01 00       	call   c002840c <__subdf3>
c000bc5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc62:	83 c4 20             	add    esp,0x20
c000bc65:	6a 00                	push   0x0
c000bc67:	6a 00                	push   0x0
c000bc69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc71:	e8 91 d0 01 00       	call   c0028d07 <__ltdf2>
c000bc76:	83 c4 10             	add    esp,0x10
c000bc79:	85 c0                	test   eax,eax
c000bc7b:	79 1f                	jns    c000bc9c <sinc_multichan_vari_process+0x222>
c000bc7d:	68 00 00 f0 3f       	push   0x3ff00000
c000bc82:	6a 00                	push   0x0
c000bc84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8c:	e8 2a c1 01 00       	call   c0027dbb <__adddf3>
c000bc91:	83 c4 10             	add    esp,0x10
c000bc94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9f:	83 ec 10             	sub    esp,0x10
c000bca2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb9:	e8 4e c7 01 00       	call   c002840c <__subdf3>
c000bcbe:	83 c4 18             	add    esp,0x18
c000bcc1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc9:	52                   	push   edx
c000bcca:	50                   	push   eax
c000bccb:	e8 f0 d1 01 00       	call   c0028ec0 <lrint>
c000bcd0:	0f af e8             	imul   ebp,eax
c000bcd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd7:	01 e8                	add    eax,ebp
c000bcd9:	99                   	cdq    
c000bcda:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bce0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce8:	68 00 00 f0 3f       	push   0x3ff00000
c000bced:	6a 00                	push   0x0
c000bcef:	e8 28 ca 01 00       	call   c002871c <__divdf3>
c000bcf4:	83 c4 10             	add    esp,0x10
c000bcf7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcfb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd04:	68 23 42 92 0c       	push   0xc924223
c000bd09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd11:	e8 a5 c0 01 00       	call   c0027dbb <__adddf3>
c000bd16:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd1a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1e:	83 c4 20             	add    esp,0x20
c000bd21:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd29:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd37:	7d 50                	jge    c000bd89 <sinc_multichan_vari_process+0x30f>
c000bd39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3f:	01 c8                	add    eax,ecx
c000bd41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd44:	99                   	cdq    
c000bd45:	f7 f9                	idiv   ecx
c000bd47:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd4b:	7d 0c                	jge    c000bd59 <sinc_multichan_vari_process+0x2df>
c000bd4d:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd50:	85 ed                	test   ebp,ebp
c000bd52:	79 6b                	jns    c000bdbf <sinc_multichan_vari_process+0x345>
c000bd54:	e9 e6 00 00 00       	jmp    c000be3f <sinc_multichan_vari_process+0x3c5>
c000bd59:	50                   	push   eax
c000bd5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5e:	57                   	push   edi
c000bd5f:	53                   	push   ebx
c000bd60:	e8 9b fb ff ff       	call   c000b900 <prepare_data>
c000bd65:	83 c4 10             	add    esp,0x10
c000bd68:	89 c2                	mov    edx,eax
c000bd6a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6d:	85 c0                	test   eax,eax
c000bd6f:	0f 85 bf 03 00 00    	jne    c000c134 <sinc_multichan_vari_process+0x6ba>
c000bd75:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd78:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd7b:	01 c8                	add    eax,ecx
c000bd7d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd80:	99                   	cdq    
c000bd81:	f7 f9                	idiv   ecx
c000bd83:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd87:	7c c4                	jl     c000bd4d <sinc_multichan_vari_process+0x2d3>
c000bd89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd91:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd94:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9f:	89 06                	mov    DWORD PTR [esi],eax
c000bda1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdb1:	99                   	cdq    
c000bdb2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb5:	31 d2                	xor    edx,edx
c000bdb7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdba:	e9 75 03 00 00       	jmp    c000c134 <sinc_multichan_vari_process+0x6ba>
c000bdbf:	83 ec 0c             	sub    esp,0xc
c000bdc2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc5:	e8 d1 cc 01 00       	call   c0028a9b <__floatsidf>
c000bdca:	83 c4 10             	add    esp,0x10
c000bdcd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdd1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde5:	e8 d1 bf 01 00       	call   c0027dbb <__adddf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdf1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be05:	e8 b1 bf 01 00       	call   c0027dbb <__adddf3>
c000be0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be11:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be15:	e8 81 cc 01 00       	call   c0028a9b <__floatsidf>
c000be1a:	83 c4 10             	add    esp,0x10
c000be1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be25:	52                   	push   edx
c000be26:	50                   	push   eax
c000be27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2f:	e8 d1 ce 01 00       	call   c0028d05 <__gedf2>
c000be34:	83 c4 10             	add    esp,0x10
c000be37:	85 c0                	test   eax,eax
c000be39:	0f 89 4a ff ff ff    	jns    c000bd89 <sinc_multichan_vari_process+0x30f>
c000be3f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be43:	0f 8e ed 00 00 00    	jle    c000bf36 <sinc_multichan_vari_process+0x4bc>
c000be49:	83 ec 10             	sub    esp,0x10
c000be4c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be52:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be55:	ff 36                	push   DWORD PTR [esi]
c000be57:	e8 b0 c5 01 00       	call   c002840c <__subdf3>
c000be5c:	83 c4 18             	add    esp,0x18
c000be5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be63:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be67:	52                   	push   edx
c000be68:	50                   	push   eax
c000be69:	e8 32 d0 01 00       	call   c0028ea0 <fabs>
c000be6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be72:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be76:	83 c4 10             	add    esp,0x10
c000be79:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be8b:	e8 59 ce 01 00       	call   c0028ce9 <__gtdf2>
c000be90:	83 c4 10             	add    esp,0x10
c000be93:	85 c0                	test   eax,eax
c000be95:	0f 8e 9b 00 00 00    	jle    c000bf36 <sinc_multichan_vari_process+0x4bc>
c000be9b:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bea0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea8:	52                   	push   edx
c000bea9:	50                   	push   eax
c000beaa:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bead:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beb0:	e8 57 c5 01 00       	call   c002840c <__subdf3>
c000beb5:	59                   	pop    ecx
c000beb6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beba:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebe:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bec1:	e8 d5 cb 01 00       	call   c0028a9b <__floatsidf>
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed1:	52                   	push   edx
c000bed2:	50                   	push   eax
c000bed3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bedb:	e8 58 c5 01 00       	call   c0028438 <__muldf3>
c000bee0:	5d                   	pop    ebp
c000bee1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beec:	e8 aa cb 01 00       	call   c0028a9b <__floatsidf>
c000bef1:	83 c4 10             	add    esp,0x10
c000bef4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befc:	52                   	push   edx
c000befd:	50                   	push   eax
c000befe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf06:	e8 11 c8 01 00       	call   c002871c <__divdf3>
c000bf0b:	83 c4 10             	add    esp,0x10
c000bf0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf12:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf26:	e8 90 be 01 00       	call   c0027dbb <__adddf3>
c000bf2b:	83 c4 10             	add    esp,0x10
c000bf2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf36:	83 ec 0c             	sub    esp,0xc
c000bf39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3c:	e8 5a cb 01 00       	call   c0028a9b <__floatsidf>
c000bf41:	83 c4 10             	add    esp,0x10
c000bf44:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf48:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5c:	e8 a6 cd 01 00       	call   c0028d07 <__ltdf2>
c000bf61:	83 c4 10             	add    esp,0x10
c000bf64:	85 c0                	test   eax,eax
c000bf66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf72:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf76:	78 10                	js     c000bf88 <sinc_multichan_vari_process+0x50e>
c000bf78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf84:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf98:	e8 9b c4 01 00       	call   c0028438 <__muldf3>
c000bf9d:	59                   	pop    ecx
c000bf9e:	5d                   	pop    ebp
c000bf9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfaf:	e8 25 f9 ff ff       	call   c000b8d9 <double_to_fp>
c000bfb4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb8:	89 c5                	mov    ebp,eax
c000bfba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc6:	e8 6d c4 01 00       	call   c0028438 <__muldf3>
c000bfcb:	83 c4 18             	add    esp,0x18
c000bfce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd6:	52                   	push   edx
c000bfd7:	50                   	push   eax
c000bfd8:	e8 fc f8 ff ff       	call   c000b8d9 <double_to_fp>
c000bfdd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfe0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe7:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfea:	50                   	push   eax
c000bfeb:	50                   	push   eax
c000bfec:	50                   	push   eax
c000bfed:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bff0:	e8 a6 ca 01 00       	call   c0028a9b <__floatsidf>
c000bff5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c001:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c005:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c009:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00d:	e8 0a c7 01 00       	call   c002871c <__divdf3>
c000c012:	83 c4 1c             	add    esp,0x1c
c000c015:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c019:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01d:	52                   	push   edx
c000c01e:	89 ea                	mov    edx,ebp
c000c020:	50                   	push   eax
c000c021:	89 d8                	mov    eax,ebx
c000c023:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c026:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c02a:	e8 69 ed ff ff       	call   c000ad98 <calc_output_multi>
c000c02f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c032:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c039:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c041:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c045:	e8 d2 c6 01 00       	call   c002871c <__divdf3>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c051:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c055:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c059:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c061:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c065:	e8 51 bd 01 00       	call   c0027dbb <__adddf3>
c000c06a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c072:	83 c4 28             	add    esp,0x28
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 3e ce 01 00       	call   c0028ec0 <lrint>
c000c082:	83 ec 0c             	sub    esp,0xc
c000c085:	50                   	push   eax
c000c086:	e8 10 ca 01 00       	call   c0028a9b <__floatsidf>
c000c08b:	83 c4 10             	add    esp,0x10
c000c08e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c092:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c096:	52                   	push   edx
c000c097:	50                   	push   eax
c000c098:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0a0:	e8 67 c3 01 00       	call   c002840c <__subdf3>
c000c0a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ad:	83 c4 20             	add    esp,0x20
c000c0b0:	6a 00                	push   0x0
c000c0b2:	6a 00                	push   0x0
c000c0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0bc:	e8 46 cc 01 00       	call   c0028d07 <__ltdf2>
c000c0c1:	83 c4 10             	add    esp,0x10
c000c0c4:	85 c0                	test   eax,eax
c000c0c6:	79 20                	jns    c000c0e8 <sinc_multichan_vari_process+0x66e>
c000c0c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	e8 de bc 01 00       	call   c0027dbb <__adddf3>
c000c0dd:	83 c4 10             	add    esp,0x10
c000c0e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0eb:	83 ec 10             	sub    esp,0x10
c000c0ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c101:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c105:	e8 02 c3 01 00       	call   c002840c <__subdf3>
c000c10a:	83 c4 18             	add    esp,0x18
c000c10d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c111:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c115:	52                   	push   edx
c000c116:	50                   	push   eax
c000c117:	e8 a4 cd 01 00       	call   c0028ec0 <lrint>
c000c11c:	0f af e8             	imul   ebp,eax
c000c11f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c123:	83 c4 10             	add    esp,0x10
c000c126:	01 e8                	add    eax,ebp
c000c128:	99                   	cdq    
c000c129:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12f:	e9 fd fb ff ff       	jmp    c000bd31 <sinc_multichan_vari_process+0x2b7>
c000c134:	83 c4 4c             	add    esp,0x4c
c000c137:	89 d0                	mov    eax,edx
c000c139:	5b                   	pop    ebx
c000c13a:	5e                   	pop    esi
c000c13b:	5f                   	pop    edi
c000c13c:	5d                   	pop    ebp
c000c13d:	c3                   	ret    

c000c13e <sinc_hex_vari_process>:
c000c13e:	55                   	push   ebp
c000c13f:	ba 05 00 00 00       	mov    edx,0x5
c000c144:	57                   	push   edi
c000c145:	56                   	push   esi
c000c146:	53                   	push   ebx
c000c147:	83 ec 4c             	sub    esp,0x4c
c000c14a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c152:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c155:	85 db                	test   ebx,ebx
c000c157:	0f 84 9c 06 00 00    	je     c000c7f9 <sinc_hex_vari_process+0x6bb>
c000c15d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c160:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c163:	0f af c7             	imul   eax,edi
c000c166:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c169:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c173:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c17a:	0f af c7             	imul   eax,edi
c000c17d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c180:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c183:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c186:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c18a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18e:	68 00 00 70 3f       	push   0x3f700000
c000c193:	6a 00                	push   0x0
c000c195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19d:	e8 65 cb 01 00       	call   c0028d07 <__ltdf2>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	ba 16 00 00 00       	mov    edx,0x16
c000c1aa:	85 c0                	test   eax,eax
c000c1ac:	0f 88 47 06 00 00    	js     c000c7f9 <sinc_hex_vari_process+0x6bb>
c000c1b2:	68 00 00 70 40       	push   0x40700000
c000c1b7:	6a 00                	push   0x0
c000c1b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1c1:	e8 23 cb 01 00       	call   c0028ce9 <__gtdf2>
c000c1c6:	83 c4 10             	add    esp,0x10
c000c1c9:	ba 16 00 00 00       	mov    edx,0x16
c000c1ce:	85 c0                	test   eax,eax
c000c1d0:	0f 8f 23 06 00 00    	jg     c000c7f9 <sinc_hex_vari_process+0x6bb>
c000c1d6:	83 ec 0c             	sub    esp,0xc
c000c1d9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1dc:	e8 ba c8 01 00       	call   c0028a9b <__floatsidf>
c000c1e1:	83 c4 10             	add    esp,0x10
c000c1e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ec:	68 00 00 00 40       	push   0x40000000
c000c1f1:	6a 00                	push   0x0
c000c1f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fb:	e8 bb bb 01 00       	call   c0027dbb <__adddf3>
c000c200:	59                   	pop    ecx
c000c201:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c205:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c209:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20c:	e8 8a c8 01 00       	call   c0028a9b <__floatsidf>
c000c211:	83 c4 10             	add    esp,0x10
c000c214:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c218:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21c:	52                   	push   edx
c000c21d:	50                   	push   eax
c000c21e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c222:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c226:	e8 f1 c4 01 00       	call   c002871c <__divdf3>
c000c22b:	83 c4 10             	add    esp,0x10
c000c22e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c232:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c236:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c239:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	e8 90 ca 01 00       	call   c0028ce9 <__gtdf2>
c000c259:	83 c4 10             	add    esp,0x10
c000c25c:	85 c0                	test   eax,eax
c000c25e:	7e 2d                	jle    c000c28d <sinc_hex_vari_process+0x14f>
c000c260:	68 00 00 f0 3f       	push   0x3ff00000
c000c265:	6a 00                	push   0x0
c000c267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26f:	e8 93 ca 01 00       	call   c0028d07 <__ltdf2>
c000c274:	83 c4 10             	add    esp,0x10
c000c277:	85 c0                	test   eax,eax
c000c279:	79 4d                	jns    c000c2c8 <sinc_hex_vari_process+0x18a>
c000c27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c287:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c28b:	eb 1b                	jmp    c000c2a8 <sinc_hex_vari_process+0x16a>
c000c28d:	68 00 00 f0 3f       	push   0x3ff00000
c000c292:	6a 00                	push   0x0
c000c294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29c:	e8 66 ca 01 00       	call   c0028d07 <__ltdf2>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	85 c0                	test   eax,eax
c000c2a6:	79 20                	jns    c000c2c8 <sinc_hex_vari_process+0x18a>
c000c2a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b8:	e8 5f c4 01 00       	call   c002871c <__divdf3>
c000c2bd:	83 c4 10             	add    esp,0x10
c000c2c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c8:	50                   	push   eax
c000c2c9:	50                   	push   eax
c000c2ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d2:	e8 e9 cb 01 00       	call   c0028ec0 <lrint>
c000c2d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2da:	40                   	inc    eax
c000c2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2df:	0f af c7             	imul   eax,edi
c000c2e2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2ed:	58                   	pop    eax
c000c2ee:	5a                   	pop    edx
c000c2ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f7:	e8 c4 cb 01 00       	call   c0028ec0 <lrint>
c000c2fc:	83 ec 0c             	sub    esp,0xc
c000c2ff:	50                   	push   eax
c000c300:	e8 96 c7 01 00       	call   c0028a9b <__floatsidf>
c000c305:	83 c4 10             	add    esp,0x10
c000c308:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c310:	52                   	push   edx
c000c311:	50                   	push   eax
c000c312:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c316:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c31a:	e8 ed c0 01 00       	call   c002840c <__subdf3>
c000c31f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c323:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c327:	83 c4 20             	add    esp,0x20
c000c32a:	6a 00                	push   0x0
c000c32c:	6a 00                	push   0x0
c000c32e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c336:	e8 cc c9 01 00       	call   c0028d07 <__ltdf2>
c000c33b:	83 c4 10             	add    esp,0x10
c000c33e:	85 c0                	test   eax,eax
c000c340:	79 1f                	jns    c000c361 <sinc_hex_vari_process+0x223>
c000c342:	68 00 00 f0 3f       	push   0x3ff00000
c000c347:	6a 00                	push   0x0
c000c349:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c351:	e8 65 ba 01 00       	call   c0027dbb <__adddf3>
c000c356:	83 c4 10             	add    esp,0x10
c000c359:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c361:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c364:	83 ec 10             	sub    esp,0x10
c000c367:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c36b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c376:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37e:	e8 89 c0 01 00       	call   c002840c <__subdf3>
c000c383:	83 c4 18             	add    esp,0x18
c000c386:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c38a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38e:	52                   	push   edx
c000c38f:	50                   	push   eax
c000c390:	e8 2b cb 01 00       	call   c0028ec0 <lrint>
c000c395:	0f af f8             	imul   edi,eax
c000c398:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39c:	01 f8                	add    eax,edi
c000c39e:	99                   	cdq    
c000c39f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b2:	6a 00                	push   0x0
c000c3b4:	e8 63 c3 01 00       	call   c002871c <__divdf3>
c000c3b9:	83 c4 10             	add    esp,0x10
c000c3bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c9:	68 23 42 92 0c       	push   0xc924223
c000c3ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d6:	e8 e0 b9 01 00       	call   c0027dbb <__adddf3>
c000c3db:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3df:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e3:	83 c4 20             	add    esp,0x20
c000c3e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ee:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fc:	7d 50                	jge    c000c44e <sinc_hex_vari_process+0x310>
c000c3fe:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c401:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c404:	01 c8                	add    eax,ecx
c000c406:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c409:	99                   	cdq    
c000c40a:	f7 f9                	idiv   ecx
c000c40c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c410:	7d 0c                	jge    c000c41e <sinc_hex_vari_process+0x2e0>
c000c412:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c415:	85 ff                	test   edi,edi
c000c417:	79 6c                	jns    c000c485 <sinc_hex_vari_process+0x347>
c000c419:	e9 e7 00 00 00       	jmp    c000c505 <sinc_hex_vari_process+0x3c7>
c000c41e:	50                   	push   eax
c000c41f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c423:	56                   	push   esi
c000c424:	53                   	push   ebx
c000c425:	e8 d6 f4 ff ff       	call   c000b900 <prepare_data>
c000c42a:	83 c4 10             	add    esp,0x10
c000c42d:	89 c2                	mov    edx,eax
c000c42f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c432:	85 c0                	test   eax,eax
c000c434:	0f 85 bf 03 00 00    	jne    c000c7f9 <sinc_hex_vari_process+0x6bb>
c000c43a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c440:	01 c8                	add    eax,ecx
c000c442:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c445:	99                   	cdq    
c000c446:	f7 f9                	idiv   ecx
c000c448:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44c:	7c c4                	jl     c000c412 <sinc_hex_vari_process+0x2d4>
c000c44e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c452:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c456:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c459:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c460:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c464:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c467:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c46a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c474:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c477:	99                   	cdq    
c000c478:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c47b:	31 d2                	xor    edx,edx
c000c47d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c480:	e9 74 03 00 00       	jmp    c000c7f9 <sinc_hex_vari_process+0x6bb>
c000c485:	83 ec 0c             	sub    esp,0xc
c000c488:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c48b:	e8 0b c6 01 00       	call   c0028a9b <__floatsidf>
c000c490:	83 c4 10             	add    esp,0x10
c000c493:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c497:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c49b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ab:	e8 0b b9 01 00       	call   c0027dbb <__adddf3>
c000c4b0:	83 c4 10             	add    esp,0x10
c000c4b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cb:	e8 eb b8 01 00       	call   c0027dbb <__adddf3>
c000c4d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4db:	e8 bb c5 01 00       	call   c0028a9b <__floatsidf>
c000c4e0:	83 c4 10             	add    esp,0x10
c000c4e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4eb:	52                   	push   edx
c000c4ec:	50                   	push   eax
c000c4ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f5:	e8 0b c8 01 00       	call   c0028d05 <__gedf2>
c000c4fa:	83 c4 10             	add    esp,0x10
c000c4fd:	85 c0                	test   eax,eax
c000c4ff:	0f 89 49 ff ff ff    	jns    c000c44e <sinc_hex_vari_process+0x310>
c000c505:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c509:	0f 8e ef 00 00 00    	jle    c000c5fe <sinc_hex_vari_process+0x4c0>
c000c50f:	83 ec 10             	sub    esp,0x10
c000c512:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c515:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c518:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c51b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51e:	e8 e9 be 01 00       	call   c002840c <__subdf3>
c000c523:	83 c4 18             	add    esp,0x18
c000c526:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c52a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52e:	52                   	push   edx
c000c52f:	50                   	push   eax
c000c530:	e8 6b c9 01 00       	call   c0028ea0 <fabs>
c000c535:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c539:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53d:	83 c4 10             	add    esp,0x10
c000c540:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c545:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c54a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c552:	e8 92 c7 01 00       	call   c0028ce9 <__gtdf2>
c000c557:	83 c4 10             	add    esp,0x10
c000c55a:	85 c0                	test   eax,eax
c000c55c:	0f 8e 9c 00 00 00    	jle    c000c5fe <sinc_hex_vari_process+0x4c0>
c000c562:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c565:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c568:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c570:	52                   	push   edx
c000c571:	50                   	push   eax
c000c572:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c575:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c578:	e8 8f be 01 00       	call   c002840c <__subdf3>
c000c57d:	59                   	pop    ecx
c000c57e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c582:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c586:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c589:	e8 0d c5 01 00       	call   c0028a9b <__floatsidf>
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c595:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c599:	52                   	push   edx
c000c59a:	50                   	push   eax
c000c59b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a3:	e8 90 be 01 00       	call   c0028438 <__muldf3>
c000c5a8:	5f                   	pop    edi
c000c5a9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ad:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5b1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b4:	e8 e2 c4 01 00       	call   c0028a9b <__floatsidf>
c000c5b9:	83 c4 10             	add    esp,0x10
c000c5bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c4:	52                   	push   edx
c000c5c5:	50                   	push   eax
c000c5c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ce:	e8 49 c1 01 00       	call   c002871c <__divdf3>
c000c5d3:	83 c4 10             	add    esp,0x10
c000c5d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ee:	e8 c8 b7 01 00       	call   c0027dbb <__adddf3>
c000c5f3:	83 c4 10             	add    esp,0x10
c000c5f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fe:	83 ec 0c             	sub    esp,0xc
c000c601:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c604:	e8 92 c4 01 00       	call   c0028a9b <__floatsidf>
c000c609:	83 c4 10             	add    esp,0x10
c000c60c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c610:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c624:	e8 de c6 01 00       	call   c0028d07 <__ltdf2>
c000c629:	83 c4 10             	add    esp,0x10
c000c62c:	85 c0                	test   eax,eax
c000c62e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c632:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c636:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c63a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63e:	78 10                	js     c000c650 <sinc_hex_vari_process+0x512>
c000c640:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c644:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c648:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c650:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c654:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c658:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c660:	e8 d3 bd 01 00       	call   c0028438 <__muldf3>
c000c665:	59                   	pop    ecx
c000c666:	5f                   	pop    edi
c000c667:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c66b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c673:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c677:	e8 5d f2 ff ff       	call   c000b8d9 <double_to_fp>
c000c67c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c680:	89 c7                	mov    edi,eax
c000c682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c686:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68e:	e8 a5 bd 01 00       	call   c0028438 <__muldf3>
c000c693:	83 c4 18             	add    esp,0x18
c000c696:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c69a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69e:	52                   	push   edx
c000c69f:	50                   	push   eax
c000c6a0:	e8 34 f2 ff ff       	call   c000b8d9 <double_to_fp>
c000c6a5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6ac:	83 c4 0c             	add    esp,0xc
c000c6af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b2:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b5:	50                   	push   eax
c000c6b6:	50                   	push   eax
c000c6b7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6ba:	e8 dc c3 01 00       	call   c0028a9b <__floatsidf>
c000c6bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d7:	e8 40 c0 01 00       	call   c002871c <__divdf3>
c000c6dc:	83 c4 18             	add    esp,0x18
c000c6df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e7:	52                   	push   edx
c000c6e8:	89 fa                	mov    edx,edi
c000c6ea:	50                   	push   eax
c000c6eb:	89 d8                	mov    eax,ebx
c000c6ed:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6f1:	e8 50 de ff ff       	call   c000a546 <calc_output_hex>
c000c6f6:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c702:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c706:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c70a:	e8 0d c0 01 00       	call   c002871c <__divdf3>
c000c70f:	83 c4 10             	add    esp,0x10
c000c712:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c716:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c722:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c726:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c72a:	e8 8c b6 01 00       	call   c0027dbb <__adddf3>
c000c72f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c733:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c737:	83 c4 18             	add    esp,0x18
c000c73a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c742:	e8 79 c7 01 00       	call   c0028ec0 <lrint>
c000c747:	83 ec 0c             	sub    esp,0xc
c000c74a:	50                   	push   eax
c000c74b:	e8 4b c3 01 00       	call   c0028a9b <__floatsidf>
c000c750:	83 c4 10             	add    esp,0x10
c000c753:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c757:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c75b:	52                   	push   edx
c000c75c:	50                   	push   eax
c000c75d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c761:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c765:	e8 a2 bc 01 00       	call   c002840c <__subdf3>
c000c76a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c772:	83 c4 20             	add    esp,0x20
c000c775:	6a 00                	push   0x0
c000c777:	6a 00                	push   0x0
c000c779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c781:	e8 81 c5 01 00       	call   c0028d07 <__ltdf2>
c000c786:	83 c4 10             	add    esp,0x10
c000c789:	85 c0                	test   eax,eax
c000c78b:	79 20                	jns    c000c7ad <sinc_hex_vari_process+0x66f>
c000c78d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	e8 19 b6 01 00       	call   c0027dbb <__adddf3>
c000c7a2:	83 c4 10             	add    esp,0x10
c000c7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ad:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7b0:	83 ec 10             	sub    esp,0x10
c000c7b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7ca:	e8 3d bc 01 00       	call   c002840c <__subdf3>
c000c7cf:	83 c4 18             	add    esp,0x18
c000c7d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7da:	52                   	push   edx
c000c7db:	50                   	push   eax
c000c7dc:	e8 df c6 01 00       	call   c0028ec0 <lrint>
c000c7e1:	0f af f8             	imul   edi,eax
c000c7e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	01 f8                	add    eax,edi
c000c7ed:	99                   	cdq    
c000c7ee:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7f1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f4:	e9 fd fb ff ff       	jmp    c000c3f6 <sinc_hex_vari_process+0x2b8>
c000c7f9:	83 c4 4c             	add    esp,0x4c
c000c7fc:	89 d0                	mov    eax,edx
c000c7fe:	5b                   	pop    ebx
c000c7ff:	5e                   	pop    esi
c000c800:	5f                   	pop    edi
c000c801:	5d                   	pop    ebp
c000c802:	c3                   	ret    

c000c803 <sinc_quad_vari_process>:
c000c803:	55                   	push   ebp
c000c804:	ba 05 00 00 00       	mov    edx,0x5
c000c809:	57                   	push   edi
c000c80a:	56                   	push   esi
c000c80b:	53                   	push   ebx
c000c80c:	83 ec 4c             	sub    esp,0x4c
c000c80f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c813:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c817:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c81a:	85 db                	test   ebx,ebx
c000c81c:	0f 84 9c 06 00 00    	je     c000cebe <sinc_quad_vari_process+0x6bb>
c000c822:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c825:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c828:	0f af c7             	imul   eax,edi
c000c82b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c831:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c838:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83f:	0f af c7             	imul   eax,edi
c000c842:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c845:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c848:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c84b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c853:	68 00 00 70 3f       	push   0x3f700000
c000c858:	6a 00                	push   0x0
c000c85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c862:	e8 a0 c4 01 00       	call   c0028d07 <__ltdf2>
c000c867:	83 c4 10             	add    esp,0x10
c000c86a:	ba 16 00 00 00       	mov    edx,0x16
c000c86f:	85 c0                	test   eax,eax
c000c871:	0f 88 47 06 00 00    	js     c000cebe <sinc_quad_vari_process+0x6bb>
c000c877:	68 00 00 70 40       	push   0x40700000
c000c87c:	6a 00                	push   0x0
c000c87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c886:	e8 5e c4 01 00       	call   c0028ce9 <__gtdf2>
c000c88b:	83 c4 10             	add    esp,0x10
c000c88e:	ba 16 00 00 00       	mov    edx,0x16
c000c893:	85 c0                	test   eax,eax
c000c895:	0f 8f 23 06 00 00    	jg     c000cebe <sinc_quad_vari_process+0x6bb>
c000c89b:	83 ec 0c             	sub    esp,0xc
c000c89e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c8a1:	e8 f5 c1 01 00       	call   c0028a9b <__floatsidf>
c000c8a6:	83 c4 10             	add    esp,0x10
c000c8a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8b1:	68 00 00 00 40       	push   0x40000000
c000c8b6:	6a 00                	push   0x0
c000c8b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c0:	e8 f6 b4 01 00       	call   c0027dbb <__adddf3>
c000c8c5:	59                   	pop    ecx
c000c8c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8ce:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8d1:	e8 c5 c1 01 00       	call   c0028a9b <__floatsidf>
c000c8d6:	83 c4 10             	add    esp,0x10
c000c8d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8e1:	52                   	push   edx
c000c8e2:	50                   	push   eax
c000c8e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8eb:	e8 2c be 01 00       	call   c002871c <__divdf3>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8fb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fe:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c901:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c905:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	e8 cb c3 01 00       	call   c0028ce9 <__gtdf2>
c000c91e:	83 c4 10             	add    esp,0x10
c000c921:	85 c0                	test   eax,eax
c000c923:	7e 2d                	jle    c000c952 <sinc_quad_vari_process+0x14f>
c000c925:	68 00 00 f0 3f       	push   0x3ff00000
c000c92a:	6a 00                	push   0x0
c000c92c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c934:	e8 ce c3 01 00       	call   c0028d07 <__ltdf2>
c000c939:	83 c4 10             	add    esp,0x10
c000c93c:	85 c0                	test   eax,eax
c000c93e:	79 4d                	jns    c000c98d <sinc_quad_vari_process+0x18a>
c000c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c944:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c948:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c950:	eb 1b                	jmp    c000c96d <sinc_quad_vari_process+0x16a>
c000c952:	68 00 00 f0 3f       	push   0x3ff00000
c000c957:	6a 00                	push   0x0
c000c959:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c961:	e8 a1 c3 01 00       	call   c0028d07 <__ltdf2>
c000c966:	83 c4 10             	add    esp,0x10
c000c969:	85 c0                	test   eax,eax
c000c96b:	79 20                	jns    c000c98d <sinc_quad_vari_process+0x18a>
c000c96d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c975:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c979:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97d:	e8 9a bd 01 00       	call   c002871c <__divdf3>
c000c982:	83 c4 10             	add    esp,0x10
c000c985:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c989:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98d:	50                   	push   eax
c000c98e:	50                   	push   eax
c000c98f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c993:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c997:	e8 24 c5 01 00       	call   c0028ec0 <lrint>
c000c99c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99f:	40                   	inc    eax
c000c9a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a4:	0f af c7             	imul   eax,edi
c000c9a7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b2:	58                   	pop    eax
c000c9b3:	5a                   	pop    edx
c000c9b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9bc:	e8 ff c4 01 00       	call   c0028ec0 <lrint>
c000c9c1:	83 ec 0c             	sub    esp,0xc
c000c9c4:	50                   	push   eax
c000c9c5:	e8 d1 c0 01 00       	call   c0028a9b <__floatsidf>
c000c9ca:	83 c4 10             	add    esp,0x10
c000c9cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d5:	52                   	push   edx
c000c9d6:	50                   	push   eax
c000c9d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9df:	e8 28 ba 01 00       	call   c002840c <__subdf3>
c000c9e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ec:	83 c4 20             	add    esp,0x20
c000c9ef:	6a 00                	push   0x0
c000c9f1:	6a 00                	push   0x0
c000c9f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9fb:	e8 07 c3 01 00       	call   c0028d07 <__ltdf2>
c000ca00:	83 c4 10             	add    esp,0x10
c000ca03:	85 c0                	test   eax,eax
c000ca05:	79 1f                	jns    c000ca26 <sinc_quad_vari_process+0x223>
c000ca07:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0c:	6a 00                	push   0x0
c000ca0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca16:	e8 a0 b3 01 00       	call   c0027dbb <__adddf3>
c000ca1b:	83 c4 10             	add    esp,0x10
c000ca1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca26:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca29:	83 ec 10             	sub    esp,0x10
c000ca2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca30:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca43:	e8 c4 b9 01 00       	call   c002840c <__subdf3>
c000ca48:	83 c4 18             	add    esp,0x18
c000ca4b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca53:	52                   	push   edx
c000ca54:	50                   	push   eax
c000ca55:	e8 66 c4 01 00       	call   c0028ec0 <lrint>
c000ca5a:	0f af f8             	imul   edi,eax
c000ca5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca61:	01 f8                	add    eax,edi
c000ca63:	99                   	cdq    
c000ca64:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca67:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca72:	68 00 00 f0 3f       	push   0x3ff00000
c000ca77:	6a 00                	push   0x0
c000ca79:	e8 9e bc 01 00       	call   c002871c <__divdf3>
c000ca7e:	83 c4 10             	add    esp,0x10
c000ca81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca85:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca89:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8e:	68 23 42 92 0c       	push   0xc924223
c000ca93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca9b:	e8 1b b3 01 00       	call   c0027dbb <__adddf3>
c000caa0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa8:	83 c4 20             	add    esp,0x20
c000caab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab3:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cabb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cac1:	7d 50                	jge    c000cb13 <sinc_quad_vari_process+0x310>
c000cac3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac9:	01 c8                	add    eax,ecx
c000cacb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cace:	99                   	cdq    
c000cacf:	f7 f9                	idiv   ecx
c000cad1:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad5:	7d 0c                	jge    c000cae3 <sinc_quad_vari_process+0x2e0>
c000cad7:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cada:	85 ff                	test   edi,edi
c000cadc:	79 6c                	jns    c000cb4a <sinc_quad_vari_process+0x347>
c000cade:	e9 e7 00 00 00       	jmp    c000cbca <sinc_quad_vari_process+0x3c7>
c000cae3:	50                   	push   eax
c000cae4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae8:	56                   	push   esi
c000cae9:	53                   	push   ebx
c000caea:	e8 11 ee ff ff       	call   c000b900 <prepare_data>
c000caef:	83 c4 10             	add    esp,0x10
c000caf2:	89 c2                	mov    edx,eax
c000caf4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf7:	85 c0                	test   eax,eax
c000caf9:	0f 85 bf 03 00 00    	jne    c000cebe <sinc_quad_vari_process+0x6bb>
c000caff:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb02:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb05:	01 c8                	add    eax,ecx
c000cb07:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb0a:	99                   	cdq    
c000cb0b:	f7 f9                	idiv   ecx
c000cb0d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb11:	7c c4                	jl     c000cad7 <sinc_quad_vari_process+0x2d4>
c000cb13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb1b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb39:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3c:	99                   	cdq    
c000cb3d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb40:	31 d2                	xor    edx,edx
c000cb42:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb45:	e9 74 03 00 00       	jmp    c000cebe <sinc_quad_vari_process+0x6bb>
c000cb4a:	83 ec 0c             	sub    esp,0xc
c000cb4d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb50:	e8 46 bf 01 00       	call   c0028a9b <__floatsidf>
c000cb55:	83 c4 10             	add    esp,0x10
c000cb58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb70:	e8 46 b2 01 00       	call   c0027dbb <__adddf3>
c000cb75:	83 c4 10             	add    esp,0x10
c000cb78:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb90:	e8 26 b2 01 00       	call   c0027dbb <__adddf3>
c000cb95:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cba0:	e8 f6 be 01 00       	call   c0028a9b <__floatsidf>
c000cba5:	83 c4 10             	add    esp,0x10
c000cba8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbb0:	52                   	push   edx
c000cbb1:	50                   	push   eax
c000cbb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbba:	e8 46 c1 01 00       	call   c0028d05 <__gedf2>
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	85 c0                	test   eax,eax
c000cbc4:	0f 89 49 ff ff ff    	jns    c000cb13 <sinc_quad_vari_process+0x310>
c000cbca:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbce:	0f 8e ef 00 00 00    	jle    c000ccc3 <sinc_quad_vari_process+0x4c0>
c000cbd4:	83 ec 10             	sub    esp,0x10
c000cbd7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbda:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbe0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe3:	e8 24 b8 01 00       	call   c002840c <__subdf3>
c000cbe8:	83 c4 18             	add    esp,0x18
c000cbeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf3:	52                   	push   edx
c000cbf4:	50                   	push   eax
c000cbf5:	e8 a6 c2 01 00       	call   c0028ea0 <fabs>
c000cbfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc02:	83 c4 10             	add    esp,0x10
c000cc05:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc0a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc17:	e8 cd c0 01 00       	call   c0028ce9 <__gtdf2>
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	85 c0                	test   eax,eax
c000cc21:	0f 8e 9c 00 00 00    	jle    c000ccc3 <sinc_quad_vari_process+0x4c0>
c000cc27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc2a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc31:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc35:	52                   	push   edx
c000cc36:	50                   	push   eax
c000cc37:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc3a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3d:	e8 ca b7 01 00       	call   c002840c <__subdf3>
c000cc42:	59                   	pop    ecx
c000cc43:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc47:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc4b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4e:	e8 48 be 01 00       	call   c0028a9b <__floatsidf>
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5e:	52                   	push   edx
c000cc5f:	50                   	push   eax
c000cc60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc68:	e8 cb b7 01 00       	call   c0028438 <__muldf3>
c000cc6d:	5f                   	pop    edi
c000cc6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc72:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc76:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc79:	e8 1d be 01 00       	call   c0028a9b <__floatsidf>
c000cc7e:	83 c4 10             	add    esp,0x10
c000cc81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc85:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc89:	52                   	push   edx
c000cc8a:	50                   	push   eax
c000cc8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc93:	e8 84 ba 01 00       	call   c002871c <__divdf3>
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb3:	e8 03 b1 01 00       	call   c0027dbb <__adddf3>
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc3:	83 ec 0c             	sub    esp,0xc
c000ccc6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc9:	e8 cd bd 01 00       	call   c0028a9b <__floatsidf>
c000ccce:	83 c4 10             	add    esp,0x10
c000ccd1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce9:	e8 19 c0 01 00       	call   c0028d07 <__ltdf2>
c000ccee:	83 c4 10             	add    esp,0x10
c000ccf1:	85 c0                	test   eax,eax
c000ccf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccfb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccff:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd03:	78 10                	js     c000cd15 <sinc_quad_vari_process+0x512>
c000cd05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd11:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd25:	e8 0e b7 01 00       	call   c0028438 <__muldf3>
c000cd2a:	59                   	pop    ecx
c000cd2b:	5f                   	pop    edi
c000cd2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3c:	e8 98 eb ff ff       	call   c000b8d9 <double_to_fp>
c000cd41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd45:	89 c7                	mov    edi,eax
c000cd47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd53:	e8 e0 b6 01 00       	call   c0028438 <__muldf3>
c000cd58:	83 c4 18             	add    esp,0x18
c000cd5b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd63:	52                   	push   edx
c000cd64:	50                   	push   eax
c000cd65:	e8 6f eb ff ff       	call   c000b8d9 <double_to_fp>
c000cd6a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd71:	83 c4 0c             	add    esp,0xc
c000cd74:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd77:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd7a:	50                   	push   eax
c000cd7b:	50                   	push   eax
c000cd7c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7f:	e8 17 bd 01 00       	call   c0028a9b <__floatsidf>
c000cd84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9c:	e8 7b b9 01 00       	call   c002871c <__divdf3>
c000cda1:	83 c4 18             	add    esp,0x18
c000cda4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdac:	52                   	push   edx
c000cdad:	89 fa                	mov    edx,edi
c000cdaf:	50                   	push   eax
c000cdb0:	89 d8                	mov    eax,ebx
c000cdb2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb6:	e8 a5 d1 ff ff       	call   c0009f60 <calc_output_quad>
c000cdbb:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcf:	e8 48 b9 01 00       	call   c002871c <__divdf3>
c000cdd4:	83 c4 10             	add    esp,0x10
c000cdd7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cddb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdef:	e8 c7 af 01 00       	call   c0027dbb <__adddf3>
c000cdf4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfc:	83 c4 18             	add    esp,0x18
c000cdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce07:	e8 b4 c0 01 00       	call   c0028ec0 <lrint>
c000ce0c:	83 ec 0c             	sub    esp,0xc
c000ce0f:	50                   	push   eax
c000ce10:	e8 86 bc 01 00       	call   c0028a9b <__floatsidf>
c000ce15:	83 c4 10             	add    esp,0x10
c000ce18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce20:	52                   	push   edx
c000ce21:	50                   	push   eax
c000ce22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce2a:	e8 dd b5 01 00       	call   c002840c <__subdf3>
c000ce2f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce33:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce37:	83 c4 20             	add    esp,0x20
c000ce3a:	6a 00                	push   0x0
c000ce3c:	6a 00                	push   0x0
c000ce3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce46:	e8 bc be 01 00       	call   c0028d07 <__ltdf2>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	85 c0                	test   eax,eax
c000ce50:	79 20                	jns    c000ce72 <sinc_quad_vari_process+0x66f>
c000ce52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	e8 54 af 01 00       	call   c0027dbb <__adddf3>
c000ce67:	83 c4 10             	add    esp,0x10
c000ce6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce72:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce75:	83 ec 10             	sub    esp,0x10
c000ce78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8f:	e8 78 b5 01 00       	call   c002840c <__subdf3>
c000ce94:	83 c4 18             	add    esp,0x18
c000ce97:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9f:	52                   	push   edx
c000cea0:	50                   	push   eax
c000cea1:	e8 1a c0 01 00       	call   c0028ec0 <lrint>
c000cea6:	0f af f8             	imul   edi,eax
c000cea9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	01 f8                	add    eax,edi
c000ceb2:	99                   	cdq    
c000ceb3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb9:	e9 fd fb ff ff       	jmp    c000cabb <sinc_quad_vari_process+0x2b8>
c000cebe:	83 c4 4c             	add    esp,0x4c
c000cec1:	89 d0                	mov    eax,edx
c000cec3:	5b                   	pop    ebx
c000cec4:	5e                   	pop    esi
c000cec5:	5f                   	pop    edi
c000cec6:	5d                   	pop    ebp
c000cec7:	c3                   	ret    

c000cec8 <sinc_stereo_vari_process>:
c000cec8:	55                   	push   ebp
c000cec9:	ba 05 00 00 00       	mov    edx,0x5
c000cece:	57                   	push   edi
c000cecf:	56                   	push   esi
c000ced0:	53                   	push   ebx
c000ced1:	83 ec 4c             	sub    esp,0x4c
c000ced4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cedc:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedf:	85 db                	test   ebx,ebx
c000cee1:	0f 84 9c 06 00 00    	je     c000d583 <sinc_stereo_vari_process+0x6bb>
c000cee7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ceea:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceed:	0f af c7             	imul   eax,edi
c000cef0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf04:	0f af c7             	imul   eax,edi
c000cf07:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf0a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf18:	68 00 00 70 3f       	push   0x3f700000
c000cf1d:	6a 00                	push   0x0
c000cf1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf27:	e8 db bd 01 00       	call   c0028d07 <__ltdf2>
c000cf2c:	83 c4 10             	add    esp,0x10
c000cf2f:	ba 16 00 00 00       	mov    edx,0x16
c000cf34:	85 c0                	test   eax,eax
c000cf36:	0f 88 47 06 00 00    	js     c000d583 <sinc_stereo_vari_process+0x6bb>
c000cf3c:	68 00 00 70 40       	push   0x40700000
c000cf41:	6a 00                	push   0x0
c000cf43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4b:	e8 99 bd 01 00       	call   c0028ce9 <__gtdf2>
c000cf50:	83 c4 10             	add    esp,0x10
c000cf53:	ba 16 00 00 00       	mov    edx,0x16
c000cf58:	85 c0                	test   eax,eax
c000cf5a:	0f 8f 23 06 00 00    	jg     c000d583 <sinc_stereo_vari_process+0x6bb>
c000cf60:	83 ec 0c             	sub    esp,0xc
c000cf63:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf66:	e8 30 bb 01 00       	call   c0028a9b <__floatsidf>
c000cf6b:	83 c4 10             	add    esp,0x10
c000cf6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf76:	68 00 00 00 40       	push   0x40000000
c000cf7b:	6a 00                	push   0x0
c000cf7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf85:	e8 31 ae 01 00       	call   c0027dbb <__adddf3>
c000cf8a:	59                   	pop    ecx
c000cf8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf96:	e8 00 bb 01 00       	call   c0028a9b <__floatsidf>
c000cf9b:	83 c4 10             	add    esp,0x10
c000cf9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa6:	52                   	push   edx
c000cfa7:	50                   	push   eax
c000cfa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb0:	e8 67 b7 01 00       	call   c002871c <__divdf3>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfc0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc3:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	e8 06 bd 01 00       	call   c0028ce9 <__gtdf2>
c000cfe3:	83 c4 10             	add    esp,0x10
c000cfe6:	85 c0                	test   eax,eax
c000cfe8:	7e 2d                	jle    c000d017 <sinc_stereo_vari_process+0x14f>
c000cfea:	68 00 00 f0 3f       	push   0x3ff00000
c000cfef:	6a 00                	push   0x0
c000cff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff9:	e8 09 bd 01 00       	call   c0028d07 <__ltdf2>
c000cffe:	83 c4 10             	add    esp,0x10
c000d001:	85 c0                	test   eax,eax
c000d003:	79 4d                	jns    c000d052 <sinc_stereo_vari_process+0x18a>
c000d005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d009:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d015:	eb 1b                	jmp    c000d032 <sinc_stereo_vari_process+0x16a>
c000d017:	68 00 00 f0 3f       	push   0x3ff00000
c000d01c:	6a 00                	push   0x0
c000d01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d026:	e8 dc bc 01 00       	call   c0028d07 <__ltdf2>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	85 c0                	test   eax,eax
c000d030:	79 20                	jns    c000d052 <sinc_stereo_vari_process+0x18a>
c000d032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d036:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d03a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d042:	e8 d5 b6 01 00       	call   c002871c <__divdf3>
c000d047:	83 c4 10             	add    esp,0x10
c000d04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d052:	50                   	push   eax
c000d053:	50                   	push   eax
c000d054:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05c:	e8 5f be 01 00       	call   c0028ec0 <lrint>
c000d061:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d064:	40                   	inc    eax
c000d065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d069:	0f af c7             	imul   eax,edi
c000d06c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d077:	58                   	pop    eax
c000d078:	5a                   	pop    edx
c000d079:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d081:	e8 3a be 01 00       	call   c0028ec0 <lrint>
c000d086:	83 ec 0c             	sub    esp,0xc
c000d089:	50                   	push   eax
c000d08a:	e8 0c ba 01 00       	call   c0028a9b <__floatsidf>
c000d08f:	83 c4 10             	add    esp,0x10
c000d092:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d096:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d09a:	52                   	push   edx
c000d09b:	50                   	push   eax
c000d09c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a4:	e8 63 b3 01 00       	call   c002840c <__subdf3>
c000d0a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0b1:	83 c4 20             	add    esp,0x20
c000d0b4:	6a 00                	push   0x0
c000d0b6:	6a 00                	push   0x0
c000d0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0c0:	e8 42 bc 01 00       	call   c0028d07 <__ltdf2>
c000d0c5:	83 c4 10             	add    esp,0x10
c000d0c8:	85 c0                	test   eax,eax
c000d0ca:	79 1f                	jns    c000d0eb <sinc_stereo_vari_process+0x223>
c000d0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000d0d1:	6a 00                	push   0x0
c000d0d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0db:	e8 db ac 01 00       	call   c0027dbb <__adddf3>
c000d0e0:	83 c4 10             	add    esp,0x10
c000d0e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ee:	83 ec 10             	sub    esp,0x10
c000d0f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d100:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d104:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d108:	e8 ff b2 01 00       	call   c002840c <__subdf3>
c000d10d:	83 c4 18             	add    esp,0x18
c000d110:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d114:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d118:	52                   	push   edx
c000d119:	50                   	push   eax
c000d11a:	e8 a1 bd 01 00       	call   c0028ec0 <lrint>
c000d11f:	0f af f8             	imul   edi,eax
c000d122:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d126:	01 f8                	add    eax,edi
c000d128:	99                   	cdq    
c000d129:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d133:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d137:	68 00 00 f0 3f       	push   0x3ff00000
c000d13c:	6a 00                	push   0x0
c000d13e:	e8 d9 b5 01 00       	call   c002871c <__divdf3>
c000d143:	83 c4 10             	add    esp,0x10
c000d146:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d14a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d153:	68 23 42 92 0c       	push   0xc924223
c000d158:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d160:	e8 56 ac 01 00       	call   c0027dbb <__adddf3>
c000d165:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d169:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16d:	83 c4 20             	add    esp,0x20
c000d170:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d178:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d180:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d183:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d186:	7d 50                	jge    c000d1d8 <sinc_stereo_vari_process+0x310>
c000d188:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d18b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18e:	01 c8                	add    eax,ecx
c000d190:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d193:	99                   	cdq    
c000d194:	f7 f9                	idiv   ecx
c000d196:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d19a:	7d 0c                	jge    c000d1a8 <sinc_stereo_vari_process+0x2e0>
c000d19c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19f:	85 ff                	test   edi,edi
c000d1a1:	79 6c                	jns    c000d20f <sinc_stereo_vari_process+0x347>
c000d1a3:	e9 e7 00 00 00       	jmp    c000d28f <sinc_stereo_vari_process+0x3c7>
c000d1a8:	50                   	push   eax
c000d1a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ad:	56                   	push   esi
c000d1ae:	53                   	push   ebx
c000d1af:	e8 4c e7 ff ff       	call   c000b900 <prepare_data>
c000d1b4:	83 c4 10             	add    esp,0x10
c000d1b7:	89 c2                	mov    edx,eax
c000d1b9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1bc:	85 c0                	test   eax,eax
c000d1be:	0f 85 bf 03 00 00    	jne    c000d583 <sinc_stereo_vari_process+0x6bb>
c000d1c4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1ca:	01 c8                	add    eax,ecx
c000d1cc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cf:	99                   	cdq    
c000d1d0:	f7 f9                	idiv   ecx
c000d1d2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d6:	7c c4                	jl     c000d19c <sinc_stereo_vari_process+0x2d4>
c000d1d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1e0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1f1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d201:	99                   	cdq    
c000d202:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d205:	31 d2                	xor    edx,edx
c000d207:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d20a:	e9 74 03 00 00       	jmp    c000d583 <sinc_stereo_vari_process+0x6bb>
c000d20f:	83 ec 0c             	sub    esp,0xc
c000d212:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d215:	e8 81 b8 01 00       	call   c0028a9b <__floatsidf>
c000d21a:	83 c4 10             	add    esp,0x10
c000d21d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d221:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d225:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d229:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d231:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d235:	e8 81 ab 01 00       	call   c0027dbb <__adddf3>
c000d23a:	83 c4 10             	add    esp,0x10
c000d23d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d241:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d245:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d249:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d255:	e8 61 ab 01 00       	call   c0027dbb <__adddf3>
c000d25a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d261:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d265:	e8 31 b8 01 00       	call   c0028a9b <__floatsidf>
c000d26a:	83 c4 10             	add    esp,0x10
c000d26d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d271:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d275:	52                   	push   edx
c000d276:	50                   	push   eax
c000d277:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27f:	e8 81 ba 01 00       	call   c0028d05 <__gedf2>
c000d284:	83 c4 10             	add    esp,0x10
c000d287:	85 c0                	test   eax,eax
c000d289:	0f 89 49 ff ff ff    	jns    c000d1d8 <sinc_stereo_vari_process+0x310>
c000d28f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d293:	0f 8e ef 00 00 00    	jle    c000d388 <sinc_stereo_vari_process+0x4c0>
c000d299:	83 ec 10             	sub    esp,0x10
c000d29c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a8:	e8 5f b1 01 00       	call   c002840c <__subdf3>
c000d2ad:	83 c4 18             	add    esp,0x18
c000d2b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b8:	52                   	push   edx
c000d2b9:	50                   	push   eax
c000d2ba:	e8 e1 bb 01 00       	call   c0028ea0 <fabs>
c000d2bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c7:	83 c4 10             	add    esp,0x10
c000d2ca:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cf:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2dc:	e8 08 ba 01 00       	call   c0028ce9 <__gtdf2>
c000d2e1:	83 c4 10             	add    esp,0x10
c000d2e4:	85 c0                	test   eax,eax
c000d2e6:	0f 8e 9c 00 00 00    	jle    c000d388 <sinc_stereo_vari_process+0x4c0>
c000d2ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ef:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2fa:	52                   	push   edx
c000d2fb:	50                   	push   eax
c000d2fc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2ff:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d302:	e8 05 b1 01 00       	call   c002840c <__subdf3>
c000d307:	59                   	pop    ecx
c000d308:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d310:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d313:	e8 83 b7 01 00       	call   c0028a9b <__floatsidf>
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d323:	52                   	push   edx
c000d324:	50                   	push   eax
c000d325:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32d:	e8 06 b1 01 00       	call   c0028438 <__muldf3>
c000d332:	5f                   	pop    edi
c000d333:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d337:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d33b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33e:	e8 58 b7 01 00       	call   c0028a9b <__floatsidf>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d34a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34e:	52                   	push   edx
c000d34f:	50                   	push   eax
c000d350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d358:	e8 bf b3 01 00       	call   c002871c <__divdf3>
c000d35d:	83 c4 10             	add    esp,0x10
c000d360:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d364:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d374:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d378:	e8 3e aa 01 00       	call   c0027dbb <__adddf3>
c000d37d:	83 c4 10             	add    esp,0x10
c000d380:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d384:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d388:	83 ec 0c             	sub    esp,0xc
c000d38b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38e:	e8 08 b7 01 00       	call   c0028a9b <__floatsidf>
c000d393:	83 c4 10             	add    esp,0x10
c000d396:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d39a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ae:	e8 54 b9 01 00       	call   c0028d07 <__ltdf2>
c000d3b3:	83 c4 10             	add    esp,0x10
c000d3b6:	85 c0                	test   eax,eax
c000d3b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3c0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c8:	78 10                	js     c000d3da <sinc_stereo_vari_process+0x512>
c000d3ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3ea:	e8 49 b0 01 00       	call   c0028438 <__muldf3>
c000d3ef:	59                   	pop    ecx
c000d3f0:	5f                   	pop    edi
c000d3f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d401:	e8 d3 e4 ff ff       	call   c000b8d9 <double_to_fp>
c000d406:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40a:	89 c7                	mov    edi,eax
c000d40c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d410:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d414:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d418:	e8 1b b0 01 00       	call   c0028438 <__muldf3>
c000d41d:	83 c4 18             	add    esp,0x18
c000d420:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d424:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d428:	52                   	push   edx
c000d429:	50                   	push   eax
c000d42a:	e8 aa e4 ff ff       	call   c000b8d9 <double_to_fp>
c000d42f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d432:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d436:	83 c4 0c             	add    esp,0xc
c000d439:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43c:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43f:	50                   	push   eax
c000d440:	50                   	push   eax
c000d441:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d444:	e8 52 b6 01 00       	call   c0028a9b <__floatsidf>
c000d449:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d451:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d455:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d459:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d461:	e8 b6 b2 01 00       	call   c002871c <__divdf3>
c000d466:	83 c4 18             	add    esp,0x18
c000d469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d471:	52                   	push   edx
c000d472:	89 fa                	mov    edx,edi
c000d474:	50                   	push   eax
c000d475:	89 d8                	mov    eax,ebx
c000d477:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d47b:	e8 02 c7 ff ff       	call   c0009b82 <calc_output_stereo>
c000d480:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d484:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d488:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d490:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d494:	e8 83 b2 01 00       	call   c002871c <__divdf3>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b4:	e8 02 a9 01 00       	call   c0027dbb <__adddf3>
c000d4b9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4c1:	83 c4 18             	add    esp,0x18
c000d4c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4cc:	e8 ef b9 01 00       	call   c0028ec0 <lrint>
c000d4d1:	83 ec 0c             	sub    esp,0xc
c000d4d4:	50                   	push   eax
c000d4d5:	e8 c1 b5 01 00       	call   c0028a9b <__floatsidf>
c000d4da:	83 c4 10             	add    esp,0x10
c000d4dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4e1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e5:	52                   	push   edx
c000d4e6:	50                   	push   eax
c000d4e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ef:	e8 18 af 01 00       	call   c002840c <__subdf3>
c000d4f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fc:	83 c4 20             	add    esp,0x20
c000d4ff:	6a 00                	push   0x0
c000d501:	6a 00                	push   0x0
c000d503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d50b:	e8 f7 b7 01 00       	call   c0028d07 <__ltdf2>
c000d510:	83 c4 10             	add    esp,0x10
c000d513:	85 c0                	test   eax,eax
c000d515:	79 20                	jns    c000d537 <sinc_stereo_vari_process+0x66f>
c000d517:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d527:	e8 8f a8 01 00       	call   c0027dbb <__adddf3>
c000d52c:	83 c4 10             	add    esp,0x10
c000d52f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d533:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d537:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d53a:	83 ec 10             	sub    esp,0x10
c000d53d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d541:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d550:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d554:	e8 b3 ae 01 00       	call   c002840c <__subdf3>
c000d559:	83 c4 18             	add    esp,0x18
c000d55c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d560:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d564:	52                   	push   edx
c000d565:	50                   	push   eax
c000d566:	e8 55 b9 01 00       	call   c0028ec0 <lrint>
c000d56b:	0f af f8             	imul   edi,eax
c000d56e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d572:	83 c4 10             	add    esp,0x10
c000d575:	01 f8                	add    eax,edi
c000d577:	99                   	cdq    
c000d578:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d57b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57e:	e9 fd fb ff ff       	jmp    c000d180 <sinc_stereo_vari_process+0x2b8>
c000d583:	83 c4 4c             	add    esp,0x4c
c000d586:	89 d0                	mov    eax,edx
c000d588:	5b                   	pop    ebx
c000d589:	5e                   	pop    esi
c000d58a:	5f                   	pop    edi
c000d58b:	5d                   	pop    ebp
c000d58c:	c3                   	ret    

c000d58d <sinc_mono_vari_process>:
c000d58d:	55                   	push   ebp
c000d58e:	ba 05 00 00 00       	mov    edx,0x5
c000d593:	57                   	push   edi
c000d594:	56                   	push   esi
c000d595:	53                   	push   ebx
c000d596:	83 ec 4c             	sub    esp,0x4c
c000d599:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d5a1:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a4:	85 db                	test   ebx,ebx
c000d5a6:	0f 84 c1 06 00 00    	je     c000dc6d <sinc_mono_vari_process+0x6e0>
c000d5ac:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5af:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b2:	0f af c7             	imul   eax,edi
c000d5b5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5bb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c9:	0f af c7             	imul   eax,edi
c000d5cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5e0:	68 00 00 70 3f       	push   0x3f700000
c000d5e5:	6a 00                	push   0x0
c000d5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ef:	e8 13 b7 01 00       	call   c0028d07 <__ltdf2>
c000d5f4:	83 c4 10             	add    esp,0x10
c000d5f7:	ba 16 00 00 00       	mov    edx,0x16
c000d5fc:	85 c0                	test   eax,eax
c000d5fe:	0f 88 69 06 00 00    	js     c000dc6d <sinc_mono_vari_process+0x6e0>
c000d604:	68 00 00 70 40       	push   0x40700000
c000d609:	6a 00                	push   0x0
c000d60b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d613:	e8 d1 b6 01 00       	call   c0028ce9 <__gtdf2>
c000d618:	83 c4 10             	add    esp,0x10
c000d61b:	ba 16 00 00 00       	mov    edx,0x16
c000d620:	85 c0                	test   eax,eax
c000d622:	0f 8f 45 06 00 00    	jg     c000dc6d <sinc_mono_vari_process+0x6e0>
c000d628:	83 ec 0c             	sub    esp,0xc
c000d62b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62e:	e8 68 b4 01 00       	call   c0028a9b <__floatsidf>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d63a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63e:	68 00 00 00 40       	push   0x40000000
c000d643:	6a 00                	push   0x0
c000d645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64d:	e8 69 a7 01 00       	call   c0027dbb <__adddf3>
c000d652:	59                   	pop    ecx
c000d653:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d657:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d65b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65e:	e8 38 b4 01 00       	call   c0028a9b <__floatsidf>
c000d663:	83 c4 10             	add    esp,0x10
c000d666:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d66a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66e:	52                   	push   edx
c000d66f:	50                   	push   eax
c000d670:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d674:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d678:	e8 9f b0 01 00       	call   c002871c <__divdf3>
c000d67d:	83 c4 10             	add    esp,0x10
c000d680:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d684:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d688:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d68b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d692:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d696:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	e8 3e b6 01 00       	call   c0028ce9 <__gtdf2>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	85 c0                	test   eax,eax
c000d6b0:	7e 2d                	jle    c000d6df <sinc_mono_vari_process+0x152>
c000d6b2:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b7:	6a 00                	push   0x0
c000d6b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6c1:	e8 41 b6 01 00       	call   c0028d07 <__ltdf2>
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	85 c0                	test   eax,eax
c000d6cb:	79 4d                	jns    c000d71a <sinc_mono_vari_process+0x18d>
c000d6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6dd:	eb 1b                	jmp    c000d6fa <sinc_mono_vari_process+0x16d>
c000d6df:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e4:	6a 00                	push   0x0
c000d6e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ee:	e8 14 b6 01 00       	call   c0028d07 <__ltdf2>
c000d6f3:	83 c4 10             	add    esp,0x10
c000d6f6:	85 c0                	test   eax,eax
c000d6f8:	79 20                	jns    c000d71a <sinc_mono_vari_process+0x18d>
c000d6fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d702:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d706:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d70a:	e8 0d b0 01 00       	call   c002871c <__divdf3>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d716:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d71a:	50                   	push   eax
c000d71b:	50                   	push   eax
c000d71c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d720:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d724:	e8 97 b7 01 00       	call   c0028ec0 <lrint>
c000d729:	40                   	inc    eax
c000d72a:	0f af c7             	imul   eax,edi
c000d72d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d731:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d735:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d738:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d73b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d743:	58                   	pop    eax
c000d744:	5a                   	pop    edx
c000d745:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d749:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74d:	e8 6e b7 01 00       	call   c0028ec0 <lrint>
c000d752:	83 ec 0c             	sub    esp,0xc
c000d755:	50                   	push   eax
c000d756:	e8 40 b3 01 00       	call   c0028a9b <__floatsidf>
c000d75b:	83 c4 10             	add    esp,0x10
c000d75e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d762:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d766:	52                   	push   edx
c000d767:	50                   	push   eax
c000d768:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d770:	e8 97 ac 01 00       	call   c002840c <__subdf3>
c000d775:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d779:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77d:	83 c4 20             	add    esp,0x20
c000d780:	6a 00                	push   0x0
c000d782:	6a 00                	push   0x0
c000d784:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d788:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78c:	e8 76 b5 01 00       	call   c0028d07 <__ltdf2>
c000d791:	83 c4 10             	add    esp,0x10
c000d794:	85 c0                	test   eax,eax
c000d796:	79 1f                	jns    c000d7b7 <sinc_mono_vari_process+0x22a>
c000d798:	68 00 00 f0 3f       	push   0x3ff00000
c000d79d:	6a 00                	push   0x0
c000d79f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a7:	e8 0f a6 01 00       	call   c0027dbb <__adddf3>
c000d7ac:	83 c4 10             	add    esp,0x10
c000d7af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b7:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7ba:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bd:	83 ec 10             	sub    esp,0x10
c000d7c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d0:	e8 37 ac 01 00       	call   c002840c <__subdf3>
c000d7d5:	83 c4 18             	add    esp,0x18
c000d7d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7e0:	52                   	push   edx
c000d7e1:	50                   	push   eax
c000d7e2:	e8 d9 b6 01 00       	call   c0028ec0 <lrint>
c000d7e7:	0f af f8             	imul   edi,eax
c000d7ea:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7ed:	31 ff                	xor    edi,edi
c000d7ef:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f4:	99                   	cdq    
c000d7f5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d803:	55                   	push   ebp
c000d804:	57                   	push   edi
c000d805:	e8 12 af 01 00       	call   c002871c <__divdf3>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d811:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d815:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d81a:	68 23 42 92 0c       	push   0xc924223
c000d81f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d823:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d827:	e8 8f a5 01 00       	call   c0027dbb <__adddf3>
c000d82c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d830:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d834:	83 c4 20             	add    esp,0x20
c000d837:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d83b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d842:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d845:	7d 54                	jge    c000d89b <sinc_mono_vari_process+0x30e>
c000d847:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d84a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84d:	01 c8                	add    eax,ecx
c000d84f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d852:	99                   	cdq    
c000d853:	f7 f9                	idiv   ecx
c000d855:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d859:	7d 0c                	jge    c000d867 <sinc_mono_vari_process+0x2da>
c000d85b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85e:	85 ff                	test   edi,edi
c000d860:	79 73                	jns    c000d8d5 <sinc_mono_vari_process+0x348>
c000d862:	e9 ee 00 00 00       	jmp    c000d955 <sinc_mono_vari_process+0x3c8>
c000d867:	50                   	push   eax
c000d868:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86c:	56                   	push   esi
c000d86d:	53                   	push   ebx
c000d86e:	e8 8d e0 ff ff       	call   c000b900 <prepare_data>
c000d873:	89 c2                	mov    edx,eax
c000d875:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d879:	83 c4 10             	add    esp,0x10
c000d87c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87f:	85 d2                	test   edx,edx
c000d881:	0f 85 e6 03 00 00    	jne    c000dc6d <sinc_mono_vari_process+0x6e0>
c000d887:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d88a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88d:	01 c8                	add    eax,ecx
c000d88f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d892:	99                   	cdq    
c000d893:	f7 f9                	idiv   ecx
c000d895:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d899:	7c c0                	jl     c000d85b <sinc_mono_vari_process+0x2ce>
c000d89b:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a7:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8aa:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b5:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8ba:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c7:	99                   	cdq    
c000d8c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8cb:	31 d2                	xor    edx,edx
c000d8cd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8d0:	e9 98 03 00 00       	jmp    c000dc6d <sinc_mono_vari_process+0x6e0>
c000d8d5:	83 ec 0c             	sub    esp,0xc
c000d8d8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8db:	e8 bb b1 01 00       	call   c0028a9b <__floatsidf>
c000d8e0:	83 c4 10             	add    esp,0x10
c000d8e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fb:	e8 bb a4 01 00       	call   c0027dbb <__adddf3>
c000d900:	83 c4 10             	add    esp,0x10
c000d903:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d907:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d90b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d913:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d917:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91b:	e8 9b a4 01 00       	call   c0027dbb <__adddf3>
c000d920:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d923:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d927:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d92b:	e8 6b b1 01 00       	call   c0028a9b <__floatsidf>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d937:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93b:	52                   	push   edx
c000d93c:	50                   	push   eax
c000d93d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d941:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d945:	e8 9f b3 01 00       	call   c0028ce9 <__gtdf2>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	85 c0                	test   eax,eax
c000d94f:	0f 8f 46 ff ff ff    	jg     c000d89b <sinc_mono_vari_process+0x30e>
c000d955:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d959:	0f 8e f5 00 00 00    	jle    c000da54 <sinc_mono_vari_process+0x4c7>
c000d95f:	83 ec 10             	sub    esp,0x10
c000d962:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d965:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d968:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96f:	ff 30                	push   DWORD PTR [eax]
c000d971:	e8 96 aa 01 00       	call   c002840c <__subdf3>
c000d976:	83 c4 18             	add    esp,0x18
c000d979:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d981:	52                   	push   edx
c000d982:	50                   	push   eax
c000d983:	e8 18 b5 01 00       	call   c0028ea0 <fabs>
c000d988:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d990:	83 c4 10             	add    esp,0x10
c000d993:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d998:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a5:	e8 3f b3 01 00       	call   c0028ce9 <__gtdf2>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	85 c0                	test   eax,eax
c000d9af:	0f 8e 9f 00 00 00    	jle    c000da54 <sinc_mono_vari_process+0x4c7>
c000d9b5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c6:	52                   	push   edx
c000d9c7:	50                   	push   eax
c000d9c8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9cb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9ce:	e8 39 aa 01 00       	call   c002840c <__subdf3>
c000d9d3:	5f                   	pop    edi
c000d9d4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9dc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9df:	e8 b7 b0 01 00       	call   c0028a9b <__floatsidf>
c000d9e4:	83 c4 10             	add    esp,0x10
c000d9e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9eb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ef:	52                   	push   edx
c000d9f0:	50                   	push   eax
c000d9f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f9:	e8 3a aa 01 00       	call   c0028438 <__muldf3>
c000d9fe:	5d                   	pop    ebp
c000d9ff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da03:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da07:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da0a:	e8 8c b0 01 00       	call   c0028a9b <__floatsidf>
c000da0f:	83 c4 10             	add    esp,0x10
c000da12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da1a:	52                   	push   edx
c000da1b:	50                   	push   eax
c000da1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da24:	e8 f3 ac 01 00       	call   c002871c <__divdf3>
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da44:	e8 72 a3 01 00       	call   c0027dbb <__adddf3>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da50:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da5a:	e8 3c b0 01 00       	call   c0028a9b <__floatsidf>
c000da5f:	83 c4 10             	add    esp,0x10
c000da62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7a:	e8 88 b2 01 00       	call   c0028d07 <__ltdf2>
c000da7f:	83 c4 10             	add    esp,0x10
c000da82:	85 c0                	test   eax,eax
c000da84:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da88:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8c:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da90:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da94:	78 10                	js     c000daa6 <sinc_mono_vari_process+0x519>
c000da96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab6:	e8 7d a9 01 00       	call   c0028438 <__muldf3>
c000dabb:	59                   	pop    ecx
c000dabc:	5f                   	pop    edi
c000dabd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dac1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacd:	e8 07 de ff ff       	call   c000b8d9 <double_to_fp>
c000dad2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad6:	89 c7                	mov    edi,eax
c000dad8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae4:	e8 4f a9 01 00       	call   c0028438 <__muldf3>
c000dae9:	83 c4 18             	add    esp,0x18
c000daec:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daf0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf4:	52                   	push   edx
c000daf5:	50                   	push   eax
c000daf6:	e8 de dd ff ff       	call   c000b8d9 <double_to_fp>
c000dafb:	83 ec 0c             	sub    esp,0xc
c000dafe:	89 c5                	mov    ebp,eax
c000db00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db03:	e8 93 af 01 00       	call   c0028a9b <__floatsidf>
c000db08:	83 c4 10             	add    esp,0x10
c000db0b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db13:	52                   	push   edx
c000db14:	50                   	push   eax
c000db15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db19:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1d:	e8 fa ab 01 00       	call   c002871c <__divdf3>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 e9                	mov    ecx,ebp
c000db27:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db2b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2f:	89 d8                	mov    eax,ebx
c000db31:	89 fa                	mov    edx,edi
c000db33:	e8 ee bd ff ff       	call   c0009926 <calc_output_single>
c000db38:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db3b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db42:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db46:	52                   	push   edx
c000db47:	50                   	push   eax
c000db48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db50:	e8 e3 a8 01 00       	call   c0028438 <__muldf3>
c000db55:	59                   	pop    ecx
c000db56:	59                   	pop    ecx
c000db57:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db63:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db67:	e8 9f b1 01 00       	call   c0028d0b <__truncdfsf2>
c000db6c:	83 c4 10             	add    esp,0x10
c000db6f:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db72:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db75:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db79:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db85:	e8 92 ab 01 00       	call   c002871c <__divdf3>
c000db8a:	83 c4 10             	add    esp,0x10
c000db8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db91:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba5:	e8 11 a2 01 00       	call   c0027dbb <__adddf3>
c000dbaa:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbae:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb2:	83 c4 18             	add    esp,0x18
c000dbb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbd:	e8 fe b2 01 00       	call   c0028ec0 <lrint>
c000dbc2:	83 ec 0c             	sub    esp,0xc
c000dbc5:	50                   	push   eax
c000dbc6:	e8 d0 ae 01 00       	call   c0028a9b <__floatsidf>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd6:	52                   	push   edx
c000dbd7:	50                   	push   eax
c000dbd8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbdc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbe0:	e8 27 a8 01 00       	call   c002840c <__subdf3>
c000dbe5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbed:	83 c4 20             	add    esp,0x20
c000dbf0:	6a 00                	push   0x0
c000dbf2:	6a 00                	push   0x0
c000dbf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfc:	e8 06 b1 01 00       	call   c0028d07 <__ltdf2>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	85 c0                	test   eax,eax
c000dc06:	79 20                	jns    c000dc28 <sinc_mono_vari_process+0x69b>
c000dc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	e8 9e a1 01 00       	call   c0027dbb <__adddf3>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc28:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc2b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2e:	83 ec 10             	sub    esp,0x10
c000dc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc41:	e8 c6 a7 01 00       	call   c002840c <__subdf3>
c000dc46:	83 c4 18             	add    esp,0x18
c000dc49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc51:	52                   	push   edx
c000dc52:	50                   	push   eax
c000dc53:	e8 68 b2 01 00       	call   c0028ec0 <lrint>
c000dc58:	83 c4 10             	add    esp,0x10
c000dc5b:	0f af f8             	imul   edi,eax
c000dc5e:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc61:	99                   	cdq    
c000dc62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc68:	e9 d2 fb ff ff       	jmp    c000d83f <sinc_mono_vari_process+0x2b2>
c000dc6d:	83 c4 4c             	add    esp,0x4c
c000dc70:	89 d0                	mov    eax,edx
c000dc72:	5b                   	pop    ebx
c000dc73:	5e                   	pop    esi
c000dc74:	5f                   	pop    edi
c000dc75:	5d                   	pop    ebp
c000dc76:	c3                   	ret    

c000dc77 <sinc_get_name>:
c000dc77:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc7b:	31 c0                	xor    eax,eax
c000dc7d:	83 fa 02             	cmp    edx,0x2
c000dc80:	77 07                	ja     c000dc89 <sinc_get_name+0x12>
c000dc82:	8b 04 95 a4 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd585c]
c000dc89:	c3                   	ret    

c000dc8a <sinc_get_description>:
c000dc8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8e:	31 c0                	xor    eax,eax
c000dc90:	83 fa 02             	cmp    edx,0x2
c000dc93:	77 07                	ja     c000dc9c <sinc_get_description+0x12>
c000dc95:	8b 04 95 98 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5868]
c000dc9c:	c3                   	ret    

c000dc9d <sinc_set_converter>:
c000dc9d:	53                   	push   ebx
c000dc9e:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca4:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dcab:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcae:	85 c0                	test   eax,eax
c000dcb0:	74 13                	je     c000dcc5 <sinc_set_converter+0x28>
c000dcb2:	83 ec 0c             	sub    esp,0xc
c000dcb5:	50                   	push   eax
c000dcb6:	e8 15 1c 00 00       	call   c000f8d0 <free>
c000dcbb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc2:	83 c4 10             	add    esp,0x10
c000dcc5:	50                   	push   eax
c000dcc6:	68 44 08 00 00       	push   0x844
c000dccb:	6a 00                	push   0x0
c000dccd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcd1:	50                   	push   eax
c000dcd2:	e8 95 2a ff ff       	call   c000076c <memset>
c000dcd7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcda:	83 c4 10             	add    esp,0x10
c000dcdd:	b8 0b 00 00 00       	mov    eax,0xb
c000dce2:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce8:	7f 6e                	jg     c000dd58 <sinc_set_converter+0xbb>
c000dcea:	83 fa 01             	cmp    edx,0x1
c000dced:	75 10                	jne    c000dcff <sinc_set_converter+0x62>
c000dcef:	c7 43 24 8d d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58d
c000dcf6:	c7 43 20 8d d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58d
c000dcfd:	eb 4d                	jmp    c000dd4c <sinc_set_converter+0xaf>
c000dcff:	83 fa 02             	cmp    edx,0x2
c000dd02:	75 10                	jne    c000dd14 <sinc_set_converter+0x77>
c000dd04:	c7 43 24 c8 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec8
c000dd0b:	c7 43 20 c8 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec8
c000dd12:	eb 38                	jmp    c000dd4c <sinc_set_converter+0xaf>
c000dd14:	83 fa 04             	cmp    edx,0x4
c000dd17:	75 10                	jne    c000dd29 <sinc_set_converter+0x8c>
c000dd19:	c7 43 24 03 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c803
c000dd20:	c7 43 20 03 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c803
c000dd27:	eb 23                	jmp    c000dd4c <sinc_set_converter+0xaf>
c000dd29:	83 fa 06             	cmp    edx,0x6
c000dd2c:	75 10                	jne    c000dd3e <sinc_set_converter+0xa1>
c000dd2e:	c7 43 24 3e c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13e
c000dd35:	c7 43 20 3e c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13e
c000dd3c:	eb 0e                	jmp    c000dd4c <sinc_set_converter+0xaf>
c000dd3e:	c7 43 24 7a ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba7a
c000dd45:	c7 43 20 7a ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba7a
c000dd4c:	c7 43 28 2d ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2d
c000dd53:	b8 0a 00 00 00       	mov    eax,0xa
c000dd58:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5e:	5b                   	pop    ebx
c000dd5f:	c3                   	ret    

c000dd60 <zoh_vari_process>:
c000dd60:	55                   	push   ebp
c000dd61:	31 d2                	xor    edx,edx
c000dd63:	57                   	push   edi
c000dd64:	56                   	push   esi
c000dd65:	53                   	push   ebx
c000dd66:	83 ec 3c             	sub    esp,0x3c
c000dd69:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd71:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd75:	0f 8e 80 06 00 00    	jle    c000e3fb <zoh_vari_process+0x69b>
c000dd7b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7e:	ba 05 00 00 00       	mov    edx,0x5
c000dd83:	85 db                	test   ebx,ebx
c000dd85:	0f 84 70 06 00 00    	je     c000e3fb <zoh_vari_process+0x69b>
c000dd8b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd92:	74 19                	je     c000ddad <zoh_vari_process+0x4d>
c000dd94:	31 d2                	xor    edx,edx
c000dd96:	39 c2                	cmp    edx,eax
c000dd98:	7d 0c                	jge    c000dda6 <zoh_vari_process+0x46>
c000dd9a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9c:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9f:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda3:	42                   	inc    edx
c000dda4:	eb f0                	jmp    c000dd96 <zoh_vari_process+0x36>
c000dda6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddb0:	0f af d0             	imul   edx,eax
c000ddb3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb6:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddba:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddc1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddcb:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddce:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd8:	68 00 00 70 3f       	push   0x3f700000
c000dddd:	6a 00                	push   0x0
c000dddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde7:	e8 1b af 01 00       	call   c0028d07 <__ltdf2>
c000ddec:	83 c4 10             	add    esp,0x10
c000ddef:	ba 16 00 00 00       	mov    edx,0x16
c000ddf4:	85 c0                	test   eax,eax
c000ddf6:	0f 88 ff 05 00 00    	js     c000e3fb <zoh_vari_process+0x69b>
c000ddfc:	68 00 00 70 40       	push   0x40700000
c000de01:	6a 00                	push   0x0
c000de03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0b:	e8 d9 ae 01 00       	call   c0028ce9 <__gtdf2>
c000de10:	83 c4 10             	add    esp,0x10
c000de13:	ba 16 00 00 00       	mov    edx,0x16
c000de18:	85 c0                	test   eax,eax
c000de1a:	0f 8f db 05 00 00    	jg     c000e3fb <zoh_vari_process+0x69b>
c000de20:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de23:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2e:	68 00 00 f0 3f       	push   0x3ff00000
c000de33:	6a 00                	push   0x0
c000de35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3d:	e8 c5 ae 01 00       	call   c0028d07 <__ltdf2>
c000de42:	83 c4 10             	add    esp,0x10
c000de45:	85 c0                	test   eax,eax
c000de47:	0f 89 da 01 00 00    	jns    c000e027 <zoh_vari_process+0x2c7>
c000de4d:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de50:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de53:	0f 8d ce 01 00 00    	jge    c000e027 <zoh_vari_process+0x2c7>
c000de59:	83 ec 0c             	sub    esp,0xc
c000de5c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5f:	e8 37 ac 01 00       	call   c0028a9b <__floatsidf>
c000de64:	83 c4 10             	add    esp,0x10
c000de67:	89 04 24             	mov    DWORD PTR [esp],eax
c000de6a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7e:	e8 b5 a5 01 00       	call   c0028438 <__muldf3>
c000de83:	59                   	pop    ecx
c000de84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de88:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8f:	e8 07 ac 01 00       	call   c0028a9b <__floatsidf>
c000de94:	83 c4 10             	add    esp,0x10
c000de97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9f:	52                   	push   edx
c000dea0:	50                   	push   eax
c000dea1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea9:	e8 0d 9f 01 00       	call   c0027dbb <__adddf3>
c000deae:	59                   	pop    ecx
c000deaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deba:	e8 dc ab 01 00       	call   c0028a9b <__floatsidf>
c000debf:	83 c4 10             	add    esp,0x10
c000dec2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000deca:	52                   	push   edx
c000decb:	50                   	push   eax
c000decc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded4:	e8 2c ae 01 00       	call   c0028d05 <__gedf2>
c000ded9:	83 c4 10             	add    esp,0x10
c000dedc:	85 c0                	test   eax,eax
c000dede:	0f 89 43 01 00 00    	jns    c000e027 <zoh_vari_process+0x2c7>
c000dee4:	85 ed                	test   ebp,ebp
c000dee6:	0f 8e ec 00 00 00    	jle    c000dfd8 <zoh_vari_process+0x278>
c000deec:	83 ec 10             	sub    esp,0x10
c000deef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def5:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def8:	ff 37                	push   DWORD PTR [edi]
c000defa:	e8 0d a5 01 00       	call   c002840c <__subdf3>
c000deff:	83 c4 18             	add    esp,0x18
c000df02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df0a:	52                   	push   edx
c000df0b:	50                   	push   eax
c000df0c:	e8 8f af 01 00       	call   c0028ea0 <fabs>
c000df11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df19:	83 c4 10             	add    esp,0x10
c000df1c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df21:	68 23 42 92 0c       	push   0xc924223
c000df26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2e:	e8 b6 ad 01 00       	call   c0028ce9 <__gtdf2>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	85 c0                	test   eax,eax
c000df38:	0f 8e 9a 00 00 00    	jle    c000dfd8 <zoh_vari_process+0x278>
c000df3e:	8b 07                	mov    eax,DWORD PTR [edi]
c000df40:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df43:	89 04 24             	mov    DWORD PTR [esp],eax
c000df46:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df4a:	52                   	push   edx
c000df4b:	50                   	push   eax
c000df4c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df52:	e8 b5 a4 01 00       	call   c002840c <__subdf3>
c000df57:	59                   	pop    ecx
c000df58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df60:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df63:	e8 33 ab 01 00       	call   c0028a9b <__floatsidf>
c000df68:	83 c4 10             	add    esp,0x10
c000df6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df73:	52                   	push   edx
c000df74:	50                   	push   eax
c000df75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7d:	e8 b6 a4 01 00       	call   c0028438 <__muldf3>
c000df82:	5d                   	pop    ebp
c000df83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df87:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df8b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8e:	e8 08 ab 01 00       	call   c0028a9b <__floatsidf>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df9a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9e:	52                   	push   edx
c000df9f:	50                   	push   eax
c000dfa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa8:	e8 6f a7 01 00       	call   c002871c <__divdf3>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc8:	e8 ee 9d 01 00       	call   c0027dbb <__adddf3>
c000dfcd:	83 c4 10             	add    esp,0x10
c000dfd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd8:	31 c0                	xor    eax,eax
c000dfda:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdd:	7e 13                	jle    c000dff2 <zoh_vari_process+0x292>
c000dfdf:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe3:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe9:	40                   	inc    eax
c000dfea:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfed:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dff0:	eb e8                	jmp    c000dfda <zoh_vari_process+0x27a>
c000dff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffa:	68 00 00 f0 3f       	push   0x3ff00000
c000dfff:	6a 00                	push   0x0
c000e001:	e8 16 a7 01 00       	call   c002871c <__divdf3>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e010:	52                   	push   edx
c000e011:	50                   	push   eax
c000e012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	e8 9c 9d 01 00       	call   c0027dbb <__adddf3>
c000e01f:	83 c4 10             	add    esp,0x10
c000e022:	e9 ff fd ff ff       	jmp    c000de26 <zoh_vari_process+0xc6>
c000e027:	55                   	push   ebp
c000e028:	55                   	push   ebp
c000e029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e031:	e8 8a ae 01 00       	call   c0028ec0 <lrint>
c000e036:	83 ec 0c             	sub    esp,0xc
c000e039:	50                   	push   eax
c000e03a:	e8 5c aa 01 00       	call   c0028a9b <__floatsidf>
c000e03f:	83 c4 10             	add    esp,0x10
c000e042:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e046:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e04a:	52                   	push   edx
c000e04b:	50                   	push   eax
c000e04c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e050:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e054:	e8 b3 a3 01 00       	call   c002840c <__subdf3>
c000e059:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e061:	83 c4 20             	add    esp,0x20
c000e064:	6a 00                	push   0x0
c000e066:	6a 00                	push   0x0
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 92 ac 01 00       	call   c0028d07 <__ltdf2>
c000e075:	83 c4 10             	add    esp,0x10
c000e078:	85 c0                	test   eax,eax
c000e07a:	79 1e                	jns    c000e09a <zoh_vari_process+0x33a>
c000e07c:	68 00 00 f0 3f       	push   0x3ff00000
c000e081:	6a 00                	push   0x0
c000e083:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e087:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e08b:	e8 2b 9d 01 00       	call   c0027dbb <__adddf3>
c000e090:	83 c4 10             	add    esp,0x10
c000e093:	89 04 24             	mov    DWORD PTR [esp],eax
c000e096:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e09a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09d:	83 ec 10             	sub    esp,0x10
c000e0a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b0:	e8 57 a3 01 00       	call   c002840c <__subdf3>
c000e0b5:	83 c4 18             	add    esp,0x18
c000e0b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0c0:	52                   	push   edx
c000e0c1:	50                   	push   eax
c000e0c2:	e8 f9 ad 01 00       	call   c0028ec0 <lrint>
c000e0c7:	83 c4 10             	add    esp,0x10
c000e0ca:	0f af e8             	imul   ebp,eax
c000e0cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0d0:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0da:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0e1:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e4:	0f 8d 7a 02 00 00    	jge    c000e364 <zoh_vari_process+0x604>
c000e0ea:	83 ec 0c             	sub    esp,0xc
c000e0ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0f0:	e8 a6 a9 01 00       	call   c0028a9b <__floatsidf>
c000e0f5:	83 c4 10             	add    esp,0x10
c000e0f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e100:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e104:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e108:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e110:	e8 23 a3 01 00       	call   c0028438 <__muldf3>
c000e115:	59                   	pop    ecx
c000e116:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e11a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e122:	e8 74 a9 01 00       	call   c0028a9b <__floatsidf>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e132:	52                   	push   edx
c000e133:	50                   	push   eax
c000e134:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e138:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13c:	e8 7a 9c 01 00       	call   c0027dbb <__adddf3>
c000e141:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14c:	e8 4a a9 01 00       	call   c0028a9b <__floatsidf>
c000e151:	83 c4 10             	add    esp,0x10
c000e154:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e158:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e166:	e8 9e ab 01 00       	call   c0028d09 <__ledf2>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	85 c0                	test   eax,eax
c000e170:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e174:	0f 8f ea 01 00 00    	jg     c000e364 <zoh_vari_process+0x604>
c000e17a:	85 c9                	test   ecx,ecx
c000e17c:	0f 8e ed 00 00 00    	jle    c000e26f <zoh_vari_process+0x50f>
c000e182:	83 ec 10             	sub    esp,0x10
c000e185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e18b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18e:	ff 37                	push   DWORD PTR [edi]
c000e190:	e8 77 a2 01 00       	call   c002840c <__subdf3>
c000e195:	83 c4 18             	add    esp,0x18
c000e198:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1a0:	52                   	push   edx
c000e1a1:	50                   	push   eax
c000e1a2:	e8 f9 ac 01 00       	call   c0028ea0 <fabs>
c000e1a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1ab:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1af:	83 c4 10             	add    esp,0x10
c000e1b2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b7:	68 23 42 92 0c       	push   0xc924223
c000e1bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c4:	e8 20 ab 01 00       	call   c0028ce9 <__gtdf2>
c000e1c9:	83 c4 10             	add    esp,0x10
c000e1cc:	85 c0                	test   eax,eax
c000e1ce:	0f 8e 9b 00 00 00    	jle    c000e26f <zoh_vari_process+0x50f>
c000e1d4:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1e1:	52                   	push   edx
c000e1e2:	50                   	push   eax
c000e1e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e9:	e8 1e a2 01 00       	call   c002840c <__subdf3>
c000e1ee:	5d                   	pop    ebp
c000e1ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1fa:	e8 9c a8 01 00       	call   c0028a9b <__floatsidf>
c000e1ff:	83 c4 10             	add    esp,0x10
c000e202:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e206:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e20a:	52                   	push   edx
c000e20b:	50                   	push   eax
c000e20c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e214:	e8 1f a2 01 00       	call   c0028438 <__muldf3>
c000e219:	59                   	pop    ecx
c000e21a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e222:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e225:	e8 71 a8 01 00       	call   c0028a9b <__floatsidf>
c000e22a:	83 c4 10             	add    esp,0x10
c000e22d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e231:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e235:	52                   	push   edx
c000e236:	50                   	push   eax
c000e237:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23f:	e8 d8 a4 01 00       	call   c002871c <__divdf3>
c000e244:	83 c4 10             	add    esp,0x10
c000e247:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e24b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e253:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25f:	e8 57 9b 01 00       	call   c0027dbb <__adddf3>
c000e264:	83 c4 10             	add    esp,0x10
c000e267:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e26b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26f:	31 d2                	xor    edx,edx
c000e271:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e274:	39 d0                	cmp    eax,edx
c000e276:	7e 1d                	jle    c000e295 <zoh_vari_process+0x535>
c000e278:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e27b:	29 c1                	sub    ecx,eax
c000e27d:	89 c8                	mov    eax,ecx
c000e27f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e281:	01 d0                	add    eax,edx
c000e283:	42                   	inc    edx
c000e284:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e287:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e28a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28d:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e290:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e293:	eb dc                	jmp    c000e271 <zoh_vari_process+0x511>
c000e295:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e299:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29d:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a2:	6a 00                	push   0x0
c000e2a4:	e8 73 a4 01 00       	call   c002871c <__divdf3>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c4:	e8 f2 9a 01 00       	call   c0027dbb <__adddf3>
c000e2c9:	5d                   	pop    ebp
c000e2ca:	59                   	pop    ecx
c000e2cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2db:	e8 e0 ab 01 00       	call   c0028ec0 <lrint>
c000e2e0:	83 ec 0c             	sub    esp,0xc
c000e2e3:	50                   	push   eax
c000e2e4:	e8 b2 a7 01 00       	call   c0028a9b <__floatsidf>
c000e2e9:	83 c4 10             	add    esp,0x10
c000e2ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f4:	52                   	push   edx
c000e2f5:	50                   	push   eax
c000e2f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fe:	e8 09 a1 01 00       	call   c002840c <__subdf3>
c000e303:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e307:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e30b:	83 c4 20             	add    esp,0x20
c000e30e:	6a 00                	push   0x0
c000e310:	6a 00                	push   0x0
c000e312:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e316:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e31a:	e8 e8 a9 01 00       	call   c0028d07 <__ltdf2>
c000e31f:	83 c4 10             	add    esp,0x10
c000e322:	85 c0                	test   eax,eax
c000e324:	79 1e                	jns    c000e344 <zoh_vari_process+0x5e4>
c000e326:	68 00 00 f0 3f       	push   0x3ff00000
c000e32b:	6a 00                	push   0x0
c000e32d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e331:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e335:	e8 81 9a 01 00       	call   c0027dbb <__adddf3>
c000e33a:	83 c4 10             	add    esp,0x10
c000e33d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e340:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e344:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e347:	83 ec 10             	sub    esp,0x10
c000e34a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e356:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e35a:	e8 ad a0 01 00       	call   c002840c <__subdf3>
c000e35f:	e9 51 fd ff ff       	jmp    c000e0b5 <zoh_vari_process+0x355>
c000e364:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e368:	7d 3a                	jge    c000e3a4 <zoh_vari_process+0x644>
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	83 ec 0c             	sub    esp,0xc
c000e371:	29 e8                	sub    eax,ebp
c000e373:	99                   	cdq    
c000e374:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e377:	50                   	push   eax
c000e378:	e8 1e a7 01 00       	call   c0028a9b <__floatsidf>
c000e37d:	83 c4 10             	add    esp,0x10
c000e380:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e384:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e388:	52                   	push   edx
c000e389:	50                   	push   eax
c000e38a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e392:	e8 24 9a 01 00       	call   c0027dbb <__adddf3>
c000e397:	83 c4 10             	add    esp,0x10
c000e39a:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3a0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3ab:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ae:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b4:	85 c0                	test   eax,eax
c000e3b6:	7f 25                	jg     c000e3dd <zoh_vari_process+0x67d>
c000e3b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3c0:	89 07                	mov    DWORD PTR [edi],eax
c000e3c2:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d2:	99                   	cdq    
c000e3d3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3db:	eb 1e                	jmp    c000e3fb <zoh_vari_process+0x69b>
c000e3dd:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3e0:	31 d2                	xor    edx,edx
c000e3e2:	29 c8                	sub    eax,ecx
c000e3e4:	c1 e0 02             	shl    eax,0x2
c000e3e7:	39 d1                	cmp    ecx,edx
c000e3e9:	7e cd                	jle    c000e3b8 <zoh_vari_process+0x658>
c000e3eb:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3ed:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3f1:	83 c0 04             	add    eax,0x4
c000e3f4:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f8:	42                   	inc    edx
c000e3f9:	eb ec                	jmp    c000e3e7 <zoh_vari_process+0x687>
c000e3fb:	83 c4 3c             	add    esp,0x3c
c000e3fe:	89 d0                	mov    eax,edx
c000e400:	5b                   	pop    ebx
c000e401:	5e                   	pop    esi
c000e402:	5f                   	pop    edi
c000e403:	5d                   	pop    ebp
c000e404:	c3                   	ret    

c000e405 <zoh_reset>:
c000e405:	83 ec 0c             	sub    esp,0xc
c000e408:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40f:	85 c0                	test   eax,eax
c000e411:	74 20                	je     c000e433 <zoh_reset+0x2e>
c000e413:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e416:	83 c0 1c             	add    eax,0x1c
c000e419:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e423:	c1 e2 02             	shl    edx,0x2
c000e426:	51                   	push   ecx
c000e427:	52                   	push   edx
c000e428:	6a 00                	push   0x0
c000e42a:	50                   	push   eax
c000e42b:	e8 3c 23 ff ff       	call   c000076c <memset>
c000e430:	83 c4 10             	add    esp,0x10
c000e433:	83 c4 0c             	add    esp,0xc
c000e436:	c3                   	ret    

c000e437 <zoh_get_name>:
c000e437:	31 c0                	xor    eax,eax
c000e439:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43e:	75 05                	jne    c000e445 <zoh_get_name+0xe>
c000e440:	b8 be a8 02 c0       	mov    eax,0xc002a8be
c000e445:	c3                   	ret    

c000e446 <zoh_get_description>:
c000e446:	31 c0                	xor    eax,eax
c000e448:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44d:	75 05                	jne    c000e454 <zoh_get_description+0xe>
c000e44f:	b8 cf a8 02 c0       	mov    eax,0xc002a8cf
c000e454:	c3                   	ret    

c000e455 <zoh_set_converter>:
c000e455:	53                   	push   ebx
c000e456:	b8 0a 00 00 00       	mov    eax,0xa
c000e45b:	83 ec 08             	sub    esp,0x8
c000e45e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e462:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e467:	75 6e                	jne    c000e4d7 <zoh_set_converter+0x82>
c000e469:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46c:	85 c0                	test   eax,eax
c000e46e:	74 13                	je     c000e483 <zoh_set_converter+0x2e>
c000e470:	83 ec 0c             	sub    esp,0xc
c000e473:	50                   	push   eax
c000e474:	e8 57 14 00 00       	call   c000f8d0 <free>
c000e479:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e480:	83 c4 10             	add    esp,0x10
c000e483:	50                   	push   eax
c000e484:	50                   	push   eax
c000e485:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e488:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48f:	50                   	push   eax
c000e490:	6a 01                	push   0x1
c000e492:	e8 59 14 00 00       	call   c000f8f0 <calloc>
c000e497:	83 c4 10             	add    esp,0x10
c000e49a:	89 c2                	mov    edx,eax
c000e49c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49f:	85 d2                	test   edx,edx
c000e4a1:	b8 01 00 00 00       	mov    eax,0x1
c000e4a6:	74 2f                	je     c000e4d7 <zoh_set_converter+0x82>
c000e4a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4ab:	83 ec 0c             	sub    esp,0xc
c000e4ae:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4b1:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b7:	c7 43 24 60 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd60
c000e4be:	c7 43 20 60 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd60
c000e4c5:	c7 43 28 05 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e405
c000e4cc:	53                   	push   ebx
c000e4cd:	e8 33 ff ff ff       	call   c000e405 <zoh_reset>
c000e4d2:	83 c4 10             	add    esp,0x10
c000e4d5:	31 c0                	xor    eax,eax
c000e4d7:	83 c4 08             	add    esp,0x8
c000e4da:	5b                   	pop    ebx
c000e4db:	c3                   	ret    

c000e4dc <CPU::current()>:
c000e4dc:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c000e4e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e7:	c3                   	ret    

c000e4e8 <operator new(unsigned long)>:
c000e4e8:	e9 d3 13 00 00       	jmp    c000f8c0 <malloc>

c000e4ed <operator delete(void*)>:
c000e4ed:	e9 ee 13 00 00       	jmp    c000f8e0 <rfree>

c000e4f2 <disableIRQs()>:
c000e4f2:	fa                   	cli    
c000e4f3:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c000e4f9:	c3                   	ret    

c000e4fa <enableIRQs()>:
c000e4fa:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c000e4ff:	48                   	dec    eax
c000e500:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c000e505:	75 01                	jne    c000e508 <enableIRQs()+0xe>
c000e507:	fb                   	sti    
c000e508:	c3                   	ret    

c000e509 <lockScheduler()>:
c000e509:	fa                   	cli    
c000e50a:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c000e510:	c3                   	ret    

c000e511 <unlockScheduler()>:
c000e511:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c000e516:	48                   	dec    eax
c000e517:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c000e51c:	75 01                	jne    c000e51f <unlockScheduler()+0xe>
c000e51e:	fb                   	sti    
c000e51f:	c3                   	ret    

c000e520 <lockStuff()>:
c000e520:	fa                   	cli    
c000e521:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c000e527:	ff 05 04 24 03 c0    	inc    DWORD PTR ds:0xc0032404
c000e52d:	c3                   	ret    

c000e52e <unlockStuff()>:
c000e52e:	83 ec 0c             	sub    esp,0xc
c000e531:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c000e536:	48                   	dec    eax
c000e537:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c000e53c:	75 18                	jne    c000e556 <unlockStuff()+0x28>
c000e53e:	83 3d 00 24 03 c0 00 	cmp    DWORD PTR ds:0xc0032400,0x0
c000e545:	74 0f                	je     c000e556 <unlockStuff()+0x28>
c000e547:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c000e551:	e8 94 ff 00 00       	call   c001e4ea <schedule()>
c000e556:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c000e55b:	48                   	dec    eax
c000e55c:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c000e561:	75 01                	jne    c000e564 <unlockStuff()+0x36>
c000e563:	fb                   	sti    
c000e564:	83 c4 0c             	add    esp,0xc
c000e567:	c3                   	ret    

c000e568 <Virt::getAKernelVAS()>:
c000e568:	a1 50 f0 02 c0       	mov    eax,ds:0xc002f050
c000e56d:	c3                   	ret    

c000e56e <__not_memcpy>:
c000e56e:	e9 3d 28 ff ff       	jmp    c0000db0 <realmemcpy>

c000e573 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e573:	83 ec 0c             	sub    esp,0xc
c000e576:	83 ec 08             	sub    esp,0x8
c000e579:	68 06 a9 02 c0       	push   0xc002a906
c000e57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e582:	e8 2d 23 ff ff       	call   c00008b4 <strcmp>
c000e587:	83 c4 10             	add    esp,0x10
c000e58a:	85 c0                	test   eax,eax
c000e58c:	0f 94 c0             	sete   al
c000e58f:	84 c0                	test   al,al
c000e591:	74 0a                	je     c000e59d <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e593:	b8 c8 ee 02 c0       	mov    eax,0xc002eec8
c000e598:	e9 e3 00 00 00       	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e59d:	83 ec 08             	sub    esp,0x8
c000e5a0:	68 0f a9 02 c0       	push   0xc002a90f
c000e5a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a9:	e8 06 23 ff ff       	call   c00008b4 <strcmp>
c000e5ae:	83 c4 10             	add    esp,0x10
c000e5b1:	85 c0                	test   eax,eax
c000e5b3:	0f 94 c0             	sete   al
c000e5b6:	84 c0                	test   al,al
c000e5b8:	74 0a                	je     c000e5c4 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5ba:	b8 34 72 02 c0       	mov    eax,0xc0027234
c000e5bf:	e9 bc 00 00 00       	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5c4:	83 ec 08             	sub    esp,0x8
c000e5c7:	68 19 a9 02 c0       	push   0xc002a919
c000e5cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5d0:	e8 df 22 ff ff       	call   c00008b4 <strcmp>
c000e5d5:	83 c4 10             	add    esp,0x10
c000e5d8:	85 c0                	test   eax,eax
c000e5da:	0f 94 c0             	sete   al
c000e5dd:	84 c0                	test   al,al
c000e5df:	74 0a                	je     c000e5eb <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5e1:	b8 68 6f 02 c0       	mov    eax,0xc0026f68
c000e5e6:	e9 95 00 00 00       	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5eb:	83 ec 08             	sub    esp,0x8
c000e5ee:	68 22 a9 02 c0       	push   0xc002a922
c000e5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5f7:	e8 b8 22 ff ff       	call   c00008b4 <strcmp>
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	85 c0                	test   eax,eax
c000e601:	0f 94 c0             	sete   al
c000e604:	84 c0                	test   al,al
c000e606:	74 07                	je     c000e60f <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e608:	b8 34 73 02 c0       	mov    eax,0xc0027334
c000e60d:	eb 71                	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e60f:	83 ec 08             	sub    esp,0x8
c000e612:	68 2c a9 02 c0       	push   0xc002a92c
c000e617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e61b:	e8 94 22 ff ff       	call   c00008b4 <strcmp>
c000e620:	83 c4 10             	add    esp,0x10
c000e623:	85 c0                	test   eax,eax
c000e625:	0f 94 c0             	sete   al
c000e628:	84 c0                	test   al,al
c000e62a:	74 07                	je     c000e633 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e62c:	b8 b4 70 02 c0       	mov    eax,0xc00270b4
c000e631:	eb 4d                	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e633:	83 ec 08             	sub    esp,0x8
c000e636:	68 35 a9 02 c0       	push   0xc002a935
c000e63b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e63f:	e8 70 22 ff ff       	call   c00008b4 <strcmp>
c000e644:	83 c4 10             	add    esp,0x10
c000e647:	85 c0                	test   eax,eax
c000e649:	0f 94 c0             	sete   al
c000e64c:	84 c0                	test   al,al
c000e64e:	74 07                	je     c000e657 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e650:	b8 cc ee 02 c0       	mov    eax,0xc002eecc
c000e655:	eb 29                	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e657:	83 ec 08             	sub    esp,0x8
c000e65a:	68 42 a9 02 c0       	push   0xc002a942
c000e65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e663:	e8 4c 22 ff ff       	call   c00008b4 <strcmp>
c000e668:	83 c4 10             	add    esp,0x10
c000e66b:	85 c0                	test   eax,eax
c000e66d:	0f 94 c0             	sete   al
c000e670:	84 c0                	test   al,al
c000e672:	74 07                	je     c000e67b <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e674:	b8 cd ee 02 c0       	mov    eax,0xc002eecd
c000e679:	eb 05                	jmp    c000e680 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e67b:	b8 00 00 00 00       	mov    eax,0x0
c000e680:	83 c4 0c             	add    esp,0xc
c000e683:	c3                   	ret    

c000e684 <Computer::close(int, int, void*)>:
c000e684:	57                   	push   edi
c000e685:	56                   	push   esi
c000e686:	53                   	push   ebx
c000e687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e68b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e68f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e693:	83 ec 0c             	sub    esp,0xc
c000e696:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e69c:	e8 81 5d 00 00       	call   c0014422 <Device::closeAll()>
c000e6a1:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e6a7:	83 c4 10             	add    esp,0x10
c000e6aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6ac:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e6b0:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e6b8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6c0:	5b                   	pop    ebx
c000e6c1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6c4:	5e                   	pop    esi
c000e6c5:	5f                   	pop    edi
c000e6c6:	ff e0                	jmp    eax

c000e6c8 <Krnl::firstTask()>:
c000e6c8:	53                   	push   ebx
c000e6c9:	83 ec 14             	sub    esp,0x14
c000e6cc:	fb                   	sti    
c000e6cd:	68 3f 07 00 00       	push   0x73f
c000e6d2:	e8 e9 11 00 00       	call   c000f8c0 <malloc>
c000e6d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6de:	89 c3                	mov    ebx,eax
c000e6e0:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c000e6e6:	68 4f a9 02 c0       	push   0xc002a94f
c000e6eb:	6a 01                	push   0x1
c000e6ed:	50                   	push   eax
c000e6ee:	e8 bb f9 00 00       	call   c001e0ae <Process::Process(bool, char const*, Process*, char**)>
c000e6f3:	83 c4 20             	add    esp,0x20
c000e6f6:	68 ff 00 00 00       	push   0xff
c000e6fb:	6a 00                	push   0x0
c000e6fd:	68 53 f2 00 c0       	push   0xc000f253
c000e702:	53                   	push   ebx
c000e703:	e8 9e fb 00 00       	call   c001e2a6 <Process::createThread(void (*)(void*), void*, int)>
c000e708:	6a 7a                	push   0x7a
c000e70a:	6a 00                	push   0x0
c000e70c:	68 24 ed 01 c0       	push   0xc001ed24
c000e711:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c000e717:	e8 8a fb 00 00       	call   c001e2a6 <Process::createThread(void (*)(void*), void*, int)>
c000e71c:	83 c4 20             	add    esp,0x20
c000e71f:	a3 e8 23 03 c0       	mov    ds:0xc00323e8,eax
c000e724:	c6 05 cd ee 02 c0 01 	mov    BYTE PTR ds:0xc002eecd,0x1
c000e72b:	e8 48 0a 01 00       	call   c001f178 <Vm::initialise8086()>
c000e730:	e8 cd 4a 00 00       	call   c0013202 <Fs::initVFS()>
c000e735:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c000e73a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e740:	8b 10                	mov    edx,DWORD PTR [eax]
c000e742:	6a 00                	push   0x0
c000e744:	6a 00                	push   0x0
c000e746:	6a 00                	push   0x0
c000e748:	50                   	push   eax
c000e749:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e74c:	e8 eb e1 00 00       	call   c001c93c <Sys::loadSyscalls()>
c000e751:	e8 d6 bf 00 00       	call   c001a72c <Krnl::loadSystemEnv()>
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	6a 3a                	push   0x3a
c000e75b:	68 5c a9 02 c0       	push   0xc002a95c
c000e760:	68 65 a9 02 c0       	push   0xc002a965
c000e765:	e8 76 cd 00 00       	call   c001b4e0 <Reg::readIntWithDefault(char*, char*, int)>
c000e76a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e76d:	e8 80 55 00 00       	call   c0013cf2 <User::loadClockSettings(int)>
c000e772:	58                   	pop    eax
c000e773:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c000e778:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e77e:	e8 73 5c 00 00       	call   c00143f6 <Device::loadDriversForAll()>
c000e783:	e8 ea ba 00 00       	call   c001a272 <Krnl::startCPUs()>
c000e788:	5a                   	pop    edx
c000e789:	8b 1d c8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eec8
c000e78f:	59                   	pop    ecx
c000e790:	6a 01                	push   0x1
c000e792:	68 6d a9 02 c0       	push   0xc002a96d
c000e797:	e8 70 f3 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c000e79c:	5a                   	pop    edx
c000e79d:	59                   	pop    ecx
c000e79e:	53                   	push   ebx
c000e79f:	50                   	push   eax
c000e7a0:	e8 92 f5 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c000e7a5:	83 c4 10             	add    esp,0x10
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	6a 02                	push   0x2
c000e7ad:	e8 37 ff 00 00       	call   c001e6e9 <blockTask(TaskState)>
c000e7b2:	83 c4 10             	add    esp,0x10
c000e7b5:	eb f1                	jmp    c000e7a8 <Krnl::firstTask()+0xe0>
c000e7b7:	90                   	nop

c000e7b8 <Computer::Computer()>:
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bf:	83 ec 08             	sub    esp,0x8
c000e7c2:	68 89 a9 02 c0       	push   0xc002a989
c000e7c7:	50                   	push   eax
c000e7c8:	e8 cf 5c 00 00       	call   c001449c <Device::Device(char const*)>
c000e7cd:	83 c4 10             	add    esp,0x10
c000e7d0:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c000e7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d9:	89 10                	mov    DWORD PTR [eax],edx
c000e7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7df:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e801:	83 ca 04             	or     edx,0x4
c000e804:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e814:	0f b6 d0             	movzx  edx,al
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e826:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e82c:	0f b6 d0             	movzx  edx,al
c000e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e833:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e842:	8d 50 01             	lea    edx,[eax+0x1]
c000e845:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e849:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e85a:	83 e1 3f             	and    ecx,0x3f
c000e85d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86b:	0f b6 d0             	movzx  edx,al
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e883:	0f b6 d0             	movzx  edx,al
c000e886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e893:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e899:	8d 50 01             	lea    edx,[eax+0x1]
c000e89c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8b1:	83 e1 3f             	and    ecx,0x3f
c000e8b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c2:	0f b6 d0             	movzx  edx,al
c000e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8da:	0f b6 d0             	movzx  edx,al
c000e8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f0:	8d 50 01             	lea    edx,[eax+0x1]
c000e8f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8f7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8fd:	0f b6 d0             	movzx  edx,al
c000e900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e904:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e908:	83 e1 3f             	and    ecx,0x3f
c000e90b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e90f:	90                   	nop
c000e910:	83 c4 0c             	add    esp,0xc
c000e913:	c3                   	ret    

c000e914 <Computer::setBootMessage(char const*)>:
c000e914:	c3                   	ret    
c000e915:	90                   	nop

c000e916 <Computer::detectFeatures()>:
c000e916:	55                   	push   ebp
c000e917:	57                   	push   edi
c000e918:	56                   	push   esi
c000e919:	53                   	push   ebx
c000e91a:	83 ec 1c             	sub    esp,0x1c
c000e91d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e921:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e92b:	e8 b4 19 ff ff       	call   c00002e4 <detectCPUID>
c000e930:	85 c0                	test   eax,eax
c000e932:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e938:	0f 95 c2             	setne  dl
c000e93b:	83 e0 fd             	and    eax,0xfffffffd
c000e93e:	d1 e2                	shl    edx,1
c000e940:	09 d0                	or     eax,edx
c000e942:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e948:	a8 02                	test   al,0x2
c000e94a:	75 46                	jne    c000e992 <Computer::detectFeatures()+0x7c>
c000e94c:	f6 05 e1 ee 02 c0 04 	test   BYTE PTR ds:0xc002eee1,0x4
c000e953:	74 07                	je     c000e95c <Computer::detectFeatures()+0x46>
c000e955:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e95c:	e8 95 85 01 00       	call   c0026ef6 <x87Detect>
c000e961:	83 e0 01             	and    eax,0x1
c000e964:	c1 e0 04             	shl    eax,0x4
c000e967:	88 c2                	mov    dl,al
c000e969:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e96f:	83 e0 ef             	and    eax,0xffffffef
c000e972:	09 d0                	or     eax,edx
c000e974:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e97a:	a8 10                	test   al,0x10
c000e97c:	0f 85 2a 01 00 00    	jne    c000eaac <Computer::detectFeatures()+0x196>
c000e982:	84 c0                	test   al,al
c000e984:	0f 88 45 01 00 00    	js     c000eacf <Computer::detectFeatures()+0x1b9>
c000e98a:	83 c4 1c             	add    esp,0x1c
c000e98d:	5b                   	pop    ebx
c000e98e:	5e                   	pop    esi
c000e98f:	5f                   	pop    edi
c000e990:	5d                   	pop    ebp
c000e991:	c3                   	ret    
c000e992:	83 ec 0c             	sub    esp,0xc
c000e995:	6a 20                	push   0x20
c000e997:	e8 e8 a5 00 00       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c000e99c:	83 e0 01             	and    eax,0x1
c000e99f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9a6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ac:	83 e0 f7             	and    eax,0xfffffff7
c000e9af:	09 d0                	or     eax,edx
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9be:	e8 c1 a5 00 00       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c000e9c3:	83 e0 01             	and    eax,0x1
c000e9c6:	88 c2                	mov    dl,al
c000e9c8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ce:	83 e0 fe             	and    eax,0xfffffffe
c000e9d1:	09 d0                	or     eax,edx
c000e9d3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9d9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9e0:	e8 9f a5 00 00       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e5:	c1 e0 07             	shl    eax,0x7
c000e9e8:	88 c2                	mov    dl,al
c000e9ea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9f0:	83 e0 7f             	and    eax,0x7f
c000e9f3:	09 d0                	or     eax,edx
c000e9f5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9fb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea02:	e8 7d a5 00 00       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	83 e0 01             	and    eax,0x1
c000ea0d:	c1 e0 05             	shl    eax,0x5
c000ea10:	88 c2                	mov    dl,al
c000ea12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea18:	83 e0 df             	and    eax,0xffffffdf
c000ea1b:	09 d0                	or     eax,edx
c000ea1d:	f7 05 e0 ee 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002eee0,0x401
c000ea27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea2d:	0f 84 c2 00 00 00    	je     c000eaf5 <Computer::detectFeatures()+0x1df>
c000ea33:	83 e0 fe             	and    eax,0xfffffffe
c000ea36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea42:	88 c2                	mov    dl,al
c000ea44:	83 e2 09             	and    edx,0x9
c000ea47:	fe ca                	dec    dl
c000ea49:	75 09                	jne    c000ea54 <Computer::detectFeatures()+0x13e>
c000ea4b:	83 e0 fe             	and    eax,0xfffffffe
c000ea4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea54:	83 ec 0c             	sub    esp,0xc
c000ea57:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea5b:	50                   	push   eax
c000ea5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea60:	55                   	push   ebp
c000ea61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea65:	57                   	push   edi
c000ea66:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea6a:	56                   	push   esi
c000ea6b:	68 00 00 00 80       	push   0x80000000
c000ea70:	e8 8b a4 00 00       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea75:	83 c4 20             	add    esp,0x20
c000ea78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea83:	0f 86 c3 fe ff ff    	jbe    c000e94c <Computer::detectFeatures()+0x36>
c000ea89:	83 ec 0c             	sub    esp,0xc
c000ea8c:	50                   	push   eax
c000ea8d:	55                   	push   ebp
c000ea8e:	57                   	push   edi
c000ea8f:	56                   	push   esi
c000ea90:	68 01 00 00 80       	push   0x80000001
c000ea95:	e8 66 a4 00 00       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eaa4:	83 c4 20             	add    esp,0x20
c000eaa7:	e9 a0 fe ff ff       	jmp    c000e94c <Computer::detectFeatures()+0x36>
c000eaac:	e8 ff 83 01 00       	call   c0026eb0 <absolutelyNoChanceInHell>
c000eab1:	88 c2                	mov    dl,al
c000eab3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eab9:	c1 e2 07             	shl    edx,0x7
c000eabc:	83 e0 7f             	and    eax,0x7f
c000eabf:	09 d0                	or     eax,edx
c000eac1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eac7:	84 c0                	test   al,al
c000eac9:	0f 89 bb fe ff ff    	jns    c000e98a <Computer::detectFeatures()+0x74>
c000eacf:	e8 bc 83 01 00       	call   c0026e90 <avxDetect>
c000ead4:	83 e0 01             	and    eax,0x1
c000ead7:	c1 e0 05             	shl    eax,0x5
c000eada:	88 c2                	mov    dl,al
c000eadc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eae2:	83 e0 df             	and    eax,0xffffffdf
c000eae5:	09 d0                	or     eax,edx
c000eae7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eaed:	83 c4 1c             	add    esp,0x1c
c000eaf0:	5b                   	pop    ebx
c000eaf1:	5e                   	pop    esi
c000eaf2:	5f                   	pop    edi
c000eaf3:	5d                   	pop    ebp
c000eaf4:	c3                   	ret    
c000eaf5:	83 ec 0c             	sub    esp,0xc
c000eaf8:	68 00 02 00 00       	push   0x200
c000eafd:	e8 82 a4 00 00       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	83 e0 01             	and    eax,0x1
c000eb08:	88 c2                	mov    dl,al
c000eb0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb10:	83 e0 fe             	and    eax,0xfffffffe
c000eb13:	09 d0                	or     eax,edx
c000eb15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb1b:	e9 1c ff ff ff       	jmp    c000ea3c <Computer::detectFeatures()+0x126>

c000eb20 <Computer::displayFeatures()>:
c000eb20:	53                   	push   ebx
c000eb21:	83 ec 14             	sub    esp,0x14
c000eb24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb28:	68 99 a9 02 c0       	push   0xc002a999
c000eb2d:	e8 45 43 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000eb32:	83 c4 10             	add    esp,0x10
c000eb35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb3c:	0f 85 73 02 00 00    	jne    c000edb5 <Computer::displayFeatures()+0x295>
c000eb42:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000eb47:	83 ec 08             	sub    esp,0x8
c000eb4a:	50                   	push   eax
c000eb4b:	68 ac a9 02 c0       	push   0xc002a9ac
c000eb50:	e8 22 43 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000eb55:	83 c4 10             	add    esp,0x10
c000eb58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb5f:	0f 85 8c 02 00 00    	jne    c000edf1 <Computer::displayFeatures()+0x2d1>
c000eb65:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000eb6a:	83 ec 08             	sub    esp,0x8
c000eb6d:	50                   	push   eax
c000eb6e:	68 bd a9 02 c0       	push   0xc002a9bd
c000eb73:	e8 ff 42 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000eb78:	83 c4 10             	add    esp,0x10
c000eb7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb82:	0f 85 5f 02 00 00    	jne    c000ede7 <Computer::displayFeatures()+0x2c7>
c000eb88:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000eb8d:	83 ec 08             	sub    esp,0x8
c000eb90:	50                   	push   eax
c000eb91:	68 ce a9 02 c0       	push   0xc002a9ce
c000eb96:	e8 dc 42 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eba5:	0f 85 32 02 00 00    	jne    c000eddd <Computer::displayFeatures()+0x2bd>
c000ebab:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ebb0:	83 ec 08             	sub    esp,0x8
c000ebb3:	50                   	push   eax
c000ebb4:	68 df a9 02 c0       	push   0xc002a9df
c000ebb9:	e8 b9 42 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ebbe:	83 c4 10             	add    esp,0x10
c000ebc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebc8:	0f 85 05 02 00 00    	jne    c000edd3 <Computer::displayFeatures()+0x2b3>
c000ebce:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ebd3:	83 ec 08             	sub    esp,0x8
c000ebd6:	50                   	push   eax
c000ebd7:	68 f0 a9 02 c0       	push   0xc002a9f0
c000ebdc:	e8 96 42 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ebe1:	83 c4 10             	add    esp,0x10
c000ebe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebeb:	0f 85 d8 01 00 00    	jne    c000edc9 <Computer::displayFeatures()+0x2a9>
c000ebf1:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ebf6:	83 ec 08             	sub    esp,0x8
c000ebf9:	50                   	push   eax
c000ebfa:	68 01 aa 02 c0       	push   0xc002aa01
c000ebff:	e8 73 42 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ec04:	83 c4 10             	add    esp,0x10
c000ec07:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec0e:	0f 85 ab 01 00 00    	jne    c000edbf <Computer::displayFeatures()+0x29f>
c000ec14:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ec19:	83 ec 08             	sub    esp,0x8
c000ec1c:	50                   	push   eax
c000ec1d:	68 12 aa 02 c0       	push   0xc002aa12
c000ec22:	e8 50 42 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ec27:	83 c4 10             	add    esp,0x10
c000ec2a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec31:	0f 88 1b 02 00 00    	js     c000ee52 <Computer::displayFeatures()+0x332>
c000ec37:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ec3c:	83 ec 08             	sub    esp,0x8
c000ec3f:	50                   	push   eax
c000ec40:	68 23 aa 02 c0       	push   0xc002aa23
c000ec45:	e8 2d 42 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ec4a:	83 c4 10             	add    esp,0x10
c000ec4d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec54:	0f 85 a1 01 00 00    	jne    c000edfb <Computer::displayFeatures()+0x2db>
c000ec5a:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ec5f:	83 ec 08             	sub    esp,0x8
c000ec62:	50                   	push   eax
c000ec63:	68 34 aa 02 c0       	push   0xc002aa34
c000ec68:	e8 0a 42 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ec6d:	83 c4 10             	add    esp,0x10
c000ec70:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec77:	0f 85 cb 01 00 00    	jne    c000ee48 <Computer::displayFeatures()+0x328>
c000ec7d:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ec82:	83 ec 08             	sub    esp,0x8
c000ec85:	50                   	push   eax
c000ec86:	68 45 aa 02 c0       	push   0xc002aa45
c000ec8b:	e8 e7 41 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ec90:	83 c4 10             	add    esp,0x10
c000ec93:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec9a:	0f 85 9e 01 00 00    	jne    c000ee3e <Computer::displayFeatures()+0x31e>
c000eca0:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000eca5:	83 ec 08             	sub    esp,0x8
c000eca8:	50                   	push   eax
c000eca9:	68 56 aa 02 c0       	push   0xc002aa56
c000ecae:	e8 c4 41 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ecb3:	83 c4 10             	add    esp,0x10
c000ecb6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ecbd:	0f 85 71 01 00 00    	jne    c000ee34 <Computer::displayFeatures()+0x314>
c000ecc3:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ecc8:	83 ec 08             	sub    esp,0x8
c000eccb:	50                   	push   eax
c000eccc:	68 67 aa 02 c0       	push   0xc002aa67
c000ecd1:	e8 a1 41 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ecd6:	83 c4 10             	add    esp,0x10
c000ecd9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ece0:	0f 85 44 01 00 00    	jne    c000ee2a <Computer::displayFeatures()+0x30a>
c000ece6:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000eceb:	83 ec 08             	sub    esp,0x8
c000ecee:	50                   	push   eax
c000ecef:	68 78 aa 02 c0       	push   0xc002aa78
c000ecf4:	e8 7e 41 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ecf9:	83 c4 10             	add    esp,0x10
c000ecfc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed03:	0f 85 17 01 00 00    	jne    c000ee20 <Computer::displayFeatures()+0x300>
c000ed09:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ed0e:	83 ec 08             	sub    esp,0x8
c000ed11:	50                   	push   eax
c000ed12:	68 89 aa 02 c0       	push   0xc002aa89
c000ed17:	e8 5b 41 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ed1c:	83 c4 10             	add    esp,0x10
c000ed1f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed26:	0f 85 ea 00 00 00    	jne    c000ee16 <Computer::displayFeatures()+0x2f6>
c000ed2c:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ed31:	83 ec 08             	sub    esp,0x8
c000ed34:	50                   	push   eax
c000ed35:	68 9a aa 02 c0       	push   0xc002aa9a
c000ed3a:	e8 38 41 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ed3f:	83 c4 10             	add    esp,0x10
c000ed42:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed49:	0f 88 0d 01 00 00    	js     c000ee5c <Computer::displayFeatures()+0x33c>
c000ed4f:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ed54:	83 ec 08             	sub    esp,0x8
c000ed57:	50                   	push   eax
c000ed58:	68 ab aa 02 c0       	push   0xc002aaab
c000ed5d:	e8 15 41 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed6c:	0f 85 9a 00 00 00    	jne    c000ee0c <Computer::displayFeatures()+0x2ec>
c000ed72:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ed77:	83 ec 08             	sub    esp,0x8
c000ed7a:	50                   	push   eax
c000ed7b:	68 bc aa 02 c0       	push   0xc002aabc
c000ed80:	e8 f2 40 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ed85:	83 c4 10             	add    esp,0x10
c000ed88:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed8f:	75 74                	jne    c000ee05 <Computer::displayFeatures()+0x2e5>
c000ed91:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c000ed96:	83 ec 08             	sub    esp,0x8
c000ed99:	50                   	push   eax
c000ed9a:	68 cd aa 02 c0       	push   0xc002aacd
c000ed9f:	e8 d3 40 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000eda4:	c7 44 24 20 34 c5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c534
c000edac:	83 c4 18             	add    esp,0x18
c000edaf:	5b                   	pop    ebx
c000edb0:	e9 c2 40 00 00       	jmp    c0012e77 <Dbg::kprintf(char const*, ...)>
c000edb5:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000edba:	e9 88 fd ff ff       	jmp    c000eb47 <Computer::displayFeatures()+0x27>
c000edbf:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000edc4:	e9 50 fe ff ff       	jmp    c000ec19 <Computer::displayFeatures()+0xf9>
c000edc9:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000edce:	e9 23 fe ff ff       	jmp    c000ebf6 <Computer::displayFeatures()+0xd6>
c000edd3:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000edd8:	e9 f6 fd ff ff       	jmp    c000ebd3 <Computer::displayFeatures()+0xb3>
c000eddd:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ede2:	e9 c9 fd ff ff       	jmp    c000ebb0 <Computer::displayFeatures()+0x90>
c000ede7:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000edec:	e9 9c fd ff ff       	jmp    c000eb8d <Computer::displayFeatures()+0x6d>
c000edf1:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000edf6:	e9 6f fd ff ff       	jmp    c000eb6a <Computer::displayFeatures()+0x4a>
c000edfb:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee00:	e9 5a fe ff ff       	jmp    c000ec5f <Computer::displayFeatures()+0x13f>
c000ee05:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee0a:	eb 8a                	jmp    c000ed96 <Computer::displayFeatures()+0x276>
c000ee0c:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee11:	e9 61 ff ff ff       	jmp    c000ed77 <Computer::displayFeatures()+0x257>
c000ee16:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee1b:	e9 11 ff ff ff       	jmp    c000ed31 <Computer::displayFeatures()+0x211>
c000ee20:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee25:	e9 e4 fe ff ff       	jmp    c000ed0e <Computer::displayFeatures()+0x1ee>
c000ee2a:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee2f:	e9 b7 fe ff ff       	jmp    c000eceb <Computer::displayFeatures()+0x1cb>
c000ee34:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee39:	e9 8a fe ff ff       	jmp    c000ecc8 <Computer::displayFeatures()+0x1a8>
c000ee3e:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee43:	e9 5d fe ff ff       	jmp    c000eca5 <Computer::displayFeatures()+0x185>
c000ee48:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee4d:	e9 30 fe ff ff       	jmp    c000ec82 <Computer::displayFeatures()+0x162>
c000ee52:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee57:	e9 e0 fd ff ff       	jmp    c000ec3c <Computer::displayFeatures()+0x11c>
c000ee5c:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c000ee61:	e9 ee fe ff ff       	jmp    c000ed54 <Computer::displayFeatures()+0x234>

c000ee66 <Computer::rdmsr(unsigned int)>:
c000ee66:	83 ec 0c             	sub    esp,0xc
c000ee69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0a                	je     c000ee80 <Computer::rdmsr(unsigned int)+0x1a>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	0f 32                	rdmsr  
c000ee7c:	83 c4 0c             	add    esp,0xc
c000ee7f:	c3                   	ret    
c000ee80:	83 ec 0c             	sub    esp,0xc
c000ee83:	68 de aa 02 c0       	push   0xc002aade
c000ee88:	e8 d8 b9 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	eb e4                	jmp    c000ee76 <Computer::rdmsr(unsigned int)+0x10>

c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee92:	57                   	push   edi
c000ee93:	56                   	push   esi
c000ee94:	52                   	push   edx
c000ee95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee9d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eea1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eea8:	74 0e                	je     c000eeb8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eeaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeae:	89 f0                	mov    eax,esi
c000eeb0:	89 fa                	mov    edx,edi
c000eeb2:	0f 30                	wrmsr  
c000eeb4:	58                   	pop    eax
c000eeb5:	5e                   	pop    esi
c000eeb6:	5f                   	pop    edi
c000eeb7:	c3                   	ret    
c000eeb8:	83 ec 0c             	sub    esp,0xc
c000eebb:	68 e4 aa 02 c0       	push   0xc002aae4
c000eec0:	e8 a0 b9 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000eec5:	83 c4 10             	add    esp,0x10
c000eec8:	eb e0                	jmp    c000eeaa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eeca <Computer::nmiEnabled()>:
c000eeca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eece:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eed4:	c3                   	ret    
c000eed5:	90                   	nop

c000eed6 <Computer::readCMOS(unsigned char)>:
c000eed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeda:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eee1:	19 c0                	sbb    eax,eax
c000eee3:	83 e0 80             	and    eax,0xffffff80
c000eee6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeea:	e6 70                	out    0x70,al
c000eeec:	e4 71                	in     al,0x71
c000eeee:	c3                   	ret    
c000eeef:	90                   	nop

c000eef0 <Computer::enableNMI(bool)>:
c000eef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eefe:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef06:	eb ce                	jmp    c000eed6 <Computer::readCMOS(unsigned char)>

c000ef08 <Computer::open(int, int, void*)>:
c000ef08:	56                   	push   esi
c000ef09:	53                   	push   ebx
c000ef0a:	83 ec 10             	sub    esp,0x10
c000ef0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef11:	f6 05 e0 ee 02 c0 04 	test   BYTE PTR ds:0xc002eee0,0x4
c000ef18:	68 68 12 00 00       	push   0x1268
c000ef1d:	0f 94 05 04 de 02 c0 	sete   BYTE PTR ds:0xc002de04
c000ef24:	e8 97 09 00 00       	call   c000f8c0 <malloc>
c000ef29:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef2c:	89 c6                	mov    esi,eax
c000ef2e:	e8 d5 93 00 00       	call   c0018308 <ACPI::ACPI()>
c000ef33:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef39:	58                   	pop    eax
c000ef3a:	5a                   	pop    edx
c000ef3b:	56                   	push   esi
c000ef3c:	53                   	push   ebx
c000ef3d:	e8 6a 53 00 00       	call   c00142ac <Device::addChild(Device*)>
c000ef42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef45:	e8 cc f9 ff ff       	call   c000e916 <Computer::detectFeatures()>
c000ef4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef4d:	e8 ce fb ff ff       	call   c000eb20 <Computer::displayFeatures()>
c000ef52:	59                   	pop    ecx
c000ef53:	5e                   	pop    esi
c000ef54:	6a 01                	push   0x1
c000ef56:	53                   	push   ebx
c000ef57:	e8 94 ff ff ff       	call   c000eef0 <Computer::enableNMI(bool)>
c000ef5c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef63:	e8 58 09 00 00       	call   c000f8c0 <malloc>
c000ef68:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef6b:	89 c6                	mov    esi,eax
c000ef6d:	e8 ca a0 00 00       	call   c001903c <CPU::CPU()>
c000ef72:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef78:	58                   	pop    eax
c000ef79:	5a                   	pop    edx
c000ef7a:	56                   	push   esi
c000ef7b:	53                   	push   ebx
c000ef7c:	e8 2b 53 00 00       	call   c00142ac <Device::addChild(Device*)>
c000ef81:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef87:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef8d:	6a 00                	push   0x0
c000ef8f:	6a 00                	push   0x0
c000ef91:	50                   	push   eax
c000ef92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef95:	83 c4 20             	add    esp,0x20
c000ef98:	e8 a3 58 00 00       	call   c0014840 <setupFPU()>
c000ef9d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efa3:	85 c0                	test   eax,eax
c000efa5:	74 1f                	je     c000efc6 <Computer::open(int, int, void*)+0xbe>
c000efa7:	83 ec 08             	sub    esp,0x8
c000efaa:	50                   	push   eax
c000efab:	53                   	push   ebx
c000efac:	e8 fb 52 00 00       	call   c00142ac <Device::addChild(Device*)>
c000efb1:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efb7:	8b 10                	mov    edx,DWORD PTR [eax]
c000efb9:	6a 00                	push   0x0
c000efbb:	6a 00                	push   0x0
c000efbd:	6a 00                	push   0x0
c000efbf:	50                   	push   eax
c000efc0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efc3:	83 c4 20             	add    esp,0x20
c000efc6:	83 ec 0c             	sub    esp,0xc
c000efc9:	68 c8 e6 00 c0       	push   0xc000e6c8
c000efce:	e8 f5 f3 00 00       	call   c001e3c8 <setupMultitasking(void (*)())>
c000efd3:	83 c4 14             	add    esp,0x14
c000efd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efdb:	5b                   	pop    ebx
c000efdc:	5e                   	pop    esi
c000efdd:	c3                   	ret    

c000efde <Computer::disableNMI()>:
c000efde:	6a 00                	push   0x0
c000efe0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efe4:	e8 07 ff ff ff       	call   c000eef0 <Computer::enableNMI(bool)>
c000efe9:	58                   	pop    eax
c000efea:	5a                   	pop    edx
c000efeb:	c3                   	ret    

c000efec <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eff0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eff7:	19 c0                	sbb    eax,eax
c000eff9:	83 e0 80             	and    eax,0xffffff80
c000effc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f000:	e6 70                	out    0x70,al
c000f002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f006:	e6 71                	out    0x71,al
c000f008:	c3                   	ret    
c000f009:	90                   	nop

c000f00a <Computer::handleNMI()>:
c000f00a:	56                   	push   esi
c000f00b:	53                   	push   ebx
c000f00c:	83 ec 10             	sub    esp,0x10
c000f00f:	e4 92                	in     al,0x92
c000f011:	89 c6                	mov    esi,eax
c000f013:	e4 61                	in     al,0x61
c000f015:	68 ea aa 02 c0       	push   0xc002aaea
c000f01a:	88 c3                	mov    bl,al
c000f01c:	e8 56 3e 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000f021:	83 c4 10             	add    esp,0x10
c000f024:	83 e6 10             	and    esi,0x10
c000f027:	75 0d                	jne    c000f036 <Computer::handleNMI()+0x2c>
c000f029:	f6 c3 40             	test   bl,0x40
c000f02c:	75 1d                	jne    c000f04b <Computer::handleNMI()+0x41>
c000f02e:	84 db                	test   bl,bl
c000f030:	78 2d                	js     c000f05f <Computer::handleNMI()+0x55>
c000f032:	58                   	pop    eax
c000f033:	5b                   	pop    ebx
c000f034:	5e                   	pop    esi
c000f035:	c3                   	ret    
c000f036:	83 ec 0c             	sub    esp,0xc
c000f039:	68 fb aa 02 c0       	push   0xc002aafb
c000f03e:	e8 22 b8 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000f043:	83 c4 10             	add    esp,0x10
c000f046:	f6 c3 40             	test   bl,0x40
c000f049:	74 e3                	je     c000f02e <Computer::handleNMI()+0x24>
c000f04b:	83 ec 0c             	sub    esp,0xc
c000f04e:	68 08 ab 02 c0       	push   0xc002ab08
c000f053:	e8 0d b8 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000f058:	83 c4 10             	add    esp,0x10
c000f05b:	84 db                	test   bl,bl
c000f05d:	79 d3                	jns    c000f032 <Computer::handleNMI()+0x28>
c000f05f:	c7 44 24 10 12 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab12
c000f067:	5a                   	pop    edx
c000f068:	5b                   	pop    ebx
c000f069:	5e                   	pop    esi
c000f06a:	e9 f6 b7 00 00       	jmp    c001a865 <Krnl::panic(char const*)>
c000f06f:	90                   	nop

c000f070 <Computer::setDiskActivityLight(int, bool)>:
c000f070:	56                   	push   esi
c000f071:	53                   	push   ebx
c000f072:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f076:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f07b:	77 1b                	ja     c000f098 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f07d:	e4 92                	in     al,0x92
c000f07f:	bb 40 00 00 00       	mov    ebx,0x40
c000f084:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f088:	89 da                	mov    edx,ebx
c000f08a:	d3 e2                	shl    edx,cl
c000f08c:	89 f1                	mov    ecx,esi
c000f08e:	f7 d2                	not    edx
c000f090:	d3 e3                	shl    ebx,cl
c000f092:	21 d0                	and    eax,edx
c000f094:	09 d8                	or     eax,ebx
c000f096:	e6 92                	out    0x92,al
c000f098:	5b                   	pop    ebx
c000f099:	5e                   	pop    esi
c000f09a:	c3                   	ret    
c000f09b:	90                   	nop

c000f09c <GDTEntry::setBase(unsigned int)>:
c000f09c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0a4:	89 c1                	mov    ecx,eax
c000f0a6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0aa:	c1 e9 10             	shr    ecx,0x10
c000f0ad:	c1 e8 18             	shr    eax,0x18
c000f0b0:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0b3:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0b6:	c3                   	ret    
c000f0b7:	90                   	nop

c000f0b8 <GDTEntry::setLimit(unsigned int)>:
c000f0b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0c0:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0c3:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0c6:	83 e2 f0             	and    edx,0xfffffff0
c000f0c9:	c1 e8 10             	shr    eax,0x10
c000f0cc:	83 e0 0f             	and    eax,0xf
c000f0cf:	09 d0                	or     eax,edx
c000f0d1:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0d4:	c3                   	ret    
c000f0d5:	90                   	nop

c000f0d6 <GDT::GDT()>:
c000f0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ea:	90                   	nop
c000f0eb:	c3                   	ret    

c000f0ec <GDT::addEntry(GDTEntry)>:
c000f0ec:	53                   	push   ebx
c000f0ed:	83 ec 0c             	sub    esp,0xc
c000f0f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0f6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0fd:	52                   	push   edx
c000f0fe:	50                   	push   eax
c000f0ff:	68 4c ab 02 c0       	push   0xc002ab4c
c000f104:	e8 6e 3d 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000f109:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f10b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f10f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f113:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f117:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f11b:	8d 50 01             	lea    edx,[eax+0x1]
c000f11e:	c1 e0 03             	shl    eax,0x3
c000f121:	89 13                	mov    DWORD PTR [ebx],edx
c000f123:	83 c4 18             	add    esp,0x18
c000f126:	5b                   	pop    ebx
c000f127:	c3                   	ret    

c000f128 <GDT::getNumberOfEntries()>:
c000f128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f12c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f12e:	c3                   	ret    
c000f12f:	90                   	nop

c000f130 <GDT::flush()>:
c000f130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f134:	8b 10                	mov    edx,DWORD PTR [eax]
c000f136:	83 c0 04             	add    eax,0x4
c000f139:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f140:	a3 d2 ee 02 c0       	mov    ds:0xc002eed2,eax
c000f145:	66 89 15 d0 ee 02 c0 	mov    WORD PTR ds:0xc002eed0,dx
c000f14c:	e9 ff 12 ff ff       	jmp    c0000450 <loadGDT>
c000f151:	90                   	nop

c000f152 <GDT::setup()>:
c000f152:	55                   	push   ebp
c000f153:	57                   	push   edi
c000f154:	56                   	push   esi
c000f155:	53                   	push   ebx
c000f156:	83 ec 3c             	sub    esp,0x3c
c000f159:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f15d:	6a 00                	push   0x0
c000f15f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f163:	53                   	push   ebx
c000f164:	e8 33 ff ff ff       	call   c000f09c <GDTEntry::setBase(unsigned int)>
c000f169:	6a 00                	push   0x0
c000f16b:	53                   	push   ebx
c000f16c:	e8 47 ff ff ff       	call   c000f0b8 <GDTEntry::setLimit(unsigned int)>
c000f171:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f179:	6a 00                	push   0x0
c000f17b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f17f:	53                   	push   ebx
c000f180:	e8 17 ff ff ff       	call   c000f09c <GDTEntry::setBase(unsigned int)>
c000f185:	68 ff ff ff 00       	push   0xffffff
c000f18a:	53                   	push   ebx
c000f18b:	e8 28 ff ff ff       	call   c000f0b8 <GDTEntry::setLimit(unsigned int)>
c000f190:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f194:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f199:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f19e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1a2:	83 c4 20             	add    esp,0x20
c000f1a5:	6a 00                	push   0x0
c000f1a7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 eb fe ff ff       	call   c000f09c <GDTEntry::setBase(unsigned int)>
c000f1b1:	68 ff ff ff 00       	push   0xffffff
c000f1b6:	53                   	push   ebx
c000f1b7:	e8 fc fe ff ff       	call   c000f0b8 <GDTEntry::setLimit(unsigned int)>
c000f1bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1c4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1d0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1d5:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1de:	89 d8                	mov    eax,ebx
c000f1e0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1e4:	80 cc 60             	or     ah,0x60
c000f1e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1eb:	83 c4 0c             	add    esp,0xc
c000f1ee:	89 f8                	mov    eax,edi
c000f1f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1f4:	80 cc 60             	or     ah,0x60
c000f1f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1fb:	89 c7                	mov    edi,eax
c000f1fd:	55                   	push   ebp
c000f1fe:	e8 e9 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f203:	83 c4 0c             	add    esp,0xc
c000f206:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f20a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f20e:	55                   	push   ebp
c000f20f:	e8 d8 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f214:	83 c4 0c             	add    esp,0xc
c000f217:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f21b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f21f:	55                   	push   ebp
c000f220:	e8 c7 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f225:	83 c4 0c             	add    esp,0xc
c000f228:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f22c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f230:	53                   	push   ebx
c000f231:	51                   	push   ecx
c000f232:	55                   	push   ebp
c000f233:	e8 b4 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f238:	83 c4 0c             	add    esp,0xc
c000f23b:	57                   	push   edi
c000f23c:	56                   	push   esi
c000f23d:	55                   	push   ebp
c000f23e:	e8 a9 fe ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c000f243:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f246:	e8 e5 fe ff ff       	call   c000f130 <GDT::flush()>
c000f24b:	83 c4 4c             	add    esp,0x4c
c000f24e:	5b                   	pop    ebx
c000f24f:	5e                   	pop    esi
c000f250:	5f                   	pop    edi
c000f251:	5d                   	pop    ebp
c000f252:	c3                   	ret    

c000f253 <idleFunction(void*)>:
c000f253:	53                   	push   ebx
c000f254:	83 ec 08             	sub    esp,0x8
c000f257:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c000f25c:	48                   	dec    eax
c000f25d:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c000f262:	75 01                	jne    c000f265 <idleFunction(void*)+0x12>
c000f264:	fb                   	sti    
c000f265:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c000f26a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f270:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f277:	74 3c                	je     c000f2b5 <idleFunction(void*)+0x62>
c000f279:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f280:	74 33                	je     c000f2b5 <idleFunction(void*)+0x62>
c000f282:	31 db                	xor    ebx,ebx
c000f284:	52                   	push   edx
c000f285:	52                   	push   edx
c000f286:	68 e1 00 00 00       	push   0xe1
c000f28b:	50                   	push   eax
c000f28c:	e8 d5 fb ff ff       	call   c000ee66 <Computer::rdmsr(unsigned int)>
c000f291:	53                   	push   ebx
c000f292:	83 e0 02             	and    eax,0x2
c000f295:	50                   	push   eax
c000f296:	68 e1 00 00 00       	push   0xe1
c000f29b:	ff 35 c8 ee 02 c0    	push   DWORD PTR ds:0xc002eec8
c000f2a1:	e8 ec fb ff ff       	call   c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2a6:	83 c4 20             	add    esp,0x20
c000f2a9:	e8 d1 0f ff ff       	call   c000027f <doTPAUSE>
c000f2ae:	e8 8d 9c 01 00       	call   c0028f40 <idleCommon()>
c000f2b3:	eb f4                	jmp    c000f2a9 <idleFunction(void*)+0x56>
c000f2b5:	fb                   	sti    
c000f2b6:	f4                   	hlt    
c000f2b7:	e8 84 9c 01 00       	call   c0028f40 <idleCommon()>
c000f2bc:	eb f7                	jmp    c000f2b5 <idleFunction(void*)+0x62>

c000f2be <IDTEntry::IDTEntry(bool)>:
c000f2be:	83 ec 04             	sub    esp,0x4
c000f2c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2c5:	88 04 24             	mov    BYTE PTR [esp],al
c000f2c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2cc:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d6:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2de:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2e1:	83 e2 f0             	and    edx,0xfffffff0
c000f2e4:	83 ca 0e             	or     edx,0xe
c000f2e7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ee:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2f1:	83 e2 ef             	and    edx,0xffffffef
c000f2f4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f7:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2fb:	74 04                	je     c000f301 <IDTEntry::IDTEntry(bool)+0x43>
c000f2fd:	b2 03                	mov    dl,0x3
c000f2ff:	eb 02                	jmp    c000f303 <IDTEntry::IDTEntry(bool)+0x45>
c000f301:	b2 00                	mov    dl,0x0
c000f303:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f307:	83 e2 03             	and    edx,0x3
c000f30a:	88 d1                	mov    cl,dl
c000f30c:	c1 e1 05             	shl    ecx,0x5
c000f30f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f312:	83 e2 9f             	and    edx,0xffffff9f
c000f315:	09 ca                	or     edx,ecx
c000f317:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f31a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f321:	83 ca 80             	or     edx,0xffffff80
c000f324:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f327:	90                   	nop
c000f328:	83 c4 04             	add    esp,0x4
c000f32b:	c3                   	ret    

c000f32c <IDTEntry::setOffset(unsigned int)>:
c000f32c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f334:	66 89 02             	mov    WORD PTR [edx],ax
c000f337:	c1 e8 10             	shr    eax,0x10
c000f33a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f33e:	c3                   	ret    
c000f33f:	90                   	nop

c000f340 <IDT::IDT()>:
c000f340:	90                   	nop
c000f341:	c3                   	ret    

c000f342 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f346:	83 c0 30             	add    eax,0x30
c000f349:	c3                   	ret    

c000f34a <IDT::addEntry(IDTEntry, int)>:
c000f34a:	53                   	push   ebx
c000f34b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f34f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f353:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f35b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f35e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f362:	5b                   	pop    ebx
c000f363:	c3                   	ret    

c000f364 <IDT::addEntry(int, void (*)(), bool)>:
c000f364:	53                   	push   ebx
c000f365:	83 ec 10             	sub    esp,0x10
c000f368:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f36d:	50                   	push   eax
c000f36e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f372:	53                   	push   ebx
c000f373:	e8 46 ff ff ff       	call   c000f2be <IDTEntry::IDTEntry(bool)>
c000f378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f37c:	53                   	push   ebx
c000f37d:	e8 aa ff ff ff       	call   c000f32c <IDTEntry::setOffset(unsigned int)>
c000f382:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f386:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f38a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f392:	e8 b3 ff ff ff       	call   c000f34a <IDT::addEntry(IDTEntry, int)>
c000f397:	83 c4 30             	add    esp,0x30
c000f39a:	5b                   	pop    ebx
c000f39b:	c3                   	ret    

c000f39c <IDT::flush()>:
c000f39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3a0:	66 c7 05 d8 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002eed8,0x7ff
c000f3a9:	a3 da ee 02 c0       	mov    ds:0xc002eeda,eax
c000f3ae:	0f 01 1d d8 ee 02 c0 	lidtd  ds:0xc002eed8
c000f3b5:	c3                   	ret    

c000f3b6 <IDT::setup()>:
c000f3b6:	57                   	push   edi
c000f3b7:	56                   	push   esi
c000f3b8:	53                   	push   ebx
c000f3b9:	83 ec 10             	sub    esp,0x10
c000f3bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3c0:	6a 00                	push   0x0
c000f3c2:	68 70 04 00 c0       	push   0xc0000470
c000f3c7:	6a 00                	push   0x0
c000f3c9:	53                   	push   ebx
c000f3ca:	e8 95 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f3cf:	6a 00                	push   0x0
c000f3d1:	68 80 04 00 c0       	push   0xc0000480
c000f3d6:	6a 01                	push   0x1
c000f3d8:	53                   	push   ebx
c000f3d9:	e8 86 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f3de:	83 c4 20             	add    esp,0x20
c000f3e1:	6a 00                	push   0x0
c000f3e3:	68 8a 04 00 c0       	push   0xc000048a
c000f3e8:	6a 02                	push   0x2
c000f3ea:	53                   	push   ebx
c000f3eb:	e8 74 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f3f0:	6a 00                	push   0x0
c000f3f2:	68 94 04 00 c0       	push   0xc0000494
c000f3f7:	6a 03                	push   0x3
c000f3f9:	53                   	push   ebx
c000f3fa:	e8 65 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f3ff:	83 c4 20             	add    esp,0x20
c000f402:	6a 00                	push   0x0
c000f404:	68 9e 04 00 c0       	push   0xc000049e
c000f409:	6a 04                	push   0x4
c000f40b:	53                   	push   ebx
c000f40c:	e8 53 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f411:	6a 00                	push   0x0
c000f413:	68 a8 04 00 c0       	push   0xc00004a8
c000f418:	6a 05                	push   0x5
c000f41a:	53                   	push   ebx
c000f41b:	e8 44 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f420:	83 c4 20             	add    esp,0x20
c000f423:	6a 00                	push   0x0
c000f425:	68 b2 04 00 c0       	push   0xc00004b2
c000f42a:	6a 06                	push   0x6
c000f42c:	53                   	push   ebx
c000f42d:	e8 32 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f432:	6a 00                	push   0x0
c000f434:	68 bc 04 00 c0       	push   0xc00004bc
c000f439:	6a 07                	push   0x7
c000f43b:	53                   	push   ebx
c000f43c:	e8 23 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f441:	83 c4 20             	add    esp,0x20
c000f444:	6a 00                	push   0x0
c000f446:	68 c6 04 00 c0       	push   0xc00004c6
c000f44b:	6a 08                	push   0x8
c000f44d:	53                   	push   ebx
c000f44e:	e8 11 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f453:	6a 00                	push   0x0
c000f455:	68 ce 04 00 c0       	push   0xc00004ce
c000f45a:	6a 09                	push   0x9
c000f45c:	53                   	push   ebx
c000f45d:	e8 02 ff ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f462:	83 c4 20             	add    esp,0x20
c000f465:	6a 00                	push   0x0
c000f467:	68 d8 04 00 c0       	push   0xc00004d8
c000f46c:	6a 0a                	push   0xa
c000f46e:	53                   	push   ebx
c000f46f:	e8 f0 fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f474:	6a 00                	push   0x0
c000f476:	68 e0 04 00 c0       	push   0xc00004e0
c000f47b:	6a 0b                	push   0xb
c000f47d:	53                   	push   ebx
c000f47e:	e8 e1 fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f483:	83 c4 20             	add    esp,0x20
c000f486:	6a 00                	push   0x0
c000f488:	68 e8 04 00 c0       	push   0xc00004e8
c000f48d:	6a 0c                	push   0xc
c000f48f:	53                   	push   ebx
c000f490:	e8 cf fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f495:	6a 00                	push   0x0
c000f497:	68 f0 04 00 c0       	push   0xc00004f0
c000f49c:	6a 0d                	push   0xd
c000f49e:	53                   	push   ebx
c000f49f:	e8 c0 fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4a4:	83 c4 20             	add    esp,0x20
c000f4a7:	6a 00                	push   0x0
c000f4a9:	68 f8 04 00 c0       	push   0xc00004f8
c000f4ae:	6a 0e                	push   0xe
c000f4b0:	53                   	push   ebx
c000f4b1:	e8 ae fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4b6:	6a 00                	push   0x0
c000f4b8:	68 00 05 00 c0       	push   0xc0000500
c000f4bd:	6a 0f                	push   0xf
c000f4bf:	53                   	push   ebx
c000f4c0:	e8 9f fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4c5:	83 c4 20             	add    esp,0x20
c000f4c8:	6a 00                	push   0x0
c000f4ca:	68 0a 05 00 c0       	push   0xc000050a
c000f4cf:	6a 10                	push   0x10
c000f4d1:	53                   	push   ebx
c000f4d2:	e8 8d fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4d7:	6a 00                	push   0x0
c000f4d9:	68 14 05 00 c0       	push   0xc0000514
c000f4de:	6a 11                	push   0x11
c000f4e0:	53                   	push   ebx
c000f4e1:	e8 7e fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4e6:	83 c4 20             	add    esp,0x20
c000f4e9:	6a 00                	push   0x0
c000f4eb:	68 1e 05 00 c0       	push   0xc000051e
c000f4f0:	6a 12                	push   0x12
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 6c fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f4f8:	6a 01                	push   0x1
c000f4fa:	68 b8 05 00 c0       	push   0xc00005b8
c000f4ff:	6a 60                	push   0x60
c000f501:	53                   	push   ebx
c000f502:	e8 5d fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f507:	83 c4 20             	add    esp,0x20
c000f50a:	6a 00                	push   0x0
c000f50c:	68 bf 05 00 c0       	push   0xc00005bf
c000f511:	6a 20                	push   0x20
c000f513:	53                   	push   ebx
c000f514:	e8 4b fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f519:	6a 00                	push   0x0
c000f51b:	68 aa 05 00 c0       	push   0xc00005aa
c000f520:	6a 21                	push   0x21
c000f522:	53                   	push   ebx
c000f523:	e8 3c fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f528:	83 c4 20             	add    esp,0x20
c000f52b:	6a 00                	push   0x0
c000f52d:	68 b1 05 00 c0       	push   0xc00005b1
c000f532:	6a 22                	push   0x22
c000f534:	53                   	push   ebx
c000f535:	e8 2a fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f53a:	6a 00                	push   0x0
c000f53c:	68 28 05 00 c0       	push   0xc0000528
c000f541:	6a 23                	push   0x23
c000f543:	53                   	push   ebx
c000f544:	e8 1b fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f549:	83 c4 20             	add    esp,0x20
c000f54c:	6a 00                	push   0x0
c000f54e:	68 32 05 00 c0       	push   0xc0000532
c000f553:	6a 24                	push   0x24
c000f555:	53                   	push   ebx
c000f556:	e8 09 fe ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f55b:	6a 00                	push   0x0
c000f55d:	68 3c 05 00 c0       	push   0xc000053c
c000f562:	6a 25                	push   0x25
c000f564:	53                   	push   ebx
c000f565:	e8 fa fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f56a:	83 c4 20             	add    esp,0x20
c000f56d:	6a 00                	push   0x0
c000f56f:	68 46 05 00 c0       	push   0xc0000546
c000f574:	6a 26                	push   0x26
c000f576:	53                   	push   ebx
c000f577:	e8 e8 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f57c:	6a 00                	push   0x0
c000f57e:	68 50 05 00 c0       	push   0xc0000550
c000f583:	6a 27                	push   0x27
c000f585:	53                   	push   ebx
c000f586:	e8 d9 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f58b:	83 c4 20             	add    esp,0x20
c000f58e:	6a 00                	push   0x0
c000f590:	68 5a 05 00 c0       	push   0xc000055a
c000f595:	6a 28                	push   0x28
c000f597:	53                   	push   ebx
c000f598:	e8 c7 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f59d:	6a 00                	push   0x0
c000f59f:	68 64 05 00 c0       	push   0xc0000564
c000f5a4:	6a 29                	push   0x29
c000f5a6:	53                   	push   ebx
c000f5a7:	e8 b8 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5ac:	83 c4 20             	add    esp,0x20
c000f5af:	6a 00                	push   0x0
c000f5b1:	68 6e 05 00 c0       	push   0xc000056e
c000f5b6:	6a 2a                	push   0x2a
c000f5b8:	53                   	push   ebx
c000f5b9:	e8 a6 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5be:	6a 00                	push   0x0
c000f5c0:	68 78 05 00 c0       	push   0xc0000578
c000f5c5:	6a 2b                	push   0x2b
c000f5c7:	53                   	push   ebx
c000f5c8:	e8 97 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5cd:	83 c4 20             	add    esp,0x20
c000f5d0:	6a 00                	push   0x0
c000f5d2:	68 82 05 00 c0       	push   0xc0000582
c000f5d7:	6a 2c                	push   0x2c
c000f5d9:	53                   	push   ebx
c000f5da:	e8 85 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5df:	6a 00                	push   0x0
c000f5e1:	68 8c 05 00 c0       	push   0xc000058c
c000f5e6:	6a 2d                	push   0x2d
c000f5e8:	53                   	push   ebx
c000f5e9:	e8 76 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f5ee:	83 c4 20             	add    esp,0x20
c000f5f1:	6a 00                	push   0x0
c000f5f3:	68 96 05 00 c0       	push   0xc0000596
c000f5f8:	6a 2e                	push   0x2e
c000f5fa:	53                   	push   ebx
c000f5fb:	e8 64 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f600:	6a 00                	push   0x0
c000f602:	68 a0 05 00 c0       	push   0xc00005a0
c000f607:	6a 2f                	push   0x2f
c000f609:	53                   	push   ebx
c000f60a:	e8 55 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f60f:	83 c4 20             	add    esp,0x20
c000f612:	6a 00                	push   0x0
c000f614:	68 f5 05 00 c0       	push   0xc00005f5
c000f619:	6a 30                	push   0x30
c000f61b:	53                   	push   ebx
c000f61c:	e8 43 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f621:	6a 00                	push   0x0
c000f623:	68 ff 05 00 c0       	push   0xc00005ff
c000f628:	6a 31                	push   0x31
c000f62a:	53                   	push   ebx
c000f62b:	e8 34 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f630:	83 c4 20             	add    esp,0x20
c000f633:	6a 00                	push   0x0
c000f635:	68 09 06 00 c0       	push   0xc0000609
c000f63a:	6a 32                	push   0x32
c000f63c:	53                   	push   ebx
c000f63d:	e8 22 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f642:	6a 00                	push   0x0
c000f644:	68 13 06 00 c0       	push   0xc0000613
c000f649:	6a 33                	push   0x33
c000f64b:	53                   	push   ebx
c000f64c:	e8 13 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f651:	83 c4 20             	add    esp,0x20
c000f654:	6a 00                	push   0x0
c000f656:	68 1d 06 00 c0       	push   0xc000061d
c000f65b:	6a 34                	push   0x34
c000f65d:	53                   	push   ebx
c000f65e:	e8 01 fd ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f663:	6a 00                	push   0x0
c000f665:	68 27 06 00 c0       	push   0xc0000627
c000f66a:	6a 35                	push   0x35
c000f66c:	53                   	push   ebx
c000f66d:	e8 f2 fc ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f672:	83 c4 20             	add    esp,0x20
c000f675:	6a 00                	push   0x0
c000f677:	68 31 06 00 c0       	push   0xc0000631
c000f67c:	6a 36                	push   0x36
c000f67e:	53                   	push   ebx
c000f67f:	e8 e0 fc ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f684:	6a 00                	push   0x0
c000f686:	68 3b 06 00 c0       	push   0xc000063b
c000f68b:	6a 37                	push   0x37
c000f68d:	53                   	push   ebx
c000f68e:	e8 d1 fc ff ff       	call   c000f364 <IDT::addEntry(int, void (*)(), bool)>
c000f693:	83 c4 1c             	add    esp,0x1c
c000f696:	6a 03                	push   0x3
c000f698:	6a 02                	push   0x2
c000f69a:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c000f6a0:	e8 05 2d 00 00       	call   c00123aa <VAS::allocatePages(int, int)>
c000f6a5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6ac:	89 c6                	mov    esi,eax
c000f6ae:	e8 0d 02 00 00       	call   c000f8c0 <malloc>
c000f6b3:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6b9:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6bc:	89 c7                	mov    edi,eax
c000f6be:	e8 df 1c 00 00       	call   c00113a2 <TSS::TSS()>
c000f6c3:	83 c4 0c             	add    esp,0xc
c000f6c6:	68 c6 04 00 c0       	push   0xc00004c6
c000f6cb:	56                   	push   esi
c000f6cc:	57                   	push   edi
c000f6cd:	e8 10 1d 00 00       	call   c00113e2 <TSS::setup(unsigned long, unsigned long)>
c000f6d2:	89 c6                	mov    esi,eax
c000f6d4:	58                   	pop    eax
c000f6d5:	5a                   	pop    edx
c000f6d6:	6a 00                	push   0x0
c000f6d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6dc:	50                   	push   eax
c000f6dd:	e8 dc fb ff ff       	call   c000f2be <IDTEntry::IDTEntry(bool)>
c000f6e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6eb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6f2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6fc:	80 ce 05             	or     dh,0x5
c000f6ff:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f702:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f706:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f70a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f70d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f710:	e8 87 fc ff ff       	call   c000f39c <IDT::flush()>
c000f715:	83 c4 20             	add    esp,0x20
c000f718:	5b                   	pop    ebx
c000f719:	5e                   	pop    esi
c000f71a:	5f                   	pop    edi
c000f71b:	c3                   	ret    

c000f71c <sbrk>:
c000f71c:	55                   	push   ebp
c000f71d:	57                   	push   edi
c000f71e:	56                   	push   esi
c000f71f:	53                   	push   ebx
c000f720:	83 ec 1c             	sub    esp,0x1c
c000f723:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f727:	85 c0                	test   eax,eax
c000f729:	74 3e                	je     c000f769 <sbrk+0x4d>
c000f72b:	78 43                	js     c000f770 <sbrk+0x54>
c000f72d:	8b 15 c8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eec8
c000f733:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f739:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f73f:	83 e2 01             	and    edx,0x1
c000f742:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f746:	8b 0d f4 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddf4
c000f74c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f750:	05 ff 0f 00 00       	add    eax,0xfff
c000f755:	89 c2                	mov    edx,eax
c000f757:	78 2f                	js     c000f788 <sbrk+0x6c>
c000f759:	c1 fa 0c             	sar    edx,0xc
c000f75c:	89 d7                	mov    edi,edx
c000f75e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f762:	be 00 00 00 00       	mov    esi,0x0
c000f767:	eb 36                	jmp    c000f79f <sbrk+0x83>
c000f769:	a1 f4 dd 02 c0       	mov    eax,ds:0xc002ddf4
c000f76e:	eb 73                	jmp    c000f7e3 <sbrk+0xc7>
c000f770:	83 ec 08             	sub    esp,0x8
c000f773:	50                   	push   eax
c000f774:	68 68 ab 02 c0       	push   0xc002ab68
c000f779:	e8 f9 36 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f786:	eb 5b                	jmp    c000f7e3 <sbrk+0xc7>
c000f788:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f78e:	eb c9                	jmp    c000f759 <sbrk+0x3d>
c000f790:	81 05 f4 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002ddf4,0x1000
c000f79a:	46                   	inc    esi
c000f79b:	39 f7                	cmp    edi,esi
c000f79d:	74 33                	je     c000f7d2 <sbrk+0xb6>
c000f79f:	8b 1d 50 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f050
c000f7a5:	8b 2d f4 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002ddf4
c000f7ab:	e8 7c 07 00 00       	call   c000ff2c <Phys::allocatePage()>
c000f7b0:	68 01 0c 00 00       	push   0xc01
c000f7b5:	55                   	push   ebp
c000f7b6:	50                   	push   eax
c000f7b7:	53                   	push   ebx
c000f7b8:	e8 eb 2a 00 00       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7bd:	83 c4 10             	add    esp,0x10
c000f7c0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7c5:	74 c9                	je     c000f790 <sbrk+0x74>
c000f7c7:	8b 1d f4 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddf4
c000f7cd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7d0:	eb be                	jmp    c000f790 <sbrk+0x74>
c000f7d2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7d7:	75 12                	jne    c000f7eb <sbrk+0xcf>
c000f7d9:	0f 20 d8             	mov    eax,cr3
c000f7dc:	0f 22 d8             	mov    cr3,eax
c000f7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7e3:	83 c4 1c             	add    esp,0x1c
c000f7e6:	5b                   	pop    ebx
c000f7e7:	5e                   	pop    esi
c000f7e8:	5f                   	pop    edi
c000f7e9:	5d                   	pop    ebp
c000f7ea:	c3                   	ret    
c000f7eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7ef:	89 cb                	mov    ebx,ecx
c000f7f1:	c1 eb 0a             	shr    ebx,0xa
c000f7f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7fa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f804:	c1 e0 0c             	shl    eax,0xc
c000f807:	01 c8                	add    eax,ecx
c000f809:	c1 e8 0a             	shr    eax,0xa
c000f80c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f811:	2d 00 00 40 00       	sub    eax,0x400000
c000f816:	39 c3                	cmp    ebx,eax
c000f818:	77 c5                	ja     c000f7df <sbrk+0xc3>
c000f81a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f81d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f823:	39 d8                	cmp    eax,ebx
c000f825:	73 f3                	jae    c000f81a <sbrk+0xfe>
c000f827:	eb b6                	jmp    c000f7df <sbrk+0xc3>

c000f829 <mmap>:
c000f829:	83 ec 18             	sub    esp,0x18
c000f82c:	68 98 ab 02 c0       	push   0xc002ab98
c000f831:	e8 2f b0 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000f836:	b8 00 00 00 00       	mov    eax,0x0
c000f83b:	83 c4 1c             	add    esp,0x1c
c000f83e:	c3                   	ret    

c000f83f <munmap>:
c000f83f:	83 ec 18             	sub    esp,0x18
c000f842:	68 9d ab 02 c0       	push   0xc002ab9d
c000f847:	e8 19 b0 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000f84c:	b8 00 00 00 00       	mov    eax,0x0
c000f851:	83 c4 1c             	add    esp,0x1c
c000f854:	c3                   	ret    

c000f855 <liballoc_lock()>:
c000f855:	fa                   	cli    
c000f856:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c000f85c:	b8 00 00 00 00       	mov    eax,0x0
c000f861:	c3                   	ret    

c000f862 <liballoc_unlock()>:
c000f862:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c000f867:	48                   	dec    eax
c000f868:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c000f86d:	75 01                	jne    c000f870 <liballoc_unlock()+0xe>
c000f86f:	fb                   	sti    
c000f870:	b8 00 00 00 00       	mov    eax,0x0
c000f875:	c3                   	ret    

c000f876 <liballoc_alloc(int)>:
c000f876:	83 ec 10             	sub    esp,0x10
c000f879:	68 01 08 00 00       	push   0x801
c000f87e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f882:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c000f888:	e8 1d 2b 00 00       	call   c00123aa <VAS::allocatePages(int, int)>
c000f88d:	83 c4 1c             	add    esp,0x1c
c000f890:	c3                   	ret    

c000f891 <liballoc_free(void*, int)>:
c000f891:	83 ec 14             	sub    esp,0x14
c000f894:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f898:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c000f89e:	e8 b1 27 00 00       	call   c0012054 <VAS::freeAllocatedPages(unsigned long)>
c000f8a3:	b8 00 00 00 00       	mov    eax,0x0
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <realloc>:
c000f8ac:	83 ec 14             	sub    esp,0x14
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b7:	e8 a2 1d ff ff       	call   c000165e <dlrealloc>
c000f8bc:	83 c4 1c             	add    esp,0x1c
c000f8bf:	c3                   	ret    

c000f8c0 <malloc>:
c000f8c0:	83 ec 18             	sub    esp,0x18
c000f8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8c7:	e8 55 18 ff ff       	call   c0001121 <dlmalloc>
c000f8cc:	83 c4 1c             	add    esp,0x1c
c000f8cf:	c3                   	ret    

c000f8d0 <free>:
c000f8d0:	83 ec 18             	sub    esp,0x18
c000f8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d7:	e8 ea 14 ff ff       	call   c0000dc6 <dlfree>
c000f8dc:	83 c4 1c             	add    esp,0x1c
c000f8df:	c3                   	ret    

c000f8e0 <rfree>:
c000f8e0:	83 ec 18             	sub    esp,0x18
c000f8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8e7:	e8 da 14 ff ff       	call   c0000dc6 <dlfree>
c000f8ec:	83 c4 1c             	add    esp,0x1c
c000f8ef:	c3                   	ret    

c000f8f0 <calloc>:
c000f8f0:	56                   	push   esi
c000f8f1:	53                   	push   ebx
c000f8f2:	83 ec 10             	sub    esp,0x10
c000f8f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8f9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8fe:	53                   	push   ebx
c000f8ff:	e8 bc ff ff ff       	call   c000f8c0 <malloc>
c000f904:	89 c6                	mov    esi,eax
c000f906:	83 c4 0c             	add    esp,0xc
c000f909:	53                   	push   ebx
c000f90a:	6a 00                	push   0x0
c000f90c:	50                   	push   eax
c000f90d:	e8 5a 0e ff ff       	call   c000076c <memset>
c000f912:	89 f0                	mov    eax,esi
c000f914:	83 c4 14             	add    esp,0x14
c000f917:	5b                   	pop    ebx
c000f918:	5e                   	pop    esi
c000f919:	c3                   	ret    

c000f91a <hwTextMode_loadInData(VgaText*)>:
c000f91a:	55                   	push   ebp
c000f91b:	a1 00 de 02 c0       	mov    eax,ds:0xc002de00
c000f920:	57                   	push   edi
c000f921:	56                   	push   esi
c000f922:	53                   	push   ebx
c000f923:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f927:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f92a:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f92d:	85 d2                	test   edx,edx
c000f92f:	7e 29                	jle    c000f95a <hwTextMode_loadInData(VgaText*)+0x40>
c000f931:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f937:	31 f6                	xor    esi,esi
c000f939:	29 cd                	sub    ebp,ecx
c000f93b:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f93e:	31 c0                	xor    eax,eax
c000f940:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f944:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f948:	40                   	inc    eax
c000f949:	83 f8 50             	cmp    eax,0x50
c000f94c:	75 f2                	jne    c000f940 <hwTextMode_loadInData(VgaText*)+0x26>
c000f94e:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f954:	46                   	inc    esi
c000f955:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f958:	7f e1                	jg     c000f93b <hwTextMode_loadInData(VgaText*)+0x21>
c000f95a:	5b                   	pop    ebx
c000f95b:	5e                   	pop    esi
c000f95c:	5f                   	pop    edi
c000f95d:	5d                   	pop    ebp
c000f95e:	c3                   	ret    

c000f95f <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f95f:	55                   	push   ebp
c000f960:	80 3d 60 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef60,0x0
c000f967:	57                   	push   edi
c000f968:	56                   	push   esi
c000f969:	53                   	push   ebx
c000f96a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f96e:	75 44                	jne    c000f9b4 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f970:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f973:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f976:	8b 15 00 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de00
c000f97c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f980:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f986:	eb 08                	jmp    c000f990 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f988:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f98b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f98e:	89 da                	mov    edx,ebx
c000f990:	83 e5 0f             	and    ebp,0xf
c000f993:	c1 e0 04             	shl    eax,0x4
c000f996:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f999:	0f b6 c0             	movzx  eax,al
c000f99c:	41                   	inc    ecx
c000f99d:	09 e8                	or     eax,ebp
c000f99f:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9a3:	c1 e0 08             	shl    eax,0x8
c000f9a6:	09 e8                	or     eax,ebp
c000f9a8:	39 fb                	cmp    ebx,edi
c000f9aa:	66 89 02             	mov    WORD PTR [edx],ax
c000f9ad:	75 d9                	jne    c000f988 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f9af:	5b                   	pop    ebx
c000f9b0:	5e                   	pop    esi
c000f9b1:	5f                   	pop    edi
c000f9b2:	5d                   	pop    ebp
c000f9b3:	c3                   	ret    
c000f9b4:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9bb:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9c2:	31 c0                	xor    eax,eax
c000f9c4:	bd 02 00 00 00       	mov    ebp,0x2
c000f9c9:	eb ab                	jmp    c000f976 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9cb <hwTextMode_showCursor(VgaText*, bool)>:
c000f9cb:	56                   	push   esi
c000f9cc:	80 3d 60 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef60,0x0
c000f9d3:	53                   	push   ebx
c000f9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9d8:	75 36                	jne    c000fa10 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9da:	84 c0                	test   al,al
c000f9dc:	74 35                	je     c000fa13 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9de:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9e3:	b0 0a                	mov    al,0xa
c000f9e5:	89 da                	mov    edx,ebx
c000f9e7:	ee                   	out    dx,al
c000f9e8:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9ed:	89 ca                	mov    edx,ecx
c000f9ef:	ec                   	in     al,dx
c000f9f0:	b2 0f                	mov    dl,0xf
c000f9f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9f6:	83 e0 c0             	and    eax,0xffffffc0
c000f9f9:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9fc:	09 d0                	or     eax,edx
c000f9fe:	89 ca                	mov    edx,ecx
c000fa00:	ee                   	out    dx,al
c000fa01:	b0 0b                	mov    al,0xb
c000fa03:	89 da                	mov    edx,ebx
c000fa05:	ee                   	out    dx,al
c000fa06:	89 ca                	mov    edx,ecx
c000fa08:	ec                   	in     al,dx
c000fa09:	83 e0 e0             	and    eax,0xffffffe0
c000fa0c:	83 c8 0f             	or     eax,0xf
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    
c000fa13:	b0 0a                	mov    al,0xa
c000fa15:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa1a:	ee                   	out    dx,al
c000fa1b:	b0 20                	mov    al,0x20
c000fa1d:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa22:	ee                   	out    dx,al
c000fa23:	5b                   	pop    ebx
c000fa24:	5e                   	pop    esi
c000fa25:	c3                   	ret    

c000fa26 <hwTextMode_update(VgaText*)>:
c000fa26:	c3                   	ret    

c000fa27 <hwTextMode_updateCursor(VgaText*)>:
c000fa27:	56                   	push   esi
c000fa28:	80 3d 60 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef60,0x0
c000fa2f:	53                   	push   ebx
c000fa30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa34:	75 36                	jne    c000fa6c <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa36:	be d4 03 00 00       	mov    esi,0x3d4
c000fa3b:	b9 19 00 00 00       	mov    ecx,0x19
c000fa40:	89 f2                	mov    edx,esi
c000fa42:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa45:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa48:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa4b:	c1 e1 04             	shl    ecx,0x4
c000fa4e:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa51:	b0 0f                	mov    al,0xf
c000fa53:	ee                   	out    dx,al
c000fa54:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa59:	88 c8                	mov    al,cl
c000fa5b:	89 da                	mov    edx,ebx
c000fa5d:	ee                   	out    dx,al
c000fa5e:	b0 0e                	mov    al,0xe
c000fa60:	89 f2                	mov    edx,esi
c000fa62:	ee                   	out    dx,al
c000fa63:	89 c8                	mov    eax,ecx
c000fa65:	89 da                	mov    edx,ebx
c000fa67:	66 c1 e8 08          	shr    ax,0x8
c000fa6b:	ee                   	out    dx,al
c000fa6c:	5b                   	pop    ebx
c000fa6d:	5e                   	pop    esi
c000fa6e:	c3                   	ret    

c000fa6f <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa73:	80 3d 60 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef60,0x0
c000fa7a:	75 38                	jne    c000fab4 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa7c:	ba da 03 00 00       	mov    edx,0x3da
c000fa81:	84 c0                	test   al,al
c000fa83:	75 18                	jne    c000fa9d <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa85:	ec                   	in     al,dx
c000fa86:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa8b:	b0 30                	mov    al,0x30
c000fa8d:	89 ca                	mov    edx,ecx
c000fa8f:	ee                   	out    dx,al
c000fa90:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa95:	ec                   	in     al,dx
c000fa96:	83 c8 08             	or     eax,0x8
c000fa99:	89 ca                	mov    edx,ecx
c000fa9b:	ee                   	out    dx,al
c000fa9c:	c3                   	ret    
c000fa9d:	ec                   	in     al,dx
c000fa9e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faa3:	b0 30                	mov    al,0x30
c000faa5:	89 ca                	mov    edx,ecx
c000faa7:	ee                   	out    dx,al
c000faa8:	ba c1 03 00 00       	mov    edx,0x3c1
c000faad:	ec                   	in     al,dx
c000faae:	83 e0 f7             	and    eax,0xfffffff7
c000fab1:	89 ca                	mov    edx,ecx
c000fab3:	ee                   	out    dx,al
c000fab4:	c3                   	ret    

c000fab5 <hwTextMode_scrollScreen(VgaText*)>:
c000fab5:	55                   	push   ebp
c000fab6:	57                   	push   edi
c000fab7:	56                   	push   esi
c000fab8:	53                   	push   ebx
c000fab9:	83 ec 1c             	sub    esp,0x1c
c000fabc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fac0:	80 3d 60 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef60,0x0
c000fac7:	74 0e                	je     c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fac9:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fad0:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fad7:	a1 00 de 02 c0       	mov    eax,ds:0xc002de00
c000fadc:	bd 02 00 00 00       	mov    ebp,0x2
c000fae1:	05 a0 00 00 00       	add    eax,0xa0
c000fae6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faee:	31 c0                	xor    eax,eax
c000faf0:	eb 0b                	jmp    c000fafd <hwTextMode_scrollScreen(VgaText*)+0x48>
c000faf2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faf8:	74 51                	je     c000fb4b <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fafa:	43                   	inc    ebx
c000fafb:	89 f0                	mov    eax,esi
c000fafd:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb03:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb09:	88 13                	mov    BYTE PTR [ebx],dl
c000fb0b:	8d 70 01             	lea    esi,[eax+0x1]
c000fb0e:	83 fd 18             	cmp    ebp,0x18
c000fb11:	75 df                	jne    c000faf2 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb13:	a8 01                	test   al,0x1
c000fb15:	75 13                	jne    c000fb2a <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb17:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb1a:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb20:	75 d8                	jne    c000fafa <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb22:	83 c4 1c             	add    esp,0x1c
c000fb25:	5b                   	pop    ebx
c000fb26:	5e                   	pop    esi
c000fb27:	5f                   	pop    edi
c000fb28:	5d                   	pop    ebp
c000fb29:	c3                   	ret    
c000fb2a:	83 ec 08             	sub    esp,0x8
c000fb2d:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb31:	50                   	push   eax
c000fb32:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb36:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb3a:	50                   	push   eax
c000fb3b:	e8 18 0c 00 00       	call   c0010758 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	88 07                	mov    BYTE PTR [edi],al
c000fb45:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb49:	eb cf                	jmp    c000fb1a <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb4b:	45                   	inc    ebp
c000fb4c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb54:	eb 94                	jmp    c000faea <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb56:	57                   	push   edi
c000fb57:	80 3d 60 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef60,0x0
c000fb5e:	56                   	push   esi
c000fb5f:	53                   	push   ebx
c000fb60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb64:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb68:	75 62                	jne    c000fbcc <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb6a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb6f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb74:	83 ec 08             	sub    esp,0x8
c000fb77:	52                   	push   edx
c000fb78:	50                   	push   eax
c000fb79:	e8 da 0b 00 00       	call   c0010758 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb7e:	5a                   	pop    edx
c000fb7f:	0f b6 c0             	movzx  eax,al
c000fb82:	59                   	pop    ecx
c000fb83:	50                   	push   eax
c000fb84:	0f be c3             	movsx  eax,bl
c000fb87:	50                   	push   eax
c000fb88:	e8 71 0c 00 00       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c000fb8d:	83 c4 10             	add    esp,0x10
c000fb90:	8b 35 00 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de00
c000fb96:	80 3d 60 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef60,0x0
c000fb9d:	74 07                	je     c000fba6 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb9f:	66 0f be c3          	movsx  ax,bl
c000fba3:	80 cc 02             	or     ah,0x2
c000fba6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbaa:	ba 19 00 00 00       	mov    edx,0x19
c000fbaf:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fbb2:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fbb5:	8d 14 92             	lea    edx,[edx+edx*4]
c000fbb8:	c1 e1 04             	shl    ecx,0x4
c000fbbb:	c1 e2 04             	shl    edx,0x4
c000fbbe:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fbc2:	01 ca                	add    edx,ecx
c000fbc4:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbc8:	5b                   	pop    ebx
c000fbc9:	5e                   	pop    esi
c000fbca:	5f                   	pop    edi
c000fbcb:	c3                   	ret    
c000fbcc:	b8 02 00 00 00       	mov    eax,0x2
c000fbd1:	31 d2                	xor    edx,edx
c000fbd3:	eb 9f                	jmp    c000fb74 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fbd5 <setupTextMode()>:
c000fbd5:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fbda:	83 e0 30             	and    eax,0x30
c000fbdd:	66 83 f8 30          	cmp    ax,0x30
c000fbe1:	75 11                	jne    c000fbf4 <setupTextMode()+0x1f>
c000fbe3:	81 2d 00 de 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002de00,0x8000
c000fbed:	c6 05 60 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef60,0x1
c000fbf4:	c7 05 98 ef 02 c0 6f fa 00 c0 	mov    DWORD PTR ds:0xc002ef98,0xc000fa6f
c000fbfe:	c7 05 84 ef 02 c0 1a f9 00 c0 	mov    DWORD PTR ds:0xc002ef84,0xc000f91a
c000fc08:	c7 05 80 ef 02 c0 5f f9 00 c0 	mov    DWORD PTR ds:0xc002ef80,0xc000f95f
c000fc12:	c7 05 8c ef 02 c0 b5 fa 00 c0 	mov    DWORD PTR ds:0xc002ef8c,0xc000fab5
c000fc1c:	c7 05 94 ef 02 c0 cb f9 00 c0 	mov    DWORD PTR ds:0xc002ef94,0xc000f9cb
c000fc26:	c7 05 88 ef 02 c0 26 fa 00 c0 	mov    DWORD PTR ds:0xc002ef88,0xc000fa26
c000fc30:	c7 05 90 ef 02 c0 27 fa 00 c0 	mov    DWORD PTR ds:0xc002ef90,0xc000fa27
c000fc3a:	c7 05 9c ef 02 c0 56 fb 00 c0 	mov    DWORD PTR ds:0xc002ef9c,0xc000fb56
c000fc44:	c3                   	ret    

c000fc45 <kernel_main>:
c000fc45:	57                   	push   edi
c000fc46:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc4b:	56                   	push   esi
c000fc4c:	89 fa                	mov    edx,edi
c000fc4e:	53                   	push   ebx
c000fc4f:	31 f6                	xor    esi,esi
c000fc51:	83 ec 2c             	sub    esp,0x2c
c000fc54:	89 f0                	mov    eax,esi
c000fc56:	ee                   	out    dx,al
c000fc57:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc5c:	b0 80                	mov    al,0x80
c000fc5e:	89 da                	mov    edx,ebx
c000fc60:	ee                   	out    dx,al
c000fc61:	b1 03                	mov    cl,0x3
c000fc63:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc68:	88 c8                	mov    al,cl
c000fc6a:	ee                   	out    dx,al
c000fc6b:	89 f0                	mov    eax,esi
c000fc6d:	89 fa                	mov    edx,edi
c000fc6f:	ee                   	out    dx,al
c000fc70:	88 c8                	mov    al,cl
c000fc72:	89 da                	mov    edx,ebx
c000fc74:	ee                   	out    dx,al
c000fc75:	b0 c7                	mov    al,0xc7
c000fc77:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc7c:	ee                   	out    dx,al
c000fc7d:	b0 0b                	mov    al,0xb
c000fc7f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc84:	ee                   	out    dx,al
c000fc85:	68 a4 ab 02 c0       	push   0xc002aba4
c000fc8a:	e8 e8 31 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000fc8f:	e8 56 09 00 00       	call   c00105ea <installVgaTextImplementation()>
c000fc94:	e8 3c ff ff ff       	call   c000fbd5 <setupTextMode()>
c000fc99:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc9e:	05 ff 0f 00 00       	add    eax,0xfff
c000fca3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fca8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcab:	e8 f5 03 00 00       	call   c00100a5 <Phys::physicalMemorySetup(unsigned int)>
c000fcb0:	e8 7b 1f 00 00       	call   c0011c30 <Virt::virtualMemorySetup()>
c000fcb5:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcc4:	75 0e                	jne    c000fcd4 <kernel_main+0x8f>
c000fcc6:	89 d8                	mov    eax,ebx
c000fcc8:	25 48 03 00 00       	and    eax,0x348
c000fccd:	3d 00 03 00 00       	cmp    eax,0x300
c000fcd2:	74 10                	je     c000fce4 <kernel_main+0x9f>
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	68 35 c5 02 c0       	push   0xc002c535
c000fcdc:	e8 84 ab 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000fce1:	83 c4 10             	add    esp,0x10
c000fce4:	83 ec 0c             	sub    esp,0xc
c000fce7:	89 1d e0 ee 02 c0    	mov    DWORD PTR ds:0xc002eee0,ebx
c000fced:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcf1:	53                   	push   ebx
c000fcf2:	e8 85 21 00 00       	call   c0011e7c <VAS::VAS()>
c000fcf7:	89 1d 50 f0 02 c0    	mov    DWORD PTR ds:0xc002f050,ebx
c000fcfd:	e8 1e 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd02:	c7 04 24 bb ab 02 c0 	mov    DWORD PTR [esp],0xc002abbb
c000fd09:	e8 69 31 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000fd0e:	e8 9c 1f 00 00       	call   c0011caf <Virt::swappingSetup()>
c000fd13:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd1a:	e8 a1 fb ff ff       	call   c000f8c0 <malloc>
c000fd1f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd22:	89 c6                	mov    esi,eax
c000fd24:	e8 8f ea ff ff       	call   c000e7b8 <Computer::Computer()>
c000fd29:	58                   	pop    eax
c000fd2a:	89 35 c8 ee 02 c0    	mov    DWORD PTR ds:0xc002eec8,esi
c000fd30:	5a                   	pop    edx
c000fd31:	56                   	push   esi
c000fd32:	68 d8 ab 02 c0       	push   0xc002abd8
c000fd37:	e8 3b 31 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000fd3c:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c000fd41:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd43:	6a 00                	push   0x0
c000fd45:	6a 00                	push   0x0
c000fd47:	6a 00                	push   0x0
c000fd49:	50                   	push   eax
c000fd4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd4d:	83 c4 14             	add    esp,0x14
c000fd50:	53                   	push   ebx
c000fd51:	e8 d6 23 00 00       	call   c001212c <VAS::~VAS()>
c000fd56:	c7 04 24 eb ab 02 c0 	mov    DWORD PTR [esp],0xc002abeb
c000fd5d:	e8 03 ab 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000fd62:	83 c4 30             	add    esp,0x30
c000fd65:	5b                   	pop    ebx
c000fd66:	5e                   	pop    esi
c000fd67:	5f                   	pop    edi
c000fd68:	c3                   	ret    

c000fd69 <Phys::allocateDMA(unsigned long)>:
c000fd69:	55                   	push   ebp
c000fd6a:	31 d2                	xor    edx,edx
c000fd6c:	57                   	push   edi
c000fd6d:	31 ed                	xor    ebp,ebp
c000fd6f:	56                   	push   esi
c000fd70:	31 c9                	xor    ecx,ecx
c000fd72:	53                   	push   ebx
c000fd73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd77:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd7d:	31 c0                	xor    eax,eax
c000fd7f:	c1 ee 0c             	shr    esi,0xc
c000fd82:	eb 17                	jmp    c000fd9b <Phys::allocateDMA(unsigned long)+0x32>
c000fd84:	85 c9                	test   ecx,ecx
c000fd86:	75 04                	jne    c000fd8c <Phys::allocateDMA(unsigned long)+0x23>
c000fd88:	89 d5                	mov    ebp,edx
c000fd8a:	89 d0                	mov    eax,edx
c000fd8c:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd8f:	39 de                	cmp    esi,ebx
c000fd91:	74 20                	je     c000fdb3 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd93:	42                   	inc    edx
c000fd94:	89 d9                	mov    ecx,ebx
c000fd96:	83 fa 2f             	cmp    edx,0x2f
c000fd99:	7f 11                	jg     c000fdac <Phys::allocateDMA(unsigned long)+0x43>
c000fd9b:	80 ba 20 ef 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd10e0],0x0
c000fda2:	74 e0                	je     c000fd84 <Phys::allocateDMA(unsigned long)+0x1b>
c000fda4:	31 c9                	xor    ecx,ecx
c000fda6:	42                   	inc    edx
c000fda7:	83 fa 2f             	cmp    edx,0x2f
c000fdaa:	7e ef                	jle    c000fd9b <Phys::allocateDMA(unsigned long)+0x32>
c000fdac:	5b                   	pop    ebx
c000fdad:	31 c0                	xor    eax,eax
c000fdaf:	5e                   	pop    esi
c000fdb0:	5f                   	pop    edi
c000fdb1:	5d                   	pop    ebp
c000fdb2:	c3                   	ret    
c000fdb3:	8d 14 30             	lea    edx,[eax+esi*1]
c000fdb6:	89 d7                	mov    edi,edx
c000fdb8:	4f                   	dec    edi
c000fdb9:	79 03                	jns    c000fdbe <Phys::allocateDMA(unsigned long)+0x55>
c000fdbb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fdbe:	c1 ff 04             	sar    edi,0x4
c000fdc1:	89 c2                	mov    edx,eax
c000fdc3:	c1 fa 04             	sar    edx,0x4
c000fdc6:	39 fa                	cmp    edx,edi
c000fdc8:	75 2f                	jne    c000fdf9 <Phys::allocateDMA(unsigned long)+0x90>
c000fdca:	85 db                	test   ebx,ebx
c000fdcc:	74 1a                	je     c000fde8 <Phys::allocateDMA(unsigned long)+0x7f>
c000fdce:	be 20 ef 02 c0       	mov    esi,0xc002ef20
c000fdd3:	8d 90 20 ef 02 c0    	lea    edx,[eax-0x3ffd10e0]
c000fdd9:	f7 d6                	not    esi
c000fddb:	29 c6                	sub    esi,eax
c000fddd:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fde0:	42                   	inc    edx
c000fde1:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fde4:	39 d9                	cmp    ecx,ebx
c000fde6:	7f f5                	jg     c000fddd <Phys::allocateDMA(unsigned long)+0x74>
c000fde8:	85 ff                	test   edi,edi
c000fdea:	74 13                	je     c000fdff <Phys::allocateDMA(unsigned long)+0x96>
c000fdec:	5b                   	pop    ebx
c000fded:	05 50 20 0c 00       	add    eax,0xc2050
c000fdf2:	5e                   	pop    esi
c000fdf3:	c1 e0 0c             	shl    eax,0xc
c000fdf6:	5f                   	pop    edi
c000fdf7:	5d                   	pop    ebp
c000fdf8:	c3                   	ret    
c000fdf9:	89 ea                	mov    edx,ebp
c000fdfb:	31 c9                	xor    ecx,ecx
c000fdfd:	eb a7                	jmp    c000fda6 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdff:	5b                   	pop    ebx
c000fe00:	c1 e0 0c             	shl    eax,0xc
c000fe03:	5e                   	pop    esi
c000fe04:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe09:	5f                   	pop    edi
c000fe0a:	5d                   	pop    ebp
c000fe0b:	c3                   	ret    

c000fe0c <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe14:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe1a:	c1 e9 0c             	shr    ecx,0xc
c000fe1d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe22:	76 25                	jbe    c000fe49 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe24:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe29:	c1 e8 0c             	shr    eax,0xc
c000fe2c:	8d 50 10             	lea    edx,[eax+0x10]
c000fe2f:	85 c9                	test   ecx,ecx
c000fe31:	74 15                	je     c000fe48 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe33:	8d 82 20 ef 02 c0    	lea    eax,[edx-0x3ffd10e0]
c000fe39:	8d 94 11 20 ef 02 c0 	lea    edx,[ecx+edx*1-0x3ffd10e0]
c000fe40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe43:	40                   	inc    eax
c000fe44:	39 d0                	cmp    eax,edx
c000fe46:	75 f8                	jne    c000fe40 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe48:	c3                   	ret    
c000fe49:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe4f:	c1 ea 0c             	shr    edx,0xc
c000fe52:	eb db                	jmp    c000fe2f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe54 <Phys::setPageState(unsigned long, bool)>:
c000fe54:	56                   	push   esi
c000fe55:	ba 01 00 00 00       	mov    edx,0x1
c000fe5a:	53                   	push   ebx
c000fe5b:	8b 35 f8 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002ddf8
c000fe61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe69:	89 c8                	mov    eax,ecx
c000fe6b:	83 e1 07             	and    ecx,0x7
c000fe6e:	c1 e8 03             	shr    eax,0x3
c000fe71:	d3 e3                	shl    ebx,cl
c000fe73:	01 c6                	add    esi,eax
c000fe75:	d3 e2                	shl    edx,cl
c000fe77:	f7 d2                	not    edx
c000fe79:	20 16                	and    BYTE PTR [esi],dl
c000fe7b:	03 05 f8 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddf8
c000fe81:	08 18                	or     BYTE PTR [eax],bl
c000fe83:	5b                   	pop    ebx
c000fe84:	5e                   	pop    esi
c000fe85:	c3                   	ret    

c000fe86 <Phys::getPageState(unsigned long)>:
c000fe86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe8a:	8b 15 f8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddf8
c000fe90:	89 c8                	mov    eax,ecx
c000fe92:	83 e1 07             	and    ecx,0x7
c000fe95:	c1 e8 03             	shr    eax,0x3
c000fe98:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe9c:	d3 f8                	sar    eax,cl
c000fe9e:	83 e0 01             	and    eax,0x1
c000fea1:	c3                   	ret    

c000fea2 <Phys::freePage(unsigned long)>:
c000fea2:	53                   	push   ebx
c000fea3:	83 ec 08             	sub    esp,0x8
c000fea6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000feaa:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000feb0:	76 57                	jbe    c000ff09 <Phys::freePage(unsigned long)+0x67>
c000feb2:	c1 eb 0c             	shr    ebx,0xc
c000feb5:	53                   	push   ebx
c000feb6:	e8 cb ff ff ff       	call   c000fe86 <Phys::getPageState(unsigned long)>
c000febb:	5a                   	pop    edx
c000febc:	84 c0                	test   al,al
c000febe:	74 5b                	je     c000ff1b <Phys::freePage(unsigned long)+0x79>
c000fec0:	a1 10 ef 02 c0       	mov    eax,ds:0xc002ef10
c000fec5:	48                   	dec    eax
c000fec6:	a3 10 ef 02 c0       	mov    ds:0xc002ef10,eax
c000fecb:	8d 04 80             	lea    eax,[eax+eax*4]
c000fece:	8d 04 80             	lea    eax,[eax+eax*4]
c000fed1:	c1 e0 02             	shl    eax,0x2
c000fed4:	99                   	cdq    
c000fed5:	f7 3d 14 ef 02 c0    	idiv   DWORD PTR ds:0xc002ef14
c000fedb:	39 05 0c ef 02 c0    	cmp    DWORD PTR ds:0xc002ef0c,eax
c000fee1:	75 13                	jne    c000fef6 <Phys::freePage(unsigned long)+0x54>
c000fee3:	83 ec 08             	sub    esp,0x8
c000fee6:	6a 00                	push   0x0
c000fee8:	53                   	push   ebx
c000fee9:	e8 66 ff ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c000feee:	83 c4 10             	add    esp,0x10
c000fef1:	83 c4 08             	add    esp,0x8
c000fef4:	5b                   	pop    ebx
c000fef5:	c3                   	ret    
c000fef6:	83 ec 0c             	sub    esp,0xc
c000fef9:	a3 0c ef 02 c0       	mov    ds:0xc002ef0c,eax
c000fefe:	50                   	push   eax
c000feff:	e8 14 0a 00 00       	call   c0010918 <VgaText::updateRAMUsageDisplay(int)>
c000ff04:	83 c4 10             	add    esp,0x10
c000ff07:	eb da                	jmp    c000fee3 <Phys::freePage(unsigned long)+0x41>
c000ff09:	68 00 10 00 00       	push   0x1000
c000ff0e:	53                   	push   ebx
c000ff0f:	e8 f8 fe ff ff       	call   c000fe0c <Phys::freeDMA(unsigned long, unsigned long)>
c000ff14:	59                   	pop    ecx
c000ff15:	5b                   	pop    ebx
c000ff16:	83 c4 08             	add    esp,0x8
c000ff19:	5b                   	pop    ebx
c000ff1a:	c3                   	ret    
c000ff1b:	c7 44 24 10 06 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac06
c000ff23:	83 c4 08             	add    esp,0x8
c000ff26:	5b                   	pop    ebx
c000ff27:	e9 39 a9 00 00       	jmp    c001a865 <Krnl::panic(char const*)>

c000ff2c <Phys::allocatePage()>:
c000ff2c:	56                   	push   esi
c000ff2d:	53                   	push   ebx
c000ff2e:	51                   	push   ecx
c000ff2f:	8b 35 04 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef04
c000ff35:	89 f3                	mov    ebx,esi
c000ff37:	eb 0a                	jmp    c000ff43 <Phys::allocatePage()+0x17>
c000ff39:	89 1d 04 ef 02 c0    	mov    DWORD PTR ds:0xc002ef04,ebx
c000ff3f:	39 de                	cmp    esi,ebx
c000ff41:	74 24                	je     c000ff67 <Phys::allocatePage()+0x3b>
c000ff43:	53                   	push   ebx
c000ff44:	e8 3d ff ff ff       	call   c000fe86 <Phys::getPageState(unsigned long)>
c000ff49:	5a                   	pop    edx
c000ff4a:	84 c0                	test   al,al
c000ff4c:	74 77                	je     c000ffc5 <Phys::allocatePage()+0x99>
c000ff4e:	43                   	inc    ebx
c000ff4f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff55:	75 e2                	jne    c000ff39 <Phys::allocatePage()+0xd>
c000ff57:	31 db                	xor    ebx,ebx
c000ff59:	c7 05 04 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef04,0x0
c000ff63:	39 de                	cmp    esi,ebx
c000ff65:	75 dc                	jne    c000ff43 <Phys::allocatePage()+0x17>
c000ff67:	83 ec 0c             	sub    esp,0xc
c000ff6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff72:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff78:	e8 27 2c 00 00       	call   c0012ba4 <VAS::scanForEviction()>
c000ff7d:	83 c4 10             	add    esp,0x10
c000ff80:	85 c0                	test   eax,eax
c000ff82:	75 76                	jne    c000fffa <Phys::allocatePage()+0xce>
c000ff84:	83 ec 0c             	sub    esp,0xc
c000ff87:	68 1c ac 02 c0       	push   0xc002ac1c
c000ff8c:	e8 e6 2e 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c000ff91:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff98:	e8 cc fd ff ff       	call   c000fd69 <Phys::allocateDMA(unsigned long)>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	85 c0                	test   eax,eax
c000ffa2:	75 56                	jne    c000fffa <Phys::allocatePage()+0xce>
c000ffa4:	83 ec 0c             	sub    esp,0xc
c000ffa7:	68 2d ac 02 c0       	push   0xc002ac2d
c000ffac:	e8 b4 a8 00 00       	call   c001a865 <Krnl::panic(char const*)>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	8b 1d 04 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef04
c000ffba:	53                   	push   ebx
c000ffbb:	e8 c6 fe ff ff       	call   c000fe86 <Phys::getPageState(unsigned long)>
c000ffc0:	5a                   	pop    edx
c000ffc1:	84 c0                	test   al,al
c000ffc3:	75 89                	jne    c000ff4e <Phys::allocatePage()+0x22>
c000ffc5:	6a 01                	push   0x1
c000ffc7:	53                   	push   ebx
c000ffc8:	e8 87 fe ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c000ffcd:	a1 10 ef 02 c0       	mov    eax,ds:0xc002ef10
c000ffd2:	59                   	pop    ecx
c000ffd3:	40                   	inc    eax
c000ffd4:	5b                   	pop    ebx
c000ffd5:	a3 10 ef 02 c0       	mov    ds:0xc002ef10,eax
c000ffda:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffdd:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffe0:	c1 e0 02             	shl    eax,0x2
c000ffe3:	99                   	cdq    
c000ffe4:	f7 3d 14 ef 02 c0    	idiv   DWORD PTR ds:0xc002ef14
c000ffea:	39 05 0c ef 02 c0    	cmp    DWORD PTR ds:0xc002ef0c,eax
c000fff0:	75 0c                	jne    c000fffe <Phys::allocatePage()+0xd2>
c000fff2:	a1 04 ef 02 c0       	mov    eax,ds:0xc002ef04
c000fff7:	c1 e0 0c             	shl    eax,0xc
c000fffa:	5a                   	pop    edx
c000fffb:	5b                   	pop    ebx
c000fffc:	5e                   	pop    esi
c000fffd:	c3                   	ret    
c000fffe:	83 ec 0c             	sub    esp,0xc
c0010001:	a3 0c ef 02 c0       	mov    ds:0xc002ef0c,eax
c0010006:	50                   	push   eax
c0010007:	e8 0c 09 00 00       	call   c0010918 <VgaText::updateRAMUsageDisplay(int)>
c001000c:	83 c4 10             	add    esp,0x10
c001000f:	eb e1                	jmp    c000fff2 <Phys::allocatePage()+0xc6>

c0010011 <Phys::allocateContiguousPages(int)>:
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010018:	fa                   	cli    
c0010019:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001001f:	31 db                	xor    ebx,ebx
c0010021:	85 db                	test   ebx,ebx
c0010023:	75 11                	jne    c0010036 <Phys::allocateContiguousPages(int)+0x25>
c0010025:	e8 02 ff ff ff       	call   c000ff2c <Phys::allocatePage()>
c001002a:	83 fe 01             	cmp    esi,0x1
c001002d:	89 c7                	mov    edi,eax
c001002f:	74 21                	je     c0010052 <Phys::allocateContiguousPages(int)+0x41>
c0010031:	bb 01 00 00 00       	mov    ebx,0x1
c0010036:	e8 f1 fe ff ff       	call   c000ff2c <Phys::allocatePage()>
c001003b:	89 da                	mov    edx,ebx
c001003d:	c1 e2 0c             	shl    edx,0xc
c0010040:	01 fa                	add    edx,edi
c0010042:	39 c2                	cmp    edx,eax
c0010044:	74 20                	je     c0010066 <Phys::allocateContiguousPages(int)+0x55>
c0010046:	bb 01 00 00 00       	mov    ebx,0x1
c001004b:	89 c7                	mov    edi,eax
c001004d:	83 fe 01             	cmp    esi,0x1
c0010050:	75 e4                	jne    c0010036 <Phys::allocateContiguousPages(int)+0x25>
c0010052:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0010057:	48                   	dec    eax
c0010058:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001005d:	75 01                	jne    c0010060 <Phys::allocateContiguousPages(int)+0x4f>
c001005f:	fb                   	sti    
c0010060:	89 f8                	mov    eax,edi
c0010062:	5b                   	pop    ebx
c0010063:	5e                   	pop    esi
c0010064:	5f                   	pop    edi
c0010065:	c3                   	ret    
c0010066:	43                   	inc    ebx
c0010067:	39 f3                	cmp    ebx,esi
c0010069:	75 b6                	jne    c0010021 <Phys::allocateContiguousPages(int)+0x10>
c001006b:	eb e5                	jmp    c0010052 <Phys::allocateContiguousPages(int)+0x41>

c001006d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001006d:	56                   	push   esi
c001006e:	53                   	push   ebx
c001006f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010073:	39 1d 08 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef08,ebx
c0010079:	73 06                	jae    c0010081 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001007b:	89 1d 08 ef 02 c0    	mov    DWORD PTR ds:0xc002ef08,ebx
c0010081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010085:	c1 eb 0c             	shr    ebx,0xc
c0010088:	c1 e8 0c             	shr    eax,0xc
c001008b:	39 d8                	cmp    eax,ebx
c001008d:	73 13                	jae    c00100a2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001008f:	6a 00                	push   0x0
c0010091:	8d 70 01             	lea    esi,[eax+0x1]
c0010094:	50                   	push   eax
c0010095:	e8 ba fd ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c001009a:	5a                   	pop    edx
c001009b:	89 f0                	mov    eax,esi
c001009d:	59                   	pop    ecx
c001009e:	39 f3                	cmp    ebx,esi
c00100a0:	75 ed                	jne    c001008f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100a2:	5b                   	pop    ebx
c00100a3:	5e                   	pop    esi
c00100a4:	c3                   	ret    

c00100a5 <Phys::physicalMemorySetup(unsigned int)>:
c00100a5:	55                   	push   ebp
c00100a6:	57                   	push   edi
c00100a7:	56                   	push   esi
c00100a8:	53                   	push   ebx
c00100a9:	31 db                	xor    ebx,ebx
c00100ab:	83 ec 40             	sub    esp,0x40
c00100ae:	6a 30                	push   0x30
c00100b0:	6a 00                	push   0x0
c00100b2:	68 20 ef 02 c0       	push   0xc002ef20
c00100b7:	e8 b0 06 ff ff       	call   c000076c <memset>
c00100bc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100c5:	05 00 10 00 00       	add    eax,0x1000
c00100ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100ce:	83 c4 10             	add    esp,0x10
c00100d1:	83 ec 08             	sub    esp,0x8
c00100d4:	6a 01                	push   0x1
c00100d6:	53                   	push   ebx
c00100d7:	43                   	inc    ebx
c00100d8:	e8 77 fd ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100e6:	75 e9                	jne    c00100d1 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100e8:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ef:	66 85 c0             	test   ax,ax
c00100f2:	0f 84 8e 01 00 00    	je     c0010286 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100fc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010104:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010108:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001010d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010111:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010119:	eb 15                	jmp    c0010130 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001011b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001011f:	83 c3 18             	add    ebx,0x18
c0010122:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010126:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001012a:	0f 84 66 01 00 00    	je     c0010296 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010130:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010133:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010136:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010139:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001013d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010141:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010143:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010146:	01 f0                	add    eax,esi
c0010148:	55                   	push   ebp
c0010149:	11 fa                	adc    edx,edi
c001014b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001014f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010153:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010157:	56                   	push   esi
c0010158:	68 68 ac 02 c0       	push   0xc002ac68
c001015d:	e8 15 2d 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0010162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010166:	83 c4 10             	add    esp,0x10
c0010169:	09 f8                	or     eax,edi
c001016b:	0f 85 25 01 00 00    	jne    c0010296 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010171:	4d                   	dec    ebp
c0010172:	75 a7                	jne    c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010174:	ba 00 00 08 00       	mov    edx,0x80000
c0010179:	89 c1                	mov    ecx,eax
c001017b:	39 f2                	cmp    edx,esi
c001017d:	19 f9                	sbb    ecx,edi
c001017f:	0f 82 a7 00 00 00    	jb     c001022c <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010185:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010189:	89 c1                	mov    ecx,eax
c001018b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001018f:	0f 83 97 00 00 00    	jae    c001022c <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010195:	ba 00 00 0a 00       	mov    edx,0xa0000
c001019a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a2:	39 fa                	cmp    edx,edi
c00101a4:	19 e8                	sbb    eax,ebp
c00101a6:	0f 82 14 01 00 00    	jb     c00102c0 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101ba:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101bf:	83 d5 ff             	adc    ebp,0xffffffff
c00101c2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101c6:	31 c0                	xor    eax,eax
c00101c8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101cc:	39 fa                	cmp    edx,edi
c00101ce:	89 c1                	mov    ecx,eax
c00101d0:	19 e9                	sbb    ecx,ebp
c00101d2:	0f 83 43 ff ff ff    	jae    c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d8:	be 00 00 08 00       	mov    esi,0x80000
c00101dd:	50                   	push   eax
c00101de:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101e2:	57                   	push   edi
c00101e3:	56                   	push   esi
c00101e4:	68 8c ac 02 c0       	push   0xc002ac8c
c00101e9:	e8 89 2c 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00101ee:	5a                   	pop    edx
c00101ef:	59                   	pop    ecx
c00101f0:	57                   	push   edi
c00101f1:	56                   	push   esi
c00101f2:	e8 76 fe ff ff       	call   c001006d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ff:	83 c4 0c             	add    esp,0xc
c0010202:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010206:	03 05 14 ef 02 c0    	add    eax,DWORD PTR ds:0xc002ef14
c001020c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010213:	a3 14 ef 02 c0       	mov    ds:0xc002ef14,eax
c0010218:	52                   	push   edx
c0010219:	50                   	push   eax
c001021a:	68 49 ac 02 c0       	push   0xc002ac49
c001021f:	e8 53 2c 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0010224:	83 c4 10             	add    esp,0x10
c0010227:	e9 ef fe ff ff       	jmp    c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010234:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010238:	39 ea                	cmp    edx,ebp
c001023a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001023e:	0f 82 d7 fe ff ff    	jb     c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010244:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010249:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001024d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010251:	0f 83 c4 fe ff ff    	jae    c001011b <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010257:	39 ee                	cmp    esi,ebp
c0010259:	89 f8                	mov    eax,edi
c001025b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001025f:	0f 83 78 ff ff ff    	jae    c00101dd <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010269:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001026d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010271:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010275:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010279:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001027d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010281:	e9 57 ff ff ff       	jmp    c00101dd <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010286:	83 ec 0c             	sub    esp,0xc
c0010289:	68 3b ac 02 c0       	push   0xc002ac3b
c001028e:	e8 d2 a5 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0010293:	83 c4 10             	add    esp,0x10
c0010296:	bb 40 01 00 00       	mov    ebx,0x140
c001029b:	83 ec 08             	sub    esp,0x8
c001029e:	6a 00                	push   0x0
c00102a0:	53                   	push   ebx
c00102a1:	43                   	inc    ebx
c00102a2:	e8 ad fb ff ff       	call   c000fe54 <Phys::setPageState(unsigned long, bool)>
c00102a7:	ff 05 14 ef 02 c0    	inc    DWORD PTR ds:0xc002ef14
c00102ad:	83 c4 10             	add    esp,0x10
c00102b0:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102b6:	75 e3                	jne    c001029b <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102b8:	83 c4 3c             	add    esp,0x3c
c00102bb:	5b                   	pop    ebx
c00102bc:	5e                   	pop    esi
c00102bd:	5f                   	pop    edi
c00102be:	5d                   	pop    ebp
c00102bf:	c3                   	ret    
c00102c0:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102d0:	e9 d7 fe ff ff       	jmp    c00101ac <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102d5:	90                   	nop

c00102d6 <Pipe::isAtty()>:
c00102d6:	31 c0                	xor    eax,eax
c00102d8:	c3                   	ret    
c00102d9:	90                   	nop

c00102da <Pipe::~Pipe()>:
c00102da:	83 ec 0c             	sub    esp,0xc
c00102dd:	ba f8 ac 02 c0       	mov    edx,0xc002acf8
c00102e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e6:	89 10                	mov    DWORD PTR [eax],edx
c00102e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	50                   	push   eax
c00102f0:	e8 1b 15 00 00       	call   c0011810 <UnixFile::~UnixFile()>
c00102f5:	83 c4 10             	add    esp,0x10
c00102f8:	90                   	nop
c00102f9:	83 c4 0c             	add    esp,0xc
c00102fc:	c3                   	ret    
c00102fd:	90                   	nop

c00102fe <Pipe::~Pipe()>:
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	83 ec 0c             	sub    esp,0xc
c0010304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010308:	e8 cd ff ff ff       	call   c00102da <Pipe::~Pipe()>
c001030d:	83 c4 10             	add    esp,0x10
c0010310:	83 ec 08             	sub    esp,0x8
c0010313:	6a 20                	push   0x20
c0010315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010319:	e8 79 2a 00 00       	call   c0012d97 <operator delete(void*, unsigned long)>
c001031e:	83 c4 10             	add    esp,0x10
c0010321:	83 c4 0c             	add    esp,0xc
c0010324:	c3                   	ret    
c0010325:	90                   	nop

c0010326 <Pipe::read(unsigned long long, void*, int*)>:
c0010326:	55                   	push   ebp
c0010327:	57                   	push   edi
c0010328:	56                   	push   esi
c0010329:	53                   	push   ebx
c001032a:	83 ec 1c             	sub    esp,0x1c
c001032d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010331:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010335:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010339:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001033c:	89 c8                	mov    eax,ecx
c001033e:	99                   	cdq    
c001033f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010343:	74 24                	je     c0010369 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010345:	39 f9                	cmp    ecx,edi
c0010347:	89 d1                	mov    ecx,edx
c0010349:	19 f1                	sbb    ecx,esi
c001034b:	73 1c                	jae    c0010369 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001034d:	fa                   	cli    
c001034e:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c0010354:	e8 91 e1 00 00       	call   c001e4ea <schedule()>
c0010359:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001035e:	48                   	dec    eax
c001035f:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0010364:	75 d3                	jne    c0010339 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010366:	fb                   	sti    
c0010367:	eb d0                	jmp    c0010339 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010369:	39 f8                	cmp    eax,edi
c001036b:	89 d1                	mov    ecx,edx
c001036d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010371:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010375:	19 f1                	sbb    ecx,esi
c0010377:	73 08                	jae    c0010381 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0010379:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001037d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010384:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010387:	29 c6                	sub    esi,eax
c0010389:	89 f1                	mov    ecx,esi
c001038b:	c1 f9 1f             	sar    ecx,0x1f
c001038e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010392:	89 ca                	mov    edx,ecx
c0010394:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010398:	19 d1                	sbb    ecx,edx
c001039a:	73 04                	jae    c00103a0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c001039c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103a0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103a4:	89 fd                	mov    ebp,edi
c00103a6:	29 f5                	sub    ebp,esi
c00103a8:	85 f6                	test   esi,esi
c00103aa:	74 12                	je     c00103be <Pipe::read(unsigned long long, void*, int*)+0x98>
c00103ac:	52                   	push   edx
c00103ad:	56                   	push   esi
c00103ae:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103b1:	50                   	push   eax
c00103b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103b6:	e8 f5 09 ff ff       	call   c0000db0 <realmemcpy>
c00103bb:	83 c4 10             	add    esp,0x10
c00103be:	85 ed                	test   ebp,ebp
c00103c0:	74 12                	je     c00103d4 <Pipe::read(unsigned long long, void*, int*)+0xae>
c00103c2:	50                   	push   eax
c00103c3:	55                   	push   ebp
c00103c4:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103c7:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103cb:	56                   	push   esi
c00103cc:	e8 df 09 ff ff       	call   c0000db0 <realmemcpy>
c00103d1:	83 c4 10             	add    esp,0x10
c00103d4:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103dd:	99                   	cdq    
c00103de:	89 f7                	mov    edi,esi
c00103e0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103e4:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103e8:	c1 ff 1f             	sar    edi,0x1f
c00103eb:	57                   	push   edi
c00103ec:	56                   	push   esi
c00103ed:	52                   	push   edx
c00103ee:	50                   	push   eax
c00103ef:	e8 40 6f 01 00       	call   c0027334 <__umoddi3>
c00103f4:	83 c4 10             	add    esp,0x10
c00103f7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103ff:	75 10                	jne    c0010411 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010401:	83 ec 0c             	sub    esp,0xc
c0010404:	68 b5 ac 02 c0       	push   0xc002acb5
c0010409:	e8 57 a4 00 00       	call   c001a865 <Krnl::panic(char const*)>
c001040e:	83 c4 10             	add    esp,0x10
c0010411:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010415:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010419:	89 10                	mov    DWORD PTR [eax],edx
c001041b:	83 c4 1c             	add    esp,0x1c
c001041e:	31 c0                	xor    eax,eax
c0010420:	5b                   	pop    ebx
c0010421:	5e                   	pop    esi
c0010422:	5f                   	pop    edi
c0010423:	5d                   	pop    ebp
c0010424:	c3                   	ret    
c0010425:	90                   	nop

c0010426 <Pipe::write(unsigned long long, void*, int*)>:
c0010426:	55                   	push   ebp
c0010427:	57                   	push   edi
c0010428:	56                   	push   esi
c0010429:	53                   	push   ebx
c001042a:	83 ec 1c             	sub    esp,0x1c
c001042d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010431:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010435:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010439:	89 04 24             	mov    DWORD PTR [esp],eax
c001043c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001043f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010442:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010446:	89 de                	mov    esi,ebx
c0010448:	89 df                	mov    edi,ebx
c001044a:	c1 ff 1f             	sar    edi,0x1f
c001044d:	01 c6                	add    esi,eax
c001044f:	89 c8                	mov    eax,ecx
c0010451:	11 d7                	adc    edi,edx
c0010453:	99                   	cdq    
c0010454:	39 f1                	cmp    ecx,esi
c0010456:	89 d0                	mov    eax,edx
c0010458:	19 f8                	sbb    eax,edi
c001045a:	b8 01 00 00 00       	mov    eax,0x1
c001045f:	0f 82 80 00 00 00    	jb     c00104e5 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010465:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010468:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001046b:	01 d8                	add    eax,ebx
c001046d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010471:	99                   	cdq    
c0010472:	f7 f9                	idiv   ecx
c0010474:	29 d1                	sub    ecx,edx
c0010476:	89 d7                	mov    edi,edx
c0010478:	89 c8                	mov    eax,ecx
c001047a:	99                   	cdq    
c001047b:	39 ce                	cmp    esi,ecx
c001047d:	19 d3                	sbb    ebx,edx
c001047f:	bb 00 00 00 00       	mov    ebx,0x0
c0010484:	72 04                	jb     c001048a <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010486:	89 f3                	mov    ebx,esi
c0010488:	29 cb                	sub    ebx,ecx
c001048a:	89 f1                	mov    ecx,esi
c001048c:	29 d9                	sub    ecx,ebx
c001048e:	74 1a                	je     c00104aa <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010490:	52                   	push   edx
c0010491:	51                   	push   ecx
c0010492:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010496:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001049a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001049d:	57                   	push   edi
c001049e:	e8 0d 09 ff ff       	call   c0000db0 <realmemcpy>
c00104a3:	83 c4 10             	add    esp,0x10
c00104a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104aa:	85 db                	test   ebx,ebx
c00104ac:	74 12                	je     c00104c0 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104ae:	50                   	push   eax
c00104af:	53                   	push   ebx
c00104b0:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104b4:	51                   	push   ecx
c00104b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104b8:	e8 f3 08 ff ff       	call   c0000db0 <realmemcpy>
c00104bd:	83 c4 10             	add    esp,0x10
c00104c0:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104c3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104c8:	75 10                	jne    c00104da <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104ca:	83 ec 0c             	sub    esp,0xc
c00104cd:	68 d1 ac 02 c0       	push   0xc002acd1
c00104d2:	e8 8e a3 00 00       	call   c001a865 <Krnl::panic(char const*)>
c00104d7:	83 c4 10             	add    esp,0x10
c00104da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104de:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104e1:	89 38                	mov    DWORD PTR [eax],edi
c00104e3:	31 c0                	xor    eax,eax
c00104e5:	83 c4 1c             	add    esp,0x1c
c00104e8:	5b                   	pop    ebx
c00104e9:	5e                   	pop    esi
c00104ea:	5f                   	pop    edi
c00104eb:	5d                   	pop    ebp
c00104ec:	c3                   	ret    
c00104ed:	90                   	nop

c00104ee <Pipe::Pipe(int)>:
c00104ee:	83 ec 0c             	sub    esp,0xc
c00104f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	6a 00                	push   0x0
c00104fa:	50                   	push   eax
c00104fb:	e8 2e 11 00 00       	call   c001162e <UnixFile::UnixFile(int)>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	ba f8 ac 02 c0       	mov    edx,0xc002acf8
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	89 10                	mov    DWORD PTR [eax],edx
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010516:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010528:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001052f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010533:	83 ec 0c             	sub    esp,0xc
c0010536:	50                   	push   eax
c0010537:	e8 84 f3 ff ff       	call   c000f8c0 <malloc>
c001053c:	83 c4 10             	add    esp,0x10
c001053f:	89 c2                	mov    edx,eax
c0010541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010545:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010550:	90                   	nop
c0010551:	83 c4 0c             	add    esp,0xc
c0010554:	c3                   	ret    
c0010555:	90                   	nop

c0010556 <VgaText::isAtty()>:
c0010556:	b0 01                	mov    al,0x1
c0010558:	c3                   	ret    
c0010559:	90                   	nop

c001055a <VgaText::~VgaText()>:
c001055a:	83 ec 0c             	sub    esp,0xc
c001055d:	ba b4 ad 02 c0       	mov    edx,0xc002adb4
c0010562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010566:	89 10                	mov    DWORD PTR [eax],edx
c0010568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056c:	83 ec 0c             	sub    esp,0xc
c001056f:	50                   	push   eax
c0010570:	e8 9b 12 00 00       	call   c0011810 <UnixFile::~UnixFile()>
c0010575:	83 c4 10             	add    esp,0x10
c0010578:	90                   	nop
c0010579:	83 c4 0c             	add    esp,0xc
c001057c:	c3                   	ret    
c001057d:	90                   	nop

c001057e <VgaText::~VgaText()>:
c001057e:	83 ec 0c             	sub    esp,0xc
c0010581:	83 ec 0c             	sub    esp,0xc
c0010584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010588:	e8 cd ff ff ff       	call   c001055a <VgaText::~VgaText()>
c001058d:	83 c4 10             	add    esp,0x10
c0010590:	83 ec 08             	sub    esp,0x8
c0010593:	68 c4 02 00 00       	push   0x2c4
c0010598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059c:	e8 f6 27 00 00       	call   c0012d97 <operator delete(void*, unsigned long)>
c00105a1:	83 c4 10             	add    esp,0x10
c00105a4:	83 c4 0c             	add    esp,0xc
c00105a7:	c3                   	ret    

c00105a8 <VgaText::read(unsigned long long, void*, int*)>:
c00105a8:	83 ec 10             	sub    esp,0x10
c00105ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b7:	e8 7e 5d 00 00       	call   c001633a <readKeyboard(VgaText*, char*, unsigned long)>
c00105bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105c0:	89 02                	mov    DWORD PTR [edx],eax
c00105c2:	31 c0                	xor    eax,eax
c00105c4:	83 c4 1c             	add    esp,0x1c
c00105c7:	c3                   	ret    

c00105c8 <setTerminalScrollLock(bool)>:
c00105c8:	c3                   	ret    

c00105c9 <addToTerminalCycle(VgaText*)>:
c00105c9:	8b 15 a0 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efa0
c00105cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d3:	85 d2                	test   edx,edx
c00105d5:	75 09                	jne    c00105e0 <addToTerminalCycle(VgaText*)+0x17>
c00105d7:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105da:	a3 a0 ef 02 c0       	mov    ds:0xc002efa0,eax
c00105df:	c3                   	ret    
c00105e0:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105e3:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105e6:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105e9:	c3                   	ret    

c00105ea <installVgaTextImplementation()>:
c00105ea:	83 ec 10             	sub    esp,0x10
c00105ed:	6a 20                	push   0x20
c00105ef:	6a 00                	push   0x0
c00105f1:	68 80 ef 02 c0       	push   0xc002ef80
c00105f6:	e8 71 01 ff ff       	call   c000076c <memset>
c00105fb:	83 c4 1c             	add    esp,0x1c
c00105fe:	c3                   	ret    

c00105ff <scrollTerminalScrollLock(int)>:
c00105ff:	c3                   	ret    

c0010600 <VgaText::load()>:
c0010600:	53                   	push   ebx
c0010601:	31 c0                	xor    eax,eax
c0010603:	83 ec 58             	sub    esp,0x58
c0010606:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001060a:	89 e2                	mov    edx,esp
c001060c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010610:	40                   	inc    eax
c0010611:	83 f8 50             	cmp    eax,0x50
c0010614:	75 f6                	jne    c001060c <VgaText::load()+0xc>
c0010616:	31 c0                	xor    eax,eax
c0010618:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001061f:	84 c9                	test   cl,cl
c0010621:	74 06                	je     c0010629 <VgaText::load()+0x29>
c0010623:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010626:	40                   	inc    eax
c0010627:	eb ef                	jmp    c0010618 <VgaText::load()+0x18>
c0010629:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001062c:	85 c0                	test   eax,eax
c001062e:	74 09                	je     c0010639 <VgaText::load()+0x39>
c0010630:	51                   	push   ecx
c0010631:	51                   	push   ecx
c0010632:	52                   	push   edx
c0010633:	53                   	push   ebx
c0010634:	ff d0                	call   eax
c0010636:	83 c4 10             	add    esp,0x10
c0010639:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001063c:	85 c0                	test   eax,eax
c001063e:	74 09                	je     c0010649 <VgaText::load()+0x49>
c0010640:	83 ec 0c             	sub    esp,0xc
c0010643:	53                   	push   ebx
c0010644:	ff d0                	call   eax
c0010646:	83 c4 10             	add    esp,0x10
c0010649:	83 c4 58             	add    esp,0x58
c001064c:	5b                   	pop    ebx
c001064d:	c3                   	ret    

c001064e <VgaText::updateCursor()>:
c001064e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010652:	39 05 a4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efa4,eax
c0010658:	75 09                	jne    c0010663 <VgaText::updateCursor()+0x15>
c001065a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001065d:	85 c0                	test   eax,eax
c001065f:	74 02                	je     c0010663 <VgaText::updateCursor()+0x15>
c0010661:	ff e0                	jmp    eax
c0010663:	c3                   	ret    

c0010664 <VgaText::showCursor(bool)>:
c0010664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066c:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c001066f:	c3                   	ret    

c0010670 <VgaText::disableBlink(bool)>:
c0010670:	56                   	push   esi
c0010671:	53                   	push   ebx
c0010672:	51                   	push   ecx
c0010673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010677:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001067b:	39 1d a4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efa4,ebx
c0010681:	75 15                	jne    c0010698 <VgaText::disableBlink(bool)+0x28>
c0010683:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010686:	85 c0                	test   eax,eax
c0010688:	74 0e                	je     c0010698 <VgaText::disableBlink(bool)+0x28>
c001068a:	89 f1                	mov    ecx,esi
c001068c:	52                   	push   edx
c001068d:	52                   	push   edx
c001068e:	0f b6 d1             	movzx  edx,cl
c0010691:	52                   	push   edx
c0010692:	53                   	push   ebx
c0010693:	ff d0                	call   eax
c0010695:	83 c4 10             	add    esp,0x10
c0010698:	89 f0                	mov    eax,esi
c001069a:	83 f0 01             	xor    eax,0x1
c001069d:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00106a0:	58                   	pop    eax
c00106a1:	5b                   	pop    ebx
c00106a2:	5e                   	pop    esi
c00106a3:	c3                   	ret    

c00106a4 <VgaText::doANSI_SGR(int)>:
c00106a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ac:	85 d2                	test   edx,edx
c00106ae:	75 0b                	jne    c00106bb <VgaText::doANSI_SGR(int)+0x17>
c00106b0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00106b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106b6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00106b9:	eb 59                	jmp    c0010714 <VgaText::doANSI_SGR(int)+0x70>
c00106bb:	83 fa 07             	cmp    edx,0x7
c00106be:	75 0b                	jne    c00106cb <VgaText::doANSI_SGR(int)+0x27>
c00106c0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00106c3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00106c6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00106c9:	eb 49                	jmp    c0010714 <VgaText::doANSI_SGR(int)+0x70>
c00106cb:	83 fa 1b             	cmp    edx,0x1b
c00106ce:	74 e0                	je     c00106b0 <VgaText::doANSI_SGR(int)+0xc>
c00106d0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106d3:	83 f9 07             	cmp    ecx,0x7
c00106d6:	77 09                	ja     c00106e1 <VgaText::doANSI_SGR(int)+0x3d>
c00106d8:	8b 14 8d 20 de 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd21e0]
c00106df:	eb 20                	jmp    c0010701 <VgaText::doANSI_SGR(int)+0x5d>
c00106e1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106e4:	83 f9 07             	cmp    ecx,0x7
c00106e7:	77 09                	ja     c00106f2 <VgaText::doANSI_SGR(int)+0x4e>
c00106e9:	8b 14 8d 20 de 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd21e0]
c00106f0:	eb 22                	jmp    c0010714 <VgaText::doANSI_SGR(int)+0x70>
c00106f2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106f5:	83 f9 07             	cmp    ecx,0x7
c00106f8:	77 0b                	ja     c0010705 <VgaText::doANSI_SGR(int)+0x61>
c00106fa:	8b 14 95 d8 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2328]
c0010701:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010704:	c3                   	ret    
c0010705:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010708:	83 f9 07             	cmp    ecx,0x7
c001070b:	77 0a                	ja     c0010717 <VgaText::doANSI_SGR(int)+0x73>
c001070d:	8b 14 95 b0 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2350]
c0010714:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010717:	c3                   	ret    

c0010718 <VgaText::setDefaultBgColour(VgaColour)>:
c0010718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010720:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010723:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010726:	c3                   	ret    
c0010727:	90                   	nop

c0010728 <VgaText::setDefaultFgColour(VgaColour)>:
c0010728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001072c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010730:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010733:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010736:	c3                   	ret    
c0010737:	90                   	nop

c0010738 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010738:	53                   	push   ebx
c0010739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001073d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010741:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010745:	51                   	push   ecx
c0010746:	e8 cd ff ff ff       	call   c0010718 <VgaText::setDefaultBgColour(VgaColour)>
c001074b:	58                   	pop    eax
c001074c:	5a                   	pop    edx
c001074d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010751:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010755:	5b                   	pop    ebx
c0010756:	eb d0                	jmp    c0010728 <VgaText::setDefaultFgColour(VgaColour)>

c0010758 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010758:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001075c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010761:	83 e0 0f             	and    eax,0xf
c0010764:	c1 e2 04             	shl    edx,0x4
c0010767:	09 d0                	or     eax,edx
c0010769:	c3                   	ret    

c001076a <VgaText::scrollScreen()>:
c001076a:	55                   	push   ebp
c001076b:	b9 01 00 00 00       	mov    ecx,0x1
c0010770:	57                   	push   edi
c0010771:	56                   	push   esi
c0010772:	53                   	push   ebx
c0010773:	83 ec 0c             	sub    esp,0xc
c0010776:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001077a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010780:	31 ff                	xor    edi,edi
c0010782:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010785:	83 f9 17             	cmp    ecx,0x17
c0010788:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001078b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010792:	75 27                	jne    c00107bb <VgaText::scrollScreen()+0x51>
c0010794:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010797:	01 f5                	add    ebp,esi
c0010799:	f7 c7 01 00 00 00    	test   edi,0x1
c001079f:	74 16                	je     c00107b7 <VgaText::scrollScreen()+0x4d>
c00107a1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00107a5:	50                   	push   eax
c00107a6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00107aa:	50                   	push   eax
c00107ab:	e8 a8 ff ff ff       	call   c0010758 <VgaText::combineColours(unsigned char, unsigned char)>
c00107b0:	5a                   	pop    edx
c00107b1:	5a                   	pop    edx
c00107b2:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00107b5:	eb 04                	jmp    c00107bb <VgaText::scrollScreen()+0x51>
c00107b7:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00107bb:	47                   	inc    edi
c00107bc:	46                   	inc    esi
c00107bd:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107c3:	75 bd                	jne    c0010782 <VgaText::scrollScreen()+0x18>
c00107c5:	41                   	inc    ecx
c00107c6:	83 f9 18             	cmp    ecx,0x18
c00107c9:	75 af                	jne    c001077a <VgaText::scrollScreen()+0x10>
c00107cb:	39 1d a4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efa4,ebx
c00107d1:	75 1b                	jne    c00107ee <VgaText::scrollScreen()+0x84>
c00107d3:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107d7:	74 05                	je     c00107de <VgaText::scrollScreen()+0x74>
c00107d9:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107dc:	eb 10                	jmp    c00107ee <VgaText::scrollScreen()+0x84>
c00107de:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107e1:	85 c0                	test   eax,eax
c00107e3:	74 09                	je     c00107ee <VgaText::scrollScreen()+0x84>
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	53                   	push   ebx
c00107e9:	ff d0                	call   eax
c00107eb:	83 c4 10             	add    esp,0x10
c00107ee:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107f2:	83 c4 0c             	add    esp,0xc
c00107f5:	5b                   	pop    ebx
c00107f6:	5e                   	pop    esi
c00107f7:	5f                   	pop    edi
c00107f8:	5d                   	pop    ebp
c00107f9:	e9 50 fe ff ff       	jmp    c001064e <VgaText::updateCursor()>

c00107fe <VgaText::combineCharAndColour(char, unsigned char)>:
c00107fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010803:	c1 e0 08             	shl    eax,0x8
c0010806:	89 c2                	mov    edx,eax
c0010808:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001080d:	09 d0                	or     eax,edx
c001080f:	c3                   	ret    

c0010810 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010810:	56                   	push   esi
c0010811:	53                   	push   ebx
c0010812:	51                   	push   ecx
c0010813:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010817:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001081c:	50                   	push   eax
c001081d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010822:	50                   	push   eax
c0010823:	e8 30 ff ff ff       	call   c0010758 <VgaText::combineColours(unsigned char, unsigned char)>
c0010828:	5b                   	pop    ebx
c0010829:	0f b6 c0             	movzx  eax,al
c001082c:	5e                   	pop    esi
c001082d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010832:	50                   	push   eax
c0010833:	53                   	push   ebx
c0010834:	e8 c5 ff ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010839:	5a                   	pop    edx
c001083a:	5e                   	pop    esi
c001083b:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001083e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010844:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010848:	0f b7 d2             	movzx  edx,dx
c001084b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001084f:	39 0d a4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efa4,ecx
c0010855:	75 10                	jne    c0010867 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010857:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001085a:	85 c0                	test   eax,eax
c001085c:	74 09                	je     c0010867 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001085e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010862:	5a                   	pop    edx
c0010863:	5b                   	pop    ebx
c0010864:	5e                   	pop    esi
c0010865:	ff e0                	jmp    eax
c0010867:	58                   	pop    eax
c0010868:	5b                   	pop    ebx
c0010869:	5e                   	pop    esi
c001086a:	c3                   	ret    
c001086b:	90                   	nop

c001086c <VgaText::getCursorX()>:
c001086c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010870:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010873:	c3                   	ret    

c0010874 <VgaText::getCursorY()>:
c0010874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010878:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001087b:	c3                   	ret    

c001087c <VgaText::setCursor(int, int)>:
c001087c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010880:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010884:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001088b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001088e:	e9 bb fd ff ff       	jmp    c001064e <VgaText::updateCursor()>
c0010893:	90                   	nop

c0010894 <VgaText::setCursorX(int)>:
c0010894:	83 ec 10             	sub    esp,0x10
c0010897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001089b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001089e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a2:	50                   	push   eax
c00108a3:	e8 d4 ff ff ff       	call   c001087c <VgaText::setCursor(int, int)>
c00108a8:	83 c4 1c             	add    esp,0x1c
c00108ab:	c3                   	ret    

c00108ac <VgaText::setCursorY(int)>:
c00108ac:	83 ec 10             	sub    esp,0x10
c00108af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108b7:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00108ba:	50                   	push   eax
c00108bb:	e8 bc ff ff ff       	call   c001087c <VgaText::setCursor(int, int)>
c00108c0:	83 c4 1c             	add    esp,0x1c
c00108c3:	c3                   	ret    

c00108c4 <VgaText::incrementCursor(bool)>:
c00108c4:	56                   	push   esi
c00108c5:	53                   	push   ebx
c00108c6:	51                   	push   ecx
c00108c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00108d2:	40                   	inc    eax
c00108d3:	83 f8 50             	cmp    eax,0x50
c00108d6:	74 05                	je     c00108dd <VgaText::incrementCursor(bool)+0x19>
c00108d8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108db:	eb 24                	jmp    c0010901 <VgaText::incrementCursor(bool)+0x3d>
c00108dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108e7:	8d 50 01             	lea    edx,[eax+0x1]
c00108ea:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108ed:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108f0:	75 0f                	jne    c0010901 <VgaText::incrementCursor(bool)+0x3d>
c00108f2:	83 ec 0c             	sub    esp,0xc
c00108f5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108f8:	53                   	push   ebx
c00108f9:	e8 6c fe ff ff       	call   c001076a <VgaText::scrollScreen()>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	89 f0                	mov    eax,esi
c0010903:	84 c0                	test   al,al
c0010905:	74 0c                	je     c0010913 <VgaText::incrementCursor(bool)+0x4f>
c0010907:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001090b:	5a                   	pop    edx
c001090c:	5b                   	pop    ebx
c001090d:	5e                   	pop    esi
c001090e:	e9 3b fd ff ff       	jmp    c001064e <VgaText::updateCursor()>
c0010913:	58                   	pop    eax
c0010914:	5b                   	pop    ebx
c0010915:	5e                   	pop    esi
c0010916:	c3                   	ret    
c0010917:	90                   	nop

c0010918 <VgaText::updateRAMUsageDisplay(int)>:
c0010918:	56                   	push   esi
c0010919:	8b 35 00 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de00
c001091f:	53                   	push   ebx
c0010920:	bb 0a 00 00 00       	mov    ebx,0xa
c0010925:	6a 0f                	push   0xf
c0010927:	6a 00                	push   0x0
c0010929:	e8 2a fe ff ff       	call   c0010758 <VgaText::combineColours(unsigned char, unsigned char)>
c001092e:	5a                   	pop    edx
c001092f:	59                   	pop    ecx
c0010930:	0f b6 c8             	movzx  ecx,al
c0010933:	51                   	push   ecx
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	99                   	cdq    
c0010939:	f7 fb                	idiv   ebx
c001093b:	89 d3                	mov    ebx,edx
c001093d:	83 c0 30             	add    eax,0x30
c0010940:	83 c3 30             	add    ebx,0x30
c0010943:	0f be c0             	movsx  eax,al
c0010946:	0f b6 db             	movzx  ebx,bl
c0010949:	50                   	push   eax
c001094a:	e8 af fe ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c001094f:	5a                   	pop    edx
c0010950:	5a                   	pop    edx
c0010951:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010958:	51                   	push   ecx
c0010959:	53                   	push   ebx
c001095a:	e8 9f fe ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c001095f:	5b                   	pop    ebx
c0010960:	5a                   	pop    edx
c0010961:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010968:	51                   	push   ecx
c0010969:	6a 25                	push   0x25
c001096b:	e8 8e fe ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010970:	59                   	pop    ecx
c0010971:	5b                   	pop    ebx
c0010972:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010979:	5b                   	pop    ebx
c001097a:	5e                   	pop    esi
c001097b:	c3                   	ret    

c001097c <VgaText::updateDiskUsage()>:
c001097c:	55                   	push   ebp
c001097d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010982:	57                   	push   edi
c0010983:	8b 3d 00 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de00
c0010989:	56                   	push   esi
c001098a:	53                   	push   ebx
c001098b:	6a 0f                	push   0xf
c001098d:	6a 00                	push   0x0
c001098f:	e8 c4 fd ff ff       	call   c0010758 <VgaText::combineColours(unsigned char, unsigned char)>
c0010994:	5a                   	pop    edx
c0010995:	0f b6 d8             	movzx  ebx,al
c0010998:	59                   	pop    ecx
c0010999:	8b 35 28 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033228
c001099f:	53                   	push   ebx
c00109a0:	b9 0a 00 00 00       	mov    ecx,0xa
c00109a5:	89 f0                	mov    eax,esi
c00109a7:	99                   	cdq    
c00109a8:	f7 fd                	idiv   ebp
c00109aa:	99                   	cdq    
c00109ab:	f7 f9                	idiv   ecx
c00109ad:	8d 42 30             	lea    eax,[edx+0x30]
c00109b0:	0f b6 c0             	movzx  eax,al
c00109b3:	50                   	push   eax
c00109b4:	e8 45 fe ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c00109b9:	5d                   	pop    ebp
c00109ba:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109bf:	5a                   	pop    edx
c00109c0:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109c4:	53                   	push   ebx
c00109c5:	89 f0                	mov    eax,esi
c00109c7:	99                   	cdq    
c00109c8:	f7 fd                	idiv   ebp
c00109ca:	99                   	cdq    
c00109cb:	f7 f9                	idiv   ecx
c00109cd:	8d 42 30             	lea    eax,[edx+0x30]
c00109d0:	0f b6 c0             	movzx  eax,al
c00109d3:	50                   	push   eax
c00109d4:	e8 25 fe ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c00109d9:	5d                   	pop    ebp
c00109da:	bd 64 00 00 00       	mov    ebp,0x64
c00109df:	5a                   	pop    edx
c00109e0:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109e7:	53                   	push   ebx
c00109e8:	89 f0                	mov    eax,esi
c00109ea:	99                   	cdq    
c00109eb:	f7 fd                	idiv   ebp
c00109ed:	99                   	cdq    
c00109ee:	f7 f9                	idiv   ecx
c00109f0:	8d 42 30             	lea    eax,[edx+0x30]
c00109f3:	0f b6 c0             	movzx  eax,al
c00109f6:	50                   	push   eax
c00109f7:	e8 02 fe ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c00109fc:	5d                   	pop    ebp
c00109fd:	5a                   	pop    edx
c00109fe:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a05:	53                   	push   ebx
c0010a06:	89 f0                	mov    eax,esi
c0010a08:	99                   	cdq    
c0010a09:	f7 f9                	idiv   ecx
c0010a0b:	89 d6                	mov    esi,edx
c0010a0d:	99                   	cdq    
c0010a0e:	f7 f9                	idiv   ecx
c0010a10:	8d 42 30             	lea    eax,[edx+0x30]
c0010a13:	0f b6 c0             	movzx  eax,al
c0010a16:	50                   	push   eax
c0010a17:	e8 e2 fd ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1c:	5d                   	pop    ebp
c0010a1d:	5a                   	pop    edx
c0010a1e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a25:	53                   	push   ebx
c0010a26:	8d 46 30             	lea    eax,[esi+0x30]
c0010a29:	0f b6 f0             	movzx  esi,al
c0010a2c:	56                   	push   esi
c0010a2d:	e8 cc fd ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010a32:	5e                   	pop    esi
c0010a33:	8b 35 24 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033224
c0010a39:	5d                   	pop    ebp
c0010a3a:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a41:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a46:	53                   	push   ebx
c0010a47:	89 f0                	mov    eax,esi
c0010a49:	99                   	cdq    
c0010a4a:	f7 fd                	idiv   ebp
c0010a4c:	99                   	cdq    
c0010a4d:	f7 f9                	idiv   ecx
c0010a4f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a52:	0f b6 c0             	movzx  eax,al
c0010a55:	50                   	push   eax
c0010a56:	e8 a3 fd ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010a5b:	5a                   	pop    edx
c0010a5c:	5d                   	pop    ebp
c0010a5d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a64:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a69:	53                   	push   ebx
c0010a6a:	89 f0                	mov    eax,esi
c0010a6c:	99                   	cdq    
c0010a6d:	f7 fd                	idiv   ebp
c0010a6f:	99                   	cdq    
c0010a70:	f7 f9                	idiv   ecx
c0010a72:	8d 42 30             	lea    eax,[edx+0x30]
c0010a75:	0f b6 c0             	movzx  eax,al
c0010a78:	50                   	push   eax
c0010a79:	e8 80 fd ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7e:	5a                   	pop    edx
c0010a7f:	5d                   	pop    ebp
c0010a80:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a87:	bd 64 00 00 00       	mov    ebp,0x64
c0010a8c:	53                   	push   ebx
c0010a8d:	89 f0                	mov    eax,esi
c0010a8f:	99                   	cdq    
c0010a90:	f7 fd                	idiv   ebp
c0010a92:	99                   	cdq    
c0010a93:	f7 f9                	idiv   ecx
c0010a95:	83 c2 30             	add    edx,0x30
c0010a98:	0f b6 d2             	movzx  edx,dl
c0010a9b:	52                   	push   edx
c0010a9c:	e8 5d fd ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa1:	5a                   	pop    edx
c0010aa2:	5d                   	pop    ebp
c0010aa3:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aaa:	53                   	push   ebx
c0010aab:	89 f0                	mov    eax,esi
c0010aad:	99                   	cdq    
c0010aae:	f7 f9                	idiv   ecx
c0010ab0:	89 d6                	mov    esi,edx
c0010ab2:	99                   	cdq    
c0010ab3:	f7 f9                	idiv   ecx
c0010ab5:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab8:	0f b6 c0             	movzx  eax,al
c0010abb:	50                   	push   eax
c0010abc:	e8 3d fd ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac1:	5a                   	pop    edx
c0010ac2:	59                   	pop    ecx
c0010ac3:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010aca:	53                   	push   ebx
c0010acb:	8d 46 30             	lea    eax,[esi+0x30]
c0010ace:	0f b6 f0             	movzx  esi,al
c0010ad1:	56                   	push   esi
c0010ad2:	e8 27 fd ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad7:	5b                   	pop    ebx
c0010ad8:	5e                   	pop    esi
c0010ad9:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ae0:	5b                   	pop    ebx
c0010ae1:	5e                   	pop    esi
c0010ae2:	5f                   	pop    edi
c0010ae3:	5d                   	pop    ebp
c0010ae4:	c3                   	ret    
c0010ae5:	90                   	nop

c0010ae6 <VgaText::updateTitle()>:
c0010ae6:	53                   	push   ebx
c0010ae7:	31 c0                	xor    eax,eax
c0010ae9:	83 ec 58             	sub    esp,0x58
c0010aec:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010af0:	89 e1                	mov    ecx,esp
c0010af2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010af6:	40                   	inc    eax
c0010af7:	83 f8 50             	cmp    eax,0x50
c0010afa:	75 f6                	jne    c0010af2 <VgaText::updateTitle()+0xc>
c0010afc:	31 c0                	xor    eax,eax
c0010afe:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b05:	84 db                	test   bl,bl
c0010b07:	74 06                	je     c0010b0f <VgaText::updateTitle()+0x29>
c0010b09:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b0c:	40                   	inc    eax
c0010b0d:	eb ef                	jmp    c0010afe <VgaText::updateTitle()+0x18>
c0010b0f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b12:	85 c0                	test   eax,eax
c0010b14:	74 09                	je     c0010b1f <VgaText::updateTitle()+0x39>
c0010b16:	53                   	push   ebx
c0010b17:	53                   	push   ebx
c0010b18:	51                   	push   ecx
c0010b19:	52                   	push   edx
c0010b1a:	ff d0                	call   eax
c0010b1c:	83 c4 10             	add    esp,0x10
c0010b1f:	e8 58 fe ff ff       	call   c001097c <VgaText::updateDiskUsage()>
c0010b24:	83 c4 58             	add    esp,0x58
c0010b27:	5b                   	pop    ebx
c0010b28:	c3                   	ret    
c0010b29:	90                   	nop

c0010b2a <VgaText::setTitleTextColour(VgaColour)>:
c0010b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b32:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b35:	eb af                	jmp    c0010ae6 <VgaText::updateTitle()>
c0010b37:	90                   	nop

c0010b38 <VgaText::setTitleColour(VgaColour)>:
c0010b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b40:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b43:	eb a1                	jmp    c0010ae6 <VgaText::updateTitle()>
c0010b45:	90                   	nop

c0010b46 <VgaText::setTitle(char*)>:
c0010b46:	53                   	push   ebx
c0010b47:	83 ec 10             	sub    esp,0x10
c0010b4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b52:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b58:	50                   	push   eax
c0010b59:	e8 ca fc fe ff       	call   c0000828 <strcpy>
c0010b5e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b62:	83 c4 18             	add    esp,0x18
c0010b65:	5b                   	pop    ebx
c0010b66:	e9 7b ff ff ff       	jmp    c0010ae6 <VgaText::updateTitle()>
c0010b6b:	90                   	nop

c0010b6c <VgaText::decrementCursor(bool)>:
c0010b6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b74:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b77:	85 c0                	test   eax,eax
c0010b79:	74 04                	je     c0010b7f <VgaText::decrementCursor(bool)+0x13>
c0010b7b:	48                   	dec    eax
c0010b7c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b7f:	84 c9                	test   cl,cl
c0010b81:	74 09                	je     c0010b8c <VgaText::decrementCursor(bool)+0x20>
c0010b83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b87:	e9 c2 fa ff ff       	jmp    c001064e <VgaText::updateCursor()>
c0010b8c:	c3                   	ret    
c0010b8d:	90                   	nop

c0010b8e <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b8e:	53                   	push   ebx
c0010b8f:	83 ec 08             	sub    esp,0x8
c0010b92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010ba2:	3c 07                	cmp    al,0x7
c0010ba4:	75 2a                	jne    c0010bd0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010ba6:	a1 58 f0 02 c0       	mov    eax,ds:0xc002f058
c0010bab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bb3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bbb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bc7:	83 c4 08             	add    esp,0x8
c0010bca:	5b                   	pop    ebx
c0010bcb:	e9 b4 30 00 00       	jmp    c0013c84 <Buzzer::beep(int, int, bool)>
c0010bd0:	3c 0d                	cmp    al,0xd
c0010bd2:	75 09                	jne    c0010bdd <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010bd4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bdb:	eb 2c                	jmp    c0010c09 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010bdd:	3c 0a                	cmp    al,0xa
c0010bdf:	75 31                	jne    c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010be1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010be4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010beb:	8d 50 01             	lea    edx,[eax+0x1]
c0010bee:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bf1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bf4:	75 0f                	jne    c0010c05 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bf6:	83 ec 0c             	sub    esp,0xc
c0010bf9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bfc:	53                   	push   ebx
c0010bfd:	e8 68 fb ff ff       	call   c001076a <VgaText::scrollScreen()>
c0010c02:	83 c4 10             	add    esp,0x10
c0010c05:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c09:	83 c4 08             	add    esp,0x8
c0010c0c:	5b                   	pop    ebx
c0010c0d:	e9 3c fa ff ff       	jmp    c001064e <VgaText::updateCursor()>
c0010c12:	3c 08                	cmp    al,0x8
c0010c14:	75 25                	jne    c0010c3b <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c16:	50                   	push   eax
c0010c17:	50                   	push   eax
c0010c18:	6a 01                	push   0x1
c0010c1a:	53                   	push   ebx
c0010c1b:	e8 4c ff ff ff       	call   c0010b6c <VgaText::decrementCursor(bool)>
c0010c20:	5a                   	pop    edx
c0010c21:	59                   	pop    ecx
c0010c22:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c25:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c28:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c2e:	6a 20                	push   0x20
c0010c30:	53                   	push   ebx
c0010c31:	e8 da fb ff ff       	call   c0010810 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c36:	83 c4 28             	add    esp,0x28
c0010c39:	5b                   	pop    ebx
c0010c3a:	c3                   	ret    
c0010c3b:	83 ec 08             	sub    esp,0x8
c0010c3e:	0f be c0             	movsx  eax,al
c0010c41:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c44:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c47:	51                   	push   ecx
c0010c48:	52                   	push   edx
c0010c49:	50                   	push   eax
c0010c4a:	53                   	push   ebx
c0010c4b:	e8 c0 fb ff ff       	call   c0010810 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c50:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c54:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c5c:	83 c4 28             	add    esp,0x28
c0010c5f:	5b                   	pop    ebx
c0010c60:	e9 5f fc ff ff       	jmp    c00108c4 <VgaText::incrementCursor(bool)>
c0010c65:	90                   	nop

c0010c66 <VgaText::isShowingCursor()>:
c0010c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c6a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c6d:	c3                   	ret    

c0010c6e <VgaText::isBlinkDisabled()>:
c0010c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c72:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c75:	83 f0 01             	xor    eax,0x1
c0010c78:	c3                   	ret    
c0010c79:	90                   	nop

c0010c7a <VgaText::setCursorHeight(int)>:
c0010c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c82:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c85:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c8d:	e9 d2 f9 ff ff       	jmp    c0010664 <VgaText::showCursor(bool)>

c0010c92 <VgaText::getCursorHeight()>:
c0010c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c96:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c99:	c3                   	ret    

c0010c9a <setActiveTerminal(VgaText*)>:
c0010c9a:	53                   	push   ebx
c0010c9b:	83 ec 08             	sub    esp,0x8
c0010c9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ca2:	85 db                	test   ebx,ebx
c0010ca4:	75 11                	jne    c0010cb7 <setActiveTerminal(VgaText*)+0x1d>
c0010ca6:	c7 44 24 10 0c ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad0c
c0010cae:	83 c4 08             	add    esp,0x8
c0010cb1:	5b                   	pop    ebx
c0010cb2:	e9 ae 9b 00 00       	jmp    c001a865 <Krnl::panic(char const*)>
c0010cb7:	50                   	push   eax
c0010cb8:	50                   	push   eax
c0010cb9:	53                   	push   ebx
c0010cba:	68 1a ad 02 c0       	push   0xc002ad1a
c0010cbf:	e8 b3 21 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0010cc4:	a1 a4 ef 02 c0       	mov    eax,ds:0xc002efa4
c0010cc9:	83 c4 10             	add    esp,0x10
c0010ccc:	85 c0                	test   eax,eax
c0010cce:	74 0c                	je     c0010cdc <setActiveTerminal(VgaText*)+0x42>
c0010cd0:	83 ec 0c             	sub    esp,0xc
c0010cd3:	50                   	push   eax
c0010cd4:	e8 75 f9 ff ff       	call   c001064e <VgaText::updateCursor()>
c0010cd9:	83 c4 10             	add    esp,0x10
c0010cdc:	89 1d a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,ebx
c0010ce2:	51                   	push   ecx
c0010ce3:	51                   	push   ecx
c0010ce4:	53                   	push   ebx
c0010ce5:	68 32 ad 02 c0       	push   0xc002ad32
c0010cea:	e8 88 21 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0010cef:	83 c4 0c             	add    esp,0xc
c0010cf2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cf5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cf8:	53                   	push   ebx
c0010cf9:	e8 7e fb ff ff       	call   c001087c <VgaText::setCursor(int, int)>
c0010cfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d01:	e8 68 ff ff ff       	call   c0010c6e <VgaText::isBlinkDisabled()>
c0010d06:	5a                   	pop    edx
c0010d07:	0f b6 c0             	movzx  eax,al
c0010d0a:	59                   	pop    ecx
c0010d0b:	50                   	push   eax
c0010d0c:	53                   	push   ebx
c0010d0d:	e8 5e f9 ff ff       	call   c0010670 <VgaText::disableBlink(bool)>
c0010d12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d15:	e8 78 ff ff ff       	call   c0010c92 <VgaText::getCursorHeight()>
c0010d1a:	5a                   	pop    edx
c0010d1b:	59                   	pop    ecx
c0010d1c:	50                   	push   eax
c0010d1d:	53                   	push   ebx
c0010d1e:	e8 57 ff ff ff       	call   c0010c7a <VgaText::setCursorHeight(int)>
c0010d23:	83 c4 10             	add    esp,0x10
c0010d26:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d2a:	75 07                	jne    c0010d33 <setActiveTerminal(VgaText*)+0x99>
c0010d2c:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d33:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d37:	83 c4 08             	add    esp,0x8
c0010d3a:	5b                   	pop    ebx
c0010d3b:	e9 c0 f8 ff ff       	jmp    c0010600 <VgaText::load()>

c0010d40 <doTerminalCycle()>:
c0010d40:	83 ec 18             	sub    esp,0x18
c0010d43:	a1 a0 ef 02 c0       	mov    eax,ds:0xc002efa0
c0010d48:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d4b:	50                   	push   eax
c0010d4c:	a3 a0 ef 02 c0       	mov    ds:0xc002efa0,eax
c0010d51:	e8 44 ff ff ff       	call   c0010c9a <setActiveTerminal(VgaText*)>
c0010d56:	83 c4 1c             	add    esp,0x1c
c0010d59:	c3                   	ret    

c0010d5a <VgaText::doUpdate()>:
c0010d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5e:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d61:	85 c0                	test   eax,eax
c0010d63:	74 02                	je     c0010d67 <VgaText::doUpdate()+0xd>
c0010d65:	ff e0                	jmp    eax
c0010d67:	c3                   	ret    

c0010d68 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d68:	55                   	push   ebp
c0010d69:	31 ed                	xor    ebp,ebp
c0010d6b:	57                   	push   edi
c0010d6c:	56                   	push   esi
c0010d6d:	53                   	push   ebx
c0010d6e:	83 ec 1c             	sub    esp,0x1c
c0010d71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d75:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d7a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d81:	50                   	push   eax
c0010d82:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d87:	50                   	push   eax
c0010d88:	e8 cb f9 ff ff       	call   c0010758 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d8d:	59                   	pop    ecx
c0010d8e:	0f b6 c0             	movzx  eax,al
c0010d91:	5e                   	pop    esi
c0010d92:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d9b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010da2:	0f b7 f6             	movzx  esi,si
c0010da5:	01 f6                	add    esi,esi
c0010da7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010daa:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010dad:	84 c0                	test   al,al
c0010daf:	0f 84 fd 00 00 00    	je     c0010eb2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010db5:	3c 0d                	cmp    al,0xd
c0010db7:	75 0c                	jne    c0010dc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010db9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010dc0:	e9 e7 00 00 00       	jmp    c0010eac <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dc5:	3c 0a                	cmp    al,0xa
c0010dc7:	75 47                	jne    c0010e10 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010dc9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010dcc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010dd3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dd6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010dd9:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010ddc:	75 0f                	jne    c0010ded <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010dde:	83 ec 0c             	sub    esp,0xc
c0010de1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010de4:	53                   	push   ebx
c0010de5:	e8 80 f9 ff ff       	call   c001076a <VgaText::scrollScreen()>
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	83 ec 0c             	sub    esp,0xc
c0010df0:	31 ed                	xor    ebp,ebp
c0010df2:	53                   	push   ebx
c0010df3:	e8 56 f8 ff ff       	call   c001064e <VgaText::updateCursor()>
c0010df8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dfd:	83 c4 10             	add    esp,0x10
c0010e00:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e03:	0f b7 f6             	movzx  esi,si
c0010e06:	01 f6                	add    esi,esi
c0010e08:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e0b:	e9 9c 00 00 00       	jmp    c0010eac <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e10:	3c 08                	cmp    al,0x8
c0010e12:	75 35                	jne    c0010e49 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e14:	56                   	push   esi
c0010e15:	56                   	push   esi
c0010e16:	6a 01                	push   0x1
c0010e18:	53                   	push   ebx
c0010e19:	e8 4e fd ff ff       	call   c0010b6c <VgaText::decrementCursor(bool)>
c0010e1e:	58                   	pop    eax
c0010e1f:	5a                   	pop    edx
c0010e20:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e26:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e29:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e2c:	6a 20                	push   0x20
c0010e2e:	53                   	push   ebx
c0010e2f:	e8 dc f9 ff ff       	call   c0010810 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e34:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e39:	83 c4 20             	add    esp,0x20
c0010e3c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e3f:	0f b7 f6             	movzx  esi,si
c0010e42:	01 f6                	add    esi,esi
c0010e44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e47:	eb 63                	jmp    c0010eac <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e49:	51                   	push   ecx
c0010e4a:	51                   	push   ecx
c0010e4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e4f:	50                   	push   eax
c0010e50:	e8 a9 f9 ff ff       	call   c00107fe <VgaText::combineCharAndColour(char, unsigned char)>
c0010e55:	83 c4 10             	add    esp,0x10
c0010e58:	66 89 06             	mov    WORD PTR [esi],ax
c0010e5b:	39 1d a4 ef 02 c0    	cmp    DWORD PTR ds:0xc002efa4,ebx
c0010e61:	75 21                	jne    c0010e84 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e63:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e66:	85 c0                	test   eax,eax
c0010e68:	74 1a                	je     c0010e84 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e6a:	52                   	push   edx
c0010e6b:	52                   	push   edx
c0010e6c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e6f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e7a:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e7d:	51                   	push   ecx
c0010e7e:	53                   	push   ebx
c0010e7f:	ff d0                	call   eax
c0010e81:	83 c4 20             	add    esp,0x20
c0010e84:	83 c6 02             	add    esi,0x2
c0010e87:	50                   	push   eax
c0010e88:	50                   	push   eax
c0010e89:	6a 00                	push   0x0
c0010e8b:	53                   	push   ebx
c0010e8c:	e8 33 fa ff ff       	call   c00108c4 <VgaText::incrementCursor(bool)>
c0010e91:	83 c4 10             	add    esp,0x10
c0010e94:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e98:	75 0d                	jne    c0010ea7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e9a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e9f:	0f b7 f6             	movzx  esi,si
c0010ea2:	01 f6                	add    esi,esi
c0010ea4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ea7:	bd 01 00 00 00       	mov    ebp,0x1
c0010eac:	47                   	inc    edi
c0010ead:	e9 f8 fe ff ff       	jmp    c0010daa <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010eb2:	83 ec 0c             	sub    esp,0xc
c0010eb5:	53                   	push   ebx
c0010eb6:	e8 93 f7 ff ff       	call   c001064e <VgaText::updateCursor()>
c0010ebb:	83 c4 10             	add    esp,0x10
c0010ebe:	89 e8                	mov    eax,ebp
c0010ec0:	84 c0                	test   al,al
c0010ec2:	74 0c                	je     c0010ed0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010ec4:	83 ec 0c             	sub    esp,0xc
c0010ec7:	53                   	push   ebx
c0010ec8:	e8 8d fe ff ff       	call   c0010d5a <VgaText::doUpdate()>
c0010ecd:	83 c4 10             	add    esp,0x10
c0010ed0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ed7:	83 c4 1c             	add    esp,0x1c
c0010eda:	5b                   	pop    ebx
c0010edb:	5e                   	pop    esi
c0010edc:	5f                   	pop    edi
c0010edd:	5d                   	pop    ebp
c0010ede:	c3                   	ret    
c0010edf:	90                   	nop

c0010ee0 <VgaText::clearScreen()>:
c0010ee0:	57                   	push   edi
c0010ee1:	56                   	push   esi
c0010ee2:	31 f6                	xor    esi,esi
c0010ee4:	53                   	push   ebx
c0010ee5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ee9:	52                   	push   edx
c0010eea:	6a 00                	push   0x0
c0010eec:	6a 00                	push   0x0
c0010eee:	53                   	push   ebx
c0010eef:	e8 88 f9 ff ff       	call   c001087c <VgaText::setCursor(int, int)>
c0010ef4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f01:	7e 20                	jle    c0010f23 <VgaText::clearScreen()+0x43>
c0010f03:	31 ff                	xor    edi,edi
c0010f05:	50                   	push   eax
c0010f06:	50                   	push   eax
c0010f07:	56                   	push   esi
c0010f08:	57                   	push   edi
c0010f09:	47                   	inc    edi
c0010f0a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f0d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f10:	6a 20                	push   0x20
c0010f12:	53                   	push   ebx
c0010f13:	e8 f8 f8 ff ff       	call   c0010810 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f18:	83 c4 20             	add    esp,0x20
c0010f1b:	83 ff 50             	cmp    edi,0x50
c0010f1e:	75 e5                	jne    c0010f05 <VgaText::clearScreen()+0x25>
c0010f20:	46                   	inc    esi
c0010f21:	eb db                	jmp    c0010efe <VgaText::clearScreen()+0x1e>
c0010f23:	83 ec 0c             	sub    esp,0xc
c0010f26:	53                   	push   ebx
c0010f27:	e8 2e fe ff ff       	call   c0010d5a <VgaText::doUpdate()>
c0010f2c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	5b                   	pop    ebx
c0010f37:	5e                   	pop    esi
c0010f38:	5f                   	pop    edi
c0010f39:	c3                   	ret    

c0010f3a <VgaText::putchar(char)>:
c0010f3a:	56                   	push   esi
c0010f3b:	53                   	push   ebx
c0010f3c:	83 ec 14             	sub    esp,0x14
c0010f3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f47:	3c 5b                	cmp    al,0x5b
c0010f49:	75 18                	jne    c0010f63 <VgaText::putchar(char)+0x29>
c0010f4b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f4f:	74 1f                	je     c0010f70 <VgaText::putchar(char)+0x36>
c0010f51:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f57:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f5e:	e9 bd 00 00 00       	jmp    c0011020 <VgaText::putchar(char)+0xe6>
c0010f63:	3c 1b                	cmp    al,0x1b
c0010f65:	75 09                	jne    c0010f70 <VgaText::putchar(char)+0x36>
c0010f67:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f6b:	e9 b0 00 00 00       	jmp    c0011020 <VgaText::putchar(char)+0xe6>
c0010f70:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f73:	84 c9                	test   cl,cl
c0010f75:	0f 84 92 00 00 00    	je     c001100d <VgaText::putchar(char)+0xd3>
c0010f7b:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f7e:	80 fa 3e             	cmp    dl,0x3e
c0010f81:	77 76                	ja     c0010ff9 <VgaText::putchar(char)+0xbf>
c0010f83:	3c 6d                	cmp    al,0x6d
c0010f85:	75 47                	jne    c0010fce <VgaText::putchar(char)+0x94>
c0010f87:	31 f6                	xor    esi,esi
c0010f89:	31 d2                	xor    edx,edx
c0010f8b:	31 c0                	xor    eax,eax
c0010f8d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f90:	7e 2d                	jle    c0010fbf <VgaText::putchar(char)+0x85>
c0010f92:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f97:	80 fa 3b             	cmp    dl,0x3b
c0010f9a:	75 17                	jne    c0010fb3 <VgaText::putchar(char)+0x79>
c0010f9c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010fa0:	50                   	push   eax
c0010fa1:	53                   	push   ebx
c0010fa2:	e8 fd f6 ff ff       	call   c00106a4 <VgaText::doANSI_SGR(int)>
c0010fa7:	59                   	pop    ecx
c0010fa8:	31 d2                	xor    edx,edx
c0010faa:	58                   	pop    eax
c0010fab:	31 c0                	xor    eax,eax
c0010fad:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010fb1:	eb 09                	jmp    c0010fbc <VgaText::putchar(char)+0x82>
c0010fb3:	6b c0 0a             	imul   eax,eax,0xa
c0010fb6:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010fba:	88 ca                	mov    dl,cl
c0010fbc:	46                   	inc    esi
c0010fbd:	eb ce                	jmp    c0010f8d <VgaText::putchar(char)+0x53>
c0010fbf:	84 d2                	test   dl,dl
c0010fc1:	74 2e                	je     c0010ff1 <VgaText::putchar(char)+0xb7>
c0010fc3:	50                   	push   eax
c0010fc4:	53                   	push   ebx
c0010fc5:	e8 da f6 ff ff       	call   c00106a4 <VgaText::doANSI_SGR(int)>
c0010fca:	58                   	pop    eax
c0010fcb:	5a                   	pop    edx
c0010fcc:	eb 23                	jmp    c0010ff1 <VgaText::putchar(char)+0xb7>
c0010fce:	3c 4a                	cmp    al,0x4a
c0010fd0:	75 1f                	jne    c0010ff1 <VgaText::putchar(char)+0xb7>
c0010fd2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010fd6:	75 19                	jne    c0010ff1 <VgaText::putchar(char)+0xb7>
c0010fd8:	83 ec 0c             	sub    esp,0xc
c0010fdb:	53                   	push   ebx
c0010fdc:	e8 ff fe ff ff       	call   c0010ee0 <VgaText::clearScreen()>
c0010fe1:	83 c4 0c             	add    esp,0xc
c0010fe4:	6a 00                	push   0x0
c0010fe6:	6a 00                	push   0x0
c0010fe8:	53                   	push   ebx
c0010fe9:	e8 8e f8 ff ff       	call   c001087c <VgaText::setCursor(int, int)>
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010ff7:	eb 27                	jmp    c0011020 <VgaText::putchar(char)+0xe6>
c0010ff9:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010ffc:	83 fa 0e             	cmp    edx,0xe
c0010fff:	7f 1f                	jg     c0011020 <VgaText::putchar(char)+0xe6>
c0011001:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011004:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011007:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c001100b:	eb 13                	jmp    c0011020 <VgaText::putchar(char)+0xe6>
c001100d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011010:	0f be c0             	movsx  eax,al
c0011013:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011016:	50                   	push   eax
c0011017:	53                   	push   ebx
c0011018:	e8 71 fb ff ff       	call   c0010b8e <VgaText::putchar(char, VgaColour, VgaColour)>
c001101d:	83 c4 10             	add    esp,0x10
c0011020:	83 c4 14             	add    esp,0x14
c0011023:	5b                   	pop    ebx
c0011024:	5e                   	pop    esi
c0011025:	c3                   	ret    

c0011026 <VgaText::puts(char const*)>:
c0011026:	53                   	push   ebx
c0011027:	83 ec 08             	sub    esp,0x8
c001102a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001102e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011031:	84 c0                	test   al,al
c0011033:	74 12                	je     c0011047 <VgaText::puts(char const*)+0x21>
c0011035:	43                   	inc    ebx
c0011036:	51                   	push   ecx
c0011037:	51                   	push   ecx
c0011038:	50                   	push   eax
c0011039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103d:	e8 f8 fe ff ff       	call   c0010f3a <VgaText::putchar(char)>
c0011042:	83 c4 10             	add    esp,0x10
c0011045:	eb e7                	jmp    c001102e <VgaText::puts(char const*)+0x8>
c0011047:	83 c4 08             	add    esp,0x8
c001104a:	5b                   	pop    ebx
c001104b:	c3                   	ret    

c001104c <VgaText::putx(unsigned int)>:
c001104c:	57                   	push   edi
c001104d:	b9 11 00 00 00       	mov    ecx,0x11
c0011052:	56                   	push   esi
c0011053:	be 4e ad 02 c0       	mov    esi,0xc002ad4e
c0011058:	53                   	push   ebx
c0011059:	83 ec 20             	sub    esp,0x20
c001105c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011060:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011064:	fc                   	cld    
c0011065:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011067:	be 08 00 00 00       	mov    esi,0x8
c001106c:	50                   	push   eax
c001106d:	50                   	push   eax
c001106e:	89 d8                	mov    eax,ebx
c0011070:	c1 e3 04             	shl    ebx,0x4
c0011073:	c1 e8 1c             	shr    eax,0x1c
c0011076:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001107b:	50                   	push   eax
c001107c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011080:	e8 b5 fe ff ff       	call   c0010f3a <VgaText::putchar(char)>
c0011085:	83 c4 10             	add    esp,0x10
c0011088:	4e                   	dec    esi
c0011089:	75 e1                	jne    c001106c <VgaText::putx(unsigned int)+0x20>
c001108b:	83 c4 20             	add    esp,0x20
c001108e:	5b                   	pop    ebx
c001108f:	5e                   	pop    esi
c0011090:	5f                   	pop    edi
c0011091:	c3                   	ret    

c0011092 <VgaText::VgaText(char const*)>:
c0011092:	57                   	push   edi
c0011093:	56                   	push   esi
c0011094:	53                   	push   ebx
c0011095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011099:	83 ec 08             	sub    esp,0x8
c001109c:	6a 00                	push   0x0
c001109e:	50                   	push   eax
c001109f:	e8 8a 05 00 00       	call   c001162e <UnixFile::UnixFile(int)>
c00110a4:	83 c4 10             	add    esp,0x10
c00110a7:	ba b4 ad 02 c0       	mov    edx,0xc002adb4
c00110ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b0:	89 10                	mov    DWORD PTR [eax],edx
c00110b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00110bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00110c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00110d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00110d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110dc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011108:	8d 50 60             	lea    edx,[eax+0x60]
c001110b:	bb 80 ef 02 c0       	mov    ebx,0xc002ef80
c0011110:	b8 08 00 00 00       	mov    eax,0x8
c0011115:	fc                   	cld    
c0011116:	89 d7                	mov    edi,edx
c0011118:	89 de                	mov    esi,ebx
c001111a:	89 c1                	mov    ecx,eax
c001111c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011122:	05 82 00 00 00       	add    eax,0x82
c0011127:	83 ec 08             	sub    esp,0x8
c001112a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112e:	50                   	push   eax
c001112f:	e8 f4 f6 fe ff       	call   c0000828 <strcpy>
c0011134:	83 c4 10             	add    esp,0x10
c0011137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113b:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011142:	83 ec 0c             	sub    esp,0xc
c0011145:	6a 01                	push   0x1
c0011147:	e8 25 09 00 00       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	89 c2                	mov    edx,eax
c0011151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011155:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011158:	8b 1d 50 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f050
c001115e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011162:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011165:	89 c6                	mov    esi,eax
c0011167:	e8 c0 ed ff ff       	call   c000ff2c <Phys::allocatePage()>
c001116c:	6a 05                	push   0x5
c001116e:	56                   	push   esi
c001116f:	50                   	push   eax
c0011170:	53                   	push   ebx
c0011171:	e8 32 11 00 00       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011176:	83 c4 10             	add    esp,0x10
c0011179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011180:	83 ec 04             	sub    esp,0x4
c0011183:	68 00 0f 00 00       	push   0xf00
c0011188:	6a 00                	push   0x0
c001118a:	50                   	push   eax
c001118b:	e8 dc f5 fe ff       	call   c000076c <memset>
c0011190:	83 c4 10             	add    esp,0x10
c0011193:	83 ec 04             	sub    esp,0x4
c0011196:	6a 00                	push   0x0
c0011198:	6a 07                	push   0x7
c001119a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001119e:	e8 95 f5 ff ff       	call   c0010738 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	83 ec 08             	sub    esp,0x8
c00111a9:	6a 02                	push   0x2
c00111ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111af:	e8 c6 fa ff ff       	call   c0010c7a <VgaText::setCursorHeight(int)>
c00111b4:	83 c4 10             	add    esp,0x10
c00111b7:	83 ec 04             	sub    esp,0x4
c00111ba:	6a 00                	push   0x0
c00111bc:	6a 00                	push   0x0
c00111be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111c2:	e8 b5 f6 ff ff       	call   c001087c <VgaText::setCursor(int, int)>
c00111c7:	83 c4 10             	add    esp,0x10
c00111ca:	83 ec 08             	sub    esp,0x8
c00111cd:	6a 01                	push   0x1
c00111cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d3:	e8 8c f4 ff ff       	call   c0010664 <VgaText::showCursor(bool)>
c00111d8:	83 c4 10             	add    esp,0x10
c00111db:	83 ec 08             	sub    esp,0x8
c00111de:	6a 01                	push   0x1
c00111e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111e4:	e8 87 f4 ff ff       	call   c0010670 <VgaText::disableBlink(bool)>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	83 ec 0c             	sub    esp,0xc
c00111ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111f3:	e8 e8 fc ff ff       	call   c0010ee0 <VgaText::clearScreen()>
c00111f8:	83 c4 10             	add    esp,0x10
c00111fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ff:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011207:	05 02 01 00 00       	add    eax,0x102
c001120c:	83 ec 04             	sub    esp,0x4
c001120f:	68 96 00 00 00       	push   0x96
c0011214:	6a 00                	push   0x0
c0011216:	50                   	push   eax
c0011217:	e8 50 f5 fe ff       	call   c000076c <memset>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011223:	05 98 01 00 00       	add    eax,0x198
c0011228:	83 ec 04             	sub    esp,0x4
c001122b:	68 2c 01 00 00       	push   0x12c
c0011230:	6a 00                	push   0x0
c0011232:	50                   	push   eax
c0011233:	e8 34 f5 fe ff       	call   c000076c <memset>
c0011238:	83 c4 10             	add    esp,0x10
c001123b:	90                   	nop
c001123c:	5b                   	pop    ebx
c001123d:	5e                   	pop    esi
c001123e:	5f                   	pop    edi
c001123f:	c3                   	ret    

c0011240 <VgaText::receiveKey(unsigned char)>:
c0011240:	55                   	push   ebp
c0011241:	57                   	push   edi
c0011242:	56                   	push   esi
c0011243:	53                   	push   ebx
c0011244:	83 ec 1c             	sub    esp,0x1c
c0011247:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001124b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001124f:	84 db                	test   bl,bl
c0011251:	0f 84 c9 00 00 00    	je     c0011320 <VgaText::receiveKey(unsigned char)+0xe0>
c0011257:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c001125d:	80 fb 08             	cmp    bl,0x8
c0011260:	75 2c                	jne    c001128e <VgaText::receiveKey(unsigned char)+0x4e>
c0011262:	83 ec 0c             	sub    esp,0xc
c0011265:	57                   	push   edi
c0011266:	e8 1d f5 fe ff       	call   c0000788 <strlen>
c001126b:	83 c4 10             	add    esp,0x10
c001126e:	85 c0                	test   eax,eax
c0011270:	74 41                	je     c00112b3 <VgaText::receiveKey(unsigned char)+0x73>
c0011272:	50                   	push   eax
c0011273:	50                   	push   eax
c0011274:	6a 08                	push   0x8
c0011276:	56                   	push   esi
c0011277:	e8 be fc ff ff       	call   c0010f3a <VgaText::putchar(char)>
c001127c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001127f:	e8 04 f5 fe ff       	call   c0000788 <strlen>
c0011284:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001128c:	eb 22                	jmp    c00112b0 <VgaText::receiveKey(unsigned char)+0x70>
c001128e:	0f be c3             	movsx  eax,bl
c0011291:	52                   	push   edx
c0011292:	52                   	push   edx
c0011293:	50                   	push   eax
c0011294:	56                   	push   esi
c0011295:	e8 a0 fc ff ff       	call   c0010f3a <VgaText::putchar(char)>
c001129a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001129e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00112a3:	59                   	pop    ecx
c00112a4:	5d                   	pop    ebp
c00112a5:	8d 44 24 16          	lea    eax,[esp+0x16]
c00112a9:	50                   	push   eax
c00112aa:	57                   	push   edi
c00112ab:	e8 b8 f6 fe ff       	call   c0000968 <strcat>
c00112b0:	83 c4 10             	add    esp,0x10
c00112b3:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c00112ba:	75 05                	jne    c00112c1 <VgaText::receiveKey(unsigned char)+0x81>
c00112bc:	80 fb 0a             	cmp    bl,0xa
c00112bf:	75 53                	jne    c0011314 <VgaText::receiveKey(unsigned char)+0xd4>
c00112c1:	83 ec 0c             	sub    esp,0xc
c00112c4:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c00112ca:	53                   	push   ebx
c00112cb:	e8 b8 f4 fe ff       	call   c0000788 <strlen>
c00112d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112d3:	89 c5                	mov    ebp,eax
c00112d5:	e8 ae f4 fe ff       	call   c0000788 <strlen>
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112e1:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112e6:	76 10                	jbe    c00112f8 <VgaText::receiveKey(unsigned char)+0xb8>
c00112e8:	83 ec 0c             	sub    esp,0xc
c00112eb:	68 5f ad 02 c0       	push   0xc002ad5f
c00112f0:	e8 70 95 00 00       	call   c001a865 <Krnl::panic(char const*)>
c00112f5:	83 c4 10             	add    esp,0x10
c00112f8:	50                   	push   eax
c00112f9:	50                   	push   eax
c00112fa:	57                   	push   edi
c00112fb:	53                   	push   ebx
c00112fc:	e8 67 f6 fe ff       	call   c0000968 <strcat>
c0011301:	83 c4 0c             	add    esp,0xc
c0011304:	68 96 00 00 00       	push   0x96
c0011309:	6a 00                	push   0x0
c001130b:	57                   	push   edi
c001130c:	e8 5b f4 fe ff       	call   c000076c <memset>
c0011311:	83 c4 10             	add    esp,0x10
c0011314:	83 ec 0c             	sub    esp,0xc
c0011317:	56                   	push   esi
c0011318:	e8 3d fa ff ff       	call   c0010d5a <VgaText::doUpdate()>
c001131d:	83 c4 10             	add    esp,0x10
c0011320:	83 c4 1c             	add    esp,0x1c
c0011323:	5b                   	pop    ebx
c0011324:	5e                   	pop    esi
c0011325:	5f                   	pop    edi
c0011326:	5d                   	pop    ebp
c0011327:	c3                   	ret    

c0011328 <VgaText::write(unsigned long long, void*, int*)>:
c0011328:	55                   	push   ebp
c0011329:	57                   	push   edi
c001132a:	56                   	push   esi
c001132b:	53                   	push   ebx
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011333:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011337:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001133b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011342:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011345:	39 eb                	cmp    ebx,ebp
c0011347:	74 13                	je     c001135c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011349:	43                   	inc    ebx
c001134a:	50                   	push   eax
c001134b:	50                   	push   eax
c001134c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011350:	50                   	push   eax
c0011351:	56                   	push   esi
c0011352:	e8 e3 fb ff ff       	call   c0010f3a <VgaText::putchar(char)>
c0011357:	83 c4 10             	add    esp,0x10
c001135a:	eb e9                	jmp    c0011345 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001135c:	83 ec 0c             	sub    esp,0xc
c001135f:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011366:	56                   	push   esi
c0011367:	e8 ee f9 ff ff       	call   c0010d5a <VgaText::doUpdate()>
c001136c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011370:	89 38                	mov    DWORD PTR [eax],edi
c0011372:	83 c4 1c             	add    esp,0x1c
c0011375:	31 c0                	xor    eax,eax
c0011377:	5b                   	pop    ebx
c0011378:	5e                   	pop    esi
c0011379:	5f                   	pop    edi
c001137a:	5d                   	pop    ebp
c001137b:	c3                   	ret    

c001137c <newTerminal(char*)>:
c001137c:	83 ec 28             	sub    esp,0x28
c001137f:	68 c4 02 00 00       	push   0x2c4
c0011384:	e8 37 e5 ff ff       	call   c000f8c0 <malloc>
c0011389:	5a                   	pop    edx
c001138a:	59                   	pop    ecx
c001138b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001138f:	50                   	push   eax
c0011390:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011394:	e8 f9 fc ff ff       	call   c0011092 <VgaText::VgaText(char const*)>
c0011399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001139d:	83 c4 2c             	add    esp,0x2c
c00113a0:	c3                   	ret    
c00113a1:	90                   	nop

c00113a2 <TSS::TSS()>:
c00113a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113ad:	90                   	nop
c00113ae:	c3                   	ret    
c00113af:	90                   	nop

c00113b0 <TSS::setESP(unsigned long)>:
c00113b0:	55                   	push   ebp
c00113b1:	89 e5                	mov    ebp,esp
c00113b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113b9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113bf:	90                   	nop
c00113c0:	5d                   	pop    ebp
c00113c1:	c3                   	ret    

c00113c2 <TSS::flush()>:
c00113c2:	55                   	push   ebp
c00113c3:	89 e5                	mov    ebp,esp
c00113c5:	83 ec 10             	sub    esp,0x10
c00113c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00113cd:	83 c8 03             	or     eax,0x3
c00113d0:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00113d4:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113d8:	66 89 d0             	mov    ax,dx
c00113db:	0f 00 d8             	ltr    ax
c00113de:	90                   	nop
c00113df:	c9                   	leave  
c00113e0:	c3                   	ret    
c00113e1:	90                   	nop

c00113e2 <TSS::setup(unsigned long, unsigned long)>:
c00113e2:	55                   	push   ebp
c00113e3:	89 e5                	mov    ebp,esp
c00113e5:	83 ec 18             	sub    esp,0x18
c00113e8:	83 ec 0c             	sub    esp,0xc
c00113eb:	6a 68                	push   0x68
c00113ed:	e8 ce e4 ff ff       	call   c000f8c0 <malloc>
c00113f2:	83 c4 10             	add    esp,0x10
c00113f5:	89 c2                	mov    edx,eax
c00113f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011403:	83 ec 04             	sub    esp,0x4
c0011406:	6a 68                	push   0x68
c0011408:	6a 00                	push   0x0
c001140a:	50                   	push   eax
c001140b:	e8 5c f3 fe ff       	call   c000076c <memset>
c0011410:	83 c4 10             	add    esp,0x10
c0011413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011419:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001141f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011422:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011425:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001142b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011431:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011434:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011449:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001144f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011455:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001145b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011461:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011476:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011479:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001147f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011485:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011488:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001148b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011491:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011494:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001149d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00114a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114aa:	0f 20 da             	mov    edx,cr3
c00114ad:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00114b0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00114b3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00114b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bc:	83 ec 08             	sub    esp,0x8
c00114bf:	50                   	push   eax
c00114c0:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114c3:	50                   	push   eax
c00114c4:	e8 d3 db ff ff       	call   c000f09c <GDTEntry::setBase(unsigned int)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	83 ec 08             	sub    esp,0x8
c00114cf:	6a 68                	push   0x68
c00114d1:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114d4:	50                   	push   eax
c00114d5:	e8 de db ff ff       	call   c000f0b8 <GDTEntry::setLimit(unsigned int)>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114e1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114e4:	83 e0 0f             	and    eax,0xf
c00114e7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114ea:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114ed:	83 c8 40             	or     eax,0x40
c00114f0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114f3:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00114f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114fe:	05 78 01 00 00       	add    eax,0x178
c0011503:	83 ec 04             	sub    esp,0x4
c0011506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011509:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001150c:	50                   	push   eax
c001150d:	e8 da db ff ff       	call   c000f0ec <GDT::addEntry(GDTEntry)>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	89 c2                	mov    edx,eax
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	89 10                	mov    DWORD PTR [eax],edx
c001151c:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0011521:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011527:	05 78 01 00 00       	add    eax,0x178
c001152c:	83 ec 0c             	sub    esp,0xc
c001152f:	50                   	push   eax
c0011530:	e8 fb db ff ff       	call   c000f130 <GDT::flush()>
c0011535:	83 c4 10             	add    esp,0x10
c0011538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153b:	8b 00                	mov    eax,DWORD PTR [eax]
c001153d:	83 ec 08             	sub    esp,0x8
c0011540:	50                   	push   eax
c0011541:	68 c8 ad 02 c0       	push   0xc002adc8
c0011546:	e8 2c 19 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001154b:	83 c4 10             	add    esp,0x10
c001154e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011551:	8b 00                	mov    eax,DWORD PTR [eax]
c0011553:	c9                   	leave  
c0011554:	c3                   	ret    
c0011555:	90                   	nop

c0011556 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001155e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011561:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011566:	75 08                	jne    c0011570 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011568:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001156e:	eb 38                	jmp    c00115a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011570:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011575:	75 17                	jne    c001158e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001157c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001157f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011585:	8b 10                	mov    edx,DWORD PTR [eax]
c0011587:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001158b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001158e:	89 c1                	mov    ecx,eax
c0011590:	83 e1 fd             	and    ecx,0xfffffffd
c0011593:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011599:	74 cd                	je     c0011568 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001159b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115a0:	83 e0 ef             	and    eax,0xffffffef
c00115a3:	83 f8 08             	cmp    eax,0x8
c00115a6:	76 c0                	jbe    c0011568 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115a8:	31 c0                	xor    eax,eax
c00115aa:	c3                   	ret    
c00115ab:	90                   	nop

c00115ac <ReservedFilename::isAtty()>:
c00115ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00115b3:	31 c0                	xor    eax,eax
c00115b5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00115bb:	74 09                	je     c00115c6 <ReservedFilename::isAtty()+0x1a>
c00115bd:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00115c3:	0f 94 c0             	sete   al
c00115c6:	c3                   	ret    
c00115c7:	90                   	nop

c00115c8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00115c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115d7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115dc:	75 08                	jne    c00115e6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115de:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115e4:	eb 3d                	jmp    c0011623 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115e6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115eb:	75 17                	jne    c0011604 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00115fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011601:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011604:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011609:	75 04                	jne    c001160f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001160b:	89 0a                	mov    DWORD PTR [edx],ecx
c001160d:	eb 14                	jmp    c0011623 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001160f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011614:	74 c8                	je     c00115de <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011616:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001161b:	83 e0 ef             	and    eax,0xffffffef
c001161e:	83 f8 08             	cmp    eax,0x8
c0011621:	76 bb                	jbe    c00115de <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011623:	31 c0                	xor    eax,eax
c0011625:	c3                   	ret    

c0011626 <UnixFile::getFileDescriptor()>:
c0011626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162d:	c3                   	ret    

c001162e <UnixFile::UnixFile(int)>:
c001162e:	53                   	push   ebx
c001162f:	83 ec 28             	sub    esp,0x28
c0011632:	ba b4 ae 02 c0       	mov    edx,0xc002aeb4
c0011637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001163b:	89 10                	mov    DWORD PTR [eax],edx
c001163d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011645:	0f 8f 8c 01 00 00    	jg     c00117d7 <UnixFile::UnixFile(int)+0x1a9>
c001164b:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c0011650:	8d 50 01             	lea    edx,[eax+0x1]
c0011653:	89 15 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,edx
c0011659:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001165d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011660:	83 ec 08             	sub    esp,0x8
c0011663:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011667:	68 38 f0 02 c0       	push   0xc002f038
c001166c:	e8 4b 79 01 00       	call   c0028fbc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	a0 34 f0 02 c0       	mov    al,ds:0xc002f034
c0011679:	83 f0 01             	xor    eax,0x1
c001167c:	84 c0                	test   al,al
c001167e:	0f 84 54 01 00 00    	je     c00117d8 <UnixFile::UnixFile(int)+0x1aa>
c0011684:	c6 05 34 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f034,0x1
c001168b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011693:	83 ec 0c             	sub    esp,0xc
c0011696:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001169a:	e8 21 e2 ff ff       	call   c000f8c0 <malloc>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	89 c3                	mov    ebx,eax
c00116a4:	83 ec 08             	sub    esp,0x8
c00116a7:	68 03 ff ff 0f       	push   0xfffff03
c00116ac:	53                   	push   ebx
c00116ad:	e8 2c 01 00 00       	call   c00117de <ReservedFilename::ReservedFilename(int)>
c00116b2:	83 c4 10             	add    esp,0x10
c00116b5:	89 1d 2c f0 02 c0    	mov    DWORD PTR ds:0xc002f02c,ebx
c00116bb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00116c3:	83 ec 0c             	sub    esp,0xc
c00116c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ca:	e8 f1 e1 ff ff       	call   c000f8c0 <malloc>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	89 c3                	mov    ebx,eax
c00116d4:	83 ec 08             	sub    esp,0x8
c00116d7:	68 01 ff ff 0f       	push   0xfffff01
c00116dc:	53                   	push   ebx
c00116dd:	e8 fc 00 00 00       	call   c00117de <ReservedFilename::ReservedFilename(int)>
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	89 1d 30 f0 02 c0    	mov    DWORD PTR ds:0xc002f030,ebx
c00116eb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116f3:	83 ec 0c             	sub    esp,0xc
c00116f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116fa:	e8 c1 e1 ff ff       	call   c000f8c0 <malloc>
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	89 c3                	mov    ebx,eax
c0011704:	83 ec 08             	sub    esp,0x8
c0011707:	68 00 ff ff 0f       	push   0xfffff00
c001170c:	53                   	push   ebx
c001170d:	e8 cc 00 00 00       	call   c00117de <ReservedFilename::ReservedFilename(int)>
c0011712:	83 c4 10             	add    esp,0x10
c0011715:	89 1d 24 f0 02 c0    	mov    DWORD PTR ds:0xc002f024,ebx
c001171b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011723:	83 ec 0c             	sub    esp,0xc
c0011726:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001172a:	e8 91 e1 ff ff       	call   c000f8c0 <malloc>
c001172f:	83 c4 10             	add    esp,0x10
c0011732:	89 c3                	mov    ebx,eax
c0011734:	83 ec 08             	sub    esp,0x8
c0011737:	68 02 ff ff 0f       	push   0xfffff02
c001173c:	53                   	push   ebx
c001173d:	e8 9c 00 00 00       	call   c00117de <ReservedFilename::ReservedFilename(int)>
c0011742:	83 c4 10             	add    esp,0x10
c0011745:	89 1d 28 f0 02 c0    	mov    DWORD PTR ds:0xc002f028,ebx
c001174b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011753:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011758:	7f 7e                	jg     c00117d8 <UnixFile::UnixFile(int)+0x1aa>
c001175a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011769:	e8 52 e1 ff ff       	call   c000f8c0 <malloc>
c001176e:	83 c4 10             	add    esp,0x10
c0011771:	89 c3                	mov    ebx,eax
c0011773:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011777:	05 10 ff ff 0f       	add    eax,0xfffff10
c001177c:	83 ec 08             	sub    esp,0x8
c001177f:	50                   	push   eax
c0011780:	53                   	push   ebx
c0011781:	e8 58 00 00 00       	call   c00117de <ReservedFilename::ReservedFilename(int)>
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001178d:	89 1c 85 00 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1000],ebx
c0011794:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001179c:	83 ec 0c             	sub    esp,0xc
c001179f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a3:	e8 18 e1 ff ff       	call   c000f8c0 <malloc>
c00117a8:	83 c4 10             	add    esp,0x10
c00117ab:	89 c3                	mov    ebx,eax
c00117ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117b1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00117b6:	83 ec 08             	sub    esp,0x8
c00117b9:	50                   	push   eax
c00117ba:	53                   	push   ebx
c00117bb:	e8 1e 00 00 00       	call   c00117de <ReservedFilename::ReservedFilename(int)>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117c7:	89 1c 85 c0 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1040],ebx
c00117ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117d2:	e9 7c ff ff ff       	jmp    c0011753 <UnixFile::UnixFile(int)+0x125>
c00117d7:	90                   	nop
c00117d8:	83 c4 28             	add    esp,0x28
c00117db:	5b                   	pop    ebx
c00117dc:	c3                   	ret    
c00117dd:	90                   	nop

c00117de <ReservedFilename::ReservedFilename(int)>:
c00117de:	83 ec 0c             	sub    esp,0xc
c00117e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e5:	83 ec 08             	sub    esp,0x8
c00117e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ec:	50                   	push   eax
c00117ed:	e8 3c fe ff ff       	call   c001162e <UnixFile::UnixFile(int)>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	ba d0 ae 02 c0       	mov    edx,0xc002aed0
c00117fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117fe:	89 10                	mov    DWORD PTR [eax],edx
c0011800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011804:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011808:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001180b:	90                   	nop
c001180c:	83 c4 0c             	add    esp,0xc
c001180f:	c3                   	ret    

c0011810 <UnixFile::~UnixFile()>:
c0011810:	83 ec 1c             	sub    esp,0x1c
c0011813:	ba b4 ae 02 c0       	mov    edx,0xc002aeb4
c0011818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001181c:	89 10                	mov    DWORD PTR [eax],edx
c001181e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011822:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011825:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001182a:	7f 73                	jg     c001189f <UnixFile::~UnixFile()+0x8f>
c001182c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011834:	83 ec 0c             	sub    esp,0xc
c0011837:	68 38 f0 02 c0       	push   0xc002f038
c001183c:	e8 4f 78 01 00       	call   c0029090 <LinkedList<UnixFile>::getFirstElement()>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011848:	83 ec 0c             	sub    esp,0xc
c001184b:	68 38 f0 02 c0       	push   0xc002f038
c0011850:	e8 43 78 01 00       	call   c0029098 <LinkedList<UnixFile>::removeFirst()>
c0011855:	83 c4 10             	add    esp,0x10
c0011858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001185c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011860:	74 40                	je     c00118a2 <UnixFile::~UnixFile()+0x92>
c0011862:	83 ec 08             	sub    esp,0x8
c0011865:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011869:	68 38 f0 02 c0       	push   0xc002f038
c001186e:	e8 49 77 01 00       	call   c0028fbc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011873:	83 c4 10             	add    esp,0x10
c0011876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001187a:	8d 50 01             	lea    edx,[eax+0x1]
c001187d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011881:	3d 88 13 00 00       	cmp    eax,0x1388
c0011886:	0f 94 c0             	sete   al
c0011889:	84 c0                	test   al,al
c001188b:	74 a7                	je     c0011834 <UnixFile::~UnixFile()+0x24>
c001188d:	83 ec 0c             	sub    esp,0xc
c0011890:	68 8c ae 02 c0       	push   0xc002ae8c
c0011895:	e8 cb 8f 00 00       	call   c001a865 <Krnl::panic(char const*)>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	eb 95                	jmp    c0011834 <UnixFile::~UnixFile()+0x24>
c001189f:	90                   	nop
c00118a0:	eb 01                	jmp    c00118a3 <UnixFile::~UnixFile()+0x93>
c00118a2:	90                   	nop
c00118a3:	90                   	nop
c00118a4:	83 c4 1c             	add    esp,0x1c
c00118a7:	c3                   	ret    

c00118a8 <UnixFile::~UnixFile()>:
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	83 ec 0c             	sub    esp,0xc
c00118ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b2:	e8 59 ff ff ff       	call   c0011810 <UnixFile::~UnixFile()>
c00118b7:	83 c4 10             	add    esp,0x10
c00118ba:	83 ec 08             	sub    esp,0x8
c00118bd:	6a 0c                	push   0xc
c00118bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c3:	e8 cf 14 00 00       	call   c0012d97 <operator delete(void*, unsigned long)>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	83 c4 0c             	add    esp,0xc
c00118ce:	c3                   	ret    
c00118cf:	90                   	nop

c00118d0 <ReservedFilename::~ReservedFilename()>:
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	ba d0 ae 02 c0       	mov    edx,0xc002aed0
c00118d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118dc:	89 10                	mov    DWORD PTR [eax],edx
c00118de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e2:	83 ec 0c             	sub    esp,0xc
c00118e5:	50                   	push   eax
c00118e6:	e8 25 ff ff ff       	call   c0011810 <UnixFile::~UnixFile()>
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	90                   	nop
c00118ef:	83 c4 0c             	add    esp,0xc
c00118f2:	c3                   	ret    
c00118f3:	90                   	nop

c00118f4 <ReservedFilename::~ReservedFilename()>:
c00118f4:	83 ec 0c             	sub    esp,0xc
c00118f7:	83 ec 0c             	sub    esp,0xc
c00118fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118fe:	e8 cd ff ff ff       	call   c00118d0 <ReservedFilename::~ReservedFilename()>
c0011903:	83 c4 10             	add    esp,0x10
c0011906:	83 ec 08             	sub    esp,0x8
c0011909:	6a 0c                	push   0xc
c001190b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001190f:	e8 83 14 00 00       	call   c0012d97 <operator delete(void*, unsigned long)>
c0011914:	83 c4 10             	add    esp,0x10
c0011917:	83 c4 0c             	add    esp,0xc
c001191a:	c3                   	ret    

c001191b <getFromFileDescriptor(int)>:
c001191b:	53                   	push   ebx
c001191c:	83 ec 08             	sub    esp,0x8
c001191f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011923:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011929:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001192f:	7f 2c                	jg     c001195d <getFromFileDescriptor(int)+0x42>
c0011931:	83 ec 0c             	sub    esp,0xc
c0011934:	68 38 f0 02 c0       	push   0xc002f038
c0011939:	e8 52 77 01 00       	call   c0029090 <LinkedList<UnixFile>::getFirstElement()>
c001193e:	83 c4 10             	add    esp,0x10
c0011941:	85 c0                	test   eax,eax
c0011943:	75 04                	jne    c0011949 <getFromFileDescriptor(int)+0x2e>
c0011945:	31 c0                	xor    eax,eax
c0011947:	eb 6e                	jmp    c00119b7 <getFromFileDescriptor(int)+0x9c>
c0011949:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001194c:	74 69                	je     c00119b7 <getFromFileDescriptor(int)+0x9c>
c001194e:	52                   	push   edx
c001194f:	52                   	push   edx
c0011950:	50                   	push   eax
c0011951:	68 38 f0 02 c0       	push   0xc002f038
c0011956:	e8 df 77 01 00       	call   c002913a <LinkedList<UnixFile>::getNext(UnixFile*)>
c001195b:	eb e1                	jmp    c001193e <getFromFileDescriptor(int)+0x23>
c001195d:	a1 2c f0 02 c0       	mov    eax,ds:0xc002f02c
c0011962:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011968:	74 4d                	je     c00119b7 <getFromFileDescriptor(int)+0x9c>
c001196a:	a1 30 f0 02 c0       	mov    eax,ds:0xc002f030
c001196f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011975:	74 40                	je     c00119b7 <getFromFileDescriptor(int)+0x9c>
c0011977:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001197c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011982:	74 33                	je     c00119b7 <getFromFileDescriptor(int)+0x9c>
c0011984:	a1 24 f0 02 c0       	mov    eax,ds:0xc002f024
c0011989:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001198f:	74 26                	je     c00119b7 <getFromFileDescriptor(int)+0x9c>
c0011991:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011997:	83 f8 08             	cmp    eax,0x8
c001199a:	77 09                	ja     c00119a5 <getFromFileDescriptor(int)+0x8a>
c001199c:	8b 04 85 00 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1000]
c00119a3:	eb 12                	jmp    c00119b7 <getFromFileDescriptor(int)+0x9c>
c00119a5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00119ab:	83 fb 08             	cmp    ebx,0x8
c00119ae:	77 95                	ja     c0011945 <getFromFileDescriptor(int)+0x2a>
c00119b0:	8b 04 9d c0 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1040]
c00119b7:	83 c4 08             	add    esp,0x8
c00119ba:	5b                   	pop    ebx
c00119bb:	c3                   	ret    

c00119bc <__static_initialization_and_destruction_0(int, int)>:
c00119bc:	83 ec 0c             	sub    esp,0xc
c00119bf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00119c4:	75 34                	jne    c00119fa <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119c6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00119ce:	75 2a                	jne    c00119fa <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119d0:	83 ec 0c             	sub    esp,0xc
c00119d3:	68 38 f0 02 c0       	push   0xc002f038
c00119d8:	e8 87 75 01 00       	call   c0028f64 <LinkedList<UnixFile>::LinkedList()>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	83 ec 04             	sub    esp,0x4
c00119e3:	68 f0 dd 02 c0       	push   0xc002ddf0
c00119e8:	68 38 f0 02 c0       	push   0xc002f038
c00119ed:	68 62 8f 02 c0       	push   0xc0028f62
c00119f2:	e8 1a 13 00 00       	call   c0012d11 <__cxa_atexit>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	90                   	nop
c00119fb:	83 c4 0c             	add    esp,0xc
c00119fe:	c3                   	ret    

c00119ff <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119ff:	83 ec 0c             	sub    esp,0xc
c0011a02:	83 ec 08             	sub    esp,0x8
c0011a05:	68 ff ff 00 00       	push   0xffff
c0011a0a:	6a 01                	push   0x1
c0011a0c:	e8 ab ff ff ff       	call   c00119bc <__static_initialization_and_destruction_0(int, int)>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	83 c4 0c             	add    esp,0xc
c0011a17:	c3                   	ret    

c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a18:	53                   	push   ebx
c0011a19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a1d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a21:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a27:	89 c8                	mov    eax,ecx
c0011a29:	d1 e8                	shr    eax,1
c0011a2b:	03 05 68 de 02 c0    	add    eax,DWORD PTR ds:0xc002de68
c0011a31:	83 e1 01             	and    ecx,0x1
c0011a34:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a36:	75 09                	jne    c0011a41 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a38:	83 e2 f0             	and    edx,0xfffffff0
c0011a3b:	09 da                	or     edx,ebx
c0011a3d:	88 10                	mov    BYTE PTR [eax],dl
c0011a3f:	5b                   	pop    ebx
c0011a40:	c3                   	ret    
c0011a41:	c1 e3 04             	shl    ebx,0x4
c0011a44:	83 e2 0f             	and    edx,0xf
c0011a47:	09 da                	or     edx,ebx
c0011a49:	88 10                	mov    BYTE PTR [eax],dl
c0011a4b:	5b                   	pop    ebx
c0011a4c:	c3                   	ret    

c0011a4d <Virt::getPageState(unsigned long)>:
c0011a4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a51:	8b 0d 68 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de68
c0011a57:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a5d:	89 d0                	mov    eax,edx
c0011a5f:	d1 e8                	shr    eax,1
c0011a61:	83 e2 01             	and    edx,0x1
c0011a64:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a67:	75 04                	jne    c0011a6d <Virt::getPageState(unsigned long)+0x20>
c0011a69:	83 e0 0f             	and    eax,0xf
c0011a6c:	c3                   	ret    
c0011a6d:	c0 e8 04             	shr    al,0x4
c0011a70:	c3                   	ret    

c0011a71 <Virt::allocateKernelVirtualPages(int)>:
c0011a71:	55                   	push   ebp
c0011a72:	31 ed                	xor    ebp,ebp
c0011a74:	57                   	push   edi
c0011a75:	56                   	push   esi
c0011a76:	53                   	push   ebx
c0011a77:	31 db                	xor    ebx,ebx
c0011a79:	83 ec 1c             	sub    esp,0x1c
c0011a7c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a80:	8b 3d 64 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de64
c0011a86:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a8b:	57                   	push   edi
c0011a8c:	e8 bc ff ff ff       	call   c0011a4d <Virt::getPageState(unsigned long)>
c0011a91:	5a                   	pop    edx
c0011a92:	84 c0                	test   al,al
c0011a94:	75 3a                	jne    c0011ad0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a96:	85 db                	test   ebx,ebx
c0011a98:	75 02                	jne    c0011a9c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a9a:	89 fd                	mov    ebp,edi
c0011a9c:	43                   	inc    ebx
c0011a9d:	39 f3                	cmp    ebx,esi
c0011a9f:	74 5a                	je     c0011afb <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011aa1:	47                   	inc    edi
c0011aa2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011aa8:	76 31                	jbe    c0011adb <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011aaa:	c7 05 64 de 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002de64,0xc8000
c0011ab4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011ab9:	75 28                	jne    c0011ae3 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011abb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011ac0:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011ac5:	57                   	push   edi
c0011ac6:	e8 82 ff ff ff       	call   c0011a4d <Virt::getPageState(unsigned long)>
c0011acb:	5a                   	pop    edx
c0011acc:	84 c0                	test   al,al
c0011ace:	74 c6                	je     c0011a96 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011ad0:	31 db                	xor    ebx,ebx
c0011ad2:	47                   	inc    edi
c0011ad3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ad9:	77 cf                	ja     c0011aaa <Virt::allocateKernelVirtualPages(int)+0x39>
c0011adb:	89 3d 64 de 02 c0    	mov    DWORD PTR ds:0xc002de64,edi
c0011ae1:	eb a8                	jmp    c0011a8b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ae3:	83 ec 0c             	sub    esp,0xc
c0011ae6:	68 e4 ae 02 c0       	push   0xc002aee4
c0011aeb:	e8 75 8d 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0011af0:	8b 3d 64 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de64
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	eb 90                	jmp    c0011a8b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011afb:	89 2d 64 de 02 c0    	mov    DWORD PTR ds:0xc002de64,ebp
c0011b01:	4b                   	dec    ebx
c0011b02:	74 5f                	je     c0011b63 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b04:	85 f6                	test   esi,esi
c0011b06:	74 3d                	je     c0011b45 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b08:	89 e8                	mov    eax,ebp
c0011b0a:	31 db                	xor    ebx,ebx
c0011b0c:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b0f:	eb 14                	jmp    c0011b25 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b11:	6a 01                	push   0x1
c0011b13:	43                   	inc    ebx
c0011b14:	50                   	push   eax
c0011b15:	e8 fe fe ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b1a:	58                   	pop    eax
c0011b1b:	39 f3                	cmp    ebx,esi
c0011b1d:	5a                   	pop    edx
c0011b1e:	74 25                	je     c0011b45 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b20:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c0011b25:	8d 50 01             	lea    edx,[eax+0x1]
c0011b28:	85 db                	test   ebx,ebx
c0011b2a:	89 15 64 de 02 c0    	mov    DWORD PTR ds:0xc002de64,edx
c0011b30:	74 20                	je     c0011b52 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b32:	39 df                	cmp    edi,ebx
c0011b34:	75 db                	jne    c0011b11 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b36:	6a 03                	push   0x3
c0011b38:	43                   	inc    ebx
c0011b39:	50                   	push   eax
c0011b3a:	e8 d9 fe ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b3f:	59                   	pop    ecx
c0011b40:	39 f3                	cmp    ebx,esi
c0011b42:	58                   	pop    eax
c0011b43:	75 db                	jne    c0011b20 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b45:	83 c4 1c             	add    esp,0x1c
c0011b48:	89 e8                	mov    eax,ebp
c0011b4a:	5b                   	pop    ebx
c0011b4b:	c1 e0 0c             	shl    eax,0xc
c0011b4e:	5e                   	pop    esi
c0011b4f:	5f                   	pop    edi
c0011b50:	5d                   	pop    ebp
c0011b51:	c3                   	ret    
c0011b52:	6a 02                	push   0x2
c0011b54:	bb 01 00 00 00       	mov    ebx,0x1
c0011b59:	50                   	push   eax
c0011b5a:	e8 b9 fe ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b5f:	58                   	pop    eax
c0011b60:	5a                   	pop    edx
c0011b61:	eb bd                	jmp    c0011b20 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b63:	6a 04                	push   0x4
c0011b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b68:	55                   	push   ebp
c0011b69:	a3 64 de 02 c0       	mov    ds:0xc002de64,eax
c0011b6e:	e8 a5 fe ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b73:	59                   	pop    ecx
c0011b74:	89 e8                	mov    eax,ebp
c0011b76:	5b                   	pop    ebx
c0011b77:	c1 e0 0c             	shl    eax,0xc
c0011b7a:	83 c4 1c             	add    esp,0x1c
c0011b7d:	5b                   	pop    ebx
c0011b7e:	5e                   	pop    esi
c0011b7f:	5f                   	pop    edi
c0011b80:	5d                   	pop    ebp
c0011b81:	c3                   	ret    

c0011b82 <Virt::freeSwapfilePage(unsigned long)>:
c0011b82:	53                   	push   ebx
c0011b83:	8b 15 4c f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f04c
c0011b89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b8d:	b8 01 00 00 00       	mov    eax,0x1
c0011b92:	89 cb                	mov    ebx,ecx
c0011b94:	d3 e0                	shl    eax,cl
c0011b96:	c1 eb 05             	shr    ebx,0x5
c0011b99:	f7 d0                	not    eax
c0011b9b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b9e:	5b                   	pop    ebx
c0011b9f:	c3                   	ret    

c0011ba0 <Virt::swapIDToSector(unsigned long)>:
c0011ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ba4:	0f af 05 6c de 02 c0 	imul   eax,DWORD PTR ds:0xc002de6c
c0011bab:	03 05 74 de 02 c0    	add    eax,DWORD PTR ds:0xc002de74
c0011bb1:	c3                   	ret    

c0011bb2 <Virt::allocateSwapfilePage()>:
c0011bb2:	55                   	push   ebp
c0011bb3:	31 d2                	xor    edx,edx
c0011bb5:	57                   	push   edi
c0011bb6:	56                   	push   esi
c0011bb7:	53                   	push   ebx
c0011bb8:	83 ec 0c             	sub    esp,0xc
c0011bbb:	8b 0d 6c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de6c
c0011bc1:	a1 70 de 02 c0       	mov    eax,ds:0xc002de70
c0011bc6:	f7 f1                	div    ecx
c0011bc8:	39 0d 70 de 02 c0    	cmp    DWORD PTR ds:0xc002de70,ecx
c0011bce:	72 2d                	jb     c0011bfd <Virt::allocateSwapfilePage()+0x4b>
c0011bd0:	8b 35 4c f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f04c
c0011bd6:	8b 16                	mov    edx,DWORD PTR [esi]
c0011bd8:	f6 c2 01             	test   dl,0x1
c0011bdb:	74 3c                	je     c0011c19 <Virt::allocateSwapfilePage()+0x67>
c0011bdd:	31 c9                	xor    ecx,ecx
c0011bdf:	bf 01 00 00 00       	mov    edi,0x1
c0011be4:	eb 12                	jmp    c0011bf8 <Virt::allocateSwapfilePage()+0x46>
c0011be6:	89 fd                	mov    ebp,edi
c0011be8:	89 ca                	mov    edx,ecx
c0011bea:	d3 e5                	shl    ebp,cl
c0011bec:	c1 ea 05             	shr    edx,0x5
c0011bef:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bf2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bf4:	85 ea                	test   edx,ebp
c0011bf6:	74 2a                	je     c0011c22 <Virt::allocateSwapfilePage()+0x70>
c0011bf8:	41                   	inc    ecx
c0011bf9:	39 c8                	cmp    eax,ecx
c0011bfb:	77 e9                	ja     c0011be6 <Virt::allocateSwapfilePage()+0x34>
c0011bfd:	83 ec 0c             	sub    esp,0xc
c0011c00:	68 6b b0 02 c0       	push   0xc002b06b
c0011c05:	e8 5b 8c 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0011c0a:	83 c4 10             	add    esp,0x10
c0011c0d:	31 c9                	xor    ecx,ecx
c0011c0f:	83 c4 0c             	add    esp,0xc
c0011c12:	89 c8                	mov    eax,ecx
c0011c14:	5b                   	pop    ebx
c0011c15:	5e                   	pop    esi
c0011c16:	5f                   	pop    edi
c0011c17:	5d                   	pop    ebp
c0011c18:	c3                   	ret    
c0011c19:	89 f3                	mov    ebx,esi
c0011c1b:	bd 01 00 00 00       	mov    ebp,0x1
c0011c20:	31 c9                	xor    ecx,ecx
c0011c22:	09 ea                	or     edx,ebp
c0011c24:	89 c8                	mov    eax,ecx
c0011c26:	89 13                	mov    DWORD PTR [ebx],edx
c0011c28:	83 c4 0c             	add    esp,0xc
c0011c2b:	5b                   	pop    ebx
c0011c2c:	5e                   	pop    esi
c0011c2d:	5f                   	pop    edi
c0011c2e:	5d                   	pop    ebp
c0011c2f:	c3                   	ret    

c0011c30 <Virt::virtualMemorySetup()>:
c0011c30:	53                   	push   ebx
c0011c31:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c36:	83 ec 08             	sub    esp,0x8
c0011c39:	6a 0f                	push   0xf
c0011c3b:	53                   	push   ebx
c0011c3c:	43                   	inc    ebx
c0011c3d:	e8 d6 fd ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c42:	59                   	pop    ecx
c0011c43:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c49:	58                   	pop    eax
c0011c4a:	75 ed                	jne    c0011c39 <Virt::virtualMemorySetup()+0x9>
c0011c4c:	83 ec 08             	sub    esp,0x8
c0011c4f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c54:	68 00 00 00 c8       	push   0xc8000000
c0011c59:	68 82 b0 02 c0       	push   0xc002b082
c0011c5e:	e8 14 12 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0011c63:	58                   	pop    eax
c0011c64:	5a                   	pop    edx
c0011c65:	68 00 f0 ff ef       	push   0xeffff000
c0011c6a:	68 96 b0 02 c0       	push   0xc002b096
c0011c6f:	e8 03 12 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	83 ec 08             	sub    esp,0x8
c0011c7a:	6a 00                	push   0x0
c0011c7c:	53                   	push   ebx
c0011c7d:	43                   	inc    ebx
c0011c7e:	e8 95 fd ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c8c:	75 e9                	jne    c0011c77 <Virt::virtualMemorySetup()+0x47>
c0011c8e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c93:	83 ec 08             	sub    esp,0x8
c0011c96:	6a 0f                	push   0xf
c0011c98:	53                   	push   ebx
c0011c99:	43                   	inc    ebx
c0011c9a:	e8 79 fd ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c9f:	83 c4 10             	add    esp,0x10
c0011ca2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ca8:	75 e9                	jne    c0011c93 <Virt::virtualMemorySetup()+0x63>
c0011caa:	83 c4 08             	add    esp,0x8
c0011cad:	5b                   	pop    ebx
c0011cae:	c3                   	ret    

c0011caf <Virt::swappingSetup()>:
c0011caf:	c3                   	ret    

c0011cb0 <Virt::setupPageSwapping(int)>:
c0011cb0:	57                   	push   edi
c0011cb1:	56                   	push   esi
c0011cb2:	53                   	push   ebx
c0011cb3:	83 ec 1c             	sub    esp,0x1c
c0011cb6:	68 aa b0 02 c0       	push   0xc002b0aa
c0011cbb:	e8 b7 11 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0011cc0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cc7:	e8 f4 db ff ff       	call   c000f8c0 <malloc>
c0011ccc:	83 c4 0c             	add    esp,0xc
c0011ccf:	89 c6                	mov    esi,eax
c0011cd1:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c0011cd7:	68 be b0 02 c0       	push   0xc002b0be
c0011cdc:	50                   	push   eax
c0011cdd:	e8 f4 16 00 00       	call   c00133d6 <File::File(char const*, Process*)>
c0011ce2:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ce5:	e8 c8 18 00 00       	call   c00135b2 <File::unlink()>
c0011cea:	59                   	pop    ecx
c0011ceb:	5b                   	pop    ebx
c0011cec:	6a 12                	push   0x12
c0011cee:	56                   	push   esi
c0011cef:	e8 46 17 00 00       	call   c001343a <File::open(FileOpenMode)>
c0011cf4:	83 c4 10             	add    esp,0x10
c0011cf7:	85 c0                	test   eax,eax
c0011cf9:	0f 85 5b 01 00 00    	jne    c0011e5a <Virt::setupPageSwapping(int)+0x1aa>
c0011cff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d03:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d0b:	c1 e3 08             	shl    ebx,0x8
c0011d0e:	83 ec 0c             	sub    esp,0xc
c0011d11:	68 00 00 01 00       	push   0x10000
c0011d16:	e8 a5 db ff ff       	call   c000f8c0 <malloc>
c0011d1b:	83 c4 0c             	add    esp,0xc
c0011d1e:	89 c7                	mov    edi,eax
c0011d20:	68 00 00 01 00       	push   0x10000
c0011d25:	68 ee 00 00 00       	push   0xee
c0011d2a:	50                   	push   eax
c0011d2b:	e8 3c ea fe ff       	call   c000076c <memset>
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	85 db                	test   ebx,ebx
c0011d35:	79 03                	jns    c0011d3a <Virt::setupPageSwapping(int)+0x8a>
c0011d37:	83 c3 0f             	add    ebx,0xf
c0011d3a:	c1 fb 04             	sar    ebx,0x4
c0011d3d:	4b                   	dec    ebx
c0011d3e:	83 fb ff             	cmp    ebx,0xffffffff
c0011d41:	74 4f                	je     c0011d92 <Virt::setupPageSwapping(int)+0xe2>
c0011d43:	83 ec 0c             	sub    esp,0xc
c0011d46:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d48:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d4c:	52                   	push   edx
c0011d4d:	57                   	push   edi
c0011d4e:	6a 00                	push   0x0
c0011d50:	68 00 00 01 00       	push   0x10000
c0011d55:	56                   	push   esi
c0011d56:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d59:	83 c4 20             	add    esp,0x20
c0011d5c:	85 c0                	test   eax,eax
c0011d5e:	0f 85 e0 00 00 00    	jne    c0011e44 <Virt::setupPageSwapping(int)+0x194>
c0011d64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d68:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d6d:	74 ce                	je     c0011d3d <Virt::setupPageSwapping(int)+0x8d>
c0011d6f:	83 ec 08             	sub    esp,0x8
c0011d72:	4b                   	dec    ebx
c0011d73:	50                   	push   eax
c0011d74:	68 11 b1 02 c0       	push   0xc002b111
c0011d79:	e8 f9 10 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0011d7e:	c7 04 24 1a b1 02 c0 	mov    DWORD PTR [esp],0xc002b11a
c0011d85:	e8 db 8a 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0011d8a:	83 c4 10             	add    esp,0x10
c0011d8d:	83 fb ff             	cmp    ebx,0xffffffff
c0011d90:	75 b1                	jne    c0011d43 <Virt::setupPageSwapping(int)+0x93>
c0011d92:	83 ec 0c             	sub    esp,0xc
c0011d95:	56                   	push   esi
c0011d96:	e8 fd 16 00 00       	call   c0013498 <File::close()>
c0011d9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d9e:	e8 3d db ff ff       	call   c000f8e0 <rfree>
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	85 f6                	test   esi,esi
c0011da8:	74 0c                	je     c0011db6 <Virt::setupPageSwapping(int)+0x106>
c0011daa:	83 ec 0c             	sub    esp,0xc
c0011dad:	8b 06                	mov    eax,DWORD PTR [esi]
c0011daf:	56                   	push   esi
c0011db0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011db3:	83 c4 10             	add    esp,0x10
c0011db6:	83 ec 08             	sub    esp,0x8
c0011db9:	a1 e8 f4 02 c0       	mov    eax,ds:0xc002f4e8
c0011dbe:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011dc4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dc6:	68 be b0 02 c0       	push   0xc002b0be
c0011dcb:	50                   	push   eax
c0011dcc:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011dcf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011dd3:	c6 05 78 de 02 c0 43 	mov    BYTE PTR ds:0xc002de78,0x43
c0011dda:	c1 e2 0b             	shl    edx,0xb
c0011ddd:	a3 74 de 02 c0       	mov    ds:0xc002de74,eax
c0011de2:	89 15 70 de 02 c0    	mov    DWORD PTR ds:0xc002de70,edx
c0011de8:	c7 05 6c de 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002de6c,0x8
c0011df2:	c1 ea 08             	shr    edx,0x8
c0011df5:	89 14 24             	mov    DWORD PTR [esp],edx
c0011df8:	e8 c3 da ff ff       	call   c000f8c0 <malloc>
c0011dfd:	83 c4 0c             	add    esp,0xc
c0011e00:	89 c1                	mov    ecx,eax
c0011e02:	a3 4c f0 02 c0       	mov    ds:0xc002f04c,eax
c0011e07:	31 d2                	xor    edx,edx
c0011e09:	a1 70 de 02 c0       	mov    eax,ds:0xc002de70
c0011e0e:	f7 35 6c de 02 c0    	div    DWORD PTR ds:0xc002de6c
c0011e14:	c1 e8 05             	shr    eax,0x5
c0011e17:	50                   	push   eax
c0011e18:	6a 00                	push   0x0
c0011e1a:	51                   	push   ecx
c0011e1b:	e8 4c e9 fe ff       	call   c000076c <memset>
c0011e20:	58                   	pop    eax
c0011e21:	a1 70 de 02 c0       	mov    eax,ds:0xc002de70
c0011e26:	5a                   	pop    edx
c0011e27:	31 d2                	xor    edx,edx
c0011e29:	f7 35 6c de 02 c0    	div    DWORD PTR ds:0xc002de6c
c0011e2f:	c1 e8 05             	shr    eax,0x5
c0011e32:	50                   	push   eax
c0011e33:	68 20 b1 02 c0       	push   0xc002b120
c0011e38:	e8 3a 10 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0011e3d:	83 c4 20             	add    esp,0x20
c0011e40:	5b                   	pop    ebx
c0011e41:	5e                   	pop    esi
c0011e42:	5f                   	pop    edi
c0011e43:	c3                   	ret    
c0011e44:	83 ec 08             	sub    esp,0x8
c0011e47:	50                   	push   eax
c0011e48:	68 f9 b0 02 c0       	push   0xc002b0f9
c0011e4d:	e8 25 10 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0011e52:	83 c4 10             	add    esp,0x10
c0011e55:	e9 0a ff ff ff       	jmp    c0011d64 <Virt::setupPageSwapping(int)+0xb4>
c0011e5a:	83 ec 08             	sub    esp,0x8
c0011e5d:	50                   	push   eax
c0011e5e:	68 d5 b0 02 c0       	push   0xc002b0d5
c0011e63:	e8 0f 10 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0011e68:	c7 04 24 de b0 02 c0 	mov    DWORD PTR [esp],0xc002b0de
c0011e6f:	e8 f1 89 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0011e74:	83 c4 10             	add    esp,0x10
c0011e77:	e9 83 fe ff ff       	jmp    c0011cff <Virt::setupPageSwapping(int)+0x4f>

c0011e7c <VAS::VAS()>:
c0011e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e8b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e96:	a3 50 f0 02 c0       	mov    ds:0xc002f050,eax
c0011e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e9f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011ea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ea7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011eaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eae:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011eb5:	90                   	nop
c0011eb6:	c3                   	ret    
c0011eb7:	90                   	nop

c0011eb8 <VAS::VAS(VAS*)>:
c0011eb8:	83 ec 0c             	sub    esp,0xc
c0011ebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ebf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ed1:	83 ec 0c             	sub    esp,0xc
c0011ed4:	68 04 af 02 c0       	push   0xc002af04
c0011ed9:	e8 87 89 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0011ede:	83 c4 10             	add    esp,0x10
c0011ee1:	90                   	nop
c0011ee2:	83 c4 0c             	add    esp,0xc
c0011ee5:	c3                   	ret    

c0011ee6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eea:	89 c2                	mov    edx,eax
c0011eec:	c1 e8 0a             	shr    eax,0xa
c0011eef:	c1 ea 16             	shr    edx,0x16
c0011ef2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ef7:	19 c9                	sbb    ecx,ecx
c0011ef9:	c1 e2 0c             	shl    edx,0xc
c0011efc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f02:	25 fc 0f 00 00       	and    eax,0xffc
c0011f07:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f0e:	01 d0                	add    eax,edx
c0011f10:	c3                   	ret    
c0011f11:	90                   	nop

c0011f12 <VAS::getPageTableEntry(unsigned long)>:
c0011f12:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f16:	89 ca                	mov    edx,ecx
c0011f18:	c1 e9 0a             	shr    ecx,0xa
c0011f1b:	c1 ea 16             	shr    edx,0x16
c0011f1e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f24:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f2a:	c1 e0 0c             	shl    eax,0xc
c0011f2d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f30:	c3                   	ret    

c0011f31 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f31:	57                   	push   edi
c0011f32:	56                   	push   esi
c0011f33:	be 01 00 00 00       	mov    esi,0x1
c0011f38:	53                   	push   ebx
c0011f39:	83 ec 10             	sub    esp,0x10
c0011f3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f40:	c1 eb 0c             	shr    ebx,0xc
c0011f43:	eb 3f                	jmp    c0011f84 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f45:	83 ec 08             	sub    esp,0x8
c0011f48:	57                   	push   edi
c0011f49:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c0011f4f:	e8 be ff ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f59:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f5d:	f6 c4 04             	test   ah,0x4
c0011f60:	75 5f                	jne    c0011fc1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f62:	80 fa 04             	cmp    dl,0x4
c0011f65:	74 78                	je     c0011fdf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f67:	80 fa 02             	cmp    dl,0x2
c0011f6a:	0f 84 88 00 00 00    	je     c0011ff8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f70:	80 fa 03             	cmp    dl,0x3
c0011f73:	0f 84 ad 00 00 00    	je     c0012026 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f79:	fe ca                	dec    dl
c0011f7b:	0f 84 92 00 00 00    	je     c0012013 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f81:	43                   	inc    ebx
c0011f82:	31 f6                	xor    esi,esi
c0011f84:	53                   	push   ebx
c0011f85:	89 df                	mov    edi,ebx
c0011f87:	e8 c1 fa ff ff       	call   c0011a4d <Virt::getPageState(unsigned long)>
c0011f8c:	c1 e7 0c             	shl    edi,0xc
c0011f8f:	59                   	pop    ecx
c0011f90:	84 c0                	test   al,al
c0011f92:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f96:	75 ad                	jne    c0011f45 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	68 3b b1 02 c0       	push   0xc002b13b
c0011fa0:	e8 c0 88 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0011fa5:	58                   	pop    eax
c0011fa6:	5a                   	pop    edx
c0011fa7:	57                   	push   edi
c0011fa8:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c0011fae:	e8 5f ff ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fb8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fbc:	f6 c4 04             	test   ah,0x4
c0011fbf:	74 c0                	je     c0011f81 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fc1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011fc5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fca:	83 ec 0c             	sub    esp,0xc
c0011fcd:	50                   	push   eax
c0011fce:	e8 cf de ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c0011fd3:	83 c4 10             	add    esp,0x10
c0011fd6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fda:	80 fa 04             	cmp    dl,0x4
c0011fdd:	75 88                	jne    c0011f67 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011fdf:	89 f0                	mov    eax,esi
c0011fe1:	84 c0                	test   al,al
c0011fe3:	75 47                	jne    c001202c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fe5:	c7 44 24 20 28 af 02 c0 	mov    DWORD PTR [esp+0x20],0xc002af28
c0011fed:	83 c4 10             	add    esp,0x10
c0011ff0:	5b                   	pop    ebx
c0011ff1:	5e                   	pop    esi
c0011ff2:	5f                   	pop    edi
c0011ff3:	e9 6d 88 00 00       	jmp    c001a865 <Krnl::panic(char const*)>
c0011ff8:	89 f0                	mov    eax,esi
c0011ffa:	84 c0                	test   al,al
c0011ffc:	75 15                	jne    c0012013 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ffe:	83 ec 0c             	sub    esp,0xc
c0012001:	68 57 b1 02 c0       	push   0xc002b157
c0012006:	e8 5a 88 00 00       	call   c001a865 <Krnl::panic(char const*)>
c001200b:	83 c4 10             	add    esp,0x10
c001200e:	e9 6e ff ff ff       	jmp    c0011f81 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012013:	83 ec 08             	sub    esp,0x8
c0012016:	6a 00                	push   0x0
c0012018:	53                   	push   ebx
c0012019:	e8 fa f9 ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	e9 5b ff ff ff       	jmp    c0011f81 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012026:	89 f0                	mov    eax,esi
c0012028:	84 c0                	test   al,al
c001202a:	75 15                	jne    c0012041 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001202c:	83 ec 08             	sub    esp,0x8
c001202f:	6a 00                	push   0x0
c0012031:	53                   	push   ebx
c0012032:	e8 e1 f9 ff ff       	call   c0011a18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012037:	83 c4 10             	add    esp,0x10
c001203a:	83 c4 10             	add    esp,0x10
c001203d:	5b                   	pop    ebx
c001203e:	5e                   	pop    esi
c001203f:	5f                   	pop    edi
c0012040:	c3                   	ret    
c0012041:	c7 44 24 20 73 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b173
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	5b                   	pop    ebx
c001204d:	5e                   	pop    esi
c001204e:	5f                   	pop    edi
c001204f:	e9 11 88 00 00       	jmp    c001a865 <Krnl::panic(char const*)>

c0012054 <VAS::freeAllocatedPages(unsigned long)>:
c0012054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012058:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001205c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012060:	74 09                	je     c001206b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012062:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012066:	e9 c6 fe ff ff       	jmp    c0011f31 <Virt::freeKernelVirtualPages(unsigned long)>
c001206b:	c7 44 24 04 4c af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002af4c
c0012073:	e9 ff 0d 00 00       	jmp    c0012e77 <Dbg::kprintf(char const*, ...)>

c0012078 <VAS::virtualToPhysical(unsigned long)>:
c0012078:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001207c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012080:	e8 8d fe ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c0012085:	5a                   	pop    edx
c0012086:	8b 00                	mov    eax,DWORD PTR [eax]
c0012088:	59                   	pop    ecx
c0012089:	25 00 f0 ff ff       	and    eax,0xfffff000
c001208e:	c3                   	ret    
c001208f:	90                   	nop

c0012090 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012090:	55                   	push   ebp
c0012091:	57                   	push   edi
c0012092:	56                   	push   esi
c0012093:	53                   	push   ebx
c0012094:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012098:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001209c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00120a0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00120a4:	85 db                	test   ebx,ebx
c00120a6:	7e 22                	jle    c00120ca <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00120a8:	c1 e3 0c             	shl    ebx,0xc
c00120ab:	01 f3                	add    ebx,esi
c00120ad:	56                   	push   esi
c00120ae:	81 c6 00 10 00 00    	add    esi,0x1000
c00120b4:	55                   	push   ebp
c00120b5:	e8 58 fe ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c00120ba:	5a                   	pop    edx
c00120bb:	59                   	pop    ecx
c00120bc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00120be:	21 f9                	and    ecx,edi
c00120c0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00120c4:	39 f3                	cmp    ebx,esi
c00120c6:	89 08                	mov    DWORD PTR [eax],ecx
c00120c8:	75 e3                	jne    c00120ad <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00120ca:	5b                   	pop    ebx
c00120cb:	5e                   	pop    esi
c00120cc:	5f                   	pop    edi
c00120cd:	5d                   	pop    ebp
c00120ce:	c3                   	ret    
c00120cf:	90                   	nop

c00120d0 <VAS::setToWriteCombining(unsigned long, int)>:
c00120d0:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00120d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120db:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120e2:	75 01                	jne    c00120e5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120e4:	c3                   	ret    
c00120e5:	68 80 00 00 00       	push   0x80
c00120ea:	6a ff                	push   0xffffffff
c00120ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120f8:	e8 93 ff ff ff       	call   c0012090 <VAS::reflagRange(unsigned long, int, int, int)>
c00120fd:	83 c4 14             	add    esp,0x14
c0012100:	c3                   	ret    
c0012101:	90                   	nop

c0012102 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012102:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001210b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001210e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012112:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012115:	19 c0                	sbb    eax,eax
c0012117:	83 ca 03             	or     edx,0x3
c001211a:	83 e0 fc             	and    eax,0xfffffffc
c001211d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012124:	0f 20 d8             	mov    eax,cr3
c0012127:	0f 22 d8             	mov    cr3,eax
c001212a:	c3                   	ret    
c001212b:	90                   	nop

c001212c <VAS::~VAS()>:
c001212c:	83 ec 2c             	sub    esp,0x2c
c001212f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012137:	fa                   	cli    
c0012138:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001213d:	40                   	inc    eax
c001213e:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0012143:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012148:	8b 00                	mov    eax,DWORD PTR [eax]
c001214a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001214d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012153:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012157:	6a 01                	push   0x1
c0012159:	50                   	push   eax
c001215a:	e8 a3 ff ff ff       	call   c0012102 <VAS::mapOtherVASIn(bool, VAS*)>
c001215f:	83 c4 0c             	add    esp,0xc
c0012162:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001216a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012172:	0f 8f d4 00 00 00    	jg     c001224c <VAS::~VAS()+0x120>
c0012178:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001217c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001217f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012183:	c1 e2 02             	shl    edx,0x2
c0012186:	01 d0                	add    eax,edx
c0012188:	8b 00                	mov    eax,DWORD PTR [eax]
c001218a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001218e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012192:	83 e0 01             	and    eax,0x1
c0012195:	0f 84 a8 00 00 00    	je     c0012243 <VAS::~VAS()+0x117>
c001219b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00121a3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00121ab:	7f 72                	jg     c001221f <VAS::~VAS()+0xf3>
c00121ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121b1:	c1 e0 0a             	shl    eax,0xa
c00121b4:	89 c2                	mov    edx,eax
c00121b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121ba:	01 d0                	add    eax,edx
c00121bc:	c1 e0 0c             	shl    eax,0xc
c00121bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121c3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121cd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121d7:	6a 01                	push   0x1
c00121d9:	50                   	push   eax
c00121da:	e8 07 fd ff ff       	call   c0011ee6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121df:	83 c4 0c             	add    esp,0xc
c00121e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f4:	25 01 04 00 00       	and    eax,0x401
c00121f9:	3d 01 04 00 00       	cmp    eax,0x401
c00121fe:	75 19                	jne    c0012219 <VAS::~VAS()+0xed>
c0012200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012204:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012209:	83 ec 0c             	sub    esp,0xc
c001220c:	50                   	push   eax
c001220d:	e8 90 dc ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012219:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001221d:	eb 84                	jmp    c00121a3 <VAS::~VAS()+0x77>
c001221f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012223:	25 00 04 00 00       	and    eax,0x400
c0012228:	74 19                	je     c0012243 <VAS::~VAS()+0x117>
c001222a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001222e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012233:	83 ec 0c             	sub    esp,0xc
c0012236:	50                   	push   eax
c0012237:	e8 66 dc ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c001223c:	83 c4 10             	add    esp,0x10
c001223f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012243:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012247:	e9 1e ff ff ff       	jmp    c001216a <VAS::~VAS()+0x3e>
c001224c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012250:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012253:	83 ec 0c             	sub    esp,0xc
c0012256:	50                   	push   eax
c0012257:	e8 d5 fc ff ff       	call   c0011f31 <Virt::freeKernelVirtualPages(unsigned long)>
c001225c:	83 c4 10             	add    esp,0x10
c001225f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012263:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012266:	83 ec 0c             	sub    esp,0xc
c0012269:	50                   	push   eax
c001226a:	e8 33 dc ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c001226f:	83 c4 10             	add    esp,0x10
c0012272:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012276:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001227a:	c1 e0 02             	shl    eax,0x2
c001227d:	83 ec 08             	sub    esp,0x8
c0012280:	50                   	push   eax
c0012281:	68 70 af 02 c0       	push   0xc002af70
c0012286:	e8 ec 0b 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001228b:	83 c4 10             	add    esp,0x10
c001228e:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0012293:	48                   	dec    eax
c0012294:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0012299:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001229e:	85 c0                	test   eax,eax
c00122a0:	75 01                	jne    c00122a3 <VAS::~VAS()+0x177>
c00122a2:	fb                   	sti    
c00122a3:	90                   	nop
c00122a4:	83 c4 2c             	add    esp,0x2c
c00122a7:	c3                   	ret    

c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00122a8:	55                   	push   ebp
c00122a9:	57                   	push   edi
c00122aa:	56                   	push   esi
c00122ab:	53                   	push   ebx
c00122ac:	83 ec 1c             	sub    esp,0x1c
c00122af:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00122b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122b7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00122bd:	77 08                	ja     c00122c7 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00122bf:	0f 20 d8             	mov    eax,cr3
c00122c2:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00122c5:	75 47                	jne    c001230e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00122c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122cb:	09 d8                	or     eax,ebx
c00122cd:	a9 ff 0f 00 00       	test   eax,0xfff
c00122d2:	75 57                	jne    c001232b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122d4:	89 de                	mov    esi,ebx
c00122d6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122d9:	c1 ee 16             	shr    esi,0x16
c00122dc:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122e3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122e7:	74 54                	je     c001233d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122ed:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122f3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122f7:	c1 e6 0c             	shl    esi,0xc
c00122fa:	c1 eb 0a             	shr    ebx,0xa
c00122fd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012303:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012306:	83 c4 1c             	add    esp,0x1c
c0012309:	5b                   	pop    ebx
c001230a:	5e                   	pop    esi
c001230b:	5f                   	pop    edi
c001230c:	5d                   	pop    ebp
c001230d:	c3                   	ret    
c001230e:	83 ec 0c             	sub    esp,0xc
c0012311:	68 90 af 02 c0       	push   0xc002af90
c0012316:	e8 5c 0b 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001231b:	83 c4 10             	add    esp,0x10
c001231e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012322:	09 d8                	or     eax,ebx
c0012324:	a9 ff 0f 00 00       	test   eax,0xfff
c0012329:	74 a9                	je     c00122d4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001232b:	83 ec 0c             	sub    esp,0xc
c001232e:	68 f8 af 02 c0       	push   0xc002aff8
c0012333:	e8 2d 85 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	eb 97                	jmp    c00122d4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001233d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012341:	e8 e6 db ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	89 c5                	mov    ebp,eax
c001234b:	8b 0d 50 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f050
c0012351:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012355:	6a 01                	push   0x1
c0012357:	e8 15 f7 ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c001235c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012363:	6a 01                	push   0x1
c0012365:	50                   	push   eax
c0012366:	55                   	push   ebp
c0012367:	81 cd 07 04 00 00    	or     ebp,0x407
c001236d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012371:	51                   	push   ecx
c0012372:	e8 27 02 00 00       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012377:	83 c4 1c             	add    esp,0x1c
c001237a:	68 00 10 00 00       	push   0x1000
c001237f:	6a 00                	push   0x0
c0012381:	50                   	push   eax
c0012382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012386:	e8 e1 e3 fe ff       	call   c000076c <memset>
c001238b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001238f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012392:	e8 9a fb ff ff       	call   c0011f31 <Virt::freeKernelVirtualPages(unsigned long)>
c0012397:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001239b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001239e:	83 c4 10             	add    esp,0x10
c00123a1:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00123a4:	e9 40 ff ff ff       	jmp    c00122e9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00123a9:	90                   	nop

c00123aa <VAS::allocatePages(int, int)>:
c00123aa:	55                   	push   ebp
c00123ab:	57                   	push   edi
c00123ac:	56                   	push   esi
c00123ad:	53                   	push   ebx
c00123ae:	83 ec 1c             	sub    esp,0x1c
c00123b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123b5:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00123ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123c0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00123c6:	83 e0 01             	and    eax,0x1
c00123c9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00123cd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00123d1:	0f 85 cc 00 00 00    	jne    c00124a3 <VAS::allocatePages(int, int)+0xf9>
c00123d7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123de:	85 c0                	test   eax,eax
c00123e0:	0f 84 a1 00 00 00    	je     c0012487 <VAS::allocatePages(int, int)+0xdd>
c00123e6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ee:	c1 e6 0c             	shl    esi,0xc
c00123f1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123f5:	85 c0                	test   eax,eax
c00123f7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123fa:	7e 33                	jle    c001242f <VAS::allocatePages(int, int)+0x85>
c00123fc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012400:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012404:	81 cd 00 04 00 00    	or     ebp,0x400
c001240a:	e8 1d db ff ff       	call   c000ff2c <Phys::allocatePage()>
c001240f:	55                   	push   ebp
c0012410:	53                   	push   ebx
c0012411:	50                   	push   eax
c0012412:	57                   	push   edi
c0012413:	e8 90 fe ff ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012420:	74 03                	je     c0012425 <VAS::allocatePages(int, int)+0x7b>
c0012422:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012425:	81 c3 00 10 00 00    	add    ebx,0x1000
c001242b:	39 de                	cmp    esi,ebx
c001242d:	75 db                	jne    c001240a <VAS::allocatePages(int, int)+0x60>
c001242f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012434:	75 12                	jne    c0012448 <VAS::allocatePages(int, int)+0x9e>
c0012436:	0f 20 d8             	mov    eax,cr3
c0012439:	0f 22 d8             	mov    cr3,eax
c001243c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012440:	83 c4 1c             	add    esp,0x1c
c0012443:	5b                   	pop    ebx
c0012444:	5e                   	pop    esi
c0012445:	5f                   	pop    edi
c0012446:	5d                   	pop    ebp
c0012447:	c3                   	ret    
c0012448:	c1 ee 0a             	shr    esi,0xa
c001244b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001244f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012455:	c1 eb 0a             	shr    ebx,0xa
c0012458:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001245e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012464:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001246a:	39 c3                	cmp    ebx,eax
c001246c:	77 ce                	ja     c001243c <VAS::allocatePages(int, int)+0x92>
c001246e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012471:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012477:	39 d8                	cmp    eax,ebx
c0012479:	73 f3                	jae    c001246e <VAS::allocatePages(int, int)+0xc4>
c001247b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001247f:	83 c4 1c             	add    esp,0x1c
c0012482:	5b                   	pop    ebx
c0012483:	5e                   	pop    esi
c0012484:	5f                   	pop    edi
c0012485:	5d                   	pop    ebp
c0012486:	c3                   	ret    
c0012487:	83 ec 0c             	sub    esp,0xc
c001248a:	68 1c b0 02 c0       	push   0xc002b01c
c001248f:	e8 d1 83 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0012494:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012497:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001249b:	83 c4 10             	add    esp,0x10
c001249e:	e9 43 ff ff ff       	jmp    c00123e6 <VAS::allocatePages(int, int)+0x3c>
c00124a3:	83 ec 0c             	sub    esp,0xc
c00124a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124aa:	e8 c2 f5 ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c00124af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124b3:	83 c4 10             	add    esp,0x10
c00124b6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00124bb:	0f 87 9b 00 00 00    	ja     c001255c <VAS::allocatePages(int, int)+0x1b2>
c00124c1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00124c5:	85 d2                	test   edx,edx
c00124c7:	7e 3c                	jle    c0012505 <VAS::allocatePages(int, int)+0x15b>
c00124c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124cd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d5:	c1 e5 0c             	shl    ebp,0xc
c00124d8:	81 ce 00 04 00 00    	or     esi,0x400
c00124de:	01 dd                	add    ebp,ebx
c00124e0:	e8 47 da ff ff       	call   c000ff2c <Phys::allocatePage()>
c00124e5:	56                   	push   esi
c00124e6:	53                   	push   ebx
c00124e7:	50                   	push   eax
c00124e8:	57                   	push   edi
c00124e9:	e8 ba fd ff ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ee:	83 c4 10             	add    esp,0x10
c00124f1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f6:	74 03                	je     c00124fb <VAS::allocatePages(int, int)+0x151>
c00124f8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124fb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012501:	39 dd                	cmp    ebp,ebx
c0012503:	75 db                	jne    c00124e0 <VAS::allocatePages(int, int)+0x136>
c0012505:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001250a:	0f 84 26 ff ff ff    	je     c0012436 <VAS::allocatePages(int, int)+0x8c>
c0012510:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012514:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012518:	89 d3                	mov    ebx,edx
c001251a:	c1 e0 0c             	shl    eax,0xc
c001251d:	c1 eb 0a             	shr    ebx,0xa
c0012520:	01 d0                	add    eax,edx
c0012522:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012528:	c1 e8 0a             	shr    eax,0xa
c001252b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012531:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012536:	2d 00 00 40 00       	sub    eax,0x400000
c001253b:	39 c3                	cmp    ebx,eax
c001253d:	0f 87 f9 fe ff ff    	ja     c001243c <VAS::allocatePages(int, int)+0x92>
c0012543:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012546:	81 c3 00 10 00 00    	add    ebx,0x1000
c001254c:	39 d8                	cmp    eax,ebx
c001254e:	73 f3                	jae    c0012543 <VAS::allocatePages(int, int)+0x199>
c0012550:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012554:	83 c4 1c             	add    esp,0x1c
c0012557:	5b                   	pop    ebx
c0012558:	5e                   	pop    esi
c0012559:	5f                   	pop    edi
c001255a:	5d                   	pop    ebp
c001255b:	c3                   	ret    
c001255c:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0012561:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012567:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001256e:	0f 84 4d ff ff ff    	je     c00124c1 <VAS::allocatePages(int, int)+0x117>
c0012574:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001257c:	e9 40 ff ff ff       	jmp    c00124c1 <VAS::allocatePages(int, int)+0x117>
c0012581:	90                   	nop

c0012582 <VAS::setCPUSpecific(unsigned long)>:
c0012582:	83 ec 0c             	sub    esp,0xc
c0012585:	6a 05                	push   0x5
c0012587:	68 00 00 40 c2       	push   0xc2400000
c001258c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012594:	e8 0f fd ff ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012599:	83 c4 1c             	add    esp,0x1c
c001259c:	c3                   	ret    
c001259d:	90                   	nop

c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001259e:	55                   	push   ebp
c001259f:	57                   	push   edi
c00125a0:	56                   	push   esi
c00125a1:	53                   	push   ebx
c00125a2:	83 ec 1c             	sub    esp,0x1c
c00125a5:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00125aa:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00125ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125b4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125b8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00125be:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00125c2:	83 e0 01             	and    eax,0x1
c00125c5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00125c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125cd:	85 c0                	test   eax,eax
c00125cf:	7e 39                	jle    c001260a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00125d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125d5:	89 f3                	mov    ebx,esi
c00125d7:	c1 e0 0c             	shl    eax,0xc
c00125da:	01 f0                	add    eax,esi
c00125dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125e0:	55                   	push   ebp
c00125e1:	53                   	push   ebx
c00125e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125e6:	29 f0                	sub    eax,esi
c00125e8:	01 d8                	add    eax,ebx
c00125ea:	50                   	push   eax
c00125eb:	57                   	push   edi
c00125ec:	e8 b7 fc ff ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125f1:	83 c4 10             	add    esp,0x10
c00125f4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125f9:	74 03                	je     c00125fe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125fb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012604:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012608:	75 d6                	jne    c00125e0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001260a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001260f:	75 10                	jne    c0012621 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012611:	0f 20 d8             	mov    eax,cr3
c0012614:	0f 22 d8             	mov    cr3,eax
c0012617:	83 c4 1c             	add    esp,0x1c
c001261a:	89 f0                	mov    eax,esi
c001261c:	5b                   	pop    ebx
c001261d:	5e                   	pop    esi
c001261e:	5f                   	pop    edi
c001261f:	5d                   	pop    ebp
c0012620:	c3                   	ret    
c0012621:	89 f3                	mov    ebx,esi
c0012623:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012627:	c1 eb 0a             	shr    ebx,0xa
c001262a:	c1 e0 0c             	shl    eax,0xc
c001262d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012633:	01 f0                	add    eax,esi
c0012635:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001263b:	c1 e8 0a             	shr    eax,0xa
c001263e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012643:	2d 00 00 40 00       	sub    eax,0x400000
c0012648:	39 c3                	cmp    ebx,eax
c001264a:	77 cb                	ja     c0012617 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001264c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001264f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012655:	39 d8                	cmp    eax,ebx
c0012657:	73 f3                	jae    c001264c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012659:	83 c4 1c             	add    esp,0x1c
c001265c:	89 f0                	mov    eax,esi
c001265e:	5b                   	pop    ebx
c001265f:	5e                   	pop    esi
c0012660:	5f                   	pop    edi
c0012661:	5d                   	pop    ebp
c0012662:	c3                   	ret    
c0012663:	90                   	nop

c0012664 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012664:	55                   	push   ebp
c0012665:	57                   	push   edi
c0012666:	56                   	push   esi
c0012667:	53                   	push   ebx
c0012668:	83 ec 1c             	sub    esp,0x1c
c001266b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001266f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012673:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012677:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001267b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012680:	75 4a                	jne    c00126cc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012682:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012686:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012689:	c1 eb 16             	shr    ebx,0x16
c001268c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012693:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012697:	74 4d                	je     c00126e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012699:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001269d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00126a1:	c1 e8 0a             	shr    eax,0xa
c00126a4:	80 fa 01             	cmp    dl,0x1
c00126a7:	19 d2                	sbb    edx,edx
c00126a9:	c1 e3 0c             	shl    ebx,0xc
c00126ac:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00126b0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00126b6:	25 fc 0f 00 00       	and    eax,0xffc
c00126bb:	01 d8                	add    eax,ebx
c00126bd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00126c4:	83 c4 1c             	add    esp,0x1c
c00126c7:	5b                   	pop    ebx
c00126c8:	5e                   	pop    esi
c00126c9:	5f                   	pop    edi
c00126ca:	5d                   	pop    ebp
c00126cb:	c3                   	ret    
c00126cc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00126d0:	83 ec 0c             	sub    esp,0xc
c00126d3:	68 48 b0 02 c0       	push   0xc002b048
c00126d8:	e8 88 81 00 00       	call   c001a865 <Krnl::panic(char const*)>
c00126dd:	83 c4 10             	add    esp,0x10
c00126e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126e4:	eb 9c                	jmp    c0012682 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126ea:	e8 3d d8 ff ff       	call   c000ff2c <Phys::allocatePage()>
c00126ef:	83 ec 0c             	sub    esp,0xc
c00126f2:	89 c5                	mov    ebp,eax
c00126f4:	8b 0d 50 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f050
c00126fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126fe:	6a 01                	push   0x1
c0012700:	e8 6c f3 ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c0012705:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001270c:	6a 01                	push   0x1
c001270e:	50                   	push   eax
c001270f:	55                   	push   ebp
c0012710:	81 cd 07 04 00 00    	or     ebp,0x407
c0012716:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001271a:	51                   	push   ecx
c001271b:	e8 7e fe ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012720:	83 c4 1c             	add    esp,0x1c
c0012723:	68 00 10 00 00       	push   0x1000
c0012728:	6a 00                	push   0x0
c001272a:	50                   	push   eax
c001272b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001272f:	e8 38 e0 fe ff       	call   c000076c <memset>
c0012734:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012738:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001273b:	e8 f1 f7 ff ff       	call   c0011f31 <Virt::freeKernelVirtualPages(unsigned long)>
c0012740:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012743:	83 c4 10             	add    esp,0x10
c0012746:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012749:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001274d:	e9 47 ff ff ff       	jmp    c0012699 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012752 <VAS::VAS(bool)>:
c0012752:	53                   	push   ebx
c0012753:	83 ec 28             	sub    esp,0x28
c0012756:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001275a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001275e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012762:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001276d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012774:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012778:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001277c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001277f:	e8 a8 d7 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012784:	89 c2                	mov    edx,eax
c0012786:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001278d:	8b 1d 50 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f050
c0012793:	83 ec 0c             	sub    esp,0xc
c0012796:	6a 01                	push   0x1
c0012798:	e8 d4 f2 ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c001279d:	83 c4 10             	add    esp,0x10
c00127a0:	89 c2                	mov    edx,eax
c00127a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00127a9:	83 ec 0c             	sub    esp,0xc
c00127ac:	6a 03                	push   0x3
c00127ae:	6a 01                	push   0x1
c00127b0:	52                   	push   edx
c00127b1:	50                   	push   eax
c00127b2:	53                   	push   ebx
c00127b3:	e8 e6 fd ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127b8:	83 c4 20             	add    esp,0x20
c00127bb:	89 c2                	mov    edx,eax
c00127bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00127cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127d4:	7f 1c                	jg     c00127f2 <VAS::VAS(bool)+0xa0>
c00127d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127e1:	c1 e2 02             	shl    edx,0x2
c00127e4:	01 d0                	add    eax,edx
c00127e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127ec:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127f0:	eb da                	jmp    c00127cc <VAS::VAS(bool)+0x7a>
c00127f2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127fa:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012802:	7f 7a                	jg     c001287e <VAS::VAS(bool)+0x12c>
c0012804:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012808:	2d 00 02 00 00       	sub    eax,0x200
c001280d:	c1 e0 0c             	shl    eax,0xc
c0012810:	83 c8 03             	or     eax,0x3
c0012813:	89 c2                	mov    edx,eax
c0012815:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001281a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012820:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012826:	83 e0 10             	and    eax,0x10
c0012829:	84 c0                	test   al,al
c001282b:	74 07                	je     c0012834 <VAS::VAS(bool)+0xe2>
c001282d:	b8 00 01 00 00       	mov    eax,0x100
c0012832:	eb 05                	jmp    c0012839 <VAS::VAS(bool)+0xe7>
c0012834:	b8 00 00 00 00       	mov    eax,0x0
c0012839:	09 d0                	or     eax,edx
c001283b:	89 c1                	mov    ecx,eax
c001283d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012841:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012844:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012848:	c1 e2 02             	shl    edx,0x2
c001284b:	01 d0                	add    eax,edx
c001284d:	89 ca                	mov    edx,ecx
c001284f:	89 10                	mov    DWORD PTR [eax],edx
c0012851:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012855:	2d 40 03 00 00       	sub    eax,0x340
c001285a:	83 f8 7f             	cmp    eax,0x7f
c001285d:	77 16                	ja     c0012875 <VAS::VAS(bool)+0x123>
c001285f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012863:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012866:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001286a:	c1 e2 02             	shl    edx,0x2
c001286d:	01 d0                	add    eax,edx
c001286f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012875:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012879:	e9 7c ff ff ff       	jmp    c00127fa <VAS::VAS(bool)+0xa8>
c001287e:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0012883:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012889:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001288f:	83 e0 10             	and    eax,0x10
c0012892:	84 c0                	test   al,al
c0012894:	74 07                	je     c001289d <VAS::VAS(bool)+0x14b>
c0012896:	b8 03 41 00 00       	mov    eax,0x4103
c001289b:	eb 05                	jmp    c00128a2 <VAS::VAS(bool)+0x150>
c001289d:	b8 03 40 00 00       	mov    eax,0x4003
c00128a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128a6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00128a9:	81 c2 20 0c 00 00    	add    edx,0xc20
c00128af:	89 02                	mov    DWORD PTR [edx],eax
c00128b1:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00128b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00128c2:	83 ec 08             	sub    esp,0x8
c00128c5:	50                   	push   eax
c00128c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128ca:	e8 b3 fc ff ff       	call   c0012582 <VAS::setCPUSpecific(unsigned long)>
c00128cf:	83 c4 10             	add    esp,0x10
c00128d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128d6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128d9:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00128de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ea:	83 e0 10             	and    eax,0x10
c00128ed:	84 c0                	test   al,al
c00128ef:	74 07                	je     c00128f8 <VAS::VAS(bool)+0x1a6>
c00128f1:	b8 00 01 00 00       	mov    eax,0x100
c00128f6:	eb 05                	jmp    c00128fd <VAS::VAS(bool)+0x1ab>
c00128f8:	b8 00 00 00 00       	mov    eax,0x0
c00128fd:	09 c2                	or     edx,eax
c00128ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012903:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012906:	05 fc 0f 00 00       	add    eax,0xffc
c001290b:	83 ca 03             	or     edx,0x3
c001290e:	89 10                	mov    DWORD PTR [eax],edx
c0012910:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0012915:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001291b:	83 ec 0c             	sub    esp,0xc
c001291e:	50                   	push   eax
c001291f:	e8 74 1c 00 00       	call   c0014598 <Device::getName()>
c0012924:	83 c4 10             	add    esp,0x10
c0012927:	83 ec 08             	sub    esp,0x8
c001292a:	68 8d b1 02 c0       	push   0xc002b18d
c001292f:	50                   	push   eax
c0012930:	e8 7f df fe ff       	call   c00008b4 <strcmp>
c0012935:	83 c4 10             	add    esp,0x10
c0012938:	85 c0                	test   eax,eax
c001293a:	0f 94 c0             	sete   al
c001293d:	84 c0                	test   al,al
c001293f:	0f 84 87 00 00 00    	je     c00129cc <VAS::VAS(bool)+0x27a>
c0012945:	fa                   	cli    
c0012946:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001294b:	40                   	inc    eax
c001294c:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0012951:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0012956:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001295c:	05 7c 09 00 00       	add    eax,0x97c
c0012961:	83 ec 0c             	sub    esp,0xc
c0012964:	50                   	push   eax
c0012965:	e8 d8 c9 ff ff       	call   c000f342 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012972:	89 c3                	mov    ebx,eax
c0012974:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0012979:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297f:	05 7c 09 00 00       	add    eax,0x97c
c0012984:	83 ec 0c             	sub    esp,0xc
c0012987:	50                   	push   eax
c0012988:	e8 b5 c9 ff ff       	call   c000f342 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001298d:	83 c4 10             	add    esp,0x10
c0012990:	83 ec 08             	sub    esp,0x8
c0012993:	50                   	push   eax
c0012994:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012998:	e8 75 f5 ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c001299d:	83 c4 10             	add    esp,0x10
c00129a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129a7:	6a 11                	push   0x11
c00129a9:	53                   	push   ebx
c00129aa:	50                   	push   eax
c00129ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129af:	e8 f4 f8 ff ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c00129bc:	48                   	dec    eax
c00129bd:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c00129c2:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c00129c7:	85 c0                	test   eax,eax
c00129c9:	75 01                	jne    c00129cc <VAS::VAS(bool)+0x27a>
c00129cb:	fb                   	sti    
c00129cc:	90                   	nop
c00129cd:	83 c4 28             	add    esp,0x28
c00129d0:	5b                   	pop    ebx
c00129d1:	c3                   	ret    

c00129d2 <VAS::evict(unsigned long)>:
c00129d2:	55                   	push   ebp
c00129d3:	57                   	push   edi
c00129d4:	56                   	push   esi
c00129d5:	53                   	push   ebx
c00129d6:	83 ec 1c             	sub    esp,0x1c
c00129d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129dd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129e5:	e8 c8 f1 ff ff       	call   c0011bb2 <Virt::allocateSwapfilePage()>
c00129ea:	89 c7                	mov    edi,eax
c00129ec:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c00129f1:	85 c0                	test   eax,eax
c00129f3:	7e 3d                	jle    c0012a32 <VAS::evict(unsigned long)+0x60>
c00129f5:	89 ee                	mov    esi,ebp
c00129f7:	31 db                	xor    ebx,ebx
c00129f9:	83 ec 0c             	sub    esp,0xc
c00129fc:	57                   	push   edi
c00129fd:	e8 9e f1 ff ff       	call   c0011ba0 <Virt::swapIDToSector(unsigned long)>
c0012a02:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a05:	01 d8                	add    eax,ebx
c0012a07:	6a 01                	push   0x1
c0012a09:	31 d2                	xor    edx,edx
c0012a0b:	43                   	inc    ebx
c0012a0c:	52                   	push   edx
c0012a0d:	81 c6 00 02 00 00    	add    esi,0x200
c0012a13:	50                   	push   eax
c0012a14:	0f be 05 78 de 02 c0 	movsx  eax,BYTE PTR ds:0xc002de78
c0012a1b:	ff 34 85 dc f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c24]
c0012a22:	e8 47 3e 00 00       	call   c001686e <LogicalDisk::write(unsigned long long, int, void*)>
c0012a27:	83 c4 20             	add    esp,0x20
c0012a2a:	39 1d 6c de 02 c0    	cmp    DWORD PTR ds:0xc002de6c,ebx
c0012a30:	7f c7                	jg     c00129f9 <VAS::evict(unsigned long)+0x27>
c0012a32:	83 ec 08             	sub    esp,0x8
c0012a35:	c1 e7 0b             	shl    edi,0xb
c0012a38:	55                   	push   ebp
c0012a39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a3d:	e8 d0 f4 ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c0012a42:	83 c4 0c             	add    esp,0xc
c0012a45:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a47:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a4d:	09 d7                	or     edi,edx
c0012a4f:	89 38                	mov    DWORD PTR [eax],edi
c0012a51:	a1 48 f0 02 c0       	mov    eax,ds:0xc002f048
c0012a56:	40                   	inc    eax
c0012a57:	a3 48 f0 02 c0       	mov    ds:0xc002f048,eax
c0012a5c:	0f 20 da             	mov    edx,cr3
c0012a5f:	0f 22 da             	mov    cr3,edx
c0012a62:	50                   	push   eax
c0012a63:	55                   	push   ebp
c0012a64:	68 9b b1 02 c0       	push   0xc002b19b
c0012a69:	e8 09 04 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012a6e:	a1 44 f0 02 c0       	mov    eax,ds:0xc002f044
c0012a73:	c7 44 24 40 b0 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b1b0
c0012a7b:	8d 50 01             	lea    edx,[eax+0x1]
c0012a7e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a82:	89 15 44 f0 02 c0    	mov    DWORD PTR ds:0xc002f044,edx
c0012a88:	83 c4 2c             	add    esp,0x2c
c0012a8b:	5b                   	pop    ebx
c0012a8c:	5e                   	pop    esi
c0012a8d:	5f                   	pop    edi
c0012a8e:	5d                   	pop    ebp
c0012a8f:	e9 e3 03 00 00       	jmp    c0012e77 <Dbg::kprintf(char const*, ...)>

c0012a94 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a94:	55                   	push   ebp
c0012a95:	57                   	push   edi
c0012a96:	56                   	push   esi
c0012a97:	53                   	push   ebx
c0012a98:	83 ec 0c             	sub    esp,0xc
c0012a9b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a9f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012aa5:	0f 84 dc 00 00 00    	je     c0012b87 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012aab:	56                   	push   esi
c0012aac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012ab0:	e8 5d f4 ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c0012ab5:	5b                   	pop    ebx
c0012ab6:	85 c0                	test   eax,eax
c0012ab8:	5f                   	pop    edi
c0012ab9:	89 c3                	mov    ebx,eax
c0012abb:	0f 84 c6 00 00 00    	je     c0012b87 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012ac1:	8b 38                	mov    edi,DWORD PTR [eax]
c0012ac3:	31 c0                	xor    eax,eax
c0012ac5:	89 fa                	mov    edx,edi
c0012ac7:	81 e2 01 04 00 00    	and    edx,0x401
c0012acd:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012ad3:	0f 85 b0 00 00 00    	jne    c0012b89 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012ad9:	e8 4e d4 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012ade:	c1 ef 0b             	shr    edi,0xb
c0012ae1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012ae3:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012ae9:	09 c2                	or     edx,eax
c0012aeb:	81 ca 01 08 00 00    	or     edx,0x801
c0012af1:	89 13                	mov    DWORD PTR [ebx],edx
c0012af3:	8b 0d 6c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de6c
c0012af9:	85 c9                	test   ecx,ecx
c0012afb:	7e 3d                	jle    c0012b3a <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012afd:	89 f5                	mov    ebp,esi
c0012aff:	31 db                	xor    ebx,ebx
c0012b01:	83 ec 0c             	sub    esp,0xc
c0012b04:	57                   	push   edi
c0012b05:	e8 96 f0 ff ff       	call   c0011ba0 <Virt::swapIDToSector(unsigned long)>
c0012b0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b0d:	01 d8                	add    eax,ebx
c0012b0f:	6a 01                	push   0x1
c0012b11:	31 d2                	xor    edx,edx
c0012b13:	43                   	inc    ebx
c0012b14:	52                   	push   edx
c0012b15:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b1b:	50                   	push   eax
c0012b1c:	0f be 05 78 de 02 c0 	movsx  eax,BYTE PTR ds:0xc002de78
c0012b23:	ff 34 85 dc f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c24]
c0012b2a:	e8 d3 3c 00 00       	call   c0016802 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b2f:	83 c4 20             	add    esp,0x20
c0012b32:	39 1d 6c de 02 c0    	cmp    DWORD PTR ds:0xc002de6c,ebx
c0012b38:	7f c7                	jg     c0012b01 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b3a:	a1 48 f0 02 c0       	mov    eax,ds:0xc002f048
c0012b3f:	48                   	dec    eax
c0012b40:	52                   	push   edx
c0012b41:	a3 48 f0 02 c0       	mov    ds:0xc002f048,eax
c0012b46:	50                   	push   eax
c0012b47:	56                   	push   esi
c0012b48:	68 c1 b1 02 c0       	push   0xc002b1c1
c0012b4d:	e8 25 03 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012b52:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b55:	e8 28 f0 ff ff       	call   c0011b82 <Virt::freeSwapfilePage(unsigned long)>
c0012b5a:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0012b5f:	83 c4 10             	add    esp,0x10
c0012b62:	48                   	dec    eax
c0012b63:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0012b68:	85 c0                	test   eax,eax
c0012b6a:	75 01                	jne    c0012b6d <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b6c:	fb                   	sti    
c0012b6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b71:	25 ff 0f 00 00       	and    eax,0xfff
c0012b76:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b7b:	77 14                	ja     c0012b91 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b7d:	0f 20 d8             	mov    eax,cr3
c0012b80:	0f 22 d8             	mov    cr3,eax
c0012b83:	b0 01                	mov    al,0x1
c0012b85:	eb 02                	jmp    c0012b89 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b87:	31 c0                	xor    eax,eax
c0012b89:	83 c4 0c             	add    esp,0xc
c0012b8c:	5b                   	pop    ebx
c0012b8d:	5e                   	pop    esi
c0012b8e:	5f                   	pop    edi
c0012b8f:	5d                   	pop    ebp
c0012b90:	c3                   	ret    
c0012b91:	83 ec 0c             	sub    esp,0xc
c0012b94:	68 d6 b1 02 c0       	push   0xc002b1d6
c0012b99:	e8 d9 02 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012b9e:	83 c4 10             	add    esp,0x10
c0012ba1:	eb da                	jmp    c0012b7d <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012ba3:	90                   	nop

c0012ba4 <VAS::scanForEviction()>:
c0012ba4:	57                   	push   edi
c0012ba5:	56                   	push   esi
c0012ba6:	53                   	push   ebx
c0012ba7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012bae:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bb4:	75 0e                	jne    c0012bc4 <VAS::scanForEviction()+0x20>
c0012bb6:	89 da                	mov    edx,ebx
c0012bb8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bbb:	c1 ea 16             	shr    edx,0x16
c0012bbe:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bc2:	74 48                	je     c0012c0c <VAS::scanForEviction()+0x68>
c0012bc4:	53                   	push   ebx
c0012bc5:	56                   	push   esi
c0012bc6:	e8 47 f3 ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c0012bcb:	5a                   	pop    edx
c0012bcc:	8b 38                	mov    edi,DWORD PTR [eax]
c0012bce:	59                   	pop    ecx
c0012bcf:	89 fa                	mov    edx,edi
c0012bd1:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012bd7:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012bdd:	74 3d                	je     c0012c1c <VAS::scanForEviction()+0x78>
c0012bdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012be5:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012beb:	76 2a                	jbe    c0012c17 <VAS::scanForEviction()+0x73>
c0012bed:	31 db                	xor    ebx,ebx
c0012bef:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bf6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bfc:	75 c6                	jne    c0012bc4 <VAS::scanForEviction()+0x20>
c0012bfe:	89 da                	mov    edx,ebx
c0012c00:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c03:	c1 ea 16             	shr    edx,0x16
c0012c06:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c0a:	75 b8                	jne    c0012bc4 <VAS::scanForEviction()+0x20>
c0012c0c:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c12:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c15:	eb 97                	jmp    c0012bae <VAS::scanForEviction()+0xa>
c0012c17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c1a:	eb 92                	jmp    c0012bae <VAS::scanForEviction()+0xa>
c0012c1c:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c22:	74 bb                	je     c0012bdf <VAS::scanForEviction()+0x3b>
c0012c24:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c2a:	74 0a                	je     c0012c36 <VAS::scanForEviction()+0x92>
c0012c2c:	83 e7 df             	and    edi,0xffffffdf
c0012c2f:	89 38                	mov    DWORD PTR [eax],edi
c0012c31:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c34:	eb a9                	jmp    c0012bdf <VAS::scanForEviction()+0x3b>
c0012c36:	83 ec 08             	sub    esp,0x8
c0012c39:	53                   	push   ebx
c0012c3a:	56                   	push   esi
c0012c3b:	e8 92 fd ff ff       	call   c00129d2 <VAS::evict(unsigned long)>
c0012c40:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c47:	83 c4 10             	add    esp,0x10
c0012c4a:	89 f8                	mov    eax,edi
c0012c4c:	5b                   	pop    ebx
c0012c4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c52:	5e                   	pop    esi
c0012c53:	5f                   	pop    edi
c0012c54:	c3                   	ret    

c0012c55 <mapVASFirstTime>:
c0012c55:	55                   	push   ebp
c0012c56:	57                   	push   edi
c0012c57:	56                   	push   esi
c0012c58:	53                   	push   ebx
c0012c59:	83 ec 0c             	sub    esp,0xc
c0012c5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c61:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c64:	4a                   	dec    edx
c0012c65:	0f 84 8e 00 00 00    	je     c0012cf9 <mapVASFirstTime+0xa4>
c0012c6b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c6e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c71:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c76:	c1 e5 15             	shl    ebp,0x15
c0012c79:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c7e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c84:	29 eb                	sub    ebx,ebp
c0012c86:	29 ee                	sub    esi,ebp
c0012c88:	e8 9f d2 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012c8d:	83 ec 0c             	sub    esp,0xc
c0012c90:	68 03 04 00 00       	push   0x403
c0012c95:	6a 01                	push   0x1
c0012c97:	53                   	push   ebx
c0012c98:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c9e:	50                   	push   eax
c0012c9f:	57                   	push   edi
c0012ca0:	e8 f9 f8 ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ca5:	83 c4 20             	add    esp,0x20
c0012ca8:	39 f3                	cmp    ebx,esi
c0012caa:	75 dc                	jne    c0012c88 <mapVASFirstTime+0x33>
c0012cac:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012cb1:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012cb6:	29 ee                	sub    esi,ebp
c0012cb8:	29 e8                	sub    eax,ebp
c0012cba:	89 c5                	mov    ebp,eax
c0012cbc:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012cc0:	19 db                	sbb    ebx,ebx
c0012cc2:	e8 65 d2 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0012cc7:	83 e3 04             	and    ebx,0x4
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	81 c3 03 04 00 00    	add    ebx,0x403
c0012cd3:	53                   	push   ebx
c0012cd4:	6a 01                	push   0x1
c0012cd6:	56                   	push   esi
c0012cd7:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cdd:	50                   	push   eax
c0012cde:	57                   	push   edi
c0012cdf:	e8 ba f8 ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ce4:	83 c4 20             	add    esp,0x20
c0012ce7:	39 f5                	cmp    ebp,esi
c0012ce9:	75 d1                	jne    c0012cbc <mapVASFirstTime+0x67>
c0012ceb:	0f 20 d8             	mov    eax,cr3
c0012cee:	0f 22 d8             	mov    cr3,eax
c0012cf1:	83 c4 0c             	add    esp,0xc
c0012cf4:	5b                   	pop    ebx
c0012cf5:	5e                   	pop    esi
c0012cf6:	5f                   	pop    edi
c0012cf7:	5d                   	pop    ebp
c0012cf8:	c3                   	ret    
c0012cf9:	83 ec 0c             	sub    esp,0xc
c0012cfc:	68 e6 b1 02 c0       	push   0xc002b1e6
c0012d01:	e8 71 01 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012d06:	83 c4 10             	add    esp,0x10
c0012d09:	83 c4 0c             	add    esp,0xc
c0012d0c:	5b                   	pop    ebx
c0012d0d:	5e                   	pop    esi
c0012d0e:	5f                   	pop    edi
c0012d0f:	5d                   	pop    ebp
c0012d10:	c3                   	ret    

c0012d11 <__cxa_atexit>:
c0012d11:	31 c0                	xor    eax,eax
c0012d13:	c3                   	ret    

c0012d14 <__cxa_finalize>:
c0012d14:	c3                   	ret    

c0012d15 <__stack_chk_fail>:
c0012d15:	55                   	push   ebp
c0012d16:	89 e5                	mov    ebp,esp
c0012d18:	83 ec 14             	sub    esp,0x14
c0012d1b:	68 ff b1 02 c0       	push   0xc002b1ff
c0012d20:	e8 52 01 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012d25:	58                   	pop    eax
c0012d26:	5a                   	pop    edx
c0012d27:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d2a:	68 4f b2 02 c0       	push   0xc002b24f
c0012d2f:	e8 43 01 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012d34:	59                   	pop    ecx
c0012d35:	58                   	pop    eax
c0012d36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d39:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d3c:	68 4f b2 02 c0       	push   0xc002b24f
c0012d41:	e8 31 01 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012d46:	5a                   	pop    edx
c0012d47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d4a:	59                   	pop    ecx
c0012d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d4d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d50:	68 4f b2 02 c0       	push   0xc002b24f
c0012d55:	e8 1d 01 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012d5a:	5a                   	pop    edx
c0012d5b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d5e:	59                   	pop    ecx
c0012d5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d63:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d66:	68 4f b2 02 c0       	push   0xc002b24f
c0012d6b:	e8 07 01 00 00       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0012d70:	c7 04 24 57 b2 02 c0 	mov    DWORD PTR [esp],0xc002b257
c0012d77:	e8 e9 7a 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0012d7c:	83 c4 10             	add    esp,0x10
c0012d7f:	c9                   	leave  
c0012d80:	c3                   	ret    

c0012d81 <__cxa_pure_virtual>:
c0012d81:	83 ec 18             	sub    esp,0x18
c0012d84:	68 6f b2 02 c0       	push   0xc002b26f
c0012d89:	e8 d7 7a 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0012d8e:	83 c4 1c             	add    esp,0x1c
c0012d91:	c3                   	ret    

c0012d92 <operator new[](unsigned long)>:
c0012d92:	e9 29 cb ff ff       	jmp    c000f8c0 <malloc>

c0012d97 <operator delete(void*, unsigned long)>:
c0012d97:	e9 44 cb ff ff       	jmp    c000f8e0 <rfree>

c0012d9c <operator delete[](void*)>:
c0012d9c:	e9 3f cb ff ff       	jmp    c000f8e0 <rfree>

c0012da1 <operator delete[](void*, unsigned long)>:
c0012da1:	e9 3a cb ff ff       	jmp    c000f8e0 <rfree>

c0012da6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012da6:	57                   	push   edi
c0012da7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dac:	56                   	push   esi
c0012dad:	be 84 b2 02 c0       	mov    esi,0xc002b284
c0012db2:	53                   	push   ebx
c0012db3:	83 ec 40             	sub    esp,0x40
c0012db6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012dba:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012dbe:	fc                   	cld    
c0012dbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012dc1:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012dc5:	83 f9 3e             	cmp    ecx,0x3e
c0012dc8:	7e 05                	jle    c0012dcf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012dca:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012dcf:	89 df                	mov    edi,ebx
c0012dd1:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012dd5:	eb 02                	jmp    c0012dd9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012dd7:	89 c7                	mov    edi,eax
c0012dd9:	31 d2                	xor    edx,edx
c0012ddb:	46                   	inc    esi
c0012ddc:	89 f8                	mov    eax,edi
c0012dde:	f7 f1                	div    ecx
c0012de0:	39 cf                	cmp    edi,ecx
c0012de2:	73 f3                	jae    c0012dd7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012de4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012de7:	eb 02                	jmp    c0012deb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012de9:	89 c3                	mov    ebx,eax
c0012deb:	31 d2                	xor    edx,edx
c0012ded:	4e                   	dec    esi
c0012dee:	89 d8                	mov    eax,ebx
c0012df0:	f7 f1                	div    ecx
c0012df2:	39 cb                	cmp    ebx,ecx
c0012df4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012df8:	88 16                	mov    BYTE PTR [esi],dl
c0012dfa:	73 ed                	jae    c0012de9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dfc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e00:	83 c4 40             	add    esp,0x40
c0012e03:	5b                   	pop    ebx
c0012e04:	5e                   	pop    esi
c0012e05:	5f                   	pop    edi
c0012e06:	c3                   	ret    

c0012e07 <Dbg::logc(char)>:
c0012e07:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e0b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e10:	ec                   	in     al,dx
c0012e11:	a8 20                	test   al,0x20
c0012e13:	74 fb                	je     c0012e10 <Dbg::logc(char)+0x9>
c0012e15:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e1a:	88 c8                	mov    al,cl
c0012e1c:	ee                   	out    dx,al
c0012e1d:	c3                   	ret    

c0012e1e <Dbg::logs(char*)>:
c0012e1e:	53                   	push   ebx
c0012e1f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e23:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e26:	84 c0                	test   al,al
c0012e28:	74 0f                	je     c0012e39 <Dbg::logs(char*)+0x1b>
c0012e2a:	50                   	push   eax
c0012e2b:	43                   	inc    ebx
c0012e2c:	e8 d6 ff ff ff       	call   c0012e07 <Dbg::logc(char)>
c0012e31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e34:	5a                   	pop    edx
c0012e35:	84 c0                	test   al,al
c0012e37:	75 f1                	jne    c0012e2a <Dbg::logs(char*)+0xc>
c0012e39:	5b                   	pop    ebx
c0012e3a:	c3                   	ret    

c0012e3b <Dbg::logWriteInt(unsigned int)>:
c0012e3b:	83 ec 10             	sub    esp,0x10
c0012e3e:	6a 0a                	push   0xa
c0012e40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e44:	50                   	push   eax
c0012e45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e49:	e8 58 ff ff ff       	call   c0012da6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e4e:	50                   	push   eax
c0012e4f:	e8 ca ff ff ff       	call   c0012e1e <Dbg::logs(char*)>
c0012e54:	83 c4 20             	add    esp,0x20
c0012e57:	c3                   	ret    

c0012e58 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e58:	83 ec 10             	sub    esp,0x10
c0012e5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e5f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e63:	50                   	push   eax
c0012e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e68:	e8 39 ff ff ff       	call   c0012da6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e6d:	50                   	push   eax
c0012e6e:	e8 ab ff ff ff       	call   c0012e1e <Dbg::logs(char*)>
c0012e73:	83 c4 20             	add    esp,0x20
c0012e76:	c3                   	ret    

c0012e77 <Dbg::kprintf(char const*, ...)>:
c0012e77:	55                   	push   ebp
c0012e78:	57                   	push   edi
c0012e79:	56                   	push   esi
c0012e7a:	53                   	push   ebx
c0012e7b:	83 ec 0c             	sub    esp,0xc
c0012e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e82:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e8a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e8d:	84 c0                	test   al,al
c0012e8f:	74 4a                	je     c0012edb <Dbg::kprintf(char const*, ...)+0x64>
c0012e91:	31 db                	xor    ebx,ebx
c0012e93:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e96:	3c 25                	cmp    al,0x25
c0012e98:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e9b:	0f 85 e4 00 00 00    	jne    c0012f85 <Dbg::kprintf(char const*, ...)+0x10e>
c0012ea1:	83 c3 02             	add    ebx,0x2
c0012ea4:	8a 07                	mov    al,BYTE PTR [edi]
c0012ea6:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ea9:	83 e8 25             	sub    eax,0x25
c0012eac:	3c 53                	cmp    al,0x53
c0012eae:	0f 87 ba 00 00 00    	ja     c0012f6e <Dbg::kprintf(char const*, ...)+0xf7>
c0012eb4:	0f b6 c0             	movzx  eax,al
c0012eb7:	ff 24 85 c4 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4d3c]
c0012ebe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ec2:	89 c8                	mov    eax,ecx
c0012ec4:	83 c1 04             	add    ecx,0x4
c0012ec7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ecb:	ff 30                	push   DWORD PTR [eax]
c0012ecd:	e8 4c ff ff ff       	call   c0012e1e <Dbg::logs(char*)>
c0012ed2:	58                   	pop    eax
c0012ed3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ed7:	84 c0                	test   al,al
c0012ed9:	75 b8                	jne    c0012e93 <Dbg::kprintf(char const*, ...)+0x1c>
c0012edb:	83 c4 0c             	add    esp,0xc
c0012ede:	5b                   	pop    ebx
c0012edf:	5e                   	pop    esi
c0012ee0:	5f                   	pop    edi
c0012ee1:	5d                   	pop    ebp
c0012ee2:	c3                   	ret    
c0012ee3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ee7:	89 d0                	mov    eax,edx
c0012ee9:	83 c2 04             	add    edx,0x4
c0012eec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ef0:	ff 30                	push   DWORD PTR [eax]
c0012ef2:	e8 44 ff ff ff       	call   c0012e3b <Dbg::logWriteInt(unsigned int)>
c0012ef7:	58                   	pop    eax
c0012ef8:	eb d9                	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012efa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012efe:	89 d0                	mov    eax,edx
c0012f00:	83 c2 04             	add    edx,0x4
c0012f03:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f0a:	50                   	push   eax
c0012f0b:	e8 f7 fe ff ff       	call   c0012e07 <Dbg::logc(char)>
c0012f10:	58                   	pop    eax
c0012f11:	eb c0                	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f17:	89 c8                	mov    eax,ecx
c0012f19:	83 c1 04             	add    ecx,0x4
c0012f1c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f20:	ff 30                	push   DWORD PTR [eax]
c0012f22:	e8 14 ff ff ff       	call   c0012e3b <Dbg::logWriteInt(unsigned int)>
c0012f27:	5f                   	pop    edi
c0012f28:	eb a9                	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f2e:	89 c8                	mov    eax,ecx
c0012f30:	83 c1 04             	add    ecx,0x4
c0012f33:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f37:	6a 10                	push   0x10
c0012f39:	ff 30                	push   DWORD PTR [eax]
c0012f3b:	e8 18 ff ff ff       	call   c0012e58 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f40:	59                   	pop    ecx
c0012f41:	5f                   	pop    edi
c0012f42:	eb 8f                	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f48:	89 d0                	mov    eax,edx
c0012f4a:	83 c2 08             	add    edx,0x8
c0012f4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f51:	6a 10                	push   0x10
c0012f53:	ff 30                	push   DWORD PTR [eax]
c0012f55:	e8 fe fe ff ff       	call   c0012e58 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f5a:	58                   	pop    eax
c0012f5b:	5a                   	pop    edx
c0012f5c:	e9 72 ff ff ff       	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f61:	6a 25                	push   0x25
c0012f63:	e8 9f fe ff ff       	call   c0012e07 <Dbg::logc(char)>
c0012f68:	58                   	pop    eax
c0012f69:	e9 65 ff ff ff       	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f6e:	6a 25                	push   0x25
c0012f70:	e8 92 fe ff ff       	call   c0012e07 <Dbg::logc(char)>
c0012f75:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f78:	50                   	push   eax
c0012f79:	e8 89 fe ff ff       	call   c0012e07 <Dbg::logc(char)>
c0012f7e:	5a                   	pop    edx
c0012f7f:	59                   	pop    ecx
c0012f80:	e9 4e ff ff ff       	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f85:	50                   	push   eax
c0012f86:	89 eb                	mov    ebx,ebp
c0012f88:	e8 7a fe ff ff       	call   c0012e07 <Dbg::logc(char)>
c0012f8d:	89 fd                	mov    ebp,edi
c0012f8f:	58                   	pop    eax
c0012f90:	e9 3e ff ff ff       	jmp    c0012ed3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f95:	90                   	nop

c0012f96 <File::read(unsigned long long, void*, int*)>:
c0012f96:	53                   	push   ebx
c0012f97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f9f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fa6:	3c 19                	cmp    al,0x19
c0012fa8:	77 35                	ja     c0012fdf <File::read(unsigned long long, void*, int*)+0x49>
c0012faa:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c0012fb1:	85 c0                	test   eax,eax
c0012fb3:	74 2a                	je     c0012fdf <File::read(unsigned long long, void*, int*)+0x49>
c0012fb5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fbb:	85 c0                	test   eax,eax
c0012fbd:	74 20                	je     c0012fdf <File::read(unsigned long long, void*, int*)+0x49>
c0012fbf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fc3:	74 21                	je     c0012fe6 <File::read(unsigned long long, void*, int*)+0x50>
c0012fc5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fc7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fcb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fd9:	5b                   	pop    ebx
c0012fda:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012fdd:	ff e0                	jmp    eax
c0012fdf:	b8 0b 00 00 00       	mov    eax,0xb
c0012fe4:	eb 05                	jmp    c0012feb <File::read(unsigned long long, void*, int*)+0x55>
c0012fe6:	b8 05 00 00 00       	mov    eax,0x5
c0012feb:	5b                   	pop    ebx
c0012fec:	c3                   	ret    
c0012fed:	90                   	nop

c0012fee <File::write(unsigned long long, void*, int*)>:
c0012fee:	53                   	push   ebx
c0012fef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ff3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ff7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ffe:	3c 19                	cmp    al,0x19
c0013000:	77 35                	ja     c0013037 <File::write(unsigned long long, void*, int*)+0x49>
c0013002:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c0013009:	85 c0                	test   eax,eax
c001300b:	74 2a                	je     c0013037 <File::write(unsigned long long, void*, int*)+0x49>
c001300d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013013:	85 c0                	test   eax,eax
c0013015:	74 20                	je     c0013037 <File::write(unsigned long long, void*, int*)+0x49>
c0013017:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001301b:	74 21                	je     c001303e <File::write(unsigned long long, void*, int*)+0x50>
c001301d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001301f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013023:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001302d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013031:	5b                   	pop    ebx
c0013032:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013035:	ff e0                	jmp    eax
c0013037:	b8 0b 00 00 00       	mov    eax,0xb
c001303c:	eb 05                	jmp    c0013043 <File::write(unsigned long long, void*, int*)+0x55>
c001303e:	b8 05 00 00 00       	mov    eax,0x5
c0013043:	5b                   	pop    ebx
c0013044:	c3                   	ret    
c0013045:	90                   	nop

c0013046 <Directory::read(unsigned long long, void*, int*)>:
c0013046:	53                   	push   ebx
c0013047:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001304b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001304f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013056:	3c 19                	cmp    al,0x19
c0013058:	77 35                	ja     c001308f <Directory::read(unsigned long long, void*, int*)+0x49>
c001305a:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c0013061:	85 c0                	test   eax,eax
c0013063:	74 2a                	je     c001308f <Directory::read(unsigned long long, void*, int*)+0x49>
c0013065:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001306b:	85 c0                	test   eax,eax
c001306d:	74 20                	je     c001308f <Directory::read(unsigned long long, void*, int*)+0x49>
c001306f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013073:	74 21                	je     c0013096 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013075:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013077:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001307b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013081:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013085:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013089:	5b                   	pop    ebx
c001308a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001308d:	ff e0                	jmp    eax
c001308f:	b8 0b 00 00 00       	mov    eax,0xb
c0013094:	eb 05                	jmp    c001309b <Directory::read(unsigned long long, void*, int*)+0x55>
c0013096:	b8 05 00 00 00       	mov    eax,0x5
c001309b:	5b                   	pop    ebx
c001309c:	c3                   	ret    
c001309d:	90                   	nop

c001309e <Directory::write(unsigned long long, void*, int*)>:
c001309e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130a2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130a9:	b8 0b 00 00 00       	mov    eax,0xb
c00130ae:	80 fa 19             	cmp    dl,0x19
c00130b1:	77 18                	ja     c00130cb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130b3:	8b 14 95 e0 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b20]
c00130ba:	85 d2                	test   edx,edx
c00130bc:	74 0d                	je     c00130cb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130be:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130c5:	19 c0                	sbb    eax,eax
c00130c7:	83 e0 0a             	and    eax,0xa
c00130ca:	40                   	inc    eax
c00130cb:	c3                   	ret    

c00130cc <File::isAtty()>:
c00130cc:	31 c0                	xor    eax,eax
c00130ce:	c3                   	ret    
c00130cf:	90                   	nop

c00130d0 <Directory::isAtty()>:
c00130d0:	31 c0                	xor    eax,eax
c00130d2:	c3                   	ret    
c00130d3:	90                   	nop

c00130d4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130d4:	b8 0a 00 00 00       	mov    eax,0xa
c00130d9:	c3                   	ret    

c00130da <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130da:	b8 0a 00 00 00       	mov    eax,0xa
c00130df:	c3                   	ret    

c00130e0 <Filesystem::getFileFirstSector(char const*)>:
c00130e0:	31 c0                	xor    eax,eax
c00130e2:	31 d2                	xor    edx,edx
c00130e4:	c3                   	ret    
c00130e5:	90                   	nop

c00130e6 <File::~File()>:
c00130e6:	83 ec 0c             	sub    esp,0xc
c00130e9:	ba 84 b4 02 c0       	mov    edx,0xc002b484
c00130ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f2:	89 10                	mov    DWORD PTR [eax],edx
c00130f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f8:	83 ec 0c             	sub    esp,0xc
c00130fb:	50                   	push   eax
c00130fc:	e8 0f e7 ff ff       	call   c0011810 <UnixFile::~UnixFile()>
c0013101:	83 c4 10             	add    esp,0x10
c0013104:	90                   	nop
c0013105:	83 c4 0c             	add    esp,0xc
c0013108:	c3                   	ret    
c0013109:	90                   	nop

c001310a <File::~File()>:
c001310a:	83 ec 0c             	sub    esp,0xc
c001310d:	83 ec 0c             	sub    esp,0xc
c0013110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013114:	e8 cd ff ff ff       	call   c00130e6 <File::~File()>
c0013119:	83 c4 10             	add    esp,0x10
c001311c:	83 ec 08             	sub    esp,0x8
c001311f:	68 14 01 00 00       	push   0x114
c0013124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013128:	e8 6a fc ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	83 c4 0c             	add    esp,0xc
c0013133:	c3                   	ret    

c0013134 <Directory::~Directory()>:
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	ba a0 b4 02 c0       	mov    edx,0xc002b4a0
c001313c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013140:	89 10                	mov    DWORD PTR [eax],edx
c0013142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013146:	83 ec 0c             	sub    esp,0xc
c0013149:	50                   	push   eax
c001314a:	e8 c1 e6 ff ff       	call   c0011810 <UnixFile::~UnixFile()>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	90                   	nop
c0013153:	83 c4 0c             	add    esp,0xc
c0013156:	c3                   	ret    
c0013157:	90                   	nop

c0013158 <Directory::~Directory()>:
c0013158:	83 ec 0c             	sub    esp,0xc
c001315b:	83 ec 0c             	sub    esp,0xc
c001315e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013162:	e8 cd ff ff ff       	call   c0013134 <Directory::~Directory()>
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	83 ec 08             	sub    esp,0x8
c001316d:	68 14 01 00 00       	push   0x114
c0013172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013176:	e8 1c fc ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	83 c4 0c             	add    esp,0xc
c0013181:	c3                   	ret    

c0013182 <Filesystem::Filesystem()>:
c0013182:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c0013187:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001318b:	89 10                	mov    DWORD PTR [eax],edx
c001318d:	8b 15 54 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f054
c0013193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013197:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001319a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001319e:	a3 54 f0 02 c0       	mov    ds:0xc002f054,eax
c00131a3:	90                   	nop
c00131a4:	c3                   	ret    
c00131a5:	90                   	nop

c00131a6 <Filesystem::~Filesystem()>:
c00131a6:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c00131ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131af:	89 10                	mov    DWORD PTR [eax],edx
c00131b1:	90                   	nop
c00131b2:	c3                   	ret    
c00131b3:	90                   	nop

c00131b4 <Filesystem::~Filesystem()>:
c00131b4:	83 ec 0c             	sub    esp,0xc
c00131b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131bb:	e8 e6 ff ff ff       	call   c00131a6 <Filesystem::~Filesystem()>
c00131c0:	83 c4 04             	add    esp,0x4
c00131c3:	83 ec 08             	sub    esp,0x8
c00131c6:	6a 08                	push   0x8
c00131c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131cc:	e8 c6 fb ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00131d1:	83 c4 10             	add    esp,0x10
c00131d4:	83 c4 0c             	add    esp,0xc
c00131d7:	c3                   	ret    

c00131d8 <Fs::getcwd(Process*, char*, int)>:
c00131d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131dc:	31 c0                	xor    eax,eax
c00131de:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131e1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131e5:	7d 15                	jge    c00131fc <Fs::getcwd(Process*, char*, int)+0x24>
c00131e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131eb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131f2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131f5:	84 c9                	test   cl,cl
c00131f7:	74 06                	je     c00131ff <Fs::getcwd(Process*, char*, int)+0x27>
c00131f9:	40                   	inc    eax
c00131fa:	eb e2                	jmp    c00131de <Fs::getcwd(Process*, char*, int)+0x6>
c00131fc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131ff:	31 c0                	xor    eax,eax
c0013201:	c3                   	ret    

c0013202 <Fs::initVFS()>:
c0013202:	83 ec 18             	sub    esp,0x18
c0013205:	6a 08                	push   0x8
c0013207:	e8 b4 c6 ff ff       	call   c000f8c0 <malloc>
c001320c:	89 04 24             	mov    DWORD PTR [esp],eax
c001320f:	e8 e6 e4 00 00       	call   c00216fa <FAT::FAT()>
c0013214:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001321b:	e8 a0 c6 ff ff       	call   c000f8c0 <malloc>
c0013220:	89 04 24             	mov    DWORD PTR [esp],eax
c0013223:	e8 2a f7 00 00       	call   c0022952 <ISO9660::ISO9660()>
c0013228:	83 c4 1c             	add    esp,0x1c
c001322b:	c3                   	ret    

c001322c <Fs::standardiseFiles(char*, char const*, char const*)>:
c001322c:	55                   	push   ebp
c001322d:	57                   	push   edi
c001322e:	56                   	push   esi
c001322f:	53                   	push   ebx
c0013230:	81 ec 10 04 00 00    	sub    esp,0x410
c0013236:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001323d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013244:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001324b:	68 00 04 00 00       	push   0x400
c0013250:	6a 00                	push   0x0
c0013252:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013256:	56                   	push   esi
c0013257:	e8 10 d5 fe ff       	call   c000076c <memset>
c001325c:	83 c4 10             	add    esp,0x10
c001325f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013263:	75 0b                	jne    c0013270 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013265:	50                   	push   eax
c0013266:	50                   	push   eax
c0013267:	57                   	push   edi
c0013268:	56                   	push   esi
c0013269:	e8 ba d5 fe ff       	call   c0000828 <strcpy>
c001326e:	eb 41                	jmp    c00132b1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013270:	8a 07                	mov    al,BYTE PTR [edi]
c0013272:	3c 5c                	cmp    al,0x5c
c0013274:	74 04                	je     c001327a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013276:	3c 2f                	cmp    al,0x2f
c0013278:	75 18                	jne    c0013292 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001327a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001327d:	3c 60                	cmp    al,0x60
c001327f:	7e 03                	jle    c0013284 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013281:	83 e8 20             	sub    eax,0x20
c0013284:	88 04 24             	mov    BYTE PTR [esp],al
c0013287:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001328e:	50                   	push   eax
c001328f:	50                   	push   eax
c0013290:	eb 18                	jmp    c00132aa <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013292:	50                   	push   eax
c0013293:	50                   	push   eax
c0013294:	55                   	push   ebp
c0013295:	56                   	push   esi
c0013296:	e8 8d d5 fe ff       	call   c0000828 <strcpy>
c001329b:	5a                   	pop    edx
c001329c:	59                   	pop    ecx
c001329d:	68 31 cc 02 c0       	push   0xc002cc31
c00132a2:	56                   	push   esi
c00132a3:	e8 c0 d6 fe ff       	call   c0000968 <strcat>
c00132a8:	5d                   	pop    ebp
c00132a9:	58                   	pop    eax
c00132aa:	57                   	push   edi
c00132ab:	56                   	push   esi
c00132ac:	e8 b7 d6 fe ff       	call   c0000968 <strcat>
c00132b1:	83 c4 10             	add    esp,0x10
c00132b4:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132b7:	3c 60                	cmp    al,0x60
c00132b9:	7e 03                	jle    c00132be <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132bb:	83 e8 20             	sub    eax,0x20
c00132be:	88 04 24             	mov    BYTE PTR [esp],al
c00132c1:	88 03                	mov    BYTE PTR [ebx],al
c00132c3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132ca:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132d0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132d4:	bf 03 00 00 00       	mov    edi,0x3
c00132d9:	b8 03 00 00 00       	mov    eax,0x3
c00132de:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132e1:	84 d2                	test   dl,dl
c00132e3:	0f 84 91 00 00 00    	je     c001337a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132e9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132ec:	80 fa 5c             	cmp    dl,0x5c
c00132ef:	74 05                	je     c00132f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132f1:	80 fa 2f             	cmp    dl,0x2f
c00132f4:	75 12                	jne    c0013308 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132f6:	89 c5                	mov    ebp,eax
c00132f8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132fd:	74 09                	je     c0013308 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132ff:	40                   	inc    eax
c0013300:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013304:	89 cf                	mov    edi,ecx
c0013306:	eb d6                	jmp    c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013308:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001330d:	75 5b                	jne    c001336a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001330f:	80 fa 2e             	cmp    dl,0x2e
c0013312:	75 56                	jne    c001336a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013314:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013318:	74 19                	je     c0013333 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001331a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001331f:	74 53                	je     c0013374 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013321:	89 f9                	mov    ecx,edi
c0013323:	41                   	inc    ecx
c0013324:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013327:	80 fa 2f             	cmp    dl,0x2f
c001332a:	74 f7                	je     c0013323 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001332c:	80 fa 5c             	cmp    dl,0x5c
c001332f:	74 f2                	je     c0013323 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013331:	eb d1                	jmp    c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013333:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013338:	74 3a                	je     c0013374 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001333a:	83 f8 03             	cmp    eax,0x3
c001333d:	74 c5                	je     c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333f:	41                   	inc    ecx
c0013340:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013343:	80 fa 2f             	cmp    dl,0x2f
c0013346:	74 f7                	je     c001333f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013348:	80 fa 5c             	cmp    dl,0x5c
c001334b:	74 f2                	je     c001333f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001334d:	48                   	dec    eax
c001334e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013352:	75 06                	jne    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013354:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013358:	eb f3                	jmp    c001334d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001335a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001335e:	74 07                	je     c0013367 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013360:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013364:	48                   	dec    eax
c0013365:	eb f3                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013367:	40                   	inc    eax
c0013368:	eb 9a                	jmp    c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001336a:	80 fa 2f             	cmp    dl,0x2f
c001336d:	74 95                	je     c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001336f:	80 fa 5c             	cmp    dl,0x5c
c0013372:	74 90                	je     c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013374:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013377:	40                   	inc    eax
c0013378:	eb 8a                	jmp    c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001337a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001337e:	83 ec 0c             	sub    esp,0xc
c0013381:	53                   	push   ebx
c0013382:	e8 01 d4 fe ff       	call   c0000788 <strlen>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001338f:	75 26                	jne    c00133b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013391:	83 ec 0c             	sub    esp,0xc
c0013394:	53                   	push   ebx
c0013395:	e8 ee d3 fe ff       	call   c0000788 <strlen>
c001339a:	83 c4 10             	add    esp,0x10
c001339d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133a2:	74 26                	je     c00133ca <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	53                   	push   ebx
c00133a8:	e8 db d3 fe ff       	call   c0000788 <strlen>
c00133ad:	83 c4 10             	add    esp,0x10
c00133b0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133b5:	eb c7                	jmp    c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133b7:	83 ec 0c             	sub    esp,0xc
c00133ba:	53                   	push   ebx
c00133bb:	e8 c8 d3 fe ff       	call   c0000788 <strlen>
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133c8:	74 c7                	je     c0013391 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133ca:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133d0:	5b                   	pop    ebx
c00133d1:	5e                   	pop    esi
c00133d2:	5f                   	pop    edi
c00133d3:	5d                   	pop    ebp
c00133d4:	c3                   	ret    
c00133d5:	90                   	nop

c00133d6 <File::File(char const*, Process*)>:
c00133d6:	83 ec 0c             	sub    esp,0xc
c00133d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133dd:	83 ec 08             	sub    esp,0x8
c00133e0:	6a 00                	push   0x0
c00133e2:	50                   	push   eax
c00133e3:	e8 46 e2 ff ff       	call   c001162e <UnixFile::UnixFile(int)>
c00133e8:	83 c4 10             	add    esp,0x10
c00133eb:	ba 84 b4 02 c0       	mov    edx,0xc002b484
c00133f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f4:	89 10                	mov    DWORD PTR [eax],edx
c00133f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013404:	83 c0 0d             	add    eax,0xd
c0013407:	83 ec 04             	sub    esp,0x4
c001340a:	52                   	push   edx
c001340b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001340f:	50                   	push   eax
c0013410:	e8 17 fe ff ff       	call   c001322c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013415:	83 c4 10             	add    esp,0x10
c0013418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001341f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001342c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013430:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013434:	90                   	nop
c0013435:	83 c4 0c             	add    esp,0xc
c0013438:	c3                   	ret    
c0013439:	90                   	nop

c001343a <File::open(FileOpenMode)>:
c001343a:	53                   	push   ebx
c001343b:	b8 0b 00 00 00       	mov    eax,0xb
c0013440:	83 ec 08             	sub    esp,0x8
c0013443:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013447:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001344e:	80 fa 19             	cmp    dl,0x19
c0013451:	77 40                	ja     c0013493 <File::open(FileOpenMode)+0x59>
c0013453:	8b 14 95 e0 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b20]
c001345a:	85 d2                	test   edx,edx
c001345c:	74 35                	je     c0013493 <File::open(FileOpenMode)+0x59>
c001345e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013464:	85 d2                	test   edx,edx
c0013466:	74 2b                	je     c0013493 <File::open(FileOpenMode)+0x59>
c0013468:	b8 06 00 00 00       	mov    eax,0x6
c001346d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013471:	75 20                	jne    c0013493 <File::open(FileOpenMode)+0x59>
c0013473:	8b 02                	mov    eax,DWORD PTR [edx]
c0013475:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001347b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001347f:	51                   	push   ecx
c0013480:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013483:	51                   	push   ecx
c0013484:	52                   	push   edx
c0013485:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013488:	83 c4 10             	add    esp,0x10
c001348b:	85 c0                	test   eax,eax
c001348d:	75 04                	jne    c0013493 <File::open(FileOpenMode)+0x59>
c001348f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013493:	83 c4 08             	add    esp,0x8
c0013496:	5b                   	pop    ebx
c0013497:	c3                   	ret    

c0013498 <File::close()>:
c0013498:	53                   	push   ebx
c0013499:	b8 0b 00 00 00       	mov    eax,0xb
c001349e:	83 ec 08             	sub    esp,0x8
c00134a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134ac:	80 fa 19             	cmp    dl,0x19
c00134af:	77 41                	ja     c00134f2 <File::close()+0x5a>
c00134b1:	8b 1c 95 e0 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0b20]
c00134b8:	85 db                	test   ebx,ebx
c00134ba:	74 36                	je     c00134f2 <File::close()+0x5a>
c00134bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134c3:	74 2d                	je     c00134f2 <File::close()+0x5a>
c00134c5:	b8 05 00 00 00       	mov    eax,0x5
c00134ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134ce:	74 22                	je     c00134f2 <File::close()+0x5a>
c00134d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134d4:	8b 04 95 e0 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b20]
c00134db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134e1:	53                   	push   ebx
c00134e2:	53                   	push   ebx
c00134e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00134e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134eb:	50                   	push   eax
c00134ec:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134ef:	83 c4 10             	add    esp,0x10
c00134f2:	83 c4 08             	add    esp,0x8
c00134f5:	5b                   	pop    ebx
c00134f6:	c3                   	ret    
c00134f7:	90                   	nop

c00134f8 <File::seek(unsigned long long)>:
c00134f8:	56                   	push   esi
c00134f9:	53                   	push   ebx
c00134fa:	b8 0b 00 00 00       	mov    eax,0xb
c00134ff:	51                   	push   ecx
c0013500:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013504:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013508:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001350f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013513:	80 fa 19             	cmp    dl,0x19
c0013516:	77 31                	ja     c0013549 <File::seek(unsigned long long)+0x51>
c0013518:	8b 14 95 e0 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b20]
c001351f:	85 d2                	test   edx,edx
c0013521:	74 26                	je     c0013549 <File::seek(unsigned long long)+0x51>
c0013523:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013529:	85 d2                	test   edx,edx
c001352b:	74 1c                	je     c0013549 <File::seek(unsigned long long)+0x51>
c001352d:	b8 05 00 00 00       	mov    eax,0x5
c0013532:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013536:	74 11                	je     c0013549 <File::seek(unsigned long long)+0x51>
c0013538:	8b 02                	mov    eax,DWORD PTR [edx]
c001353a:	53                   	push   ebx
c001353b:	51                   	push   ecx
c001353c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013542:	52                   	push   edx
c0013543:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013546:	83 c4 10             	add    esp,0x10
c0013549:	5a                   	pop    edx
c001354a:	5b                   	pop    ebx
c001354b:	5e                   	pop    esi
c001354c:	c3                   	ret    
c001354d:	90                   	nop

c001354e <File::tell(unsigned long long*)>:
c001354e:	83 ec 0c             	sub    esp,0xc
c0013551:	b8 0b 00 00 00       	mov    eax,0xb
c0013556:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001355a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013561:	80 fa 19             	cmp    dl,0x19
c0013564:	77 34                	ja     c001359a <File::tell(unsigned long long*)+0x4c>
c0013566:	8b 14 95 e0 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b20]
c001356d:	85 d2                	test   edx,edx
c001356f:	74 29                	je     c001359a <File::tell(unsigned long long*)+0x4c>
c0013571:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013577:	85 d2                	test   edx,edx
c0013579:	74 1f                	je     c001359a <File::tell(unsigned long long*)+0x4c>
c001357b:	b8 05 00 00 00       	mov    eax,0x5
c0013580:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013584:	74 14                	je     c001359a <File::tell(unsigned long long*)+0x4c>
c0013586:	50                   	push   eax
c0013587:	8b 02                	mov    eax,DWORD PTR [edx]
c0013589:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001358d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013593:	52                   	push   edx
c0013594:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013597:	83 c4 10             	add    esp,0x10
c001359a:	83 c4 0c             	add    esp,0xc
c001359d:	c3                   	ret    

c001359e <File::rewind()>:
c001359e:	83 ec 10             	sub    esp,0x10
c00135a1:	6a 00                	push   0x0
c00135a3:	6a 00                	push   0x0
c00135a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a9:	e8 4a ff ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c00135ae:	83 c4 1c             	add    esp,0x1c
c00135b1:	c3                   	ret    

c00135b2 <File::unlink()>:
c00135b2:	83 ec 0c             	sub    esp,0xc
c00135b5:	b8 0b 00 00 00       	mov    eax,0xb
c00135ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135c5:	80 f9 19             	cmp    cl,0x19
c00135c8:	77 2f                	ja     c00135f9 <File::unlink()+0x47>
c00135ca:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c00135d1:	85 c9                	test   ecx,ecx
c00135d3:	74 24                	je     c00135f9 <File::unlink()+0x47>
c00135d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135db:	85 c9                	test   ecx,ecx
c00135dd:	74 1a                	je     c00135f9 <File::unlink()+0x47>
c00135df:	b8 06 00 00 00       	mov    eax,0x6
c00135e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135e8:	75 0f                	jne    c00135f9 <File::unlink()+0x47>
c00135ea:	83 c2 0d             	add    edx,0xd
c00135ed:	50                   	push   eax
c00135ee:	50                   	push   eax
c00135ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135f1:	52                   	push   edx
c00135f2:	51                   	push   ecx
c00135f3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135f6:	83 c4 10             	add    esp,0x10
c00135f9:	83 c4 0c             	add    esp,0xc
c00135fc:	c3                   	ret    
c00135fd:	90                   	nop

c00135fe <File::rename(char const*)>:
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	b8 0b 00 00 00       	mov    eax,0xb
c0013606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001360a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013611:	80 f9 19             	cmp    cl,0x19
c0013614:	77 32                	ja     c0013648 <File::rename(char const*)+0x4a>
c0013616:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c001361d:	85 c9                	test   ecx,ecx
c001361f:	74 27                	je     c0013648 <File::rename(char const*)+0x4a>
c0013621:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013627:	85 c9                	test   ecx,ecx
c0013629:	74 1d                	je     c0013648 <File::rename(char const*)+0x4a>
c001362b:	b8 06 00 00 00       	mov    eax,0x6
c0013630:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013634:	75 12                	jne    c0013648 <File::rename(char const*)+0x4a>
c0013636:	83 c2 0d             	add    edx,0xd
c0013639:	50                   	push   eax
c001363a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001363c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013640:	52                   	push   edx
c0013641:	51                   	push   ecx
c0013642:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013645:	83 c4 10             	add    esp,0x10
c0013648:	83 c4 0c             	add    esp,0xc
c001364b:	c3                   	ret    

c001364c <File::chfatattr(unsigned char, unsigned char)>:
c001364c:	57                   	push   edi
c001364d:	b8 0b 00 00 00       	mov    eax,0xb
c0013652:	56                   	push   esi
c0013653:	53                   	push   ebx
c0013654:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013658:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001365c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013663:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013667:	80 f9 19             	cmp    cl,0x19
c001366a:	77 37                	ja     c00136a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001366c:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c0013673:	85 c9                	test   ecx,ecx
c0013675:	74 2c                	je     c00136a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013677:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001367d:	85 c9                	test   ecx,ecx
c001367f:	74 22                	je     c00136a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013681:	b8 06 00 00 00       	mov    eax,0x6
c0013686:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001368a:	75 17                	jne    c00136a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001368c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001368e:	89 f0                	mov    eax,esi
c0013690:	83 c2 0d             	add    edx,0xd
c0013693:	0f b6 f0             	movzx  esi,al
c0013696:	0f b6 db             	movzx  ebx,bl
c0013699:	56                   	push   esi
c001369a:	53                   	push   ebx
c001369b:	52                   	push   edx
c001369c:	51                   	push   ecx
c001369d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136a0:	83 c4 10             	add    esp,0x10
c00136a3:	5b                   	pop    ebx
c00136a4:	5e                   	pop    esi
c00136a5:	5f                   	pop    edi
c00136a6:	c3                   	ret    
c00136a7:	90                   	nop

c00136a8 <File::exists()>:
c00136a8:	83 ec 0c             	sub    esp,0xc
c00136ab:	31 c0                	xor    eax,eax
c00136ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136b8:	80 f9 19             	cmp    cl,0x19
c00136bb:	77 24                	ja     c00136e1 <File::exists()+0x39>
c00136bd:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c00136c4:	85 c9                	test   ecx,ecx
c00136c6:	74 19                	je     c00136e1 <File::exists()+0x39>
c00136c8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136ce:	85 c9                	test   ecx,ecx
c00136d0:	74 0f                	je     c00136e1 <File::exists()+0x39>
c00136d2:	83 c2 0d             	add    edx,0xd
c00136d5:	50                   	push   eax
c00136d6:	50                   	push   eax
c00136d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136d9:	52                   	push   edx
c00136da:	51                   	push   ecx
c00136db:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136de:	83 c4 10             	add    esp,0x10
c00136e1:	83 c4 0c             	add    esp,0xc
c00136e4:	c3                   	ret    
c00136e5:	90                   	nop

c00136e6 <File::stat(unsigned long long*, bool*)>:
c00136e6:	56                   	push   esi
c00136e7:	53                   	push   ebx
c00136e8:	50                   	push   eax
c00136e9:	b8 0b 00 00 00       	mov    eax,0xb
c00136ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013701:	80 f9 19             	cmp    cl,0x19
c0013704:	77 3d                	ja     c0013743 <File::stat(unsigned long long*, bool*)+0x5d>
c0013706:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c001370d:	85 c9                	test   ecx,ecx
c001370f:	74 32                	je     c0013743 <File::stat(unsigned long long*, bool*)+0x5d>
c0013711:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013717:	85 c9                	test   ecx,ecx
c0013719:	74 28                	je     c0013743 <File::stat(unsigned long long*, bool*)+0x5d>
c001371b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001371d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013721:	74 13                	je     c0013736 <File::stat(unsigned long long*, bool*)+0x50>
c0013723:	83 ec 04             	sub    esp,0x4
c0013726:	56                   	push   esi
c0013727:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001372d:	51                   	push   ecx
c001372e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013731:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013734:	eb 0a                	jmp    c0013740 <File::stat(unsigned long long*, bool*)+0x5a>
c0013736:	53                   	push   ebx
c0013737:	83 c2 0d             	add    edx,0xd
c001373a:	56                   	push   esi
c001373b:	52                   	push   edx
c001373c:	51                   	push   ecx
c001373d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013740:	83 c4 10             	add    esp,0x10
c0013743:	5a                   	pop    edx
c0013744:	5b                   	pop    ebx
c0013745:	5e                   	pop    esi
c0013746:	c3                   	ret    

c0013747 <Fs::setcwd(Process*, char*)>:
c0013747:	55                   	push   ebp
c0013748:	57                   	push   edi
c0013749:	56                   	push   esi
c001374a:	53                   	push   ebx
c001374b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013751:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013758:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001375e:	57                   	push   edi
c001375f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013766:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001376a:	56                   	push   esi
c001376b:	e8 bc fa ff ff       	call   c001322c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013770:	89 34 24             	mov    DWORD PTR [esp],esi
c0013773:	e8 10 d0 fe ff       	call   c0000788 <strlen>
c0013778:	83 c4 10             	add    esp,0x10
c001377b:	83 f8 02             	cmp    eax,0x2
c001377e:	77 17                	ja     c0013797 <Fs::setcwd(Process*, char*)+0x50>
c0013780:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013785:	83 e8 41             	sub    eax,0x41
c0013788:	83 f8 19             	cmp    eax,0x19
c001378b:	76 24                	jbe    c00137b1 <Fs::setcwd(Process*, char*)+0x6a>
c001378d:	b8 03 00 00 00       	mov    eax,0x3
c0013792:	e9 e0 00 00 00       	jmp    c0013877 <Fs::setcwd(Process*, char*)+0x130>
c0013797:	83 ec 0c             	sub    esp,0xc
c001379a:	56                   	push   esi
c001379b:	e8 e8 cf fe ff       	call   c0000788 <strlen>
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	83 f8 03             	cmp    eax,0x3
c00137a6:	75 34                	jne    c00137dc <Fs::setcwd(Process*, char*)+0x95>
c00137a8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137ad:	75 2d                	jne    c00137dc <Fs::setcwd(Process*, char*)+0x95>
c00137af:	eb cf                	jmp    c0013780 <Fs::setcwd(Process*, char*)+0x39>
c00137b1:	8b 14 85 e0 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b20]
c00137b8:	b8 05 00 00 00       	mov    eax,0x5
c00137bd:	85 d2                	test   edx,edx
c00137bf:	0f 84 b2 00 00 00    	je     c0013877 <Fs::setcwd(Process*, char*)+0x130>
c00137c5:	b8 06 00 00 00       	mov    eax,0x6
c00137ca:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137d1:	0f 85 92 00 00 00    	jne    c0013869 <Fs::setcwd(Process*, char*)+0x122>
c00137d7:	e9 9b 00 00 00       	jmp    c0013877 <Fs::setcwd(Process*, char*)+0x130>
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	68 14 01 00 00       	push   0x114
c00137e4:	e8 d7 c0 ff ff       	call   c000f8c0 <malloc>
c00137e9:	83 c4 0c             	add    esp,0xc
c00137ec:	89 c3                	mov    ebx,eax
c00137ee:	55                   	push   ebp
c00137ef:	56                   	push   esi
c00137f0:	50                   	push   eax
c00137f1:	e8 e0 fb ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c00137f6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137fb:	83 c4 0c             	add    esp,0xc
c00137fe:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013802:	50                   	push   eax
c0013803:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013807:	50                   	push   eax
c0013808:	53                   	push   ebx
c0013809:	e8 d8 fe ff ff       	call   c00136e6 <File::stat(unsigned long long*, bool*)>
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	83 f8 02             	cmp    eax,0x2
c0013814:	74 04                	je     c001381a <Fs::setcwd(Process*, char*)+0xd3>
c0013816:	85 c0                	test   eax,eax
c0013818:	74 1c                	je     c0013836 <Fs::setcwd(Process*, char*)+0xef>
c001381a:	b8 01 00 00 00       	mov    eax,0x1
c001381f:	85 db                	test   ebx,ebx
c0013821:	74 54                	je     c0013877 <Fs::setcwd(Process*, char*)+0x130>
c0013823:	83 ec 0c             	sub    esp,0xc
c0013826:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013828:	53                   	push   ebx
c0013829:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	b8 01 00 00 00       	mov    eax,0x1
c0013834:	eb 41                	jmp    c0013877 <Fs::setcwd(Process*, char*)+0x130>
c0013836:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001383b:	75 1c                	jne    c0013859 <Fs::setcwd(Process*, char*)+0x112>
c001383d:	b8 02 00 00 00       	mov    eax,0x2
c0013842:	85 db                	test   ebx,ebx
c0013844:	74 31                	je     c0013877 <Fs::setcwd(Process*, char*)+0x130>
c0013846:	83 ec 0c             	sub    esp,0xc
c0013849:	8b 03                	mov    eax,DWORD PTR [ebx]
c001384b:	53                   	push   ebx
c001384c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001384f:	83 c4 10             	add    esp,0x10
c0013852:	b8 02 00 00 00       	mov    eax,0x2
c0013857:	eb 1e                	jmp    c0013877 <Fs::setcwd(Process*, char*)+0x130>
c0013859:	85 db                	test   ebx,ebx
c001385b:	74 0c                	je     c0013869 <Fs::setcwd(Process*, char*)+0x122>
c001385d:	83 ec 0c             	sub    esp,0xc
c0013860:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013862:	53                   	push   ebx
c0013863:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	50                   	push   eax
c001386a:	50                   	push   eax
c001386b:	56                   	push   esi
c001386c:	57                   	push   edi
c001386d:	e8 b6 cf fe ff       	call   c0000828 <strcpy>
c0013872:	83 c4 10             	add    esp,0x10
c0013875:	31 c0                	xor    eax,eax
c0013877:	81 c4 1c 02 00 00    	add    esp,0x21c
c001387d:	5b                   	pop    ebx
c001387e:	5e                   	pop    esi
c001387f:	5f                   	pop    edi
c0013880:	5d                   	pop    ebp
c0013881:	c3                   	ret    

c0013882 <Directory::Directory(char const*, Process*)>:
c0013882:	83 ec 0c             	sub    esp,0xc
c0013885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013889:	83 ec 08             	sub    esp,0x8
c001388c:	6a 00                	push   0x0
c001388e:	50                   	push   eax
c001388f:	e8 9a dd ff ff       	call   c001162e <UnixFile::UnixFile(int)>
c0013894:	83 c4 10             	add    esp,0x10
c0013897:	ba a0 b4 02 c0       	mov    edx,0xc002b4a0
c001389c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a0:	89 10                	mov    DWORD PTR [eax],edx
c00138a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b0:	83 c0 0d             	add    eax,0xd
c00138b3:	83 ec 04             	sub    esp,0x4
c00138b6:	52                   	push   edx
c00138b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138bb:	50                   	push   eax
c00138bc:	e8 6b f9 ff ff       	call   c001322c <Fs::standardiseFiles(char*, char const*, char const*)>
c00138c1:	83 c4 10             	add    esp,0x10
c00138c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138cb:	8d 50 bf             	lea    edx,[eax-0x41]
c00138ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138dc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138e0:	90                   	nop
c00138e1:	83 c4 0c             	add    esp,0xc
c00138e4:	c3                   	ret    
c00138e5:	90                   	nop

c00138e6 <Directory::open()>:
c00138e6:	53                   	push   ebx
c00138e7:	b8 0b 00 00 00       	mov    eax,0xb
c00138ec:	83 ec 08             	sub    esp,0x8
c00138ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138f3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138fa:	80 fa 19             	cmp    dl,0x19
c00138fd:	77 3d                	ja     c001393c <Directory::open()+0x56>
c00138ff:	8b 14 95 e0 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b20]
c0013906:	85 d2                	test   edx,edx
c0013908:	74 32                	je     c001393c <Directory::open()+0x56>
c001390a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013910:	85 d2                	test   edx,edx
c0013912:	74 28                	je     c001393c <Directory::open()+0x56>
c0013914:	b8 06 00 00 00       	mov    eax,0x6
c0013919:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001391d:	75 1d                	jne    c001393c <Directory::open()+0x56>
c001391f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013925:	50                   	push   eax
c0013926:	8b 02                	mov    eax,DWORD PTR [edx]
c0013928:	51                   	push   ecx
c0013929:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001392c:	51                   	push   ecx
c001392d:	52                   	push   edx
c001392e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013931:	83 c4 10             	add    esp,0x10
c0013934:	85 c0                	test   eax,eax
c0013936:	75 04                	jne    c001393c <Directory::open()+0x56>
c0013938:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001393c:	83 c4 08             	add    esp,0x8
c001393f:	5b                   	pop    ebx
c0013940:	c3                   	ret    
c0013941:	90                   	nop

c0013942 <Directory::close()>:
c0013942:	53                   	push   ebx
c0013943:	b8 0b 00 00 00       	mov    eax,0xb
c0013948:	83 ec 08             	sub    esp,0x8
c001394b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001394f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013956:	80 fa 19             	cmp    dl,0x19
c0013959:	77 41                	ja     c001399c <Directory::close()+0x5a>
c001395b:	8b 1c 95 e0 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0b20]
c0013962:	85 db                	test   ebx,ebx
c0013964:	74 36                	je     c001399c <Directory::close()+0x5a>
c0013966:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001396d:	74 2d                	je     c001399c <Directory::close()+0x5a>
c001396f:	b8 05 00 00 00       	mov    eax,0x5
c0013974:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013978:	74 22                	je     c001399c <Directory::close()+0x5a>
c001397a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001397e:	8b 04 95 e0 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b20]
c0013985:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001398b:	53                   	push   ebx
c001398c:	53                   	push   ebx
c001398d:	8b 10                	mov    edx,DWORD PTR [eax]
c001398f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013995:	50                   	push   eax
c0013996:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013999:	83 c4 10             	add    esp,0x10
c001399c:	83 c4 08             	add    esp,0x8
c001399f:	5b                   	pop    ebx
c00139a0:	c3                   	ret    
c00139a1:	90                   	nop

c00139a2 <Directory::unlink()>:
c00139a2:	83 ec 0c             	sub    esp,0xc
c00139a5:	b8 0b 00 00 00       	mov    eax,0xb
c00139aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139b5:	80 f9 19             	cmp    cl,0x19
c00139b8:	77 2f                	ja     c00139e9 <Directory::unlink()+0x47>
c00139ba:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c00139c1:	85 c9                	test   ecx,ecx
c00139c3:	74 24                	je     c00139e9 <Directory::unlink()+0x47>
c00139c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139cb:	85 c9                	test   ecx,ecx
c00139cd:	74 1a                	je     c00139e9 <Directory::unlink()+0x47>
c00139cf:	b8 06 00 00 00       	mov    eax,0x6
c00139d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139d8:	75 0f                	jne    c00139e9 <Directory::unlink()+0x47>
c00139da:	83 c2 0d             	add    edx,0xd
c00139dd:	50                   	push   eax
c00139de:	50                   	push   eax
c00139df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139e1:	52                   	push   edx
c00139e2:	51                   	push   ecx
c00139e3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139e6:	83 c4 10             	add    esp,0x10
c00139e9:	83 c4 0c             	add    esp,0xc
c00139ec:	c3                   	ret    
c00139ed:	90                   	nop

c00139ee <Directory::rename(char const*)>:
c00139ee:	83 ec 0c             	sub    esp,0xc
c00139f1:	b8 0b 00 00 00       	mov    eax,0xb
c00139f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a01:	80 f9 19             	cmp    cl,0x19
c0013a04:	77 32                	ja     c0013a38 <Directory::rename(char const*)+0x4a>
c0013a06:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c0013a0d:	85 c9                	test   ecx,ecx
c0013a0f:	74 27                	je     c0013a38 <Directory::rename(char const*)+0x4a>
c0013a11:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a17:	85 c9                	test   ecx,ecx
c0013a19:	74 1d                	je     c0013a38 <Directory::rename(char const*)+0x4a>
c0013a1b:	b8 06 00 00 00       	mov    eax,0x6
c0013a20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a24:	75 12                	jne    c0013a38 <Directory::rename(char const*)+0x4a>
c0013a26:	83 c2 0d             	add    edx,0xd
c0013a29:	50                   	push   eax
c0013a2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a30:	52                   	push   edx
c0013a31:	51                   	push   ecx
c0013a32:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a35:	83 c4 10             	add    esp,0x10
c0013a38:	83 c4 0c             	add    esp,0xc
c0013a3b:	c3                   	ret    

c0013a3c <Directory::exists()>:
c0013a3c:	83 ec 0c             	sub    esp,0xc
c0013a3f:	31 c0                	xor    eax,eax
c0013a41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a45:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a4c:	80 f9 19             	cmp    cl,0x19
c0013a4f:	77 24                	ja     c0013a75 <Directory::exists()+0x39>
c0013a51:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c0013a58:	85 c9                	test   ecx,ecx
c0013a5a:	74 19                	je     c0013a75 <Directory::exists()+0x39>
c0013a5c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a62:	85 c9                	test   ecx,ecx
c0013a64:	74 0f                	je     c0013a75 <Directory::exists()+0x39>
c0013a66:	83 c2 0d             	add    edx,0xd
c0013a69:	50                   	push   eax
c0013a6a:	50                   	push   eax
c0013a6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a6d:	52                   	push   edx
c0013a6e:	51                   	push   ecx
c0013a6f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	83 c4 0c             	add    esp,0xc
c0013a78:	c3                   	ret    
c0013a79:	90                   	nop

c0013a7a <Directory::read(dirent*)>:
c0013a7a:	83 ec 1c             	sub    esp,0x1c
c0013a7d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a86:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a8d:	80 fa 19             	cmp    dl,0x19
c0013a90:	77 30                	ja     c0013ac2 <Directory::read(dirent*)+0x48>
c0013a92:	8b 14 95 e0 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b20]
c0013a99:	85 d2                	test   edx,edx
c0013a9b:	74 25                	je     c0013ac2 <Directory::read(dirent*)+0x48>
c0013a9d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013aa4:	74 1c                	je     c0013ac2 <Directory::read(dirent*)+0x48>
c0013aa6:	83 ec 0c             	sub    esp,0xc
c0013aa9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aab:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013aaf:	52                   	push   edx
c0013ab0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013ab4:	6a 00                	push   0x0
c0013ab6:	68 10 01 00 00       	push   0x110
c0013abb:	51                   	push   ecx
c0013abc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013abf:	83 c4 20             	add    esp,0x20
c0013ac2:	83 c4 1c             	add    esp,0x1c
c0013ac5:	c3                   	ret    

c0013ac6 <Directory::create()>:
c0013ac6:	83 ec 0c             	sub    esp,0xc
c0013ac9:	b8 0b 00 00 00       	mov    eax,0xb
c0013ace:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ad2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ad9:	80 f9 19             	cmp    cl,0x19
c0013adc:	77 2f                	ja     c0013b0d <Directory::create()+0x47>
c0013ade:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c0013ae5:	85 c9                	test   ecx,ecx
c0013ae7:	74 24                	je     c0013b0d <Directory::create()+0x47>
c0013ae9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aef:	85 c9                	test   ecx,ecx
c0013af1:	74 1a                	je     c0013b0d <Directory::create()+0x47>
c0013af3:	b8 06 00 00 00       	mov    eax,0x6
c0013af8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013afc:	75 0f                	jne    c0013b0d <Directory::create()+0x47>
c0013afe:	83 c2 0d             	add    edx,0xd
c0013b01:	50                   	push   eax
c0013b02:	50                   	push   eax
c0013b03:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b05:	52                   	push   edx
c0013b06:	51                   	push   ecx
c0013b07:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b0a:	83 c4 10             	add    esp,0x10
c0013b0d:	83 c4 0c             	add    esp,0xc
c0013b10:	c3                   	ret    
c0013b11:	90                   	nop

c0013b12 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b12:	b8 0a 00 00 00       	mov    eax,0xa
c0013b17:	c3                   	ret    

c0013b18 <Bus::Bus(char const*)>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1f:	83 ec 08             	sub    esp,0x8
c0013b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b26:	50                   	push   eax
c0013b27:	e8 70 09 00 00       	call   c001449c <Device::Device(char const*)>
c0013b2c:	83 c4 10             	add    esp,0x10
c0013b2f:	ba bc b4 02 c0       	mov    edx,0xc002b4bc
c0013b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b38:	89 10                	mov    DWORD PTR [eax],edx
c0013b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b48:	90                   	nop
c0013b49:	83 c4 0c             	add    esp,0xc
c0013b4c:	c3                   	ret    
c0013b4d:	90                   	nop

c0013b4e <Bus::~Bus()>:
c0013b4e:	83 ec 0c             	sub    esp,0xc
c0013b51:	ba bc b4 02 c0       	mov    edx,0xc002b4bc
c0013b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5a:	89 10                	mov    DWORD PTR [eax],edx
c0013b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b60:	83 ec 0c             	sub    esp,0xc
c0013b63:	50                   	push   eax
c0013b64:	e8 15 06 00 00       	call   c001417e <Device::~Device()>
c0013b69:	83 c4 10             	add    esp,0x10
c0013b6c:	90                   	nop
c0013b6d:	83 c4 0c             	add    esp,0xc
c0013b70:	c3                   	ret    
c0013b71:	90                   	nop

c0013b72 <Bus::~Bus()>:
c0013b72:	83 ec 0c             	sub    esp,0xc
c0013b75:	83 ec 0c             	sub    esp,0xc
c0013b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7c:	e8 cd ff ff ff       	call   c0013b4e <Bus::~Bus()>
c0013b81:	83 c4 10             	add    esp,0x10
c0013b84:	83 ec 08             	sub    esp,0x8
c0013b87:	68 58 01 00 00       	push   0x158
c0013b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b90:	e8 02 f2 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0013b95:	83 c4 10             	add    esp,0x10
c0013b98:	83 c4 0c             	add    esp,0xc
c0013b9b:	c3                   	ret    

c0013b9c <Buzzer::Buzzer(char const*)>:
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba3:	83 ec 08             	sub    esp,0x8
c0013ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013baa:	50                   	push   eax
c0013bab:	e8 ec 08 00 00       	call   c001449c <Device::Device(char const*)>
c0013bb0:	83 c4 10             	add    esp,0x10
c0013bb3:	ba e8 b4 02 c0       	mov    edx,0xc002b4e8
c0013bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbc:	89 10                	mov    DWORD PTR [eax],edx
c0013bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013bda:	90                   	nop
c0013bdb:	83 c4 0c             	add    esp,0xc
c0013bde:	c3                   	ret    
c0013bdf:	90                   	nop

c0013be0 <Buzzer::~Buzzer()>:
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	ba e8 b4 02 c0       	mov    edx,0xc002b4e8
c0013be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bec:	89 10                	mov    DWORD PTR [eax],edx
c0013bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	50                   	push   eax
c0013bf6:	e8 83 05 00 00       	call   c001417e <Device::~Device()>
c0013bfb:	83 c4 10             	add    esp,0x10
c0013bfe:	90                   	nop
c0013bff:	83 c4 0c             	add    esp,0xc
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <Buzzer::~Buzzer()>:
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	83 ec 0c             	sub    esp,0xc
c0013c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0e:	e8 cd ff ff ff       	call   c0013be0 <Buzzer::~Buzzer()>
c0013c13:	83 c4 10             	add    esp,0x10
c0013c16:	83 ec 08             	sub    esp,0x8
c0013c19:	68 5c 01 00 00       	push   0x15c
c0013c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c22:	e8 70 f1 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0013c27:	83 c4 10             	add    esp,0x10
c0013c2a:	83 c4 0c             	add    esp,0xc
c0013c2d:	c3                   	ret    

c0013c2e <Buzzer::stop()>:
c0013c2e:	83 ec 14             	sub    esp,0x14
c0013c31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c35:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c37:	6a 00                	push   0x0
c0013c39:	50                   	push   eax
c0013c3a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c3d:	83 c4 1c             	add    esp,0x1c
c0013c40:	c3                   	ret    

c0013c41 <beepThread(void*)>:
c0013c41:	53                   	push   ebx
c0013c42:	83 ec 08             	sub    esp,0x8
c0013c45:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0013c4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c4e:	48                   	dec    eax
c0013c4f:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0013c54:	75 01                	jne    c0013c57 <beepThread(void*)+0x16>
c0013c56:	fb                   	sti    
c0013c57:	50                   	push   eax
c0013c58:	50                   	push   eax
c0013c59:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c5e:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c64:	52                   	push   edx
c0013c65:	50                   	push   eax
c0013c66:	e8 82 ab 00 00       	call   c001e7ed <nanoSleep(unsigned long long)>
c0013c6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c6e:	e8 bb ff ff ff       	call   c0013c2e <Buzzer::stop()>
c0013c73:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c7b:	83 c4 18             	add    esp,0x18
c0013c7e:	5b                   	pop    ebx
c0013c7f:	e9 65 aa 00 00       	jmp    c001e6e9 <blockTask(TaskState)>

c0013c84 <Buzzer::beep(int, int, bool)>:
c0013c84:	57                   	push   edi
c0013c85:	56                   	push   esi
c0013c86:	53                   	push   ebx
c0013c87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c8f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c93:	52                   	push   edx
c0013c94:	52                   	push   edx
c0013c95:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9b:	56                   	push   esi
c0013c9c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c9f:	83 c4 10             	add    esp,0x10
c0013ca2:	89 f8                	mov    eax,edi
c0013ca4:	84 c0                	test   al,al
c0013ca6:	74 1f                	je     c0013cc7 <Buzzer::beep(int, int, bool)+0x43>
c0013ca8:	50                   	push   eax
c0013ca9:	50                   	push   eax
c0013caa:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cb0:	99                   	cdq    
c0013cb1:	52                   	push   edx
c0013cb2:	50                   	push   eax
c0013cb3:	e8 35 ab 00 00       	call   c001e7ed <nanoSleep(unsigned long long)>
c0013cb8:	83 c4 10             	add    esp,0x10
c0013cbb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013cbf:	5b                   	pop    ebx
c0013cc0:	5e                   	pop    esi
c0013cc1:	5f                   	pop    edi
c0013cc2:	e9 67 ff ff ff       	jmp    c0013c2e <Buzzer::stop()>
c0013cc7:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013ccd:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0013cd2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013cda:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cde:	c7 44 24 14 41 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c41
c0013ce6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cea:	5b                   	pop    ebx
c0013ceb:	5e                   	pop    esi
c0013cec:	5f                   	pop    edi
c0013ced:	e9 b4 a5 00 00       	jmp    c001e2a6 <Process::createThread(void (*)(void*), void*, int)>

c0013cf2 <User::loadClockSettings(int)>:
c0013cf2:	53                   	push   ebx
c0013cf3:	83 ec 14             	sub    esp,0x14
c0013cf6:	68 14 01 00 00       	push   0x114
c0013cfb:	e8 c0 bb ff ff       	call   c000f8c0 <malloc>
c0013d00:	83 c4 0c             	add    esp,0xc
c0013d03:	89 c3                	mov    ebx,eax
c0013d05:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c0013d0b:	68 10 b5 02 c0       	push   0xc002b510
c0013d10:	50                   	push   eax
c0013d11:	e8 c0 f6 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c0013d16:	58                   	pop    eax
c0013d17:	5a                   	pop    edx
c0013d18:	6a 01                	push   0x1
c0013d1a:	53                   	push   ebx
c0013d1b:	e8 1a f7 ff ff       	call   c001343a <File::open(FileOpenMode)>
c0013d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d23:	e8 70 f7 ff ff       	call   c0013498 <File::close()>
c0013d28:	83 c4 10             	add    esp,0x10
c0013d2b:	85 db                	test   ebx,ebx
c0013d2d:	74 0f                	je     c0013d3e <User::loadClockSettings(int)+0x4c>
c0013d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d31:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d35:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d38:	83 c4 08             	add    esp,0x8
c0013d3b:	5b                   	pop    ebx
c0013d3c:	ff e0                	jmp    eax
c0013d3e:	83 c4 08             	add    esp,0x8
c0013d41:	5b                   	pop    ebx
c0013d42:	c3                   	ret    
c0013d43:	90                   	nop

c0013d44 <Clock::Clock(char const*)>:
c0013d44:	83 ec 0c             	sub    esp,0xc
c0013d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4b:	83 ec 08             	sub    esp,0x8
c0013d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d52:	50                   	push   eax
c0013d53:	e8 44 07 00 00       	call   c001449c <Device::Device(char const*)>
c0013d58:	83 c4 10             	add    esp,0x10
c0013d5b:	ba 38 b5 02 c0       	mov    edx,0xc002b538
c0013d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d64:	89 10                	mov    DWORD PTR [eax],edx
c0013d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d6a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d74:	90                   	nop
c0013d75:	83 c4 0c             	add    esp,0xc
c0013d78:	c3                   	ret    
c0013d79:	90                   	nop

c0013d7a <Clock::~Clock()>:
c0013d7a:	83 ec 0c             	sub    esp,0xc
c0013d7d:	ba 38 b5 02 c0       	mov    edx,0xc002b538
c0013d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d86:	89 10                	mov    DWORD PTR [eax],edx
c0013d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8c:	83 ec 0c             	sub    esp,0xc
c0013d8f:	50                   	push   eax
c0013d90:	e8 e9 03 00 00       	call   c001417e <Device::~Device()>
c0013d95:	83 c4 10             	add    esp,0x10
c0013d98:	90                   	nop
c0013d99:	83 c4 0c             	add    esp,0xc
c0013d9c:	c3                   	ret    
c0013d9d:	90                   	nop

c0013d9e <Clock::~Clock()>:
c0013d9e:	83 ec 0c             	sub    esp,0xc
c0013da1:	83 ec 0c             	sub    esp,0xc
c0013da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da8:	e8 cd ff ff ff       	call   c0013d7a <Clock::~Clock()>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	83 ec 08             	sub    esp,0x8
c0013db3:	68 58 01 00 00       	push   0x158
c0013db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dbc:	e8 d6 ef ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0013dc1:	83 c4 10             	add    esp,0x10
c0013dc4:	83 c4 0c             	add    esp,0xc
c0013dc7:	c3                   	ret    

c0013dc8 <Clock::timeInSecondsLocal()>:
c0013dc8:	53                   	push   ebx
c0013dc9:	83 ec 14             	sub    esp,0x14
c0013dcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dd0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dd2:	50                   	push   eax
c0013dd3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013dd6:	0f b6 0d 5c f0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f05c
c0013ddd:	03 0d 60 f0 02 c0    	add    ecx,DWORD PTR ds:0xc002f060
c0013de3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013de9:	89 cb                	mov    ebx,ecx
c0013deb:	c1 fb 1f             	sar    ebx,0x1f
c0013dee:	01 c8                	add    eax,ecx
c0013df0:	11 da                	adc    edx,ebx
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	31 c9                	xor    ecx,ecx
c0013df7:	80 3d 5d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f05d,0x0
c0013dfe:	74 05                	je     c0013e05 <Clock::timeInSecondsLocal()+0x3d>
c0013e00:	b9 08 07 00 00       	mov    ecx,0x708
c0013e05:	31 db                	xor    ebx,ebx
c0013e07:	01 c8                	add    eax,ecx
c0013e09:	11 da                	adc    edx,ebx
c0013e0b:	83 c4 08             	add    esp,0x8
c0013e0e:	5b                   	pop    ebx
c0013e0f:	c3                   	ret    

c0013e10 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e10:	57                   	push   edi
c0013e11:	56                   	push   esi
c0013e12:	53                   	push   ebx
c0013e13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e1d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e21:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e24:	0f b6 05 5c f0 02 c0 	movzx  eax,BYTE PTR ds:0xc002f05c
c0013e2b:	03 05 60 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f060
c0013e31:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e37:	99                   	cdq    
c0013e38:	29 c6                	sub    esi,eax
c0013e3a:	19 d7                	sbb    edi,edx
c0013e3c:	89 f0                	mov    eax,esi
c0013e3e:	89 fa                	mov    edx,edi
c0013e40:	31 f6                	xor    esi,esi
c0013e42:	80 3d 5d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f05d,0x0
c0013e49:	74 05                	je     c0013e50 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e4b:	be 08 07 00 00       	mov    esi,0x708
c0013e50:	31 ff                	xor    edi,edi
c0013e52:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e56:	29 f0                	sub    eax,esi
c0013e58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e5c:	19 fa                	sbb    edx,edi
c0013e5e:	89 d8                	mov    eax,ebx
c0013e60:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e64:	5b                   	pop    ebx
c0013e65:	5e                   	pop    esi
c0013e66:	5f                   	pop    edi
c0013e67:	ff e0                	jmp    eax

c0013e69 <datetimeToSeconds(datetime_t)>:
c0013e69:	55                   	push   ebp
c0013e6a:	57                   	push   edi
c0013e6b:	56                   	push   esi
c0013e6c:	53                   	push   ebx
c0013e6d:	83 ec 14             	sub    esp,0x14
c0013e70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e74:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e78:	89 d3                	mov    ebx,edx
c0013e7a:	0f b6 c6             	movzx  eax,dh
c0013e7d:	c1 eb 10             	shr    ebx,0x10
c0013e80:	48                   	dec    eax
c0013e81:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e86:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e8a:	0f b6 f5             	movzx  esi,ch
c0013e8d:	89 cf                	mov    edi,ecx
c0013e8f:	6b f6 3c             	imul   esi,esi,0x3c
c0013e92:	c1 ef 10             	shr    edi,0x10
c0013e95:	0f b6 c9             	movzx  ecx,cl
c0013e98:	89 f8                	mov    eax,edi
c0013e9a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ea0:	0f b6 f8             	movzx  edi,al
c0013ea3:	0f b6 d2             	movzx  edx,dl
c0013ea6:	01 fe                	add    esi,edi
c0013ea8:	01 f1                	add    ecx,esi
c0013eaa:	0f b7 f3             	movzx  esi,bx
c0013ead:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013eb1:	c1 f9 1f             	sar    ecx,0x1f
c0013eb4:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013eb9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ebd:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013ec2:	8b 0c 8d 80 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4a80]
c0013ec9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ecd:	76 29                	jbe    c0013ef8 <datetimeToSeconds(datetime_t)+0x8f>
c0013ecf:	f6 c3 03             	test   bl,0x3
c0013ed2:	75 24                	jne    c0013ef8 <datetimeToSeconds(datetime_t)+0x8f>
c0013ed4:	31 d2                	xor    edx,edx
c0013ed6:	bf 64 00 00 00       	mov    edi,0x64
c0013edb:	89 d8                	mov    eax,ebx
c0013edd:	66 f7 f7             	div    di
c0013ee0:	66 85 d2             	test   dx,dx
c0013ee3:	75 12                	jne    c0013ef7 <datetimeToSeconds(datetime_t)+0x8e>
c0013ee5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013eeb:	bf 90 01 00 00       	mov    edi,0x190
c0013ef0:	99                   	cdq    
c0013ef1:	f7 ff                	idiv   edi
c0013ef3:	85 d2                	test   edx,edx
c0013ef5:	75 01                	jne    c0013ef8 <datetimeToSeconds(datetime_t)+0x8f>
c0013ef7:	41                   	inc    ecx
c0013ef8:	66 83 fb 46          	cmp    bx,0x46
c0013efc:	76 45                	jbe    c0013f43 <datetimeToSeconds(datetime_t)+0xda>
c0013efe:	bb 46 00 00 00       	mov    ebx,0x46
c0013f03:	bf 64 00 00 00       	mov    edi,0x64
c0013f08:	bd 90 01 00 00       	mov    ebp,0x190
c0013f0d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f12:	f6 c3 03             	test   bl,0x3
c0013f15:	75 23                	jne    c0013f3a <datetimeToSeconds(datetime_t)+0xd1>
c0013f17:	89 d8                	mov    eax,ebx
c0013f19:	99                   	cdq    
c0013f1a:	f7 ff                	idiv   edi
c0013f1c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f21:	85 d2                	test   edx,edx
c0013f23:	75 15                	jne    c0013f3a <datetimeToSeconds(datetime_t)+0xd1>
c0013f25:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f2b:	99                   	cdq    
c0013f2c:	f7 fd                	idiv   ebp
c0013f2e:	83 fa 01             	cmp    edx,0x1
c0013f31:	19 c0                	sbb    eax,eax
c0013f33:	f7 d0                	not    eax
c0013f35:	05 6e 01 00 00       	add    eax,0x16e
c0013f3a:	01 c1                	add    ecx,eax
c0013f3c:	43                   	inc    ebx
c0013f3d:	39 f3                	cmp    ebx,esi
c0013f3f:	7c cc                	jl     c0013f0d <datetimeToSeconds(datetime_t)+0xa4>
c0013f41:	eb 35                	jmp    c0013f78 <datetimeToSeconds(datetime_t)+0x10f>
c0013f43:	74 33                	je     c0013f78 <datetimeToSeconds(datetime_t)+0x10f>
c0013f45:	b8 45 00 00 00       	mov    eax,0x45
c0013f4a:	89 c2                	mov    edx,eax
c0013f4c:	83 e2 03             	and    edx,0x3
c0013f4f:	39 f0                	cmp    eax,esi
c0013f51:	7e 0f                	jle    c0013f62 <datetimeToSeconds(datetime_t)+0xf9>
c0013f53:	83 fa 01             	cmp    edx,0x1
c0013f56:	19 d2                	sbb    edx,edx
c0013f58:	48                   	dec    eax
c0013f59:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f60:	eb e8                	jmp    c0013f4a <datetimeToSeconds(datetime_t)+0xe1>
c0013f62:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f67:	85 d2                	test   edx,edx
c0013f69:	75 0b                	jne    c0013f76 <datetimeToSeconds(datetime_t)+0x10d>
c0013f6b:	66 83 fb 01          	cmp    bx,0x1
c0013f6f:	19 c0                	sbb    eax,eax
c0013f71:	05 6e 01 00 00       	add    eax,0x16e
c0013f76:	29 c1                	sub    ecx,eax
c0013f78:	b8 80 51 01 00       	mov    eax,0x15180
c0013f7d:	f7 e9                	imul   ecx
c0013f7f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f83:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f87:	83 c4 14             	add    esp,0x14
c0013f8a:	5b                   	pop    ebx
c0013f8b:	5e                   	pop    esi
c0013f8c:	5f                   	pop    edi
c0013f8d:	5d                   	pop    ebp
c0013f8e:	c3                   	ret    
c0013f8f:	90                   	nop

c0013f90 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f90:	57                   	push   edi
c0013f91:	56                   	push   esi
c0013f92:	53                   	push   ebx
c0013f93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f97:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f99:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fa0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fa4:	e8 c0 fe ff ff       	call   c0013e69 <datetimeToSeconds(datetime_t)>
c0013fa9:	59                   	pop    ecx
c0013faa:	0f b6 0d 5c f0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f05c
c0013fb1:	5b                   	pop    ebx
c0013fb2:	03 0d 60 f0 02 c0    	add    ecx,DWORD PTR ds:0xc002f060
c0013fb8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fbe:	89 cb                	mov    ebx,ecx
c0013fc0:	c1 fb 1f             	sar    ebx,0x1f
c0013fc3:	29 c8                	sub    eax,ecx
c0013fc5:	19 da                	sbb    edx,ebx
c0013fc7:	31 c9                	xor    ecx,ecx
c0013fc9:	80 3d 5d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f05d,0x0
c0013fd0:	74 05                	je     c0013fd7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fd2:	b9 08 07 00 00       	mov    ecx,0x708
c0013fd7:	31 db                	xor    ebx,ebx
c0013fd9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fdd:	29 c8                	sub    eax,ecx
c0013fdf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fe3:	19 da                	sbb    edx,ebx
c0013fe5:	89 f8                	mov    eax,edi
c0013fe7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013feb:	5b                   	pop    ebx
c0013fec:	5e                   	pop    esi
c0013fed:	5f                   	pop    edi
c0013fee:	ff e0                	jmp    eax

c0013ff0 <secondsToDatetime(unsigned long long)>:
c0013ff0:	55                   	push   ebp
c0013ff1:	57                   	push   edi
c0013ff2:	56                   	push   esi
c0013ff3:	53                   	push   ebx
c0013ff4:	83 ec 1c             	sub    esp,0x1c
c0013ff7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ffb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fff:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014003:	6a 00                	push   0x0
c0014005:	68 80 51 01 00       	push   0x15180
c001400a:	55                   	push   ebp
c001400b:	57                   	push   edi
c001400c:	e8 23 32 01 00       	call   c0027234 <__udivdi3>
c0014011:	83 c4 10             	add    esp,0x10
c0014014:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001401a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001401e:	6a 00                	push   0x0
c0014020:	68 80 51 01 00       	push   0x15180
c0014025:	55                   	push   ebp
c0014026:	57                   	push   edi
c0014027:	bf 10 0e 00 00       	mov    edi,0xe10
c001402c:	e8 03 33 01 00       	call   c0027334 <__umoddi3>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	99                   	cdq    
c0014035:	f7 ff                	idiv   edi
c0014037:	bf 3c 00 00 00       	mov    edi,0x3c
c001403c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001403f:	89 d0                	mov    eax,edx
c0014041:	99                   	cdq    
c0014042:	f7 ff                	idiv   edi
c0014044:	85 db                	test   ebx,ebx
c0014046:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014049:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001404c:	79 11                	jns    c001405f <secondsToDatetime(unsigned long long)+0x6f>
c001404e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014052:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014058:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001405d:	eb 07                	jmp    c0014066 <secondsToDatetime(unsigned long long)+0x76>
c001405f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014064:	89 d8                	mov    eax,ebx
c0014066:	bf b4 05 00 00       	mov    edi,0x5b4
c001406b:	99                   	cdq    
c001406c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014071:	f7 f9                	idiv   ecx
c0014073:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001407c:	31 d2                	xor    edx,edx
c001407e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014086:	01 c3                	add    ebx,eax
c0014088:	89 d8                	mov    eax,ebx
c001408a:	f7 f1                	div    ecx
c001408c:	31 d2                	xor    edx,edx
c001408e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014091:	89 d8                	mov    eax,ebx
c0014093:	f7 f7                	div    edi
c0014095:	31 d2                	xor    edx,edx
c0014097:	29 c1                	sub    ecx,eax
c0014099:	89 d8                	mov    eax,ebx
c001409b:	f7 f5                	div    ebp
c001409d:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140a2:	29 c1                	sub    ecx,eax
c00140a4:	31 d2                	xor    edx,edx
c00140a6:	89 c8                	mov    eax,ecx
c00140a8:	f7 f5                	div    ebp
c00140aa:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140b3:	31 d2                	xor    edx,edx
c00140b5:	89 c8                	mov    eax,ecx
c00140b7:	f7 f5                	div    ebp
c00140b9:	31 d2                	xor    edx,edx
c00140bb:	01 c3                	add    ebx,eax
c00140bd:	89 c8                	mov    eax,ecx
c00140bf:	f7 f7                	div    edi
c00140c1:	bf 99 00 00 00       	mov    edi,0x99
c00140c6:	29 c3                	sub    ebx,eax
c00140c8:	31 d2                	xor    edx,edx
c00140ca:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140d2:	29 c3                	sub    ebx,eax
c00140d4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140d7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140da:	bb 05 00 00 00       	mov    ebx,0x5
c00140df:	83 c1 02             	add    ecx,0x2
c00140e2:	89 c8                	mov    eax,ecx
c00140e4:	f7 f7                	div    edi
c00140e6:	31 d2                	xor    edx,edx
c00140e8:	89 c7                	mov    edi,eax
c00140ea:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140f0:	83 c0 02             	add    eax,0x2
c00140f3:	f7 f3                	div    ebx
c00140f5:	89 eb                	mov    ebx,ebp
c00140f7:	29 c3                	sub    ebx,eax
c00140f9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140ff:	88 1e                	mov    BYTE PTR [esi],bl
c0014101:	19 c0                	sbb    eax,eax
c0014103:	31 d2                	xor    edx,edx
c0014105:	83 e0 0c             	and    eax,0xc
c0014108:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001410c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014114:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014118:	83 f9 01             	cmp    ecx,0x1
c001411b:	0f 96 c2             	setbe  dl
c001411e:	41                   	inc    ecx
c001411f:	01 d0                	add    eax,edx
c0014121:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014124:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014128:	83 c4 1c             	add    esp,0x1c
c001412b:	89 f0                	mov    eax,esi
c001412d:	5b                   	pop    ebx
c001412e:	5e                   	pop    esi
c001412f:	5f                   	pop    edi
c0014130:	5d                   	pop    ebp
c0014131:	c2 04 00             	ret    0x4

c0014134 <Clock::timeInDatetimeLocal()>:
c0014134:	53                   	push   ebx
c0014135:	83 ec 14             	sub    esp,0x14
c0014138:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001413c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014140:	e8 83 fc ff ff       	call   c0013dc8 <Clock::timeInSecondsLocal()>
c0014145:	83 c4 0c             	add    esp,0xc
c0014148:	52                   	push   edx
c0014149:	50                   	push   eax
c001414a:	53                   	push   ebx
c001414b:	e8 a0 fe ff ff       	call   c0013ff0 <secondsToDatetime(unsigned long long)>
c0014150:	89 d8                	mov    eax,ebx
c0014152:	83 c4 14             	add    esp,0x14
c0014155:	5b                   	pop    ebx
c0014156:	c2 04 00             	ret    0x4
c0014159:	90                   	nop

c001415a <Device::hibernate()>:
c001415a:	c3                   	ret    
c001415b:	90                   	nop

c001415c <Device::wake()>:
c001415c:	c3                   	ret    
c001415d:	90                   	nop

c001415e <Device::detect()>:
c001415e:	c3                   	ret    
c001415f:	90                   	nop

c0014160 <Device::disableLegacy()>:
c0014160:	c3                   	ret    
c0014161:	90                   	nop

c0014162 <Device::powerSaving(PowerSavingLevel)>:
c0014162:	c3                   	ret    
c0014163:	90                   	nop

c0014164 <DriverlessDevice::close(int, int, void*)>:
c0014164:	31 c0                	xor    eax,eax
c0014166:	c3                   	ret    
c0014167:	90                   	nop

c0014168 <DriverlessDevice::detect()>:
c0014168:	c3                   	ret    
c0014169:	90                   	nop

c001416a <DriverlessDevice::open(int, int, void*)>:
c001416a:	83 ec 18             	sub    esp,0x18
c001416d:	68 b0 b5 02 c0       	push   0xc002b5b0
c0014172:	e8 ee 66 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0014177:	83 c8 ff             	or     eax,0xffffffff
c001417a:	83 c4 1c             	add    esp,0x1c
c001417d:	c3                   	ret    

c001417e <Device::~Device()>:
c001417e:	ba d8 b5 02 c0       	mov    edx,0xc002b5d8
c0014183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014187:	89 10                	mov    DWORD PTR [eax],edx
c0014189:	90                   	nop
c001418a:	c3                   	ret    
c001418b:	90                   	nop

c001418c <Device::~Device()>:
c001418c:	83 ec 0c             	sub    esp,0xc
c001418f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014193:	e8 e6 ff ff ff       	call   c001417e <Device::~Device()>
c0014198:	83 c4 04             	add    esp,0x4
c001419b:	83 ec 08             	sub    esp,0x8
c001419e:	68 58 01 00 00       	push   0x158
c00141a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141a7:	e8 eb eb ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00141ac:	83 c4 10             	add    esp,0x10
c00141af:	83 c4 0c             	add    esp,0xc
c00141b2:	c3                   	ret    
c00141b3:	90                   	nop

c00141b4 <Device::findAndLoadDriver()>:
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <Device::preOpenPCI(PCIDeviceInfo)>:
c00141b6:	57                   	push   edi
c00141b7:	b9 09 00 00 00       	mov    ecx,0x9
c00141bc:	56                   	push   esi
c00141bd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141c1:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141c5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141cf:	81 c7 18 01 00 00    	add    edi,0x118
c00141d5:	fc                   	cld    
c00141d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141d8:	5e                   	pop    esi
c00141d9:	5f                   	pop    edi
c00141da:	c3                   	ret    
c00141db:	90                   	nop

c00141dc <Device::preOpenACPI(void*, char*, char*)>:
c00141dc:	56                   	push   esi
c00141dd:	53                   	push   ebx
c00141de:	83 ec 08             	sub    esp,0x8
c00141e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00141e9:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00141f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141f7:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00141fd:	6a 1e                	push   0x1e
c00141ff:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014205:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014209:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001420f:	50                   	push   eax
c0014210:	e8 9b cb fe ff       	call   c0000db0 <realmemcpy>
c0014215:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014219:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001421d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014225:	83 c4 14             	add    esp,0x14
c0014228:	5b                   	pop    ebx
c0014229:	5e                   	pop    esi
c001422a:	e9 81 cb fe ff       	jmp    c0000db0 <realmemcpy>
c001422f:	90                   	nop

c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014234:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014239:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014240:	75 0b                	jne    c001424d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014242:	8b 00                	mov    eax,DWORD PTR [eax]
c0014244:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014248:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001424b:	eb 1e                	jmp    c001426b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001424d:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0014252:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014258:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001425e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014260:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014264:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014268:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001426b:	ff e0                	jmp    eax
c001426d:	90                   	nop

c001426e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001426e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014272:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014277:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001427e:	75 0b                	jne    c001428b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014280:	8b 00                	mov    eax,DWORD PTR [eax]
c0014282:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014286:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014289:	eb 1e                	jmp    c00142a9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001428b:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0014290:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014296:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001429c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001429e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142a6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142a9:	ff e0                	jmp    eax
c00142ab:	90                   	nop

c00142ac <Device::addChild(Device*)>:
c00142ac:	53                   	push   ebx
c00142ad:	83 ec 08             	sub    esp,0x8
c00142b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142be:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142c4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142c6:	85 d2                	test   edx,edx
c00142c8:	74 04                	je     c00142ce <Device::addChild(Device*)+0x22>
c00142ca:	89 d3                	mov    ebx,edx
c00142cc:	eb f6                	jmp    c00142c4 <Device::addChild(Device*)+0x18>
c00142ce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142d1:	83 ec 0c             	sub    esp,0xc
c00142d4:	6a 08                	push   0x8
c00142d6:	e8 e5 b5 ff ff       	call   c000f8c0 <malloc>
c00142db:	89 03                	mov    DWORD PTR [ebx],eax
c00142dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142ea:	83 c4 18             	add    esp,0x18
c00142ed:	5b                   	pop    ebx
c00142ee:	c3                   	ret    
c00142ef:	90                   	nop

c00142f0 <Device::removeAllChildren()>:
c00142f0:	56                   	push   esi
c00142f1:	53                   	push   ebx
c00142f2:	52                   	push   edx
c00142f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142f7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014300:	74 17                	je     c0014319 <Device::removeAllChildren()+0x29>
c0014302:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014305:	85 c0                	test   eax,eax
c0014307:	74 0c                	je     c0014315 <Device::removeAllChildren()+0x25>
c0014309:	83 ec 0c             	sub    esp,0xc
c001430c:	8b 10                	mov    edx,DWORD PTR [eax]
c001430e:	50                   	push   eax
c001430f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014317:	eb e4                	jmp    c00142fd <Device::removeAllChildren()+0xd>
c0014319:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001431f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014325:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001432b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014332:	58                   	pop    eax
c0014333:	5b                   	pop    ebx
c0014334:	5e                   	pop    esi
c0014335:	c3                   	ret    

c0014336 <Device::hibernateAll()>:
c0014336:	53                   	push   ebx
c0014337:	83 ec 14             	sub    esp,0x14
c001433a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001433e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014340:	53                   	push   ebx
c0014341:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014344:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001434a:	83 c4 10             	add    esp,0x10
c001434d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014350:	74 0f                	je     c0014361 <Device::hibernateAll()+0x2b>
c0014352:	83 ec 0c             	sub    esp,0xc
c0014355:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014358:	e8 d9 ff ff ff       	call   c0014336 <Device::hibernateAll()>
c001435d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001435f:	eb e9                	jmp    c001434a <Device::hibernateAll()+0x14>
c0014361:	83 c4 08             	add    esp,0x8
c0014364:	5b                   	pop    ebx
c0014365:	c3                   	ret    

c0014366 <Device::wakeAll()>:
c0014366:	53                   	push   ebx
c0014367:	83 ec 14             	sub    esp,0x14
c001436a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001436e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014370:	53                   	push   ebx
c0014371:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014374:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001437a:	83 c4 10             	add    esp,0x10
c001437d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014380:	74 0f                	je     c0014391 <Device::wakeAll()+0x2b>
c0014382:	83 ec 0c             	sub    esp,0xc
c0014385:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014388:	e8 d9 ff ff ff       	call   c0014366 <Device::wakeAll()>
c001438d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001438f:	eb e9                	jmp    c001437a <Device::wakeAll()+0x14>
c0014391:	83 c4 08             	add    esp,0x8
c0014394:	5b                   	pop    ebx
c0014395:	c3                   	ret    

c0014396 <Device::detectAll()>:
c0014396:	53                   	push   ebx
c0014397:	83 ec 14             	sub    esp,0x14
c001439a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001439e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143a0:	53                   	push   ebx
c00143a1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143aa:	83 c4 10             	add    esp,0x10
c00143ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143b0:	74 0f                	je     c00143c1 <Device::detectAll()+0x2b>
c00143b2:	83 ec 0c             	sub    esp,0xc
c00143b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143b8:	e8 d9 ff ff ff       	call   c0014396 <Device::detectAll()>
c00143bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143bf:	eb e9                	jmp    c00143aa <Device::detectAll()+0x14>
c00143c1:	83 c4 08             	add    esp,0x8
c00143c4:	5b                   	pop    ebx
c00143c5:	c3                   	ret    

c00143c6 <Device::disableLegacyAll()>:
c00143c6:	53                   	push   ebx
c00143c7:	83 ec 14             	sub    esp,0x14
c00143ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143d0:	53                   	push   ebx
c00143d1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143da:	83 c4 10             	add    esp,0x10
c00143dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143e0:	74 0f                	je     c00143f1 <Device::disableLegacyAll()+0x2b>
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e8:	e8 d9 ff ff ff       	call   c00143c6 <Device::disableLegacyAll()>
c00143ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ef:	eb e9                	jmp    c00143da <Device::disableLegacyAll()+0x14>
c00143f1:	83 c4 08             	add    esp,0x8
c00143f4:	5b                   	pop    ebx
c00143f5:	c3                   	ret    

c00143f6 <Device::loadDriversForAll()>:
c00143f6:	53                   	push   ebx
c00143f7:	83 ec 08             	sub    esp,0x8
c00143fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143fe:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014404:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014406:	85 db                	test   ebx,ebx
c0014408:	74 12                	je     c001441c <Device::loadDriversForAll()+0x26>
c001440a:	83 ec 0c             	sub    esp,0xc
c001440d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014410:	e8 e1 ff ff ff       	call   c00143f6 <Device::loadDriversForAll()>
c0014415:	83 c4 10             	add    esp,0x10
c0014418:	89 d8                	mov    eax,ebx
c001441a:	eb e8                	jmp    c0014404 <Device::loadDriversForAll()+0xe>
c001441c:	83 c4 08             	add    esp,0x8
c001441f:	5b                   	pop    ebx
c0014420:	c3                   	ret    
c0014421:	90                   	nop

c0014422 <Device::closeAll()>:
c0014422:	53                   	push   ebx
c0014423:	83 ec 08             	sub    esp,0x8
c0014426:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001442a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442c:	6a 00                	push   0x0
c001442e:	6a 00                	push   0x0
c0014430:	6a 00                	push   0x0
c0014432:	53                   	push   ebx
c0014433:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014436:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001443c:	83 c4 10             	add    esp,0x10
c001443f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014442:	74 0f                	je     c0014453 <Device::closeAll()+0x31>
c0014444:	83 ec 0c             	sub    esp,0xc
c0014447:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001444a:	e8 d3 ff ff ff       	call   c0014422 <Device::closeAll()>
c001444f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014451:	eb e9                	jmp    c001443c <Device::closeAll()+0x1a>
c0014453:	83 c4 08             	add    esp,0x8
c0014456:	5b                   	pop    ebx
c0014457:	c3                   	ret    

c0014458 <Device::powerSavingAll(PowerSavingLevel)>:
c0014458:	56                   	push   esi
c0014459:	53                   	push   ebx
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014461:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014465:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014467:	56                   	push   esi
c0014468:	53                   	push   ebx
c0014469:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001446c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014472:	83 c4 10             	add    esp,0x10
c0014475:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014478:	74 0f                	je     c0014489 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001447a:	52                   	push   edx
c001447b:	52                   	push   edx
c001447c:	56                   	push   esi
c001447d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014480:	e8 d3 ff ff ff       	call   c0014458 <Device::powerSavingAll(PowerSavingLevel)>
c0014485:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014487:	eb e9                	jmp    c0014472 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014489:	58                   	pop    eax
c001448a:	5b                   	pop    ebx
c001448b:	5e                   	pop    esi
c001448c:	c3                   	ret    
c001448d:	90                   	nop

c001448e <Device::setName(char const*)>:
c001448e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014496:	e9 8d c3 fe ff       	jmp    c0000828 <strcpy>
c001449b:	90                   	nop

c001449c <Device::Device(char const*)>:
c001449c:	83 ec 1c             	sub    esp,0x1c
c001449f:	ba d8 b5 02 c0       	mov    edx,0xc002b5d8
c00144a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a8:	89 10                	mov    DWORD PTR [eax],edx
c00144aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ae:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ca:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144e2:	83 ec 08             	sub    esp,0x8
c00144e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144ed:	e8 9c ff ff ff       	call   c001448e <Device::setName(char const*)>
c00144f2:	83 c4 10             	add    esp,0x10
c00144f5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144fd:	83 ec 0c             	sub    esp,0xc
c0014500:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014504:	e8 b7 b3 ff ff       	call   c000f8c0 <malloc>
c0014509:	83 c4 10             	add    esp,0x10
c001450c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014512:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014519:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001451d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014527:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001452d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014537:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001453d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014548:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001454f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014553:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001455a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014588:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014592:	90                   	nop
c0014593:	83 c4 1c             	add    esp,0x1c
c0014596:	c3                   	ret    
c0014597:	90                   	nop

c0014598 <Device::getName()>:
c0014598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001459c:	05 d0 00 00 00       	add    eax,0xd0
c00145a1:	c3                   	ret    

c00145a2 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145a2:	83 ec 0c             	sub    esp,0xc
c00145a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a9:	83 ec 08             	sub    esp,0x8
c00145ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145b0:	50                   	push   eax
c00145b1:	e8 e6 fe ff ff       	call   c001449c <Device::Device(char const*)>
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c00145be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c2:	89 10                	mov    DWORD PTR [eax],edx
c00145c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145d2:	90                   	nop
c00145d3:	83 c4 0c             	add    esp,0xc
c00145d6:	c3                   	ret    
c00145d7:	90                   	nop

c00145d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145d8:	57                   	push   edi
c00145d9:	56                   	push   esi
c00145da:	53                   	push   ebx
c00145db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145e7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145ed:	75 0c                	jne    c00145fb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145ef:	52                   	push   edx
c00145f0:	52                   	push   edx
c00145f1:	53                   	push   ebx
c00145f2:	56                   	push   esi
c00145f3:	e8 8e 4b 01 00       	call   c0029186 <LinkedList<Device>::addElement(Device*)>
c00145f8:	83 c4 10             	add    esp,0x10
c00145fb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014601:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014604:	74 12                	je     c0014618 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014606:	50                   	push   eax
c0014607:	57                   	push   edi
c0014608:	56                   	push   esi
c0014609:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001460c:	e8 c7 ff ff ff       	call   c00145d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014611:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014613:	83 c4 10             	add    esp,0x10
c0014616:	eb e9                	jmp    c0014601 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014618:	5b                   	pop    ebx
c0014619:	5e                   	pop    esi
c001461a:	5f                   	pop    edi
c001461b:	c3                   	ret    

c001461c <getDevicesOfType(DeviceType)>:
c001461c:	53                   	push   ebx
c001461d:	83 ec 14             	sub    esp,0x14
c0014620:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014624:	53                   	push   ebx
c0014625:	e8 38 4c 01 00       	call   c0029262 <LinkedList<Device>::LinkedList()>
c001462a:	83 c4 0c             	add    esp,0xc
c001462d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014631:	53                   	push   ebx
c0014632:	ff 35 c8 ee 02 c0    	push   DWORD PTR ds:0xc002eec8
c0014638:	e8 9b ff ff ff       	call   c00145d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001463d:	89 d8                	mov    eax,ebx
c001463f:	83 c4 18             	add    esp,0x18
c0014642:	5b                   	pop    ebx
c0014643:	c2 04 00             	ret    0x4

c0014646 <HardDiskController::HardDiskController(char const*)>:
c0014646:	83 ec 0c             	sub    esp,0xc
c0014649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464d:	83 ec 08             	sub    esp,0x8
c0014650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014654:	50                   	push   eax
c0014655:	e8 42 fe ff ff       	call   c001449c <Device::Device(char const*)>
c001465a:	83 c4 10             	add    esp,0x10
c001465d:	ba 30 b6 02 c0       	mov    edx,0xc002b630
c0014662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014666:	89 10                	mov    DWORD PTR [eax],edx
c0014668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001466c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014676:	90                   	nop
c0014677:	83 c4 0c             	add    esp,0xc
c001467a:	c3                   	ret    
c001467b:	90                   	nop

c001467c <HardDiskController::~HardDiskController()>:
c001467c:	83 ec 0c             	sub    esp,0xc
c001467f:	ba 30 b6 02 c0       	mov    edx,0xc002b630
c0014684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014688:	89 10                	mov    DWORD PTR [eax],edx
c001468a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001468e:	83 ec 0c             	sub    esp,0xc
c0014691:	50                   	push   eax
c0014692:	e8 e7 fa ff ff       	call   c001417e <Device::~Device()>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	90                   	nop
c001469b:	83 c4 0c             	add    esp,0xc
c001469e:	c3                   	ret    
c001469f:	90                   	nop

c00146a0 <HardDiskController::~HardDiskController()>:
c00146a0:	83 ec 0c             	sub    esp,0xc
c00146a3:	83 ec 0c             	sub    esp,0xc
c00146a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146aa:	e8 cd ff ff ff       	call   c001467c <HardDiskController::~HardDiskController()>
c00146af:	83 c4 10             	add    esp,0x10
c00146b2:	83 ec 08             	sub    esp,0x8
c00146b5:	68 58 01 00 00       	push   0x158
c00146ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146be:	e8 d4 e6 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00146c3:	83 c4 10             	add    esp,0x10
c00146c6:	83 c4 0c             	add    esp,0xc
c00146c9:	c3                   	ret    

c00146ca <PhysicalDisk::eject()>:
c00146ca:	83 ec 18             	sub    esp,0x18
c00146cd:	68 54 b6 02 c0       	push   0xc002b654
c00146d2:	e8 a0 e7 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00146d7:	83 c8 ff             	or     eax,0xffffffff
c00146da:	83 c4 1c             	add    esp,0x1c
c00146dd:	c3                   	ret    

c00146de <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146de:	83 ec 0c             	sub    esp,0xc
c00146e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e5:	83 ec 08             	sub    esp,0x8
c00146e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ec:	50                   	push   eax
c00146ed:	e8 aa fd ff ff       	call   c001449c <Device::Device(char const*)>
c00146f2:	83 c4 10             	add    esp,0x10
c00146f5:	ba 84 b6 02 c0       	mov    edx,0xc002b684
c00146fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fe:	89 10                	mov    DWORD PTR [eax],edx
c0014700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014704:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001470b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014728:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001472c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014736:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014740:	90                   	nop
c0014741:	83 c4 0c             	add    esp,0xc
c0014744:	c3                   	ret    
c0014745:	90                   	nop

c0014746 <PhysicalDisk::startCache()>:
c0014746:	56                   	push   esi
c0014747:	53                   	push   ebx
c0014748:	83 ec 10             	sub    esp,0x10
c001474b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001474f:	6a 44                	push   0x44
c0014751:	e8 6a b1 ff ff       	call   c000f8c0 <malloc>
c0014756:	89 c6                	mov    esi,eax
c0014758:	58                   	pop    eax
c0014759:	5a                   	pop    edx
c001475a:	53                   	push   ebx
c001475b:	56                   	push   esi
c001475c:	e8 cf 28 00 00       	call   c0017030 <VCache::VCache(PhysicalDisk*)>
c0014761:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014767:	83 c4 14             	add    esp,0x14
c001476a:	5b                   	pop    ebx
c001476b:	5e                   	pop    esi
c001476c:	c3                   	ret    
c001476d:	90                   	nop

c001476e <PhysicalDisk::~PhysicalDisk()>:
c001476e:	83 ec 0c             	sub    esp,0xc
c0014771:	ba 84 b6 02 c0       	mov    edx,0xc002b684
c0014776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477a:	89 10                	mov    DWORD PTR [eax],edx
c001477c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014780:	83 ec 0c             	sub    esp,0xc
c0014783:	50                   	push   eax
c0014784:	e8 f5 f9 ff ff       	call   c001417e <Device::~Device()>
c0014789:	83 c4 10             	add    esp,0x10
c001478c:	90                   	nop
c001478d:	83 c4 0c             	add    esp,0xc
c0014790:	c3                   	ret    
c0014791:	90                   	nop

c0014792 <PhysicalDisk::~PhysicalDisk()>:
c0014792:	83 ec 0c             	sub    esp,0xc
c0014795:	83 ec 0c             	sub    esp,0xc
c0014798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001479c:	e8 cd ff ff ff       	call   c001476e <PhysicalDisk::~PhysicalDisk()>
c00147a1:	83 c4 10             	add    esp,0x10
c00147a4:	83 ec 08             	sub    esp,0x8
c00147a7:	68 6c 01 00 00       	push   0x16c
c00147ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147b0:	e8 e2 e5 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00147b5:	83 c4 10             	add    esp,0x10
c00147b8:	83 c4 0c             	add    esp,0xc
c00147bb:	c3                   	ret    

c00147bc <FPU::FPU(char const*)>:
c00147bc:	83 ec 0c             	sub    esp,0xc
c00147bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c3:	83 ec 08             	sub    esp,0x8
c00147c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ca:	50                   	push   eax
c00147cb:	e8 cc fc ff ff       	call   c001449c <Device::Device(char const*)>
c00147d0:	83 c4 10             	add    esp,0x10
c00147d3:	ba c8 b6 02 c0       	mov    edx,0xc002b6c8
c00147d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147dc:	89 10                	mov    DWORD PTR [eax],edx
c00147de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147ec:	90                   	nop
c00147ed:	83 c4 0c             	add    esp,0xc
c00147f0:	c3                   	ret    
c00147f1:	90                   	nop

c00147f2 <FPU::~FPU()>:
c00147f2:	83 ec 0c             	sub    esp,0xc
c00147f5:	ba c8 b6 02 c0       	mov    edx,0xc002b6c8
c00147fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fe:	89 10                	mov    DWORD PTR [eax],edx
c0014800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014804:	83 ec 0c             	sub    esp,0xc
c0014807:	50                   	push   eax
c0014808:	e8 71 f9 ff ff       	call   c001417e <Device::~Device()>
c001480d:	83 c4 10             	add    esp,0x10
c0014810:	90                   	nop
c0014811:	83 c4 0c             	add    esp,0xc
c0014814:	c3                   	ret    
c0014815:	90                   	nop

c0014816 <FPU::~FPU()>:
c0014816:	83 ec 0c             	sub    esp,0xc
c0014819:	83 ec 0c             	sub    esp,0xc
c001481c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014820:	e8 cd ff ff ff       	call   c00147f2 <FPU::~FPU()>
c0014825:	83 c4 10             	add    esp,0x10
c0014828:	83 ec 08             	sub    esp,0x8
c001482b:	68 58 01 00 00       	push   0x158
c0014830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014834:	e8 5e e5 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0014839:	83 c4 10             	add    esp,0x10
c001483c:	83 c4 0c             	add    esp,0xc
c001483f:	c3                   	ret    

c0014840 <setupFPU()>:
c0014840:	53                   	push   ebx
c0014841:	83 ec 08             	sub    esp,0x8
c0014844:	8b 15 c8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eec8
c001484a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014851:	74 19                	je     c001486c <setupFPU()+0x2c>
c0014853:	83 ec 0c             	sub    esp,0xc
c0014856:	68 58 01 00 00       	push   0x158
c001485b:	e8 60 b0 ff ff       	call   c000f8c0 <malloc>
c0014860:	89 c3                	mov    ebx,eax
c0014862:	89 04 24             	mov    DWORD PTR [esp],eax
c0014865:	e8 4a 15 01 00       	call   c0025db4 <AVX::AVX()>
c001486a:	eb 5b                	jmp    c00148c7 <setupFPU()+0x87>
c001486c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014872:	84 c0                	test   al,al
c0014874:	79 19                	jns    c001488f <setupFPU()+0x4f>
c0014876:	83 ec 0c             	sub    esp,0xc
c0014879:	68 58 01 00 00       	push   0x158
c001487e:	e8 3d b0 ff ff       	call   c000f8c0 <malloc>
c0014883:	89 c3                	mov    ebx,eax
c0014885:	89 04 24             	mov    DWORD PTR [esp],eax
c0014888:	e8 4d 16 01 00       	call   c0025eda <SSE::SSE()>
c001488d:	eb 38                	jmp    c00148c7 <setupFPU()+0x87>
c001488f:	a8 20                	test   al,0x20
c0014891:	74 19                	je     c00148ac <setupFPU()+0x6c>
c0014893:	83 ec 0c             	sub    esp,0xc
c0014896:	68 58 01 00 00       	push   0x158
c001489b:	e8 20 b0 ff ff       	call   c000f8c0 <malloc>
c00148a0:	89 c3                	mov    ebx,eax
c00148a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00148a5:	e8 9a 15 01 00       	call   c0025e44 <MMX::MMX()>
c00148aa:	eb 1b                	jmp    c00148c7 <setupFPU()+0x87>
c00148ac:	a8 10                	test   al,0x10
c00148ae:	74 1c                	je     c00148cc <setupFPU()+0x8c>
c00148b0:	83 ec 0c             	sub    esp,0xc
c00148b3:	68 58 01 00 00       	push   0x158
c00148b8:	e8 03 b0 ff ff       	call   c000f8c0 <malloc>
c00148bd:	89 c3                	mov    ebx,eax
c00148bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00148c2:	e8 a1 16 01 00       	call   c0025f68 <x87::x87()>
c00148c7:	83 c4 10             	add    esp,0x10
c00148ca:	eb 24                	jmp    c00148f0 <setupFPU()+0xb0>
c00148cc:	83 e0 ef             	and    eax,0xffffffef
c00148cf:	83 ec 0c             	sub    esp,0xc
c00148d2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148d8:	68 b4 b6 02 c0       	push   0xc002b6b4
c00148dd:	e8 95 e5 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00148e2:	0f 20 c0             	mov    eax,cr0
c00148e5:	83 c8 04             	or     eax,0x4
c00148e8:	0f 22 c0             	mov    cr0,eax
c00148eb:	31 db                	xor    ebx,ebx
c00148ed:	83 c4 10             	add    esp,0x10
c00148f0:	89 d8                	mov    eax,ebx
c00148f2:	83 c4 08             	add    esp,0x8
c00148f5:	5b                   	pop    ebx
c00148f6:	c3                   	ret    
c00148f7:	90                   	nop

c00148f8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014900:	c1 e0 04             	shl    eax,0x4
c0014903:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014907:	8d 50 10             	lea    edx,[eax+0x10]
c001490a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014910:	74 08                	je     c001491a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014912:	83 c0 04             	add    eax,0x4
c0014915:	39 d0                	cmp    eax,edx
c0014917:	75 f1                	jne    c001490a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014919:	c3                   	ret    
c001491a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014924:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001492e:	eb e2                	jmp    c0014912 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014930 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014930:	57                   	push   edi
c0014931:	31 c0                	xor    eax,eax
c0014933:	56                   	push   esi
c0014934:	53                   	push   ebx
c0014935:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014939:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001493d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014941:	89 da                	mov    edx,ebx
c0014943:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014947:	c1 e2 04             	shl    edx,0x4
c001494a:	01 ca                	add    edx,ecx
c001494c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014954:	74 16                	je     c001496c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014956:	40                   	inc    eax
c0014957:	83 f8 04             	cmp    eax,0x4
c001495a:	75 f0                	jne    c001494c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001495c:	c7 44 24 10 f8 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b6f8
c0014964:	5b                   	pop    ebx
c0014965:	5e                   	pop    esi
c0014966:	5f                   	pop    edi
c0014967:	e9 f9 5e 00 00       	jmp    c001a865 <Krnl::panic(char const*)>
c001496c:	8d 04 98             	lea    eax,[eax+ebx*4]
c001496f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014972:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014978:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001497e:	5b                   	pop    ebx
c001497f:	5e                   	pop    esi
c0014980:	5f                   	pop    edi
c0014981:	c3                   	ret    

c0014982 <doubleFault(regs*, void*)>:
c0014982:	55                   	push   ebp
c0014983:	89 e5                	mov    ebp,esp
c0014985:	83 ec 08             	sub    esp,0x8
c0014988:	83 ec 0c             	sub    esp,0xc
c001498b:	68 33 b7 02 c0       	push   0xc002b733
c0014990:	e8 d0 5e 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0014995:	83 c4 10             	add    esp,0x10
c0014998:	90                   	nop
c0014999:	c9                   	leave  
c001499a:	c3                   	ret    
c001499b:	90                   	nop

c001499c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001499c:	56                   	push   esi
c001499d:	53                   	push   ebx
c001499e:	50                   	push   eax
c001499f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149a7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149ac:	75 35                	jne    c00149e3 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149ae:	8d 43 20             	lea    eax,[ebx+0x20]
c00149b1:	31 d2                	xor    edx,edx
c00149b3:	89 c1                	mov    ecx,eax
c00149b5:	c1 e1 04             	shl    ecx,0x4
c00149b8:	01 f1                	add    ecx,esi
c00149ba:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149c2:	74 3e                	je     c0014a02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149c4:	42                   	inc    edx
c00149c5:	83 fa 04             	cmp    edx,0x4
c00149c8:	75 f0                	jne    c00149ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149ca:	83 ec 0c             	sub    esp,0xc
c00149cd:	68 78 b7 02 c0       	push   0xc002b778
c00149d2:	e8 8e 5e 00 00       	call   c001a865 <Krnl::panic(char const*)>
c00149d7:	83 c4 10             	add    esp,0x10
c00149da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149df:	5a                   	pop    edx
c00149e0:	5b                   	pop    ebx
c00149e1:	5e                   	pop    esi
c00149e2:	c3                   	ret    
c00149e3:	83 ec 0c             	sub    esp,0xc
c00149e6:	56                   	push   esi
c00149e7:	e8 ac fb ff ff       	call   c0014598 <Device::getName()>
c00149ec:	83 c4 10             	add    esp,0x10
c00149ef:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149f2:	75 ba                	jne    c00149ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149f4:	83 fb 0f             	cmp    ebx,0xf
c00149f7:	7f 29                	jg     c0014a22 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149f9:	0f b6 9b 20 e1 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1ee0]
c0014a00:	eb ac                	jmp    c00149ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a02:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a09:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a0c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a16:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a1c:	89 d8                	mov    eax,ebx
c0014a1e:	5a                   	pop    edx
c0014a1f:	5b                   	pop    ebx
c0014a20:	5e                   	pop    esi
c0014a21:	c3                   	ret    
c0014a22:	83 ec 0c             	sub    esp,0xc
c0014a25:	68 40 b7 02 c0       	push   0xc002b740
c0014a2a:	e8 36 5e 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0014a2f:	83 c4 10             	add    esp,0x10
c0014a32:	e9 77 ff ff ff       	jmp    c00149ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a37:	90                   	nop

c0014a38 <InterruptController::clearAllHandlers(int, bool)>:
c0014a38:	56                   	push   esi
c0014a39:	53                   	push   ebx
c0014a3a:	52                   	push   edx
c0014a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a43:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a48:	75 61                	jne    c0014aab <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a4a:	8d 46 20             	lea    eax,[esi+0x20]
c0014a4d:	c1 e6 04             	shl    esi,0x4
c0014a50:	c1 e0 04             	shl    eax,0x4
c0014a53:	01 de                	add    esi,ebx
c0014a55:	01 d8                	add    eax,ebx
c0014a57:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a61:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a6b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a75:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a7f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a89:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a93:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a9d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014aa7:	58                   	pop    eax
c0014aa8:	5b                   	pop    ebx
c0014aa9:	5e                   	pop    esi
c0014aaa:	c3                   	ret    
c0014aab:	83 ec 0c             	sub    esp,0xc
c0014aae:	53                   	push   ebx
c0014aaf:	e8 e4 fa ff ff       	call   c0014598 <Device::getName()>
c0014ab4:	83 c4 10             	add    esp,0x10
c0014ab7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014aba:	75 8e                	jne    c0014a4a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014abc:	83 fe 0f             	cmp    esi,0xf
c0014abf:	7f 09                	jg     c0014aca <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014ac1:	0f b6 b6 20 e1 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1ee0]
c0014ac8:	eb 80                	jmp    c0014a4a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aca:	83 ec 0c             	sub    esp,0xc
c0014acd:	68 b4 b7 02 c0       	push   0xc002b7b4
c0014ad2:	e8 8e 5d 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0014ad7:	83 c4 10             	add    esp,0x10
c0014ada:	e9 6b ff ff ff       	jmp    c0014a4a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014adf:	90                   	nop

c0014ae0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ae0:	56                   	push   esi
c0014ae1:	53                   	push   ebx
c0014ae2:	52                   	push   edx
c0014ae3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ae7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014aeb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014af0:	75 3a                	jne    c0014b2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014af2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014af6:	8d 50 20             	lea    edx,[eax+0x20]
c0014af9:	c1 e2 04             	shl    edx,0x4
c0014afc:	8d 04 16             	lea    eax,[esi+edx*1]
c0014aff:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b03:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b09:	74 0b                	je     c0014b16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b0b:	83 c0 04             	add    eax,0x4
c0014b0e:	39 d0                	cmp    eax,edx
c0014b10:	75 f1                	jne    c0014b03 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b12:	58                   	pop    eax
c0014b13:	5b                   	pop    ebx
c0014b14:	5e                   	pop    esi
c0014b15:	c3                   	ret    
c0014b16:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b20:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b2a:	eb df                	jmp    c0014b0b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b2c:	83 ec 0c             	sub    esp,0xc
c0014b2f:	56                   	push   esi
c0014b30:	e8 63 fa ff ff       	call   c0014598 <Device::getName()>
c0014b35:	83 c4 10             	add    esp,0x10
c0014b38:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b3b:	75 b5                	jne    c0014af2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b3d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b42:	7f 11                	jg     c0014b55 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b48:	0f b6 80 20 e1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1ee0]
c0014b4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b53:	eb 9d                	jmp    c0014af2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b55:	83 ec 0c             	sub    esp,0xc
c0014b58:	68 b4 b7 02 c0       	push   0xc002b7b4
c0014b5d:	e8 03 5d 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0014b62:	83 c4 10             	add    esp,0x10
c0014b65:	eb 8b                	jmp    c0014af2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b67 <nmiHandler(regs*, void*)>:
c0014b67:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0014b6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b70:	e9 95 a4 ff ff       	jmp    c000f00a <Computer::handleNMI()>

c0014b75 <int_handler>:
c0014b75:	55                   	push   ebp
c0014b76:	57                   	push   edi
c0014b77:	56                   	push   esi
c0014b78:	53                   	push   ebx
c0014b79:	83 ec 0c             	sub    esp,0xc
c0014b7c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b80:	80 3d 24 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a24,0x0
c0014b87:	74 0b                	je     c0014b94 <int_handler+0x1f>
c0014b89:	fa                   	cli    
c0014b8a:	f4                   	hlt    
c0014b8b:	80 3d 24 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a24,0x0
c0014b92:	75 f5                	jne    c0014b89 <int_handler+0x14>
c0014b94:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0014b99:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ba2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ba8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bab:	83 f8 17             	cmp    eax,0x17
c0014bae:	77 13                	ja     c0014bc3 <int_handler+0x4e>
c0014bb0:	83 ec 08             	sub    esp,0x8
c0014bb3:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bb5:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bb8:	0f b6 c0             	movzx  eax,al
c0014bbb:	50                   	push   eax
c0014bbc:	57                   	push   edi
c0014bbd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bc0:	83 c4 10             	add    esp,0x10
c0014bc3:	83 c3 15             	add    ebx,0x15
c0014bc6:	c1 e3 04             	shl    ebx,0x4
c0014bc9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bcd:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014bd4:	31 db                	xor    ebx,ebx
c0014bd6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bda:	85 c0                	test   eax,eax
c0014bdc:	74 13                	je     c0014bf1 <int_handler+0x7c>
c0014bde:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014be1:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014be5:	74 1c                	je     c0014c03 <int_handler+0x8e>
c0014be7:	83 ec 08             	sub    esp,0x8
c0014bea:	52                   	push   edx
c0014beb:	56                   	push   esi
c0014bec:	ff d0                	call   eax
c0014bee:	83 c4 10             	add    esp,0x10
c0014bf1:	43                   	inc    ebx
c0014bf2:	83 fb 04             	cmp    ebx,0x4
c0014bf5:	75 df                	jne    c0014bd6 <int_handler+0x61>
c0014bf7:	83 c4 0c             	add    esp,0xc
c0014bfa:	31 c0                	xor    eax,eax
c0014bfc:	5b                   	pop    ebx
c0014bfd:	31 d2                	xor    edx,edx
c0014bff:	5e                   	pop    esi
c0014c00:	5f                   	pop    edi
c0014c01:	5d                   	pop    ebp
c0014c02:	c3                   	ret    
c0014c03:	83 ec 08             	sub    esp,0x8
c0014c06:	52                   	push   edx
c0014c07:	56                   	push   esi
c0014c08:	ff d0                	call   eax
c0014c0a:	83 c4 10             	add    esp,0x10
c0014c0d:	83 c4 0c             	add    esp,0xc
c0014c10:	5b                   	pop    ebx
c0014c11:	5e                   	pop    esi
c0014c12:	5f                   	pop    edi
c0014c13:	5d                   	pop    ebp
c0014c14:	c3                   	ret    
c0014c15:	90                   	nop

c0014c16 <InterruptController::InterruptController(char const*)>:
c0014c16:	83 ec 1c             	sub    esp,0x1c
c0014c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c1d:	83 ec 08             	sub    esp,0x8
c0014c20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c24:	50                   	push   eax
c0014c25:	e8 72 f8 ff ff       	call   c001449c <Device::Device(char const*)>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	ba 74 ba 02 c0       	mov    edx,0xc002ba74
c0014c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c36:	89 10                	mov    DWORD PTR [eax],edx
c0014c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c3c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c46:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c4e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c56:	7f 5e                	jg     c0014cb6 <InterruptController::InterruptController(char const*)+0xa0>
c0014c58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c60:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c65:	7f 49                	jg     c0014cb0 <InterruptController::InterruptController(char const*)+0x9a>
c0014c67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c6f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c7a:	01 ca                	add    edx,ecx
c0014c7c:	83 c2 54             	add    edx,0x54
c0014c7f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c8f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c9a:	01 ca                	add    edx,ecx
c0014c9c:	81 c2 54 04 00 00    	add    edx,0x454
c0014ca2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014caa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cae:	eb b0                	jmp    c0014c60 <InterruptController::InterruptController(char const*)+0x4a>
c0014cb0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cb4:	eb 98                	jmp    c0014c4e <InterruptController::InterruptController(char const*)+0x38>
c0014cb6:	90                   	nop
c0014cb7:	83 c4 1c             	add    esp,0x1c
c0014cba:	c3                   	ret    
c0014cbb:	90                   	nop

c0014cbc <InterruptController::~InterruptController()>:
c0014cbc:	83 ec 0c             	sub    esp,0xc
c0014cbf:	ba 74 ba 02 c0       	mov    edx,0xc002ba74
c0014cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cc8:	89 10                	mov    DWORD PTR [eax],edx
c0014cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cce:	83 ec 0c             	sub    esp,0xc
c0014cd1:	50                   	push   eax
c0014cd2:	e8 a7 f4 ff ff       	call   c001417e <Device::~Device()>
c0014cd7:	83 c4 10             	add    esp,0x10
c0014cda:	90                   	nop
c0014cdb:	83 c4 0c             	add    esp,0xc
c0014cde:	c3                   	ret    
c0014cdf:	90                   	nop

c0014ce0 <InterruptController::~InterruptController()>:
c0014ce0:	83 ec 0c             	sub    esp,0xc
c0014ce3:	83 ec 0c             	sub    esp,0xc
c0014ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cea:	e8 cd ff ff ff       	call   c0014cbc <InterruptController::~InterruptController()>
c0014cef:	83 c4 10             	add    esp,0x10
c0014cf2:	83 ec 08             	sub    esp,0x8
c0014cf5:	68 58 21 00 00       	push   0x2158
c0014cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cfe:	e8 94 e0 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0014d03:	83 c4 10             	add    esp,0x10
c0014d06:	83 c4 0c             	add    esp,0xc
c0014d09:	c3                   	ret    

c0014d0a <displayDebugInfo(regs*)>:
c0014d0a:	55                   	push   ebp
c0014d0b:	57                   	push   edi
c0014d0c:	56                   	push   esi
c0014d0d:	53                   	push   ebx
c0014d0e:	83 ec 24             	sub    esp,0x24
c0014d11:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d15:	0f 20 c2             	mov    edx,cr0
c0014d18:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d1c:	0f 20 d7             	mov    edi,cr2
c0014d1f:	0f 20 de             	mov    esi,cr3
c0014d22:	0f 20 e5             	mov    ebp,cr4
c0014d25:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d28:	68 ee b7 02 c0       	push   0xc002b7ee
c0014d2d:	e8 45 e1 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014d32:	59                   	pop    ecx
c0014d33:	58                   	pop    eax
c0014d34:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d37:	68 f9 b7 02 c0       	push   0xc002b7f9
c0014d3c:	e8 36 e1 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014d41:	58                   	pop    eax
c0014d42:	5a                   	pop    edx
c0014d43:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d46:	68 04 b8 02 c0       	push   0xc002b804
c0014d4b:	e8 27 e1 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014d50:	59                   	pop    ecx
c0014d51:	58                   	pop    eax
c0014d52:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d55:	68 0f b8 02 c0       	push   0xc002b80f
c0014d5a:	e8 18 e1 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014d5f:	58                   	pop    eax
c0014d60:	5a                   	pop    edx
c0014d61:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d64:	68 1a b8 02 c0       	push   0xc002b81a
c0014d69:	e8 09 e1 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014d6e:	59                   	pop    ecx
c0014d6f:	58                   	pop    eax
c0014d70:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d73:	68 25 b8 02 c0       	push   0xc002b825
c0014d78:	e8 fa e0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014d7d:	58                   	pop    eax
c0014d7e:	5a                   	pop    edx
c0014d7f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d82:	68 30 b8 02 c0       	push   0xc002b830
c0014d87:	e8 eb e0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014d8c:	59                   	pop    ecx
c0014d8d:	58                   	pop    eax
c0014d8e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d91:	68 3b b8 02 c0       	push   0xc002b83b
c0014d96:	e8 dc e0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014d9b:	58                   	pop    eax
c0014d9c:	5a                   	pop    edx
c0014d9d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014da0:	68 46 b8 02 c0       	push   0xc002b846
c0014da5:	e8 cd e0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014daa:	59                   	pop    ecx
c0014dab:	58                   	pop    eax
c0014dac:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014daf:	68 55 b8 02 c0       	push   0xc002b855
c0014db4:	e8 be e0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014db9:	58                   	pop    eax
c0014dba:	5a                   	pop    edx
c0014dbb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014dbe:	68 60 b8 02 c0       	push   0xc002b860
c0014dc3:	e8 af e0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014dc8:	59                   	pop    ecx
c0014dc9:	58                   	pop    eax
c0014dca:	57                   	push   edi
c0014dcb:	68 6b b8 02 c0       	push   0xc002b86b
c0014dd0:	e8 a2 e0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014dd5:	58                   	pop    eax
c0014dd6:	5a                   	pop    edx
c0014dd7:	56                   	push   esi
c0014dd8:	68 76 b8 02 c0       	push   0xc002b876
c0014ddd:	e8 95 e0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0014de2:	59                   	pop    ecx
c0014de3:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014de8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dee:	e8 a7 be ff ff       	call   c0010c9a <setActiveTerminal(VgaText*)>
c0014df3:	58                   	pop    eax
c0014df4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014df7:	5a                   	pop    edx
c0014df8:	c1 e0 05             	shl    eax,0x5
c0014dfb:	05 80 de 02 c0       	add    eax,0xc002de80
c0014e00:	50                   	push   eax
c0014e01:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014e06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e0c:	e8 15 c2 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014e11:	59                   	pop    ecx
c0014e12:	58                   	pop    eax
c0014e13:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014e18:	68 81 b8 02 c0       	push   0xc002b881
c0014e1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e23:	e8 fe c1 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014e28:	58                   	pop    eax
c0014e29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e2e:	5a                   	pop    edx
c0014e2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e32:	83 c0 0c             	add    eax,0xc
c0014e35:	50                   	push   eax
c0014e36:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014e3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e41:	e8 e0 c1 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014e46:	59                   	pop    ecx
c0014e47:	58                   	pop    eax
c0014e48:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014e4d:	68 8a b8 02 c0       	push   0xc002b88a
c0014e52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e58:	e8 c9 c1 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014e5d:	58                   	pop    eax
c0014e5e:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014e63:	5a                   	pop    edx
c0014e64:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6d:	e8 da c1 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014e72:	59                   	pop    ecx
c0014e73:	58                   	pop    eax
c0014e74:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014e79:	68 92 b8 02 c0       	push   0xc002b892
c0014e7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e84:	e8 9d c1 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014e89:	58                   	pop    eax
c0014e8a:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014e8f:	5a                   	pop    edx
c0014e90:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e99:	e8 ae c1 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014e9e:	59                   	pop    ecx
c0014e9f:	58                   	pop    eax
c0014ea0:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014ea5:	68 9a b8 02 c0       	push   0xc002b89a
c0014eaa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb0:	e8 71 c1 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014eb5:	58                   	pop    eax
c0014eb6:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014ebb:	5a                   	pop    edx
c0014ebc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ebf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec5:	e8 82 c1 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014eca:	59                   	pop    ecx
c0014ecb:	58                   	pop    eax
c0014ecc:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014ed1:	68 a2 b8 02 c0       	push   0xc002b8a2
c0014ed6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014edc:	e8 45 c1 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014ee1:	58                   	pop    eax
c0014ee2:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014ee7:	5a                   	pop    edx
c0014ee8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014eeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef1:	e8 56 c1 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014ef6:	59                   	pop    ecx
c0014ef7:	58                   	pop    eax
c0014ef8:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014efd:	68 aa b8 02 c0       	push   0xc002b8aa
c0014f02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f08:	e8 19 c1 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014f0d:	58                   	pop    eax
c0014f0e:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014f13:	5a                   	pop    edx
c0014f14:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1d:	e8 2a c1 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014f22:	59                   	pop    ecx
c0014f23:	58                   	pop    eax
c0014f24:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014f29:	68 b2 b8 02 c0       	push   0xc002b8b2
c0014f2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f34:	e8 ed c0 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014f39:	58                   	pop    eax
c0014f3a:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014f3f:	5a                   	pop    edx
c0014f40:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f49:	e8 fe c0 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014f4e:	59                   	pop    ecx
c0014f4f:	58                   	pop    eax
c0014f50:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014f55:	68 ba b8 02 c0       	push   0xc002b8ba
c0014f5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f60:	e8 c1 c0 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014f65:	58                   	pop    eax
c0014f66:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014f6b:	5a                   	pop    edx
c0014f6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f70:	52                   	push   edx
c0014f71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f77:	e8 d0 c0 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014f7c:	59                   	pop    ecx
c0014f7d:	58                   	pop    eax
c0014f7e:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014f83:	68 c3 b8 02 c0       	push   0xc002b8c3
c0014f88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8e:	e8 93 c0 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014f93:	58                   	pop    eax
c0014f94:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014f99:	5a                   	pop    edx
c0014f9a:	57                   	push   edi
c0014f9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa1:	e8 a6 c0 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014fa6:	59                   	pop    ecx
c0014fa7:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014fac:	5f                   	pop    edi
c0014fad:	68 cb b8 02 c0       	push   0xc002b8cb
c0014fb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb8:	e8 69 c0 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014fbd:	58                   	pop    eax
c0014fbe:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014fc3:	5a                   	pop    edx
c0014fc4:	56                   	push   esi
c0014fc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcb:	e8 7c c0 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014fd0:	59                   	pop    ecx
c0014fd1:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014fd6:	5e                   	pop    esi
c0014fd7:	68 d3 b8 02 c0       	push   0xc002b8d3
c0014fdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe2:	e8 3f c0 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0014fe7:	5f                   	pop    edi
c0014fe8:	58                   	pop    eax
c0014fe9:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0014fee:	55                   	push   ebp
c0014fef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff5:	e8 52 c0 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0014ffa:	58                   	pop    eax
c0014ffb:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0015000:	5a                   	pop    edx
c0015001:	68 db b8 02 c0       	push   0xc002b8db
c0015006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500c:	e8 15 c0 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0015011:	0f 21 c0             	mov    eax,db0
c0015014:	59                   	pop    ecx
c0015015:	5e                   	pop    esi
c0015016:	50                   	push   eax
c0015017:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001501c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015022:	e8 25 c0 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0015027:	5f                   	pop    edi
c0015028:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001502d:	5d                   	pop    ebp
c001502e:	68 e4 b8 02 c0       	push   0xc002b8e4
c0015033:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015039:	e8 e8 bf ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001503e:	0f 21 c8             	mov    eax,db1
c0015041:	5a                   	pop    edx
c0015042:	59                   	pop    ecx
c0015043:	50                   	push   eax
c0015044:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0015049:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504f:	e8 f8 bf ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0015054:	5e                   	pop    esi
c0015055:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001505a:	5f                   	pop    edi
c001505b:	68 ec b8 02 c0       	push   0xc002b8ec
c0015060:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015066:	e8 bb bf ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001506b:	0f 21 d0             	mov    eax,db2
c001506e:	5d                   	pop    ebp
c001506f:	5a                   	pop    edx
c0015070:	50                   	push   eax
c0015071:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0015076:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507c:	e8 cb bf ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0015081:	59                   	pop    ecx
c0015082:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0015087:	5e                   	pop    esi
c0015088:	68 f4 b8 02 c0       	push   0xc002b8f4
c001508d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015093:	e8 8e bf ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0015098:	0f 21 d8             	mov    eax,db3
c001509b:	5f                   	pop    edi
c001509c:	5d                   	pop    ebp
c001509d:	50                   	push   eax
c001509e:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c00150a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a9:	e8 9e bf ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c00150ae:	58                   	pop    eax
c00150af:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c00150b4:	5a                   	pop    edx
c00150b5:	68 fc b8 02 c0       	push   0xc002b8fc
c00150ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c0:	e8 61 bf ff ff       	call   c0011026 <VgaText::puts(char const*)>
c00150c5:	0f 21 f0             	mov    eax,db6
c00150c8:	59                   	pop    ecx
c00150c9:	5e                   	pop    esi
c00150ca:	50                   	push   eax
c00150cb:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c00150d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d6:	e8 71 bf ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c00150db:	5f                   	pop    edi
c00150dc:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c00150e1:	5d                   	pop    ebp
c00150e2:	68 04 b9 02 c0       	push   0xc002b904
c00150e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ed:	e8 34 bf ff ff       	call   c0011026 <VgaText::puts(char const*)>
c00150f2:	0f 21 f8             	mov    eax,db7
c00150f5:	5a                   	pop    edx
c00150f6:	59                   	pop    ecx
c00150f7:	50                   	push   eax
c00150f8:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c00150fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015103:	e8 44 bf ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0015108:	5e                   	pop    esi
c0015109:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001510c:	e8 aa 89 00 00       	call   c001dabb <Thr::getDriverNameFromAddress(unsigned long)>
c0015111:	83 c4 10             	add    esp,0x10
c0015114:	85 c0                	test   eax,eax
c0015116:	74 7d                	je     c0015195 <displayDebugInfo(regs*)+0x48b>
c0015118:	89 c6                	mov    esi,eax
c001511a:	50                   	push   eax
c001511b:	50                   	push   eax
c001511c:	56                   	push   esi
c001511d:	68 0c b9 02 c0       	push   0xc002b90c
c0015122:	e8 50 dd ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0015127:	5a                   	pop    edx
c0015128:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001512d:	59                   	pop    ecx
c001512e:	68 1a b9 02 c0       	push   0xc002b91a
c0015133:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015139:	e8 e8 be ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001513e:	5f                   	pop    edi
c001513f:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0015144:	5d                   	pop    ebp
c0015145:	56                   	push   esi
c0015146:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001514c:	e8 d5 be ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0015151:	58                   	pop    eax
c0015152:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0015157:	5a                   	pop    edx
c0015158:	68 26 b9 02 c0       	push   0xc002b926
c001515d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015163:	e8 be be ff ff       	call   c0011026 <VgaText::puts(char const*)>
c0015168:	59                   	pop    ecx
c0015169:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001516e:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015174:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015177:	e8 76 89 00 00       	call   c001daf2 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001517c:	5b                   	pop    ebx
c001517d:	5d                   	pop    ebp
c001517e:	50                   	push   eax
c001517f:	57                   	push   edi
c0015180:	e8 c7 be ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c0015185:	58                   	pop    eax
c0015186:	5a                   	pop    edx
c0015187:	56                   	push   esi
c0015188:	68 32 b9 02 c0       	push   0xc002b932
c001518d:	e8 e5 dc ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0015192:	83 c4 10             	add    esp,0x10
c0015195:	fa                   	cli    
c0015196:	f4                   	hlt    
c0015197:	eb fe                	jmp    c0015197 <displayDebugInfo(regs*)+0x48d>

c0015199 <x87EmulHandler(regs*, void*)>:
c0015199:	83 ec 0c             	sub    esp,0xc
c001519c:	0f 20 c2             	mov    edx,cr0
c001519f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151a4:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00151a8:	75 4b                	jne    c00151f5 <x87EmulHandler(regs*, void*)+0x5c>
c00151aa:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00151af:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00151b5:	85 c0                	test   eax,eax
c00151b7:	74 05                	je     c00151be <x87EmulHandler(regs*, void*)+0x25>
c00151b9:	83 e2 08             	and    edx,0x8
c00151bc:	75 17                	jne    c00151d5 <x87EmulHandler(regs*, void*)+0x3c>
c00151be:	83 ec 0c             	sub    esp,0xc
c00151c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151c5:	e8 65 af 00 00       	call   c002012f <Vm::x87Handler(regs*)>
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	84 c0                	test   al,al
c00151cf:	74 24                	je     c00151f5 <x87EmulHandler(regs*, void*)+0x5c>
c00151d1:	83 c4 0c             	add    esp,0xc
c00151d4:	c3                   	ret    
c00151d5:	83 ec 0c             	sub    esp,0xc
c00151d8:	68 58 b9 02 c0       	push   0xc002b958
c00151dd:	e8 95 dc ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00151e2:	0f 06                	clts   
c00151e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	a3 68 f0 02 c0       	mov    ds:0xc002f068,eax
c00151f1:	83 c4 0c             	add    esp,0xc
c00151f4:	c3                   	ret    
c00151f5:	83 ec 0c             	sub    esp,0xc
c00151f8:	68 42 b9 02 c0       	push   0xc002b942
c00151fd:	e8 75 dc ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0015202:	5a                   	pop    edx
c0015203:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015207:	e8 fe fa ff ff       	call   c0014d0a <displayDebugInfo(regs*)>

c001520c <gpFault(regs*, void*)>:
c001520c:	53                   	push   ebx
c001520d:	83 ec 14             	sub    esp,0x14
c0015210:	c7 05 64 f0 02 c0 ac f4 01 c0 	mov    DWORD PTR ds:0xc002f064,0xc001f4ac
c001521a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001521e:	53                   	push   ebx
c001521f:	e8 88 a2 00 00       	call   c001f4ac <Vm::faultHandler(regs*)>
c0015224:	83 c4 10             	add    esp,0x10
c0015227:	84 c0                	test   al,al
c0015229:	74 05                	je     c0015230 <gpFault(regs*, void*)+0x24>
c001522b:	83 c4 08             	add    esp,0x8
c001522e:	5b                   	pop    ebx
c001522f:	c3                   	ret    
c0015230:	83 ec 0c             	sub    esp,0xc
c0015233:	68 65 b9 02 c0       	push   0xc002b965
c0015238:	e8 3a dc ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001523d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015240:	e8 c5 fa ff ff       	call   c0014d0a <displayDebugInfo(regs*)>

c0015245 <pgFault(regs*, void*)>:
c0015245:	83 ec 14             	sub    esp,0x14
c0015248:	0f 20 d0             	mov    eax,cr2
c001524b:	50                   	push   eax
c001524c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015251:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015254:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001525a:	e8 35 d8 ff ff       	call   c0012a94 <VAS::tryLoadBackOffDisk(unsigned long)>
c001525f:	83 c4 10             	add    esp,0x10
c0015262:	84 c0                	test   al,al
c0015264:	74 04                	je     c001526a <pgFault(regs*, void*)+0x25>
c0015266:	83 c4 0c             	add    esp,0xc
c0015269:	c3                   	ret    
c001526a:	83 ec 0c             	sub    esp,0xc
c001526d:	68 80 b9 02 c0       	push   0xc002b980
c0015272:	e8 00 dc ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0015277:	58                   	pop    eax
c0015278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001527c:	e8 89 fa ff ff       	call   c0014d0a <displayDebugInfo(regs*)>

c0015281 <otherISRHandler(regs*, void*)>:
c0015281:	53                   	push   ebx
c0015282:	83 ec 0c             	sub    esp,0xc
c0015285:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015289:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001528c:	50                   	push   eax
c001528d:	50                   	push   eax
c001528e:	68 8d b9 02 c0       	push   0xc002b98d
c0015293:	e8 df db ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0015298:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001529b:	e8 6a fa ff ff       	call   c0014d0a <displayDebugInfo(regs*)>

c00152a0 <opcodeFault(regs*, void*)>:
c00152a0:	55                   	push   ebp
c00152a1:	89 e5                	mov    ebp,esp
c00152a3:	56                   	push   esi
c00152a4:	53                   	push   ebx
c00152a5:	83 ec 40             	sub    esp,0x40
c00152a8:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00152ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152b3:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152b9:	84 c0                	test   al,al
c00152bb:	74 24                	je     c00152e1 <opcodeFault(regs*, void*)+0x41>
c00152bd:	83 ec 0c             	sub    esp,0xc
c00152c0:	68 ac b9 02 c0       	push   0xc002b9ac
c00152c5:	e8 ad db ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d3:	8d 50 19             	lea    edx,[eax+0x19]
c00152d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152dc:	e9 d5 05 00 00       	jmp    c00158b6 <opcodeFault(regs*, void*)+0x616>
c00152e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152ea:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152ee:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015300:	3c f0                	cmp    al,0xf0
c0015302:	75 17                	jne    c001531b <opcodeFault(regs*, void*)+0x7b>
c0015304:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530d:	8d 50 01             	lea    edx,[eax+0x1]
c0015310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015313:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015316:	e9 da 00 00 00       	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c001531b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531e:	8a 00                	mov    al,BYTE PTR [eax]
c0015320:	3c f2                	cmp    al,0xf2
c0015322:	74 09                	je     c001532d <opcodeFault(regs*, void*)+0x8d>
c0015324:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015327:	8a 00                	mov    al,BYTE PTR [eax]
c0015329:	3c f3                	cmp    al,0xf3
c001532b:	75 1b                	jne    c0015348 <opcodeFault(regs*, void*)+0xa8>
c001532d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015331:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015337:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533a:	8d 50 01             	lea    edx,[eax+0x1]
c001533d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015340:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015343:	e9 ad 00 00 00       	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c0015348:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534b:	8a 00                	mov    al,BYTE PTR [eax]
c001534d:	3c 66                	cmp    al,0x66
c001534f:	75 1f                	jne    c0015370 <opcodeFault(regs*, void*)+0xd0>
c0015351:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015355:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015359:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015362:	8d 50 01             	lea    edx,[eax+0x1]
c0015365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015368:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536b:	e9 85 00 00 00       	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c0015370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015373:	8a 00                	mov    al,BYTE PTR [eax]
c0015375:	3c 67                	cmp    al,0x67
c0015377:	75 18                	jne    c0015391 <opcodeFault(regs*, void*)+0xf1>
c0015379:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001537d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015383:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015386:	8d 50 01             	lea    edx,[eax+0x1]
c0015389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001538f:	eb 64                	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c0015391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015394:	8a 00                	mov    al,BYTE PTR [eax]
c0015396:	3c 2e                	cmp    al,0x2e
c0015398:	74 09                	je     c00153a3 <opcodeFault(regs*, void*)+0x103>
c001539a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539d:	8a 00                	mov    al,BYTE PTR [eax]
c001539f:	3c 3e                	cmp    al,0x3e
c00153a1:	75 18                	jne    c00153bb <opcodeFault(regs*, void*)+0x11b>
c00153a3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b0:	8d 50 01             	lea    edx,[eax+0x1]
c00153b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153b9:	eb 3a                	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c00153bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153be:	8a 00                	mov    al,BYTE PTR [eax]
c00153c0:	3c 36                	cmp    al,0x36
c00153c2:	74 1b                	je     c00153df <opcodeFault(regs*, void*)+0x13f>
c00153c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c7:	8a 00                	mov    al,BYTE PTR [eax]
c00153c9:	3c 26                	cmp    al,0x26
c00153cb:	74 12                	je     c00153df <opcodeFault(regs*, void*)+0x13f>
c00153cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d0:	8a 00                	mov    al,BYTE PTR [eax]
c00153d2:	3c 64                	cmp    al,0x64
c00153d4:	74 09                	je     c00153df <opcodeFault(regs*, void*)+0x13f>
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	8a 00                	mov    al,BYTE PTR [eax]
c00153db:	3c 65                	cmp    al,0x65
c00153dd:	75 16                	jne    c00153f5 <opcodeFault(regs*, void*)+0x155>
c00153df:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153e3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ec:	8d 50 01             	lea    edx,[eax+0x1]
c00153ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f8:	8a 00                	mov    al,BYTE PTR [eax]
c00153fa:	3c 0f                	cmp    al,0xf
c00153fc:	0f 85 ad 00 00 00    	jne    c00154af <opcodeFault(regs*, void*)+0x20f>
c0015402:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015405:	40                   	inc    eax
c0015406:	8a 00                	mov    al,BYTE PTR [eax]
c0015408:	3c c2                	cmp    al,0xc2
c001540a:	74 0e                	je     c001541a <opcodeFault(regs*, void*)+0x17a>
c001540c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540f:	40                   	inc    eax
c0015410:	8a 00                	mov    al,BYTE PTR [eax]
c0015412:	3c c3                	cmp    al,0xc3
c0015414:	0f 85 95 00 00 00    	jne    c00154af <opcodeFault(regs*, void*)+0x20f>
c001541a:	83 ec 0c             	sub    esp,0xc
c001541d:	68 cf b9 02 c0       	push   0xc002b9cf
c0015422:	e8 50 da ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015430:	8d 50 01             	lea    edx,[eax+0x1]
c0015433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015436:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015439:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001543c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543f:	8a 00                	mov    al,BYTE PTR [eax]
c0015441:	8d 50 fe             	lea    edx,[eax-0x2]
c0015444:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015447:	88 10                	mov    BYTE PTR [eax],dl
c0015449:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001544c:	50                   	push   eax
c001544d:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015450:	50                   	push   eax
c0015451:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015454:	50                   	push   eax
c0015455:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015458:	e8 cf 4a 00 00       	call   c0019f2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015466:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015469:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001546c:	01 d0                	add    eax,edx
c001546e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015474:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015477:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001547a:	48                   	dec    eax
c001547b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001547e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015481:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015484:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548a:	83 ec 04             	sub    esp,0x4
c001548d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015490:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015493:	50                   	push   eax
c0015494:	e8 1b ad fe ff       	call   c00001b4 <voodooXADD>
c0015499:	83 c4 10             	add    esp,0x10
c001549c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001549f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154a2:	01 c2                	add    edx,eax
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154aa:	e9 07 04 00 00       	jmp    c00158b6 <opcodeFault(regs*, void*)+0x616>
c00154af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b2:	8a 00                	mov    al,BYTE PTR [eax]
c00154b4:	3c 0f                	cmp    al,0xf
c00154b6:	0f 85 8b 01 00 00    	jne    c0015647 <opcodeFault(regs*, void*)+0x3a7>
c00154bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bf:	40                   	inc    eax
c00154c0:	8a 00                	mov    al,BYTE PTR [eax]
c00154c2:	3c c7                	cmp    al,0xc7
c00154c4:	0f 86 7d 01 00 00    	jbe    c0015647 <opcodeFault(regs*, void*)+0x3a7>
c00154ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cd:	40                   	inc    eax
c00154ce:	8a 00                	mov    al,BYTE PTR [eax]
c00154d0:	3c cf                	cmp    al,0xcf
c00154d2:	0f 87 6f 01 00 00    	ja     c0015647 <opcodeFault(regs*, void*)+0x3a7>
c00154d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154db:	40                   	inc    eax
c00154dc:	8a 00                	mov    al,BYTE PTR [eax]
c00154de:	83 c0 38             	add    eax,0x38
c00154e1:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154e4:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154e8:	75 0b                	jne    c00154f5 <opcodeFault(regs*, void*)+0x255>
c00154ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ed:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154f0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f3:	eb 75                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c00154f5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154f9:	75 0b                	jne    c0015506 <opcodeFault(regs*, void*)+0x266>
c00154fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015501:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015504:	eb 64                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015506:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001550a:	75 0b                	jne    c0015517 <opcodeFault(regs*, void*)+0x277>
c001550c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015512:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015515:	eb 53                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015517:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001551b:	75 0b                	jne    c0015528 <opcodeFault(regs*, void*)+0x288>
c001551d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015520:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015523:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015526:	eb 42                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015528:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001552c:	75 0b                	jne    c0015539 <opcodeFault(regs*, void*)+0x299>
c001552e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015531:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015534:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015537:	eb 31                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015539:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001553d:	75 0b                	jne    c001554a <opcodeFault(regs*, void*)+0x2aa>
c001553f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015542:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015545:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015548:	eb 20                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c001554a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001554e:	75 0b                	jne    c001555b <opcodeFault(regs*, void*)+0x2bb>
c0015550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015553:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015556:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015559:	eb 0f                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c001555b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001555f:	75 09                	jne    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015564:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015567:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556a:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001556e:	74 10                	je     c0015580 <opcodeFault(regs*, void*)+0x2e0>
c0015570:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015577:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001557e:	eb 2d                	jmp    c00155ad <opcodeFault(regs*, void*)+0x30d>
c0015580:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015583:	c1 e0 18             	shl    eax,0x18
c0015586:	89 c2                	mov    edx,eax
c0015588:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001558b:	c1 e0 08             	shl    eax,0x8
c001558e:	25 00 00 ff 00       	and    eax,0xff0000
c0015593:	09 c2                	or     edx,eax
c0015595:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015598:	c1 e8 08             	shr    eax,0x8
c001559b:	25 00 ff 00 00       	and    eax,0xff00
c00155a0:	09 c2                	or     edx,eax
c00155a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155a5:	c1 e8 18             	shr    eax,0x18
c00155a8:	09 d0                	or     eax,edx
c00155aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ad:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155b1:	75 0b                	jne    c00155be <opcodeFault(regs*, void*)+0x31e>
c00155b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155bc:	eb 75                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c00155be:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155c2:	75 0b                	jne    c00155cf <opcodeFault(regs*, void*)+0x32f>
c00155c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155cd:	eb 64                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c00155cf:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155d3:	75 0b                	jne    c00155e0 <opcodeFault(regs*, void*)+0x340>
c00155d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155db:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155de:	eb 53                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c00155e0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155e4:	75 0b                	jne    c00155f1 <opcodeFault(regs*, void*)+0x351>
c00155e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155ef:	eb 42                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c00155f1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155f5:	75 0b                	jne    c0015602 <opcodeFault(regs*, void*)+0x362>
c00155f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fd:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015600:	eb 31                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c0015602:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015606:	75 0b                	jne    c0015613 <opcodeFault(regs*, void*)+0x373>
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015611:	eb 20                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c0015613:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015617:	75 0b                	jne    c0015624 <opcodeFault(regs*, void*)+0x384>
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015622:	eb 0f                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c0015624:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015628:	75 09                	jne    c0015633 <opcodeFault(regs*, void*)+0x393>
c001562a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015630:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015636:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015639:	8d 50 02             	lea    edx,[eax+0x2]
c001563c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015642:	e9 6f 02 00 00       	jmp    c00158b6 <opcodeFault(regs*, void*)+0x616>
c0015647:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564a:	8a 00                	mov    al,BYTE PTR [eax]
c001564c:	3c 0f                	cmp    al,0xf
c001564e:	0f 85 8d 01 00 00    	jne    c00157e1 <opcodeFault(regs*, void*)+0x541>
c0015654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015657:	40                   	inc    eax
c0015658:	8a 00                	mov    al,BYTE PTR [eax]
c001565a:	3c c7                	cmp    al,0xc7
c001565c:	0f 85 7f 01 00 00    	jne    c00157e1 <opcodeFault(regs*, void*)+0x541>
c0015662:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001566b:	8d 50 01             	lea    edx,[eax+0x1]
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015674:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015677:	50                   	push   eax
c0015678:	8d 45 bb             	lea    eax,[ebp-0x45]
c001567b:	50                   	push   eax
c001567c:	8d 45 bc             	lea    eax,[ebp-0x44]
c001567f:	50                   	push   eax
c0015680:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015683:	e8 a4 48 00 00       	call   c0019f2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015688:	83 c4 10             	add    esp,0x10
c001568b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001568e:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015691:	83 f0 01             	xor    eax,0x1
c0015694:	84 c0                	test   al,al
c0015696:	0f 84 45 01 00 00    	je     c00157e1 <opcodeFault(regs*, void*)+0x541>
c001569c:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001569f:	3c 01                	cmp    al,0x1
c00156a1:	0f 85 3a 01 00 00    	jne    c00157e1 <opcodeFault(regs*, void*)+0x541>
c00156a7:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156aa:	83 f0 01             	xor    eax,0x1
c00156ad:	84 c0                	test   al,al
c00156af:	0f 84 2c 01 00 00    	je     c00157e1 <opcodeFault(regs*, void*)+0x541>
c00156b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156bb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156be:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00156c5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156c8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156cb:	89 c2                	mov    edx,eax
c00156cd:	b8 00 00 00 00       	mov    eax,0x0
c00156d2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156d5:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156db:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156de:	ba 00 00 00 00       	mov    edx,0x0
c00156e3:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156e6:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156ef:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156f2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156f9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156fc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156ff:	89 c2                	mov    edx,eax
c0015701:	b8 00 00 00 00       	mov    eax,0x0
c0015706:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015709:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001570c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015712:	ba 00 00 00 00       	mov    edx,0x0
c0015717:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001571a:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001571d:	fa                   	cli    
c001571e:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0015723:	40                   	inc    eax
c0015724:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0015729:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001572c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001572f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015731:	89 c1                	mov    ecx,eax
c0015733:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015736:	89 cb                	mov    ebx,ecx
c0015738:	89 d0                	mov    eax,edx
c001573a:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001573d:	89 c6                	mov    esi,eax
c001573f:	89 f0                	mov    eax,esi
c0015741:	09 d8                	or     eax,ebx
c0015743:	85 c0                	test   eax,eax
c0015745:	75 21                	jne    c0015768 <opcodeFault(regs*, void*)+0x4c8>
c0015747:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001574a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001574d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015750:	89 01                	mov    DWORD PTR [ecx],eax
c0015752:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015758:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001575b:	83 c8 40             	or     eax,0x40
c001575e:	89 c2                	mov    edx,eax
c0015760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015763:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015766:	eb 3e                	jmp    c00157a6 <opcodeFault(regs*, void*)+0x506>
c0015768:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001576b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001576e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015770:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015773:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015776:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001577f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015782:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015785:	89 d0                	mov    eax,edx
c0015787:	31 d2                	xor    edx,edx
c0015789:	89 c3                	mov    ebx,eax
c001578b:	89 d6                	mov    esi,edx
c001578d:	89 da                	mov    edx,ebx
c001578f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015792:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015798:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001579b:	83 e0 bf             	and    eax,0xffffffbf
c001579e:	89 c2                	mov    edx,eax
c00157a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a3:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157a6:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c00157ab:	48                   	dec    eax
c00157ac:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c00157b1:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c00157b6:	85 c0                	test   eax,eax
c00157b8:	75 01                	jne    c00157bb <opcodeFault(regs*, void*)+0x51b>
c00157ba:	fb                   	sti    
c00157bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157c1:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157c4:	01 c2                	add    edx,eax
c00157c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157cc:	83 ec 0c             	sub    esp,0xc
c00157cf:	68 de b9 02 c0       	push   0xc002b9de
c00157d4:	e8 9e d6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00157d9:	83 c4 10             	add    esp,0x10
c00157dc:	e9 d5 00 00 00       	jmp    c00158b6 <opcodeFault(regs*, void*)+0x616>
c00157e1:	83 ec 0c             	sub    esp,0xc
c00157e4:	68 f1 b9 02 c0       	push   0xc002b9f1
c00157e9:	e8 89 d6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157fd:	c1 e0 04             	shl    eax,0x4
c0015800:	01 d0                	add    eax,edx
c0015802:	83 c0 03             	add    eax,0x3
c0015805:	8a 00                	mov    al,BYTE PTR [eax]
c0015807:	0f b6 d8             	movzx  ebx,al
c001580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015813:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015816:	c1 e0 04             	shl    eax,0x4
c0015819:	01 d0                	add    eax,edx
c001581b:	83 c0 02             	add    eax,0x2
c001581e:	8a 00                	mov    al,BYTE PTR [eax]
c0015820:	0f b6 c8             	movzx  ecx,al
c0015823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015826:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001582f:	c1 e0 04             	shl    eax,0x4
c0015832:	01 d0                	add    eax,edx
c0015834:	40                   	inc    eax
c0015835:	8a 00                	mov    al,BYTE PTR [eax]
c0015837:	0f b6 d0             	movzx  edx,al
c001583a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583d:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015843:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015846:	c1 e0 04             	shl    eax,0x4
c0015849:	01 f0                	add    eax,esi
c001584b:	8a 00                	mov    al,BYTE PTR [eax]
c001584d:	0f b6 c0             	movzx  eax,al
c0015850:	83 ec 0c             	sub    esp,0xc
c0015853:	53                   	push   ebx
c0015854:	51                   	push   ecx
c0015855:	52                   	push   edx
c0015856:	50                   	push   eax
c0015857:	68 04 ba 02 c0       	push   0xc002ba04
c001585c:	e8 16 d6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0015861:	83 c4 20             	add    esp,0x20
c0015864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015867:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001586a:	83 c0 03             	add    eax,0x3
c001586d:	8a 00                	mov    al,BYTE PTR [eax]
c001586f:	0f b6 d8             	movzx  ebx,al
c0015872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015875:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015878:	83 c0 02             	add    eax,0x2
c001587b:	8a 00                	mov    al,BYTE PTR [eax]
c001587d:	0f b6 c8             	movzx  ecx,al
c0015880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015883:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015886:	40                   	inc    eax
c0015887:	8a 00                	mov    al,BYTE PTR [eax]
c0015889:	0f b6 d0             	movzx  edx,al
c001588c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015892:	8a 00                	mov    al,BYTE PTR [eax]
c0015894:	0f b6 c0             	movzx  eax,al
c0015897:	83 ec 0c             	sub    esp,0xc
c001589a:	53                   	push   ebx
c001589b:	51                   	push   ecx
c001589c:	52                   	push   edx
c001589d:	50                   	push   eax
c001589e:	68 2c ba 02 c0       	push   0xc002ba2c
c00158a3:	e8 cf d5 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00158a8:	83 c4 20             	add    esp,0x20
c00158ab:	83 ec 0c             	sub    esp,0xc
c00158ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158b1:	e8 54 f4 ff ff       	call   c0014d0a <displayDebugInfo(regs*)>
c00158b6:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158b9:	5b                   	pop    ebx
c00158ba:	5e                   	pop    esi
c00158bb:	5d                   	pop    ebp
c00158bc:	c3                   	ret    

c00158bd <displayProgramFault(char const*)>:
c00158bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158c5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158cb:	85 c0                	test   eax,eax
c00158cd:	74 15                	je     c00158e4 <displayProgramFault(char const*)+0x27>
c00158cf:	83 ec 0c             	sub    esp,0xc
c00158d2:	6a 04                	push   0x4
c00158d4:	6a 0f                	push   0xf
c00158d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158da:	50                   	push   eax
c00158db:	e8 88 b4 ff ff       	call   c0010d68 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158e0:	83 c4 1c             	add    esp,0x1c
c00158e3:	c3                   	ret    
c00158e4:	c3                   	ret    

c00158e5 <setupInterruptController()>:
c00158e5:	55                   	push   ebp
c00158e6:	89 e5                	mov    ebp,esp
c00158e8:	53                   	push   ebx
c00158e9:	83 ec 24             	sub    esp,0x24
c00158ec:	b8 00 00 00 00       	mov    eax,0x0
c00158f1:	85 c0                	test   eax,eax
c00158f3:	0f 95 c0             	setne  al
c00158f6:	84 c0                	test   al,al
c00158f8:	74 5b                	je     c0015955 <setupInterruptController()+0x70>
c00158fa:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015901:	83 ec 0c             	sub    esp,0xc
c0015904:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015907:	e8 b4 9f ff ff       	call   c000f8c0 <malloc>
c001590c:	83 c4 10             	add    esp,0x10
c001590f:	89 c3                	mov    ebx,eax
c0015911:	83 ec 0c             	sub    esp,0xc
c0015914:	53                   	push   ebx
c0015915:	e8 8c 08 01 00       	call   c00261a6 <APIC::APIC()>
c001591a:	83 c4 10             	add    esp,0x10
c001591d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015920:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015923:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015926:	8b 00                	mov    eax,DWORD PTR [eax]
c0015928:	83 c0 08             	add    eax,0x8
c001592b:	8b 00                	mov    eax,DWORD PTR [eax]
c001592d:	6a 00                	push   0x0
c001592f:	6a 00                	push   0x0
c0015931:	6a 00                	push   0x0
c0015933:	52                   	push   edx
c0015934:	ff d0                	call   eax
c0015936:	83 c4 10             	add    esp,0x10
c0015939:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001593e:	83 ec 08             	sub    esp,0x8
c0015941:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015944:	50                   	push   eax
c0015945:	e8 62 e9 ff ff       	call   c00142ac <Device::addChild(Device*)>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015950:	e9 89 03 00 00       	jmp    c0015cde <setupInterruptController()+0x3f9>
c0015955:	a0 60 18 03 c0       	mov    al,ds:0xc0031860
c001595a:	84 c0                	test   al,al
c001595c:	75 24                	jne    c0015982 <setupInterruptController()+0x9d>
c001595e:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0015963:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015969:	83 e2 fe             	and    edx,0xfffffffe
c001596c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015972:	83 ec 0c             	sub    esp,0xc
c0015975:	68 51 ba 02 c0       	push   0xc002ba51
c001597a:	e8 f8 d4 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0015987:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001598d:	83 e0 01             	and    eax,0x1
c0015990:	84 c0                	test   al,al
c0015992:	0f 95 c0             	setne  al
c0015995:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015998:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001599f:	83 ec 0c             	sub    esp,0xc
c00159a2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159a5:	e8 16 9f ff ff       	call   c000f8c0 <malloc>
c00159aa:	83 c4 10             	add    esp,0x10
c00159ad:	89 c3                	mov    ebx,eax
c00159af:	83 ec 0c             	sub    esp,0xc
c00159b2:	53                   	push   ebx
c00159b3:	e8 46 0d 01 00       	call   c00266fe <PIC::PIC()>
c00159b8:	83 c4 10             	add    esp,0x10
c00159bb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c6:	83 c0 08             	add    eax,0x8
c00159c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159cb:	6a 00                	push   0x0
c00159cd:	6a 00                	push   0x0
c00159cf:	6a 00                	push   0x0
c00159d1:	52                   	push   edx
c00159d2:	ff d0                	call   eax
c00159d4:	83 c4 10             	add    esp,0x10
c00159d7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159db:	74 73                	je     c0015a50 <setupInterruptController()+0x16b>
c00159dd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e5:	83 c0 0c             	add    eax,0xc
c00159e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ea:	6a 00                	push   0x0
c00159ec:	6a 00                	push   0x0
c00159ee:	6a 00                	push   0x0
c00159f0:	52                   	push   edx
c00159f1:	ff d0                	call   eax
c00159f3:	83 c4 10             	add    esp,0x10
c00159f6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159fa:	74 15                	je     c0015a11 <setupInterruptController()+0x12c>
c00159fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a01:	83 c0 04             	add    eax,0x4
c0015a04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a0c:	ff d0                	call   eax
c0015a0e:	83 c4 10             	add    esp,0x10
c0015a11:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a18:	83 ec 0c             	sub    esp,0xc
c0015a1b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a1e:	e8 9d 9e ff ff       	call   c000f8c0 <malloc>
c0015a23:	83 c4 10             	add    esp,0x10
c0015a26:	89 c3                	mov    ebx,eax
c0015a28:	83 ec 0c             	sub    esp,0xc
c0015a2b:	53                   	push   ebx
c0015a2c:	e8 75 07 01 00       	call   c00261a6 <APIC::APIC()>
c0015a31:	83 c4 10             	add    esp,0x10
c0015a34:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a37:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3f:	83 c0 08             	add    eax,0x8
c0015a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a44:	6a 00                	push   0x0
c0015a46:	6a 00                	push   0x0
c0015a48:	6a 00                	push   0x0
c0015a4a:	52                   	push   edx
c0015a4b:	ff d0                	call   eax
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0015a55:	83 ec 08             	sub    esp,0x8
c0015a58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5b:	50                   	push   eax
c0015a5c:	e8 4b e8 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	c7 05 68 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f068,0x0
c0015a6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a73:	83 c0 24             	add    eax,0x24
c0015a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a78:	6a 00                	push   0x0
c0015a7a:	68 81 52 01 c0       	push   0xc0015281
c0015a7f:	6a 00                	push   0x0
c0015a81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a84:	ff d0                	call   eax
c0015a86:	83 c4 10             	add    esp,0x10
c0015a89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8e:	83 c0 24             	add    eax,0x24
c0015a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a93:	6a 00                	push   0x0
c0015a95:	68 81 52 01 c0       	push   0xc0015281
c0015a9a:	6a 01                	push   0x1
c0015a9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a9f:	ff d0                	call   eax
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa9:	83 c0 24             	add    eax,0x24
c0015aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aae:	6a 00                	push   0x0
c0015ab0:	68 67 4b 01 c0       	push   0xc0014b67
c0015ab5:	6a 02                	push   0x2
c0015ab7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aba:	ff d0                	call   eax
c0015abc:	83 c4 10             	add    esp,0x10
c0015abf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac4:	83 c0 24             	add    eax,0x24
c0015ac7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac9:	6a 00                	push   0x0
c0015acb:	68 81 52 01 c0       	push   0xc0015281
c0015ad0:	6a 03                	push   0x3
c0015ad2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad5:	ff d0                	call   eax
c0015ad7:	83 c4 10             	add    esp,0x10
c0015ada:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015add:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adf:	83 c0 24             	add    eax,0x24
c0015ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae4:	6a 00                	push   0x0
c0015ae6:	68 81 52 01 c0       	push   0xc0015281
c0015aeb:	6a 04                	push   0x4
c0015aed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af0:	ff d0                	call   eax
c0015af2:	83 c4 10             	add    esp,0x10
c0015af5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afa:	83 c0 24             	add    eax,0x24
c0015afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aff:	6a 00                	push   0x0
c0015b01:	68 81 52 01 c0       	push   0xc0015281
c0015b06:	6a 05                	push   0x5
c0015b08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0b:	ff d0                	call   eax
c0015b0d:	83 c4 10             	add    esp,0x10
c0015b10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b13:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b15:	83 c0 24             	add    eax,0x24
c0015b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1a:	6a 00                	push   0x0
c0015b1c:	68 a0 52 01 c0       	push   0xc00152a0
c0015b21:	6a 06                	push   0x6
c0015b23:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b26:	ff d0                	call   eax
c0015b28:	83 c4 10             	add    esp,0x10
c0015b2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b30:	83 c0 24             	add    eax,0x24
c0015b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b35:	6a 00                	push   0x0
c0015b37:	68 99 51 01 c0       	push   0xc0015199
c0015b3c:	6a 07                	push   0x7
c0015b3e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b41:	ff d0                	call   eax
c0015b43:	83 c4 10             	add    esp,0x10
c0015b46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4b:	83 c0 24             	add    eax,0x24
c0015b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b50:	6a 00                	push   0x0
c0015b52:	68 82 49 01 c0       	push   0xc0014982
c0015b57:	6a 08                	push   0x8
c0015b59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5c:	ff d0                	call   eax
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b66:	83 c0 24             	add    eax,0x24
c0015b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6b:	6a 00                	push   0x0
c0015b6d:	68 81 52 01 c0       	push   0xc0015281
c0015b72:	6a 09                	push   0x9
c0015b74:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b77:	ff d0                	call   eax
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b81:	83 c0 24             	add    eax,0x24
c0015b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b86:	6a 00                	push   0x0
c0015b88:	68 81 52 01 c0       	push   0xc0015281
c0015b8d:	6a 0a                	push   0xa
c0015b8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b92:	ff d0                	call   eax
c0015b94:	83 c4 10             	add    esp,0x10
c0015b97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9c:	83 c0 24             	add    eax,0x24
c0015b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba1:	6a 00                	push   0x0
c0015ba3:	68 81 52 01 c0       	push   0xc0015281
c0015ba8:	6a 0b                	push   0xb
c0015baa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bad:	ff d0                	call   eax
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb7:	83 c0 24             	add    eax,0x24
c0015bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbc:	6a 00                	push   0x0
c0015bbe:	68 81 52 01 c0       	push   0xc0015281
c0015bc3:	6a 0c                	push   0xc
c0015bc5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc8:	ff d0                	call   eax
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd2:	83 c0 24             	add    eax,0x24
c0015bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd7:	6a 00                	push   0x0
c0015bd9:	68 0c 52 01 c0       	push   0xc001520c
c0015bde:	6a 0d                	push   0xd
c0015be0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be3:	ff d0                	call   eax
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bed:	83 c0 24             	add    eax,0x24
c0015bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf2:	6a 00                	push   0x0
c0015bf4:	68 45 52 01 c0       	push   0xc0015245
c0015bf9:	6a 0e                	push   0xe
c0015bfb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfe:	ff d0                	call   eax
c0015c00:	83 c4 10             	add    esp,0x10
c0015c03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c08:	83 c0 24             	add    eax,0x24
c0015c0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0d:	6a 00                	push   0x0
c0015c0f:	68 81 52 01 c0       	push   0xc0015281
c0015c14:	6a 0f                	push   0xf
c0015c16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c19:	ff d0                	call   eax
c0015c1b:	83 c4 10             	add    esp,0x10
c0015c1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c23:	83 c0 24             	add    eax,0x24
c0015c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c28:	6a 00                	push   0x0
c0015c2a:	68 81 52 01 c0       	push   0xc0015281
c0015c2f:	6a 10                	push   0x10
c0015c31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c34:	ff d0                	call   eax
c0015c36:	83 c4 10             	add    esp,0x10
c0015c39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3e:	83 c0 24             	add    eax,0x24
c0015c41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c43:	6a 00                	push   0x0
c0015c45:	68 81 52 01 c0       	push   0xc0015281
c0015c4a:	6a 11                	push   0x11
c0015c4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4f:	ff d0                	call   eax
c0015c51:	83 c4 10             	add    esp,0x10
c0015c54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c59:	83 c0 24             	add    eax,0x24
c0015c5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5e:	6a 00                	push   0x0
c0015c60:	68 81 52 01 c0       	push   0xc0015281
c0015c65:	6a 12                	push   0x12
c0015c67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6a:	ff d0                	call   eax
c0015c6c:	83 c4 10             	add    esp,0x10
c0015c6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c74:	83 c0 24             	add    eax,0x24
c0015c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c79:	6a 00                	push   0x0
c0015c7b:	68 81 52 01 c0       	push   0xc0015281
c0015c80:	6a 13                	push   0x13
c0015c82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c85:	ff d0                	call   eax
c0015c87:	83 c4 10             	add    esp,0x10
c0015c8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8f:	83 c0 24             	add    eax,0x24
c0015c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c94:	6a 00                	push   0x0
c0015c96:	68 81 52 01 c0       	push   0xc0015281
c0015c9b:	6a 14                	push   0x14
c0015c9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca0:	ff d0                	call   eax
c0015ca2:	83 c4 10             	add    esp,0x10
c0015ca5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015caa:	83 c0 24             	add    eax,0x24
c0015cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015caf:	6a 00                	push   0x0
c0015cb1:	68 81 52 01 c0       	push   0xc0015281
c0015cb6:	6a 1e                	push   0x1e
c0015cb8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cbb:	ff d0                	call   eax
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc5:	83 c0 24             	add    eax,0x24
c0015cc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cca:	6a 00                	push   0x0
c0015ccc:	68 31 cb 01 c0       	push   0xc001cb31
c0015cd1:	6a 60                	push   0x60
c0015cd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd6:	ff d0                	call   eax
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cde:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ce1:	c9                   	leave  
c0015ce2:	c3                   	ret    
c0015ce3:	90                   	nop

c0015ce4 <InterruptController::convertLegacyIRQNumber(int)>:
c0015ce4:	55                   	push   ebp
c0015ce5:	89 e5                	mov    ebp,esp
c0015ce7:	83 ec 08             	sub    esp,0x8
c0015cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ced:	83 ec 0c             	sub    esp,0xc
c0015cf0:	50                   	push   eax
c0015cf1:	e8 a2 e8 ff ff       	call   c0014598 <Device::getName()>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	8a 00                	mov    al,BYTE PTR [eax]
c0015cfb:	3c 41                	cmp    al,0x41
c0015cfd:	0f 94 c0             	sete   al
c0015d00:	84 c0                	test   al,al
c0015d02:	74 28                	je     c0015d2c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d04:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d08:	7f 12                	jg     c0015d1c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d0d:	05 20 e1 02 c0       	add    eax,0xc002e120
c0015d12:	8a 00                	mov    al,BYTE PTR [eax]
c0015d14:	0f b6 c0             	movzx  eax,al
c0015d17:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d1a:	eb 10                	jmp    c0015d2c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d1c:	83 ec 0c             	sub    esp,0xc
c0015d1f:	68 40 b7 02 c0       	push   0xc002b740
c0015d24:	e8 3c 4b 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d2f:	c9                   	leave  
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop

c0015d32 <startGUI(void*)>:
c0015d32:	55                   	push   ebp
c0015d33:	89 e5                	mov    ebp,esp
c0015d35:	53                   	push   ebx
c0015d36:	83 ec 04             	sub    esp,0x4
c0015d39:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0015d3e:	48                   	dec    eax
c0015d3f:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0015d44:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0015d49:	85 c0                	test   eax,eax
c0015d4b:	75 01                	jne    c0015d4e <startGUI(void*)+0x1c>
c0015d4d:	fb                   	sti    
c0015d4e:	8b 1d c8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eec8
c0015d54:	83 ec 08             	sub    esp,0x8
c0015d57:	6a 01                	push   0x1
c0015d59:	68 b4 ba 02 c0       	push   0xc002bab4
c0015d5e:	e8 a9 7d 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c0015d63:	83 c4 10             	add    esp,0x10
c0015d66:	83 ec 08             	sub    esp,0x8
c0015d69:	53                   	push   ebx
c0015d6a:	50                   	push   eax
c0015d6b:	e8 c7 7f 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	8b 1d c8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eec8
c0015d79:	83 ec 08             	sub    esp,0x8
c0015d7c:	6a 01                	push   0x1
c0015d7e:	68 ce ba 02 c0       	push   0xc002bace
c0015d83:	e8 84 7d 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c0015d88:	83 c4 10             	add    esp,0x10
c0015d8b:	83 ec 08             	sub    esp,0x8
c0015d8e:	53                   	push   ebx
c0015d8f:	50                   	push   eax
c0015d90:	e8 a2 7f 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c0015d95:	83 c4 10             	add    esp,0x10
c0015d98:	90                   	nop
c0015d99:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d9c:	c9                   	leave  
c0015d9d:	c3                   	ret    

c0015d9e <startGUIVESA(void*)>:
c0015d9e:	55                   	push   ebp
c0015d9f:	89 e5                	mov    ebp,esp
c0015da1:	53                   	push   ebx
c0015da2:	83 ec 04             	sub    esp,0x4
c0015da5:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0015daa:	48                   	dec    eax
c0015dab:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0015db0:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0015db5:	85 c0                	test   eax,eax
c0015db7:	75 01                	jne    c0015dba <startGUIVESA(void*)+0x1c>
c0015db9:	fb                   	sti    
c0015dba:	8b 1d c8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eec8
c0015dc0:	83 ec 08             	sub    esp,0x8
c0015dc3:	6a 01                	push   0x1
c0015dc5:	68 e8 ba 02 c0       	push   0xc002bae8
c0015dca:	e8 3d 7d 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c0015dcf:	83 c4 10             	add    esp,0x10
c0015dd2:	83 ec 08             	sub    esp,0x8
c0015dd5:	53                   	push   ebx
c0015dd6:	50                   	push   eax
c0015dd7:	e8 5b 7f 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c0015ddc:	83 c4 10             	add    esp,0x10
c0015ddf:	8b 1d c8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eec8
c0015de5:	83 ec 08             	sub    esp,0x8
c0015de8:	6a 01                	push   0x1
c0015dea:	68 ce ba 02 c0       	push   0xc002bace
c0015def:	e8 18 7d 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c0015df4:	83 c4 10             	add    esp,0x10
c0015df7:	83 ec 08             	sub    esp,0x8
c0015dfa:	53                   	push   ebx
c0015dfb:	50                   	push   eax
c0015dfc:	e8 36 7f 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c0015e01:	83 c4 10             	add    esp,0x10
c0015e04:	90                   	nop
c0015e05:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e08:	c9                   	leave  
c0015e09:	c3                   	ret    

c0015e0a <sendKeyToTerminal(unsigned char)>:
c0015e0a:	55                   	push   ebp
c0015e0b:	89 e5                	mov    ebp,esp
c0015e0d:	83 ec 28             	sub    esp,0x28
c0015e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e13:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e16:	a1 a4 ef 02 c0       	mov    eax,ds:0xc002efa4
c0015e1b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e1f:	83 ec 08             	sub    esp,0x8
c0015e22:	52                   	push   edx
c0015e23:	50                   	push   eax
c0015e24:	e8 17 b4 ff ff       	call   c0011240 <VgaText::receiveKey(unsigned char)>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e30:	0f 85 8f 00 00 00    	jne    c0015ec5 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e36:	fa                   	cli    
c0015e37:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0015e3c:	40                   	inc    eax
c0015e3d:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0015e42:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c0015e47:	40                   	inc    eax
c0015e48:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c0015e4d:	a1 80 f0 02 c0       	mov    eax,ds:0xc002f080
c0015e52:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e55:	c7 05 80 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f080,0x0
c0015e5f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e63:	74 1f                	je     c0015e84 <sendKeyToTerminal(unsigned char)+0x7a>
c0015e65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e68:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e6e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e71:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e74:	83 ec 0c             	sub    esp,0xc
c0015e77:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e7a:	e8 2f 8b 00 00       	call   c001e9ae <unblockTask(ThreadControlBlock*)>
c0015e7f:	83 c4 10             	add    esp,0x10
c0015e82:	eb db                	jmp    c0015e5f <sendKeyToTerminal(unsigned char)+0x55>
c0015e84:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c0015e89:	48                   	dec    eax
c0015e8a:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c0015e8f:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c0015e94:	85 c0                	test   eax,eax
c0015e96:	75 18                	jne    c0015eb0 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e98:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0015e9d:	85 c0                	test   eax,eax
c0015e9f:	74 0f                	je     c0015eb0 <sendKeyToTerminal(unsigned char)+0xa6>
c0015ea1:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c0015eab:	e8 3a 86 00 00       	call   c001e4ea <schedule()>
c0015eb0:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0015eb5:	48                   	dec    eax
c0015eb6:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0015ebb:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0015ec0:	85 c0                	test   eax,eax
c0015ec2:	75 01                	jne    c0015ec5 <sendKeyToTerminal(unsigned char)+0xbb>
c0015ec4:	fb                   	sti    
c0015ec5:	90                   	nop
c0015ec6:	c9                   	leave  
c0015ec7:	c3                   	ret    

c0015ec8 <sendKeyboardToken(KeyboardToken)>:
c0015ec8:	55                   	push   ebp
c0015ec9:	89 e5                	mov    ebp,esp
c0015ecb:	83 ec 18             	sub    esp,0x18
c0015ece:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed4:	0f b7 c0             	movzx  eax,ax
c0015ed7:	83 f2 01             	xor    edx,0x1
c0015eda:	88 90 a0 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd0f60],dl
c0015ee0:	a1 88 f0 02 c0       	mov    eax,ds:0xc002f088
c0015ee5:	85 c0                	test   eax,eax
c0015ee7:	74 24                	je     c0015f0d <sendKeyboardToken(KeyboardToken)+0x45>
c0015ee9:	8b 0d 88 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f088
c0015eef:	83 ec 04             	sub    esp,0x4
c0015ef2:	68 a0 f0 02 c0       	push   0xc002f0a0
c0015ef7:	83 ec 08             	sub    esp,0x8
c0015efa:	89 e2                	mov    edx,esp
c0015efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eff:	89 02                	mov    DWORD PTR [edx],eax
c0015f01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f04:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f08:	ff d1                	call   ecx
c0015f0a:	83 c4 10             	add    esp,0x10
c0015f0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f10:	66 3d 03 02          	cmp    ax,0x203
c0015f14:	75 07                	jne    c0015f1d <sendKeyboardToken(KeyboardToken)+0x55>
c0015f16:	a0 a0 f1 02 c0       	mov    al,ds:0xc002f1a0
c0015f1b:	84 c0                	test   al,al
c0015f1d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f21:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f24:	a0 a8 f4 02 c0       	mov    al,ds:0xc002f4a8
c0015f29:	38 c2                	cmp    dl,al
c0015f2b:	74 1c                	je     c0015f49 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f2d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f30:	a2 a8 f4 02 c0       	mov    ds:0xc002f4a8,al
c0015f35:	a0 a8 f4 02 c0       	mov    al,ds:0xc002f4a8
c0015f3a:	0f b6 c0             	movzx  eax,al
c0015f3d:	83 ec 0c             	sub    esp,0xc
c0015f40:	50                   	push   eax
c0015f41:	e8 82 a6 ff ff       	call   c00105c8 <setTerminalScrollLock(bool)>
c0015f46:	83 c4 10             	add    esp,0x10
c0015f49:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f4c:	84 c0                	test   al,al
c0015f4e:	0f 84 ae 00 00 00    	je     c0016002 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f57:	66 3d 10 03          	cmp    ax,0x310
c0015f5b:	75 06                	jne    c0015f63 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f5d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f66:	66 3d 11 03          	cmp    ax,0x311
c0015f6a:	75 06                	jne    c0015f72 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f6c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f75:	66 3d 12 03          	cmp    ax,0x312
c0015f79:	75 06                	jne    c0015f81 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f7b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f84:	66 3d 13 03          	cmp    ax,0x313
c0015f88:	75 06                	jne    c0015f90 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f8a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f93:	66 3d 14 03          	cmp    ax,0x314
c0015f97:	75 06                	jne    c0015f9f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f99:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa2:	66 3d 15 03          	cmp    ax,0x315
c0015fa6:	75 06                	jne    c0015fae <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fa8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb1:	66 3d 16 03          	cmp    ax,0x316
c0015fb5:	75 06                	jne    c0015fbd <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fb7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc0:	66 3d 17 03          	cmp    ax,0x317
c0015fc4:	75 06                	jne    c0015fcc <sendKeyboardToken(KeyboardToken)+0x104>
c0015fc6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fcf:	66 3d 18 03          	cmp    ax,0x318
c0015fd3:	75 06                	jne    c0015fdb <sendKeyboardToken(KeyboardToken)+0x113>
c0015fd5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fde:	66 3d 19 03          	cmp    ax,0x319
c0015fe2:	75 06                	jne    c0015fea <sendKeyboardToken(KeyboardToken)+0x122>
c0015fe4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fed:	66 3d 1a 03          	cmp    ax,0x31a
c0015ff1:	0f 85 c9 00 00 00    	jne    c00160c0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ff7:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015ffd:	e9 be 00 00 00       	jmp    c00160c0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016005:	66 3d 10 03          	cmp    ax,0x310
c0016009:	75 0a                	jne    c0016015 <sendKeyboardToken(KeyboardToken)+0x14d>
c001600b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016011:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016018:	66 3d 11 03          	cmp    ax,0x311
c001601c:	75 0a                	jne    c0016028 <sendKeyboardToken(KeyboardToken)+0x160>
c001601e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016024:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602b:	66 3d 12 03          	cmp    ax,0x312
c001602f:	75 0a                	jne    c001603b <sendKeyboardToken(KeyboardToken)+0x173>
c0016031:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016037:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603e:	66 3d 13 03          	cmp    ax,0x313
c0016042:	75 0a                	jne    c001604e <sendKeyboardToken(KeyboardToken)+0x186>
c0016044:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001604a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016051:	66 3d 14 03          	cmp    ax,0x314
c0016055:	75 0a                	jne    c0016061 <sendKeyboardToken(KeyboardToken)+0x199>
c0016057:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001605d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016064:	66 3d 15 03          	cmp    ax,0x315
c0016068:	75 0a                	jne    c0016074 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001606a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016070:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016077:	66 3d 16 03          	cmp    ax,0x316
c001607b:	75 0a                	jne    c0016087 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001607d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016083:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608a:	66 3d 17 03          	cmp    ax,0x317
c001608e:	75 0a                	jne    c001609a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016090:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016096:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001609a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609d:	66 3d 18 03          	cmp    ax,0x318
c00160a1:	75 0a                	jne    c00160ad <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160a3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b0:	66 3d 19 03          	cmp    ax,0x319
c00160b4:	75 0a                	jne    c00160c0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160b6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c3:	66 3d 00 02          	cmp    ax,0x200
c00160c7:	75 2c                	jne    c00160f5 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160c9:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c00160ce:	83 f0 01             	xor    eax,0x1
c00160d1:	84 c0                	test   al,al
c00160d3:	74 20                	je     c00160f5 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160d5:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c00160da:	6a 01                	push   0x1
c00160dc:	6a 00                	push   0x0
c00160de:	68 32 5d 01 c0       	push   0xc0015d32
c00160e3:	50                   	push   eax
c00160e4:	e8 bd 81 00 00       	call   c001e2a6 <Process::createThread(void (*)(void*), void*, int)>
c00160e9:	83 c4 10             	add    esp,0x10
c00160ec:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c00160f3:	eb 33                	jmp    c0016128 <sendKeyboardToken(KeyboardToken)+0x260>
c00160f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f8:	66 3d 01 02          	cmp    ax,0x201
c00160fc:	75 2a                	jne    c0016128 <sendKeyboardToken(KeyboardToken)+0x260>
c00160fe:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c0016103:	83 f0 01             	xor    eax,0x1
c0016106:	84 c0                	test   al,al
c0016108:	74 1e                	je     c0016128 <sendKeyboardToken(KeyboardToken)+0x260>
c001610a:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001610f:	6a 01                	push   0x1
c0016111:	6a 00                	push   0x0
c0016113:	68 9e 5d 01 c0       	push   0xc0015d9e
c0016118:	50                   	push   eax
c0016119:	e8 88 81 00 00       	call   c001e2a6 <Process::createThread(void (*)(void*), void*, int)>
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c0016128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612b:	66 3d 1d 03          	cmp    ax,0x31d
c001612f:	75 06                	jne    c0016137 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016131:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613a:	66 3d 1c 03          	cmp    ax,0x31c
c001613e:	75 06                	jne    c0016146 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016140:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016149:	66 3d 1b 03          	cmp    ax,0x31b
c001614d:	75 06                	jne    c0016155 <sendKeyboardToken(KeyboardToken)+0x28d>
c001614f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016158:	66 3d 1e 03          	cmp    ax,0x31e
c001615c:	75 06                	jne    c0016164 <sendKeyboardToken(KeyboardToken)+0x29c>
c001615e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016167:	66 3d 1f 03          	cmp    ax,0x31f
c001616b:	75 06                	jne    c0016173 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001616d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016176:	66 3d 1a 03          	cmp    ax,0x31a
c001617a:	75 06                	jne    c0016182 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001617c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016182:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016186:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016189:	83 f0 01             	xor    eax,0x1
c001618c:	84 c0                	test   al,al
c001618e:	74 77                	je     c0016207 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016190:	a0 a1 f1 02 c0       	mov    al,ds:0xc002f1a1
c0016195:	84 c0                	test   al,al
c0016197:	74 41                	je     c00161da <sendKeyboardToken(KeyboardToken)+0x312>
c0016199:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001619d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161a1:	74 2b                	je     c00161ce <sendKeyboardToken(KeyboardToken)+0x306>
c00161a3:	8b 15 a4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4a4
c00161a9:	89 d0                	mov    eax,edx
c00161ab:	c1 e0 02             	shl    eax,0x2
c00161ae:	01 d0                	add    eax,edx
c00161b0:	01 c0                	add    eax,eax
c00161b2:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c00161b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ba:	0f b7 c0             	movzx  eax,ax
c00161bd:	8d 50 d0             	lea    edx,[eax-0x30]
c00161c0:	a1 a4 f4 02 c0       	mov    eax,ds:0xc002f4a4
c00161c5:	01 d0                	add    eax,edx
c00161c7:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c00161cc:	eb 6d                	jmp    c001623b <sendKeyboardToken(KeyboardToken)+0x373>
c00161ce:	c7 05 a4 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f4a4,0x0
c00161d8:	eb 61                	jmp    c001623b <sendKeyboardToken(KeyboardToken)+0x373>
c00161da:	a1 a4 f4 02 c0       	mov    eax,ds:0xc002f4a4
c00161df:	85 c0                	test   eax,eax
c00161e1:	74 18                	je     c00161fb <sendKeyboardToken(KeyboardToken)+0x333>
c00161e3:	a1 a4 f4 02 c0       	mov    eax,ds:0xc002f4a4
c00161e8:	0f b6 c0             	movzx  eax,al
c00161eb:	83 ec 0c             	sub    esp,0xc
c00161ee:	50                   	push   eax
c00161ef:	e8 16 fc ff ff       	call   c0015e0a <sendKeyToTerminal(unsigned char)>
c00161f4:	83 c4 10             	add    esp,0x10
c00161f7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161fb:	c7 05 a4 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f4a4,0x0
c0016205:	eb 34                	jmp    c001623b <sendKeyboardToken(KeyboardToken)+0x373>
c0016207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620a:	66 3d 01 01          	cmp    ax,0x101
c001620e:	75 2b                	jne    c001623b <sendKeyboardToken(KeyboardToken)+0x373>
c0016210:	a1 a4 f4 02 c0       	mov    eax,ds:0xc002f4a4
c0016215:	85 c0                	test   eax,eax
c0016217:	74 18                	je     c0016231 <sendKeyboardToken(KeyboardToken)+0x369>
c0016219:	a1 a4 f4 02 c0       	mov    eax,ds:0xc002f4a4
c001621e:	0f b6 c0             	movzx  eax,al
c0016221:	83 ec 0c             	sub    esp,0xc
c0016224:	50                   	push   eax
c0016225:	e8 e0 fb ff ff       	call   c0015e0a <sendKeyToTerminal(unsigned char)>
c001622a:	83 c4 10             	add    esp,0x10
c001622d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016231:	c7 05 a4 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f4a4,0x0
c001623b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001623e:	83 f0 01             	xor    eax,0x1
c0016241:	84 c0                	test   al,al
c0016243:	74 4c                	je     c0016291 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016245:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016248:	83 f0 01             	xor    eax,0x1
c001624b:	84 c0                	test   al,al
c001624d:	74 42                	je     c0016291 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001624f:	a0 a0 f1 02 c0       	mov    al,ds:0xc002f1a0
c0016254:	83 f0 01             	xor    eax,0x1
c0016257:	84 c0                	test   al,al
c0016259:	74 36                	je     c0016291 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001625b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625e:	66 83 f8 1f          	cmp    ax,0x1f
c0016262:	76 09                	jbe    c001626d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016267:	66 83 f8 7e          	cmp    ax,0x7e
c001626b:	76 12                	jbe    c001627f <sendKeyboardToken(KeyboardToken)+0x3b7>
c001626d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016270:	66 83 f8 0a          	cmp    ax,0xa
c0016274:	74 09                	je     c001627f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016279:	66 83 f8 08          	cmp    ax,0x8
c001627d:	75 12                	jne    c0016291 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001627f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016282:	0f b6 c0             	movzx  eax,al
c0016285:	83 ec 0c             	sub    esp,0xc
c0016288:	50                   	push   eax
c0016289:	e8 7c fb ff ff       	call   c0015e0a <sendKeyToTerminal(unsigned char)>
c001628e:	83 c4 10             	add    esp,0x10
c0016291:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016294:	83 f0 01             	xor    eax,0x1
c0016297:	84 c0                	test   al,al
c0016299:	74 4f                	je     c00162ea <sendKeyboardToken(KeyboardToken)+0x422>
c001629b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001629e:	83 f0 01             	xor    eax,0x1
c00162a1:	84 c0                	test   al,al
c00162a3:	74 45                	je     c00162ea <sendKeyboardToken(KeyboardToken)+0x422>
c00162a5:	a0 a0 f1 02 c0       	mov    al,ds:0xc002f1a0
c00162aa:	84 c0                	test   al,al
c00162ac:	74 3c                	je     c00162ea <sendKeyboardToken(KeyboardToken)+0x422>
c00162ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b1:	66 83 f8 3f          	cmp    ax,0x3f
c00162b5:	76 33                	jbe    c00162ea <sendKeyboardToken(KeyboardToken)+0x422>
c00162b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ba:	66 83 f8 7f          	cmp    ax,0x7f
c00162be:	77 2a                	ja     c00162ea <sendKeyboardToken(KeyboardToken)+0x422>
c00162c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c3:	88 c2                	mov    dl,al
c00162c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c8:	66 83 f8 5f          	cmp    ax,0x5f
c00162cc:	76 04                	jbe    c00162d2 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162ce:	b0 20                	mov    al,0x20
c00162d0:	eb 02                	jmp    c00162d4 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162d2:	b0 00                	mov    al,0x0
c00162d4:	29 c2                	sub    edx,eax
c00162d6:	88 d0                	mov    al,dl
c00162d8:	83 e8 40             	sub    eax,0x40
c00162db:	0f b6 c0             	movzx  eax,al
c00162de:	83 ec 0c             	sub    esp,0xc
c00162e1:	50                   	push   eax
c00162e2:	e8 23 fb ff ff       	call   c0015e0a <sendKeyToTerminal(unsigned char)>
c00162e7:	83 c4 10             	add    esp,0x10
c00162ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ed:	66 3d 00 03          	cmp    ax,0x300
c00162f1:	75 0f                	jne    c0016302 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162f3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162f6:	83 f0 01             	xor    eax,0x1
c00162f9:	84 c0                	test   al,al
c00162fb:	74 05                	je     c0016302 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162fd:	e8 3e aa ff ff       	call   c0010d40 <doTerminalCycle()>
c0016302:	90                   	nop
c0016303:	c9                   	leave  
c0016304:	c3                   	ret    

c0016305 <clearInternalKeybuffer(VgaText*)>:
c0016305:	55                   	push   ebp
c0016306:	89 e5                	mov    ebp,esp
c0016308:	83 ec 08             	sub    esp,0x8
c001630b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630e:	05 98 01 00 00       	add    eax,0x198
c0016313:	83 ec 0c             	sub    esp,0xc
c0016316:	50                   	push   eax
c0016317:	e8 6c a4 fe ff       	call   c0000788 <strlen>
c001631c:	83 c4 10             	add    esp,0x10
c001631f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016322:	81 c2 98 01 00 00    	add    edx,0x198
c0016328:	83 ec 04             	sub    esp,0x4
c001632b:	50                   	push   eax
c001632c:	6a 00                	push   0x0
c001632e:	52                   	push   edx
c001632f:	e8 38 a4 fe ff       	call   c000076c <memset>
c0016334:	83 c4 10             	add    esp,0x10
c0016337:	90                   	nop
c0016338:	c9                   	leave  
c0016339:	c3                   	ret    

c001633a <readKeyboard(VgaText*, char*, unsigned long)>:
c001633a:	55                   	push   ebp
c001633b:	89 e5                	mov    ebp,esp
c001633d:	83 ec 18             	sub    esp,0x18
c0016340:	a1 88 f0 02 c0       	mov    eax,ds:0xc002f088
c0016345:	85 c0                	test   eax,eax
c0016347:	74 2a                	je     c0016373 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016349:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001634f:	8b 0d 88 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f088
c0016355:	83 ec 04             	sub    esp,0x4
c0016358:	68 a0 f0 02 c0       	push   0xc002f0a0
c001635d:	83 ec 08             	sub    esp,0x8
c0016360:	89 e2                	mov    edx,esp
c0016362:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016365:	89 02                	mov    DWORD PTR [edx],eax
c0016367:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001636a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001636e:	ff d1                	call   ecx
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	83 ec 0c             	sub    esp,0xc
c0016376:	68 03 bb 02 c0       	push   0xc002bb03
c001637b:	e8 f7 ca ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	fb                   	sti    
c0016384:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001638b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001638f:	0f 84 a1 00 00 00    	je     c0016436 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0016395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016398:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001639e:	84 c0                	test   al,al
c00163a0:	75 28                	jne    c00163ca <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c00163a2:	fa                   	cli    
c00163a3:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c00163a8:	40                   	inc    eax
c00163a9:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c00163ae:	e8 37 81 00 00       	call   c001e4ea <schedule()>
c00163b3:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c00163b8:	48                   	dec    eax
c00163b9:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c00163be:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c00163c3:	85 c0                	test   eax,eax
c00163c5:	75 ce                	jne    c0016395 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163c7:	fb                   	sti    
c00163c8:	eb cb                	jmp    c0016395 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163cd:	8d 50 01             	lea    edx,[eax+0x1]
c00163d0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d6:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163dc:	88 10                	mov    BYTE PTR [eax],dl
c00163de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163e1:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163e7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163ed:	05 98 01 00 00       	add    eax,0x198
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	50                   	push   eax
c00163f6:	e8 8d a3 fe ff       	call   c0000788 <strlen>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016401:	81 c2 98 01 00 00    	add    edx,0x198
c0016407:	8d 4a 01             	lea    ecx,[edx+0x1]
c001640a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001640d:	81 c2 98 01 00 00    	add    edx,0x198
c0016413:	83 ec 04             	sub    esp,0x4
c0016416:	50                   	push   eax
c0016417:	51                   	push   ecx
c0016418:	52                   	push   edx
c0016419:	e8 86 a2 fe ff       	call   c00006a4 <memmove>
c001641e:	83 c4 10             	add    esp,0x10
c0016421:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016424:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016427:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001642b:	0f 85 5a ff ff ff    	jne    c001638b <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0016431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016434:	eb 03                	jmp    c0016439 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0016436:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016439:	c9                   	leave  
c001643a:	c3                   	ret    
c001643b:	90                   	nop

c001643c <Keyboard::Keyboard(char const*)>:
c001643c:	83 ec 0c             	sub    esp,0xc
c001643f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016443:	83 ec 08             	sub    esp,0x8
c0016446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644a:	50                   	push   eax
c001644b:	e8 4c e0 ff ff       	call   c001449c <Device::Device(char const*)>
c0016450:	83 c4 10             	add    esp,0x10
c0016453:	ba 24 bb 02 c0       	mov    edx,0xc002bb24
c0016458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645c:	89 10                	mov    DWORD PTR [eax],edx
c001645e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016462:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001646c:	c6 05 84 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f084,0x1
c0016473:	90                   	nop
c0016474:	83 c4 0c             	add    esp,0xc
c0016477:	c3                   	ret    

c0016478 <Keyboard::~Keyboard()>:
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	ba 24 bb 02 c0       	mov    edx,0xc002bb24
c0016480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016484:	89 10                	mov    DWORD PTR [eax],edx
c0016486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648a:	83 ec 0c             	sub    esp,0xc
c001648d:	50                   	push   eax
c001648e:	e8 eb dc ff ff       	call   c001417e <Device::~Device()>
c0016493:	83 c4 10             	add    esp,0x10
c0016496:	90                   	nop
c0016497:	83 c4 0c             	add    esp,0xc
c001649a:	c3                   	ret    
c001649b:	90                   	nop

c001649c <Keyboard::~Keyboard()>:
c001649c:	83 ec 0c             	sub    esp,0xc
c001649f:	83 ec 0c             	sub    esp,0xc
c00164a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a6:	e8 cd ff ff ff       	call   c0016478 <Keyboard::~Keyboard()>
c00164ab:	83 c4 10             	add    esp,0x10
c00164ae:	83 ec 08             	sub    esp,0x8
c00164b1:	68 5c 01 00 00       	push   0x15c
c00164b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ba:	e8 d8 c8 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	83 c4 0c             	add    esp,0xc
c00164c5:	c3                   	ret    

c00164c6 <LogicalDisk::close(int, int, void*)>:
c00164c6:	83 c8 ff             	or     eax,0xffffffff
c00164c9:	c3                   	ret    

c00164ca <LogicalDisk::~LogicalDisk()>:
c00164ca:	83 ec 0c             	sub    esp,0xc
c00164cd:	ba d4 bb 02 c0       	mov    edx,0xc002bbd4
c00164d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d6:	89 10                	mov    DWORD PTR [eax],edx
c00164d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164dc:	83 ec 0c             	sub    esp,0xc
c00164df:	50                   	push   eax
c00164e0:	e8 99 dc ff ff       	call   c001417e <Device::~Device()>
c00164e5:	83 c4 10             	add    esp,0x10
c00164e8:	90                   	nop
c00164e9:	83 c4 0c             	add    esp,0xc
c00164ec:	c3                   	ret    
c00164ed:	90                   	nop

c00164ee <LogicalDisk::~LogicalDisk()>:
c00164ee:	83 ec 0c             	sub    esp,0xc
c00164f1:	83 ec 0c             	sub    esp,0xc
c00164f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164f8:	e8 cd ff ff ff       	call   c00164ca <LogicalDisk::~LogicalDisk()>
c00164fd:	83 c4 10             	add    esp,0x10
c0016500:	83 ec 08             	sub    esp,0x8
c0016503:	68 74 01 00 00       	push   0x174
c0016508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650c:	e8 86 c8 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0016511:	83 c4 10             	add    esp,0x10
c0016514:	83 c4 0c             	add    esp,0xc
c0016517:	c3                   	ret    

c0016518 <LogicalDisk::open(int, int, void*)>:
c0016518:	83 ec 18             	sub    esp,0x18
c001651b:	68 50 bb 02 c0       	push   0xc002bb50
c0016520:	e8 40 43 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0016525:	83 c8 ff             	or     eax,0xffffffff
c0016528:	83 c4 1c             	add    esp,0x1c
c001652b:	c3                   	ret    

c001652c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001652c:	53                   	push   ebx
c001652d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016535:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016539:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001653f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016545:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001654b:	77 10                	ja     c001655d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001654d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016553:	89 d3                	mov    ebx,edx
c0016555:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001655b:	72 05                	jb     c0016562 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001655d:	83 c8 ff             	or     eax,0xffffffff
c0016560:	89 c2                	mov    edx,eax
c0016562:	5b                   	pop    ebx
c0016563:	c3                   	ret    

c0016564 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016564:	56                   	push   esi
c0016565:	83 c8 ff             	or     eax,0xffffffff
c0016568:	53                   	push   ebx
c0016569:	89 c2                	mov    edx,eax
c001656b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001656f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016573:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016577:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001657d:	77 27                	ja     c00165a6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001657f:	89 d8                	mov    eax,ebx
c0016581:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016587:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001658d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016592:	89 c2                	mov    edx,eax
c0016594:	73 10                	jae    c00165a6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016596:	89 c8                	mov    eax,ecx
c0016598:	89 da                	mov    edx,ebx
c001659a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165a0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165a6:	5b                   	pop    ebx
c00165a7:	5e                   	pop    esi
c00165a8:	c3                   	ret    
c00165a9:	90                   	nop

c00165aa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165aa:	83 ec 1c             	sub    esp,0x1c
c00165ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00165c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d0:	83 ec 08             	sub    esp,0x8
c00165d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165d7:	50                   	push   eax
c00165d8:	e8 bf de ff ff       	call   c001449c <Device::Device(char const*)>
c00165dd:	83 c4 10             	add    esp,0x10
c00165e0:	ba d4 bb 02 c0       	mov    edx,0xc002bbd4
c00165e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e9:	89 10                	mov    DWORD PTR [eax],edx
c00165eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016605:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001660f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016613:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016617:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001661b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016621:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016627:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001662b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001662e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016632:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016638:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001663e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016642:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016646:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001664c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016650:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001665a:	90                   	nop
c001665b:	83 c4 1c             	add    esp,0x1c
c001665e:	c3                   	ret    
c001665f:	90                   	nop

c0016660 <LogicalDisk::assignDriveLetter()>:
c0016660:	55                   	push   ebp
c0016661:	57                   	push   edi
c0016662:	56                   	push   esi
c0016663:	53                   	push   ebx
c0016664:	83 ec 14             	sub    esp,0x14
c0016667:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001666b:	8b 3d c0 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4c0
c0016671:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016677:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001667b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016681:	8b 3d c4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4c4
c0016687:	3c 01                	cmp    al,0x1
c0016689:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001668d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016691:	19 c0                	sbb    eax,eax
c0016693:	83 e0 02             	and    eax,0x2
c0016696:	83 c0 41             	add    eax,0x41
c0016699:	0f be e8             	movsx  ebp,al
c001669c:	3c 43                	cmp    al,0x43
c001669e:	75 10                	jne    c00166b0 <LogicalDisk::assignDriveLetter()+0x50>
c00166a0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166a7:	75 5d                	jne    c0016706 <LogicalDisk::assignDriveLetter()+0xa6>
c00166a9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166ae:	75 56                	jne    c0016706 <LogicalDisk::assignDriveLetter()+0xa6>
c00166b0:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166b3:	ba 01 00 00 00       	mov    edx,0x1
c00166b8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166bc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166c0:	d3 e2                	shl    edx,cl
c00166c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166c6:	89 d7                	mov    edi,edx
c00166c8:	89 d6                	mov    esi,edx
c00166ca:	c1 ff 1f             	sar    edi,0x1f
c00166cd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166d1:	21 f9                	and    ecx,edi
c00166d3:	09 d1                	or     ecx,edx
c00166d5:	75 2f                	jne    c0016706 <LogicalDisk::assignDriveLetter()+0xa6>
c00166d7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166df:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166e5:	09 f2                	or     edx,esi
c00166e7:	89 15 c0 f4 02 c0    	mov    DWORD PTR ds:0xc002f4c0,edx
c00166ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166f1:	09 fa                	or     edx,edi
c00166f3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166f7:	89 15 c4 f4 02 c0    	mov    DWORD PTR ds:0xc002f4c4,edx
c00166fd:	89 1c bd e0 f4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0b20],ebx
c0016704:	eb 08                	jmp    c001670e <LogicalDisk::assignDriveLetter()+0xae>
c0016706:	45                   	inc    ebp
c0016707:	40                   	inc    eax
c0016708:	3c 5b                	cmp    al,0x5b
c001670a:	75 90                	jne    c001669c <LogicalDisk::assignDriveLetter()+0x3c>
c001670c:	31 c0                	xor    eax,eax
c001670e:	83 c4 14             	add    esp,0x14
c0016711:	5b                   	pop    ebx
c0016712:	5e                   	pop    esi
c0016713:	5f                   	pop    edi
c0016714:	5d                   	pop    ebp
c0016715:	c3                   	ret    

c0016716 <LogicalDisk::mount()>:
c0016716:	56                   	push   esi
c0016717:	53                   	push   ebx
c0016718:	50                   	push   eax
c0016719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001671d:	8b 1d 54 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f054
c0016723:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001672d:	85 db                	test   ebx,ebx
c001672f:	74 50                	je     c0016781 <LogicalDisk::mount()+0x6b>
c0016731:	50                   	push   eax
c0016732:	50                   	push   eax
c0016733:	ff 35 08 24 03 c0    	push   DWORD PTR ds:0xc0032408
c0016739:	68 74 bb 02 c0       	push   0xc002bb74
c001673e:	e8 34 c7 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0016743:	83 c4 0c             	add    esp,0xc
c0016746:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001674d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001674f:	83 e8 41             	sub    eax,0x41
c0016752:	50                   	push   eax
c0016753:	56                   	push   esi
c0016754:	53                   	push   ebx
c0016755:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016758:	83 c4 10             	add    esp,0x10
c001675b:	84 c0                	test   al,al
c001675d:	74 08                	je     c0016767 <LogicalDisk::mount()+0x51>
c001675f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016765:	eb 1c                	jmp    c0016783 <LogicalDisk::mount()+0x6d>
c0016767:	51                   	push   ecx
c0016768:	51                   	push   ecx
c0016769:	ff 35 08 24 03 c0    	push   DWORD PTR ds:0xc0032408
c001676f:	68 8f bb 02 c0       	push   0xc002bb8f
c0016774:	e8 fe c6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0016779:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001677c:	83 c4 10             	add    esp,0x10
c001677f:	eb ac                	jmp    c001672d <LogicalDisk::mount()+0x17>
c0016781:	31 c0                	xor    eax,eax
c0016783:	5a                   	pop    edx
c0016784:	5b                   	pop    ebx
c0016785:	5e                   	pop    esi
c0016786:	c3                   	ret    
c0016787:	90                   	nop

c0016788 <LogicalDisk::unmount()>:
c0016788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001678c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016796:	c3                   	ret    
c0016797:	90                   	nop

c0016798 <LogicalDisk::eject()>:
c0016798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001679c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00167a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167a8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167ab:	90                   	nop

c00167ac <LogicalDisk::unassignDriveLetter()>:
c00167ac:	57                   	push   edi
c00167ad:	56                   	push   esi
c00167ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167b2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167b9:	84 c9                	test   cl,cl
c00167bb:	75 0f                	jne    c00167cc <LogicalDisk::unassignDriveLetter()+0x20>
c00167bd:	c7 44 24 0c aa bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bbaa
c00167c5:	5e                   	pop    esi
c00167c6:	5f                   	pop    edi
c00167c7:	e9 99 40 00 00       	jmp    c001a865 <Krnl::panic(char const*)>
c00167cc:	83 e9 41             	sub    ecx,0x41
c00167cf:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167d6:	b8 01 00 00 00       	mov    eax,0x1
c00167db:	c7 04 8d e0 f4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0b20],0x0
c00167e6:	d3 e0                	shl    eax,cl
c00167e8:	89 c7                	mov    edi,eax
c00167ea:	f7 d0                	not    eax
c00167ec:	c1 ff 1f             	sar    edi,0x1f
c00167ef:	21 05 c0 f4 02 c0    	and    DWORD PTR ds:0xc002f4c0,eax
c00167f5:	89 fe                	mov    esi,edi
c00167f7:	f7 d6                	not    esi
c00167f9:	21 35 c4 f4 02 c0    	and    DWORD PTR ds:0xc002f4c4,esi
c00167ff:	5e                   	pop    esi
c0016800:	5f                   	pop    edi
c0016801:	c3                   	ret    

c0016802 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016802:	57                   	push   edi
c0016803:	56                   	push   esi
c0016804:	53                   	push   ebx
c0016805:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016809:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001680d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016811:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016815:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001681b:	77 41                	ja     c001685e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001681d:	99                   	cdq    
c001681e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016824:	01 c8                	add    eax,ecx
c0016826:	11 da                	adc    edx,ebx
c0016828:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001682e:	19 d7                	sbb    edi,edx
c0016830:	72 33                	jb     c0016865 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016832:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016838:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001683e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016842:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016846:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001684c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016852:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016856:	5b                   	pop    ebx
c0016857:	5e                   	pop    esi
c0016858:	5f                   	pop    edi
c0016859:	e9 f8 0a 00 00       	jmp    c0017356 <VCache::read(unsigned long long, int, void*)>
c001685e:	b8 05 00 00 00       	mov    eax,0x5
c0016863:	eb 05                	jmp    c001686a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016865:	b8 07 00 00 00       	mov    eax,0x7
c001686a:	5b                   	pop    ebx
c001686b:	5e                   	pop    esi
c001686c:	5f                   	pop    edi
c001686d:	c3                   	ret    

c001686e <LogicalDisk::write(unsigned long long, int, void*)>:
c001686e:	57                   	push   edi
c001686f:	56                   	push   esi
c0016870:	53                   	push   ebx
c0016871:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016875:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016879:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001687d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016881:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016887:	77 41                	ja     c00168ca <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016889:	99                   	cdq    
c001688a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016890:	01 c8                	add    eax,ecx
c0016892:	11 da                	adc    edx,ebx
c0016894:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001689a:	19 d7                	sbb    edi,edx
c001689c:	72 33                	jb     c00168d1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001689e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168a4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168ae:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168b2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168b8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168c2:	5b                   	pop    ebx
c00168c3:	5e                   	pop    esi
c00168c4:	5f                   	pop    edi
c00168c5:	e9 96 09 00 00       	jmp    c0017260 <VCache::write(unsigned long long, int, void*)>
c00168ca:	b8 05 00 00 00       	mov    eax,0x5
c00168cf:	eb 05                	jmp    c00168d6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168d1:	b8 07 00 00 00       	mov    eax,0x7
c00168d6:	5b                   	pop    ebx
c00168d7:	5e                   	pop    esi
c00168d8:	5f                   	pop    edi
c00168d9:	c3                   	ret    

c00168da <Mouse::Mouse(char const*)>:
c00168da:	83 ec 0c             	sub    esp,0xc
c00168dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e1:	83 ec 08             	sub    esp,0x8
c00168e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e8:	50                   	push   eax
c00168e9:	e8 ae db ff ff       	call   c001449c <Device::Device(char const*)>
c00168ee:	83 c4 10             	add    esp,0x10
c00168f1:	ba 00 bc 02 c0       	mov    edx,0xc002bc00
c00168f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fa:	89 10                	mov    DWORD PTR [eax],edx
c00168fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016900:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001690a:	90                   	nop
c001690b:	83 c4 0c             	add    esp,0xc
c001690e:	c3                   	ret    
c001690f:	90                   	nop

c0016910 <Mouse::~Mouse()>:
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	ba 00 bc 02 c0       	mov    edx,0xc002bc00
c0016918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691c:	89 10                	mov    DWORD PTR [eax],edx
c001691e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016922:	83 ec 0c             	sub    esp,0xc
c0016925:	50                   	push   eax
c0016926:	e8 53 d8 ff ff       	call   c001417e <Device::~Device()>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	90                   	nop
c001692f:	83 c4 0c             	add    esp,0xc
c0016932:	c3                   	ret    
c0016933:	90                   	nop

c0016934 <Mouse::~Mouse()>:
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	83 ec 0c             	sub    esp,0xc
c001693a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693e:	e8 cd ff ff ff       	call   c0016910 <Mouse::~Mouse()>
c0016943:	83 c4 10             	add    esp,0x10
c0016946:	83 ec 08             	sub    esp,0x8
c0016949:	68 58 01 00 00       	push   0x158
c001694e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016952:	e8 40 c4 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0016957:	83 c4 10             	add    esp,0x10
c001695a:	83 c4 0c             	add    esp,0xc
c001695d:	c3                   	ret    

c001695e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001695e:	55                   	push   ebp
c001695f:	57                   	push   edi
c0016960:	56                   	push   esi
c0016961:	53                   	push   ebx
c0016962:	81 ec 20 01 00 00    	sub    esp,0x120
c0016968:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c001696f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0016976:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001697d:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016984:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016988:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001698c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016990:	56                   	push   esi
c0016991:	68 24 bc 02 c0       	push   0xc002bc24
c0016996:	e8 dc c4 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001699b:	58                   	pop    eax
c001699c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169a3:	e8 f0 db ff ff       	call   c0014598 <Device::getName()>
c00169a8:	5a                   	pop    edx
c00169a9:	59                   	pop    ecx
c00169aa:	50                   	push   eax
c00169ab:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00169af:	53                   	push   ebx
c00169b0:	e8 73 9e fe ff       	call   c0000828 <strcpy>
c00169b5:	5d                   	pop    ebp
c00169b6:	58                   	pop    eax
c00169b7:	68 55 bc 02 c0       	push   0xc002bc55
c00169bc:	53                   	push   ebx
c00169bd:	e8 a6 9f fe ff       	call   c0000968 <strcat>
c00169c2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169c9:	e8 f2 8e ff ff       	call   c000f8c0 <malloc>
c00169ce:	83 c4 0c             	add    esp,0xc
c00169d1:	89 c5                	mov    ebp,eax
c00169d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169db:	57                   	push   edi
c00169dc:	56                   	push   esi
c00169dd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169e4:	53                   	push   ebx
c00169e5:	50                   	push   eax
c00169e6:	e8 bf fb ff ff       	call   c00165aa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169eb:	83 c4 14             	add    esp,0x14
c00169ee:	55                   	push   ebp
c00169ef:	e8 6c fc ff ff       	call   c0016660 <LogicalDisk::assignDriveLetter()>
c00169f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169f7:	0f be d8             	movsx  ebx,al
c00169fa:	e8 17 fd ff ff       	call   c0016716 <LogicalDisk::mount()>
c00169ff:	58                   	pop    eax
c0016a00:	5a                   	pop    edx
c0016a01:	55                   	push   ebp
c0016a02:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a09:	e8 9e d8 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0016a0e:	59                   	pop    ecx
c0016a0f:	5e                   	pop    esi
c0016a10:	53                   	push   ebx
c0016a11:	68 60 bc 02 c0       	push   0xc002bc60
c0016a16:	e8 5c c4 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0016a1b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a21:	5b                   	pop    ebx
c0016a22:	5e                   	pop    esi
c0016a23:	5f                   	pop    edi
c0016a24:	5d                   	pop    ebp
c0016a25:	c3                   	ret    

c0016a26 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a26:	55                   	push   ebp
c0016a27:	57                   	push   edi
c0016a28:	56                   	push   esi
c0016a29:	53                   	push   ebx
c0016a2a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a30:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a37:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a3d:	3d 00 02 00 00       	cmp    eax,0x200
c0016a42:	74 27                	je     c0016a6b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a44:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a4a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a50:	83 ec 10             	sub    esp,0x10
c0016a53:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a57:	99                   	cdq    
c0016a58:	c1 e6 0a             	shl    esi,0xa
c0016a5b:	52                   	push   edx
c0016a5c:	89 fd                	mov    ebp,edi
c0016a5e:	50                   	push   eax
c0016a5f:	55                   	push   ebp
c0016a60:	56                   	push   esi
c0016a61:	e8 ce 07 01 00       	call   c0027234 <__udivdi3>
c0016a66:	e9 b1 00 00 00       	jmp    c0016b1c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a6b:	83 ec 0c             	sub    esp,0xc
c0016a6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a70:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a74:	56                   	push   esi
c0016a75:	6a 01                	push   0x1
c0016a77:	6a 00                	push   0x0
c0016a79:	6a 00                	push   0x0
c0016a7b:	53                   	push   ebx
c0016a7c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a7f:	83 c4 20             	add    esp,0x20
c0016a82:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a8a:	75 0a                	jne    c0016a96 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a8c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a94:	74 2c                	je     c0016ac2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a96:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a9c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016aa2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aa8:	83 ec 10             	sub    esp,0x10
c0016aab:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016aaf:	89 f7                	mov    edi,esi
c0016ab1:	c1 e0 0a             	shl    eax,0xa
c0016ab4:	c1 ff 1f             	sar    edi,0x1f
c0016ab7:	57                   	push   edi
c0016ab8:	56                   	push   esi
c0016ab9:	52                   	push   edx
c0016aba:	50                   	push   eax
c0016abb:	e8 74 07 01 00       	call   c0027234 <__udivdi3>
c0016ac0:	eb 5a                	jmp    c0016b1c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ac2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016ac9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016ad0:	83 e1 7f             	and    ecx,0x7f
c0016ad3:	83 e0 7f             	and    eax,0x7f
c0016ad6:	01 c1                	add    ecx,eax
c0016ad8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016adf:	83 e0 7f             	and    eax,0x7f
c0016ae2:	01 c1                	add    ecx,eax
c0016ae4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016aeb:	83 e0 7f             	and    eax,0x7f
c0016aee:	00 c1                	add    cl,al
c0016af0:	74 41                	je     c0016b33 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016af2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016af8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016afe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b04:	83 ec 10             	sub    esp,0x10
c0016b07:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b0b:	89 f7                	mov    edi,esi
c0016b0d:	c1 e0 0a             	shl    eax,0xa
c0016b10:	c1 ff 1f             	sar    edi,0x1f
c0016b13:	57                   	push   edi
c0016b14:	56                   	push   esi
c0016b15:	52                   	push   edx
c0016b16:	50                   	push   eax
c0016b17:	e8 18 07 01 00       	call   c0027234 <__udivdi3>
c0016b1c:	83 c4 14             	add    esp,0x14
c0016b1f:	52                   	push   edx
c0016b20:	50                   	push   eax
c0016b21:	6a 00                	push   0x0
c0016b23:	6a 00                	push   0x0
c0016b25:	53                   	push   ebx
c0016b26:	e8 33 fe ff ff       	call   c001695e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b2b:	83 c4 20             	add    esp,0x20
c0016b2e:	e9 79 01 00 00       	jmp    c0016cac <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b33:	89 f0                	mov    eax,esi
c0016b35:	31 f6                	xor    esi,esi
c0016b37:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b3e:	75 02                	jne    c0016b42 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b40:	89 f1                	mov    ecx,esi
c0016b42:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b49:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b50:	c1 e2 08             	shl    edx,0x8
c0016b53:	c1 e7 10             	shl    edi,0x10
c0016b56:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b5e:	09 fa                	or     edx,edi
c0016b60:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b68:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b6f:	83 c0 10             	add    eax,0x10
c0016b72:	09 fa                	or     edx,edi
c0016b74:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b7b:	c1 e7 18             	shl    edi,0x18
c0016b7e:	09 fa                	or     edx,edi
c0016b80:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b87:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b8b:	c1 e7 10             	shl    edi,0x10
c0016b8e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b95:	c1 e2 08             	shl    edx,0x8
c0016b98:	09 fa                	or     edx,edi
c0016b9a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016ba1:	09 fa                	or     edx,edi
c0016ba3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016baa:	c1 e7 18             	shl    edi,0x18
c0016bad:	09 fa                	or     edx,edi
c0016baf:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bb3:	46                   	inc    esi
c0016bb4:	83 fe 04             	cmp    esi,0x4
c0016bb7:	0f 85 7a ff ff ff    	jne    c0016b37 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc1:	83 f0 01             	xor    eax,0x1
c0016bc4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bc8:	75 57                	jne    c0016c21 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bce:	83 f0 01             	xor    eax,0x1
c0016bd1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016bd5:	75 4a                	jne    c0016c21 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bd7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bdb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016be3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016beb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bf1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bf7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bfd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c01:	89 f7                	mov    edi,esi
c0016c03:	c1 e0 0a             	shl    eax,0xa
c0016c06:	c1 ff 1f             	sar    edi,0x1f
c0016c09:	57                   	push   edi
c0016c0a:	56                   	push   esi
c0016c0b:	52                   	push   edx
c0016c0c:	50                   	push   eax
c0016c0d:	e8 22 06 01 00       	call   c0027234 <__udivdi3>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c19:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c1d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c21:	84 c9                	test   cl,cl
c0016c23:	74 53                	je     c0016c78 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c25:	0f b6 c9             	movzx  ecx,cl
c0016c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c30:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c34:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c40:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c44:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c58:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c5c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c60:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c64:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c6c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c70:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c74:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c78:	31 ed                	xor    ebp,ebp
c0016c7a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c7e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c82:	89 f8                	mov    eax,edi
c0016c84:	09 f0                	or     eax,esi
c0016c86:	74 1e                	je     c0016ca6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c88:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c8c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c90:	89 d1                	mov    ecx,edx
c0016c92:	09 c1                	or     ecx,eax
c0016c94:	74 10                	je     c0016ca6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c96:	83 ec 0c             	sub    esp,0xc
c0016c99:	57                   	push   edi
c0016c9a:	56                   	push   esi
c0016c9b:	52                   	push   edx
c0016c9c:	50                   	push   eax
c0016c9d:	53                   	push   ebx
c0016c9e:	e8 bb fc ff ff       	call   c001695e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ca3:	83 c4 20             	add    esp,0x20
c0016ca6:	45                   	inc    ebp
c0016ca7:	83 fd 04             	cmp    ebp,0x4
c0016caa:	75 ce                	jne    c0016c7a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016cac:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cb2:	5b                   	pop    ebx
c0016cb3:	5e                   	pop    esi
c0016cb4:	5f                   	pop    edi
c0016cb5:	5d                   	pop    ebp
c0016cb6:	c3                   	ret    
c0016cb7:	90                   	nop

c0016cb8 <Serial::Serial(char const*)>:
c0016cb8:	83 ec 0c             	sub    esp,0xc
c0016cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbf:	83 ec 08             	sub    esp,0x8
c0016cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc6:	50                   	push   eax
c0016cc7:	e8 d0 d7 ff ff       	call   c001449c <Device::Device(char const*)>
c0016ccc:	83 c4 10             	add    esp,0x10
c0016ccf:	ba 8c bc 02 c0       	mov    edx,0xc002bc8c
c0016cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd8:	89 10                	mov    DWORD PTR [eax],edx
c0016cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cde:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ce8:	90                   	nop
c0016ce9:	83 c4 0c             	add    esp,0xc
c0016cec:	c3                   	ret    
c0016ced:	90                   	nop

c0016cee <Serial::~Serial()>:
c0016cee:	83 ec 0c             	sub    esp,0xc
c0016cf1:	ba 8c bc 02 c0       	mov    edx,0xc002bc8c
c0016cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cfa:	89 10                	mov    DWORD PTR [eax],edx
c0016cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d00:	83 ec 0c             	sub    esp,0xc
c0016d03:	50                   	push   eax
c0016d04:	e8 75 d4 ff ff       	call   c001417e <Device::~Device()>
c0016d09:	83 c4 10             	add    esp,0x10
c0016d0c:	90                   	nop
c0016d0d:	83 c4 0c             	add    esp,0xc
c0016d10:	c3                   	ret    
c0016d11:	90                   	nop

c0016d12 <Serial::~Serial()>:
c0016d12:	83 ec 0c             	sub    esp,0xc
c0016d15:	83 ec 0c             	sub    esp,0xc
c0016d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1c:	e8 cd ff ff ff       	call   c0016cee <Serial::~Serial()>
c0016d21:	83 c4 10             	add    esp,0x10
c0016d24:	83 ec 08             	sub    esp,0x8
c0016d27:	68 58 01 00 00       	push   0x158
c0016d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d30:	e8 62 c0 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	83 c4 0c             	add    esp,0xc
c0016d3b:	c3                   	ret    

c0016d3c <Timer::Timer(char const*)>:
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d43:	83 ec 08             	sub    esp,0x8
c0016d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4a:	50                   	push   eax
c0016d4b:	e8 4c d7 ff ff       	call   c001449c <Device::Device(char const*)>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	ba d0 bc 02 c0       	mov    edx,0xc002bcd0
c0016d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5c:	89 10                	mov    DWORD PTR [eax],edx
c0016d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d62:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d6c:	90                   	nop
c0016d6d:	83 c4 0c             	add    esp,0xc
c0016d70:	c3                   	ret    
c0016d71:	90                   	nop

c0016d72 <Timer::~Timer()>:
c0016d72:	83 ec 0c             	sub    esp,0xc
c0016d75:	ba d0 bc 02 c0       	mov    edx,0xc002bcd0
c0016d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7e:	89 10                	mov    DWORD PTR [eax],edx
c0016d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	50                   	push   eax
c0016d88:	e8 f1 d3 ff ff       	call   c001417e <Device::~Device()>
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	90                   	nop
c0016d91:	83 c4 0c             	add    esp,0xc
c0016d94:	c3                   	ret    
c0016d95:	90                   	nop

c0016d96 <Timer::~Timer()>:
c0016d96:	83 ec 0c             	sub    esp,0xc
c0016d99:	83 ec 0c             	sub    esp,0xc
c0016d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da0:	e8 cd ff ff ff       	call   c0016d72 <Timer::~Timer()>
c0016da5:	83 c4 10             	add    esp,0x10
c0016da8:	83 ec 08             	sub    esp,0x8
c0016dab:	68 5c 01 00 00       	push   0x15c
c0016db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db4:	e8 de bf ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0016db9:	83 c4 10             	add    esp,0x10
c0016dbc:	83 c4 0c             	add    esp,0xc
c0016dbf:	c3                   	ret    

c0016dc0 <Timer::read()>:
c0016dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016dca:	c3                   	ret    

c0016dcb <timerHandler(unsigned long long)>:
c0016dcb:	55                   	push   ebp
c0016dcc:	57                   	push   edi
c0016dcd:	56                   	push   esi
c0016dce:	53                   	push   ebx
c0016dcf:	83 ec 0c             	sub    esp,0xc
c0016dd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016dd6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dda:	01 35 50 f5 02 c0    	add    DWORD PTR ds:0xc002f550,esi
c0016de0:	11 3d 54 f5 02 c0    	adc    DWORD PTR ds:0xc002f554,edi
c0016de6:	80 3d cd ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eecd,0x0
c0016ded:	0f 84 42 01 00 00    	je     c0016f35 <timerHandler(unsigned long long)+0x16a>
c0016df3:	fa                   	cli    
c0016df4:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c0016dfa:	83 ec 0c             	sub    esp,0xc
c0016dfd:	ff 05 04 24 03 c0    	inc    DWORD PTR ds:0xc0032404
c0016e03:	68 18 24 03 c0       	push   0xc0032418
c0016e08:	e8 ad 24 01 00       	call   c00292ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e0d:	83 c4 10             	add    esp,0x10
c0016e10:	84 c0                	test   al,al
c0016e12:	0f 85 a2 00 00 00    	jne    c0016eba <timerHandler(unsigned long long)+0xef>
c0016e18:	83 ec 0c             	sub    esp,0xc
c0016e1b:	68 18 24 03 c0       	push   0xc0032418
c0016e20:	e8 b1 24 01 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e25:	83 c4 10             	add    esp,0x10
c0016e28:	89 c3                	mov    ebx,eax
c0016e2a:	83 ec 0c             	sub    esp,0xc
c0016e2d:	68 18 24 03 c0       	push   0xc0032418
c0016e32:	e8 9f 24 01 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e37:	c7 04 24 18 24 03 c0 	mov    DWORD PTR [esp],0xc0032418
c0016e3e:	89 c5                	mov    ebp,eax
c0016e40:	e8 99 24 01 00       	call   c00292de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e45:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e48:	83 c4 10             	add    esp,0x10
c0016e4b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e4e:	39 15 50 f5 02 c0    	cmp    DWORD PTR ds:0xc002f550,edx
c0016e54:	a1 54 f5 02 c0       	mov    eax,ds:0xc002f554
c0016e59:	19 c8                	sbb    eax,ecx
c0016e5b:	72 21                	jb     c0016e7e <timerHandler(unsigned long long)+0xb3>
c0016e5d:	83 ec 0c             	sub    esp,0xc
c0016e60:	55                   	push   ebp
c0016e61:	e8 48 7b 00 00       	call   c001e9ae <unblockTask(ThreadControlBlock*)>
c0016e66:	83 c4 10             	add    esp,0x10
c0016e69:	39 eb                	cmp    ebx,ebp
c0016e6b:	75 21                	jne    c0016e8e <timerHandler(unsigned long long)+0xc3>
c0016e6d:	83 ec 0c             	sub    esp,0xc
c0016e70:	68 18 24 03 c0       	push   0xc0032418
c0016e75:	e8 5c 24 01 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e7a:	89 c3                	mov    ebx,eax
c0016e7c:	eb 0d                	jmp    c0016e8b <timerHandler(unsigned long long)+0xc0>
c0016e7e:	50                   	push   eax
c0016e7f:	50                   	push   eax
c0016e80:	55                   	push   ebp
c0016e81:	68 18 24 03 c0       	push   0xc0032418
c0016e86:	e8 01 25 01 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e8b:	83 c4 10             	add    esp,0x10
c0016e8e:	83 ec 0c             	sub    esp,0xc
c0016e91:	68 18 24 03 c0       	push   0xc0032418
c0016e96:	e8 1f 24 01 00       	call   c00292ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e9b:	83 c4 10             	add    esp,0x10
c0016e9e:	84 c0                	test   al,al
c0016ea0:	75 18                	jne    c0016eba <timerHandler(unsigned long long)+0xef>
c0016ea2:	83 ec 0c             	sub    esp,0xc
c0016ea5:	68 18 24 03 c0       	push   0xc0032418
c0016eaa:	e8 27 24 01 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016eaf:	83 c4 10             	add    esp,0x10
c0016eb2:	39 d8                	cmp    eax,ebx
c0016eb4:	0f 85 70 ff ff ff    	jne    c0016e2a <timerHandler(unsigned long long)+0x5f>
c0016eba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ebf:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016ec3:	74 3d                	je     c0016f02 <timerHandler(unsigned long long)+0x137>
c0016ec5:	80 3d cc ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eecc,0x0
c0016ecc:	74 34                	je     c0016f02 <timerHandler(unsigned long long)+0x137>
c0016ece:	fa                   	cli    
c0016ecf:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c0016ed5:	31 d2                	xor    edx,edx
c0016ed7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016edc:	89 f9                	mov    ecx,edi
c0016ede:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ee6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ee9:	39 c6                	cmp    esi,eax
c0016eeb:	19 d1                	sbb    ecx,edx
c0016eed:	72 05                	jb     c0016ef4 <timerHandler(unsigned long long)+0x129>
c0016eef:	e8 f6 75 00 00       	call   c001e4ea <schedule()>
c0016ef4:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0016ef9:	48                   	dec    eax
c0016efa:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0016eff:	75 01                	jne    c0016f02 <timerHandler(unsigned long long)+0x137>
c0016f01:	fb                   	sti    
c0016f02:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c0016f07:	48                   	dec    eax
c0016f08:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c0016f0d:	75 18                	jne    c0016f27 <timerHandler(unsigned long long)+0x15c>
c0016f0f:	83 3d 00 24 03 c0 00 	cmp    DWORD PTR ds:0xc0032400,0x0
c0016f16:	74 0f                	je     c0016f27 <timerHandler(unsigned long long)+0x15c>
c0016f18:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c0016f22:	e8 c3 75 00 00       	call   c001e4ea <schedule()>
c0016f27:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0016f2c:	48                   	dec    eax
c0016f2d:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0016f32:	75 01                	jne    c0016f35 <timerHandler(unsigned long long)+0x16a>
c0016f34:	fb                   	sti    
c0016f35:	83 c4 0c             	add    esp,0xc
c0016f38:	5b                   	pop    ebx
c0016f39:	5e                   	pop    esi
c0016f3a:	5f                   	pop    edi
c0016f3b:	5d                   	pop    ebp
c0016f3c:	c3                   	ret    

c0016f3d <setupTimer(int)>:
c0016f3d:	57                   	push   edi
c0016f3e:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0016f43:	56                   	push   esi
c0016f44:	53                   	push   ebx
c0016f45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f4f:	83 ec 0c             	sub    esp,0xc
c0016f52:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f58:	e8 3b d6 ff ff       	call   c0014598 <Device::getName()>
c0016f5d:	83 c4 10             	add    esp,0x10
c0016f60:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f63:	0f 85 8d 00 00 00    	jne    c0016ff6 <setupTimer(int)+0xb9>
c0016f69:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0016f6e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f75:	74 7f                	je     c0016ff6 <setupTimer(int)+0xb9>
c0016f77:	83 ec 0c             	sub    esp,0xc
c0016f7a:	68 5c 01 00 00       	push   0x15c
c0016f7f:	e8 3c 89 ff ff       	call   c000f8c0 <malloc>
c0016f84:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f87:	89 c3                	mov    ebx,eax
c0016f89:	e8 7a fe 00 00       	call   c0026e08 <PIT::PIT()>
c0016f8e:	59                   	pop    ecx
c0016f8f:	5f                   	pop    edi
c0016f90:	53                   	push   ebx
c0016f91:	ff 35 c8 ee 02 c0    	push   DWORD PTR ds:0xc002eec8
c0016f97:	e8 10 d3 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0016f9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f9e:	6a 00                	push   0x0
c0016fa0:	6a 00                	push   0x0
c0016fa2:	56                   	push   esi
c0016fa3:	53                   	push   ebx
c0016fa4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fa7:	83 c4 14             	add    esp,0x14
c0016faa:	68 60 01 00 00       	push   0x160
c0016faf:	e8 0c 89 ff ff       	call   c000f8c0 <malloc>
c0016fb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fb7:	89 c7                	mov    edi,eax
c0016fb9:	e8 fa fc 00 00       	call   c0026cb8 <APICTimer::APICTimer()>
c0016fbe:	6a 00                	push   0x0
c0016fc0:	6a 00                	push   0x0
c0016fc2:	56                   	push   esi
c0016fc3:	57                   	push   edi
c0016fc4:	e8 f1 fb 00 00       	call   c0026bba <APICTimer::open(int, int, void*)>
c0016fc9:	83 c4 20             	add    esp,0x20
c0016fcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fce:	6a 00                	push   0x0
c0016fd0:	6a 00                	push   0x0
c0016fd2:	6a 00                	push   0x0
c0016fd4:	53                   	push   ebx
c0016fd5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fd8:	58                   	pop    eax
c0016fd9:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0016fde:	5a                   	pop    edx
c0016fdf:	57                   	push   edi
c0016fe0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fe6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fec:	e8 bb d2 ff ff       	call   c00142ac <Device::addChild(Device*)>
c0016ff1:	83 c4 10             	add    esp,0x10
c0016ff4:	eb 33                	jmp    c0017029 <setupTimer(int)+0xec>
c0016ff6:	83 ec 0c             	sub    esp,0xc
c0016ff9:	68 5c 01 00 00       	push   0x15c
c0016ffe:	e8 bd 88 ff ff       	call   c000f8c0 <malloc>
c0017003:	89 04 24             	mov    DWORD PTR [esp],eax
c0017006:	89 c3                	mov    ebx,eax
c0017008:	e8 fb fd 00 00       	call   c0026e08 <PIT::PIT()>
c001700d:	58                   	pop    eax
c001700e:	5a                   	pop    edx
c001700f:	53                   	push   ebx
c0017010:	ff 35 c8 ee 02 c0    	push   DWORD PTR ds:0xc002eec8
c0017016:	e8 91 d2 ff ff       	call   c00142ac <Device::addChild(Device*)>
c001701b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001701d:	6a 00                	push   0x0
c001701f:	6a 00                	push   0x0
c0017021:	56                   	push   esi
c0017022:	53                   	push   ebx
c0017023:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017026:	83 c4 20             	add    esp,0x20
c0017029:	89 d8                	mov    eax,ebx
c001702b:	5b                   	pop    ebx
c001702c:	5e                   	pop    esi
c001702d:	5f                   	pop    edi
c001702e:	c3                   	ret    
c001702f:	90                   	nop

c0017030 <VCache::VCache(PhysicalDisk*)>:
c0017030:	53                   	push   ebx
c0017031:	83 ec 18             	sub    esp,0x18
c0017034:	ba 00 bd 02 c0       	mov    edx,0xc002bd00
c0017039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703d:	89 10                	mov    DWORD PTR [eax],edx
c001703f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017043:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001704a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017059:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017060:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017072:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017079:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017088:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001708c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017090:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017097:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001709e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00170ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170c9:	83 ec 0c             	sub    esp,0xc
c00170cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170d0:	e8 eb 87 ff ff       	call   c000f8c0 <malloc>
c00170d5:	83 c4 10             	add    esp,0x10
c00170d8:	89 c3                	mov    ebx,eax
c00170da:	83 ec 0c             	sub    esp,0xc
c00170dd:	53                   	push   ebx
c00170de:	e8 b1 71 00 00       	call   c001e294 <Mutex::Mutex()>
c00170e3:	83 c4 10             	add    esp,0x10
c00170e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017107:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001710d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017111:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017114:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017118:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001711e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017124:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017128:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001712b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001712e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017132:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017136:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001713a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017140:	05 00 01 00 00       	add    eax,0x100
c0017145:	c1 e0 04             	shl    eax,0x4
c0017148:	83 ec 0c             	sub    esp,0xc
c001714b:	50                   	push   eax
c001714c:	e8 6f 87 ff ff       	call   c000f8c0 <malloc>
c0017151:	83 c4 10             	add    esp,0x10
c0017154:	89 c2                	mov    edx,eax
c0017156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001715a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001715d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017161:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017170:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017174:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001717a:	c1 e0 07             	shl    eax,0x7
c001717d:	83 ec 0c             	sub    esp,0xc
c0017180:	50                   	push   eax
c0017181:	e8 3a 87 ff ff       	call   c000f8c0 <malloc>
c0017186:	83 c4 10             	add    esp,0x10
c0017189:	89 c2                	mov    edx,eax
c001718b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001718f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017192:	90                   	nop
c0017193:	83 c4 18             	add    esp,0x18
c0017196:	5b                   	pop    ebx
c0017197:	c3                   	ret    

c0017198 <VCache::invalidateReadBuffer()>:
c0017198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001719c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00171a2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00171a6:	c3                   	ret    
c00171a7:	90                   	nop

c00171a8 <VCache::writeWriteBuffer()>:
c00171a8:	53                   	push   ebx
c00171a9:	83 ec 14             	sub    esp,0x14
c00171ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00171b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00171b5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171bb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00171be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00171c1:	50                   	push   eax
c00171c2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171c5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171cc:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171d3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171d7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171de:	83 c4 28             	add    esp,0x28
c00171e1:	5b                   	pop    ebx
c00171e2:	c3                   	ret    
c00171e3:	90                   	nop

c00171e4 <VCache::~VCache()>:
c00171e4:	83 ec 0c             	sub    esp,0xc
c00171e7:	ba 00 bd 02 c0       	mov    edx,0xc002bd00
c00171ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171f0:	89 10                	mov    DWORD PTR [eax],edx
c00171f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171f6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171f9:	84 c0                	test   al,al
c00171fb:	74 0f                	je     c001720c <VCache::~VCache()+0x28>
c00171fd:	83 ec 0c             	sub    esp,0xc
c0017200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017204:	e8 9f ff ff ff       	call   c00171a8 <VCache::writeWriteBuffer()>
c0017209:	83 c4 10             	add    esp,0x10
c001720c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017210:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017213:	83 ec 0c             	sub    esp,0xc
c0017216:	50                   	push   eax
c0017217:	e8 b4 86 ff ff       	call   c000f8d0 <free>
c001721c:	83 c4 10             	add    esp,0x10
c001721f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017223:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017226:	83 ec 0c             	sub    esp,0xc
c0017229:	50                   	push   eax
c001722a:	e8 a1 86 ff ff       	call   c000f8d0 <free>
c001722f:	83 c4 10             	add    esp,0x10
c0017232:	90                   	nop
c0017233:	83 c4 0c             	add    esp,0xc
c0017236:	c3                   	ret    
c0017237:	90                   	nop

c0017238 <VCache::~VCache()>:
c0017238:	83 ec 0c             	sub    esp,0xc
c001723b:	83 ec 0c             	sub    esp,0xc
c001723e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017242:	e8 9d ff ff ff       	call   c00171e4 <VCache::~VCache()>
c0017247:	83 c4 10             	add    esp,0x10
c001724a:	83 ec 08             	sub    esp,0x8
c001724d:	6a 44                	push   0x44
c001724f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017253:	e8 3f bb ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	83 c4 0c             	add    esp,0xc
c001725e:	c3                   	ret    
c001725f:	90                   	nop

c0017260 <VCache::write(unsigned long long, int, void*)>:
c0017260:	55                   	push   ebp
c0017261:	57                   	push   edi
c0017262:	56                   	push   esi
c0017263:	53                   	push   ebx
c0017264:	83 ec 28             	sub    esp,0x28
c0017267:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001726b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001726f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017273:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017277:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001727a:	e8 a3 75 00 00       	call   c001e822 <Semaphore::acquire()>
c001727f:	83 c4 10             	add    esp,0x10
c0017282:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017286:	74 0c                	je     c0017294 <VCache::write(unsigned long long, int, void*)+0x34>
c0017288:	83 ec 0c             	sub    esp,0xc
c001728b:	53                   	push   ebx
c001728c:	e8 07 ff ff ff       	call   c0017198 <VCache::invalidateReadBuffer()>
c0017291:	83 c4 10             	add    esp,0x10
c0017294:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017298:	74 66                	je     c0017300 <VCache::write(unsigned long long, int, void*)+0xa0>
c001729a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001729d:	99                   	cdq    
c001729e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172a2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00172a5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00172a8:	89 c1                	mov    ecx,eax
c00172aa:	89 d0                	mov    eax,edx
c00172ac:	31 f1                	xor    ecx,esi
c00172ae:	31 f8                	xor    eax,edi
c00172b0:	89 ca                	mov    edx,ecx
c00172b2:	09 c2                	or     edx,eax
c00172b4:	75 3e                	jne    c00172f4 <VCache::write(unsigned long long, int, void*)+0x94>
c00172b6:	83 fd 01             	cmp    ebp,0x1
c00172b9:	75 39                	jne    c00172f4 <VCache::write(unsigned long long, int, void*)+0x94>
c00172bb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00172c4:	51                   	push   ecx
c00172c5:	50                   	push   eax
c00172c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172ca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00172ce:	0f af c8             	imul   ecx,eax
c00172d1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00172d4:	51                   	push   ecx
c00172d5:	e8 d6 9a fe ff       	call   c0000db0 <realmemcpy>
c00172da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172dd:	83 c4 10             	add    esp,0x10
c00172e0:	40                   	inc    eax
c00172e1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172e4:	83 c0 80             	add    eax,0xffffff80
c00172e7:	75 57                	jne    c0017340 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172e9:	83 ec 0c             	sub    esp,0xc
c00172ec:	53                   	push   ebx
c00172ed:	e8 b6 fe ff ff       	call   c00171a8 <VCache::writeWriteBuffer()>
c00172f2:	eb 34                	jmp    c0017328 <VCache::write(unsigned long long, int, void*)+0xc8>
c00172f4:	83 ec 0c             	sub    esp,0xc
c00172f7:	53                   	push   ebx
c00172f8:	e8 ab fe ff ff       	call   c00171a8 <VCache::writeWriteBuffer()>
c00172fd:	83 c4 10             	add    esp,0x10
c0017300:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017303:	83 fd 7f             	cmp    ebp,0x7f
c0017306:	7f 25                	jg     c001732d <VCache::write(unsigned long long, int, void*)+0xcd>
c0017308:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001730b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001730e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017311:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017315:	52                   	push   edx
c0017316:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001731c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017320:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017323:	e8 88 9a fe ff       	call   c0000db0 <realmemcpy>
c0017328:	83 c4 10             	add    esp,0x10
c001732b:	eb 13                	jmp    c0017340 <VCache::write(unsigned long long, int, void*)+0xe0>
c001732d:	83 ec 0c             	sub    esp,0xc
c0017330:	8b 10                	mov    edx,DWORD PTR [eax]
c0017332:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017336:	55                   	push   ebp
c0017337:	57                   	push   edi
c0017338:	56                   	push   esi
c0017339:	50                   	push   eax
c001733a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001733d:	83 c4 20             	add    esp,0x20
c0017340:	83 ec 0c             	sub    esp,0xc
c0017343:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017346:	e8 11 7c 00 00       	call   c001ef5c <Semaphore::release()>
c001734b:	83 c4 2c             	add    esp,0x2c
c001734e:	31 c0                	xor    eax,eax
c0017350:	5b                   	pop    ebx
c0017351:	5e                   	pop    esi
c0017352:	5f                   	pop    edi
c0017353:	5d                   	pop    ebp
c0017354:	c3                   	ret    
c0017355:	90                   	nop

c0017356 <VCache::read(unsigned long long, int, void*)>:
c0017356:	55                   	push   ebp
c0017357:	57                   	push   edi
c0017358:	56                   	push   esi
c0017359:	53                   	push   ebx
c001735a:	83 ec 28             	sub    esp,0x28
c001735d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017361:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017365:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017369:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001736d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017371:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017375:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017379:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001737c:	e8 a1 74 00 00       	call   c001e822 <Semaphore::acquire()>
c0017381:	83 c4 10             	add    esp,0x10
c0017384:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017388:	74 0c                	je     c0017396 <VCache::read(unsigned long long, int, void*)+0x40>
c001738a:	83 ec 0c             	sub    esp,0xc
c001738d:	53                   	push   ebx
c001738e:	e8 15 fe ff ff       	call   c00171a8 <VCache::writeWriteBuffer()>
c0017393:	83 c4 10             	add    esp,0x10
c0017396:	83 fe 01             	cmp    esi,0x1
c0017399:	0f 85 80 00 00 00    	jne    c001741f <VCache::read(unsigned long long, int, void*)+0xc9>
c001739f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173a2:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00173a9:	75 74                	jne    c001741f <VCache::read(unsigned long long, int, void*)+0xc9>
c00173ab:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173ae:	89 d1                	mov    ecx,edx
c00173b0:	f7 d9                	neg    ecx
c00173b2:	89 cf                	mov    edi,ecx
c00173b4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173b8:	c1 ff 1f             	sar    edi,0x1f
c00173bb:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00173be:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00173c2:	89 ce                	mov    esi,ecx
c00173c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173c8:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00173cc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173d0:	89 cf                	mov    edi,ecx
c00173d2:	74 0a                	je     c00173de <VCache::read(unsigned long long, int, void*)+0x88>
c00173d4:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173d7:	75 05                	jne    c00173de <VCache::read(unsigned long long, int, void*)+0x88>
c00173d9:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00173dc:	74 1c                	je     c00173fa <VCache::read(unsigned long long, int, void*)+0xa4>
c00173de:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173e2:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00173e5:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173ed:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173f0:	52                   	push   edx
c00173f1:	57                   	push   edi
c00173f2:	56                   	push   esi
c00173f3:	50                   	push   eax
c00173f4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173f7:	83 c4 20             	add    esp,0x20
c00173fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173fd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017403:	50                   	push   eax
c0017404:	52                   	push   edx
c0017405:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017408:	48                   	dec    eax
c0017409:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001740d:	0f af c2             	imul   eax,edx
c0017410:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017413:	50                   	push   eax
c0017414:	55                   	push   ebp
c0017415:	e8 96 99 fe ff       	call   c0000db0 <realmemcpy>
c001741a:	83 c4 10             	add    esp,0x10
c001741d:	eb 21                	jmp    c0017440 <VCache::read(unsigned long long, int, void*)+0xea>
c001741f:	83 ec 0c             	sub    esp,0xc
c0017422:	53                   	push   ebx
c0017423:	e8 70 fd ff ff       	call   c0017198 <VCache::invalidateReadBuffer()>
c0017428:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001742b:	8b 10                	mov    edx,DWORD PTR [eax]
c001742d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017430:	56                   	push   esi
c0017431:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017435:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017439:	50                   	push   eax
c001743a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001743d:	83 c4 20             	add    esp,0x20
c0017440:	83 ec 0c             	sub    esp,0xc
c0017443:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017446:	e8 11 7b 00 00       	call   c001ef5c <Semaphore::release()>
c001744b:	83 c4 2c             	add    esp,0x2c
c001744e:	31 c0                	xor    eax,eax
c0017450:	5b                   	pop    ebx
c0017451:	5e                   	pop    esi
c0017452:	5f                   	pop    edi
c0017453:	5d                   	pop    ebp
c0017454:	c3                   	ret    
c0017455:	90                   	nop

c0017456 <Video::putrect(int, int, int, int, unsigned int)>:
c0017456:	55                   	push   ebp
c0017457:	57                   	push   edi
c0017458:	56                   	push   esi
c0017459:	53                   	push   ebx
c001745a:	83 ec 1c             	sub    esp,0x1c
c001745d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017461:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017465:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017469:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001746d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017475:	01 df                	add    edi,ebx
c0017477:	39 fb                	cmp    ebx,edi
c0017479:	7d 1f                	jge    c001749a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001747b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001747f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017483:	7d 12                	jge    c0017497 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017485:	8b 16                	mov    edx,DWORD PTR [esi]
c0017487:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001748b:	53                   	push   ebx
c001748c:	55                   	push   ebp
c001748d:	45                   	inc    ebp
c001748e:	56                   	push   esi
c001748f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017492:	83 c4 10             	add    esp,0x10
c0017495:	eb e8                	jmp    c001747f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017497:	43                   	inc    ebx
c0017498:	eb dd                	jmp    c0017477 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001749a:	83 c4 1c             	add    esp,0x1c
c001749d:	5b                   	pop    ebx
c001749e:	5e                   	pop    esi
c001749f:	5f                   	pop    edi
c00174a0:	5d                   	pop    ebp
c00174a1:	c3                   	ret    

c00174a2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00174a2:	55                   	push   ebp
c00174a3:	57                   	push   edi
c00174a4:	31 ff                	xor    edi,edi
c00174a6:	56                   	push   esi
c00174a7:	53                   	push   ebx
c00174a8:	83 ec 1c             	sub    esp,0x1c
c00174ab:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00174af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00174b3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00174ba:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00174bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174c3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174cb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174ce:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174d2:	01 f9                	add    ecx,edi
c00174d4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174d8:	7d 2f                	jge    c0017509 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174da:	31 f6                	xor    esi,esi
c00174dc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174e0:	01 f2                	add    edx,esi
c00174e2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174e6:	7d 1a                	jge    c0017502 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174eb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174ee:	46                   	inc    esi
c00174ef:	51                   	push   ecx
c00174f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174f4:	52                   	push   edx
c00174f5:	55                   	push   ebp
c00174f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174f9:	83 c4 10             	add    esp,0x10
c00174fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017500:	eb da                	jmp    c00174dc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017502:	47                   	inc    edi
c0017503:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017507:	eb c5                	jmp    c00174ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017509:	83 c4 1c             	add    esp,0x1c
c001750c:	5b                   	pop    ebx
c001750d:	5e                   	pop    esi
c001750e:	5f                   	pop    edi
c001750f:	5d                   	pop    ebp
c0017510:	c3                   	ret    
c0017511:	90                   	nop

c0017512 <Video::blit(unsigned int*, int, int, int, int)>:
c0017512:	55                   	push   ebp
c0017513:	57                   	push   edi
c0017514:	56                   	push   esi
c0017515:	53                   	push   ebx
c0017516:	83 ec 1c             	sub    esp,0x1c
c0017519:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001751d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017521:	85 c0                	test   eax,eax
c0017523:	79 02                	jns    c0017527 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017525:	31 c0                	xor    eax,eax
c0017527:	c1 e0 02             	shl    eax,0x2
c001752a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001752e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017532:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017536:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001753a:	39 d8                	cmp    eax,ebx
c001753c:	7e 49                	jle    c0017587 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001753e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017544:	7c 41                	jl     c0017587 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017546:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001754a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001754e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017552:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017556:	39 f9                	cmp    ecx,edi
c0017558:	7e 22                	jle    c001757c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001755a:	83 c5 04             	add    ebp,0x4
c001755d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017563:	7c 14                	jl     c0017579 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017565:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017567:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001756a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001756e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017572:	56                   	push   esi
c0017573:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017576:	83 c4 10             	add    esp,0x10
c0017579:	47                   	inc    edi
c001757a:	eb d2                	jmp    c001754e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001757c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017580:	43                   	inc    ebx
c0017581:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017585:	eb ab                	jmp    c0017532 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017587:	83 c4 1c             	add    esp,0x1c
c001758a:	5b                   	pop    ebx
c001758b:	5e                   	pop    esi
c001758c:	5f                   	pop    edi
c001758d:	5d                   	pop    ebp
c001758e:	c3                   	ret    
c001758f:	90                   	nop

c0017590 <Video::clearScreen(unsigned int)>:
c0017590:	57                   	push   edi
c0017591:	56                   	push   esi
c0017592:	53                   	push   ebx
c0017593:	31 db                	xor    ebx,ebx
c0017595:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017599:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001759f:	7e 1f                	jle    c00175c0 <Video::clearScreen(unsigned int)+0x30>
c00175a1:	31 ff                	xor    edi,edi
c00175a3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175a9:	7e 12                	jle    c00175bd <Video::clearScreen(unsigned int)+0x2d>
c00175ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00175ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175b1:	53                   	push   ebx
c00175b2:	57                   	push   edi
c00175b3:	47                   	inc    edi
c00175b4:	56                   	push   esi
c00175b5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175b8:	83 c4 10             	add    esp,0x10
c00175bb:	eb e6                	jmp    c00175a3 <Video::clearScreen(unsigned int)+0x13>
c00175bd:	43                   	inc    ebx
c00175be:	eb d9                	jmp    c0017599 <Video::clearScreen(unsigned int)+0x9>
c00175c0:	5b                   	pop    ebx
c00175c1:	5e                   	pop    esi
c00175c2:	5f                   	pop    edi
c00175c3:	c3                   	ret    

c00175c4 <Video::putpixel(int, int, unsigned int)>:
c00175c4:	c7 44 24 04 08 bd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bd08
c00175cc:	e9 94 32 00 00       	jmp    c001a865 <Krnl::panic(char const*)>
c00175d1:	90                   	nop

c00175d2 <Video::Video(char const*)>:
c00175d2:	83 ec 0c             	sub    esp,0xc
c00175d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d9:	83 ec 08             	sub    esp,0x8
c00175dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175e0:	50                   	push   eax
c00175e1:	e8 b6 ce ff ff       	call   c001449c <Device::Device(char const*)>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	ba 8c bd 02 c0       	mov    edx,0xc002bd8c
c00175ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f2:	89 10                	mov    DWORD PTR [eax],edx
c00175f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017602:	90                   	nop
c0017603:	83 c4 0c             	add    esp,0xc
c0017606:	c3                   	ret    
c0017607:	90                   	nop

c0017608 <Video::~Video()>:
c0017608:	83 ec 0c             	sub    esp,0xc
c001760b:	ba 8c bd 02 c0       	mov    edx,0xc002bd8c
c0017610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017614:	89 10                	mov    DWORD PTR [eax],edx
c0017616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761a:	83 ec 0c             	sub    esp,0xc
c001761d:	50                   	push   eax
c001761e:	e8 5b cb ff ff       	call   c001417e <Device::~Device()>
c0017623:	83 c4 10             	add    esp,0x10
c0017626:	90                   	nop
c0017627:	83 c4 0c             	add    esp,0xc
c001762a:	c3                   	ret    
c001762b:	90                   	nop

c001762c <Video::~Video()>:
c001762c:	83 ec 0c             	sub    esp,0xc
c001762f:	83 ec 0c             	sub    esp,0xc
c0017632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017636:	e8 cd ff ff ff       	call   c0017608 <Video::~Video()>
c001763b:	83 c4 10             	add    esp,0x10
c001763e:	83 ec 08             	sub    esp,0x8
c0017641:	68 64 01 00 00       	push   0x164
c0017646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001764a:	e8 48 b7 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c001764f:	83 c4 10             	add    esp,0x10
c0017652:	83 c4 0c             	add    esp,0xc
c0017655:	c3                   	ret    

c0017656 <Video::isMonochrome()>:
c0017656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001765a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017660:	c3                   	ret    
c0017661:	90                   	nop

c0017662 <Video::getWidth()>:
c0017662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017666:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001766c:	c3                   	ret    
c001766d:	90                   	nop

c001766e <Video::getHeight()>:
c001766e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017672:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017678:	c3                   	ret    
c0017679:	90                   	nop

c001767a <Video::drawCursor(int, int, unsigned char*, int)>:
c001767a:	55                   	push   ebp
c001767b:	57                   	push   edi
c001767c:	56                   	push   esi
c001767d:	53                   	push   ebx
c001767e:	83 ec 2c             	sub    esp,0x2c
c0017681:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017685:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017689:	83 f8 01             	cmp    eax,0x1
c001768c:	19 c9                	sbb    ecx,ecx
c001768e:	31 db                	xor    ebx,ebx
c0017690:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017694:	89 cd                	mov    ebp,ecx
c0017696:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001769e:	f7 d5                	not    ebp
c00176a0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00176a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176aa:	01 d8                	add    eax,ebx
c00176ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176b0:	56                   	push   esi
c00176b1:	e8 b8 ff ff ff       	call   c001766e <Video::getHeight()>
c00176b6:	59                   	pop    ecx
c00176b7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176bb:	7e 70                	jle    c001772d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00176bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176c1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176c5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176d0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176db:	89 f8                	mov    eax,edi
c00176dd:	83 c0 20             	add    eax,0x20
c00176e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176e4:	56                   	push   esi
c00176e5:	e8 78 ff ff ff       	call   c0017662 <Video::getWidth()>
c00176ea:	5a                   	pop    edx
c00176eb:	39 c7                	cmp    edi,eax
c00176ed:	7d 34                	jge    c0017723 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176ef:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176f4:	74 05                	je     c00176fb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00176f8:	55                   	push   ebp
c00176f9:	eb 0d                	jmp    c0017708 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176fb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017700:	74 12                	je     c0017714 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017702:	8b 06                	mov    eax,DWORD PTR [esi]
c0017704:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017708:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001770c:	57                   	push   edi
c001770d:	56                   	push   esi
c001770e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017711:	83 c4 10             	add    esp,0x10
c0017714:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017718:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001771c:	47                   	inc    edi
c001771d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017721:	75 c1                	jne    c00176e4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017723:	43                   	inc    ebx
c0017724:	83 fb 20             	cmp    ebx,0x20
c0017727:	0f 85 79 ff ff ff    	jne    c00176a6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001772d:	83 c4 2c             	add    esp,0x2c
c0017730:	5b                   	pop    ebx
c0017731:	5e                   	pop    esi
c0017732:	5f                   	pop    edi
c0017733:	5d                   	pop    ebp
c0017734:	c3                   	ret    
c0017735:	90                   	nop

c0017736 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017736:	55                   	push   ebp
c0017737:	57                   	push   edi
c0017738:	56                   	push   esi
c0017739:	53                   	push   ebx
c001773a:	83 ec 28             	sub    esp,0x28
c001773d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017741:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017745:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017749:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001774d:	c1 e7 08             	shl    edi,0x8
c0017750:	01 c7                	add    edi,eax
c0017752:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017756:	c1 e0 08             	shl    eax,0x8
c0017759:	01 d0                	add    eax,edx
c001775b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001775f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017763:	0f af c7             	imul   eax,edi
c0017766:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001776d:	50                   	push   eax
c001776e:	e8 4d 81 ff ff       	call   c000f8c0 <malloc>
c0017773:	83 c4 10             	add    esp,0x10
c0017776:	89 c5                	mov    ebp,eax
c0017778:	85 c0                	test   eax,eax
c001777a:	75 15                	jne    c0017791 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001777c:	83 ec 0c             	sub    esp,0xc
c001777f:	68 29 bd 02 c0       	push   0xc002bd29
c0017784:	e8 ee b6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	e9 1c 01 00 00       	jmp    c00178ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017791:	be 12 00 00 00       	mov    esi,0x12
c0017796:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001779a:	74 11                	je     c00177ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001779c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00177a0:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00177a4:	c1 fe 03             	sar    esi,0x3
c00177a7:	0f af f0             	imul   esi,eax
c00177aa:	83 c6 12             	add    esi,0x12
c00177ad:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00177b1:	74 04                	je     c00177b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00177b3:	85 ff                	test   edi,edi
c00177b5:	75 12                	jne    c00177c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00177b7:	83 ec 0c             	sub    esp,0xc
c00177ba:	68 40 bd 02 c0       	push   0xc002bd40
c00177bf:	e8 b3 b6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00177c4:	e9 ce 00 00 00       	jmp    c0017897 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177c9:	52                   	push   edx
c00177ca:	52                   	push   edx
c00177cb:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177cf:	50                   	push   eax
c00177d0:	68 55 bd 02 c0       	push   0xc002bd55
c00177d5:	e8 9d b6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00177da:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	80 fa 02             	cmp    dl,0x2
c00177e4:	0f 85 98 00 00 00    	jne    c0017882 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177ea:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177ef:	75 10                	jne    c0017801 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177f1:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177f5:	75 0a                	jne    c0017801 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177f7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177fa:	83 e8 18             	sub    eax,0x18
c00177fd:	a8 f7                	test   al,0xf7
c00177ff:	74 0a                	je     c001780b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017801:	83 ec 0c             	sub    esp,0xc
c0017804:	68 62 bd 02 c0       	push   0xc002bd62
c0017809:	eb 7f                	jmp    c001788a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001780b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017813:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001781b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001781f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017827:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001782b:	75 0c                	jne    c0017839 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001782d:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017832:	c1 e0 18             	shl    eax,0x18
c0017835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017839:	41                   	inc    ecx
c001783a:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001783f:	c1 e2 10             	shl    edx,0x10
c0017842:	89 d0                	mov    eax,edx
c0017844:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017849:	c1 e2 08             	shl    edx,0x8
c001784c:	09 c2                	or     edx,eax
c001784e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017852:	09 c2                	or     edx,eax
c0017854:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017858:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001785c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017860:	c1 f8 03             	sar    eax,0x3
c0017863:	01 c6                	add    esi,eax
c0017865:	89 c8                	mov    eax,ecx
c0017867:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001786b:	39 c7                	cmp    edi,eax
c001786d:	7f b0                	jg     c001781f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001786f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017873:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017877:	39 14 24             	cmp    DWORD PTR [esp],edx
c001787a:	7e 22                	jle    c001789e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001787c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017880:	eb 99                	jmp    c001781b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017882:	50                   	push   eax
c0017883:	50                   	push   eax
c0017884:	52                   	push   edx
c0017885:	68 70 bd 02 c0       	push   0xc002bd70
c001788a:	e8 e8 b5 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001788f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017892:	e8 39 80 ff ff       	call   c000f8d0 <free>
c0017897:	83 c4 10             	add    esp,0x10
c001789a:	31 ed                	xor    ebp,ebp
c001789c:	eb 0f                	jmp    c00178ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001789e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178a2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00178a5:	89 38                	mov    DWORD PTR [eax],edi
c00178a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178ab:	89 08                	mov    DWORD PTR [eax],ecx
c00178ad:	83 c4 1c             	add    esp,0x1c
c00178b0:	89 e8                	mov    eax,ebp
c00178b2:	5b                   	pop    ebx
c00178b3:	5e                   	pop    esi
c00178b4:	5f                   	pop    edi
c00178b5:	5d                   	pop    ebp
c00178b6:	c3                   	ret    
c00178b7:	90                   	nop

c00178b8 <Video::putTGA(int, int, unsigned char*, int)>:
c00178b8:	55                   	push   ebp
c00178b9:	57                   	push   edi
c00178ba:	56                   	push   esi
c00178bb:	53                   	push   ebx
c00178bc:	83 ec 28             	sub    esp,0x28
c00178bf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178c7:	50                   	push   eax
c00178c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178cc:	50                   	push   eax
c00178cd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178d5:	56                   	push   esi
c00178d6:	e8 5b fe ff ff       	call   c0017736 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178db:	83 c4 20             	add    esp,0x20
c00178de:	85 c0                	test   eax,eax
c00178e0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178e4:	74 35                	je     c001791b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178e6:	89 c7                	mov    edi,eax
c00178e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178f0:	39 d8                	cmp    eax,ebx
c00178f2:	7e 27                	jle    c001791b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178f4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017900:	39 e8                	cmp    eax,ebp
c0017902:	7e 14                	jle    c0017918 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017904:	8b 06                	mov    eax,DWORD PTR [esi]
c0017906:	83 c7 04             	add    edi,0x4
c0017909:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001790c:	53                   	push   ebx
c001790d:	55                   	push   ebp
c001790e:	45                   	inc    ebp
c001790f:	56                   	push   esi
c0017910:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017913:	83 c4 10             	add    esp,0x10
c0017916:	eb e0                	jmp    c00178f8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017918:	43                   	inc    ebx
c0017919:	eb cd                	jmp    c00178e8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001791b:	83 c4 1c             	add    esp,0x1c
c001791e:	5b                   	pop    ebx
c001791f:	5e                   	pop    esi
c0017920:	5f                   	pop    edi
c0017921:	5d                   	pop    ebp
c0017922:	c3                   	ret    
c0017923:	90                   	nop

c0017924 <ACPI::close(int, int, void*)>:
c0017924:	83 ec 1c             	sub    esp,0x1c
c0017927:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001792f:	74 0a                	je     c001793b <ACPI::close(int, int, void*)+0x17>
c0017931:	b8 00 00 00 00       	mov    eax,0x0
c0017936:	e9 9a 00 00 00       	jmp    c00179d5 <ACPI::close(int, int, void*)+0xb1>
c001793b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017940:	75 37                	jne    c0017979 <ACPI::close(int, int, void*)+0x55>
c0017942:	83 ec 0c             	sub    esp,0xc
c0017945:	68 cc bd 02 c0       	push   0xc002bdcc
c001794a:	e8 28 b5 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001794f:	83 c4 10             	add    esp,0x10
c0017952:	a1 88 15 03 c0       	mov    eax,ds:0xc0031588
c0017957:	85 c0                	test   eax,eax
c0017959:	74 07                	je     c0017962 <ACPI::close(int, int, void*)+0x3e>
c001795b:	a1 88 15 03 c0       	mov    eax,ds:0xc0031588
c0017960:	ff d0                	call   eax
c0017962:	83 ec 0c             	sub    esp,0xc
c0017965:	68 40 bf 02 c0       	push   0xc002bf40
c001796a:	e8 f6 2e 00 00       	call   c001a865 <Krnl::panic(char const*)>
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017977:	eb 5c                	jmp    c00179d5 <ACPI::close(int, int, void*)+0xb1>
c0017979:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001797e:	75 50                	jne    c00179d0 <ACPI::close(int, int, void*)+0xac>
c0017980:	a1 84 15 03 c0       	mov    eax,ds:0xc0031584
c0017985:	85 c0                	test   eax,eax
c0017987:	74 07                	je     c0017990 <ACPI::close(int, int, void*)+0x6c>
c0017989:	a1 84 15 03 c0       	mov    eax,ds:0xc0031584
c001798e:	ff d0                	call   eax
c0017990:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017995:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001799a:	83 e0 02             	and    eax,0x2
c001799d:	74 1c                	je     c00179bb <ACPI::close(int, int, void*)+0x97>
c001799f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00179a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179aa:	89 c2                	mov    edx,eax
c00179ac:	ec                   	in     al,dx
c00179ad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00179b1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00179b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179b9:	eb da                	jmp    c0017995 <ACPI::close(int, int, void*)+0x71>
c00179bb:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179c2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179c7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179cf:	ee                   	out    dx,al
c00179d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179d5:	83 c4 1c             	add    esp,0x1c
c00179d8:	c3                   	ret    

c00179d9 <findRSDP()>:
c00179d9:	83 ec 1c             	sub    esp,0x1c
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	68 d9 bd 02 c0       	push   0xc002bdd9
c00179e4:	e8 8e b4 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00179e9:	83 c4 10             	add    esp,0x10
c00179ec:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00179f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179f7:	83 e0 04             	and    eax,0x4
c00179fa:	84 c0                	test   al,al
c00179fc:	75 07                	jne    c0017a05 <findRSDP()+0x2c>
c00179fe:	b8 00 00 00 00       	mov    eax,0x0
c0017a03:	eb 6a                	jmp    c0017a6f <findRSDP()+0x96>
c0017a05:	a1 14 ef 02 c0       	mov    eax,ds:0xc002ef14
c0017a0a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a0f:	7f 1b                	jg     c0017a2c <findRSDP()+0x53>
c0017a11:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0017a16:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a1c:	83 e2 fb             	and    edx,0xfffffffb
c0017a1f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a25:	b8 00 00 00 00       	mov    eax,0x0
c0017a2a:	eb 43                	jmp    c0017a6f <findRSDP()+0x96>
c0017a2c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a34:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a3c:	77 2c                	ja     c0017a6a <findRSDP()+0x91>
c0017a3e:	83 ec 04             	sub    esp,0x4
c0017a41:	6a 08                	push   0x8
c0017a43:	68 e7 bd 02 c0       	push   0xc002bde7
c0017a48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a4c:	e8 17 8c fe ff       	call   c0000668 <memcmp>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	85 c0                	test   eax,eax
c0017a56:	0f 94 c0             	sete   al
c0017a59:	84 c0                	test   al,al
c0017a5b:	74 06                	je     c0017a63 <findRSDP()+0x8a>
c0017a5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a61:	eb 0c                	jmp    c0017a6f <findRSDP()+0x96>
c0017a63:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a68:	eb ca                	jmp    c0017a34 <findRSDP()+0x5b>
c0017a6a:	b8 00 00 00 00       	mov    eax,0x0
c0017a6f:	83 c4 1c             	add    esp,0x1c
c0017a72:	c3                   	ret    

c0017a73 <loadACPITables(unsigned char*)>:
c0017a73:	56                   	push   esi
c0017a74:	53                   	push   ebx
c0017a75:	83 ec 54             	sub    esp,0x54
c0017a78:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0017a7d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a83:	83 e0 04             	and    eax,0x4
c0017a86:	84 c0                	test   al,al
c0017a88:	0f 84 1e 02 00 00    	je     c0017cac <loadACPITables(unsigned char*)+0x239>
c0017a8e:	a0 a0 17 03 c0       	mov    al,ds:0xc00317a0
c0017a93:	84 c0                	test   al,al
c0017a95:	74 75                	je     c0017b0c <loadACPITables(unsigned char*)+0x99>
c0017a97:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017a9b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017a9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017aa3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aa6:	83 e8 24             	sub    eax,0x24
c0017aa9:	c1 e8 03             	shr    eax,0x3
c0017aac:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ab0:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017ab8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017abc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017ac0:	0f 8d b2 00 00 00    	jge    c0017b78 <loadACPITables(unsigned char*)+0x105>
c0017ac6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017aca:	83 c0 24             	add    eax,0x24
c0017acd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017ad1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ad5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ad9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017add:	c1 e0 03             	shl    eax,0x3
c0017ae0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017ae4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017aed:	89 c1                	mov    ecx,eax
c0017aef:	a1 8c 15 03 c0       	mov    eax,ds:0xc003158c
c0017af4:	8d 50 01             	lea    edx,[eax+0x1]
c0017af7:	89 15 8c 15 03 c0    	mov    DWORD PTR ds:0xc003158c,edx
c0017afd:	89 ca                	mov    edx,ecx
c0017aff:	89 14 c5 a4 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffcea5c],edx
c0017b06:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
c0017b0a:	eb ac                	jmp    c0017ab8 <loadACPITables(unsigned char*)+0x45>
c0017b0c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017b10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b1b:	83 e8 24             	sub    eax,0x24
c0017b1e:	c1 e8 02             	shr    eax,0x2
c0017b21:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b25:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017b2d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017b31:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017b35:	7d 41                	jge    c0017b78 <loadACPITables(unsigned char*)+0x105>
c0017b37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017b3b:	83 c0 24             	add    eax,0x24
c0017b3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b46:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017b4a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017b4e:	c1 e0 02             	shl    eax,0x2
c0017b51:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017b55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b59:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b5b:	a1 8c 15 03 c0       	mov    eax,ds:0xc003158c
c0017b60:	8d 50 01             	lea    edx,[eax+0x1]
c0017b63:	89 15 8c 15 03 c0    	mov    DWORD PTR ds:0xc003158c,edx
c0017b69:	89 ca                	mov    edx,ecx
c0017b6b:	89 14 c5 a4 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffcea5c],edx
c0017b72:	ff 44 24 48          	inc    DWORD PTR [esp+0x48]
c0017b76:	eb b5                	jmp    c0017b2d <loadACPITables(unsigned char*)+0xba>
c0017b78:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0017b80:	a1 8c 15 03 c0       	mov    eax,ds:0xc003158c
c0017b85:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
c0017b89:	0f 8d 1e 01 00 00    	jge    c0017cad <loadACPITables(unsigned char*)+0x23a>
c0017b8f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017b93:	8b 04 c5 a4 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcea5c]
c0017b9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ba2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017baa:	25 ff 0f 00 00       	and    eax,0xfff
c0017baf:	89 c6                	mov    esi,eax
c0017bb1:	8b 1d 50 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f050
c0017bb7:	83 ec 0c             	sub    esp,0xc
c0017bba:	6a 01                	push   0x1
c0017bbc:	e8 b0 9e ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c0017bc1:	83 c4 10             	add    esp,0x10
c0017bc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bc8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bce:	83 ec 0c             	sub    esp,0xc
c0017bd1:	6a 01                	push   0x1
c0017bd3:	6a 01                	push   0x1
c0017bd5:	50                   	push   eax
c0017bd6:	52                   	push   edx
c0017bd7:	53                   	push   ebx
c0017bd8:	e8 c1 a9 ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bdd:	83 c4 20             	add    esp,0x20
c0017be0:	09 f0                	or     eax,esi
c0017be2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017be6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017bea:	c1 e0 03             	shl    eax,0x3
c0017bed:	05 a0 15 03 c0       	add    eax,0xc00315a0
c0017bf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bfe:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c0017c06:	83 ec 04             	sub    esp,0x4
c0017c09:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0017c0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c15:	e8 96 91 fe ff       	call   c0000db0 <realmemcpy>
c0017c1a:	83 c4 10             	add    esp,0x10
c0017c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c2c:	05 00 10 00 00       	add    eax,0x1000
c0017c31:	c1 e8 0c             	shr    eax,0xc
c0017c34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c44:	25 ff 0f 00 00       	and    eax,0xfff
c0017c49:	89 c6                	mov    esi,eax
c0017c4b:	8b 1d 50 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f050
c0017c51:	83 ec 0c             	sub    esp,0xc
c0017c54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017c58:	e8 14 9e ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c0017c5d:	83 c4 10             	add    esp,0x10
c0017c60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c64:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c6a:	83 ec 0c             	sub    esp,0xc
c0017c6d:	6a 01                	push   0x1
c0017c6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c73:	50                   	push   eax
c0017c74:	52                   	push   edx
c0017c75:	53                   	push   ebx
c0017c76:	e8 23 a9 ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c7b:	83 c4 20             	add    esp,0x20
c0017c7e:	09 f0                	or     eax,esi
c0017c80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c88:	83 ec 0c             	sub    esp,0xc
c0017c8b:	50                   	push   eax
c0017c8c:	e8 a0 a2 ff ff       	call   c0011f31 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c91:	83 c4 10             	add    esp,0x10
c0017c94:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017c98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c9c:	89 14 c5 a4 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffcea5c],edx
c0017ca3:	ff 44 24 44          	inc    DWORD PTR [esp+0x44]
c0017ca7:	e9 d4 fe ff ff       	jmp    c0017b80 <loadACPITables(unsigned char*)+0x10d>
c0017cac:	90                   	nop
c0017cad:	83 c4 54             	add    esp,0x54
c0017cb0:	5b                   	pop    ebx
c0017cb1:	5e                   	pop    esi
c0017cb2:	c3                   	ret    

c0017cb3 <findRSDT(unsigned char*)>:
c0017cb3:	56                   	push   esi
c0017cb4:	53                   	push   ebx
c0017cb5:	83 ec 44             	sub    esp,0x44
c0017cb8:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0017cbd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cc3:	83 e0 04             	and    eax,0x4
c0017cc6:	84 c0                	test   al,al
c0017cc8:	75 0a                	jne    c0017cd4 <findRSDT(unsigned char*)+0x21>
c0017cca:	b8 00 00 00 00       	mov    eax,0x0
c0017ccf:	e9 0c 01 00 00       	jmp    c0017de0 <findRSDT(unsigned char*)+0x12d>
c0017cd4:	89 e0                	mov    eax,esp
c0017cd6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017cda:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017cde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ce2:	c7 44 24 24 24 00 00 00 	mov    DWORD PTR [esp+0x24],0x24
c0017cea:	83 ec 04             	sub    esp,0x4
c0017ced:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017cf1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017cf5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017cf9:	e8 b2 90 fe ff       	call   c0000db0 <realmemcpy>
c0017cfe:	83 c4 10             	add    esp,0x10
c0017d01:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d05:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017d09:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017d11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d29:	25 ff 0f 00 00       	and    eax,0xfff
c0017d2e:	89 c6                	mov    esi,eax
c0017d30:	8b 1d 50 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f050
c0017d36:	83 ec 0c             	sub    esp,0xc
c0017d39:	6a 02                	push   0x2
c0017d3b:	e8 31 9d ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017d47:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d4d:	83 ec 0c             	sub    esp,0xc
c0017d50:	6a 01                	push   0x1
c0017d52:	6a 02                	push   0x2
c0017d54:	50                   	push   eax
c0017d55:	52                   	push   edx
c0017d56:	53                   	push   ebx
c0017d57:	e8 42 a8 ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d5c:	83 c4 20             	add    esp,0x20
c0017d5f:	09 f0                	or     eax,esi
c0017d61:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d69:	25 ff 0f 00 00       	and    eax,0xfff
c0017d6e:	89 c6                	mov    esi,eax
c0017d70:	8b 1d 50 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f050
c0017d76:	83 ec 0c             	sub    esp,0xc
c0017d79:	6a 02                	push   0x2
c0017d7b:	e8 f1 9c ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c0017d80:	83 c4 10             	add    esp,0x10
c0017d83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d87:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d8d:	83 ec 0c             	sub    esp,0xc
c0017d90:	6a 01                	push   0x1
c0017d92:	6a 02                	push   0x2
c0017d94:	50                   	push   eax
c0017d95:	52                   	push   edx
c0017d96:	53                   	push   ebx
c0017d97:	e8 02 a8 ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d9c:	83 c4 20             	add    esp,0x20
c0017d9f:	09 f0                	or     eax,esi
c0017da1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017da5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017daa:	75 11                	jne    c0017dbd <findRSDT(unsigned char*)+0x10a>
c0017dac:	c6 05 a0 17 03 c0 00 	mov    BYTE PTR ds:0xc00317a0,0x0
c0017db3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017db7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017dbb:	eb 1f                	jmp    c0017ddc <findRSDT(unsigned char*)+0x129>
c0017dbd:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017dc2:	75 11                	jne    c0017dd5 <findRSDT(unsigned char*)+0x122>
c0017dc4:	c6 05 a0 17 03 c0 01 	mov    BYTE PTR ds:0xc00317a0,0x1
c0017dcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017dcf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017dd3:	eb 07                	jmp    c0017ddc <findRSDT(unsigned char*)+0x129>
c0017dd5:	b8 00 00 00 00       	mov    eax,0x0
c0017dda:	eb 04                	jmp    c0017de0 <findRSDT(unsigned char*)+0x12d>
c0017ddc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017de0:	83 c4 44             	add    esp,0x44
c0017de3:	5b                   	pop    ebx
c0017de4:	5e                   	pop    esi
c0017de5:	c3                   	ret    

c0017de6 <findDataTable(unsigned char*, char*)>:
c0017de6:	83 ec 1c             	sub    esp,0x1c
c0017de9:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0017dee:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017df4:	83 e0 04             	and    eax,0x4
c0017df7:	84 c0                	test   al,al
c0017df9:	75 07                	jne    c0017e02 <findDataTable(unsigned char*, char*)+0x1c>
c0017dfb:	b8 00 00 00 00       	mov    eax,0x0
c0017e00:	eb 7c                	jmp    c0017e7e <findDataTable(unsigned char*, char*)+0x98>
c0017e02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e0a:	a1 8c 15 03 c0       	mov    eax,ds:0xc003158c
c0017e0f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e13:	7d 3a                	jge    c0017e4f <findDataTable(unsigned char*, char*)+0x69>
c0017e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e19:	c1 e0 03             	shl    eax,0x3
c0017e1c:	05 a0 15 03 c0       	add    eax,0xc00315a0
c0017e21:	83 ec 04             	sub    esp,0x4
c0017e24:	6a 04                	push   0x4
c0017e26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e2a:	50                   	push   eax
c0017e2b:	e8 38 88 fe ff       	call   c0000668 <memcmp>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	85 c0                	test   eax,eax
c0017e35:	0f 94 c0             	sete   al
c0017e38:	84 c0                	test   al,al
c0017e3a:	74 0d                	je     c0017e49 <findDataTable(unsigned char*, char*)+0x63>
c0017e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e40:	8b 04 c5 a4 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcea5c]
c0017e47:	eb 35                	jmp    c0017e7e <findDataTable(unsigned char*, char*)+0x98>
c0017e49:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e4d:	eb bb                	jmp    c0017e0a <findDataTable(unsigned char*, char*)+0x24>
c0017e4f:	a0 a0 17 03 c0       	mov    al,ds:0xc00317a0
c0017e54:	84 c0                	test   al,al
c0017e56:	74 07                	je     c0017e5f <findDataTable(unsigned char*, char*)+0x79>
c0017e58:	b8 58 00 00 00       	mov    eax,0x58
c0017e5d:	eb 05                	jmp    c0017e64 <findDataTable(unsigned char*, char*)+0x7e>
c0017e5f:	b8 52 00 00 00       	mov    eax,0x52
c0017e64:	83 ec 04             	sub    esp,0x4
c0017e67:	50                   	push   eax
c0017e68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e6c:	68 64 bf 02 c0       	push   0xc002bf64
c0017e71:	e8 01 b0 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0017e76:	83 c4 10             	add    esp,0x10
c0017e79:	b8 00 00 00 00       	mov    eax,0x0
c0017e7e:	83 c4 1c             	add    esp,0x1c
c0017e81:	c3                   	ret    

c0017e82 <scanMADT()>:
c0017e82:	53                   	push   ebx
c0017e83:	83 ec 38             	sub    esp,0x38
c0017e86:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0017e8b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e91:	83 e0 04             	and    eax,0x4
c0017e94:	84 c0                	test   al,al
c0017e96:	0f 84 63 04 00 00    	je     c00182ff <scanMADT()+0x47d>
c0017e9c:	e8 38 fb ff ff       	call   c00179d9 <findRSDP()>
c0017ea1:	a3 ac 17 03 c0       	mov    ds:0xc00317ac,eax
c0017ea6:	a1 ac 17 03 c0       	mov    eax,ds:0xc00317ac
c0017eab:	85 c0                	test   eax,eax
c0017ead:	75 19                	jne    c0017ec8 <scanMADT()+0x46>
c0017eaf:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0017eb4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017eba:	83 e2 fb             	and    edx,0xfffffffb
c0017ebd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ec3:	e9 3b 04 00 00       	jmp    c0018303 <scanMADT()+0x481>
c0017ec8:	a1 ac 17 03 c0       	mov    eax,ds:0xc00317ac
c0017ecd:	83 ec 0c             	sub    esp,0xc
c0017ed0:	50                   	push   eax
c0017ed1:	e8 dd fd ff ff       	call   c0017cb3 <findRSDT(unsigned char*)>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	a3 a8 17 03 c0       	mov    ds:0xc00317a8,eax
c0017ede:	a1 a8 17 03 c0       	mov    eax,ds:0xc00317a8
c0017ee3:	85 c0                	test   eax,eax
c0017ee5:	75 19                	jne    c0017f00 <scanMADT()+0x7e>
c0017ee7:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0017eec:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ef2:	83 e2 fb             	and    edx,0xfffffffb
c0017ef5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017efb:	e9 03 04 00 00       	jmp    c0018303 <scanMADT()+0x481>
c0017f00:	a1 a8 17 03 c0       	mov    eax,ds:0xc00317a8
c0017f05:	83 ec 0c             	sub    esp,0xc
c0017f08:	50                   	push   eax
c0017f09:	e8 65 fb ff ff       	call   c0017a73 <loadACPITables(unsigned char*)>
c0017f0e:	83 c4 10             	add    esp,0x10
c0017f11:	a1 a8 17 03 c0       	mov    eax,ds:0xc00317a8
c0017f16:	83 ec 08             	sub    esp,0x8
c0017f19:	68 f0 bd 02 c0       	push   0xc002bdf0
c0017f1e:	50                   	push   eax
c0017f1f:	e8 c2 fe ff ff       	call   c0017de6 <findDataTable(unsigned char*, char*)>
c0017f24:	83 c4 10             	add    esp,0x10
c0017f27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f2b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f30:	75 19                	jne    c0017f4b <scanMADT()+0xc9>
c0017f32:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0017f37:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f3d:	83 e2 fe             	and    edx,0xfffffffe
c0017f40:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f46:	e9 b8 03 00 00       	jmp    c0018303 <scanMADT()+0x481>
c0017f4b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f5a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f5e:	0f 87 9f 03 00 00    	ja     c0018303 <scanMADT()+0x481>
c0017f64:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f6c:	0f 87 91 03 00 00    	ja     c0018303 <scanMADT()+0x481>
c0017f72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f76:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f89:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f8d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f95:	8d 50 01             	lea    edx,[eax+0x1]
c0017f98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fa4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017fa8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017fad:	0f 86 4f 03 00 00    	jbe    c0018302 <scanMADT()+0x480>
c0017fb3:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017fb8:	75 57                	jne    c0018011 <scanMADT()+0x18f>
c0017fba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbe:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fc5:	8a 15 a0 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319a0
c0017fcb:	0f b6 d2             	movzx  edx,dl
c0017fce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fd2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fd6:	88 82 e0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce620],al
c0017fdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fe7:	8a 15 a0 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319a0
c0017fed:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ff0:	88 0d a0 19 03 c0    	mov    BYTE PTR ds:0xc00319a0,cl
c0017ff6:	0f b6 d2             	movzx  edx,dl
c0017ff9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ffd:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018001:	88 82 c0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce640],al
c0018007:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001800c:	e9 da 02 00 00       	jmp    c00182eb <scanMADT()+0x469>
c0018011:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0018016:	0f 85 14 01 00 00    	jne    c0018130 <scanMADT()+0x2ae>
c001801c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018020:	8d 50 01             	lea    edx,[eax+0x1]
c0018023:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018027:	8a 15 60 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031860
c001802d:	0f b6 d2             	movzx  edx,dl
c0018030:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018034:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018038:	88 82 80 18 03 c0    	mov    BYTE PTR [edx-0x3ffce780],al
c001803e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018042:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018046:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804a:	01 d0                	add    eax,edx
c001804c:	83 c0 2c             	add    eax,0x2c
c001804f:	8a 00                	mov    al,BYTE PTR [eax]
c0018051:	0f b6 d0             	movzx  edx,al
c0018054:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018058:	8d 48 01             	lea    ecx,[eax+0x1]
c001805b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001805f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018063:	0f b6 c0             	movzx  eax,al
c0018066:	c1 e0 08             	shl    eax,0x8
c0018069:	89 d1                	mov    ecx,edx
c001806b:	09 c1                	or     ecx,eax
c001806d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018071:	8d 50 02             	lea    edx,[eax+0x2]
c0018074:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018078:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001807c:	0f b6 c0             	movzx  eax,al
c001807f:	c1 e0 10             	shl    eax,0x10
c0018082:	09 c1                	or     ecx,eax
c0018084:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018088:	8d 50 03             	lea    edx,[eax+0x3]
c001808b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001808f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018093:	0f b6 c0             	movzx  eax,al
c0018096:	c1 e0 18             	shl    eax,0x18
c0018099:	09 c1                	or     ecx,eax
c001809b:	89 ca                	mov    edx,ecx
c001809d:	a0 60 18 03 c0       	mov    al,ds:0xc0031860
c00180a2:	0f b6 c0             	movzx  eax,al
c00180a5:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c00180ac:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b9:	01 d0                	add    eax,edx
c00180bb:	83 c0 2c             	add    eax,0x2c
c00180be:	8a 00                	mov    al,BYTE PTR [eax]
c00180c0:	0f b6 d0             	movzx  edx,al
c00180c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00180ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180d2:	0f b6 c0             	movzx  eax,al
c00180d5:	c1 e0 08             	shl    eax,0x8
c00180d8:	89 d1                	mov    ecx,edx
c00180da:	09 c1                	or     ecx,eax
c00180dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e0:	8d 50 02             	lea    edx,[eax+0x2]
c00180e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180e7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180eb:	0f b6 c0             	movzx  eax,al
c00180ee:	c1 e0 10             	shl    eax,0x10
c00180f1:	09 c1                	or     ecx,eax
c00180f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f7:	8d 50 03             	lea    edx,[eax+0x3]
c00180fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018102:	0f b6 c0             	movzx  eax,al
c0018105:	c1 e0 18             	shl    eax,0x18
c0018108:	09 c1                	or     ecx,eax
c001810a:	89 ca                	mov    edx,ecx
c001810c:	a0 60 18 03 c0       	mov    al,ds:0xc0031860
c0018111:	0f b6 c0             	movzx  eax,al
c0018114:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c001811b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018120:	a0 60 18 03 c0       	mov    al,ds:0xc0031860
c0018125:	40                   	inc    eax
c0018126:	a2 60 18 03 c0       	mov    ds:0xc0031860,al
c001812b:	e9 bb 01 00 00       	jmp    c00182eb <scanMADT()+0x469>
c0018130:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018135:	0f 85 e9 00 00 00    	jne    c0018224 <scanMADT()+0x3a2>
c001813b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813f:	8d 50 01             	lea    edx,[eax+0x1]
c0018142:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018146:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001814a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001814e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018152:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018156:	8d 50 01             	lea    edx,[eax+0x1]
c0018159:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001815d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018161:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018165:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018169:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018171:	01 d0                	add    eax,edx
c0018173:	83 c0 2c             	add    eax,0x2c
c0018176:	8a 00                	mov    al,BYTE PTR [eax]
c0018178:	0f b6 d0             	movzx  edx,al
c001817b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001817f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018182:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018186:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001818a:	0f b6 c0             	movzx  eax,al
c001818d:	c1 e0 08             	shl    eax,0x8
c0018190:	89 d1                	mov    ecx,edx
c0018192:	09 c1                	or     ecx,eax
c0018194:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018198:	8d 50 02             	lea    edx,[eax+0x2]
c001819b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001819f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181a3:	0f b6 c0             	movzx  eax,al
c00181a6:	c1 e0 10             	shl    eax,0x10
c00181a9:	09 c1                	or     ecx,eax
c00181ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181af:	8d 50 03             	lea    edx,[eax+0x3]
c00181b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181ba:	0f b6 c0             	movzx  eax,al
c00181bd:	c1 e0 18             	shl    eax,0x18
c00181c0:	09 c8                	or     eax,ecx
c00181c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181c6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d3:	01 d0                	add    eax,edx
c00181d5:	83 c0 2c             	add    eax,0x2c
c00181d8:	8a 00                	mov    al,BYTE PTR [eax]
c00181da:	0f b6 c0             	movzx  eax,al
c00181dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181e1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181e8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181ec:	0f b6 d2             	movzx  edx,dl
c00181ef:	c1 e2 08             	shl    edx,0x8
c00181f2:	09 d0                	or     eax,edx
c00181f4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181f9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181fe:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018203:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018207:	88 90 20 e1 02 c0    	mov    BYTE PTR [eax-0x3ffd1ee0],dl
c001820d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018212:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018217:	66 89 84 12 40 18 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce7c0],ax
c001821f:	e9 c7 00 00 00       	jmp    c00182eb <scanMADT()+0x469>
c0018224:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018229:	0f 85 b0 00 00 00    	jne    c00182df <scanMADT()+0x45d>
c001822f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018233:	8d 50 01             	lea    edx,[eax+0x1]
c0018236:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001823a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001823e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018242:	0f b6 c0             	movzx  eax,al
c0018245:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018249:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001824d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018251:	01 d0                	add    eax,edx
c0018253:	83 c0 2c             	add    eax,0x2c
c0018256:	8a 00                	mov    al,BYTE PTR [eax]
c0018258:	0f b6 d0             	movzx  edx,al
c001825b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001825f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018262:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018266:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001826a:	0f b6 c0             	movzx  eax,al
c001826d:	c1 e0 08             	shl    eax,0x8
c0018270:	09 d0                	or     eax,edx
c0018272:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018276:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001827b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001827f:	8d 50 01             	lea    edx,[eax+0x1]
c0018282:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018286:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001828a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001828e:	0f b6 c0             	movzx  eax,al
c0018291:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018299:	c1 e0 08             	shl    eax,0x8
c001829c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00182a0:	89 c1                	mov    ecx,eax
c00182a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182a6:	c1 e0 18             	shl    eax,0x18
c00182a9:	89 c3                	mov    ebx,eax
c00182ab:	a1 b0 17 03 c0       	mov    eax,ds:0xc00317b0
c00182b0:	8d 50 01             	lea    edx,[eax+0x1]
c00182b3:	89 15 b0 17 03 c0    	mov    DWORD PTR ds:0xc00317b0,edx
c00182b9:	09 d9                	or     ecx,ebx
c00182bb:	89 ca                	mov    edx,ecx
c00182bd:	89 14 85 c0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce840],edx
c00182c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182d0:	68 94 bf 02 c0       	push   0xc002bf94
c00182d5:	e8 9d ab ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00182da:	83 c4 10             	add    esp,0x10
c00182dd:	eb 0c                	jmp    c00182eb <scanMADT()+0x469>
c00182df:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182e4:	75 05                	jne    c00182eb <scanMADT()+0x469>
c00182e6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182eb:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182f4:	01 d0                	add    eax,edx
c00182f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182fa:	e9 54 fc ff ff       	jmp    c0017f53 <scanMADT()+0xd1>
c00182ff:	90                   	nop
c0018300:	eb 01                	jmp    c0018303 <scanMADT()+0x481>
c0018302:	90                   	nop
c0018303:	83 c4 38             	add    esp,0x38
c0018306:	5b                   	pop    ebx
c0018307:	c3                   	ret    

c0018308 <ACPI::ACPI()>:
c0018308:	83 ec 0c             	sub    esp,0xc
c001830b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001830f:	83 ec 08             	sub    esp,0x8
c0018312:	68 f5 bd 02 c0       	push   0xc002bdf5
c0018317:	50                   	push   eax
c0018318:	e8 7f c1 ff ff       	call   c001449c <Device::Device(char const*)>
c001831d:	83 c4 10             	add    esp,0x10
c0018320:	ba 30 c0 02 c0       	mov    edx,0xc002c030
c0018325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018329:	89 10                	mov    DWORD PTR [eax],edx
c001832b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001832f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001833a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018348:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018356:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001835d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018361:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018368:	e8 15 fb ff ff       	call   c0017e82 <scanMADT()>
c001836d:	90                   	nop
c001836e:	83 c4 0c             	add    esp,0xc
c0018371:	c3                   	ret    

c0018372 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018372:	83 ec 2c             	sub    esp,0x2c
c0018375:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018379:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001837d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018381:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018385:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001838a:	88 d0                	mov    al,dl
c001838c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018390:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018395:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001839d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183a1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183a7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00183ab:	0f 8d 97 00 00 00    	jge    c0018448 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00183b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183b9:	83 c2 2a             	add    edx,0x2a
c00183bc:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183c0:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183c5:	75 78                	jne    c001843f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183cf:	83 c2 2a             	add    edx,0x2a
c00183d2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183d6:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183da:	75 63                	jne    c001843f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183dc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183e1:	74 3a                	je     c001841d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183eb:	83 c2 2a             	add    edx,0x2a
c00183ee:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183f9:	39 c2                	cmp    edx,eax
c00183fb:	74 10                	je     c001840d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183fd:	83 ec 0c             	sub    esp,0xc
c0018400:	68 d0 bf 02 c0       	push   0xc002bfd0
c0018405:	e8 5b 24 00 00       	call   c001a865 <Krnl::panic(char const*)>
c001840a:	83 c4 10             	add    esp,0x10
c001840d:	83 ec 0c             	sub    esp,0xc
c0018410:	68 fa bd 02 c0       	push   0xc002bdfa
c0018415:	e8 4b 24 00 00       	call   c001a865 <Krnl::panic(char const*)>
c001841a:	83 c4 10             	add    esp,0x10
c001841d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018421:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018425:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018429:	83 c2 2a             	add    edx,0x2a
c001842c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018430:	8b 02                	mov    eax,DWORD PTR [edx]
c0018432:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018435:	89 01                	mov    DWORD PTR [ecx],eax
c0018437:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001843a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001843f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018443:	e9 55 ff ff ff       	jmp    c001839d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018448:	90                   	nop
c0018449:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844d:	83 c4 2c             	add    esp,0x2c
c0018450:	c2 04 00             	ret    0x4
c0018453:	90                   	nop

c0018454 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018454:	83 ec 1c             	sub    esp,0x1c
c0018457:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001845b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001845f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018463:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018468:	88 c8                	mov    al,cl
c001846a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001846e:	88 d0                	mov    al,dl
c0018470:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018478:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001847e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018482:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018485:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018489:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001848d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018491:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018497:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001849b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001849e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184a2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00184a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ab:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184b1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00184b5:	8d 48 01             	lea    ecx,[eax+0x1]
c00184b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184bc:	83 c2 2a             	add    edx,0x2a
c00184bf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184d4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184d8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184e0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184e6:	8d 50 01             	lea    edx,[eax+0x1]
c00184e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ed:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184fd:	3d 00 02 00 00       	cmp    eax,0x200
c0018502:	75 10                	jne    c0018514 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018504:	83 ec 0c             	sub    esp,0xc
c0018507:	68 09 be 02 c0       	push   0xc002be09
c001850c:	e8 54 23 00 00       	call   c001a865 <Krnl::panic(char const*)>
c0018511:	83 c4 10             	add    esp,0x10
c0018514:	90                   	nop
c0018515:	83 c4 1c             	add    esp,0x1c
c0018518:	c3                   	ret    
c0018519:	90                   	nop

c001851a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001851a:	b8 00 00 00 00       	mov    eax,0x0
c001851f:	c3                   	ret    

c0018520 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018520:	83 ec 1c             	sub    esp,0x1c
c0018523:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018527:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001852a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001852e:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0018533:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018538:	83 ec 08             	sub    esp,0x8
c001853b:	52                   	push   edx
c001853c:	50                   	push   eax
c001853d:	e8 94 69 ff ff       	call   c000eed6 <Computer::readCMOS(unsigned char)>
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018549:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001854e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018553:	83 ec 04             	sub    esp,0x4
c0018556:	6a 01                	push   0x1
c0018558:	52                   	push   edx
c0018559:	50                   	push   eax
c001855a:	e8 8d 6a ff ff       	call   c000efec <Computer::writeCMOS(unsigned char, unsigned char)>
c001855f:	83 c4 10             	add    esp,0x10
c0018562:	90                   	nop
c0018563:	83 c4 1c             	add    esp,0x1c
c0018566:	c3                   	ret    
c0018567:	90                   	nop

c0018568 <ACPI::sleep()>:
c0018568:	83 ec 0c             	sub    esp,0xc
c001856b:	a1 80 15 03 c0       	mov    eax,ds:0xc0031580
c0018570:	85 c0                	test   eax,eax
c0018572:	74 07                	je     c001857b <ACPI::sleep()+0x13>
c0018574:	a1 80 15 03 c0       	mov    eax,ds:0xc0031580
c0018579:	ff d0                	call   eax
c001857b:	90                   	nop
c001857c:	83 c4 0c             	add    esp,0xc
c001857f:	c3                   	ret    

c0018580 <ACPI::open(int, int, void*)>:
c0018580:	57                   	push   edi
c0018581:	56                   	push   esi
c0018582:	53                   	push   ebx
c0018583:	83 ec 60             	sub    esp,0x60
c0018586:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001858a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018591:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018595:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001859c:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c00185a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185a7:	83 e0 04             	and    eax,0x4
c00185aa:	84 c0                	test   al,al
c00185ac:	74 47                	je     c00185f5 <ACPI::open(int, int, void*)+0x75>
c00185ae:	a1 a8 17 03 c0       	mov    eax,ds:0xc00317a8
c00185b3:	83 ec 08             	sub    esp,0x8
c00185b6:	68 26 be 02 c0       	push   0xc002be26
c00185bb:	50                   	push   eax
c00185bc:	e8 25 f8 ff ff       	call   c0017de6 <findDataTable(unsigned char*, char*)>
c00185c1:	83 c4 10             	add    esp,0x10
c00185c4:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00185c8:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c00185cd:	74 26                	je     c00185f5 <ACPI::open(int, int, void*)+0x75>
c00185cf:	83 ec 0c             	sub    esp,0xc
c00185d2:	68 2b be 02 c0       	push   0xc002be2b
c00185d7:	e8 9b a8 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185e3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185ee:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185f5:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c00185fd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018601:	8a 00                	mov    al,BYTE PTR [eax]
c0018603:	3c 01                	cmp    al,0x1
c0018605:	75 28                	jne    c001862f <ACPI::open(int, int, void*)+0xaf>
c0018607:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001860b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018612:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018616:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001861d:	83 ec 0c             	sub    esp,0xc
c0018620:	68 3c be 02 c0       	push   0xc002be3c
c0018625:	e8 4d a8 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	eb 25                	jmp    c0018654 <ACPI::open(int, int, void*)+0xd4>
c001862f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018633:	8a 00                	mov    al,BYTE PTR [eax]
c0018635:	3c 02                	cmp    al,0x2
c0018637:	75 1b                	jne    c0018654 <ACPI::open(int, int, void*)+0xd4>
c0018639:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001863d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018644:	83 ec 0c             	sub    esp,0xc
c0018647:	68 44 be 02 c0       	push   0xc002be44
c001864c:	e8 26 a8 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0018651:	83 c4 10             	add    esp,0x10
c0018654:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018658:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001865e:	83 f0 01             	xor    eax,0x1
c0018661:	84 c0                	test   al,al
c0018663:	74 6a                	je     c00186cf <ACPI::open(int, int, void*)+0x14f>
c0018665:	83 ec 0c             	sub    esp,0xc
c0018668:	68 4c be 02 c0       	push   0xc002be4c
c001866d:	e8 05 a8 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0018672:	83 c4 10             	add    esp,0x10
c0018675:	e8 d6 7a fe ff       	call   c0000150 <manualPCIProbe>
c001867a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001867e:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c0018683:	75 28                	jne    c00186ad <ACPI::open(int, int, void*)+0x12d>
c0018685:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018689:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018690:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018694:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001869b:	83 ec 0c             	sub    esp,0xc
c001869e:	68 5a be 02 c0       	push   0xc002be5a
c00186a3:	e8 cf a7 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00186a8:	83 c4 10             	add    esp,0x10
c00186ab:	eb 22                	jmp    c00186cf <ACPI::open(int, int, void*)+0x14f>
c00186ad:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00186b2:	75 1b                	jne    c00186cf <ACPI::open(int, int, void*)+0x14f>
c00186b4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186b8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186bf:	83 ec 0c             	sub    esp,0xc
c00186c2:	68 64 be 02 c0       	push   0xc002be64
c00186c7:	e8 ab a7 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00186cc:	83 c4 10             	add    esp,0x10
c00186cf:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186d3:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186d9:	84 c0                	test   al,al
c00186db:	74 13                	je     c00186f0 <ACPI::open(int, int, void*)+0x170>
c00186dd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186e1:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00186e7:	83 f0 01             	xor    eax,0x1
c00186ea:	0f b6 c0             	movzx  eax,al
c00186ed:	40                   	inc    eax
c00186ee:	eb 05                	jmp    c00186f5 <ACPI::open(int, int, void*)+0x175>
c00186f0:	b8 00 00 00 00       	mov    eax,0x0
c00186f5:	83 ec 08             	sub    esp,0x8
c00186f8:	50                   	push   eax
c00186f9:	68 6e be 02 c0       	push   0xc002be6e
c00186fe:	e8 74 a7 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001870a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018710:	84 c0                	test   al,al
c0018712:	74 67                	je     c001877b <ACPI::open(int, int, void*)+0x1fb>
c0018714:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c001871c:	83 ec 0c             	sub    esp,0xc
c001871f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018723:	e8 98 71 ff ff       	call   c000f8c0 <malloc>
c0018728:	83 c4 10             	add    esp,0x10
c001872b:	89 c3                	mov    ebx,eax
c001872d:	83 ec 0c             	sub    esp,0xc
c0018730:	53                   	push   ebx
c0018731:	e8 54 a9 00 00       	call   c002308a <PCI::PCI()>
c0018736:	83 c4 10             	add    esp,0x10
c0018739:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c001873d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018741:	83 ec 08             	sub    esp,0x8
c0018744:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0018748:	50                   	push   eax
c0018749:	e8 5e bb ff ff       	call   c00142ac <Device::addChild(Device*)>
c001874e:	83 c4 10             	add    esp,0x10
c0018751:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018755:	8b 00                	mov    eax,DWORD PTR [eax]
c0018757:	83 c0 08             	add    eax,0x8
c001875a:	8b 00                	mov    eax,DWORD PTR [eax]
c001875c:	6a 00                	push   0x0
c001875e:	6a 00                	push   0x0
c0018760:	6a 00                	push   0x0
c0018762:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018766:	ff d0                	call   eax
c0018768:	83 c4 10             	add    esp,0x10
c001876b:	83 ec 0c             	sub    esp,0xc
c001876e:	68 77 be 02 c0       	push   0xc002be77
c0018773:	e8 ff a6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0018778:	83 c4 10             	add    esp,0x10
c001877b:	83 ec 0c             	sub    esp,0xc
c001877e:	68 82 be 02 c0       	push   0xc002be82
c0018783:	e8 0d 49 00 00       	call   c001d095 <Thr::loadKernelSymbolTable(char const*)>
c0018788:	83 c4 10             	add    esp,0x10
c001878b:	83 ec 0c             	sub    esp,0xc
c001878e:	6a 0c                	push   0xc
c0018790:	e8 1b 95 ff ff       	call   c0011cb0 <Virt::setupPageSwapping(int)>
c0018795:	83 c4 10             	add    esp,0x10
c0018798:	8d 44 24 28          	lea    eax,[esp+0x28]
c001879c:	83 ec 08             	sub    esp,0x8
c001879f:	6a 12                	push   0x12
c00187a1:	50                   	push   eax
c00187a2:	e8 75 be ff ff       	call   c001461c <getDevicesOfType(DeviceType)>
c00187a7:	83 c4 0c             	add    esp,0xc
c00187aa:	83 ec 0c             	sub    esp,0xc
c00187ad:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187b1:	50                   	push   eax
c00187b2:	e8 f9 0c 01 00       	call   c00294b0 <LinkedList<Device>::isEmpty()>
c00187b7:	83 c4 10             	add    esp,0x10
c00187ba:	83 f0 01             	xor    eax,0x1
c00187bd:	84 c0                	test   al,al
c00187bf:	0f 84 fd 00 00 00    	je     c00188c2 <ACPI::open(int, int, void*)+0x342>
c00187c5:	83 ec 0c             	sub    esp,0xc
c00187c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187cc:	50                   	push   eax
c00187cd:	e8 fa 0c 01 00       	call   c00294cc <LinkedList<Device>::getFirstElement()>
c00187d2:	83 c4 10             	add    esp,0x10
c00187d5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00187d9:	83 ec 0c             	sub    esp,0xc
c00187dc:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187e0:	50                   	push   eax
c00187e1:	e8 ee 0c 01 00       	call   c00294d4 <LinkedList<Device>::removeFirst()>
c00187e6:	83 c4 10             	add    esp,0x10
c00187e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00187ed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00187f1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00187f5:	83 ec 0c             	sub    esp,0xc
c00187f8:	50                   	push   eax
c00187f9:	e8 9a bd ff ff       	call   c0014598 <Device::getName()>
c00187fe:	83 c4 10             	add    esp,0x10
c0018801:	83 ec 08             	sub    esp,0x8
c0018804:	50                   	push   eax
c0018805:	68 00 c0 02 c0       	push   0xc002c000
c001880a:	e8 68 a6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001880f:	83 c4 10             	add    esp,0x10
c0018812:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018816:	8d 44 24 04          	lea    eax,[esp+0x4]
c001881a:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018820:	ba 09 00 00 00       	mov    edx,0x9
c0018825:	fc                   	cld    
c0018826:	89 c7                	mov    edi,eax
c0018828:	89 de                	mov    esi,ebx
c001882a:	89 d1                	mov    ecx,edx
c001882c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001882e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018832:	0f b6 c0             	movzx  eax,al
c0018835:	83 ec 08             	sub    esp,0x8
c0018838:	50                   	push   eax
c0018839:	68 a0 be 02 c0       	push   0xc002bea0
c001883e:	e8 34 a6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0018843:	83 c4 10             	add    esp,0x10
c0018846:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001884a:	0f b6 c0             	movzx  eax,al
c001884d:	83 ec 08             	sub    esp,0x8
c0018850:	50                   	push   eax
c0018851:	68 b2 be 02 c0       	push   0xc002beb2
c0018856:	e8 1c a6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001885b:	83 c4 10             	add    esp,0x10
c001885e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0018863:	0f b7 c0             	movzx  eax,ax
c0018866:	83 ec 08             	sub    esp,0x8
c0018869:	50                   	push   eax
c001886a:	68 c4 be 02 c0       	push   0xc002bec4
c001886f:	e8 03 a6 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0018874:	83 c4 10             	add    esp,0x10
c0018877:	83 ec 0c             	sub    esp,0xc
c001887a:	83 ec 24             	sub    esp,0x24
c001887d:	89 e0                	mov    eax,esp
c001887f:	89 c3                	mov    ebx,eax
c0018881:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018885:	ba 09 00 00 00       	mov    edx,0x9
c001888a:	89 df                	mov    edi,ebx
c001888c:	89 c6                	mov    esi,eax
c001888e:	89 d1                	mov    ecx,edx
c0018890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018892:	e8 55 ab 00 00       	call   c00233ec <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c0018897:	83 c4 30             	add    esp,0x30
c001889a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001889e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00188a3:	0f 84 01 ff ff ff    	je     c00187aa <ACPI::open(int, int, void*)+0x22a>
c00188a9:	83 ec 08             	sub    esp,0x8
c00188ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188b0:	68 d6 be 02 c0       	push   0xc002bed6
c00188b5:	e8 bd a5 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00188ba:	83 c4 10             	add    esp,0x10
c00188bd:	e9 e8 fe ff ff       	jmp    c00187aa <ACPI::open(int, int, void*)+0x22a>
c00188c2:	83 ec 0c             	sub    esp,0xc
c00188c5:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188c9:	50                   	push   eax
c00188ca:	e8 df 0b 01 00       	call   c00294ae <LinkedList<Device>::~LinkedList()>
c00188cf:	83 c4 10             	add    esp,0x10
c00188d2:	8b 1d c8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eec8
c00188d8:	83 ec 08             	sub    esp,0x8
c00188db:	6a 01                	push   0x1
c00188dd:	68 e2 be 02 c0       	push   0xc002bee2
c00188e2:	e8 25 52 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c00188e7:	83 c4 10             	add    esp,0x10
c00188ea:	83 ec 08             	sub    esp,0x8
c00188ed:	53                   	push   ebx
c00188ee:	50                   	push   eax
c00188ef:	e8 43 54 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c00188f4:	83 c4 10             	add    esp,0x10
c00188f7:	8b 1d c8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eec8
c00188fd:	83 ec 08             	sub    esp,0x8
c0018900:	6a 01                	push   0x1
c0018902:	68 ff be 02 c0       	push   0xc002beff
c0018907:	e8 00 52 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c001890c:	83 c4 10             	add    esp,0x10
c001890f:	83 ec 08             	sub    esp,0x8
c0018912:	53                   	push   ebx
c0018913:	50                   	push   eax
c0018914:	e8 1e 54 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c0018919:	83 c4 10             	add    esp,0x10
c001891c:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0018921:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018927:	83 e0 04             	and    eax,0x4
c001892a:	84 c0                	test   al,al
c001892c:	0f 84 d3 00 00 00    	je     c0018a05 <ACPI::open(int, int, void*)+0x485>
c0018932:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c001893a:	83 ec 0c             	sub    esp,0xc
c001893d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018941:	e8 7a 6f ff ff       	call   c000f8c0 <malloc>
c0018946:	83 c4 10             	add    esp,0x10
c0018949:	89 c3                	mov    ebx,eax
c001894b:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c0018950:	83 ec 04             	sub    esp,0x4
c0018953:	50                   	push   eax
c0018954:	68 1c bf 02 c0       	push   0xc002bf1c
c0018959:	53                   	push   ebx
c001895a:	e8 77 aa ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001895f:	83 c4 10             	add    esp,0x10
c0018962:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0018966:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001896b:	74 17                	je     c0018984 <ACPI::open(int, int, void*)+0x404>
c001896d:	83 ec 0c             	sub    esp,0xc
c0018970:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018974:	e8 2f ad ff ff       	call   c00136a8 <File::exists()>
c0018979:	83 c4 10             	add    esp,0x10
c001897c:	84 c0                	test   al,al
c001897e:	74 04                	je     c0018984 <ACPI::open(int, int, void*)+0x404>
c0018980:	b0 01                	mov    al,0x1
c0018982:	eb 02                	jmp    c0018986 <ACPI::open(int, int, void*)+0x406>
c0018984:	b0 00                	mov    al,0x0
c0018986:	84 c0                	test   al,al
c0018988:	74 22                	je     c00189ac <ACPI::open(int, int, void*)+0x42c>
c001898a:	83 ec 08             	sub    esp,0x8
c001898d:	6a 01                	push   0x1
c001898f:	68 1c bf 02 c0       	push   0xc002bf1c
c0018994:	e8 73 51 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c0018999:	83 c4 10             	add    esp,0x10
c001899c:	83 ec 08             	sub    esp,0x8
c001899f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00189a3:	50                   	push   eax
c00189a4:	e8 8e 53 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c00189a9:	83 c4 10             	add    esp,0x10
c00189ac:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189b1:	74 1e                	je     c00189d1 <ACPI::open(int, int, void*)+0x451>
c00189b3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189b8:	74 17                	je     c00189d1 <ACPI::open(int, int, void*)+0x451>
c00189ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00189be:	8b 00                	mov    eax,DWORD PTR [eax]
c00189c0:	83 c0 08             	add    eax,0x8
c00189c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00189c5:	83 ec 0c             	sub    esp,0xc
c00189c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189cc:	ff d0                	call   eax
c00189ce:	83 c4 10             	add    esp,0x10
c00189d1:	a1 a8 17 03 c0       	mov    eax,ds:0xc00317a8
c00189d6:	83 ec 08             	sub    esp,0x8
c00189d9:	68 39 bf 02 c0       	push   0xc002bf39
c00189de:	50                   	push   eax
c00189df:	e8 02 f4 ff ff       	call   c0017de6 <findDataTable(unsigned char*, char*)>
c00189e4:	83 c4 10             	add    esp,0x10
c00189e7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00189eb:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00189f0:	74 13                	je     c0018a05 <ACPI::open(int, int, void*)+0x485>
c00189f2:	83 ec 08             	sub    esp,0x8
c00189f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00189f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00189fd:	e8 1e fb ff ff       	call   c0018520 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a02:	83 c4 10             	add    esp,0x10
c0018a05:	b8 00 00 00 00       	mov    eax,0x0
c0018a0a:	83 c4 60             	add    esp,0x60
c0018a0d:	5b                   	pop    ebx
c0018a0e:	5e                   	pop    esi
c0018a0f:	5f                   	pop    edi
c0018a10:	c3                   	ret    
c0018a11:	90                   	nop

c0018a12 <CPU::close(int, int, void*)>:
c0018a12:	31 c0                	xor    eax,eax
c0018a14:	c3                   	ret    
c0018a15:	90                   	nop

c0018a16 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a16:	55                   	push   ebp
c0018a17:	57                   	push   edi
c0018a18:	56                   	push   esi
c0018a19:	53                   	push   ebx
c0018a1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a22:	89 ce                	mov    esi,ecx
c0018a24:	89 d5                	mov    ebp,edx
c0018a26:	80 f9 04             	cmp    cl,0x4
c0018a29:	75 28                	jne    c0018a53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a2b:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a2e:	3c 03                	cmp    al,0x3
c0018a30:	0f 86 63 01 00 00    	jbe    c0018b99 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a36:	80 fa 03             	cmp    dl,0x3
c0018a39:	0f 84 5a 01 00 00    	je     c0018b99 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a3f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a42:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018a47:	89 fb                	mov    ebx,edi
c0018a49:	80 fb 01             	cmp    bl,0x1
c0018a4c:	77 4e                	ja     c0018a9c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a4e:	e9 52 01 00 00       	jmp    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a53:	80 f9 05             	cmp    cl,0x5
c0018a56:	75 4d                	jne    c0018aa5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a58:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018a5d:	80 fa 03             	cmp    dl,0x3
c0018a60:	0f 86 3f 01 00 00    	jbe    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a66:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a69:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018a6e:	89 fb                	mov    ebx,edi
c0018a70:	80 fb 01             	cmp    bl,0x1
c0018a73:	0f 86 2c 01 00 00    	jbe    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a79:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018a7e:	80 fa 08             	cmp    dl,0x8
c0018a81:	0f 84 1e 01 00 00    	je     c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a87:	89 d7                	mov    edi,edx
c0018a89:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018a8e:	83 e7 fb             	and    edi,0xfffffffb
c0018a91:	89 fb                	mov    ebx,edi
c0018a93:	80 fb 09             	cmp    bl,0x9
c0018a96:	0f 84 09 01 00 00    	je     c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a9c:	31 c0                	xor    eax,eax
c0018a9e:	89 eb                	mov    ebx,ebp
c0018aa0:	0f b6 fb             	movzx  edi,bl
c0018aa3:	eb 30                	jmp    c0018ad5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018aa5:	31 c0                	xor    eax,eax
c0018aa7:	80 f9 06             	cmp    cl,0x6
c0018aaa:	75 f2                	jne    c0018a9e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018aac:	80 fa 0a             	cmp    dl,0xa
c0018aaf:	77 ed                	ja     c0018a9e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ab1:	bf de 05 00 00       	mov    edi,0x5de
c0018ab6:	0f a3 d7             	bt     edi,edx
c0018ab9:	73 e3                	jae    c0018a9e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018abb:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018ac0:	e9 e0 00 00 00       	jmp    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ac5:	39 c7                	cmp    edi,eax
c0018ac7:	0f 84 d3 00 00 00    	je     c0018ba0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018acd:	40                   	inc    eax
c0018ace:	3d d0 00 00 00       	cmp    eax,0xd0
c0018ad3:	74 09                	je     c0018ade <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018ad5:	89 f3                	mov    ebx,esi
c0018ad7:	80 fb 0f             	cmp    bl,0xf
c0018ada:	75 f1                	jne    c0018acd <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018adc:	eb e7                	jmp    c0018ac5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018ade:	80 f9 10             	cmp    cl,0x10
c0018ae1:	75 14                	jne    c0018af7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018ae3:	8d 42 fc             	lea    eax,[edx-0x4]
c0018ae6:	83 e0 fb             	and    eax,0xfffffffb
c0018ae9:	3c 02                	cmp    al,0x2
c0018aeb:	76 34                	jbe    c0018b21 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018aed:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018af2:	80 fa 02             	cmp    dl,0x2
c0018af5:	eb 24                	jmp    c0018b1b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018af7:	80 f9 11             	cmp    cl,0x11
c0018afa:	75 13                	jne    c0018b0f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018afc:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018b01:	80 fa 03             	cmp    dl,0x3
c0018b04:	0f 85 9b 00 00 00    	jne    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b0a:	e9 91 00 00 00       	jmp    c0018ba0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b0f:	80 f9 12             	cmp    cl,0x12
c0018b12:	75 14                	jne    c0018b28 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b14:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018b19:	fe ca                	dec    dl
c0018b1b:	0f 85 84 00 00 00    	jne    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b21:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018b26:	eb 7d                	jmp    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b28:	80 f9 14             	cmp    cl,0x14
c0018b2b:	75 12                	jne    c0018b3f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b2d:	4a                   	dec    edx
c0018b2e:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018b33:	80 fa 01             	cmp    dl,0x1
c0018b36:	77 6d                	ja     c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b38:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018b3d:	eb 66                	jmp    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b3f:	80 f9 15             	cmp    cl,0x15
c0018b42:	75 31                	jne    c0018b75 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b44:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018b49:	80 fa 01             	cmp    dl,0x1
c0018b4c:	74 57                	je     c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b4e:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018b53:	80 fa 13             	cmp    dl,0x13
c0018b56:	76 0c                	jbe    c0018b64 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b58:	80 fa 30             	cmp    dl,0x30
c0018b5b:	75 48                	jne    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b5d:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018b62:	eb 41                	jmp    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b64:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b69:	0f a3 d1             	bt     ecx,edx
c0018b6c:	73 37                	jae    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b6e:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018b73:	eb 30                	jmp    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b75:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018b7a:	80 f9 16             	cmp    cl,0x16
c0018b7d:	75 26                	jne    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b7f:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018b84:	84 d2                	test   dl,dl
c0018b86:	74 1d                	je     c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b88:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018b8d:	80 fa 30             	cmp    dl,0x30
c0018b90:	75 13                	jne    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b92:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018b97:	eb 0c                	jmp    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b99:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018b9e:	eb 05                	jmp    c0018ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba0:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018ba5:	5b                   	pop    ebx
c0018ba6:	5e                   	pop    esi
c0018ba7:	5f                   	pop    edi
c0018ba8:	5d                   	pop    ebp
c0018ba9:	c3                   	ret    

c0018baa <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018baa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bb2:	80 f9 04             	cmp    cl,0x4
c0018bb5:	75 6b                	jne    c0018c22 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018bb7:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018bbc:	80 fa 01             	cmp    dl,0x1
c0018bbf:	0f 86 92 02 00 00    	jbe    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc5:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018bca:	80 fa 02             	cmp    dl,0x2
c0018bcd:	0f 84 84 02 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd3:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018bd8:	80 fa 03             	cmp    dl,0x3
c0018bdb:	0f 84 76 02 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be1:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018be6:	80 fa 04             	cmp    dl,0x4
c0018be9:	0f 84 68 02 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bef:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018bf4:	80 fa 05             	cmp    dl,0x5
c0018bf7:	0f 84 5a 02 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfd:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018c02:	80 fa 07             	cmp    dl,0x7
c0018c05:	0f 84 4c 02 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0b:	83 ea 08             	sub    edx,0x8
c0018c0e:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018c13:	80 fa 01             	cmp    dl,0x1
c0018c16:	0f 87 3b 02 00 00    	ja     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c1c:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018c21:	c3                   	ret    
c0018c22:	80 f9 05             	cmp    cl,0x5
c0018c25:	75 45                	jne    c0018c6c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c27:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c2a:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018c2f:	80 f9 02             	cmp    cl,0x2
c0018c32:	0f 86 1f 02 00 00    	jbe    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c38:	80 fa 04             	cmp    dl,0x4
c0018c3b:	0f 84 f3 01 00 00    	je     c0018e34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c41:	80 fa 07             	cmp    dl,0x7
c0018c44:	0f 84 0d 02 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c4a:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018c4f:	80 fa 08             	cmp    dl,0x8
c0018c52:	0f 84 ff 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c58:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018c5d:	80 fa 09             	cmp    dl,0x9
c0018c60:	0f 85 f1 01 00 00    	jne    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c66:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018c6b:	c3                   	ret    
c0018c6c:	80 f9 06             	cmp    cl,0x6
c0018c6f:	0f 85 85 01 00 00    	jne    c0018dfa <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c75:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018c7a:	80 fa 01             	cmp    dl,0x1
c0018c7d:	0f 84 d4 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c83:	8d 42 fb             	lea    eax,[edx-0x5]
c0018c86:	3c 01                	cmp    al,0x1
c0018c88:	0f 86 ac 01 00 00    	jbe    c0018e3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c8e:	80 fa 03             	cmp    dl,0x3
c0018c91:	0f 84 a3 01 00 00    	je     c0018e3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c97:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018c9a:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018c9f:	80 f9 01             	cmp    cl,0x1
c0018ca2:	0f 86 af 01 00 00    	jbe    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca8:	80 fa 09             	cmp    dl,0x9
c0018cab:	0f 84 8f 01 00 00    	je     c0018e40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018cb1:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018cb4:	80 f9 01             	cmp    cl,0x1
c0018cb7:	0f 86 9a 01 00 00    	jbe    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cbd:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018cc2:	80 fa 0d             	cmp    dl,0xd
c0018cc5:	0f 84 8c 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ccb:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018cd0:	80 fa 0e             	cmp    dl,0xe
c0018cd3:	0f 84 7e 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd9:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018cde:	80 fa 0f             	cmp    dl,0xf
c0018ce1:	0f 84 70 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce7:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018cec:	80 fa 15             	cmp    dl,0x15
c0018cef:	0f 84 62 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf5:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018cf8:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018cfd:	80 f9 01             	cmp    cl,0x1
c0018d00:	0f 86 51 01 00 00    	jbe    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d06:	80 fa 1a             	cmp    dl,0x1a
c0018d09:	0f 84 37 01 00 00    	je     c0018e46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d0f:	80 fa 1c             	cmp    dl,0x1c
c0018d12:	0f 84 34 01 00 00    	je     c0018e4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d18:	80 fa 1d             	cmp    dl,0x1d
c0018d1b:	0f 84 36 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d21:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018d26:	80 fa 25             	cmp    dl,0x25
c0018d29:	0f 84 28 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d2f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018d32:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018d37:	80 f9 01             	cmp    cl,0x1
c0018d3a:	0f 86 17 01 00 00    	jbe    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d40:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018d45:	80 fa 2a             	cmp    dl,0x2a
c0018d48:	0f 84 09 01 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d4e:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018d53:	80 fa 2c             	cmp    dl,0x2c
c0018d56:	0f 84 fb 00 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d5c:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018d61:	80 fa 2d             	cmp    dl,0x2d
c0018d64:	0f 84 ed 00 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d6a:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018d6f:	80 fa 2e             	cmp    dl,0x2e
c0018d72:	0f 84 df 00 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d78:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018d7d:	80 fa 2f             	cmp    dl,0x2f
c0018d80:	0f 84 d1 00 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d86:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018d89:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018d8e:	80 f9 01             	cmp    cl,0x1
c0018d91:	0f 86 c0 00 00 00    	jbe    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d97:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018d9c:	80 fa 37             	cmp    dl,0x37
c0018d9f:	0f 84 b2 00 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da5:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018daa:	80 fa 3a             	cmp    dl,0x3a
c0018dad:	0f 84 a4 00 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db3:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018db8:	80 fa 3c             	cmp    dl,0x3c
c0018dbb:	0f 84 96 00 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc1:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018dc6:	80 fa 3d             	cmp    dl,0x3d
c0018dc9:	0f 84 88 00 00 00    	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcf:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018dd4:	80 fa 3e             	cmp    dl,0x3e
c0018dd7:	74 7e                	je     c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dd9:	8d 42 bb             	lea    eax,[edx-0x45]
c0018ddc:	3c 01                	cmp    al,0x1
c0018dde:	76 72                	jbe    c0018e52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018de0:	80 fa 3f             	cmp    dl,0x3f
c0018de3:	74 6d                	je     c0018e52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018de5:	80 fa 4a             	cmp    dl,0x4a
c0018de8:	74 0a                	je     c0018df4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018dea:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018def:	80 fa 4d             	cmp    dl,0x4d
c0018df2:	75 63                	jne    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df4:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018df9:	c3                   	ret    
c0018dfa:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018dff:	80 f9 0b             	cmp    cl,0xb
c0018e02:	75 0a                	jne    c0018e0e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e04:	fe ca                	dec    dl
c0018e06:	75 4f                	jne    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e08:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018e0d:	c3                   	ret    
c0018e0e:	80 f9 0f             	cmp    cl,0xf
c0018e11:	75 44                	jne    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e13:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018e18:	80 fa 02             	cmp    dl,0x2
c0018e1b:	76 3a                	jbe    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e20:	3c 01                	cmp    al,0x1
c0018e22:	76 0a                	jbe    c0018e2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e24:	b8 46 c3 02 c0       	mov    eax,0xc002c346
c0018e29:	80 fa 06             	cmp    dl,0x6
c0018e2c:	75 29                	jne    c0018e57 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2e:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018e33:	c3                   	ret    
c0018e34:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018e39:	c3                   	ret    
c0018e3a:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018e3f:	c3                   	ret    
c0018e40:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018e45:	c3                   	ret    
c0018e46:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018e4b:	c3                   	ret    
c0018e4c:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018e51:	c3                   	ret    
c0018e52:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018e57:	c3                   	ret    

c0018e58 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e58:	60                   	pusha  
c0018e59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e65:	9c                   	pushf  
c0018e66:	fa                   	cli    
c0018e67:	0f 09                	wbinvd 
c0018e69:	0f 30                	wrmsr  
c0018e6b:	9d                   	popf   
c0018e6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e70:	89 02                	mov    DWORD PTR [edx],eax
c0018e72:	61                   	popa   
c0018e73:	c3                   	ret    

c0018e74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e74:	60                   	pusha  
c0018e75:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e79:	9c                   	pushf  
c0018e7a:	fa                   	cli    
c0018e7b:	0f 09                	wbinvd 
c0018e7d:	31 c0                	xor    eax,eax
c0018e7f:	31 d2                	xor    edx,edx
c0018e81:	0f 32                	rdmsr  
c0018e83:	9d                   	popf   
c0018e84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018e88:	89 02                	mov    DWORD PTR [edx],eax
c0018e8a:	61                   	popa   
c0018e8b:	c3                   	ret    

c0018e8c <CPU::AMD_K6_writeback(int, int, int)>:
c0018e8c:	56                   	push   esi
c0018e8d:	53                   	push   ebx
c0018e8e:	83 ec 10             	sub    esp,0x10
c0018e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e95:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018e9a:	75 5d                	jne    c0018ef9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e9c:	83 f8 08             	cmp    eax,0x8
c0018e9f:	75 09                	jne    c0018eaa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ea1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ea6:	7e 13                	jle    c0018ebb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ea8:	eb 30                	jmp    c0018eda <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018eaa:	83 f8 06             	cmp    eax,0x6
c0018ead:	7c 4a                	jl     c0018ef9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018eaf:	83 f8 07             	cmp    eax,0x7
c0018eb2:	7e 07                	jle    c0018ebb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018eb4:	83 f8 09             	cmp    eax,0x9
c0018eb7:	74 21                	je     c0018eda <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018eb9:	eb 3e                	jmp    c0018ef9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ebb:	89 e6                	mov    esi,esp
c0018ebd:	8b 1d 08 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef08
c0018ec3:	56                   	push   esi
c0018ec4:	c1 eb 15             	shr    ebx,0x15
c0018ec7:	68 82 00 00 c0       	push   0xc0000082
c0018ecc:	83 e3 7e             	and    ebx,0x7e
c0018ecf:	e8 a0 ff ff ff       	call   c0018e74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ed4:	56                   	push   esi
c0018ed5:	6a 00                	push   0x0
c0018ed7:	53                   	push   ebx
c0018ed8:	eb 12                	jmp    c0018eec <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018eda:	89 e3                	mov    ebx,esp
c0018edc:	53                   	push   ebx
c0018edd:	68 82 00 00 c0       	push   0xc0000082
c0018ee2:	e8 8d ff ff ff       	call   c0018e74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ee7:	53                   	push   ebx
c0018ee8:	6a 00                	push   0x0
c0018eea:	6a 00                	push   0x0
c0018eec:	68 82 00 00 c0       	push   0xc0000082
c0018ef1:	e8 62 ff ff ff       	call   c0018e58 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018ef6:	83 c4 18             	add    esp,0x18
c0018ef9:	83 c4 10             	add    esp,0x10
c0018efc:	5b                   	pop    ebx
c0018efd:	5e                   	pop    esi
c0018efe:	c3                   	ret    
c0018eff:	90                   	nop

c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f00:	55                   	push   ebp
c0018f01:	57                   	push   edi
c0018f02:	56                   	push   esi
c0018f03:	53                   	push   ebx
c0018f04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f08:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f0c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f10:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f14:	39 05 e0 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3e0,eax
c0018f1a:	75 23                	jne    c0018f3f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f1c:	a1 0c 1a 03 c0       	mov    eax,ds:0xc0031a0c
c0018f21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f25:	89 06                	mov    DWORD PTR [esi],eax
c0018f27:	a1 08 1a 03 c0       	mov    eax,ds:0xc0031a08
c0018f2c:	89 07                	mov    DWORD PTR [edi],eax
c0018f2e:	a1 04 1a 03 c0       	mov    eax,ds:0xc0031a04
c0018f33:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018f36:	a1 00 1a 03 c0       	mov    eax,ds:0xc0031a00
c0018f3b:	89 02                	mov    DWORD PTR [edx],eax
c0018f3d:	eb 3f                	jmp    c0018f7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018f3f:	31 c9                	xor    ecx,ecx
c0018f41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f45:	0f a2                	cpuid  
c0018f47:	89 06                	mov    DWORD PTR [esi],eax
c0018f49:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f4f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f52:	89 10                	mov    DWORD PTR [eax],edx
c0018f54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f58:	a3 e0 e3 02 c0       	mov    ds:0xc002e3e0,eax
c0018f5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f5f:	a3 0c 1a 03 c0       	mov    ds:0xc0031a0c,eax
c0018f64:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f66:	a3 08 1a 03 c0       	mov    ds:0xc0031a08,eax
c0018f6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f6e:	a3 04 1a 03 c0       	mov    ds:0xc0031a04,eax
c0018f73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f77:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f79:	a3 00 1a 03 c0       	mov    ds:0xc0031a00,eax
c0018f7e:	5b                   	pop    ebx
c0018f7f:	5e                   	pop    esi
c0018f80:	5f                   	pop    edi
c0018f81:	5d                   	pop    ebp
c0018f82:	c3                   	ret    
c0018f83:	90                   	nop

c0018f84 <CPU::cpuidCheckEDX(unsigned int)>:
c0018f84:	83 ec 10             	sub    esp,0x10
c0018f87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f8b:	50                   	push   eax
c0018f8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f90:	50                   	push   eax
c0018f91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f95:	50                   	push   eax
c0018f96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f9a:	50                   	push   eax
c0018f9b:	6a 01                	push   0x1
c0018f9d:	e8 5e ff ff ff       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fa6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018faa:	0f 95 c0             	setne  al
c0018fad:	83 c4 24             	add    esp,0x24
c0018fb0:	c3                   	ret    
c0018fb1:	90                   	nop

c0018fb2 <CPU::cpuidCheckECX(unsigned int)>:
c0018fb2:	83 ec 10             	sub    esp,0x10
c0018fb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb9:	50                   	push   eax
c0018fba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fbe:	50                   	push   eax
c0018fbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc3:	50                   	push   eax
c0018fc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc8:	50                   	push   eax
c0018fc9:	6a 01                	push   0x1
c0018fcb:	e8 30 ff ff ff       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fd4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018fd8:	0f 95 c0             	setne  al
c0018fdb:	83 c4 24             	add    esp,0x24
c0018fde:	c3                   	ret    
c0018fdf:	90                   	nop

c0018fe0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018fe0:	83 ec 10             	sub    esp,0x10
c0018fe3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe7:	50                   	push   eax
c0018fe8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fec:	50                   	push   eax
c0018fed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff1:	50                   	push   eax
c0018ff2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff6:	50                   	push   eax
c0018ff7:	6a 07                	push   0x7
c0018ff9:	e8 02 ff ff ff       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ffe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019002:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0019006:	0f 95 c0             	setne  al
c0019009:	83 c4 24             	add    esp,0x24
c001900c:	c3                   	ret    
c001900d:	90                   	nop

c001900e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001900e:	83 ec 10             	sub    esp,0x10
c0019011:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019015:	50                   	push   eax
c0019016:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001901a:	50                   	push   eax
c001901b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001901f:	50                   	push   eax
c0019020:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019024:	50                   	push   eax
c0019025:	6a 07                	push   0x7
c0019027:	e8 d4 fe ff ff       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001902c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019030:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019034:	0f 95 c0             	setne  al
c0019037:	83 c4 24             	add    esp,0x24
c001903a:	c3                   	ret    
c001903b:	90                   	nop

c001903c <CPU::CPU()>:
c001903c:	83 ec 0c             	sub    esp,0xc
c001903f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019043:	83 ec 08             	sub    esp,0x8
c0019046:	68 46 c3 02 c0       	push   0xc002c346
c001904b:	50                   	push   eax
c001904c:	e8 4b b4 ff ff       	call   c001449c <Device::Device(char const*)>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	ba 20 c4 02 c0       	mov    edx,0xc002c420
c0019059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001905d:	89 10                	mov    DWORD PTR [eax],edx
c001905f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019063:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001906d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019071:	05 78 01 00 00       	add    eax,0x178
c0019076:	83 ec 0c             	sub    esp,0xc
c0019079:	50                   	push   eax
c001907a:	e8 57 60 ff ff       	call   c000f0d6 <GDT::GDT()>
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019086:	05 7c 09 00 00       	add    eax,0x97c
c001908b:	83 ec 0c             	sub    esp,0xc
c001908e:	50                   	push   eax
c001908f:	e8 ac 62 ff ff       	call   c000f340 <IDT::IDT()>
c0019094:	83 c4 10             	add    esp,0x10
c0019097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001909b:	05 7c 11 00 00       	add    eax,0x117c
c00190a0:	83 ec 0c             	sub    esp,0xc
c00190a3:	50                   	push   eax
c00190a4:	e8 f9 82 ff ff       	call   c00113a2 <TSS::TSS()>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190b0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00190b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190bb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00190c5:	90                   	nop
c00190c6:	83 c4 0c             	add    esp,0xc
c00190c9:	c3                   	ret    

c00190ca <CPU::displayFeatures()>:
c00190ca:	53                   	push   ebx
c00190cb:	83 ec 10             	sub    esp,0x10
c00190ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00190d2:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00190d8:	68 54 c0 02 c0       	push   0xc002c054
c00190dd:	e8 95 9d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00190e2:	59                   	pop    ecx
c00190e3:	58                   	pop    eax
c00190e4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00190ea:	50                   	push   eax
c00190eb:	68 65 c0 02 c0       	push   0xc002c065
c00190f0:	e8 82 9d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00190f5:	58                   	pop    eax
c00190f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190fc:	5a                   	pop    edx
c00190fd:	c1 e8 0e             	shr    eax,0xe
c0019100:	0f b6 c0             	movzx  eax,al
c0019103:	50                   	push   eax
c0019104:	68 76 c0 02 c0       	push   0xc002c076
c0019109:	e8 69 9d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001910e:	59                   	pop    ecx
c001910f:	58                   	pop    eax
c0019110:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019116:	66 c1 e8 06          	shr    ax,0x6
c001911a:	0f b6 c0             	movzx  eax,al
c001911d:	50                   	push   eax
c001911e:	68 87 c0 02 c0       	push   0xc002c087
c0019123:	e8 4f 9d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0019128:	c7 04 24 34 c5 02 c0 	mov    DWORD PTR [esp],0xc002c534
c001912f:	e8 43 9d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0019134:	83 c4 10             	add    esp,0x10
c0019137:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c001913c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0019143:	74 05                	je     c001914a <CPU::displayFeatures()+0x80>
c0019145:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c001914a:	52                   	push   edx
c001914b:	52                   	push   edx
c001914c:	50                   	push   eax
c001914d:	68 98 c0 02 c0       	push   0xc002c098
c0019152:	e8 20 9d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0019157:	83 c4 10             	add    esp,0x10
c001915a:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c001915f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019166:	78 05                	js     c001916d <CPU::displayFeatures()+0xa3>
c0019168:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c001916d:	51                   	push   ecx
c001916e:	51                   	push   ecx
c001916f:	50                   	push   eax
c0019170:	68 af c0 02 c0       	push   0xc002c0af
c0019175:	e8 fd 9c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001917a:	83 c4 10             	add    esp,0x10
c001917d:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c0019182:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019189:	75 05                	jne    c0019190 <CPU::displayFeatures()+0xc6>
c001918b:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c0019190:	52                   	push   edx
c0019191:	52                   	push   edx
c0019192:	50                   	push   eax
c0019193:	68 c6 c0 02 c0       	push   0xc002c0c6
c0019198:	e8 da 9c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c00191a5:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00191ac:	75 05                	jne    c00191b3 <CPU::displayFeatures()+0xe9>
c00191ae:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c00191b3:	51                   	push   ecx
c00191b4:	51                   	push   ecx
c00191b5:	50                   	push   eax
c00191b6:	68 dd c0 02 c0       	push   0xc002c0dd
c00191bb:	e8 b7 9c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00191c0:	83 c4 10             	add    esp,0x10
c00191c3:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c00191c8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00191cf:	75 05                	jne    c00191d6 <CPU::displayFeatures()+0x10c>
c00191d1:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c00191d6:	52                   	push   edx
c00191d7:	52                   	push   edx
c00191d8:	50                   	push   eax
c00191d9:	68 f4 c0 02 c0       	push   0xc002c0f4
c00191de:	e8 94 9c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c00191eb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00191f2:	75 05                	jne    c00191f9 <CPU::displayFeatures()+0x12f>
c00191f4:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c00191f9:	51                   	push   ecx
c00191fa:	51                   	push   ecx
c00191fb:	50                   	push   eax
c00191fc:	68 0b c1 02 c0       	push   0xc002c10b
c0019201:	e8 71 9c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0019206:	83 c4 10             	add    esp,0x10
c0019209:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c001920e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019215:	75 05                	jne    c001921c <CPU::displayFeatures()+0x152>
c0019217:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c001921c:	52                   	push   edx
c001921d:	52                   	push   edx
c001921e:	50                   	push   eax
c001921f:	68 22 c1 02 c0       	push   0xc002c122
c0019224:	e8 4e 9c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c0019231:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019238:	75 05                	jne    c001923f <CPU::displayFeatures()+0x175>
c001923a:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c001923f:	51                   	push   ecx
c0019240:	51                   	push   ecx
c0019241:	50                   	push   eax
c0019242:	68 39 c1 02 c0       	push   0xc002c139
c0019247:	e8 2b 9c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001924c:	83 c4 10             	add    esp,0x10
c001924f:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c0019254:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001925b:	75 05                	jne    c0019262 <CPU::displayFeatures()+0x198>
c001925d:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c0019262:	52                   	push   edx
c0019263:	52                   	push   edx
c0019264:	50                   	push   eax
c0019265:	68 50 c1 02 c0       	push   0xc002c150
c001926a:	e8 08 9c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001926f:	83 c4 10             	add    esp,0x10
c0019272:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c0019277:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001927e:	75 05                	jne    c0019285 <CPU::displayFeatures()+0x1bb>
c0019280:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c0019285:	51                   	push   ecx
c0019286:	51                   	push   ecx
c0019287:	50                   	push   eax
c0019288:	68 67 c1 02 c0       	push   0xc002c167
c001928d:	e8 e5 9b ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c001929a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00192a1:	75 05                	jne    c00192a8 <CPU::displayFeatures()+0x1de>
c00192a3:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c00192a8:	52                   	push   edx
c00192a9:	52                   	push   edx
c00192aa:	50                   	push   eax
c00192ab:	68 7e c1 02 c0       	push   0xc002c17e
c00192b0:	e8 c2 9b ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00192b5:	83 c4 10             	add    esp,0x10
c00192b8:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c00192bd:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00192c4:	75 05                	jne    c00192cb <CPU::displayFeatures()+0x201>
c00192c6:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c00192cb:	51                   	push   ecx
c00192cc:	51                   	push   ecx
c00192cd:	50                   	push   eax
c00192ce:	68 95 c1 02 c0       	push   0xc002c195
c00192d3:	e8 9f 9b ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c00192e0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00192e7:	75 05                	jne    c00192ee <CPU::displayFeatures()+0x224>
c00192e9:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c00192ee:	52                   	push   edx
c00192ef:	52                   	push   edx
c00192f0:	50                   	push   eax
c00192f1:	68 ac c1 02 c0       	push   0xc002c1ac
c00192f6:	e8 7c 9b ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c0019303:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001930a:	78 05                	js     c0019311 <CPU::displayFeatures()+0x247>
c001930c:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c0019311:	51                   	push   ecx
c0019312:	51                   	push   ecx
c0019313:	50                   	push   eax
c0019314:	68 c3 c1 02 c0       	push   0xc002c1c3
c0019319:	e8 59 9b ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001931e:	83 c4 10             	add    esp,0x10
c0019321:	b8 92 a9 02 c0       	mov    eax,0xc002a992
c0019326:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001932d:	75 05                	jne    c0019334 <CPU::displayFeatures()+0x26a>
c001932f:	b8 96 a9 02 c0       	mov    eax,0xc002a996
c0019334:	52                   	push   edx
c0019335:	52                   	push   edx
c0019336:	50                   	push   eax
c0019337:	68 da c1 02 c0       	push   0xc002c1da
c001933c:	e8 36 9b ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0019341:	83 c4 18             	add    esp,0x18
c0019344:	5b                   	pop    ebx
c0019345:	c3                   	ret    

c0019346 <CPU::detectFeatures()>:
c0019346:	55                   	push   ebp
c0019347:	57                   	push   edi
c0019348:	56                   	push   esi
c0019349:	53                   	push   ebx
c001934a:	83 ec 50             	sub    esp,0x50
c001934d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019351:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001935b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019362:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019368:	6a 0d                	push   0xd
c001936a:	6a 00                	push   0x0
c001936c:	57                   	push   edi
c001936d:	e8 fa 73 fe ff       	call   c000076c <memset>
c0019372:	83 c4 10             	add    esp,0x10
c0019375:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001937a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019381:	0f 84 20 09 00 00    	je     c0019ca7 <CPU::detectFeatures()+0x961>
c0019387:	83 ec 0c             	sub    esp,0xc
c001938a:	6a 10                	push   0x10
c001938c:	e8 f3 fb ff ff       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c0019391:	83 e0 01             	and    eax,0x1
c0019394:	8d 14 00             	lea    edx,[eax+eax*1]
c0019397:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001939d:	83 e0 fd             	and    eax,0xfffffffd
c00193a0:	09 d0                	or     eax,edx
c00193a2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193a8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00193af:	e8 d0 fb ff ff       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c00193b4:	83 e0 01             	and    eax,0x1
c00193b7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193be:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193c4:	83 e0 fb             	and    eax,0xfffffffb
c00193c7:	09 d0                	or     eax,edx
c00193c9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193cf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00193d6:	e8 a9 fb ff ff       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c00193db:	83 e0 01             	and    eax,0x1
c00193de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00193e5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193eb:	83 e0 f7             	and    eax,0xfffffff7
c00193ee:	09 d0                	or     eax,edx
c00193f0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193f6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00193fd:	e8 82 fb ff ff       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c0019402:	83 e0 01             	and    eax,0x1
c0019405:	c1 e0 04             	shl    eax,0x4
c0019408:	88 c2                	mov    dl,al
c001940a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019410:	83 e0 ef             	and    eax,0xffffffef
c0019413:	09 d0                	or     eax,edx
c0019415:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001941b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019422:	e8 5d fb ff ff       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c0019427:	83 e0 01             	and    eax,0x1
c001942a:	c1 e0 05             	shl    eax,0x5
c001942d:	88 c2                	mov    dl,al
c001942f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019435:	83 e0 df             	and    eax,0xffffffdf
c0019438:	09 d0                	or     eax,edx
c001943a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019440:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019447:	e8 38 fb ff ff       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c001944c:	83 e0 01             	and    eax,0x1
c001944f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019452:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019458:	83 e0 fd             	and    eax,0xfffffffd
c001945b:	09 d0                	or     eax,edx
c001945d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019463:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001946a:	e8 15 fb ff ff       	call   c0018f84 <CPU::cpuidCheckEDX(unsigned int)>
c001946f:	83 e0 01             	and    eax,0x1
c0019472:	c1 e0 06             	shl    eax,0x6
c0019475:	88 c2                	mov    dl,al
c0019477:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001947d:	83 e0 bf             	and    eax,0xffffffbf
c0019480:	09 d0                	or     eax,edx
c0019482:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019488:	58                   	pop    eax
c0019489:	8d 74 24 28          	lea    esi,[esp+0x28]
c001948d:	56                   	push   esi
c001948e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019492:	55                   	push   ebp
c0019493:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019497:	50                   	push   eax
c0019498:	8d 54 24 28          	lea    edx,[esp+0x28]
c001949c:	52                   	push   edx
c001949d:	6a 00                	push   0x0
c001949f:	e8 5c fa ff ff       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194a4:	83 c4 1c             	add    esp,0x1c
c00194a7:	6a 04                	push   0x4
c00194a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00194ad:	50                   	push   eax
c00194ae:	57                   	push   edi
c00194af:	e8 fc 78 fe ff       	call   c0000db0 <realmemcpy>
c00194b4:	83 c4 0c             	add    esp,0xc
c00194b7:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00194bd:	6a 04                	push   0x4
c00194bf:	56                   	push   esi
c00194c0:	50                   	push   eax
c00194c1:	e8 ea 78 fe ff       	call   c0000db0 <realmemcpy>
c00194c6:	83 c4 0c             	add    esp,0xc
c00194c9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00194cf:	6a 04                	push   0x4
c00194d1:	55                   	push   ebp
c00194d2:	50                   	push   eax
c00194d3:	e8 d8 78 fe ff       	call   c0000db0 <realmemcpy>
c00194d8:	58                   	pop    eax
c00194d9:	5a                   	pop    edx
c00194da:	68 f1 c1 02 c0       	push   0xc002c1f1
c00194df:	57                   	push   edi
c00194e0:	e8 cf 73 fe ff       	call   c00008b4 <strcmp>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	85 c0                	test   eax,eax
c00194ea:	75 0f                	jne    c00194fb <CPU::detectFeatures()+0x1b5>
c00194ec:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00194f6:	e9 22 02 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c00194fb:	50                   	push   eax
c00194fc:	50                   	push   eax
c00194fd:	68 fe c1 02 c0       	push   0xc002c1fe
c0019502:	57                   	push   edi
c0019503:	e8 ac 73 fe ff       	call   c00008b4 <strcmp>
c0019508:	83 c4 10             	add    esp,0x10
c001950b:	85 c0                	test   eax,eax
c001950d:	74 dd                	je     c00194ec <CPU::detectFeatures()+0x1a6>
c001950f:	51                   	push   ecx
c0019510:	51                   	push   ecx
c0019511:	68 0b c2 02 c0       	push   0xc002c20b
c0019516:	57                   	push   edi
c0019517:	e8 98 73 fe ff       	call   c00008b4 <strcmp>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	85 c0                	test   eax,eax
c0019521:	74 2a                	je     c001954d <CPU::detectFeatures()+0x207>
c0019523:	52                   	push   edx
c0019524:	52                   	push   edx
c0019525:	68 18 c2 02 c0       	push   0xc002c218
c001952a:	57                   	push   edi
c001952b:	e8 84 73 fe ff       	call   c00008b4 <strcmp>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	85 c0                	test   eax,eax
c0019535:	74 16                	je     c001954d <CPU::detectFeatures()+0x207>
c0019537:	50                   	push   eax
c0019538:	50                   	push   eax
c0019539:	68 25 c2 02 c0       	push   0xc002c225
c001953e:	57                   	push   edi
c001953f:	e8 70 73 fe ff       	call   c00008b4 <strcmp>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	85 c0                	test   eax,eax
c0019549:	74 48                	je     c0019593 <CPU::detectFeatures()+0x24d>
c001954b:	eb 0f                	jmp    c001955c <CPU::detectFeatures()+0x216>
c001954d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019557:	e9 c1 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c001955c:	50                   	push   eax
c001955d:	50                   	push   eax
c001955e:	68 32 c2 02 c0       	push   0xc002c232
c0019563:	57                   	push   edi
c0019564:	e8 4b 73 fe ff       	call   c00008b4 <strcmp>
c0019569:	83 c4 10             	add    esp,0x10
c001956c:	85 c0                	test   eax,eax
c001956e:	74 23                	je     c0019593 <CPU::detectFeatures()+0x24d>
c0019570:	50                   	push   eax
c0019571:	50                   	push   eax
c0019572:	68 3f c2 02 c0       	push   0xc002c23f
c0019577:	57                   	push   edi
c0019578:	e8 37 73 fe ff       	call   c00008b4 <strcmp>
c001957d:	83 c4 10             	add    esp,0x10
c0019580:	85 c0                	test   eax,eax
c0019582:	75 1e                	jne    c00195a2 <CPU::detectFeatures()+0x25c>
c0019584:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001958e:	e9 8a 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c0019593:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001959d:	e9 7b 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c00195a2:	50                   	push   eax
c00195a3:	50                   	push   eax
c00195a4:	68 4c c2 02 c0       	push   0xc002c24c
c00195a9:	57                   	push   edi
c00195aa:	e8 05 73 fe ff       	call   c00008b4 <strcmp>
c00195af:	83 c4 10             	add    esp,0x10
c00195b2:	85 c0                	test   eax,eax
c00195b4:	75 0f                	jne    c00195c5 <CPU::detectFeatures()+0x27f>
c00195b6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00195c0:	e9 58 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c00195c5:	50                   	push   eax
c00195c6:	50                   	push   eax
c00195c7:	68 0b c2 02 c0       	push   0xc002c20b
c00195cc:	57                   	push   edi
c00195cd:	e8 e2 72 fe ff       	call   c00008b4 <strcmp>
c00195d2:	83 c4 10             	add    esp,0x10
c00195d5:	85 c0                	test   eax,eax
c00195d7:	75 0f                	jne    c00195e8 <CPU::detectFeatures()+0x2a2>
c00195d9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00195e3:	e9 35 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c00195e8:	50                   	push   eax
c00195e9:	50                   	push   eax
c00195ea:	68 59 c2 02 c0       	push   0xc002c259
c00195ef:	57                   	push   edi
c00195f0:	e8 bf 72 fe ff       	call   c00008b4 <strcmp>
c00195f5:	83 c4 10             	add    esp,0x10
c00195f8:	85 c0                	test   eax,eax
c00195fa:	75 0f                	jne    c001960b <CPU::detectFeatures()+0x2c5>
c00195fc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019606:	e9 12 01 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c001960b:	51                   	push   ecx
c001960c:	51                   	push   ecx
c001960d:	68 66 c2 02 c0       	push   0xc002c266
c0019612:	57                   	push   edi
c0019613:	e8 9c 72 fe ff       	call   c00008b4 <strcmp>
c0019618:	83 c4 10             	add    esp,0x10
c001961b:	85 c0                	test   eax,eax
c001961d:	75 0f                	jne    c001962e <CPU::detectFeatures()+0x2e8>
c001961f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019629:	e9 ef 00 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c001962e:	52                   	push   edx
c001962f:	52                   	push   edx
c0019630:	68 73 c2 02 c0       	push   0xc002c273
c0019635:	57                   	push   edi
c0019636:	e8 79 72 fe ff       	call   c00008b4 <strcmp>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	85 c0                	test   eax,eax
c0019640:	75 0f                	jne    c0019651 <CPU::detectFeatures()+0x30b>
c0019642:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001964c:	e9 cc 00 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c0019651:	50                   	push   eax
c0019652:	50                   	push   eax
c0019653:	68 80 c2 02 c0       	push   0xc002c280
c0019658:	57                   	push   edi
c0019659:	e8 56 72 fe ff       	call   c00008b4 <strcmp>
c001965e:	83 c4 10             	add    esp,0x10
c0019661:	85 c0                	test   eax,eax
c0019663:	75 0f                	jne    c0019674 <CPU::detectFeatures()+0x32e>
c0019665:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001966f:	e9 a9 00 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c0019674:	50                   	push   eax
c0019675:	50                   	push   eax
c0019676:	68 8d c2 02 c0       	push   0xc002c28d
c001967b:	57                   	push   edi
c001967c:	e8 33 72 fe ff       	call   c00008b4 <strcmp>
c0019681:	83 c4 10             	add    esp,0x10
c0019684:	85 c0                	test   eax,eax
c0019686:	75 0f                	jne    c0019697 <CPU::detectFeatures()+0x351>
c0019688:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019692:	e9 86 00 00 00       	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c0019697:	50                   	push   eax
c0019698:	50                   	push   eax
c0019699:	68 9a c2 02 c0       	push   0xc002c29a
c001969e:	57                   	push   edi
c001969f:	e8 10 72 fe ff       	call   c00008b4 <strcmp>
c00196a4:	83 c4 10             	add    esp,0x10
c00196a7:	85 c0                	test   eax,eax
c00196a9:	75 0c                	jne    c00196b7 <CPU::detectFeatures()+0x371>
c00196ab:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00196b5:	eb 66                	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c00196b7:	50                   	push   eax
c00196b8:	50                   	push   eax
c00196b9:	68 a7 c2 02 c0       	push   0xc002c2a7
c00196be:	57                   	push   edi
c00196bf:	e8 f0 71 fe ff       	call   c00008b4 <strcmp>
c00196c4:	83 c4 10             	add    esp,0x10
c00196c7:	85 c0                	test   eax,eax
c00196c9:	75 0c                	jne    c00196d7 <CPU::detectFeatures()+0x391>
c00196cb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00196d5:	eb 46                	jmp    c001971d <CPU::detectFeatures()+0x3d7>
c00196d7:	50                   	push   eax
c00196d8:	50                   	push   eax
c00196d9:	68 b4 c2 02 c0       	push   0xc002c2b4
c00196de:	57                   	push   edi
c00196df:	e8 d0 71 fe ff       	call   c00008b4 <strcmp>
c00196e4:	83 c4 10             	add    esp,0x10
c00196e7:	85 c0                	test   eax,eax
c00196e9:	74 e0                	je     c00196cb <CPU::detectFeatures()+0x385>
c00196eb:	50                   	push   eax
c00196ec:	50                   	push   eax
c00196ed:	68 c1 c2 02 c0       	push   0xc002c2c1
c00196f2:	57                   	push   edi
c00196f3:	e8 bc 71 fe ff       	call   c00008b4 <strcmp>
c00196f8:	83 c4 10             	add    esp,0x10
c00196fb:	85 c0                	test   eax,eax
c00196fd:	74 cc                	je     c00196cb <CPU::detectFeatures()+0x385>
c00196ff:	51                   	push   ecx
c0019700:	51                   	push   ecx
c0019701:	68 ce c2 02 c0       	push   0xc002c2ce
c0019706:	57                   	push   edi
c0019707:	e8 a8 71 fe ff       	call   c00008b4 <strcmp>
c001970c:	83 c4 10             	add    esp,0x10
c001970f:	85 c0                	test   eax,eax
c0019711:	74 b8                	je     c00196cb <CPU::detectFeatures()+0x385>
c0019713:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001971d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019722:	0f 86 be 00 00 00    	jbe    c00197e6 <CPU::detectFeatures()+0x4a0>
c0019728:	83 ec 0c             	sub    esp,0xc
c001972b:	68 80 00 00 00       	push   0x80
c0019730:	e8 ab f8 ff ff       	call   c0018fe0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019735:	83 e0 01             	and    eax,0x1
c0019738:	c1 e0 06             	shl    eax,0x6
c001973b:	88 c2                	mov    dl,al
c001973d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019743:	83 e0 bf             	and    eax,0xffffffbf
c0019746:	09 d0                	or     eax,edx
c0019748:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001974e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019755:	e8 86 f8 ff ff       	call   c0018fe0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001975a:	83 e0 01             	and    eax,0x1
c001975d:	c1 e0 04             	shl    eax,0x4
c0019760:	88 c2                	mov    dl,al
c0019762:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019768:	83 e0 ef             	and    eax,0xffffffef
c001976b:	09 d0                	or     eax,edx
c001976d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019773:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001977a:	e8 61 f8 ff ff       	call   c0018fe0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001977f:	c1 e0 07             	shl    eax,0x7
c0019782:	88 c2                	mov    dl,al
c0019784:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001978a:	83 e0 7f             	and    eax,0x7f
c001978d:	09 d0                	or     eax,edx
c001978f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019795:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001979c:	e8 6d f8 ff ff       	call   c001900e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197a1:	83 e0 01             	and    eax,0x1
c00197a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00197ab:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197b1:	83 e0 f7             	and    eax,0xfffffff7
c00197b4:	09 d0                	or     eax,edx
c00197b6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197bc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00197c3:	e8 46 f8 ff ff       	call   c001900e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197c8:	83 c4 10             	add    esp,0x10
c00197cb:	83 e0 01             	and    eax,0x1
c00197ce:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00197d5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197db:	83 e0 fb             	and    eax,0xfffffffb
c00197de:	09 d0                	or     eax,edx
c00197e0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197e6:	83 ec 0c             	sub    esp,0xc
c00197e9:	56                   	push   esi
c00197ea:	55                   	push   ebp
c00197eb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00197ef:	57                   	push   edi
c00197f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00197f4:	50                   	push   eax
c00197f5:	6a 01                	push   0x1
c00197f7:	e8 04 f7 ff ff       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019800:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019806:	88 ca                	mov    dl,cl
c0019808:	83 e0 f0             	and    eax,0xfffffff0
c001980b:	83 e2 0f             	and    edx,0xf
c001980e:	09 d0                	or     eax,edx
c0019810:	88 ca                	mov    dl,cl
c0019812:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019818:	c0 ea 04             	shr    dl,0x4
c001981b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001981f:	0f b6 c2             	movzx  eax,dl
c0019822:	83 c4 20             	add    esp,0x20
c0019825:	c1 e0 06             	shl    eax,0x6
c0019828:	89 c5                	mov    ebp,eax
c001982a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019830:	66 25 3f c0          	and    ax,0xc03f
c0019834:	09 e8                	or     eax,ebp
c0019836:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001983d:	89 c8                	mov    eax,ecx
c001983f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019845:	c1 e8 08             	shr    eax,0x8
c0019848:	83 e2 3f             	and    edx,0x3f
c001984b:	83 e0 0f             	and    eax,0xf
c001984e:	89 c5                	mov    ebp,eax
c0019850:	c1 e5 06             	shl    ebp,0x6
c0019853:	09 d5                	or     ebp,edx
c0019855:	89 ea                	mov    edx,ebp
c0019857:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001985d:	88 c2                	mov    dl,al
c001985f:	c0 ea 02             	shr    dl,0x2
c0019862:	89 d5                	mov    ebp,edx
c0019864:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001986a:	83 e2 c0             	and    edx,0xffffffc0
c001986d:	09 d5                	or     ebp,edx
c001986f:	89 ea                	mov    edx,ebp
c0019871:	89 cd                	mov    ebp,ecx
c0019873:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019879:	c1 ed 0c             	shr    ebp,0xc
c001987c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019882:	83 e5 03             	and    ebp,0x3
c0019885:	83 e2 cf             	and    edx,0xffffffcf
c0019888:	c1 e5 04             	shl    ebp,0x4
c001988b:	09 d5                	or     ebp,edx
c001988d:	3c 06                	cmp    al,0x6
c001988f:	89 ea                	mov    edx,ebp
c0019891:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019897:	74 04                	je     c001989d <CPU::detectFeatures()+0x557>
c0019899:	3c 0f                	cmp    al,0xf
c001989b:	75 5c                	jne    c00198f9 <CPU::detectFeatures()+0x5b3>
c001989d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00198a1:	89 cd                	mov    ebp,ecx
c00198a3:	c1 ed 10             	shr    ebp,0x10
c00198a6:	c1 e5 04             	shl    ebp,0x4
c00198a9:	09 ea                	or     edx,ebp
c00198ab:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00198b1:	0f b6 d2             	movzx  edx,dl
c00198b4:	66 81 e5 3f c0       	and    bp,0xc03f
c00198b9:	c1 e2 06             	shl    edx,0x6
c00198bc:	09 ea                	or     edx,ebp
c00198be:	3c 0f                	cmp    al,0xf
c00198c0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00198c7:	75 30                	jne    c00198f9 <CPU::detectFeatures()+0x5b3>
c00198c9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00198cf:	c1 e9 14             	shr    ecx,0x14
c00198d2:	83 e0 3f             	and    eax,0x3f
c00198d5:	83 c1 0f             	add    ecx,0xf
c00198d8:	88 ca                	mov    dl,cl
c00198da:	c0 e9 02             	shr    cl,0x2
c00198dd:	c1 e2 06             	shl    edx,0x6
c00198e0:	09 d0                	or     eax,edx
c00198e2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00198e8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00198ee:	83 e0 c0             	and    eax,0xffffffc0
c00198f1:	09 c1                	or     ecx,eax
c00198f3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00198f9:	83 ec 0c             	sub    esp,0xc
c00198fc:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019903:	56                   	push   esi
c0019904:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019908:	50                   	push   eax
c0019909:	57                   	push   edi
c001990a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001990e:	55                   	push   ebp
c001990f:	68 00 00 00 80       	push   0x80000000
c0019914:	e8 e7 f5 ff ff       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019919:	83 c4 20             	add    esp,0x20
c001991c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019924:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019928:	76 1e                	jbe    c0019948 <CPU::detectFeatures()+0x602>
c001992a:	83 ec 0c             	sub    esp,0xc
c001992d:	56                   	push   esi
c001992e:	50                   	push   eax
c001992f:	57                   	push   edi
c0019930:	55                   	push   ebp
c0019931:	68 01 00 00 80       	push   0x80000001
c0019936:	e8 c5 f5 ff ff       	call   c0018f00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001993b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019945:	83 c4 20             	add    esp,0x20
c0019948:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001994e:	83 f8 01             	cmp    eax,0x1
c0019951:	75 6f                	jne    c00199c2 <CPU::detectFeatures()+0x67c>
c0019953:	51                   	push   ecx
c0019954:	51                   	push   ecx
c0019955:	68 da c2 02 c0       	push   0xc002c2da
c001995a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001995e:	56                   	push   esi
c001995f:	e8 c4 6e fe ff       	call   c0000828 <strcpy>
c0019964:	5f                   	pop    edi
c0019965:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001996b:	5d                   	pop    ebp
c001996c:	66 c1 e8 06          	shr    ax,0x6
c0019970:	0f b6 c0             	movzx  eax,al
c0019973:	50                   	push   eax
c0019974:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001997a:	c1 e8 0e             	shr    eax,0xe
c001997d:	0f b6 c0             	movzx  eax,al
c0019980:	50                   	push   eax
c0019981:	e8 24 f2 ff ff       	call   c0018baa <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019986:	5a                   	pop    edx
c0019987:	59                   	pop    ecx
c0019988:	50                   	push   eax
c0019989:	56                   	push   esi
c001998a:	e8 d9 6f fe ff       	call   c0000968 <strcat>
c001998f:	5f                   	pop    edi
c0019990:	5d                   	pop    ebp
c0019991:	56                   	push   esi
c0019992:	53                   	push   ebx
c0019993:	e8 f6 aa ff ff       	call   c001448e <Device::setName(char const*)>
c0019998:	58                   	pop    eax
c0019999:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001999f:	5a                   	pop    edx
c00199a0:	68 e1 c2 02 c0       	push   0xc002c2e1
c00199a5:	50                   	push   eax
c00199a6:	e8 09 6f fe ff       	call   c00008b4 <strcmp>
c00199ab:	83 c4 10             	add    esp,0x10
c00199ae:	85 c0                	test   eax,eax
c00199b0:	0f 85 71 03 00 00    	jne    c0019d27 <CPU::detectFeatures()+0x9e1>
c00199b6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00199bd:	e9 65 03 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x9e1>
c00199c2:	83 f8 02             	cmp    eax,0x2
c00199c5:	0f 85 b5 00 00 00    	jne    c0019a80 <CPU::detectFeatures()+0x73a>
c00199cb:	57                   	push   edi
c00199cc:	57                   	push   edi
c00199cd:	68 f3 c2 02 c0       	push   0xc002c2f3
c00199d2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199d6:	56                   	push   esi
c00199d7:	e8 4c 6e fe ff       	call   c0000828 <strcpy>
c00199dc:	5d                   	pop    ebp
c00199dd:	58                   	pop    eax
c00199de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199e4:	66 c1 e8 06          	shr    ax,0x6
c00199e8:	0f b6 c0             	movzx  eax,al
c00199eb:	50                   	push   eax
c00199ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199f2:	c1 e8 0e             	shr    eax,0xe
c00199f5:	0f b6 c0             	movzx  eax,al
c00199f8:	50                   	push   eax
c00199f9:	e8 18 f0 ff ff       	call   c0018a16 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00199fe:	5a                   	pop    edx
c00199ff:	59                   	pop    ecx
c0019a00:	50                   	push   eax
c0019a01:	56                   	push   esi
c0019a02:	e8 61 6f fe ff       	call   c0000968 <strcat>
c0019a07:	5f                   	pop    edi
c0019a08:	5d                   	pop    ebp
c0019a09:	56                   	push   esi
c0019a0a:	53                   	push   ebx
c0019a0b:	e8 7e aa ff ff       	call   c001448e <Device::setName(char const*)>
c0019a10:	58                   	pop    eax
c0019a11:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a17:	5a                   	pop    edx
c0019a18:	68 f8 c2 02 c0       	push   0xc002c2f8
c0019a1d:	50                   	push   eax
c0019a1e:	e8 91 6e fe ff       	call   c00008b4 <strcmp>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	85 c0                	test   eax,eax
c0019a28:	75 20                	jne    c0019a4a <CPU::detectFeatures()+0x704>
c0019a2a:	8b 15 c8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eec8
c0019a30:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019a36:	a8 01                	test   al,0x1
c0019a38:	74 10                	je     c0019a4a <CPU::detectFeatures()+0x704>
c0019a3a:	83 e0 fe             	and    eax,0xfffffffe
c0019a3d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019a43:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019a4a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a50:	c1 e8 0e             	shr    eax,0xe
c0019a53:	3c 05                	cmp    al,0x5
c0019a55:	0f 85 cc 02 00 00    	jne    c0019d27 <CPU::detectFeatures()+0x9e1>
c0019a5b:	56                   	push   esi
c0019a5c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019a62:	83 e0 0f             	and    eax,0xf
c0019a65:	50                   	push   eax
c0019a66:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a6c:	66 c1 e8 06          	shr    ax,0x6
c0019a70:	0f b6 c0             	movzx  eax,al
c0019a73:	50                   	push   eax
c0019a74:	6a 05                	push   0x5
c0019a76:	e8 11 f4 ff ff       	call   c0018e8c <CPU::AMD_K6_writeback(int, int, int)>
c0019a7b:	e9 1f 02 00 00       	jmp    c0019c9f <CPU::detectFeatures()+0x959>
c0019a80:	8d 50 fd             	lea    edx,[eax-0x3]
c0019a83:	83 fa 01             	cmp    edx,0x1
c0019a86:	76 09                	jbe    c0019a91 <CPU::detectFeatures()+0x74b>
c0019a88:	83 f8 06             	cmp    eax,0x6
c0019a8b:	0f 85 91 01 00 00    	jne    c0019c22 <CPU::detectFeatures()+0x8dc>
c0019a91:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019a97:	c1 ea 0e             	shr    edx,0xe
c0019a9a:	80 fa 05             	cmp    dl,0x5
c0019a9d:	75 7b                	jne    c0019b1a <CPU::detectFeatures()+0x7d4>
c0019a9f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019aa5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019aaa:	66 81 fa 00 01       	cmp    dx,0x100
c0019aaf:	75 0c                	jne    c0019abd <CPU::detectFeatures()+0x777>
c0019ab1:	51                   	push   ecx
c0019ab2:	51                   	push   ecx
c0019ab3:	68 ff c2 02 c0       	push   0xc002c2ff
c0019ab8:	e9 dc 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019abd:	66 81 fa 00 02       	cmp    dx,0x200
c0019ac2:	75 0c                	jne    c0019ad0 <CPU::detectFeatures()+0x78a>
c0019ac4:	52                   	push   edx
c0019ac5:	52                   	push   edx
c0019ac6:	68 12 c3 02 c0       	push   0xc002c312
c0019acb:	e9 c9 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019ad0:	66 81 fa 40 02       	cmp    dx,0x240
c0019ad5:	75 0c                	jne    c0019ae3 <CPU::detectFeatures()+0x79d>
c0019ad7:	50                   	push   eax
c0019ad8:	50                   	push   eax
c0019ad9:	68 24 c3 02 c0       	push   0xc002c324
c0019ade:	e9 b6 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019ae3:	83 f8 06             	cmp    eax,0x6
c0019ae6:	75 0c                	jne    c0019af4 <CPU::detectFeatures()+0x7ae>
c0019ae8:	50                   	push   eax
c0019ae9:	50                   	push   eax
c0019aea:	68 36 c3 02 c0       	push   0xc002c336
c0019aef:	e9 a5 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019af4:	83 f8 04             	cmp    eax,0x4
c0019af7:	75 0c                	jne    c0019b05 <CPU::detectFeatures()+0x7bf>
c0019af9:	50                   	push   eax
c0019afa:	50                   	push   eax
c0019afb:	68 42 c3 02 c0       	push   0xc002c342
c0019b00:	e9 94 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019b05:	83 f8 03             	cmp    eax,0x3
c0019b08:	0f 85 19 02 00 00    	jne    c0019d27 <CPU::detectFeatures()+0x9e1>
c0019b0e:	50                   	push   eax
c0019b0f:	50                   	push   eax
c0019b10:	68 4a c3 02 c0       	push   0xc002c34a
c0019b15:	e9 7f 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019b1a:	80 fa 06             	cmp    dl,0x6
c0019b1d:	0f 85 db 00 00 00    	jne    c0019bfe <CPU::detectFeatures()+0x8b8>
c0019b23:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b29:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b2e:	66 81 fa 80 01       	cmp    dx,0x180
c0019b33:	75 0c                	jne    c0019b41 <CPU::detectFeatures()+0x7fb>
c0019b35:	50                   	push   eax
c0019b36:	50                   	push   eax
c0019b37:	68 55 c3 02 c0       	push   0xc002c355
c0019b3c:	e9 58 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019b41:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019b47:	66 f7 c1 80 ff       	test   cx,0xff80
c0019b4c:	75 0c                	jne    c0019b5a <CPU::detectFeatures()+0x814>
c0019b4e:	50                   	push   eax
c0019b4f:	50                   	push   eax
c0019b50:	68 65 c3 02 c0       	push   0xc002c365
c0019b55:	e9 3f 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019b5a:	66 81 fa 40 02       	cmp    dx,0x240
c0019b5f:	75 0c                	jne    c0019b6d <CPU::detectFeatures()+0x827>
c0019b61:	55                   	push   ebp
c0019b62:	55                   	push   ebp
c0019b63:	68 6c c3 02 c0       	push   0xc002c36c
c0019b68:	e9 2c 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019b6d:	66 81 fa 80 02       	cmp    dx,0x280
c0019b72:	75 0c                	jne    c0019b80 <CPU::detectFeatures()+0x83a>
c0019b74:	57                   	push   edi
c0019b75:	57                   	push   edi
c0019b76:	68 75 c3 02 c0       	push   0xc002c375
c0019b7b:	e9 19 01 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019b80:	66 81 fa 40 03       	cmp    dx,0x340
c0019b85:	74 ed                	je     c0019b74 <CPU::detectFeatures()+0x82e>
c0019b87:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019b8c:	75 0c                	jne    c0019b9a <CPU::detectFeatures()+0x854>
c0019b8e:	56                   	push   esi
c0019b8f:	56                   	push   esi
c0019b90:	68 7c c3 02 c0       	push   0xc002c37c
c0019b95:	e9 ff 00 00 00       	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019b9a:	83 f8 06             	cmp    eax,0x6
c0019b9d:	0f 84 45 ff ff ff    	je     c0019ae8 <CPU::detectFeatures()+0x7a2>
c0019ba3:	83 f8 04             	cmp    eax,0x4
c0019ba6:	0f 84 4d ff ff ff    	je     c0019af9 <CPU::detectFeatures()+0x7b3>
c0019bac:	83 f8 03             	cmp    eax,0x3
c0019baf:	0f 85 72 01 00 00    	jne    c0019d27 <CPU::detectFeatures()+0x9e1>
c0019bb5:	51                   	push   ecx
c0019bb6:	51                   	push   ecx
c0019bb7:	68 85 c3 02 c0       	push   0xc002c385
c0019bbc:	53                   	push   ebx
c0019bbd:	e8 cc a8 ff ff       	call   c001448e <Device::setName(char const*)>
c0019bc2:	b1 c1                	mov    cl,0xc1
c0019bc4:	88 c8                	mov    al,cl
c0019bc6:	e6 22                	out    0x22,al
c0019bc8:	e4 23                	in     al,0x23
c0019bca:	88 c2                	mov    dl,al
c0019bcc:	88 c8                	mov    al,cl
c0019bce:	e6 22                	out    0x22,al
c0019bd0:	88 d0                	mov    al,dl
c0019bd2:	83 c8 10             	or     eax,0x10
c0019bd5:	e6 23                	out    0x23,al
c0019bd7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019bde:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019be1:	89 d0                	mov    eax,edx
c0019be3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019be9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019bed:	40                   	inc    eax
c0019bee:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019bf4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019bf9:	e9 a1 00 00 00       	jmp    c0019c9f <CPU::detectFeatures()+0x959>
c0019bfe:	83 f8 06             	cmp    eax,0x6
c0019c01:	0f 84 e1 fe ff ff    	je     c0019ae8 <CPU::detectFeatures()+0x7a2>
c0019c07:	83 f8 04             	cmp    eax,0x4
c0019c0a:	0f 84 e9 fe ff ff    	je     c0019af9 <CPU::detectFeatures()+0x7b3>
c0019c10:	83 f8 03             	cmp    eax,0x3
c0019c13:	0f 85 0e 01 00 00    	jne    c0019d27 <CPU::detectFeatures()+0x9e1>
c0019c19:	52                   	push   edx
c0019c1a:	52                   	push   edx
c0019c1b:	68 90 c3 02 c0       	push   0xc002c390
c0019c20:	eb 77                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c22:	83 f8 07             	cmp    eax,0x7
c0019c25:	75 09                	jne    c0019c30 <CPU::detectFeatures()+0x8ea>
c0019c27:	50                   	push   eax
c0019c28:	50                   	push   eax
c0019c29:	68 9a c3 02 c0       	push   0xc002c39a
c0019c2e:	eb 69                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c30:	83 f8 0a             	cmp    eax,0xa
c0019c33:	75 09                	jne    c0019c3e <CPU::detectFeatures()+0x8f8>
c0019c35:	50                   	push   eax
c0019c36:	50                   	push   eax
c0019c37:	68 a5 c3 02 c0       	push   0xc002c3a5
c0019c3c:	eb 5b                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c3e:	83 f8 0b             	cmp    eax,0xb
c0019c41:	75 09                	jne    c0019c4c <CPU::detectFeatures()+0x906>
c0019c43:	50                   	push   eax
c0019c44:	50                   	push   eax
c0019c45:	68 ad c3 02 c0       	push   0xc002c3ad
c0019c4a:	eb 4d                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c4c:	83 f8 08             	cmp    eax,0x8
c0019c4f:	75 09                	jne    c0019c5a <CPU::detectFeatures()+0x914>
c0019c51:	50                   	push   eax
c0019c52:	50                   	push   eax
c0019c53:	68 b6 c3 02 c0       	push   0xc002c3b6
c0019c58:	eb 3f                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c5a:	83 f8 09             	cmp    eax,0x9
c0019c5d:	75 09                	jne    c0019c68 <CPU::detectFeatures()+0x922>
c0019c5f:	50                   	push   eax
c0019c60:	50                   	push   eax
c0019c61:	68 be c3 02 c0       	push   0xc002c3be
c0019c66:	eb 31                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c68:	83 f8 05             	cmp    eax,0x5
c0019c6b:	75 09                	jne    c0019c76 <CPU::detectFeatures()+0x930>
c0019c6d:	50                   	push   eax
c0019c6e:	50                   	push   eax
c0019c6f:	68 c6 c3 02 c0       	push   0xc002c3c6
c0019c74:	eb 23                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c76:	83 f8 0c             	cmp    eax,0xc
c0019c79:	75 09                	jne    c0019c84 <CPU::detectFeatures()+0x93e>
c0019c7b:	55                   	push   ebp
c0019c7c:	55                   	push   ebp
c0019c7d:	68 d4 c3 02 c0       	push   0xc002c3d4
c0019c82:	eb 15                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c84:	83 f8 0d             	cmp    eax,0xd
c0019c87:	75 09                	jne    c0019c92 <CPU::detectFeatures()+0x94c>
c0019c89:	57                   	push   edi
c0019c8a:	57                   	push   edi
c0019c8b:	68 df c3 02 c0       	push   0xc002c3df
c0019c90:	eb 07                	jmp    c0019c99 <CPU::detectFeatures()+0x953>
c0019c92:	56                   	push   esi
c0019c93:	56                   	push   esi
c0019c94:	68 f3 c3 02 c0       	push   0xc002c3f3
c0019c99:	53                   	push   ebx
c0019c9a:	e8 ef a7 ff ff       	call   c001448e <Device::setName(char const*)>
c0019c9f:	83 c4 10             	add    esp,0x10
c0019ca2:	e9 80 00 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x9e1>
c0019ca7:	51                   	push   ecx
c0019ca8:	51                   	push   ecx
c0019ca9:	68 3f c2 02 c0       	push   0xc002c23f
c0019cae:	57                   	push   edi
c0019caf:	e8 74 6b fe ff       	call   c0000828 <strcpy>
c0019cb4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019cbe:	e8 eb 65 fe ff       	call   c00002ae <is486>
c0019cc3:	83 c4 10             	add    esp,0x10
c0019cc6:	85 c0                	test   eax,eax
c0019cc8:	74 2b                	je     c0019cf5 <CPU::detectFeatures()+0x9af>
c0019cca:	52                   	push   edx
c0019ccb:	52                   	push   edx
c0019ccc:	68 ff c3 02 c0       	push   0xc002c3ff
c0019cd1:	53                   	push   ebx
c0019cd2:	e8 b7 a7 ff ff       	call   c001448e <Device::setName(char const*)>
c0019cd7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019cde:	0f 20 c0             	mov    eax,cr0
c0019ce1:	83 e0 14             	and    eax,0x14
c0019ce4:	83 c4 10             	add    esp,0x10
c0019ce7:	83 f8 04             	cmp    eax,0x4
c0019cea:	75 1f                	jne    c0019d0b <CPU::detectFeatures()+0x9c5>
c0019cec:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019cf3:	eb 32                	jmp    c0019d27 <CPU::detectFeatures()+0x9e1>
c0019cf5:	50                   	push   eax
c0019cf6:	50                   	push   eax
c0019cf7:	68 0a c4 02 c0       	push   0xc002c40a
c0019cfc:	53                   	push   ebx
c0019cfd:	e8 8c a7 ff ff       	call   c001448e <Device::setName(char const*)>
c0019d02:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d09:	eb d3                	jmp    c0019cde <CPU::detectFeatures()+0x998>
c0019d0b:	e8 79 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d10:	83 e0 01             	and    eax,0x1
c0019d13:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d16:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d1c:	83 e0 fd             	and    eax,0xfffffffd
c0019d1f:	09 d0                	or     eax,edx
c0019d21:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d27:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019d2e:	83 c4 4c             	add    esp,0x4c
c0019d31:	5b                   	pop    ebx
c0019d32:	5e                   	pop    esi
c0019d33:	5f                   	pop    edi
c0019d34:	5d                   	pop    ebp
c0019d35:	c3                   	ret    

c0019d36 <CPU::setupSMEP()>:
c0019d36:	0f 20 e0             	mov    eax,cr4
c0019d39:	0d 00 00 10 00       	or     eax,0x100000
c0019d3e:	0f 22 e0             	mov    cr4,eax
c0019d41:	c3                   	ret    

c0019d42 <CPU::setupUMIP()>:
c0019d42:	0f 20 e0             	mov    eax,cr4
c0019d45:	80 cc 08             	or     ah,0x8
c0019d48:	0f 22 e0             	mov    cr4,eax
c0019d4b:	c3                   	ret    

c0019d4c <CPU::setupTSC()>:
c0019d4c:	0f 20 e0             	mov    eax,cr4
c0019d4f:	83 c8 04             	or     eax,0x4
c0019d52:	0f 22 e0             	mov    cr4,eax
c0019d55:	c3                   	ret    

c0019d56 <CPU::setupLargePages()>:
c0019d56:	0f 20 e0             	mov    eax,cr4
c0019d59:	83 c8 10             	or     eax,0x10
c0019d5c:	0f 22 e0             	mov    cr4,eax
c0019d5f:	c3                   	ret    

c0019d60 <CPU::setupPAT()>:
c0019d60:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0019d65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d6c:	74 2c                	je     c0019d9a <CPU::setupPAT()+0x3a>
c0019d6e:	53                   	push   ebx
c0019d6f:	83 ec 10             	sub    esp,0x10
c0019d72:	68 77 02 00 00       	push   0x277
c0019d77:	50                   	push   eax
c0019d78:	e8 e9 50 ff ff       	call   c000ee66 <Computer::rdmsr(unsigned int)>
c0019d7d:	83 e2 f8             	and    edx,0xfffffff8
c0019d80:	83 ca 01             	or     edx,0x1
c0019d83:	52                   	push   edx
c0019d84:	50                   	push   eax
c0019d85:	68 77 02 00 00       	push   0x277
c0019d8a:	ff 35 c8 ee 02 c0    	push   DWORD PTR ds:0xc002eec8
c0019d90:	e8 fd 50 ff ff       	call   c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019d95:	83 c4 28             	add    esp,0x28
c0019d98:	5b                   	pop    ebx
c0019d99:	c3                   	ret    
c0019d9a:	c3                   	ret    
c0019d9b:	90                   	nop

c0019d9c <CPU::setupMTRR()>:
c0019d9c:	c3                   	ret    
c0019d9d:	90                   	nop

c0019d9e <CPU::setupGlobalPages()>:
c0019d9e:	0f 20 e0             	mov    eax,cr4
c0019da1:	0c 80                	or     al,0x80
c0019da3:	0f 22 e0             	mov    cr4,eax
c0019da6:	c3                   	ret    
c0019da7:	90                   	nop

c0019da8 <CPU::allowUsermodeDataAccess()>:
c0019da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dac:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019db3:	74 03                	je     c0019db8 <CPU::allowUsermodeDataAccess()+0x10>
c0019db5:	0f 01 cb             	stac   
c0019db8:	c3                   	ret    
c0019db9:	90                   	nop

c0019dba <CPU::prohibitUsermodeDataAccess()>:
c0019dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dbe:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019dc5:	74 03                	je     c0019dca <CPU::prohibitUsermodeDataAccess()+0x10>
c0019dc7:	0f 01 ca             	clac   
c0019dca:	c3                   	ret    
c0019dcb:	90                   	nop

c0019dcc <CPU::setupSMAP()>:
c0019dcc:	0f 20 e0             	mov    eax,cr4
c0019dcf:	0d 00 00 20 00       	or     eax,0x200000
c0019dd4:	0f 22 e0             	mov    cr4,eax
c0019dd7:	eb e1                	jmp    c0019dba <CPU::prohibitUsermodeDataAccess()>
c0019dd9:	90                   	nop

c0019dda <CPU::setupFeatures()>:
c0019dda:	83 ec 0c             	sub    esp,0xc
c0019ddd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019de1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019de8:	74 07                	je     c0019df1 <CPU::setupFeatures()+0x17>
c0019dea:	52                   	push   edx
c0019deb:	e8 46 ff ff ff       	call   c0019d36 <CPU::setupSMEP()>
c0019df0:	58                   	pop    eax
c0019df1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019df8:	74 07                	je     c0019e01 <CPU::setupFeatures()+0x27>
c0019dfa:	52                   	push   edx
c0019dfb:	e8 cc ff ff ff       	call   c0019dcc <CPU::setupSMAP()>
c0019e00:	58                   	pop    eax
c0019e01:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e08:	74 07                	je     c0019e11 <CPU::setupFeatures()+0x37>
c0019e0a:	52                   	push   edx
c0019e0b:	e8 32 ff ff ff       	call   c0019d42 <CPU::setupUMIP()>
c0019e10:	58                   	pop    eax
c0019e11:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e18:	74 07                	je     c0019e21 <CPU::setupFeatures()+0x47>
c0019e1a:	52                   	push   edx
c0019e1b:	e8 2c ff ff ff       	call   c0019d4c <CPU::setupTSC()>
c0019e20:	58                   	pop    eax
c0019e21:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e28:	74 07                	je     c0019e31 <CPU::setupFeatures()+0x57>
c0019e2a:	52                   	push   edx
c0019e2b:	e8 26 ff ff ff       	call   c0019d56 <CPU::setupLargePages()>
c0019e30:	59                   	pop    ecx
c0019e31:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e38:	74 07                	je     c0019e41 <CPU::setupFeatures()+0x67>
c0019e3a:	52                   	push   edx
c0019e3b:	e8 5e ff ff ff       	call   c0019d9e <CPU::setupGlobalPages()>
c0019e40:	58                   	pop    eax
c0019e41:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019e48:	74 0c                	je     c0019e56 <CPU::setupFeatures()+0x7c>
c0019e4a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e4e:	83 c4 0c             	add    esp,0xc
c0019e51:	e9 0a ff ff ff       	jmp    c0019d60 <CPU::setupPAT()>
c0019e56:	83 c4 0c             	add    esp,0xc
c0019e59:	c3                   	ret    

c0019e5a <CPU::open(int, int, void*)>:
c0019e5a:	57                   	push   edi
c0019e5b:	56                   	push   esi
c0019e5c:	53                   	push   ebx
c0019e5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e65:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e6b:	83 ec 0c             	sub    esp,0xc
c0019e6e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e74:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019e7a:	50                   	push   eax
c0019e7b:	e8 d2 52 ff ff       	call   c000f152 <GDT::setup()>
c0019e80:	83 c4 0c             	add    esp,0xc
c0019e83:	6a 00                	push   0x0
c0019e85:	68 ef be ad de       	push   0xdeadbeef
c0019e8a:	57                   	push   edi
c0019e8b:	e8 52 75 ff ff       	call   c00113e2 <TSS::setup(unsigned long, unsigned long)>
c0019e90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019e93:	e8 2a 75 ff ff       	call   c00113c2 <TSS::flush()>
c0019e98:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019e9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ea1:	e8 10 55 ff ff       	call   c000f3b6 <IDT::setup()>
c0019ea6:	b8 00 04 00 00       	mov    eax,0x400
c0019eab:	0f 23 f8             	mov    db7,eax
c0019eae:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019eb8:	e8 6f 60 ff ff       	call   c000ff2c <Phys::allocatePage()>
c0019ebd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ec3:	89 30                	mov    DWORD PTR [eax],esi
c0019ec5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ecb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019ece:	58                   	pop    eax
c0019ecf:	5a                   	pop    edx
c0019ed0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019eda:	e8 a3 86 ff ff       	call   c0012582 <VAS::setCPUSpecific(unsigned long)>
c0019edf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ee2:	e8 5f f4 ff ff       	call   c0019346 <CPU::detectFeatures()>
c0019ee7:	e8 f9 b9 ff ff       	call   c00158e5 <setupInterruptController()>
c0019eec:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019ef2:	a1 e0 ee 02 c0       	mov    eax,ds:0xc002eee0
c0019ef7:	83 e0 10             	and    eax,0x10
c0019efa:	83 f8 01             	cmp    eax,0x1
c0019efd:	19 c0                	sbb    eax,eax
c0019eff:	83 e0 46             	and    eax,0x46
c0019f02:	83 c0 1e             	add    eax,0x1e
c0019f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f08:	e8 30 d0 ff ff       	call   c0016f3d <setupTimer(int)>
c0019f0d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f16:	e8 bf fe ff ff       	call   c0019dda <CPU::setupFeatures()>
c0019f1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f1e:	e8 a7 f1 ff ff       	call   c00190ca <CPU::displayFeatures()>
c0019f23:	83 c4 10             	add    esp,0x10
c0019f26:	31 c0                	xor    eax,eax
c0019f28:	5b                   	pop    ebx
c0019f29:	5e                   	pop    esi
c0019f2a:	5f                   	pop    edi
c0019f2b:	c3                   	ret    

c0019f2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f2c:	57                   	push   edi
c0019f2d:	56                   	push   esi
c0019f2e:	53                   	push   ebx
c0019f2f:	51                   	push   ecx
c0019f30:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f34:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f37:	0f 02 c0             	lar    eax,ax
c0019f3a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f3d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019f41:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019f44:	88 ca                	mov    dl,cl
c0019f46:	c0 ea 06             	shr    dl,0x6
c0019f49:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019f4d:	89 ca                	mov    edx,ecx
c0019f4f:	66 c1 ea 03          	shr    dx,0x3
c0019f53:	83 e2 07             	and    edx,0x7
c0019f56:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f5b:	88 17                	mov    BYTE PTR [edi],dl
c0019f5d:	0f 84 a6 01 00 00    	je     c001a109 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f63:	83 e1 07             	and    ecx,0x7
c0019f66:	80 f9 04             	cmp    cl,0x4
c0019f69:	0f 84 98 00 00 00    	je     c001a007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f6f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f74:	0f 95 c0             	setne  al
c0019f77:	80 f9 05             	cmp    cl,0x5
c0019f7a:	0f 95 c2             	setne  dl
c0019f7d:	08 c2                	or     dl,al
c0019f7f:	74 79                	je     c0019ffa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019f81:	84 c9                	test   cl,cl
c0019f83:	75 05                	jne    c0019f8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019f85:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019f88:	eb 3c                	jmp    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f8a:	80 f9 01             	cmp    cl,0x1
c0019f8d:	75 05                	jne    c0019f94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019f8f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f92:	eb 32                	jmp    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f94:	80 f9 02             	cmp    cl,0x2
c0019f97:	75 05                	jne    c0019f9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019f99:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019f9c:	eb 28                	jmp    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f9e:	31 c0                	xor    eax,eax
c0019fa0:	80 f9 03             	cmp    cl,0x3
c0019fa3:	75 05                	jne    c0019faa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019fa5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019fa8:	eb 1c                	jmp    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019faa:	80 f9 05             	cmp    cl,0x5
c0019fad:	75 05                	jne    c0019fb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019faf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019fb2:	eb 12                	jmp    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fb4:	80 f9 06             	cmp    cl,0x6
c0019fb7:	75 05                	jne    c0019fbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019fb9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fbc:	eb 08                	jmp    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fbe:	80 f9 07             	cmp    cl,0x7
c0019fc1:	75 03                	jne    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019fc6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019fcb:	75 10                	jne    c0019fdd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019fcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019fd1:	b9 03 00 00 00       	mov    ecx,0x3
c0019fd6:	01 d0                	add    eax,edx
c0019fd8:	e9 37 01 00 00       	jmp    c001a114 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019fdd:	b9 02 00 00 00       	mov    ecx,0x2
c0019fe2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019fe7:	0f 85 27 01 00 00    	jne    c001a114 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019fed:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019ff0:	b9 06 00 00 00       	mov    ecx,0x6
c0019ff5:	e9 1a 01 00 00       	jmp    c001a114 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ffa:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019ffd:	b9 06 00 00 00       	mov    ecx,0x6
c001a002:	e9 0f 01 00 00       	jmp    c001a116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a007:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a00a:	88 ca                	mov    dl,cl
c001a00c:	c0 ea 06             	shr    dl,0x6
c001a00f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a013:	89 ca                	mov    edx,ecx
c001a015:	66 c1 ea 03          	shr    dx,0x3
c001a019:	83 e2 07             	and    edx,0x7
c001a01c:	80 e1 07             	and    cl,0x7
c001a01f:	75 05                	jne    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a021:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a024:	eb 4c                	jmp    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a026:	80 f9 01             	cmp    cl,0x1
c001a029:	75 05                	jne    c001a030 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a02b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a02e:	eb 42                	jmp    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a030:	80 f9 02             	cmp    cl,0x2
c001a033:	75 05                	jne    c001a03a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a035:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a038:	eb 38                	jmp    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a03a:	80 f9 03             	cmp    cl,0x3
c001a03d:	75 05                	jne    c001a044 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a03f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a042:	eb 2e                	jmp    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a044:	80 f9 04             	cmp    cl,0x4
c001a047:	75 12                	jne    c001a05b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a049:	f6 c4 60             	test   ah,0x60
c001a04c:	75 08                	jne    c001a056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a04e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a051:	8d 78 14             	lea    edi,[eax+0x14]
c001a054:	eb 1c                	jmp    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a056:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a059:	eb 17                	jmp    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a05b:	80 f9 05             	cmp    cl,0x5
c001a05e:	75 05                	jne    c001a065 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a060:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a063:	eb 0d                	jmp    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a065:	80 f9 06             	cmp    cl,0x6
c001a068:	75 05                	jne    c001a06f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a06a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a06d:	eb 03                	jmp    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a06f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a072:	84 d2                	test   dl,dl
c001a074:	75 05                	jne    c001a07b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a076:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a079:	eb 3c                	jmp    c001a0b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a07b:	80 fa 01             	cmp    dl,0x1
c001a07e:	75 05                	jne    c001a085 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a080:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a083:	eb 32                	jmp    c001a0b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a085:	80 fa 02             	cmp    dl,0x2
c001a088:	75 05                	jne    c001a08f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a08a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a08d:	eb 28                	jmp    c001a0b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a08f:	80 fa 03             	cmp    dl,0x3
c001a092:	75 05                	jne    c001a099 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a094:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a097:	eb 1e                	jmp    c001a0b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a099:	31 c0                	xor    eax,eax
c001a09b:	80 fa 04             	cmp    dl,0x4
c001a09e:	74 17                	je     c001a0b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0a0:	80 fa 05             	cmp    dl,0x5
c001a0a3:	75 05                	jne    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a0a5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0a8:	eb 0d                	jmp    c001a0b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0aa:	80 fa 06             	cmp    dl,0x6
c001a0ad:	75 05                	jne    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a0af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0b2:	eb 03                	jmp    c001a0b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0b7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0bc:	0f 94 c2             	sete   dl
c001a0bf:	80 f9 05             	cmp    cl,0x5
c001a0c2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a0c6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a0cb:	d3 e0                	shl    eax,cl
c001a0cd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a0d1:	74 0a                	je     c001a0dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a0d3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a0d6:	b9 07 00 00 00       	mov    ecx,0x7
c001a0db:	eb 37                	jmp    c001a114 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0dd:	01 f8                	add    eax,edi
c001a0df:	b9 03 00 00 00       	mov    ecx,0x3
c001a0e4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0e9:	74 2b                	je     c001a116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0eb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a0f0:	75 0d                	jne    c001a0ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a0f2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a0f6:	01 c8                	add    eax,ecx
c001a0f8:	b9 04 00 00 00       	mov    ecx,0x4
c001a0fd:	eb 17                	jmp    c001a116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0ff:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a102:	b9 07 00 00 00       	mov    ecx,0x7
c001a107:	eb 0d                	jmp    c001a116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a109:	b9 02 00 00 00       	mov    ecx,0x2
c001a10e:	b2 01                	mov    dl,0x1
c001a110:	31 c0                	xor    eax,eax
c001a112:	eb 02                	jmp    c001a116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a114:	31 d2                	xor    edx,edx
c001a116:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a11a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a11c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a120:	88 11                	mov    BYTE PTR [ecx],dl
c001a122:	5a                   	pop    edx
c001a123:	5b                   	pop    ebx
c001a124:	5e                   	pop    esi
c001a125:	5f                   	pop    edi
c001a126:	c3                   	ret    

c001a127 <Krnl::smpEntry()>:
c001a127:	eb fe                	jmp    c001a127 <Krnl::smpEntry()>

c001a129 <Krnl::startCPU(int)>:
c001a129:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001a12e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a135:	0f 84 36 01 00 00    	je     c001a271 <Krnl::startCPU(int)+0x148>
c001a13b:	53                   	push   ebx
c001a13c:	83 ec 10             	sub    esp,0x10
c001a13f:	fa                   	cli    
c001a140:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001a146:	6a 1b                	push   0x1b
c001a148:	ff 35 c8 ee 02 c0    	push   DWORD PTR ds:0xc002eec8
c001a14e:	e8 13 4d ff ff       	call   c000ee66 <Computer::rdmsr(unsigned int)>
c001a153:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a158:	89 c3                	mov    ebx,eax
c001a15a:	58                   	pop    eax
c001a15b:	5a                   	pop    edx
c001a15c:	53                   	push   ebx
c001a15d:	68 44 c4 02 c0       	push   0xc002c444
c001a162:	e8 10 8d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001a167:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a175:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a17f:	c1 e0 18             	shl    eax,0x18
c001a182:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a188:	83 c4 10             	add    esp,0x10
c001a18b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a191:	09 c2                	or     edx,eax
c001a193:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a199:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a19f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1a5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1ab:	80 cd c5             	or     ch,0xc5
c001a1ae:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1b4:	f3 90                	pause  
c001a1b6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1b8:	0f ba e1 0c          	bt     ecx,0xc
c001a1bc:	72 f6                	jb     c001a1b4 <Krnl::startCPU(int)+0x8b>
c001a1be:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1c4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1ca:	09 c1                	or     ecx,eax
c001a1cc:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1d2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1d8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1de:	80 cd 85             	or     ch,0x85
c001a1e1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1e7:	f3 90                	pause  
c001a1e9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1eb:	0f ba e1 0c          	bt     ecx,0xc
c001a1ef:	72 f6                	jb     c001a1e7 <Krnl::startCPU(int)+0xbe>
c001a1f1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1fb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a201:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a207:	09 c1                	or     ecx,eax
c001a209:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a20f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a215:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a21b:	81 c9 02 06 00 00    	or     ecx,0x602
c001a221:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a227:	f3 90                	pause  
c001a229:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a22b:	0f ba e1 0c          	bt     ecx,0xc
c001a22f:	72 f6                	jb     c001a227 <Krnl::startCPU(int)+0xfe>
c001a231:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a23b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a241:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a247:	09 c8                	or     eax,ecx
c001a249:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a24f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a255:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a25a:	0d 02 06 00 00       	or     eax,0x602
c001a25f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a265:	f3 90                	pause  
c001a267:	8b 02                	mov    eax,DWORD PTR [edx]
c001a269:	0f ba e0 0c          	bt     eax,0xc
c001a26d:	72 f6                	jb     c001a265 <Krnl::startCPU(int)+0x13c>
c001a26f:	eb fe                	jmp    c001a26f <Krnl::startCPU(int)+0x146>
c001a271:	c3                   	ret    

c001a272 <Krnl::startCPUs()>:
c001a272:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001a277:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a27d:	88 c2                	mov    dl,al
c001a27f:	83 e2 0a             	and    edx,0xa
c001a282:	80 fa 0a             	cmp    dl,0xa
c001a285:	75 09                	jne    c001a290 <Krnl::startCPUs()+0x1e>
c001a287:	a8 01                	test   al,0x1
c001a289:	74 05                	je     c001a290 <Krnl::startCPUs()+0x1e>
c001a28b:	e9 0b 5f fe ff       	jmp    c000019b <prepareTramp>
c001a290:	c3                   	ret    
c001a291:	90                   	nop

c001a292 <EnvVarContainer::getEnv(char const*)>:
c001a292:	57                   	push   edi
c001a293:	56                   	push   esi
c001a294:	53                   	push   ebx
c001a295:	31 db                	xor    ebx,ebx
c001a297:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a29b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a29d:	7e 2b                	jle    c001a2ca <EnvVarContainer::getEnv(char const*)+0x38>
c001a29f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a2a6:	50                   	push   eax
c001a2a7:	50                   	push   eax
c001a2a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2ab:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a2ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a2b2:	e8 fd 65 fe ff       	call   c00008b4 <strcmp>
c001a2b7:	83 c4 10             	add    esp,0x10
c001a2ba:	85 c0                	test   eax,eax
c001a2bc:	75 09                	jne    c001a2c7 <EnvVarContainer::getEnv(char const*)+0x35>
c001a2be:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2c1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a2c5:	eb 05                	jmp    c001a2cc <EnvVarContainer::getEnv(char const*)+0x3a>
c001a2c7:	43                   	inc    ebx
c001a2c8:	eb d1                	jmp    c001a29b <EnvVarContainer::getEnv(char const*)+0x9>
c001a2ca:	31 c0                	xor    eax,eax
c001a2cc:	5b                   	pop    ebx
c001a2cd:	5e                   	pop    esi
c001a2ce:	5f                   	pop    edi
c001a2cf:	c3                   	ret    

c001a2d0 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a2d0:	57                   	push   edi
c001a2d1:	56                   	push   esi
c001a2d2:	53                   	push   ebx
c001a2d3:	83 ec 1c             	sub    esp,0x1c
c001a2d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a2da:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a2de:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a2e2:	57                   	push   edi
c001a2e3:	e8 a0 64 fe ff       	call   c0000788 <strlen>
c001a2e8:	40                   	inc    eax
c001a2e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2ec:	e8 cf 55 ff ff       	call   c000f8c0 <malloc>
c001a2f1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2f8:	e8 8b 64 fe ff       	call   c0000788 <strlen>
c001a2fd:	40                   	inc    eax
c001a2fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001a301:	e8 ba 55 ff ff       	call   c000f8c0 <malloc>
c001a306:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a309:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a30d:	e8 76 64 fe ff       	call   c0000788 <strlen>
c001a312:	83 c4 0c             	add    esp,0xc
c001a315:	40                   	inc    eax
c001a316:	50                   	push   eax
c001a317:	6a 00                	push   0x0
c001a319:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a31d:	e8 4a 64 fe ff       	call   c000076c <memset>
c001a322:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a325:	e8 5e 64 fe ff       	call   c0000788 <strlen>
c001a32a:	83 c4 0c             	add    esp,0xc
c001a32d:	40                   	inc    eax
c001a32e:	50                   	push   eax
c001a32f:	57                   	push   edi
c001a330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a334:	e8 77 6a fe ff       	call   c0000db0 <realmemcpy>
c001a339:	89 34 24             	mov    DWORD PTR [esp],esi
c001a33c:	e8 47 64 fe ff       	call   c0000788 <strlen>
c001a341:	83 c4 0c             	add    esp,0xc
c001a344:	40                   	inc    eax
c001a345:	50                   	push   eax
c001a346:	6a 00                	push   0x0
c001a348:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a34c:	e8 1b 64 fe ff       	call   c000076c <memset>
c001a351:	89 34 24             	mov    DWORD PTR [esp],esi
c001a354:	e8 2f 64 fe ff       	call   c0000788 <strlen>
c001a359:	83 c4 0c             	add    esp,0xc
c001a35c:	40                   	inc    eax
c001a35d:	50                   	push   eax
c001a35e:	56                   	push   esi
c001a35f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a363:	e8 48 6a fe ff       	call   c0000db0 <realmemcpy>
c001a368:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a36a:	40                   	inc    eax
c001a36b:	89 03                	mov    DWORD PTR [ebx],eax
c001a36d:	c1 e0 03             	shl    eax,0x3
c001a370:	5a                   	pop    edx
c001a371:	59                   	pop    ecx
c001a372:	50                   	push   eax
c001a373:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a376:	e8 31 55 ff ff       	call   c000f8ac <realloc>
c001a37b:	83 c4 0c             	add    esp,0xc
c001a37e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a381:	6a 08                	push   0x8
c001a383:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a387:	52                   	push   edx
c001a388:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a38a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a38e:	50                   	push   eax
c001a38f:	e8 1c 6a fe ff       	call   c0000db0 <realmemcpy>
c001a394:	83 c4 20             	add    esp,0x20
c001a397:	5b                   	pop    ebx
c001a398:	5e                   	pop    esi
c001a399:	5f                   	pop    edi
c001a39a:	c3                   	ret    
c001a39b:	90                   	nop

c001a39c <EnvVarContainer::deleteEnv(char const*)>:
c001a39c:	c3                   	ret    
c001a39d:	90                   	nop

c001a39e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a39e:	55                   	push   ebp
c001a39f:	57                   	push   edi
c001a3a0:	56                   	push   esi
c001a3a1:	53                   	push   ebx
c001a3a2:	81 ec 38 01 00 00    	sub    esp,0x138
c001a3a8:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a3af:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a3b6:	68 14 01 00 00       	push   0x114
c001a3bb:	e8 00 55 ff ff       	call   c000f8c0 <malloc>
c001a3c0:	83 c4 0c             	add    esp,0xc
c001a3c3:	89 c7                	mov    edi,eax
c001a3c5:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a3c8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a3cf:	50                   	push   eax
c001a3d0:	e8 01 90 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001a3d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a3d8:	e8 cb 92 ff ff       	call   c00136a8 <File::exists()>
c001a3dd:	83 c4 10             	add    esp,0x10
c001a3e0:	84 c0                	test   al,al
c001a3e2:	75 31                	jne    c001a415 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a3e4:	51                   	push   ecx
c001a3e5:	51                   	push   ecx
c001a3e6:	6a 12                	push   0x12
c001a3e8:	57                   	push   edi
c001a3e9:	e8 4c 90 ff ff       	call   c001343a <File::open(FileOpenMode)>
c001a3ee:	8b 07                	mov    eax,DWORD PTR [edi]
c001a3f0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a3f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a3f6:	e8 8d 63 fe ff       	call   c0000788 <strlen>
c001a3fb:	5a                   	pop    edx
c001a3fc:	31 d2                	xor    edx,edx
c001a3fe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a402:	51                   	push   ecx
c001a403:	55                   	push   ebp
c001a404:	52                   	push   edx
c001a405:	50                   	push   eax
c001a406:	57                   	push   edi
c001a407:	ff d3                	call   ebx
c001a409:	83 c4 14             	add    esp,0x14
c001a40c:	57                   	push   edi
c001a40d:	e8 86 90 ff ff       	call   c0013498 <File::close()>
c001a412:	83 c4 10             	add    esp,0x10
c001a415:	31 db                	xor    ebx,ebx
c001a417:	50                   	push   eax
c001a418:	31 ed                	xor    ebp,ebp
c001a41a:	68 00 01 00 00       	push   0x100
c001a41f:	6a 00                	push   0x0
c001a421:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a425:	50                   	push   eax
c001a426:	e8 41 63 fe ff       	call   c000076c <memset>
c001a42b:	58                   	pop    eax
c001a42c:	5a                   	pop    edx
c001a42d:	6a 01                	push   0x1
c001a42f:	57                   	push   edi
c001a430:	e8 05 90 ff ff       	call   c001343a <File::open(FileOpenMode)>
c001a435:	83 c4 10             	add    esp,0x10
c001a438:	83 ec 0c             	sub    esp,0xc
c001a43b:	8b 07                	mov    eax,DWORD PTR [edi]
c001a43d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a441:	51                   	push   ecx
c001a442:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a446:	52                   	push   edx
c001a447:	6a 00                	push   0x0
c001a449:	6a 01                	push   0x1
c001a44b:	57                   	push   edi
c001a44c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a44f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a453:	83 c4 20             	add    esp,0x20
c001a456:	3c 0d                	cmp    al,0xd
c001a458:	0f 84 12 01 00 00    	je     c001a570 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a45e:	85 db                	test   ebx,ebx
c001a460:	0f 84 fd 00 00 00    	je     c001a563 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a466:	3c 0a                	cmp    al,0xa
c001a468:	74 13                	je     c001a47d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a46a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a46f:	74 0c                	je     c001a47d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a471:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a477:	0f 8e e6 00 00 00    	jle    c001a563 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a47d:	83 ec 0c             	sub    esp,0xc
c001a480:	8d 53 01             	lea    edx,[ebx+0x1]
c001a483:	29 dd                	sub    ebp,ebx
c001a485:	52                   	push   edx
c001a486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a48a:	e8 31 54 ff ff       	call   c000f8c0 <malloc>
c001a48f:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a492:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a496:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a499:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a49d:	e8 1e 54 ff ff       	call   c000f8c0 <malloc>
c001a4a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a4a6:	83 c4 0c             	add    esp,0xc
c001a4a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4ad:	52                   	push   edx
c001a4ae:	6a 00                	push   0x0
c001a4b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4b4:	e8 b3 62 fe ff       	call   c000076c <memset>
c001a4b9:	83 c4 0c             	add    esp,0xc
c001a4bc:	53                   	push   ebx
c001a4bd:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a4c1:	55                   	push   ebp
c001a4c2:	01 eb                	add    ebx,ebp
c001a4c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4c8:	e8 e3 68 fe ff       	call   c0000db0 <realmemcpy>
c001a4cd:	83 c4 0c             	add    esp,0xc
c001a4d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4d4:	51                   	push   ecx
c001a4d5:	6a 00                	push   0x0
c001a4d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4db:	e8 8c 62 fe ff       	call   c000076c <memset>
c001a4e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4e3:	e8 a0 62 fe ff       	call   c0000788 <strlen>
c001a4e8:	83 c4 0c             	add    esp,0xc
c001a4eb:	50                   	push   eax
c001a4ec:	53                   	push   ebx
c001a4ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4f1:	e8 ba 68 fe ff       	call   c0000db0 <realmemcpy>
c001a4f6:	5b                   	pop    ebx
c001a4f7:	58                   	pop    eax
c001a4f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4fc:	68 55 c4 02 c0       	push   0xc002c455
c001a501:	e8 71 89 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001a506:	8b 06                	mov    eax,DWORD PTR [esi]
c001a508:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a50b:	40                   	inc    eax
c001a50c:	83 c4 10             	add    esp,0x10
c001a50f:	89 06                	mov    DWORD PTR [esi],eax
c001a511:	85 d2                	test   edx,edx
c001a513:	75 0c                	jne    c001a521 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a515:	83 ec 0c             	sub    esp,0xc
c001a518:	6a 08                	push   0x8
c001a51a:	e8 a1 53 ff ff       	call   c000f8c0 <malloc>
c001a51f:	eb 0c                	jmp    c001a52d <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a521:	c1 e0 03             	shl    eax,0x3
c001a524:	51                   	push   ecx
c001a525:	51                   	push   ecx
c001a526:	50                   	push   eax
c001a527:	52                   	push   edx
c001a528:	e8 7f 53 ff ff       	call   c000f8ac <realloc>
c001a52d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a530:	83 c4 10             	add    esp,0x10
c001a533:	31 db                	xor    ebx,ebx
c001a535:	52                   	push   edx
c001a536:	6a 08                	push   0x8
c001a538:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a53c:	50                   	push   eax
c001a53d:	8b 16                	mov    edx,DWORD PTR [esi]
c001a53f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a542:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a546:	50                   	push   eax
c001a547:	e8 64 68 fe ff       	call   c0000db0 <realmemcpy>
c001a54c:	83 c4 0c             	add    esp,0xc
c001a54f:	68 00 01 00 00       	push   0x100
c001a554:	6a 00                	push   0x0
c001a556:	55                   	push   ebp
c001a557:	31 ed                	xor    ebp,ebp
c001a559:	e8 0e 62 fe ff       	call   c000076c <memset>
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	eb 0d                	jmp    c001a570 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a563:	3c 3d                	cmp    al,0x3d
c001a565:	74 07                	je     c001a56e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a567:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a56b:	45                   	inc    ebp
c001a56c:	eb 02                	jmp    c001a570 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a56e:	89 eb                	mov    ebx,ebp
c001a570:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a575:	0f 85 bd fe ff ff    	jne    c001a438 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a57b:	50                   	push   eax
c001a57c:	50                   	push   eax
c001a57d:	ff 36                	push   DWORD PTR [esi]
c001a57f:	68 63 c4 02 c0       	push   0xc002c463
c001a584:	e8 ee 88 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001a589:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a58f:	5b                   	pop    ebx
c001a590:	5e                   	pop    esi
c001a591:	5f                   	pop    edi
c001a592:	5d                   	pop    ebp
c001a593:	c3                   	ret    

c001a594 <EnvVarContainer::__loadSystem()>:
c001a594:	83 ec 10             	sub    esp,0x10
c001a597:	68 00 e4 02 c0       	push   0xc002e400
c001a59c:	68 8e c4 02 c0       	push   0xc002c48e
c001a5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5a5:	e8 f4 fd ff ff       	call   c001a39e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a5aa:	83 c4 1c             	add    esp,0x1c
c001a5ad:	c3                   	ret    

c001a5ae <EnvVarContainer::__loadUser()>:
c001a5ae:	c3                   	ret    
c001a5af:	90                   	nop

c001a5b0 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a5b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a5ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a5c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a5d0:	90                   	nop
c001a5d1:	c3                   	ret    

c001a5d2 <EnvVarContainer::~EnvVarContainer()>:
c001a5d2:	83 ec 0c             	sub    esp,0xc
c001a5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5dc:	85 c0                	test   eax,eax
c001a5de:	74 1d                	je     c001a5fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5e6:	85 c0                	test   eax,eax
c001a5e8:	74 13                	je     c001a5fd <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5f1:	83 ec 0c             	sub    esp,0xc
c001a5f4:	50                   	push   eax
c001a5f5:	e8 d6 52 ff ff       	call   c000f8d0 <free>
c001a5fa:	83 c4 10             	add    esp,0x10
c001a5fd:	90                   	nop
c001a5fe:	83 c4 0c             	add    esp,0xc
c001a601:	c3                   	ret    

c001a602 <Krnl::getEnv(Process*, char const*)>:
c001a602:	53                   	push   ebx
c001a603:	83 ec 08             	sub    esp,0x8
c001a606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a60a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a60e:	39 05 30 24 03 c0    	cmp    DWORD PTR ds:0xc0032430,eax
c001a614:	74 04                	je     c001a61a <Krnl::getEnv(Process*, char const*)+0x18>
c001a616:	85 c0                	test   eax,eax
c001a618:	75 0b                	jne    c001a625 <Krnl::getEnv(Process*, char const*)+0x23>
c001a61a:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a61f:	85 c0                	test   eax,eax
c001a621:	75 19                	jne    c001a63c <Krnl::getEnv(Process*, char const*)+0x3a>
c001a623:	eb 27                	jmp    c001a64c <Krnl::getEnv(Process*, char const*)+0x4a>
c001a625:	52                   	push   edx
c001a626:	52                   	push   edx
c001a627:	53                   	push   ebx
c001a628:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a62e:	e8 5f fc ff ff       	call   c001a292 <EnvVarContainer::getEnv(char const*)>
c001a633:	83 c4 10             	add    esp,0x10
c001a636:	85 c0                	test   eax,eax
c001a638:	75 28                	jne    c001a662 <Krnl::getEnv(Process*, char const*)+0x60>
c001a63a:	eb de                	jmp    c001a61a <Krnl::getEnv(Process*, char const*)+0x18>
c001a63c:	52                   	push   edx
c001a63d:	52                   	push   edx
c001a63e:	53                   	push   ebx
c001a63f:	50                   	push   eax
c001a640:	e8 4d fc ff ff       	call   c001a292 <EnvVarContainer::getEnv(char const*)>
c001a645:	83 c4 10             	add    esp,0x10
c001a648:	85 c0                	test   eax,eax
c001a64a:	75 16                	jne    c001a662 <Krnl::getEnv(Process*, char const*)+0x60>
c001a64c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a650:	a1 18 1a 03 c0       	mov    eax,ds:0xc0031a18
c001a655:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a659:	83 c4 08             	add    esp,0x8
c001a65c:	5b                   	pop    ebx
c001a65d:	e9 30 fc ff ff       	jmp    c001a292 <EnvVarContainer::getEnv(char const*)>
c001a662:	83 c4 08             	add    esp,0x8
c001a665:	5b                   	pop    ebx
c001a666:	c3                   	ret    

c001a667 <Krnl::setEnvSystem(char const*, char const*)>:
c001a667:	83 ec 10             	sub    esp,0x10
c001a66a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a66e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a672:	ff 35 18 1a 03 c0    	push   DWORD PTR ds:0xc0031a18
c001a678:	e8 53 fc ff ff       	call   c001a2d0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a67d:	83 c4 1c             	add    esp,0x1c
c001a680:	c3                   	ret    

c001a681 <Krnl::setEnvUser(char const*, char const*)>:
c001a681:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a686:	85 c0                	test   eax,eax
c001a688:	74 15                	je     c001a69f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a68a:	83 ec 10             	sub    esp,0x10
c001a68d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a691:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a695:	50                   	push   eax
c001a696:	e8 35 fc ff ff       	call   c001a2d0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a69b:	83 c4 1c             	add    esp,0x1c
c001a69e:	c3                   	ret    
c001a69f:	c3                   	ret    

c001a6a0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a6a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6a4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a6aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6ae:	e9 1d fc ff ff       	jmp    c001a2d0 <EnvVarContainer::setEnv(char const*, char const*)>

c001a6b3 <Krnl::deleteEnvSystem(char const*)>:
c001a6b3:	c3                   	ret    

c001a6b4 <Krnl::deleteEnvUser(char const*)>:
c001a6b4:	c3                   	ret    

c001a6b5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a6b5:	c3                   	ret    

c001a6b6 <Krnl::newProcessEnv(Process*)>:
c001a6b6:	83 ec 28             	sub    esp,0x28
c001a6b9:	6a 0c                	push   0xc
c001a6bb:	e8 00 52 ff ff       	call   c000f8c0 <malloc>
c001a6c0:	5a                   	pop    edx
c001a6c1:	59                   	pop    ecx
c001a6c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a6c6:	50                   	push   eax
c001a6c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6cb:	e8 e0 fe ff ff       	call   c001a5b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6d4:	83 c4 2c             	add    esp,0x2c
c001a6d7:	c3                   	ret    

c001a6d8 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a6d8:	56                   	push   esi
c001a6d9:	53                   	push   ebx
c001a6da:	83 ec 10             	sub    esp,0x10
c001a6dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6e1:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a6e7:	6a 0c                	push   0xc
c001a6e9:	e8 d2 51 ff ff       	call   c000f8c0 <malloc>
c001a6ee:	89 c3                	mov    ebx,eax
c001a6f0:	58                   	pop    eax
c001a6f1:	5a                   	pop    edx
c001a6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6f6:	53                   	push   ebx
c001a6f7:	e8 b4 fe ff ff       	call   c001a5b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6fc:	8b 06                	mov    eax,DWORD PTR [esi]
c001a6fe:	89 03                	mov    DWORD PTR [ebx],eax
c001a700:	c1 e0 03             	shl    eax,0x3
c001a703:	89 04 24             	mov    DWORD PTR [esp],eax
c001a706:	e8 b5 51 ff ff       	call   c000f8c0 <malloc>
c001a70b:	83 c4 0c             	add    esp,0xc
c001a70e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a711:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a713:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a71a:	52                   	push   edx
c001a71b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a71e:	50                   	push   eax
c001a71f:	e8 8c 66 fe ff       	call   c0000db0 <realmemcpy>
c001a724:	89 d8                	mov    eax,ebx
c001a726:	83 c4 14             	add    esp,0x14
c001a729:	5b                   	pop    ebx
c001a72a:	5e                   	pop    esi
c001a72b:	c3                   	ret    

c001a72c <Krnl::loadSystemEnv()>:
c001a72c:	53                   	push   ebx
c001a72d:	83 ec 14             	sub    esp,0x14
c001a730:	6a 0c                	push   0xc
c001a732:	e8 89 51 ff ff       	call   c000f8c0 <malloc>
c001a737:	89 c3                	mov    ebx,eax
c001a739:	58                   	pop    eax
c001a73a:	5a                   	pop    edx
c001a73b:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c001a741:	53                   	push   ebx
c001a742:	e8 69 fe ff ff       	call   c001a5b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a747:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a74a:	89 1d 18 1a 03 c0    	mov    DWORD PTR ds:0xc0031a18,ebx
c001a750:	e8 3f fe ff ff       	call   c001a594 <EnvVarContainer::__loadSystem()>
c001a755:	83 c4 18             	add    esp,0x18
c001a758:	5b                   	pop    ebx
c001a759:	c3                   	ret    

c001a75a <Krnl::loadUserEnv()>:
c001a75a:	53                   	push   ebx
c001a75b:	83 ec 14             	sub    esp,0x14
c001a75e:	6a 0c                	push   0xc
c001a760:	e8 5b 51 ff ff       	call   c000f8c0 <malloc>
c001a765:	89 c3                	mov    ebx,eax
c001a767:	58                   	pop    eax
c001a768:	5a                   	pop    edx
c001a769:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c001a76f:	53                   	push   ebx
c001a770:	e8 3b fe ff ff       	call   c001a5b0 <EnvVarContainer::EnvVarContainer(Process*)>
c001a775:	89 1d 14 1a 03 c0    	mov    DWORD PTR ds:0xc0031a14,ebx
c001a77b:	83 c4 18             	add    esp,0x18
c001a77e:	5b                   	pop    ebx
c001a77f:	c3                   	ret    

c001a780 <Krnl::flushEnv()>:
c001a780:	c3                   	ret    

c001a781 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a785:	8b 15 14 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a14
c001a78b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a791:	a1 18 1a 03 c0       	mov    eax,ds:0xc0031a18
c001a796:	8b 00                	mov    eax,DWORD PTR [eax]
c001a798:	03 01                	add    eax,DWORD PTR [ecx]
c001a79a:	85 d2                	test   edx,edx
c001a79c:	74 02                	je     c001a7a0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a79e:	03 02                	add    eax,DWORD PTR [edx]
c001a7a0:	c3                   	ret    

c001a7a1 <Krnl::getProcessEnvPair(Process*, int)>:
c001a7a1:	57                   	push   edi
c001a7a2:	8b 0d 14 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a14
c001a7a8:	56                   	push   esi
c001a7a9:	85 c9                	test   ecx,ecx
c001a7ab:	53                   	push   ebx
c001a7ac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7b4:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a7ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7be:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7c0:	75 47                	jne    c001a809 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a7c2:	39 c3                	cmp    ebx,eax
c001a7c4:	7c 47                	jl     c001a80d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a7c6:	8b 15 18 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a18
c001a7cc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a7ce:	01 c1                	add    ecx,eax
c001a7d0:	39 d9                	cmp    ecx,ebx
c001a7d2:	7e 6c                	jle    c001a840 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7d4:	51                   	push   ecx
c001a7d5:	89 d9                	mov    ecx,ebx
c001a7d7:	29 c1                	sub    ecx,eax
c001a7d9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7dc:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a7e0:	53                   	push   ebx
c001a7e1:	68 b0 c4 02 c0       	push   0xc002c4b0
c001a7e6:	e8 8c 86 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001a7eb:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a7f1:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a7f3:	a1 18 1a 03 c0       	mov    eax,ds:0xc0031a18
c001a7f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a7fb:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a7ff:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a802:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a805:	89 06                	mov    DWORD PTR [esi],eax
c001a807:	eb 51                	jmp    c001a85a <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a809:	39 c3                	cmp    ebx,eax
c001a80b:	7d 05                	jge    c001a812 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a80d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a810:	eb 20                	jmp    c001a832 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a812:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a814:	8d 14 07             	lea    edx,[edi+eax*1]
c001a817:	39 da                	cmp    edx,ebx
c001a819:	7e 04                	jle    c001a81f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a81b:	29 c3                	sub    ebx,eax
c001a81d:	eb 10                	jmp    c001a82f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a81f:	8b 0d 18 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a18
c001a825:	03 11                	add    edx,DWORD PTR [ecx]
c001a827:	39 da                	cmp    edx,ebx
c001a829:	7e 15                	jle    c001a840 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a82b:	29 c3                	sub    ebx,eax
c001a82d:	29 fb                	sub    ebx,edi
c001a82f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a832:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a836:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a839:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a83c:	89 06                	mov    DWORD PTR [esi],eax
c001a83e:	eb 1d                	jmp    c001a85d <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a840:	83 ec 0c             	sub    esp,0xc
c001a843:	68 c4 c4 02 c0       	push   0xc002c4c4
c001a848:	e8 18 00 00 00       	call   c001a865 <Krnl::panic(char const*)>
c001a84d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a853:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a85a:	83 c4 10             	add    esp,0x10
c001a85d:	89 f0                	mov    eax,esi
c001a85f:	5b                   	pop    ebx
c001a860:	5e                   	pop    esi
c001a861:	5f                   	pop    edi
c001a862:	c2 04 00             	ret    0x4

c001a865 <Krnl::panic(char const*)>:
c001a865:	55                   	push   ebp
c001a866:	89 e5                	mov    ebp,esp
c001a868:	53                   	push   ebx
c001a869:	83 ec 0c             	sub    esp,0xc
c001a86c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a86f:	fa                   	cli    
c001a870:	c6 05 24 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a24,0x1
c001a877:	53                   	push   ebx
c001a878:	c6 05 04 de 02 c0 00 	mov    BYTE PTR ds:0xc002de04,0x0
c001a87f:	68 de c4 02 c0       	push   0xc002c4de
c001a884:	e8 ee 85 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001a889:	58                   	pop    eax
c001a88a:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a88f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a895:	e8 00 64 ff ff       	call   c0010c9a <setActiveTerminal(VgaText*)>
c001a89a:	83 c4 0c             	add    esp,0xc
c001a89d:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a8a2:	6a 01                	push   0x1
c001a8a4:	6a 0f                	push   0xf
c001a8a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ac:	e8 87 5e ff ff       	call   c0010738 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8b1:	58                   	pop    eax
c001a8b2:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a8b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8bd:	e8 1e 66 ff ff       	call   c0010ee0 <VgaText::clearScreen()>
c001a8c2:	58                   	pop    eax
c001a8c3:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a8c8:	5a                   	pop    edx
c001a8c9:	68 f7 c4 02 c0       	push   0xc002c4f7
c001a8ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d4:	e8 4d 67 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a8d9:	59                   	pop    ecx
c001a8da:	58                   	pop    eax
c001a8db:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a8e0:	68 9c c5 02 c0       	push   0xc002c59c
c001a8e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8eb:	e8 36 67 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a8f0:	58                   	pop    eax
c001a8f1:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a8f6:	5a                   	pop    edx
c001a8f7:	68 13 c5 02 c0       	push   0xc002c513
c001a8fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a902:	e8 1f 67 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a907:	59                   	pop    ecx
c001a908:	58                   	pop    eax
c001a909:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a90e:	53                   	push   ebx
c001a90f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a915:	e8 0c 67 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a91a:	58                   	pop    eax
c001a91b:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a920:	5a                   	pop    edx
c001a921:	68 33 c5 02 c0       	push   0xc002c533
c001a926:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92c:	e8 f5 66 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a931:	a1 20 1a 03 c0       	mov    eax,ds:0xc0031a20
c001a936:	83 c4 10             	add    esp,0x10
c001a939:	85 c0                	test   eax,eax
c001a93b:	74 02                	je     c001a93f <Krnl::panic(char const*)+0xda>
c001a93d:	ff d0                	call   eax
c001a93f:	83 ec 0c             	sub    esp,0xc
c001a942:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a945:	e8 71 31 00 00       	call   c001dabb <Thr::getDriverNameFromAddress(unsigned long)>
c001a94a:	83 c4 10             	add    esp,0x10
c001a94d:	89 c3                	mov    ebx,eax
c001a94f:	85 c0                	test   eax,eax
c001a951:	0f 84 50 02 00 00    	je     c001aba7 <Krnl::panic(char const*)+0x342>
c001a957:	83 ec 08             	sub    esp,0x8
c001a95a:	8b 15 30 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032430
c001a960:	68 d8 c5 02 c0       	push   0xc002c5d8
c001a965:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a96b:	e8 b6 66 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a970:	58                   	pop    eax
c001a971:	5a                   	pop    edx
c001a972:	8b 15 30 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032430
c001a978:	68 13 c5 02 c0       	push   0xc002c513
c001a97d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a983:	e8 9e 66 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a988:	59                   	pop    ecx
c001a989:	58                   	pop    eax
c001a98a:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a98f:	53                   	push   ebx
c001a990:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a996:	e8 8b 66 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a99b:	83 c4 10             	add    esp,0x10
c001a99e:	83 ec 08             	sub    esp,0x8
c001a9a1:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a9a6:	68 32 c5 02 c0       	push   0xc002c532
c001a9ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b1:	e8 70 66 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a9b6:	58                   	pop    eax
c001a9b7:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a9bc:	5a                   	pop    edx
c001a9bd:	68 30 c6 02 c0       	push   0xc002c630
c001a9c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9c8:	e8 59 66 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a9cd:	59                   	pop    ecx
c001a9ce:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a9d3:	5b                   	pop    ebx
c001a9d4:	68 70 c6 02 c0       	push   0xc002c670
c001a9d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9df:	e8 42 66 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a9e4:	58                   	pop    eax
c001a9e5:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001a9ea:	5a                   	pop    edx
c001a9eb:	68 1e c5 02 c0       	push   0xc002c51e
c001a9f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f6:	e8 2b 66 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001a9fb:	59                   	pop    ecx
c001a9fc:	5b                   	pop    ebx
c001a9fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa00:	68 36 c5 02 c0       	push   0xc002c536
c001aa05:	e8 6d 84 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001aa0a:	58                   	pop    eax
c001aa0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa0e:	5a                   	pop    edx
c001aa0f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa12:	68 3f c5 02 c0       	push   0xc002c53f
c001aa17:	e8 5b 84 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001aa1c:	59                   	pop    ecx
c001aa1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa20:	5b                   	pop    ebx
c001aa21:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa23:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa26:	68 48 c5 02 c0       	push   0xc002c548
c001aa2b:	e8 47 84 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001aa30:	58                   	pop    eax
c001aa31:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aa36:	5a                   	pop    edx
c001aa37:	68 b4 c6 02 c0       	push   0xc002c6b4
c001aa3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa42:	e8 df 65 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001aa47:	59                   	pop    ecx
c001aa48:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aa4d:	5b                   	pop    ebx
c001aa4e:	68 51 c5 02 c0       	push   0xc002c551
c001aa53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa59:	e8 c8 65 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001aa5e:	0f 20 c0             	mov    eax,cr0
c001aa61:	5a                   	pop    edx
c001aa62:	59                   	pop    ecx
c001aa63:	50                   	push   eax
c001aa64:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aa69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa6f:	e8 d8 65 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c001aa74:	5b                   	pop    ebx
c001aa75:	58                   	pop    eax
c001aa76:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aa7b:	68 5b c5 02 c0       	push   0xc002c55b
c001aa80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa86:	e8 9b 65 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001aa8b:	0f 20 d0             	mov    eax,cr2
c001aa8e:	5a                   	pop    edx
c001aa8f:	59                   	pop    ecx
c001aa90:	50                   	push   eax
c001aa91:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aa96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa9c:	e8 ab 65 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c001aaa1:	5b                   	pop    ebx
c001aaa2:	58                   	pop    eax
c001aaa3:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aaa8:	68 65 c5 02 c0       	push   0xc002c565
c001aaad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aab3:	e8 6e 65 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001aab8:	0f 20 d8             	mov    eax,cr3
c001aabb:	5a                   	pop    edx
c001aabc:	59                   	pop    ecx
c001aabd:	50                   	push   eax
c001aabe:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aac3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aac9:	e8 7e 65 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c001aace:	5b                   	pop    ebx
c001aacf:	58                   	pop    eax
c001aad0:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aad5:	68 78 c5 02 c0       	push   0xc002c578
c001aada:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aae0:	e8 41 65 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001aae5:	0f 20 e0             	mov    eax,cr4
c001aae8:	5a                   	pop    edx
c001aae9:	59                   	pop    ecx
c001aaea:	50                   	push   eax
c001aaeb:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001aaf0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaf6:	e8 51 65 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c001aafb:	5b                   	pop    ebx
c001aafc:	58                   	pop    eax
c001aafd:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001ab02:	68 82 c5 02 c0       	push   0xc002c582
c001ab07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab0d:	e8 14 65 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001ab12:	5a                   	pop    edx
c001ab13:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001ab18:	59                   	pop    ecx
c001ab19:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab1f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab22:	50                   	push   eax
c001ab23:	e8 24 65 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c001ab28:	5b                   	pop    ebx
c001ab29:	58                   	pop    eax
c001ab2a:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001ab2f:	68 99 c5 02 c0       	push   0xc002c599
c001ab34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab3a:	e8 e7 64 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001ab3f:	5a                   	pop    edx
c001ab40:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001ab45:	59                   	pop    ecx
c001ab46:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab4c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab4f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab52:	50                   	push   eax
c001ab53:	e8 f4 64 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c001ab58:	5b                   	pop    ebx
c001ab59:	58                   	pop    eax
c001ab5a:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001ab5f:	68 99 c5 02 c0       	push   0xc002c599
c001ab64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab6a:	e8 b7 64 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001ab6f:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001ab74:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab77:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab7d:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab7f:	59                   	pop    ecx
c001ab80:	5b                   	pop    ebx
c001ab81:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab84:	50                   	push   eax
c001ab85:	e8 c2 64 ff ff       	call   c001104c <VgaText::putx(unsigned int)>
c001ab8a:	83 c4 10             	add    esp,0x10
c001ab8d:	b2 fe                	mov    dl,0xfe
c001ab8f:	e4 60                	in     al,0x60
c001ab91:	3c 1c                	cmp    al,0x1c
c001ab93:	74 04                	je     c001ab99 <Krnl::panic(char const*)+0x334>
c001ab95:	3c 5a                	cmp    al,0x5a
c001ab97:	75 f6                	jne    c001ab8f <Krnl::panic(char const*)+0x32a>
c001ab99:	e4 64                	in     al,0x64
c001ab9b:	a8 02                	test   al,0x2
c001ab9d:	75 fa                	jne    c001ab99 <Krnl::panic(char const*)+0x334>
c001ab9f:	88 d0                	mov    al,dl
c001aba1:	e6 64                	out    0x64,al
c001aba3:	fa                   	cli    
c001aba4:	f4                   	hlt    
c001aba5:	eb e8                	jmp    c001ab8f <Krnl::panic(char const*)+0x32a>
c001aba7:	50                   	push   eax
c001aba8:	50                   	push   eax
c001aba9:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001abae:	68 04 c6 02 c0       	push   0xc002c604
c001abb3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abb9:	e8 68 64 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001abbe:	58                   	pop    eax
c001abbf:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001abc4:	5a                   	pop    edx
c001abc5:	68 13 c5 02 c0       	push   0xc002c513
c001abca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abd0:	e8 51 64 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001abd5:	59                   	pop    ecx
c001abd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abdb:	5b                   	pop    ebx
c001abdc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abdf:	83 c0 0c             	add    eax,0xc
c001abe2:	50                   	push   eax
c001abe3:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001abe8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abee:	e8 33 64 ff ff       	call   c0011026 <VgaText::puts(char const*)>
c001abf3:	83 c4 10             	add    esp,0x10
c001abf6:	e9 a3 fd ff ff       	jmp    c001a99e <Krnl::panic(char const*)+0x139>

c001abfb <Net::switchEndian16(unsigned short)>:
c001abfb:	83 ec 04             	sub    esp,0x4
c001abfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac02:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac06:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac0a:	c1 f8 08             	sar    eax,0x8
c001ac0d:	89 c2                	mov    edx,eax
c001ac0f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac13:	c1 e0 08             	shl    eax,0x8
c001ac16:	09 d0                	or     eax,edx
c001ac18:	83 c4 04             	add    esp,0x4
c001ac1b:	c3                   	ret    

c001ac1c <Net::switchEndian32(unsigned int)>:
c001ac1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac20:	c1 e8 18             	shr    eax,0x18
c001ac23:	89 c2                	mov    edx,eax
c001ac25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac29:	c1 e0 08             	shl    eax,0x8
c001ac2c:	25 00 00 ff 00       	and    eax,0xff0000
c001ac31:	09 c2                	or     edx,eax
c001ac33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac37:	c1 e8 08             	shr    eax,0x8
c001ac3a:	25 00 ff 00 00       	and    eax,0xff00
c001ac3f:	09 c2                	or     edx,eax
c001ac41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac45:	c1 e0 18             	shl    eax,0x18
c001ac48:	09 d0                	or     eax,edx
c001ac4a:	c3                   	ret    

c001ac4b <Net::crc32Calc(unsigned char*, int)>:
c001ac4b:	83 ec 10             	sub    esp,0x10
c001ac4e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ac53:	75 07                	jne    c001ac5c <Net::crc32Calc(unsigned char*, int)+0x11>
c001ac55:	b8 00 00 00 00       	mov    eax,0x0
c001ac5a:	eb 7c                	jmp    c001acd8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac5c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac61:	7f 07                	jg     c001ac6a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac63:	b8 00 00 00 00       	mov    eax,0x0
c001ac68:	eb 6e                	jmp    c001acd8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac6a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac72:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac7e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac82:	7d 4e                	jge    c001acd2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001ac84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac8c:	01 d0                	add    eax,edx
c001ac8e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac90:	0f b6 c0             	movzx  eax,al
c001ac93:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ac97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac9f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aca4:	7f 26                	jg     c001accc <Net::crc32Calc(unsigned char*, int)+0x81>
c001aca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acaa:	83 e0 01             	and    eax,0x1
c001acad:	74 0d                	je     c001acbc <Net::crc32Calc(unsigned char*, int)+0x71>
c001acaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb3:	d1 e8                	shr    eax,1
c001acb5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001acba:	eb 06                	jmp    c001acc2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001acbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acc0:	d1 e8                	shr    eax,1
c001acc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acc6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acca:	eb d3                	jmp    c001ac9f <Net::crc32Calc(unsigned char*, int)+0x54>
c001accc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001acd0:	eb a8                	jmp    c001ac7a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001acd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd6:	f7 d0                	not    eax
c001acd8:	83 c4 10             	add    esp,0x10
c001acdb:	c3                   	ret    

c001acdc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001acdc:	83 ec 3c             	sub    esp,0x3c
c001acdf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ace3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ace7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001acef:	83 7c 24 2c 06       	cmp    DWORD PTR [esp+0x2c],0x6
c001acf4:	7f 14                	jg     c001ad0a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001acf6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001acfa:	8d 50 01             	lea    edx,[eax+0x1]
c001acfd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c001ad01:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad04:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001ad08:	eb e5                	jmp    c001acef <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ad0a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ad0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad11:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c001ad15:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad18:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ad1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad20:	8d 44 24 4e          	lea    eax,[esp+0x4e]
c001ad24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad28:	c7 04 24 06 00 00 00 	mov    DWORD PTR [esp],0x6
c001ad2f:	83 ec 04             	sub    esp,0x4
c001ad32:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001ad36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ad3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad3e:	e8 6d 60 fe ff       	call   c0000db0 <realmemcpy>
c001ad43:	83 c4 10             	add    esp,0x10
c001ad46:	83 44 24 58 06       	add    DWORD PTR [esp+0x58],0x6
c001ad4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ad4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad53:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ad57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad5b:	c7 44 24 0c 06 00 00 00 	mov    DWORD PTR [esp+0xc],0x6
c001ad63:	83 ec 04             	sub    esp,0x4
c001ad66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ad6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad6e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad72:	e8 39 60 fe ff       	call   c0000db0 <realmemcpy>
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	83 44 24 58 06       	add    DWORD PTR [esp+0x58],0x6
c001ad7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ad83:	0f b7 c0             	movzx  eax,ax
c001ad86:	c1 f8 08             	sar    eax,0x8
c001ad89:	89 c1                	mov    ecx,eax
c001ad8b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ad8f:	8d 50 01             	lea    edx,[eax+0x1]
c001ad92:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c001ad96:	88 ca                	mov    dl,cl
c001ad98:	88 10                	mov    BYTE PTR [eax],dl
c001ad9a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ad9e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ada2:	8d 48 01             	lea    ecx,[eax+0x1]
c001ada5:	89 4c 24 58          	mov    DWORD PTR [esp+0x58],ecx
c001ada9:	88 10                	mov    BYTE PTR [eax],dl
c001adab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001adaf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001adb3:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001adb7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001adbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001adbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001adc3:	83 ec 04             	sub    esp,0x4
c001adc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001adce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001add2:	e8 d9 5f fe ff       	call   c0000db0 <realmemcpy>
c001add7:	83 c4 10             	add    esp,0x10
c001adda:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001adde:	01 44 24 58          	add    DWORD PTR [esp+0x58],eax
c001ade2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ade6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001adea:	83 ec 08             	sub    esp,0x8
c001aded:	50                   	push   eax
c001adee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001adf2:	e8 54 fe ff ff       	call   c001ac4b <Net::crc32Calc(unsigned char*, int)>
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001adfe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae02:	c1 e8 18             	shr    eax,0x18
c001ae05:	89 c1                	mov    ecx,eax
c001ae07:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ae0b:	8d 50 01             	lea    edx,[eax+0x1]
c001ae0e:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c001ae12:	88 ca                	mov    dl,cl
c001ae14:	88 10                	mov    BYTE PTR [eax],dl
c001ae16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae1a:	c1 e8 10             	shr    eax,0x10
c001ae1d:	89 c1                	mov    ecx,eax
c001ae1f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ae23:	8d 50 01             	lea    edx,[eax+0x1]
c001ae26:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c001ae2a:	88 ca                	mov    dl,cl
c001ae2c:	88 10                	mov    BYTE PTR [eax],dl
c001ae2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae32:	c1 e8 08             	shr    eax,0x8
c001ae35:	89 c1                	mov    ecx,eax
c001ae37:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ae3b:	8d 50 01             	lea    edx,[eax+0x1]
c001ae3e:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c001ae42:	88 ca                	mov    dl,cl
c001ae44:	88 10                	mov    BYTE PTR [eax],dl
c001ae46:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ae4a:	8d 50 01             	lea    edx,[eax+0x1]
c001ae4d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c001ae51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae55:	88 10                	mov    BYTE PTR [eax],dl
c001ae57:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ae5b:	83 c4 3c             	add    esp,0x3c
c001ae5e:	c3                   	ret    

c001ae5f <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae5f:	83 ec 4c             	sub    esp,0x4c
c001ae62:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae66:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ae6a:	83 44 24 54 08       	add    DWORD PTR [esp+0x54],0x8
c001ae6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae73:	83 c0 0e             	add    eax,0xe
c001ae76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae7a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae82:	c7 44 24 0c 06 00 00 00 	mov    DWORD PTR [esp+0xc],0x6
c001ae8a:	83 ec 04             	sub    esp,0x4
c001ae8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ae91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ae99:	e8 12 5f fe ff       	call   c0000db0 <realmemcpy>
c001ae9e:	83 c4 10             	add    esp,0x10
c001aea1:	83 44 24 54 06       	add    DWORD PTR [esp+0x54],0x6
c001aea6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aeaa:	83 c0 08             	add    eax,0x8
c001aead:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeb1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aeb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aeb9:	c7 44 24 18 06 00 00 00 	mov    DWORD PTR [esp+0x18],0x6
c001aec1:	83 ec 04             	sub    esp,0x4
c001aec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aec8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aecc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aed0:	e8 db 5e fe ff       	call   c0000db0 <realmemcpy>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	83 44 24 54 06       	add    DWORD PTR [esp+0x54],0x6
c001aedd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aee1:	8d 50 01             	lea    edx,[eax+0x1]
c001aee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c001aee8:	8a 00                	mov    al,BYTE PTR [eax]
c001aeea:	0f b6 c0             	movzx  eax,al
c001aeed:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001aef2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aef6:	8d 50 01             	lea    edx,[eax+0x1]
c001aef9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c001aefd:	8a 00                	mov    al,BYTE PTR [eax]
c001aeff:	0f b6 c0             	movzx  eax,al
c001af02:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001af07:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c001af0c:	c1 e0 08             	shl    eax,0x8
c001af0f:	89 c2                	mov    edx,eax
c001af11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af15:	09 d0                	or     eax,edx
c001af17:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001af1b:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001af1f:	83 7c 24 58 ff       	cmp    DWORD PTR [esp+0x58],0xffffffff
c001af24:	75 3a                	jne    c001af60 <Net::unwrapEthernetFrame(unsigned char*, int)+0x101>
c001af26:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001af2a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af2d:	66 3d dc 05          	cmp    ax,0x5dc
c001af31:	77 10                	ja     c001af43 <Net::unwrapEthernetFrame(unsigned char*, int)+0xe4>
c001af33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001af37:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af3a:	0f b7 c0             	movzx  eax,ax
c001af3d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001af41:	eb 1d                	jmp    c001af60 <Net::unwrapEthernetFrame(unsigned char*, int)+0x101>
c001af43:	83 ec 0c             	sub    esp,0xc
c001af46:	68 dc c6 02 c0       	push   0xc002c6dc
c001af4b:	e8 27 7f ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001af57:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001af5b:	e9 d5 00 00 00       	jmp    c001b035 <Net::unwrapEthernetFrame(unsigned char*, int)+0x1d6>
c001af60:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001af64:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001af68:	8b 12                	mov    edx,DWORD PTR [edx]
c001af6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001af6e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001af72:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001af76:	89 04 24             	mov    DWORD PTR [esp],eax
c001af79:	83 ec 04             	sub    esp,0x4
c001af7c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001af80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001af84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af88:	e8 23 5e fe ff       	call   c0000db0 <realmemcpy>
c001af8d:	83 c4 10             	add    esp,0x10
c001af90:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001af94:	01 44 24 54          	add    DWORD PTR [esp+0x54],eax
c001af98:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af9c:	8d 50 01             	lea    edx,[eax+0x1]
c001af9f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c001afa3:	8a 00                	mov    al,BYTE PTR [eax]
c001afa5:	0f b6 c0             	movzx  eax,al
c001afa8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afb0:	8d 50 01             	lea    edx,[eax+0x1]
c001afb3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c001afb7:	8a 00                	mov    al,BYTE PTR [eax]
c001afb9:	0f b6 c0             	movzx  eax,al
c001afbc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afc0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afc4:	8d 50 01             	lea    edx,[eax+0x1]
c001afc7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c001afcb:	8a 00                	mov    al,BYTE PTR [eax]
c001afcd:	0f b6 c0             	movzx  eax,al
c001afd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001afd4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afd8:	8d 50 01             	lea    edx,[eax+0x1]
c001afdb:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c001afdf:	8a 00                	mov    al,BYTE PTR [eax]
c001afe1:	0f b6 c0             	movzx  eax,al
c001afe4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001afe8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afec:	c1 e0 18             	shl    eax,0x18
c001afef:	89 c2                	mov    edx,eax
c001aff1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aff5:	c1 e0 10             	shl    eax,0x10
c001aff8:	09 c2                	or     edx,eax
c001affa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001affe:	c1 e0 08             	shl    eax,0x8
c001b001:	09 d0                	or     eax,edx
c001b003:	0b 44 24 28          	or     eax,DWORD PTR [esp+0x28]
c001b007:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b00b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b00f:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001b013:	83 e8 04             	sub    eax,0x4
c001b016:	83 ec 08             	sub    esp,0x8
c001b019:	50                   	push   eax
c001b01a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b01e:	e8 28 fc ff ff       	call   c001ac4b <Net::crc32Calc(unsigned char*, int)>
c001b023:	83 c4 10             	add    esp,0x10
c001b026:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c001b02a:	0f 94 c2             	sete   dl
c001b02d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b031:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b034:	90                   	nop
c001b035:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b039:	83 c4 4c             	add    esp,0x4c
c001b03c:	c2 04 00             	ret    0x4

c001b03f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b03f:	55                   	push   ebp
c001b040:	57                   	push   edi
c001b041:	56                   	push   esi
c001b042:	53                   	push   ebx
c001b043:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b049:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b050:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b052:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b055:	80 fb 40             	cmp    bl,0x40
c001b058:	75 1b                	jne    c001b075 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b05a:	8a 16                	mov    dl,BYTE PTR [esi]
c001b05c:	84 d2                	test   dl,dl
c001b05e:	0f 84 f1 00 00 00    	je     c001b155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b064:	8d 46 01             	lea    eax,[esi+0x1]
c001b067:	80 fa 3a             	cmp    dl,0x3a
c001b06a:	74 04                	je     c001b070 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b06c:	89 c6                	mov    esi,eax
c001b06e:	eb ea                	jmp    c001b05a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b070:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b073:	89 c6                	mov    esi,eax
c001b075:	50                   	push   eax
c001b076:	6a 40                	push   0x40
c001b078:	6a 00                	push   0x0
c001b07a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b07e:	50                   	push   eax
c001b07f:	e8 e8 56 fe ff       	call   c000076c <memset>
c001b084:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b08b:	31 c0                	xor    eax,eax
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b092:	84 c9                	test   cl,cl
c001b094:	0f 84 bb 00 00 00    	je     c001b155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b09a:	3d c7 00 00 00       	cmp    eax,0xc7
c001b09f:	0f 8f b0 00 00 00    	jg     c001b155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0a5:	80 f9 0a             	cmp    cl,0xa
c001b0a8:	0f 85 98 00 00 00    	jne    c001b146 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b0ae:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b0b3:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b0b7:	a8 df                	test   al,0xdf
c001b0b9:	0f 94 c1             	sete   cl
c001b0bc:	3c 23                	cmp    al,0x23
c001b0be:	0f 94 c2             	sete   dl
c001b0c1:	08 d1                	or     cl,dl
c001b0c3:	75 4a                	jne    c001b10f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0c5:	8d 50 f7             	lea    edx,[eax-0x9]
c001b0c8:	80 fa 01             	cmp    dl,0x1
c001b0cb:	76 42                	jbe    c001b10f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0cd:	3c 5b                	cmp    al,0x5b
c001b0cf:	75 42                	jne    c001b113 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b0d1:	80 fb 40             	cmp    bl,0x40
c001b0d4:	75 39                	jne    c001b10f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0d6:	83 ec 0c             	sub    esp,0xc
c001b0d9:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b0dd:	52                   	push   edx
c001b0de:	e8 a5 56 fe ff       	call   c0000788 <strlen>
c001b0e3:	83 c4 10             	add    esp,0x10
c001b0e6:	83 f8 3f             	cmp    eax,0x3f
c001b0e9:	77 6a                	ja     c001b155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0eb:	50                   	push   eax
c001b0ec:	50                   	push   eax
c001b0ed:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b0f1:	52                   	push   edx
c001b0f2:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0f6:	52                   	push   edx
c001b0f7:	e8 2c 57 fe ff       	call   c0000828 <strcpy>
c001b0fc:	58                   	pop    eax
c001b0fd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b101:	52                   	push   edx
c001b102:	e8 81 56 fe ff       	call   c0000788 <strlen>
c001b107:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b10c:	83 c4 10             	add    esp,0x10
c001b10f:	31 d2                	xor    edx,edx
c001b111:	eb 3a                	jmp    c001b14d <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b113:	80 fb 40             	cmp    bl,0x40
c001b116:	74 06                	je     c001b11e <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b118:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b11c:	eb 20                	jmp    c001b13e <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b11e:	50                   	push   eax
c001b11f:	50                   	push   eax
c001b120:	55                   	push   ebp
c001b121:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b125:	50                   	push   eax
c001b126:	e8 89 57 fe ff       	call   c00008b4 <strcmp>
c001b12b:	83 c4 10             	add    esp,0x10
c001b12e:	85 c0                	test   eax,eax
c001b130:	75 dd                	jne    c001b10f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b132:	eb e4                	jmp    c001b118 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b134:	8d 50 01             	lea    edx,[eax+0x1]
c001b137:	80 f9 3d             	cmp    cl,0x3d
c001b13a:	74 1d                	je     c001b159 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b13c:	89 d0                	mov    eax,edx
c001b13e:	8a 08                	mov    cl,BYTE PTR [eax]
c001b140:	84 c9                	test   cl,cl
c001b142:	75 f0                	jne    c001b134 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b144:	eb 0f                	jmp    c001b155 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b146:	8d 50 01             	lea    edx,[eax+0x1]
c001b149:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b14d:	47                   	inc    edi
c001b14e:	89 d0                	mov    eax,edx
c001b150:	e9 3b ff ff ff       	jmp    c001b090 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b155:	31 c0                	xor    eax,eax
c001b157:	eb 33                	jmp    c001b18c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b159:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b15d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b160:	50                   	push   eax
c001b161:	50                   	push   eax
c001b162:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b166:	50                   	push   eax
c001b167:	56                   	push   esi
c001b168:	e8 47 57 fe ff       	call   c00008b4 <strcmp>
c001b16d:	83 c4 10             	add    esp,0x10
c001b170:	85 c0                	test   eax,eax
c001b172:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b176:	75 97                	jne    c001b10f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b178:	51                   	push   ecx
c001b179:	51                   	push   ecx
c001b17a:	52                   	push   edx
c001b17b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b182:	e8 a1 56 fe ff       	call   c0000828 <strcpy>
c001b187:	83 c4 10             	add    esp,0x10
c001b18a:	b0 01                	mov    al,0x1
c001b18c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b192:	5b                   	pop    ebx
c001b193:	5e                   	pop    esi
c001b194:	5f                   	pop    edi
c001b195:	5d                   	pop    ebp
c001b196:	c3                   	ret    

c001b197 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b197:	57                   	push   edi
c001b198:	56                   	push   esi
c001b199:	53                   	push   ebx
c001b19a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b1a0:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b1a7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b1ae:	53                   	push   ebx
c001b1af:	e8 d4 55 fe ff       	call   c0000788 <strlen>
c001b1b4:	89 34 24             	mov    DWORD PTR [esp],esi
c001b1b7:	89 c7                	mov    edi,eax
c001b1b9:	e8 ca 55 fe ff       	call   c0000788 <strlen>
c001b1be:	83 c4 10             	add    esp,0x10
c001b1c1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b1c5:	3d ff 00 00 00       	cmp    eax,0xff
c001b1ca:	0f 87 d3 00 00 00    	ja     c001b2a3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b1d0:	57                   	push   edi
c001b1d1:	57                   	push   edi
c001b1d2:	56                   	push   esi
c001b1d3:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b1d7:	56                   	push   esi
c001b1d8:	e8 4b 56 fe ff       	call   c0000828 <strcpy>
c001b1dd:	58                   	pop    eax
c001b1de:	5a                   	pop    edx
c001b1df:	68 31 cc 02 c0       	push   0xc002cc31
c001b1e4:	56                   	push   esi
c001b1e5:	e8 7e 57 fe ff       	call   c0000968 <strcat>
c001b1ea:	59                   	pop    ecx
c001b1eb:	5f                   	pop    edi
c001b1ec:	53                   	push   ebx
c001b1ed:	56                   	push   esi
c001b1ee:	e8 75 57 fe ff       	call   c0000968 <strcat>
c001b1f3:	58                   	pop    eax
c001b1f4:	5a                   	pop    edx
c001b1f5:	68 28 c7 02 c0       	push   0xc002c728
c001b1fa:	56                   	push   esi
c001b1fb:	e8 68 57 fe ff       	call   c0000968 <strcat>
c001b200:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b207:	e8 b4 46 ff ff       	call   c000f8c0 <malloc>
c001b20c:	83 c4 0c             	add    esp,0xc
c001b20f:	89 c3                	mov    ebx,eax
c001b211:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c001b217:	56                   	push   esi
c001b218:	50                   	push   eax
c001b219:	e8 b8 81 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001b21e:	83 c4 10             	add    esp,0x10
c001b221:	85 db                	test   ebx,ebx
c001b223:	74 7e                	je     c001b2a3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b225:	51                   	push   ecx
c001b226:	51                   	push   ecx
c001b227:	6a 01                	push   0x1
c001b229:	53                   	push   ebx
c001b22a:	e8 0b 82 ff ff       	call   c001343a <File::open(FileOpenMode)>
c001b22f:	83 c4 10             	add    esp,0x10
c001b232:	85 c0                	test   eax,eax
c001b234:	74 08                	je     c001b23e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b236:	83 ec 0c             	sub    esp,0xc
c001b239:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b23b:	53                   	push   ebx
c001b23c:	eb 5f                	jmp    c001b29d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b23e:	52                   	push   edx
c001b23f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b243:	50                   	push   eax
c001b244:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b248:	50                   	push   eax
c001b249:	53                   	push   ebx
c001b24a:	e8 97 84 ff ff       	call   c00136e6 <File::stat(unsigned long long*, bool*)>
c001b24f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b253:	83 c4 10             	add    esp,0x10
c001b256:	89 c1                	mov    ecx,eax
c001b258:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b25c:	74 31                	je     c001b28f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b25e:	83 ec 0c             	sub    esp,0xc
c001b261:	50                   	push   eax
c001b262:	e8 59 46 ff ff       	call   c000f8c0 <malloc>
c001b267:	89 c6                	mov    esi,eax
c001b269:	58                   	pop    eax
c001b26a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b26c:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b270:	52                   	push   edx
c001b271:	56                   	push   esi
c001b272:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b276:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b27a:	53                   	push   ebx
c001b27b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b27e:	83 c4 20             	add    esp,0x20
c001b281:	85 c0                	test   eax,eax
c001b283:	75 0a                	jne    c001b28f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b289:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b28d:	74 18                	je     c001b2a7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b28f:	83 ec 0c             	sub    esp,0xc
c001b292:	53                   	push   ebx
c001b293:	e8 00 82 ff ff       	call   c0013498 <File::close()>
c001b298:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b29a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b29d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2a0:	83 c4 10             	add    esp,0x10
c001b2a3:	31 c0                	xor    eax,eax
c001b2a5:	eb 3b                	jmp    c001b2e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b2a7:	83 ec 0c             	sub    esp,0xc
c001b2aa:	53                   	push   ebx
c001b2ab:	e8 e8 81 ff ff       	call   c0013498 <File::close()>
c001b2b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2b8:	83 c4 0c             	add    esp,0xc
c001b2bb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b2c2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b2c9:	56                   	push   esi
c001b2ca:	e8 70 fd ff ff       	call   c001b03f <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b2cf:	89 34 24             	mov    DWORD PTR [esp],esi
c001b2d2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b2d6:	e8 f5 45 ff ff       	call   c000f8d0 <free>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b2e2:	81 c4 20 01 00 00    	add    esp,0x120
c001b2e8:	5b                   	pop    ebx
c001b2e9:	5e                   	pop    esi
c001b2ea:	5f                   	pop    edi
c001b2eb:	c3                   	ret    

c001b2ec <Reg::getLine(char*, char*, char*)>:
c001b2ec:	57                   	push   edi
c001b2ed:	56                   	push   esi
c001b2ee:	53                   	push   ebx
c001b2ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b2fb:	57                   	push   edi
c001b2fc:	56                   	push   esi
c001b2fd:	53                   	push   ebx
c001b2fe:	68 2d c7 02 c0       	push   0xc002c72d
c001b303:	e8 8f fe ff ff       	call   c001b197 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b308:	83 c4 10             	add    esp,0x10
c001b30b:	84 c0                	test   al,al
c001b30d:	75 10                	jne    c001b31f <Reg::getLine(char*, char*, char*)+0x33>
c001b30f:	57                   	push   edi
c001b310:	56                   	push   esi
c001b311:	53                   	push   ebx
c001b312:	68 52 c7 02 c0       	push   0xc002c752
c001b317:	e8 7b fe ff ff       	call   c001b197 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b31c:	83 c4 10             	add    esp,0x10
c001b31f:	5b                   	pop    ebx
c001b320:	5e                   	pop    esi
c001b321:	5f                   	pop    edi
c001b322:	c3                   	ret    

c001b323 <Reg::readInt(char*, char*, int*)>:
c001b323:	55                   	push   ebp
c001b324:	57                   	push   edi
c001b325:	56                   	push   esi
c001b326:	53                   	push   ebx
c001b327:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b32d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b331:	57                   	push   edi
c001b332:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b339:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b340:	e8 a7 ff ff ff       	call   c001b2ec <Reg::getLine(char*, char*, char*)>
c001b345:	83 c4 10             	add    esp,0x10
c001b348:	84 c0                	test   al,al
c001b34a:	0f 84 b3 00 00 00    	je     c001b403 <Reg::readInt(char*, char*, int*)+0xe0>
c001b350:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b354:	80 fa 2b             	cmp    dl,0x2b
c001b357:	74 0c                	je     c001b365 <Reg::readInt(char*, char*, int*)+0x42>
c001b359:	80 fa 2d             	cmp    dl,0x2d
c001b35c:	75 0e                	jne    c001b36c <Reg::readInt(char*, char*, int*)+0x49>
c001b35e:	ba 01 00 00 00       	mov    edx,0x1
c001b363:	eb 0b                	jmp    c001b370 <Reg::readInt(char*, char*, int*)+0x4d>
c001b365:	ba 01 00 00 00       	mov    edx,0x1
c001b36a:	eb 02                	jmp    c001b36e <Reg::readInt(char*, char*, int*)+0x4b>
c001b36c:	31 d2                	xor    edx,edx
c001b36e:	31 c0                	xor    eax,eax
c001b370:	be 0a 00 00 00       	mov    esi,0xa
c001b375:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b37a:	75 20                	jne    c001b39c <Reg::readInt(char*, char*, int*)+0x79>
c001b37c:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b380:	80 f9 78             	cmp    cl,0x78
c001b383:	75 0a                	jne    c001b38f <Reg::readInt(char*, char*, int*)+0x6c>
c001b385:	83 c2 02             	add    edx,0x2
c001b388:	be 10 00 00 00       	mov    esi,0x10
c001b38d:	eb 0d                	jmp    c001b39c <Reg::readInt(char*, char*, int*)+0x79>
c001b38f:	80 f9 62             	cmp    cl,0x62
c001b392:	75 08                	jne    c001b39c <Reg::readInt(char*, char*, int*)+0x79>
c001b394:	83 c2 02             	add    edx,0x2
c001b397:	be 02 00 00 00       	mov    esi,0x2
c001b39c:	01 d7                	add    edi,edx
c001b39e:	31 d2                	xor    edx,edx
c001b3a0:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b3a2:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b3a6:	80 fb 0d             	cmp    bl,0xd
c001b3a9:	0f 94 c3             	sete   bl
c001b3ac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b3b1:	0f 94 c1             	sete   cl
c001b3b4:	08 cb                	or     bl,cl
c001b3b6:	75 3a                	jne    c001b3f2 <Reg::readInt(char*, char*, int*)+0xcf>
c001b3b8:	0f af d6             	imul   edx,esi
c001b3bb:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b3c0:	83 fe 10             	cmp    esi,0x10
c001b3c3:	75 26                	jne    c001b3eb <Reg::readInt(char*, char*, int*)+0xc8>
c001b3c5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b3c9:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b3cc:	89 e9                	mov    ecx,ebp
c001b3ce:	80 f9 05             	cmp    cl,0x5
c001b3d1:	77 06                	ja     c001b3d9 <Reg::readInt(char*, char*, int*)+0xb6>
c001b3d3:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b3d7:	eb 16                	jmp    c001b3ef <Reg::readInt(char*, char*, int*)+0xcc>
c001b3d9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b3dd:	83 e9 61             	sub    ecx,0x61
c001b3e0:	80 f9 05             	cmp    cl,0x5
c001b3e3:	77 06                	ja     c001b3eb <Reg::readInt(char*, char*, int*)+0xc8>
c001b3e5:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b3e9:	eb 04                	jmp    c001b3ef <Reg::readInt(char*, char*, int*)+0xcc>
c001b3eb:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b3ef:	47                   	inc    edi
c001b3f0:	eb ae                	jmp    c001b3a0 <Reg::readInt(char*, char*, int*)+0x7d>
c001b3f2:	84 c0                	test   al,al
c001b3f4:	74 02                	je     c001b3f8 <Reg::readInt(char*, char*, int*)+0xd5>
c001b3f6:	f7 da                	neg    edx
c001b3f8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b3ff:	89 10                	mov    DWORD PTR [eax],edx
c001b401:	88 d8                	mov    al,bl
c001b403:	81 c4 ec 00 00 00    	add    esp,0xec
c001b409:	5b                   	pop    ebx
c001b40a:	5e                   	pop    esi
c001b40b:	5f                   	pop    edi
c001b40c:	5d                   	pop    ebp
c001b40d:	c3                   	ret    

c001b40e <Reg::readString(char*, char*, char*, int)>:
c001b40e:	57                   	push   edi
c001b40f:	56                   	push   esi
c001b410:	53                   	push   ebx
c001b411:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b417:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b41e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b422:	57                   	push   edi
c001b423:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b42a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b431:	e8 b6 fe ff ff       	call   c001b2ec <Reg::getLine(char*, char*, char*)>
c001b436:	83 c4 10             	add    esp,0x10
c001b439:	89 c6                	mov    esi,eax
c001b43b:	84 c0                	test   al,al
c001b43d:	74 44                	je     c001b483 <Reg::readString(char*, char*, char*, int)+0x75>
c001b43f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b446:	31 c0                	xor    eax,eax
c001b448:	4a                   	dec    edx
c001b449:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b44c:	84 c9                	test   cl,cl
c001b44e:	74 0f                	je     c001b45f <Reg::readString(char*, char*, char*, int)+0x51>
c001b450:	39 c2                	cmp    edx,eax
c001b452:	7e 0b                	jle    c001b45f <Reg::readString(char*, char*, char*, int)+0x51>
c001b454:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b457:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b45c:	40                   	inc    eax
c001b45d:	eb ea                	jmp    c001b449 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b45f:	83 ec 0c             	sub    esp,0xc
c001b462:	53                   	push   ebx
c001b463:	e8 20 53 fe ff       	call   c0000788 <strlen>
c001b468:	83 c4 10             	add    esp,0x10
c001b46b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b470:	75 11                	jne    c001b483 <Reg::readString(char*, char*, char*, int)+0x75>
c001b472:	83 ec 0c             	sub    esp,0xc
c001b475:	53                   	push   ebx
c001b476:	e8 0d 53 fe ff       	call   c0000788 <strlen>
c001b47b:	83 c4 10             	add    esp,0x10
c001b47e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b483:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b489:	89 f0                	mov    eax,esi
c001b48b:	5b                   	pop    ebx
c001b48c:	5e                   	pop    esi
c001b48d:	5f                   	pop    edi
c001b48e:	c3                   	ret    

c001b48f <Reg::readBool(char*, char*, bool*)>:
c001b48f:	83 ec 20             	sub    esp,0x20
c001b492:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b496:	50                   	push   eax
c001b497:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b49f:	e8 7f fe ff ff       	call   c001b323 <Reg::readInt(char*, char*, int*)>
c001b4a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b4a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b4ad:	0f 95 02             	setne  BYTE PTR [edx]
c001b4b0:	83 c4 2c             	add    esp,0x2c
c001b4b3:	c3                   	ret    

c001b4b4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b4b4:	53                   	push   ebx
c001b4b5:	83 ec 1c             	sub    esp,0x1c
c001b4b8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b4bc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b4c0:	50                   	push   eax
c001b4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4c9:	e8 c1 ff ff ff       	call   c001b48f <Reg::readBool(char*, char*, bool*)>
c001b4ce:	83 c4 10             	add    esp,0x10
c001b4d1:	84 c0                	test   al,al
c001b4d3:	74 04                	je     c001b4d9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b4d5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b4d9:	88 d8                	mov    al,bl
c001b4db:	83 c4 18             	add    esp,0x18
c001b4de:	5b                   	pop    ebx
c001b4df:	c3                   	ret    

c001b4e0 <Reg::readIntWithDefault(char*, char*, int)>:
c001b4e0:	53                   	push   ebx
c001b4e1:	83 ec 1c             	sub    esp,0x1c
c001b4e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b4e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b4ec:	50                   	push   eax
c001b4ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4f5:	e8 29 fe ff ff       	call   c001b323 <Reg::readInt(char*, char*, int*)>
c001b4fa:	83 c4 10             	add    esp,0x10
c001b4fd:	84 c0                	test   al,al
c001b4ff:	74 04                	je     c001b505 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b501:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b505:	89 d8                	mov    eax,ebx
c001b507:	83 c4 18             	add    esp,0x18
c001b50a:	5b                   	pop    ebx
c001b50b:	c3                   	ret    

c001b50c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b50c:	57                   	push   edi
c001b50d:	56                   	push   esi
c001b50e:	53                   	push   ebx
c001b50f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b513:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b517:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b51b:	56                   	push   esi
c001b51c:	53                   	push   ebx
c001b51d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b521:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b525:	e8 e4 fe ff ff       	call   c001b40e <Reg::readString(char*, char*, char*, int)>
c001b52a:	83 c4 10             	add    esp,0x10
c001b52d:	84 c0                	test   al,al
c001b52f:	75 1b                	jne    c001b54c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b531:	50                   	push   eax
c001b532:	56                   	push   esi
c001b533:	4e                   	dec    esi
c001b534:	6a 00                	push   0x0
c001b536:	53                   	push   ebx
c001b537:	e8 30 52 fe ff       	call   c000076c <memset>
c001b53c:	83 c4 0c             	add    esp,0xc
c001b53f:	56                   	push   esi
c001b540:	57                   	push   edi
c001b541:	53                   	push   ebx
c001b542:	89 fb                	mov    ebx,edi
c001b544:	e8 67 58 fe ff       	call   c0000db0 <realmemcpy>
c001b549:	83 c4 10             	add    esp,0x10
c001b54c:	89 d8                	mov    eax,ebx
c001b54e:	5b                   	pop    ebx
c001b54f:	5e                   	pop    esi
c001b550:	5f                   	pop    edi
c001b551:	c3                   	ret    

c001b552 <Sys::eject(regs*)>:
c001b552:	83 ec 0c             	sub    esp,0xc
c001b555:	83 ca ff             	or     edx,0xffffffff
c001b558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b55c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b55f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b564:	83 e9 41             	sub    ecx,0x41
c001b567:	83 f9 19             	cmp    ecx,0x19
c001b56a:	77 18                	ja     c001b584 <Sys::eject(regs*)+0x32>
c001b56c:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c001b573:	85 c9                	test   ecx,ecx
c001b575:	74 0d                	je     c001b584 <Sys::eject(regs*)+0x32>
c001b577:	83 ec 0c             	sub    esp,0xc
c001b57a:	51                   	push   ecx
c001b57b:	e8 18 b2 ff ff       	call   c0016798 <LogicalDisk::eject()>
c001b580:	83 c4 10             	add    esp,0x10
c001b583:	99                   	cdq    
c001b584:	83 c4 0c             	add    esp,0xc
c001b587:	c3                   	ret    

c001b588 <Sys::exit(regs*)>:
c001b588:	83 ec 18             	sub    esp,0x18
c001b58b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b58f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b592:	e8 86 38 00 00       	call   c001ee1d <terminateTask(int)>
c001b597:	83 c8 ff             	or     eax,0xffffffff
c001b59a:	83 c4 1c             	add    esp,0x1c
c001b59d:	89 c2                	mov    edx,eax
c001b59f:	c3                   	ret    

c001b5a0 <Sys::getCwd(regs*)>:
c001b5a0:	83 ec 10             	sub    esp,0x10
c001b5a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5a7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b5aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b5ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5b5:	e8 1e 7c ff ff       	call   c00131d8 <Fs::getcwd(Process*, char*, int)>
c001b5ba:	83 c4 1c             	add    esp,0x1c
c001b5bd:	99                   	cdq    
c001b5be:	c3                   	ret    

c001b5bf <Sys::getPID(regs*)>:
c001b5bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5c9:	99                   	cdq    
c001b5ca:	c3                   	ret    

c001b5cb <Sys::getRAMData(regs*)>:
c001b5cb:	8b 0d 14 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002ef14
c001b5d1:	6b 05 10 ef 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ef10,0x64
c001b5d8:	99                   	cdq    
c001b5d9:	f7 f9                	idiv   ecx
c001b5db:	c1 e0 18             	shl    eax,0x18
c001b5de:	09 c8                	or     eax,ecx
c001b5e0:	99                   	cdq    
c001b5e1:	c3                   	ret    

c001b5e2 <Sys::getVGAPtr(regs*)>:
c001b5e2:	56                   	push   esi
c001b5e3:	53                   	push   ebx
c001b5e4:	83 ec 10             	sub    esp,0x10
c001b5e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b5eb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b5ee:	e8 0c 33 00 00       	call   c001e8ff <Thr::processFromPID(int)>
c001b5f3:	83 c4 10             	add    esp,0x10
c001b5f6:	89 c1                	mov    ecx,eax
c001b5f8:	b8 01 00 00 00       	mov    eax,0x1
c001b5fd:	85 c9                	test   ecx,ecx
c001b5ff:	74 5d                	je     c001b65e <Sys::getVGAPtr(regs*)+0x7c>
c001b601:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b607:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b60b:	74 0c                	je     c001b619 <Sys::getVGAPtr(regs*)+0x37>
c001b60d:	83 ec 0c             	sub    esp,0xc
c001b610:	53                   	push   ebx
c001b611:	e8 84 56 ff ff       	call   c0010c9a <setActiveTerminal(VgaText*)>
c001b616:	83 c4 10             	add    esp,0x10
c001b619:	81 c3 82 00 00 00    	add    ebx,0x82
c001b61f:	50                   	push   eax
c001b620:	68 a0 0f 00 00       	push   0xfa0
c001b625:	ff 73 8a             	push   DWORD PTR [ebx-0x76]
c001b628:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b62b:	e8 80 57 fe ff       	call   c0000db0 <realmemcpy>
c001b630:	8b 53 92             	mov    edx,DWORD PTR [ebx-0x6e]
c001b633:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b636:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b63c:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b63f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b642:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b648:	58                   	pop    eax
c001b649:	5a                   	pop    edx
c001b64a:	53                   	push   ebx
c001b64b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b64e:	05 a8 0f 00 00       	add    eax,0xfa8
c001b653:	50                   	push   eax
c001b654:	e8 cf 51 fe ff       	call   c0000828 <strcpy>
c001b659:	83 c4 10             	add    esp,0x10
c001b65c:	31 c0                	xor    eax,eax
c001b65e:	59                   	pop    ecx
c001b65f:	31 d2                	xor    edx,edx
c001b661:	5b                   	pop    ebx
c001b662:	5e                   	pop    esi
c001b663:	c3                   	ret    

c001b664 <Sys::loadDLL(regs*)>:
c001b664:	56                   	push   esi
c001b665:	53                   	push   ebx
c001b666:	31 d2                	xor    edx,edx
c001b668:	51                   	push   ecx
c001b669:	b8 01 00 00 00       	mov    eax,0x1
c001b66e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b672:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b676:	0f 84 8c 00 00 00    	je     c001b708 <Sys::loadDLL(regs*)+0xa4>
c001b67c:	83 ec 0c             	sub    esp,0xc
c001b67f:	68 14 01 00 00       	push   0x114
c001b684:	e8 37 42 ff ff       	call   c000f8c0 <malloc>
c001b689:	83 c4 0c             	add    esp,0xc
c001b68c:	89 c3                	mov    ebx,eax
c001b68e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b693:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b696:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b699:	53                   	push   ebx
c001b69a:	e8 37 7d ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001b69f:	83 c4 10             	add    esp,0x10
c001b6a2:	31 d2                	xor    edx,edx
c001b6a4:	b8 02 00 00 00       	mov    eax,0x2
c001b6a9:	85 db                	test   ebx,ebx
c001b6ab:	74 5b                	je     c001b708 <Sys::loadDLL(regs*)+0xa4>
c001b6ad:	83 ec 0c             	sub    esp,0xc
c001b6b0:	53                   	push   ebx
c001b6b1:	e8 f2 7f ff ff       	call   c00136a8 <File::exists()>
c001b6b6:	83 c4 10             	add    esp,0x10
c001b6b9:	84 c0                	test   al,al
c001b6bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6bd:	75 11                	jne    c001b6d0 <Sys::loadDLL(regs*)+0x6c>
c001b6bf:	83 ec 0c             	sub    esp,0xc
c001b6c2:	53                   	push   ebx
c001b6c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6c6:	83 c4 10             	add    esp,0x10
c001b6c9:	b8 03 00 00 00       	mov    eax,0x3
c001b6ce:	eb 36                	jmp    c001b706 <Sys::loadDLL(regs*)+0xa2>
c001b6d0:	83 ec 0c             	sub    esp,0xc
c001b6d3:	53                   	push   ebx
c001b6d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6d7:	58                   	pop    eax
c001b6d8:	5a                   	pop    edx
c001b6d9:	6a 00                	push   0x0
c001b6db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b6de:	e8 29 24 00 00       	call   c001db0c <Thr::loadDLL(char const*, bool)>
c001b6e3:	83 c4 10             	add    esp,0x10
c001b6e6:	89 c1                	mov    ecx,eax
c001b6e8:	31 d2                	xor    edx,edx
c001b6ea:	b8 04 00 00 00       	mov    eax,0x4
c001b6ef:	85 c9                	test   ecx,ecx
c001b6f1:	74 15                	je     c001b708 <Sys::loadDLL(regs*)+0xa4>
c001b6f3:	53                   	push   ebx
c001b6f4:	53                   	push   ebx
c001b6f5:	ff 35 c8 ee 02 c0    	push   DWORD PTR ds:0xc002eec8
c001b6fb:	51                   	push   ecx
c001b6fc:	e8 36 26 00 00       	call   c001dd37 <Thr::executeDLL(unsigned long, void*)>
c001b701:	83 c4 10             	add    esp,0x10
c001b704:	31 c0                	xor    eax,eax
c001b706:	31 d2                	xor    edx,edx
c001b708:	59                   	pop    ecx
c001b709:	5b                   	pop    ebx
c001b70a:	5e                   	pop    esi
c001b70b:	c3                   	ret    

c001b70c <Sys::read(regs*)>:
c001b70c:	57                   	push   edi
c001b70d:	56                   	push   esi
c001b70e:	53                   	push   ebx
c001b70f:	83 ec 10             	sub    esp,0x10
c001b712:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b716:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b719:	83 f8 02             	cmp    eax,0x2
c001b71c:	77 10                	ja     c001b72e <Sys::read(regs*)+0x22>
c001b71e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b723:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b726:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b72c:	eb 0e                	jmp    c001b73c <Sys::read(regs*)+0x30>
c001b72e:	83 ec 0c             	sub    esp,0xc
c001b731:	50                   	push   eax
c001b732:	e8 e4 61 ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001b737:	83 c4 10             	add    esp,0x10
c001b73a:	89 c1                	mov    ecx,eax
c001b73c:	83 c8 ff             	or     eax,0xffffffff
c001b73f:	85 c9                	test   ecx,ecx
c001b741:	89 c2                	mov    edx,eax
c001b743:	74 28                	je     c001b76d <Sys::read(regs*)+0x61>
c001b745:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b74d:	31 ff                	xor    edi,edi
c001b74f:	83 ec 0c             	sub    esp,0xc
c001b752:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b754:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b758:	52                   	push   edx
c001b759:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b75c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b75f:	57                   	push   edi
c001b760:	56                   	push   esi
c001b761:	51                   	push   ecx
c001b762:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b765:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b769:	83 c4 20             	add    esp,0x20
c001b76c:	99                   	cdq    
c001b76d:	83 c4 10             	add    esp,0x10
c001b770:	5b                   	pop    ebx
c001b771:	5e                   	pop    esi
c001b772:	5f                   	pop    edi
c001b773:	c3                   	ret    

c001b774 <Sys::sbrk(regs*)>:
c001b774:	56                   	push   esi
c001b775:	53                   	push   ebx
c001b776:	50                   	push   eax
c001b777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b77c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b780:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b783:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b786:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b78c:	85 db                	test   ebx,ebx
c001b78e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b791:	74 02                	je     c001b795 <Sys::sbrk(regs*)+0x21>
c001b793:	79 06                	jns    c001b79b <Sys::sbrk(regs*)+0x27>
c001b795:	89 f0                	mov    eax,esi
c001b797:	31 d2                	xor    edx,edx
c001b799:	eb 2a                	jmp    c001b7c5 <Sys::sbrk(regs*)+0x51>
c001b79b:	83 c8 ff             	or     eax,0xffffffff
c001b79e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b7a4:	89 c2                	mov    edx,eax
c001b7a6:	77 1d                	ja     c001b7c5 <Sys::sbrk(regs*)+0x51>
c001b7a8:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b7ae:	50                   	push   eax
c001b7af:	c1 ea 0c             	shr    edx,0xc
c001b7b2:	68 07 0c 00 00       	push   0xc07
c001b7b7:	52                   	push   edx
c001b7b8:	51                   	push   ecx
c001b7b9:	e8 ec 6b ff ff       	call   c00123aa <VAS::allocatePages(int, int)>
c001b7be:	89 f0                	mov    eax,esi
c001b7c0:	31 d2                	xor    edx,edx
c001b7c2:	83 c4 10             	add    esp,0x10
c001b7c5:	59                   	pop    ecx
c001b7c6:	5b                   	pop    ebx
c001b7c7:	5e                   	pop    esi
c001b7c8:	c3                   	ret    

c001b7c9 <Sys::setCwd(regs*)>:
c001b7c9:	83 ec 14             	sub    esp,0x14
c001b7cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7d0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b7d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7d8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7db:	e8 67 7f ff ff       	call   c0013747 <Fs::setcwd(Process*, char*)>
c001b7e0:	83 c4 1c             	add    esp,0x1c
c001b7e3:	99                   	cdq    
c001b7e4:	c3                   	ret    

c001b7e5 <Sys::setTime(regs*)>:
c001b7e5:	55                   	push   ebp
c001b7e6:	31 d2                	xor    edx,edx
c001b7e8:	57                   	push   edi
c001b7e9:	bf 18 00 00 00       	mov    edi,0x18
c001b7ee:	56                   	push   esi
c001b7ef:	53                   	push   ebx
c001b7f0:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b7f5:	83 ec 30             	sub    esp,0x30
c001b7f8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b7fc:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b7ff:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b802:	f7 f3                	div    ebx
c001b804:	89 d6                	mov    esi,edx
c001b806:	31 d2                	xor    edx,edx
c001b808:	f7 f3                	div    ebx
c001b80a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b80d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b811:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b816:	31 d2                	xor    edx,edx
c001b818:	f7 f3                	div    ebx
c001b81a:	31 d2                	xor    edx,edx
c001b81c:	bb 0c 00 00 00       	mov    ebx,0xc
c001b821:	f7 f7                	div    edi
c001b823:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b826:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b82a:	0f b7 cd             	movzx  ecx,bp
c001b82d:	56                   	push   esi
c001b82e:	89 c7                	mov    edi,eax
c001b830:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b834:	c1 e6 10             	shl    esi,0x10
c001b837:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b83b:	83 e7 1f             	and    edi,0x1f
c001b83e:	51                   	push   ecx
c001b83f:	47                   	inc    edi
c001b840:	c1 e8 05             	shr    eax,0x5
c001b843:	31 d2                	xor    edx,edx
c001b845:	f7 f3                	div    ebx
c001b847:	31 db                	xor    ebx,ebx
c001b849:	52                   	push   edx
c001b84a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b84e:	57                   	push   edi
c001b84f:	68 6d c7 02 c0       	push   0xc002c76d
c001b854:	e8 1e 76 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001b859:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b85d:	89 f8                	mov    eax,edi
c001b85f:	31 c9                	xor    ecx,ecx
c001b861:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b865:	88 c1                	mov    cl,al
c001b867:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b86d:	88 d5                	mov    ch,dl
c001b86f:	c1 e0 10             	shl    eax,0x10
c001b872:	0f b7 d1             	movzx  edx,cx
c001b875:	09 c2                	or     edx,eax
c001b877:	89 d8                	mov    eax,ebx
c001b879:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b87e:	09 f0                	or     eax,esi
c001b880:	89 c3                	mov    ebx,eax
c001b882:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b886:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b88a:	83 c4 18             	add    esp,0x18
c001b88d:	53                   	push   ebx
c001b88e:	52                   	push   edx
c001b88f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b893:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b897:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b89b:	e8 c9 85 ff ff       	call   c0013e69 <datetimeToSeconds(datetime_t)>
c001b8a0:	83 c4 0c             	add    esp,0xc
c001b8a3:	52                   	push   edx
c001b8a4:	50                   	push   eax
c001b8a5:	56                   	push   esi
c001b8a6:	e8 45 87 ff ff       	call   c0013ff0 <secondsToDatetime(unsigned long long)>
c001b8ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b8af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b8b3:	51                   	push   ecx
c001b8b4:	89 d6                	mov    esi,edx
c001b8b6:	51                   	push   ecx
c001b8b7:	c1 ee 10             	shr    esi,0x10
c001b8ba:	89 f3                	mov    ebx,esi
c001b8bc:	0f b6 f3             	movzx  esi,bl
c001b8bf:	56                   	push   esi
c001b8c0:	0f b6 f6             	movzx  esi,dh
c001b8c3:	0f b6 d2             	movzx  edx,dl
c001b8c6:	56                   	push   esi
c001b8c7:	52                   	push   edx
c001b8c8:	89 c2                	mov    edx,eax
c001b8ca:	c1 ea 10             	shr    edx,0x10
c001b8cd:	52                   	push   edx
c001b8ce:	0f b6 d4             	movzx  edx,ah
c001b8d1:	0f b6 c0             	movzx  eax,al
c001b8d4:	52                   	push   edx
c001b8d5:	50                   	push   eax
c001b8d6:	68 89 c7 02 c0       	push   0xc002c789
c001b8db:	e8 97 75 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001b8e0:	83 c4 2c             	add    esp,0x2c
c001b8e3:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001b8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b8ec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b8f0:	53                   	push   ebx
c001b8f1:	51                   	push   ecx
c001b8f2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b8f8:	e8 93 86 ff ff       	call   c0013f90 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b8fd:	83 f0 01             	xor    eax,0x1
c001b900:	31 d2                	xor    edx,edx
c001b902:	0f b6 c0             	movzx  eax,al
c001b905:	83 c4 3c             	add    esp,0x3c
c001b908:	5b                   	pop    ebx
c001b909:	5e                   	pop    esi
c001b90a:	5f                   	pop    edi
c001b90b:	5d                   	pop    ebp
c001b90c:	c3                   	ret    

c001b90d <Sys::timezone(regs*)>:
c001b90d:	53                   	push   ebx
c001b90e:	83 ec 08             	sub    esp,0x8
c001b911:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b915:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b919:	75 17                	jne    c001b932 <Sys::timezone(regs*)+0x25>
c001b91b:	83 ec 0c             	sub    esp,0xc
c001b91e:	68 a5 c7 02 c0       	push   0xc002c7a5
c001b923:	e8 4f 75 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001b928:	83 c8 ff             	or     eax,0xffffffff
c001b92b:	83 c4 10             	add    esp,0x10
c001b92e:	89 c2                	mov    edx,eax
c001b930:	eb 20                	jmp    c001b952 <Sys::timezone(regs*)+0x45>
c001b932:	83 ec 0c             	sub    esp,0xc
c001b935:	68 dd c7 02 c0       	push   0xc002c7dd
c001b93a:	e8 38 75 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001b93f:	58                   	pop    eax
c001b940:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b943:	e8 aa 83 ff ff       	call   c0013cf2 <User::loadClockSettings(int)>
c001b948:	83 c4 10             	add    esp,0x10
c001b94b:	b8 01 00 00 00       	mov    eax,0x1
c001b950:	31 d2                	xor    edx,edx
c001b952:	83 c4 08             	add    esp,0x8
c001b955:	5b                   	pop    ebx
c001b956:	c3                   	ret    

c001b957 <Sys::write(regs*)>:
c001b957:	57                   	push   edi
c001b958:	56                   	push   esi
c001b959:	53                   	push   ebx
c001b95a:	83 ec 10             	sub    esp,0x10
c001b95d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b961:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b964:	83 f8 02             	cmp    eax,0x2
c001b967:	77 10                	ja     c001b979 <Sys::write(regs*)+0x22>
c001b969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b96e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b971:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b977:	eb 0e                	jmp    c001b987 <Sys::write(regs*)+0x30>
c001b979:	83 ec 0c             	sub    esp,0xc
c001b97c:	50                   	push   eax
c001b97d:	e8 99 5f ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001b982:	83 c4 10             	add    esp,0x10
c001b985:	89 c1                	mov    ecx,eax
c001b987:	83 c8 ff             	or     eax,0xffffffff
c001b98a:	85 c9                	test   ecx,ecx
c001b98c:	89 c2                	mov    edx,eax
c001b98e:	74 28                	je     c001b9b8 <Sys::write(regs*)+0x61>
c001b990:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b998:	31 ff                	xor    edi,edi
c001b99a:	83 ec 0c             	sub    esp,0xc
c001b99d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b99f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b9a3:	52                   	push   edx
c001b9a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9a7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b9aa:	57                   	push   edi
c001b9ab:	56                   	push   esi
c001b9ac:	51                   	push   ecx
c001b9ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b9b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b9b4:	83 c4 20             	add    esp,0x20
c001b9b7:	99                   	cdq    
c001b9b8:	83 c4 10             	add    esp,0x10
c001b9bb:	5b                   	pop    ebx
c001b9bc:	5e                   	pop    esi
c001b9bd:	5f                   	pop    edi
c001b9be:	c3                   	ret    

c001b9bf <Sys::wsbe(regs*)>:
c001b9bf:	57                   	push   edi
c001b9c0:	b9 0b 00 00 00       	mov    ecx,0xb
c001b9c5:	56                   	push   esi
c001b9c6:	be 1c c8 02 c0       	mov    esi,0xc002c81c
c001b9cb:	53                   	push   ebx
c001b9cc:	83 ec 30             	sub    esp,0x30
c001b9cf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b9d3:	fc                   	cld    
c001b9d4:	83 ec 0c             	sub    esp,0xc
c001b9d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b9d9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b9dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9e5:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b9eb:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9ed:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b9f0:	57                   	push   edi
c001b9f1:	e8 92 4d fe ff       	call   c0000788 <strlen>
c001b9f6:	5a                   	pop    edx
c001b9f7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b9fb:	52                   	push   edx
c001b9fc:	31 d2                	xor    edx,edx
c001b9fe:	57                   	push   edi
c001b9ff:	52                   	push   edx
c001ba00:	50                   	push   eax
c001ba01:	56                   	push   esi
c001ba02:	ff d3                	call   ebx
c001ba04:	83 c4 14             	add    esp,0x14
c001ba07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ba0b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba0e:	e8 0a 34 00 00       	call   c001ee1d <terminateTask(int)>
c001ba13:	83 c4 40             	add    esp,0x40
c001ba16:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ba1b:	5b                   	pop    ebx
c001ba1c:	31 d2                	xor    edx,edx
c001ba1e:	5e                   	pop    esi
c001ba1f:	5f                   	pop    edi
c001ba20:	c3                   	ret    

c001ba21 <Sys::yield(regs*)>:
c001ba21:	57                   	push   edi
c001ba22:	56                   	push   esi
c001ba23:	53                   	push   ebx
c001ba24:	fa                   	cli    
c001ba25:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001ba2b:	e8 ba 2a 00 00       	call   c001e4ea <schedule()>
c001ba30:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001ba35:	48                   	dec    eax
c001ba36:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001ba3b:	75 01                	jne    c001ba3e <Sys::yield(regs*)+0x1d>
c001ba3d:	fb                   	sti    
c001ba3e:	8b 35 50 f5 02 c0    	mov    esi,DWORD PTR ds:0xc002f550
c001ba44:	8b 3d 54 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f554
c001ba4a:	89 f0                	mov    eax,esi
c001ba4c:	89 fb                	mov    ebx,edi
c001ba4e:	89 f1                	mov    ecx,esi
c001ba50:	c1 e0 07             	shl    eax,0x7
c001ba53:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ba57:	25 80 30 0f 00       	and    eax,0xf3080
c001ba5c:	c1 eb 17             	shr    ebx,0x17
c001ba5f:	31 c8                	xor    eax,ecx
c001ba61:	89 da                	mov    edx,ebx
c001ba63:	5b                   	pop    ebx
c001ba64:	5e                   	pop    esi
c001ba65:	5f                   	pop    edi
c001ba66:	c3                   	ret    

c001ba67 <sysCallSeekDir(regs*)>:
c001ba67:	31 c0                	xor    eax,eax
c001ba69:	31 d2                	xor    edx,edx
c001ba6b:	c3                   	ret    

c001ba6c <sysCallTellDir(regs*)>:
c001ba6c:	31 c0                	xor    eax,eax
c001ba6e:	31 d2                	xor    edx,edx
c001ba70:	c3                   	ret    

c001ba71 <sysCallVerify(regs*)>:
c001ba71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba75:	31 d2                	xor    edx,edx
c001ba77:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba7a:	c3                   	ret    

c001ba7b <sysFormatDisk(regs*)>:
c001ba7b:	56                   	push   esi
c001ba7c:	53                   	push   ebx
c001ba7d:	53                   	push   ebx
c001ba7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba82:	8b 1d 54 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f054
c001ba88:	eb 25                	jmp    c001baaf <sysFormatDisk(regs*)+0x34>
c001ba8a:	83 ec 0c             	sub    esp,0xc
c001ba8d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba90:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba92:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba95:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba98:	50                   	push   eax
c001ba99:	ff 34 85 e0 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b20]
c001baa0:	53                   	push   ebx
c001baa1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001baa4:	83 c4 20             	add    esp,0x20
c001baa7:	83 f8 08             	cmp    eax,0x8
c001baaa:	75 12                	jne    c001babe <sysFormatDisk(regs*)+0x43>
c001baac:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001baaf:	85 db                	test   ebx,ebx
c001bab1:	75 d7                	jne    c001ba8a <sysFormatDisk(regs*)+0xf>
c001bab3:	59                   	pop    ecx
c001bab4:	b8 03 00 00 00       	mov    eax,0x3
c001bab9:	31 d2                	xor    edx,edx
c001babb:	5b                   	pop    ebx
c001babc:	5e                   	pop    esi
c001babd:	c3                   	ret    
c001babe:	85 c0                	test   eax,eax
c001bac0:	74 1b                	je     c001badd <sysFormatDisk(regs*)+0x62>
c001bac2:	83 f8 09             	cmp    eax,0x9
c001bac5:	74 0b                	je     c001bad2 <sysFormatDisk(regs*)+0x57>
c001bac7:	59                   	pop    ecx
c001bac8:	b8 02 00 00 00       	mov    eax,0x2
c001bacd:	31 d2                	xor    edx,edx
c001bacf:	5b                   	pop    ebx
c001bad0:	5e                   	pop    esi
c001bad1:	c3                   	ret    
c001bad2:	59                   	pop    ecx
c001bad3:	b8 01 00 00 00       	mov    eax,0x1
c001bad8:	31 d2                	xor    edx,edx
c001bada:	5b                   	pop    ebx
c001badb:	5e                   	pop    esi
c001badc:	c3                   	ret    
c001badd:	59                   	pop    ecx
c001bade:	31 c0                	xor    eax,eax
c001bae0:	31 d2                	xor    edx,edx
c001bae2:	5b                   	pop    ebx
c001bae3:	5e                   	pop    esi
c001bae4:	c3                   	ret    

c001bae5 <sysSetDiskVolumeLabel(regs*)>:
c001bae5:	56                   	push   esi
c001bae6:	53                   	push   ebx
c001bae7:	53                   	push   ebx
c001bae8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001baec:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001baef:	83 f8 19             	cmp    eax,0x19
c001baf2:	77 29                	ja     c001bb1d <sysSetDiskVolumeLabel(regs*)+0x38>
c001baf4:	8b 0c 85 e0 f4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0b20]
c001bafb:	85 c9                	test   ecx,ecx
c001bafd:	74 1e                	je     c001bb1d <sysSetDiskVolumeLabel(regs*)+0x38>
c001baff:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bb02:	85 d2                	test   edx,edx
c001bb04:	74 17                	je     c001bb1d <sysSetDiskVolumeLabel(regs*)+0x38>
c001bb06:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bb0c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bb0e:	52                   	push   edx
c001bb0f:	50                   	push   eax
c001bb10:	51                   	push   ecx
c001bb11:	53                   	push   ebx
c001bb12:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bb15:	83 c4 10             	add    esp,0x10
c001bb18:	99                   	cdq    
c001bb19:	59                   	pop    ecx
c001bb1a:	5b                   	pop    ebx
c001bb1b:	5e                   	pop    esi
c001bb1c:	c3                   	ret    
c001bb1d:	59                   	pop    ecx
c001bb1e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb23:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb28:	5b                   	pop    ebx
c001bb29:	5e                   	pop    esi
c001bb2a:	c3                   	ret    

c001bb2b <sysGetDiskVolumeLabel(regs*)>:
c001bb2b:	57                   	push   edi
c001bb2c:	56                   	push   esi
c001bb2d:	53                   	push   ebx
c001bb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb32:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bb35:	83 fa 19             	cmp    edx,0x19
c001bb38:	77 34                	ja     c001bb6e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb3a:	8b 0c 95 e0 f4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0b20]
c001bb41:	85 c9                	test   ecx,ecx
c001bb43:	74 29                	je     c001bb6e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb45:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bb48:	85 db                	test   ebx,ebx
c001bb4a:	74 22                	je     c001bb6e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb4c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bb4f:	85 c0                	test   eax,eax
c001bb51:	74 1b                	je     c001bb6e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb53:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bb59:	83 ec 0c             	sub    esp,0xc
c001bb5c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bb5e:	50                   	push   eax
c001bb5f:	53                   	push   ebx
c001bb60:	52                   	push   edx
c001bb61:	51                   	push   ecx
c001bb62:	56                   	push   esi
c001bb63:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bb66:	83 c4 20             	add    esp,0x20
c001bb69:	99                   	cdq    
c001bb6a:	5b                   	pop    ebx
c001bb6b:	5e                   	pop    esi
c001bb6c:	5f                   	pop    edi
c001bb6d:	c3                   	ret    
c001bb6e:	5b                   	pop    ebx
c001bb6f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb74:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb79:	5e                   	pop    esi
c001bb7a:	5f                   	pop    edi
c001bb7b:	c3                   	ret    

c001bb7c <sysShutdown(regs*)>:
c001bb7c:	83 ec 0c             	sub    esp,0xc
c001bb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb83:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb86:	85 c0                	test   eax,eax
c001bb88:	74 18                	je     c001bba2 <sysShutdown(regs*)+0x26>
c001bb8a:	83 f8 01             	cmp    eax,0x1
c001bb8d:	74 38                	je     c001bbc7 <sysShutdown(regs*)+0x4b>
c001bb8f:	83 f8 02             	cmp    eax,0x2
c001bb92:	74 24                	je     c001bbb8 <sysShutdown(regs*)+0x3c>
c001bb94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb99:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb9e:	83 c4 0c             	add    esp,0xc
c001bba1:	c3                   	ret    
c001bba2:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001bba7:	8b 10                	mov    edx,DWORD PTR [eax]
c001bba9:	6a 00                	push   0x0
c001bbab:	6a 00                	push   0x0
c001bbad:	6a 00                	push   0x0
c001bbaf:	50                   	push   eax
c001bbb0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bbb3:	83 c4 10             	add    esp,0x10
c001bbb6:	eb dc                	jmp    c001bb94 <sysShutdown(regs*)+0x18>
c001bbb8:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001bbbd:	8b 10                	mov    edx,DWORD PTR [eax]
c001bbbf:	6a 00                	push   0x0
c001bbc1:	6a 00                	push   0x0
c001bbc3:	6a 01                	push   0x1
c001bbc5:	eb e8                	jmp    c001bbaf <sysShutdown(regs*)+0x33>
c001bbc7:	a1 80 15 03 c0       	mov    eax,ds:0xc0031580
c001bbcc:	85 c0                	test   eax,eax
c001bbce:	74 02                	je     c001bbd2 <sysShutdown(regs*)+0x56>
c001bbd0:	ff d0                	call   eax
c001bbd2:	31 c0                	xor    eax,eax
c001bbd4:	31 d2                	xor    edx,edx
c001bbd6:	83 c4 0c             	add    esp,0xc
c001bbd9:	c3                   	ret    

c001bbda <sysCallRealpath(regs*)>:
c001bbda:	83 ec 0c             	sub    esp,0xc
c001bbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bbe4:	85 d2                	test   edx,edx
c001bbe6:	74 07                	je     c001bbef <sysCallRealpath(regs*)+0x15>
c001bbe8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bbeb:	85 c0                	test   eax,eax
c001bbed:	75 0b                	jne    c001bbfa <sysCallRealpath(regs*)+0x20>
c001bbef:	b8 01 00 00 00       	mov    eax,0x1
c001bbf4:	31 d2                	xor    edx,edx
c001bbf6:	83 c4 0c             	add    esp,0xc
c001bbf9:	c3                   	ret    
c001bbfa:	51                   	push   ecx
c001bbfb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bc01:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bc04:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bc0a:	51                   	push   ecx
c001bc0b:	52                   	push   edx
c001bc0c:	50                   	push   eax
c001bc0d:	e8 1a 76 ff ff       	call   c001322c <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc12:	83 c4 10             	add    esp,0x10
c001bc15:	31 c0                	xor    eax,eax
c001bc17:	31 d2                	xor    edx,edx
c001bc19:	83 c4 0c             	add    esp,0xc
c001bc1c:	c3                   	ret    

c001bc1d <sysCallGetArgc(regs*)>:
c001bc1d:	83 ec 14             	sub    esp,0x14
c001bc20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc28:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bc2e:	68 48 c8 02 c0       	push   0xc002c848
c001bc33:	e8 3f 72 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001bc38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc3d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc40:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bc46:	83 c4 1c             	add    esp,0x1c
c001bc49:	99                   	cdq    
c001bc4a:	c3                   	ret    

c001bc4b <sysCallReadDir(regs*)>:
c001bc4b:	53                   	push   ebx
c001bc4c:	83 ec 18             	sub    esp,0x18
c001bc4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc53:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bc56:	83 f8 02             	cmp    eax,0x2
c001bc59:	76 53                	jbe    c001bcae <sysCallReadDir(regs*)+0x63>
c001bc5b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc5e:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bc64:	77 4f                	ja     c001bcb5 <sysCallReadDir(regs*)+0x6a>
c001bc66:	83 ec 0c             	sub    esp,0xc
c001bc69:	50                   	push   eax
c001bc6a:	e8 ac 5c ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001bc6f:	83 c4 10             	add    esp,0x10
c001bc72:	85 c0                	test   eax,eax
c001bc74:	74 50                	je     c001bcc6 <sysCallReadDir(regs*)+0x7b>
c001bc76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc7e:	83 ec 0c             	sub    esp,0xc
c001bc81:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc83:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bc87:	51                   	push   ecx
c001bc88:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc8b:	6a 00                	push   0x0
c001bc8d:	68 10 01 00 00       	push   0x110
c001bc92:	50                   	push   eax
c001bc93:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc96:	83 c4 20             	add    esp,0x20
c001bc99:	85 c0                	test   eax,eax
c001bc9b:	74 38                	je     c001bcd5 <sysCallReadDir(regs*)+0x8a>
c001bc9d:	83 f8 07             	cmp    eax,0x7
c001bca0:	74 0c                	je     c001bcae <sysCallReadDir(regs*)+0x63>
c001bca2:	b8 02 00 00 00       	mov    eax,0x2
c001bca7:	31 d2                	xor    edx,edx
c001bca9:	83 c4 18             	add    esp,0x18
c001bcac:	5b                   	pop    ebx
c001bcad:	c3                   	ret    
c001bcae:	b8 01 00 00 00       	mov    eax,0x1
c001bcb3:	eb f2                	jmp    c001bca7 <sysCallReadDir(regs*)+0x5c>
c001bcb5:	83 ec 08             	sub    esp,0x8
c001bcb8:	52                   	push   edx
c001bcb9:	68 6c c9 02 c0       	push   0xc002c96c
c001bcbe:	e8 b4 71 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001bcc3:	83 c4 10             	add    esp,0x10
c001bcc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bccb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd0:	83 c4 18             	add    esp,0x18
c001bcd3:	5b                   	pop    ebx
c001bcd4:	c3                   	ret    
c001bcd5:	31 c0                	xor    eax,eax
c001bcd7:	eb ce                	jmp    c001bca7 <sysCallReadDir(regs*)+0x5c>

c001bcd9 <sysCallIsATTY(regs*)>:
c001bcd9:	83 ec 0c             	sub    esp,0xc
c001bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bce3:	83 f8 02             	cmp    eax,0x2
c001bce6:	76 07                	jbe    c001bcef <sysCallIsATTY(regs*)+0x16>
c001bce8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bced:	75 26                	jne    c001bd15 <sysCallIsATTY(regs*)+0x3c>
c001bcef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcf4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcf7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bcfd:	85 c0                	test   eax,eax
c001bcff:	74 24                	je     c001bd25 <sysCallIsATTY(regs*)+0x4c>
c001bd01:	83 ec 0c             	sub    esp,0xc
c001bd04:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd06:	50                   	push   eax
c001bd07:	ff 12                	call   DWORD PTR [edx]
c001bd09:	31 d2                	xor    edx,edx
c001bd0b:	0f b6 c0             	movzx  eax,al
c001bd0e:	83 c4 10             	add    esp,0x10
c001bd11:	83 c4 0c             	add    esp,0xc
c001bd14:	c3                   	ret    
c001bd15:	83 ec 0c             	sub    esp,0xc
c001bd18:	50                   	push   eax
c001bd19:	e8 fd 5b ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	85 c0                	test   eax,eax
c001bd23:	75 dc                	jne    c001bd01 <sysCallIsATTY(regs*)+0x28>
c001bd25:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd2a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2f:	83 c4 0c             	add    esp,0xc
c001bd32:	c3                   	ret    

c001bd33 <sysCallSeek(regs*)>:
c001bd33:	53                   	push   ebx
c001bd34:	83 ec 08             	sub    esp,0x8
c001bd37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd3b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd3e:	83 f8 02             	cmp    eax,0x2
c001bd41:	76 4a                	jbe    c001bd8d <sysCallSeek(regs*)+0x5a>
c001bd43:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd48:	77 32                	ja     c001bd7c <sysCallSeek(regs*)+0x49>
c001bd4a:	83 ec 0c             	sub    esp,0xc
c001bd4d:	50                   	push   eax
c001bd4e:	e8 c8 5b ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001bd53:	83 c4 0c             	add    esp,0xc
c001bd56:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bd59:	31 db                	xor    ebx,ebx
c001bd5b:	53                   	push   ebx
c001bd5c:	51                   	push   ecx
c001bd5d:	50                   	push   eax
c001bd5e:	e8 95 77 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	85 c0                	test   eax,eax
c001bd68:	0f 95 c0             	setne  al
c001bd6b:	31 d2                	xor    edx,edx
c001bd6d:	0f b6 c0             	movzx  eax,al
c001bd70:	f7 d8                	neg    eax
c001bd72:	83 d2 00             	adc    edx,0x0
c001bd75:	83 c4 08             	add    esp,0x8
c001bd78:	f7 da                	neg    edx
c001bd7a:	5b                   	pop    ebx
c001bd7b:	c3                   	ret    
c001bd7c:	83 ec 08             	sub    esp,0x8
c001bd7f:	50                   	push   eax
c001bd80:	68 53 c8 02 c0       	push   0xc002c853
c001bd85:	e8 ed 70 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001bd8a:	83 c4 10             	add    esp,0x10
c001bd8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd92:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd97:	83 c4 08             	add    esp,0x8
c001bd9a:	5b                   	pop    ebx
c001bd9b:	c3                   	ret    

c001bd9c <sysCallTell(regs*)>:
c001bd9c:	53                   	push   ebx
c001bd9d:	83 ec 08             	sub    esp,0x8
c001bda0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bda4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bda7:	83 f8 02             	cmp    eax,0x2
c001bdaa:	76 5e                	jbe    c001be0a <sysCallTell(regs*)+0x6e>
c001bdac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdb1:	77 2d                	ja     c001bde0 <sysCallTell(regs*)+0x44>
c001bdb3:	83 ec 0c             	sub    esp,0xc
c001bdb6:	50                   	push   eax
c001bdb7:	e8 5f 5b ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001bdbc:	5a                   	pop    edx
c001bdbd:	59                   	pop    ecx
c001bdbe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bdc1:	50                   	push   eax
c001bdc2:	e8 87 77 ff ff       	call   c001354e <File::tell(unsigned long long*)>
c001bdc7:	83 c4 10             	add    esp,0x10
c001bdca:	85 c0                	test   eax,eax
c001bdcc:	0f 95 c0             	setne  al
c001bdcf:	31 d2                	xor    edx,edx
c001bdd1:	0f b6 c0             	movzx  eax,al
c001bdd4:	f7 d8                	neg    eax
c001bdd6:	83 d2 00             	adc    edx,0x0
c001bdd9:	83 c4 08             	add    esp,0x8
c001bddc:	f7 da                	neg    edx
c001bdde:	5b                   	pop    ebx
c001bddf:	c3                   	ret    
c001bde0:	83 ec 08             	sub    esp,0x8
c001bde3:	50                   	push   eax
c001bde4:	68 6d c8 02 c0       	push   0xc002c86d
c001bde9:	e8 89 70 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001bdee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bdf1:	83 c4 10             	add    esp,0x10
c001bdf4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bdfa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be01:	31 d2                	xor    edx,edx
c001be03:	31 c0                	xor    eax,eax
c001be05:	83 c4 08             	add    esp,0x8
c001be08:	5b                   	pop    ebx
c001be09:	c3                   	ret    
c001be0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be14:	83 c4 08             	add    esp,0x8
c001be17:	5b                   	pop    ebx
c001be18:	c3                   	ret    

c001be19 <sysCallSize(regs*)>:
c001be19:	53                   	push   ebx
c001be1a:	83 ec 18             	sub    esp,0x18
c001be1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be24:	83 f8 02             	cmp    eax,0x2
c001be27:	76 64                	jbe    c001be8d <sysCallSize(regs*)+0x74>
c001be29:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001be2e:	77 33                	ja     c001be63 <sysCallSize(regs*)+0x4a>
c001be30:	83 ec 0c             	sub    esp,0xc
c001be33:	50                   	push   eax
c001be34:	e8 e2 5a ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001be39:	83 c4 0c             	add    esp,0xc
c001be3c:	8d 54 24 13          	lea    edx,[esp+0x13]
c001be40:	52                   	push   edx
c001be41:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be44:	50                   	push   eax
c001be45:	e8 9c 78 ff ff       	call   c00136e6 <File::stat(unsigned long long*, bool*)>
c001be4a:	83 c4 10             	add    esp,0x10
c001be4d:	85 c0                	test   eax,eax
c001be4f:	0f 95 c0             	setne  al
c001be52:	31 d2                	xor    edx,edx
c001be54:	0f b6 c0             	movzx  eax,al
c001be57:	f7 d8                	neg    eax
c001be59:	83 d2 00             	adc    edx,0x0
c001be5c:	83 c4 18             	add    esp,0x18
c001be5f:	f7 da                	neg    edx
c001be61:	5b                   	pop    ebx
c001be62:	c3                   	ret    
c001be63:	83 ec 08             	sub    esp,0x8
c001be66:	50                   	push   eax
c001be67:	68 87 c8 02 c0       	push   0xc002c887
c001be6c:	e8 06 70 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001be71:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be74:	83 c4 10             	add    esp,0x10
c001be77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be84:	31 d2                	xor    edx,edx
c001be86:	31 c0                	xor    eax,eax
c001be88:	83 c4 18             	add    esp,0x18
c001be8b:	5b                   	pop    ebx
c001be8c:	c3                   	ret    
c001be8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be92:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be97:	83 c4 18             	add    esp,0x18
c001be9a:	5b                   	pop    ebx
c001be9b:	c3                   	ret    

c001be9c <sysCallSizeFromFilename(regs*)>:
c001be9c:	57                   	push   edi
c001be9d:	56                   	push   esi
c001be9e:	53                   	push   ebx
c001be9f:	83 ec 20             	sub    esp,0x20
c001bea2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bea6:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bea9:	83 fb 02             	cmp    ebx,0x2
c001beac:	0f 86 99 00 00 00    	jbe    c001bf4b <sysCallSizeFromFilename(regs*)+0xaf>
c001beb2:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001beb8:	77 65                	ja     c001bf1f <sysCallSizeFromFilename(regs*)+0x83>
c001beba:	83 ec 0c             	sub    esp,0xc
c001bebd:	68 14 01 00 00       	push   0x114
c001bec2:	e8 f9 39 ff ff       	call   c000f8c0 <malloc>
c001bec7:	83 c4 0c             	add    esp,0xc
c001beca:	89 c6                	mov    esi,eax
c001becc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed4:	53                   	push   ebx
c001bed5:	56                   	push   esi
c001bed6:	e8 fb 74 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001bedb:	83 c4 0c             	add    esp,0xc
c001bede:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bee2:	50                   	push   eax
c001bee3:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bee6:	56                   	push   esi
c001bee7:	e8 fa 77 ff ff       	call   c00136e6 <File::stat(unsigned long long*, bool*)>
c001beec:	83 c4 10             	add    esp,0x10
c001beef:	85 f6                	test   esi,esi
c001bef1:	74 14                	je     c001bf07 <sysCallSizeFromFilename(regs*)+0x6b>
c001bef3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bef7:	8b 16                	mov    edx,DWORD PTR [esi]
c001bef9:	83 ec 0c             	sub    esp,0xc
c001befc:	56                   	push   esi
c001befd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf00:	83 c4 10             	add    esp,0x10
c001bf03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf07:	85 c0                	test   eax,eax
c001bf09:	0f 95 c0             	setne  al
c001bf0c:	31 d2                	xor    edx,edx
c001bf0e:	0f b6 c0             	movzx  eax,al
c001bf11:	f7 d8                	neg    eax
c001bf13:	83 d2 00             	adc    edx,0x0
c001bf16:	83 c4 20             	add    esp,0x20
c001bf19:	f7 da                	neg    edx
c001bf1b:	5b                   	pop    ebx
c001bf1c:	5e                   	pop    esi
c001bf1d:	5f                   	pop    edi
c001bf1e:	c3                   	ret    
c001bf1f:	83 ec 08             	sub    esp,0x8
c001bf22:	53                   	push   ebx
c001bf23:	68 87 c8 02 c0       	push   0xc002c887
c001bf28:	e8 4a 6f ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001bf2d:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bf30:	83 c4 10             	add    esp,0x10
c001bf33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf40:	31 d2                	xor    edx,edx
c001bf42:	83 c4 20             	add    esp,0x20
c001bf45:	31 c0                	xor    eax,eax
c001bf47:	5b                   	pop    ebx
c001bf48:	5e                   	pop    esi
c001bf49:	5f                   	pop    edi
c001bf4a:	c3                   	ret    
c001bf4b:	83 c4 20             	add    esp,0x20
c001bf4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf53:	5b                   	pop    ebx
c001bf54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf59:	5e                   	pop    esi
c001bf5a:	5f                   	pop    edi
c001bf5b:	c3                   	ret    

c001bf5c <sysCallClose(regs*)>:
c001bf5c:	53                   	push   ebx
c001bf5d:	83 ec 08             	sub    esp,0x8
c001bf60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf67:	83 f8 02             	cmp    eax,0x2
c001bf6a:	76 50                	jbe    c001bfbc <sysCallClose(regs*)+0x60>
c001bf6c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf71:	74 58                	je     c001bfcb <sysCallClose(regs*)+0x6f>
c001bf73:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf78:	74 60                	je     c001bfda <sysCallClose(regs*)+0x7e>
c001bf7a:	77 2f                	ja     c001bfab <sysCallClose(regs*)+0x4f>
c001bf7c:	83 ec 0c             	sub    esp,0xc
c001bf7f:	50                   	push   eax
c001bf80:	e8 96 59 ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001bf85:	89 c3                	mov    ebx,eax
c001bf87:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf8a:	e8 09 75 ff ff       	call   c0013498 <File::close()>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	85 db                	test   ebx,ebx
c001bf94:	74 0c                	je     c001bfa2 <sysCallClose(regs*)+0x46>
c001bf96:	83 ec 0c             	sub    esp,0xc
c001bf99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf9b:	53                   	push   ebx
c001bf9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf9f:	83 c4 10             	add    esp,0x10
c001bfa2:	31 c0                	xor    eax,eax
c001bfa4:	31 d2                	xor    edx,edx
c001bfa6:	83 c4 08             	add    esp,0x8
c001bfa9:	5b                   	pop    ebx
c001bfaa:	c3                   	ret    
c001bfab:	83 ec 08             	sub    esp,0x8
c001bfae:	50                   	push   eax
c001bfaf:	68 90 c9 02 c0       	push   0xc002c990
c001bfb4:	e8 be 6e ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001bfb9:	83 c4 10             	add    esp,0x10
c001bfbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfc1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfc6:	83 c4 08             	add    esp,0x8
c001bfc9:	5b                   	pop    ebx
c001bfca:	c3                   	ret    
c001bfcb:	83 ec 0c             	sub    esp,0xc
c001bfce:	68 a2 c8 02 c0       	push   0xc002c8a2
c001bfd3:	e8 9f 6e ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001bfd8:	eb c5                	jmp    c001bf9f <sysCallClose(regs*)+0x43>
c001bfda:	83 ec 0c             	sub    esp,0xc
c001bfdd:	68 b0 c8 02 c0       	push   0xc002c8b0
c001bfe2:	eb ef                	jmp    c001bfd3 <sysCallClose(regs*)+0x77>

c001bfe4 <sysCallOpenDir(regs*)>:
c001bfe4:	56                   	push   esi
c001bfe5:	53                   	push   ebx
c001bfe6:	53                   	push   ebx
c001bfe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfeb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bfee:	85 f6                	test   esi,esi
c001bff0:	74 59                	je     c001c04b <sysCallOpenDir(regs*)+0x67>
c001bff2:	83 ec 0c             	sub    esp,0xc
c001bff5:	68 14 01 00 00       	push   0x114
c001bffa:	e8 c1 38 ff ff       	call   c000f8c0 <malloc>
c001bfff:	83 c4 0c             	add    esp,0xc
c001c002:	89 c6                	mov    esi,eax
c001c004:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c009:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c00c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c00f:	56                   	push   esi
c001c010:	e8 6d 78 ff ff       	call   c0013882 <Directory::Directory(char const*, Process*)>
c001c015:	83 c4 10             	add    esp,0x10
c001c018:	85 f6                	test   esi,esi
c001c01a:	74 2f                	je     c001c04b <sysCallOpenDir(regs*)+0x67>
c001c01c:	83 ec 0c             	sub    esp,0xc
c001c01f:	56                   	push   esi
c001c020:	e8 c1 78 ff ff       	call   c00138e6 <Directory::open()>
c001c025:	83 c4 10             	add    esp,0x10
c001c028:	85 c0                	test   eax,eax
c001c02a:	75 1f                	jne    c001c04b <sysCallOpenDir(regs*)+0x67>
c001c02c:	83 ec 0c             	sub    esp,0xc
c001c02f:	56                   	push   esi
c001c030:	e8 f1 55 ff ff       	call   c0011626 <UnixFile::getFileDescriptor()>
c001c035:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c038:	83 c4 10             	add    esp,0x10
c001c03b:	89 02                	mov    DWORD PTR [edx],eax
c001c03d:	c1 f8 1f             	sar    eax,0x1f
c001c040:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c043:	31 c0                	xor    eax,eax
c001c045:	59                   	pop    ecx
c001c046:	31 d2                	xor    edx,edx
c001c048:	5b                   	pop    ebx
c001c049:	5e                   	pop    esi
c001c04a:	c3                   	ret    
c001c04b:	59                   	pop    ecx
c001c04c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c051:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c056:	5b                   	pop    ebx
c001c057:	5e                   	pop    esi
c001c058:	c3                   	ret    

c001c059 <sysCallCloseDir(regs*)>:
c001c059:	53                   	push   ebx
c001c05a:	83 ec 08             	sub    esp,0x8
c001c05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c061:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c064:	83 f8 02             	cmp    eax,0x2
c001c067:	76 47                	jbe    c001c0b0 <sysCallCloseDir(regs*)+0x57>
c001c069:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c06e:	77 2f                	ja     c001c09f <sysCallCloseDir(regs*)+0x46>
c001c070:	83 ec 0c             	sub    esp,0xc
c001c073:	50                   	push   eax
c001c074:	e8 a2 58 ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001c079:	89 c3                	mov    ebx,eax
c001c07b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c07e:	e8 bf 78 ff ff       	call   c0013942 <Directory::close()>
c001c083:	83 c4 10             	add    esp,0x10
c001c086:	85 db                	test   ebx,ebx
c001c088:	74 0c                	je     c001c096 <sysCallCloseDir(regs*)+0x3d>
c001c08a:	83 ec 0c             	sub    esp,0xc
c001c08d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c08f:	53                   	push   ebx
c001c090:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c093:	83 c4 10             	add    esp,0x10
c001c096:	31 c0                	xor    eax,eax
c001c098:	31 d2                	xor    edx,edx
c001c09a:	83 c4 08             	add    esp,0x8
c001c09d:	5b                   	pop    ebx
c001c09e:	c3                   	ret    
c001c09f:	83 ec 08             	sub    esp,0x8
c001c0a2:	50                   	push   eax
c001c0a3:	68 b8 c9 02 c0       	push   0xc002c9b8
c001c0a8:	e8 ca 6d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c0ad:	83 c4 10             	add    esp,0x10
c001c0b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0ba:	83 c4 08             	add    esp,0x8
c001c0bd:	5b                   	pop    ebx
c001c0be:	c3                   	ret    

c001c0bf <sysCallMakeDir(regs*)>:
c001c0bf:	56                   	push   esi
c001c0c0:	53                   	push   ebx
c001c0c1:	83 ec 10             	sub    esp,0x10
c001c0c4:	68 14 01 00 00       	push   0x114
c001c0c9:	e8 f2 37 ff ff       	call   c000f8c0 <malloc>
c001c0ce:	83 c4 0c             	add    esp,0xc
c001c0d1:	89 c3                	mov    ebx,eax
c001c0d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0df:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0e2:	53                   	push   ebx
c001c0e3:	e8 9a 77 ff ff       	call   c0013882 <Directory::Directory(char const*, Process*)>
c001c0e8:	83 c4 10             	add    esp,0x10
c001c0eb:	85 db                	test   ebx,ebx
c001c0ed:	74 32                	je     c001c121 <sysCallMakeDir(regs*)+0x62>
c001c0ef:	83 ec 0c             	sub    esp,0xc
c001c0f2:	53                   	push   ebx
c001c0f3:	e8 ce 79 ff ff       	call   c0013ac6 <Directory::create()>
c001c0f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0fb:	89 c6                	mov    esi,eax
c001c0fd:	e8 40 78 ff ff       	call   c0013942 <Directory::close()>
c001c102:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c104:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c107:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c10a:	83 c4 10             	add    esp,0x10
c001c10d:	31 c0                	xor    eax,eax
c001c10f:	59                   	pop    ecx
c001c110:	85 f6                	test   esi,esi
c001c112:	5b                   	pop    ebx
c001c113:	0f 95 c0             	setne  al
c001c116:	5e                   	pop    esi
c001c117:	31 d2                	xor    edx,edx
c001c119:	f7 d8                	neg    eax
c001c11b:	83 d2 00             	adc    edx,0x0
c001c11e:	f7 da                	neg    edx
c001c120:	c3                   	ret    
c001c121:	59                   	pop    ecx
c001c122:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c127:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c12c:	5b                   	pop    ebx
c001c12d:	5e                   	pop    esi
c001c12e:	c3                   	ret    

c001c12f <sysCallWait(regs*)>:
c001c12f:	83 ec 10             	sub    esp,0x10
c001c132:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c136:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c139:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c13c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c13f:	e8 d2 25 00 00       	call   c001e716 <waitTask(int, int*, int)>
c001c144:	83 c4 1c             	add    esp,0x1c
c001c147:	99                   	cdq    
c001c148:	c3                   	ret    

c001c149 <sysCallNotImpl(regs*)>:
c001c149:	83 ec 18             	sub    esp,0x18
c001c14c:	68 be c8 02 c0       	push   0xc002c8be
c001c151:	e8 0f e7 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001c156:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c15b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c160:	83 c4 1c             	add    esp,0x1c
c001c163:	c3                   	ret    

c001c164 <sysPanic(regs*)>:
c001c164:	83 ec 18             	sub    esp,0x18
c001c167:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c16b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c16e:	e8 f2 e6 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001c173:	c7 04 24 d8 c8 02 c0 	mov    DWORD PTR [esp],0xc002c8d8
c001c17a:	e8 e6 e6 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001c17f:	b8 01 00 00 00       	mov    eax,0x1
c001c184:	31 d2                	xor    edx,edx
c001c186:	83 c4 1c             	add    esp,0x1c
c001c189:	c3                   	ret    

c001c18a <sysCallRmdir(regs*)>:
c001c18a:	56                   	push   esi
c001c18b:	53                   	push   ebx
c001c18c:	83 ec 20             	sub    esp,0x20
c001c18f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c193:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c196:	68 14 01 00 00       	push   0x114
c001c19b:	e8 20 37 ff ff       	call   c000f8c0 <malloc>
c001c1a0:	83 c4 0c             	add    esp,0xc
c001c1a3:	89 c3                	mov    ebx,eax
c001c1a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1aa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1ad:	56                   	push   esi
c001c1ae:	53                   	push   ebx
c001c1af:	e8 22 72 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001c1b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1b7:	e8 f6 73 ff ff       	call   c00135b2 <File::unlink()>
c001c1bc:	83 c4 10             	add    esp,0x10
c001c1bf:	85 db                	test   ebx,ebx
c001c1c1:	74 14                	je     c001c1d7 <sysCallRmdir(regs*)+0x4d>
c001c1c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1c9:	83 ec 0c             	sub    esp,0xc
c001c1cc:	53                   	push   ebx
c001c1cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1d0:	83 c4 10             	add    esp,0x10
c001c1d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1d7:	85 c0                	test   eax,eax
c001c1d9:	0f 95 c0             	setne  al
c001c1dc:	31 d2                	xor    edx,edx
c001c1de:	0f b6 c0             	movzx  eax,al
c001c1e1:	f7 d8                	neg    eax
c001c1e3:	83 d2 00             	adc    edx,0x0
c001c1e6:	83 c4 14             	add    esp,0x14
c001c1e9:	f7 da                	neg    edx
c001c1eb:	5b                   	pop    ebx
c001c1ec:	5e                   	pop    esi
c001c1ed:	c3                   	ret    

c001c1ee <sysCallUnlink(regs*)>:
c001c1ee:	56                   	push   esi
c001c1ef:	53                   	push   ebx
c001c1f0:	83 ec 20             	sub    esp,0x20
c001c1f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c1f7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c1fa:	68 14 01 00 00       	push   0x114
c001c1ff:	e8 bc 36 ff ff       	call   c000f8c0 <malloc>
c001c204:	83 c4 0c             	add    esp,0xc
c001c207:	89 c3                	mov    ebx,eax
c001c209:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c20e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c211:	56                   	push   esi
c001c212:	53                   	push   ebx
c001c213:	e8 be 71 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001c218:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c21b:	e8 92 73 ff ff       	call   c00135b2 <File::unlink()>
c001c220:	83 c4 10             	add    esp,0x10
c001c223:	85 db                	test   ebx,ebx
c001c225:	74 14                	je     c001c23b <sysCallUnlink(regs*)+0x4d>
c001c227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c22b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c22d:	83 ec 0c             	sub    esp,0xc
c001c230:	53                   	push   ebx
c001c231:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c234:	83 c4 10             	add    esp,0x10
c001c237:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c23b:	85 c0                	test   eax,eax
c001c23d:	0f 95 c0             	setne  al
c001c240:	31 d2                	xor    edx,edx
c001c242:	0f b6 c0             	movzx  eax,al
c001c245:	f7 d8                	neg    eax
c001c247:	83 d2 00             	adc    edx,0x0
c001c24a:	83 c4 14             	add    esp,0x14
c001c24d:	f7 da                	neg    edx
c001c24f:	5b                   	pop    ebx
c001c250:	5e                   	pop    esi
c001c251:	c3                   	ret    

c001c252 <sysCallGetArgv(regs*)>:
c001c252:	83 ec 0c             	sub    esp,0xc
c001c255:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c259:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c25c:	85 c0                	test   eax,eax
c001c25e:	78 2b                	js     c001c28b <sysCallGetArgv(regs*)+0x39>
c001c260:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c266:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c269:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c26f:	7d 1a                	jge    c001c28b <sysCallGetArgv(regs*)+0x39>
c001c271:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c278:	85 c0                	test   eax,eax
c001c27a:	74 17                	je     c001c293 <sysCallGetArgv(regs*)+0x41>
c001c27c:	83 ec 08             	sub    esp,0x8
c001c27f:	50                   	push   eax
c001c280:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c283:	e8 a0 45 fe ff       	call   c0000828 <strcpy>
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	31 c0                	xor    eax,eax
c001c28d:	31 d2                	xor    edx,edx
c001c28f:	83 c4 0c             	add    esp,0xc
c001c292:	c3                   	ret    
c001c293:	b8 01 00 00 00       	mov    eax,0x1
c001c298:	31 d2                	xor    edx,edx
c001c29a:	83 c4 0c             	add    esp,0xc
c001c29d:	c3                   	ret    

c001c29e <sysCallTTYName(regs*)>:
c001c29e:	56                   	push   esi
c001c29f:	53                   	push   ebx
c001c2a0:	53                   	push   ebx
c001c2a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c2a5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c2a8:	85 c0                	test   eax,eax
c001c2aa:	74 5f                	je     c001c30b <sysCallTTYName(regs*)+0x6d>
c001c2ac:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c2af:	83 f8 02             	cmp    eax,0x2
c001c2b2:	77 3e                	ja     c001c2f2 <sysCallTTYName(regs*)+0x54>
c001c2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2bc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c2c2:	85 db                	test   ebx,ebx
c001c2c4:	74 45                	je     c001c30b <sysCallTTYName(regs*)+0x6d>
c001c2c6:	83 ec 0c             	sub    esp,0xc
c001c2c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2cb:	53                   	push   ebx
c001c2cc:	ff 10                	call   DWORD PTR [eax]
c001c2ce:	83 c4 10             	add    esp,0x10
c001c2d1:	84 c0                	test   al,al
c001c2d3:	74 41                	je     c001c316 <sysCallTTYName(regs*)+0x78>
c001c2d5:	83 ec 08             	sub    esp,0x8
c001c2d8:	81 c3 82 00 00 00    	add    ebx,0x82
c001c2de:	53                   	push   ebx
c001c2df:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c2e2:	e8 41 45 fe ff       	call   c0000828 <strcpy>
c001c2e7:	83 c4 10             	add    esp,0x10
c001c2ea:	31 c0                	xor    eax,eax
c001c2ec:	59                   	pop    ecx
c001c2ed:	31 d2                	xor    edx,edx
c001c2ef:	5b                   	pop    ebx
c001c2f0:	5e                   	pop    esi
c001c2f1:	c3                   	ret    
c001c2f2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c2f7:	74 bb                	je     c001c2b4 <sysCallTTYName(regs*)+0x16>
c001c2f9:	83 ec 0c             	sub    esp,0xc
c001c2fc:	50                   	push   eax
c001c2fd:	e8 19 56 ff ff       	call   c001191b <getFromFileDescriptor(int)>
c001c302:	83 c4 10             	add    esp,0x10
c001c305:	89 c3                	mov    ebx,eax
c001c307:	85 db                	test   ebx,ebx
c001c309:	75 bb                	jne    c001c2c6 <sysCallTTYName(regs*)+0x28>
c001c30b:	59                   	pop    ecx
c001c30c:	b8 01 00 00 00       	mov    eax,0x1
c001c311:	31 d2                	xor    edx,edx
c001c313:	5b                   	pop    ebx
c001c314:	5e                   	pop    esi
c001c315:	c3                   	ret    
c001c316:	59                   	pop    ecx
c001c317:	b8 02 00 00 00       	mov    eax,0x2
c001c31c:	31 d2                	xor    edx,edx
c001c31e:	5b                   	pop    ebx
c001c31f:	5e                   	pop    esi
c001c320:	c3                   	ret    

c001c321 <sysCallUSleep(regs*)>:
c001c321:	83 ec 14             	sub    esp,0x14
c001c324:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c329:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c32d:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c334:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c337:	01 ca                	add    edx,ecx
c001c339:	52                   	push   edx
c001c33a:	50                   	push   eax
c001c33b:	e8 ad 24 00 00       	call   c001e7ed <nanoSleep(unsigned long long)>
c001c340:	31 c0                	xor    eax,eax
c001c342:	31 d2                	xor    edx,edx
c001c344:	83 c4 1c             	add    esp,0x1c
c001c347:	c3                   	ret    

c001c348 <sysCallSpawn(regs*)>:
c001c348:	56                   	push   esi
c001c349:	53                   	push   ebx
c001c34a:	50                   	push   eax
c001c34b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c34f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c352:	85 c0                	test   eax,eax
c001c354:	75 08                	jne    c001c35e <sysCallSpawn(regs*)+0x16>
c001c356:	59                   	pop    ecx
c001c357:	31 c0                	xor    eax,eax
c001c359:	31 d2                	xor    edx,edx
c001c35b:	5b                   	pop    ebx
c001c35c:	5e                   	pop    esi
c001c35d:	c3                   	ret    
c001c35e:	83 ec 08             	sub    esp,0x8
c001c361:	50                   	push   eax
c001c362:	68 e7 c8 02 c0       	push   0xc002c8e7
c001c367:	e8 0b 6b ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c36c:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c373:	e8 48 35 ff ff       	call   c000f8c0 <malloc>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	89 c6                	mov    esi,eax
c001c37d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c380:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c383:	85 c0                	test   eax,eax
c001c385:	75 32                	jne    c001c3b9 <sysCallSpawn(regs*)+0x71>
c001c387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c38f:	52                   	push   edx
c001c390:	50                   	push   eax
c001c391:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c394:	56                   	push   esi
c001c395:	e8 30 1b 00 00       	call   c001deca <Process::Process(char const*, Process*, char**)>
c001c39a:	83 c4 10             	add    esp,0x10
c001c39d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c3a4:	75 b0                	jne    c001c356 <sysCallSpawn(regs*)+0xe>
c001c3a6:	83 ec 0c             	sub    esp,0xc
c001c3a9:	56                   	push   esi
c001c3aa:	e8 fd 1f 00 00       	call   c001e3ac <Process::createUserThread()>
c001c3af:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3b1:	83 c4 10             	add    esp,0x10
c001c3b4:	99                   	cdq    
c001c3b5:	59                   	pop    ecx
c001c3b6:	5b                   	pop    ebx
c001c3b7:	5e                   	pop    esi
c001c3b8:	c3                   	ret    
c001c3b9:	31 c0                	xor    eax,eax
c001c3bb:	eb d2                	jmp    c001c38f <sysCallSpawn(regs*)+0x47>

c001c3bd <sysCallGetEnv(regs*)>:
c001c3bd:	55                   	push   ebp
c001c3be:	57                   	push   edi
c001c3bf:	56                   	push   esi
c001c3c0:	53                   	push   ebx
c001c3c1:	83 ec 28             	sub    esp,0x28
c001c3c4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c3c8:	68 f5 c8 02 c0       	push   0xc002c8f5
c001c3cd:	e8 a5 6a ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c3d2:	5f                   	pop    edi
c001c3d3:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c3d6:	5d                   	pop    ebp
c001c3d7:	53                   	push   ebx
c001c3d8:	68 22 cc 02 c0       	push   0xc002cc22
c001c3dd:	e8 95 6a ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c3e2:	58                   	pop    eax
c001c3e3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c3e6:	5a                   	pop    edx
c001c3e7:	57                   	push   edi
c001c3e8:	68 fe c8 02 c0       	push   0xc002c8fe
c001c3ed:	e8 85 6a ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c3f2:	59                   	pop    ecx
c001c3f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3f8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3fb:	e8 81 e3 ff ff       	call   c001a781 <Krnl::getProcessTotalEnvCount(Process*)>
c001c400:	5a                   	pop    edx
c001c401:	89 c5                	mov    ebp,eax
c001c403:	59                   	pop    ecx
c001c404:	50                   	push   eax
c001c405:	68 08 c9 02 c0       	push   0xc002c908
c001c40a:	e8 68 6a ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c40f:	83 c4 10             	add    esp,0x10
c001c412:	39 ef                	cmp    edi,ebp
c001c414:	7c 15                	jl     c001c42b <sysCallGetEnv(regs*)+0x6e>
c001c416:	85 db                	test   ebx,ebx
c001c418:	75 0c                	jne    c001c426 <sysCallGetEnv(regs*)+0x69>
c001c41a:	83 c4 1c             	add    esp,0x1c
c001c41d:	31 c0                	xor    eax,eax
c001c41f:	5b                   	pop    ebx
c001c420:	31 d2                	xor    edx,edx
c001c422:	5e                   	pop    esi
c001c423:	5f                   	pop    edi
c001c424:	5d                   	pop    ebp
c001c425:	c3                   	ret    
c001c426:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c429:	eb ef                	jmp    c001c41a <sysCallGetEnv(regs*)+0x5d>
c001c42b:	83 ec 0c             	sub    esp,0xc
c001c42e:	68 14 c9 02 c0       	push   0xc002c914
c001c433:	e8 3f 6a ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c438:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c43c:	83 c4 0c             	add    esp,0xc
c001c43f:	57                   	push   edi
c001c440:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c446:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c449:	50                   	push   eax
c001c44a:	e8 52 e3 ff ff       	call   c001a7a1 <Krnl::getProcessEnvPair(Process*, int)>
c001c44f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c453:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c457:	68 d3 cc 02 c0       	push   0xc002ccd3
c001c45c:	e8 16 6a ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c461:	83 c4 10             	add    esp,0x10
c001c464:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c467:	85 f6                	test   esi,esi
c001c469:	75 47                	jne    c001c4b2 <sysCallGetEnv(regs*)+0xf5>
c001c46b:	83 ec 0c             	sub    esp,0xc
c001c46e:	55                   	push   ebp
c001c46f:	e8 14 43 fe ff       	call   c0000788 <strlen>
c001c474:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c477:	89 c3                	mov    ebx,eax
c001c479:	e8 0a 43 fe ff       	call   c0000788 <strlen>
c001c47e:	5a                   	pop    edx
c001c47f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c483:	59                   	pop    ecx
c001c484:	50                   	push   eax
c001c485:	68 17 c9 02 c0       	push   0xc002c917
c001c48a:	e8 e8 69 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c48f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c492:	e8 f1 42 fe ff       	call   c0000788 <strlen>
c001c497:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c49a:	89 c3                	mov    ebx,eax
c001c49c:	e8 e7 42 fe ff       	call   c0000788 <strlen>
c001c4a1:	83 c4 10             	add    esp,0x10
c001c4a4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c4a8:	83 c4 1c             	add    esp,0x1c
c001c4ab:	31 d2                	xor    edx,edx
c001c4ad:	5b                   	pop    ebx
c001c4ae:	5e                   	pop    esi
c001c4af:	5f                   	pop    edi
c001c4b0:	5d                   	pop    ebp
c001c4b1:	c3                   	ret    
c001c4b2:	83 ec 0c             	sub    esp,0xc
c001c4b5:	68 ed cc 02 c0       	push   0xc002cced
c001c4ba:	e8 b8 69 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c4bf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c4c2:	58                   	pop    eax
c001c4c3:	5a                   	pop    edx
c001c4c4:	55                   	push   ebp
c001c4c5:	53                   	push   ebx
c001c4c6:	e8 5d 43 fe ff       	call   c0000828 <strcpy>
c001c4cb:	59                   	pop    ecx
c001c4cc:	5e                   	pop    esi
c001c4cd:	68 21 c9 02 c0       	push   0xc002c921
c001c4d2:	53                   	push   ebx
c001c4d3:	e8 90 44 fe ff       	call   c0000968 <strcat>
c001c4d8:	5d                   	pop    ebp
c001c4d9:	58                   	pop    eax
c001c4da:	57                   	push   edi
c001c4db:	53                   	push   ebx
c001c4dc:	e8 87 44 fe ff       	call   c0000968 <strcat>
c001c4e1:	c7 04 24 07 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd07
c001c4e8:	e8 8a 69 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c4ed:	83 c4 10             	add    esp,0x10
c001c4f0:	e9 25 ff ff ff       	jmp    c001c41a <sysCallGetEnv(regs*)+0x5d>

c001c4f5 <sysAppSettings(regs*)>:
c001c4f5:	53                   	push   ebx
c001c4f6:	83 ec 08             	sub    esp,0x8
c001c4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4fd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c500:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c506:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c50b:	66 3d c0 09          	cmp    ax,0x9c0
c001c50f:	75 2f                	jne    c001c540 <sysAppSettings(regs*)+0x4b>
c001c511:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c517:	83 e0 1f             	and    eax,0x1f
c001c51a:	3c 01                	cmp    al,0x1
c001c51c:	74 2e                	je     c001c54c <sysAppSettings(regs*)+0x57>
c001c51e:	3c 07                	cmp    al,0x7
c001c520:	0f 84 bd 00 00 00    	je     c001c5e3 <sysAppSettings(regs*)+0xee>
c001c526:	84 c0                	test   al,al
c001c528:	0f 84 dc 00 00 00    	je     c001c60a <sysAppSettings(regs*)+0x115>
c001c52e:	3c 08                	cmp    al,0x8
c001c530:	74 6d                	je     c001c59f <sysAppSettings(regs*)+0xaa>
c001c532:	0f b6 c0             	movzx  eax,al
c001c535:	83 c4 08             	add    esp,0x8
c001c538:	05 e8 03 00 00       	add    eax,0x3e8
c001c53d:	5b                   	pop    ebx
c001c53e:	99                   	cdq    
c001c53f:	c3                   	ret    
c001c540:	b8 01 00 00 00       	mov    eax,0x1
c001c545:	31 d2                	xor    edx,edx
c001c547:	83 c4 08             	add    esp,0x8
c001c54a:	5b                   	pop    ebx
c001c54b:	c3                   	ret    
c001c54c:	51                   	push   ecx
c001c54d:	68 00 01 00 00       	push   0x100
c001c552:	6a 00                	push   0x0
c001c554:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c559:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c55c:	83 c0 0c             	add    eax,0xc
c001c55f:	50                   	push   eax
c001c560:	e8 07 42 fe ff       	call   c000076c <memset>
c001c565:	83 c4 0c             	add    esp,0xc
c001c568:	68 ff 00 00 00       	push   0xff
c001c56d:	53                   	push   ebx
c001c56e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c573:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c576:	83 c0 0c             	add    eax,0xc
c001c579:	50                   	push   eax
c001c57a:	e8 31 48 fe ff       	call   c0000db0 <realmemcpy>
c001c57f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c584:	5b                   	pop    ebx
c001c585:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c588:	5a                   	pop    edx
c001c589:	8d 50 0c             	lea    edx,[eax+0xc]
c001c58c:	52                   	push   edx
c001c58d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c593:	e8 ae 45 ff ff       	call   c0010b46 <VgaText::setTitle(char*)>
c001c598:	83 c4 10             	add    esp,0x10
c001c59b:	31 c0                	xor    eax,eax
c001c59d:	eb a6                	jmp    c001c545 <sysAppSettings(regs*)+0x50>
c001c59f:	83 ec 08             	sub    esp,0x8
c001c5a2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c5a8:	83 e0 0f             	and    eax,0xf
c001c5ab:	50                   	push   eax
c001c5ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c5ba:	e8 79 45 ff ff       	call   c0010b38 <VgaText::setTitleColour(VgaColour)>
c001c5bf:	58                   	pop    eax
c001c5c0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c5c6:	5a                   	pop    edx
c001c5c7:	c1 e8 04             	shr    eax,0x4
c001c5ca:	83 e0 0f             	and    eax,0xf
c001c5cd:	50                   	push   eax
c001c5ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c5dc:	e8 49 45 ff ff       	call   c0010b2a <VgaText::setTitleTextColour(VgaColour)>
c001c5e1:	eb b5                	jmp    c001c598 <sysAppSettings(regs*)+0xa3>
c001c5e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5eb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c5f1:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c5f7:	c0 e8 06             	shr    al,0x6
c001c5fa:	83 e0 01             	and    eax,0x1
c001c5fd:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c603:	31 c0                	xor    eax,eax
c001c605:	e9 3b ff ff ff       	jmp    c001c545 <sysAppSettings(regs*)+0x50>
c001c60a:	b8 02 00 00 00       	mov    eax,0x2
c001c60f:	e9 31 ff ff ff       	jmp    c001c545 <sysAppSettings(regs*)+0x50>

c001c614 <sysSetFatAttrib(regs*)>:
c001c614:	57                   	push   edi
c001c615:	56                   	push   esi
c001c616:	53                   	push   ebx
c001c617:	83 ec 1c             	sub    esp,0x1c
c001c61a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c61e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c621:	68 14 01 00 00       	push   0x114
c001c626:	e8 95 32 ff ff       	call   c000f8c0 <malloc>
c001c62b:	83 c4 0c             	add    esp,0xc
c001c62e:	89 c3                	mov    ebx,eax
c001c630:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c635:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c638:	57                   	push   edi
c001c639:	53                   	push   ebx
c001c63a:	e8 97 6d ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001c63f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c642:	83 c4 0c             	add    esp,0xc
c001c645:	0f b6 d4             	movzx  edx,ah
c001c648:	0f b6 c0             	movzx  eax,al
c001c64b:	52                   	push   edx
c001c64c:	50                   	push   eax
c001c64d:	53                   	push   ebx
c001c64e:	e8 f9 6f ff ff       	call   c001364c <File::chfatattr(unsigned char, unsigned char)>
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	85 db                	test   ebx,ebx
c001c658:	74 14                	je     c001c66e <sysSetFatAttrib(regs*)+0x5a>
c001c65a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c65e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c660:	83 ec 0c             	sub    esp,0xc
c001c663:	53                   	push   ebx
c001c664:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c667:	83 c4 10             	add    esp,0x10
c001c66a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c66e:	85 c0                	test   eax,eax
c001c670:	0f 95 c0             	setne  al
c001c673:	31 d2                	xor    edx,edx
c001c675:	0f b6 c0             	movzx  eax,al
c001c678:	f7 d8                	neg    eax
c001c67a:	83 d2 00             	adc    edx,0x0
c001c67d:	83 c4 10             	add    esp,0x10
c001c680:	f7 da                	neg    edx
c001c682:	5b                   	pop    ebx
c001c683:	5e                   	pop    esi
c001c684:	5f                   	pop    edi
c001c685:	c3                   	ret    

c001c686 <sysPipe(regs*)>:
c001c686:	57                   	push   edi
c001c687:	56                   	push   esi
c001c688:	53                   	push   ebx
c001c689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68d:	83 ec 0c             	sub    esp,0xc
c001c690:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c693:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c696:	6a 20                	push   0x20
c001c698:	e8 23 32 ff ff       	call   c000f8c0 <malloc>
c001c69d:	89 c3                	mov    ebx,eax
c001c69f:	58                   	pop    eax
c001c6a0:	5a                   	pop    edx
c001c6a1:	68 00 50 00 00       	push   0x5000
c001c6a6:	53                   	push   ebx
c001c6a7:	e8 42 3e ff ff       	call   c00104ee <Pipe::Pipe(int)>
c001c6ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6af:	e8 72 4f ff ff       	call   c0011626 <UnixFile::getFileDescriptor()>
c001c6b4:	89 07                	mov    DWORD PTR [edi],eax
c001c6b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6b9:	e8 68 4f ff ff       	call   c0011626 <UnixFile::getFileDescriptor()>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	89 06                	mov    DWORD PTR [esi],eax
c001c6c3:	31 d2                	xor    edx,edx
c001c6c5:	5b                   	pop    ebx
c001c6c6:	31 c0                	xor    eax,eax
c001c6c8:	5e                   	pop    esi
c001c6c9:	5f                   	pop    edi
c001c6ca:	c3                   	ret    

c001c6cb <sysGetUnixTime(regs*)>:
c001c6cb:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001c6d0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c6d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6da:	e9 e9 76 ff ff       	jmp    c0013dc8 <Clock::timeInSecondsLocal()>

c001c6df <string_ends_with(char const*, char const*)>:
c001c6df:	57                   	push   edi
c001c6e0:	56                   	push   esi
c001c6e1:	53                   	push   ebx
c001c6e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	53                   	push   ebx
c001c6ee:	e8 95 40 fe ff       	call   c0000788 <strlen>
c001c6f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6f6:	89 c6                	mov    esi,eax
c001c6f8:	e8 8b 40 fe ff       	call   c0000788 <strlen>
c001c6fd:	83 c4 10             	add    esp,0x10
c001c700:	39 c6                	cmp    esi,eax
c001c702:	7d 06                	jge    c001c70a <string_ends_with(char const*, char const*)+0x2b>
c001c704:	5b                   	pop    ebx
c001c705:	31 c0                	xor    eax,eax
c001c707:	5e                   	pop    esi
c001c708:	5f                   	pop    edi
c001c709:	c3                   	ret    
c001c70a:	83 ec 08             	sub    esp,0x8
c001c70d:	29 c6                	sub    esi,eax
c001c70f:	57                   	push   edi
c001c710:	01 f3                	add    ebx,esi
c001c712:	53                   	push   ebx
c001c713:	e8 9c 41 fe ff       	call   c00008b4 <strcmp>
c001c718:	83 c4 10             	add    esp,0x10
c001c71b:	85 c0                	test   eax,eax
c001c71d:	5b                   	pop    ebx
c001c71e:	0f 94 c0             	sete   al
c001c721:	5e                   	pop    esi
c001c722:	0f b6 c0             	movzx  eax,al
c001c725:	5f                   	pop    edi
c001c726:	c3                   	ret    

c001c727 <sysCallOpen(regs*)>:
c001c727:	56                   	push   esi
c001c728:	53                   	push   ebx
c001c729:	81 ec 04 01 00 00    	sub    esp,0x104
c001c72f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c736:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c739:	85 c9                	test   ecx,ecx
c001c73b:	0f 84 b3 00 00 00    	je     c001c7f4 <sysCallOpen(regs*)+0xcd>
c001c741:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c744:	85 c0                	test   eax,eax
c001c746:	0f 84 a8 00 00 00    	je     c001c7f4 <sysCallOpen(regs*)+0xcd>
c001c74c:	52                   	push   edx
c001c74d:	68 23 c9 02 c0       	push   0xc002c923
c001c752:	50                   	push   eax
c001c753:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c757:	56                   	push   esi
c001c758:	e8 cf 6a ff ff       	call   c001322c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c75d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c760:	e8 23 40 fe ff       	call   c0000788 <strlen>
c001c765:	83 c4 10             	add    esp,0x10
c001c768:	48                   	dec    eax
c001c769:	74 1d                	je     c001c788 <sysCallOpen(regs*)+0x61>
c001c76b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c76e:	eb 0f                	jmp    c001c77f <sysCallOpen(regs*)+0x58>
c001c770:	80 fa 3a             	cmp    dl,0x3a
c001c773:	74 0f                	je     c001c784 <sysCallOpen(regs*)+0x5d>
c001c775:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c779:	48                   	dec    eax
c001c77a:	74 0c                	je     c001c788 <sysCallOpen(regs*)+0x61>
c001c77c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c77f:	80 fa 2e             	cmp    dl,0x2e
c001c782:	75 ec                	jne    c001c770 <sysCallOpen(regs*)+0x49>
c001c784:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c788:	83 ec 08             	sub    esp,0x8
c001c78b:	68 27 c9 02 c0       	push   0xc002c927
c001c790:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c793:	e8 47 ff ff ff       	call   c001c6df <string_ends_with(char const*, char const*)>
c001c798:	83 c4 10             	add    esp,0x10
c001c79b:	85 c0                	test   eax,eax
c001c79d:	75 17                	jne    c001c7b6 <sysCallOpen(regs*)+0x8f>
c001c79f:	83 ec 08             	sub    esp,0x8
c001c7a2:	68 48 c9 02 c0       	push   0xc002c948
c001c7a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7aa:	e8 30 ff ff ff       	call   c001c6df <string_ends_with(char const*, char const*)>
c001c7af:	83 c4 10             	add    esp,0x10
c001c7b2:	85 c0                	test   eax,eax
c001c7b4:	74 51                	je     c001c807 <sysCallOpen(regs*)+0xe0>
c001c7b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c7b9:	83 ec 08             	sub    esp,0x8
c001c7bc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c7c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c7cc:	ff 30                	push   DWORD PTR [eax]
c001c7ce:	68 2c c9 02 c0       	push   0xc002c92c
c001c7d3:	e8 9f 66 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c7d8:	c7 04 24 3b c9 02 c0 	mov    DWORD PTR [esp],0xc002c93b
c001c7df:	e8 93 66 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001c7e4:	83 c4 10             	add    esp,0x10
c001c7e7:	81 c4 04 01 00 00    	add    esp,0x104
c001c7ed:	31 c0                	xor    eax,eax
c001c7ef:	31 d2                	xor    edx,edx
c001c7f1:	5b                   	pop    ebx
c001c7f2:	5e                   	pop    esi
c001c7f3:	c3                   	ret    
c001c7f4:	81 c4 04 01 00 00    	add    esp,0x104
c001c7fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c7ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c804:	5b                   	pop    ebx
c001c805:	5e                   	pop    esi
c001c806:	c3                   	ret    
c001c807:	83 ec 08             	sub    esp,0x8
c001c80a:	68 28 c9 02 c0       	push   0xc002c928
c001c80f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c812:	e8 9d 40 fe ff       	call   c00008b4 <strcmp>
c001c817:	83 c4 10             	add    esp,0x10
c001c81a:	85 c0                	test   eax,eax
c001c81c:	74 98                	je     c001c7b6 <sysCallOpen(regs*)+0x8f>
c001c81e:	83 ec 08             	sub    esp,0x8
c001c821:	68 27 c9 02 c0       	push   0xc002c927
c001c826:	56                   	push   esi
c001c827:	e8 b3 fe ff ff       	call   c001c6df <string_ends_with(char const*, char const*)>
c001c82c:	83 c4 10             	add    esp,0x10
c001c82f:	85 c0                	test   eax,eax
c001c831:	75 83                	jne    c001c7b6 <sysCallOpen(regs*)+0x8f>
c001c833:	83 ec 08             	sub    esp,0x8
c001c836:	68 4d c9 02 c0       	push   0xc002c94d
c001c83b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c83e:	e8 9c fe ff ff       	call   c001c6df <string_ends_with(char const*, char const*)>
c001c843:	83 c4 10             	add    esp,0x10
c001c846:	85 c0                	test   eax,eax
c001c848:	0f 85 d9 00 00 00    	jne    c001c927 <sysCallOpen(regs*)+0x200>
c001c84e:	83 ec 08             	sub    esp,0x8
c001c851:	68 52 c9 02 c0       	push   0xc002c952
c001c856:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c859:	e8 81 fe ff ff       	call   c001c6df <string_ends_with(char const*, char const*)>
c001c85e:	83 c4 10             	add    esp,0x10
c001c861:	85 c0                	test   eax,eax
c001c863:	0f 85 be 00 00 00    	jne    c001c927 <sysCallOpen(regs*)+0x200>
c001c869:	83 ec 08             	sub    esp,0x8
c001c86c:	68 4e c9 02 c0       	push   0xc002c94e
c001c871:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c874:	e8 3b 40 fe ff       	call   c00008b4 <strcmp>
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	85 c0                	test   eax,eax
c001c87e:	0f 84 a3 00 00 00    	je     c001c927 <sysCallOpen(regs*)+0x200>
c001c884:	83 ec 08             	sub    esp,0x8
c001c887:	68 4d c9 02 c0       	push   0xc002c94d
c001c88c:	56                   	push   esi
c001c88d:	e8 4d fe ff ff       	call   c001c6df <string_ends_with(char const*, char const*)>
c001c892:	83 c4 10             	add    esp,0x10
c001c895:	85 c0                	test   eax,eax
c001c897:	0f 85 8a 00 00 00    	jne    c001c927 <sysCallOpen(regs*)+0x200>
c001c89d:	83 ec 0c             	sub    esp,0xc
c001c8a0:	68 14 01 00 00       	push   0x114
c001c8a5:	e8 16 30 ff ff       	call   c000f8c0 <malloc>
c001c8aa:	83 c4 0c             	add    esp,0xc
c001c8ad:	89 c6                	mov    esi,eax
c001c8af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8b4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c8b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8ba:	56                   	push   esi
c001c8bb:	e8 16 6b ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	85 f6                	test   esi,esi
c001c8c5:	0f 84 29 ff ff ff    	je     c001c7f4 <sysCallOpen(regs*)+0xcd>
c001c8cb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c8ce:	0f b6 c2             	movzx  eax,dl
c001c8d1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c8d4:	89 d0                	mov    eax,edx
c001c8d6:	83 e0 01             	and    eax,0x1
c001c8d9:	f6 c2 02             	test   dl,0x2
c001c8dc:	74 03                	je     c001c8e1 <sysCallOpen(regs*)+0x1ba>
c001c8de:	83 c8 02             	or     eax,0x2
c001c8e1:	f6 c2 04             	test   dl,0x4
c001c8e4:	74 03                	je     c001c8e9 <sysCallOpen(regs*)+0x1c2>
c001c8e6:	83 c8 04             	or     eax,0x4
c001c8e9:	f6 c2 08             	test   dl,0x8
c001c8ec:	74 03                	je     c001c8f1 <sysCallOpen(regs*)+0x1ca>
c001c8ee:	83 c8 0a             	or     eax,0xa
c001c8f1:	83 e2 10             	and    edx,0x10
c001c8f4:	74 03                	je     c001c8f9 <sysCallOpen(regs*)+0x1d2>
c001c8f6:	83 c8 12             	or     eax,0x12
c001c8f9:	83 ec 08             	sub    esp,0x8
c001c8fc:	50                   	push   eax
c001c8fd:	56                   	push   esi
c001c8fe:	e8 37 6b ff ff       	call   c001343a <File::open(FileOpenMode)>
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	85 c0                	test   eax,eax
c001c908:	0f 85 e6 fe ff ff    	jne    c001c7f4 <sysCallOpen(regs*)+0xcd>
c001c90e:	83 ec 0c             	sub    esp,0xc
c001c911:	56                   	push   esi
c001c912:	e8 0f 4d ff ff       	call   c0011626 <UnixFile::getFileDescriptor()>
c001c917:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c91a:	89 02                	mov    DWORD PTR [edx],eax
c001c91c:	c1 f8 1f             	sar    eax,0x1f
c001c91f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c922:	e9 bd fe ff ff       	jmp    c001c7e4 <sysCallOpen(regs*)+0xbd>
c001c927:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c92a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c930:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c937:	e9 ab fe ff ff       	jmp    c001c7e7 <sysCallOpen(regs*)+0xc0>

c001c93c <Sys::loadSyscalls()>:
c001c93c:	c7 05 40 1a 03 c0 21 ba 01 c0 	mov    DWORD PTR ds:0xc0031a40,0xc001ba21
c001c946:	c7 05 44 1a 03 c0 88 b5 01 c0 	mov    DWORD PTR ds:0xc0031a44,0xc001b588
c001c950:	c7 05 48 1a 03 c0 74 b7 01 c0 	mov    DWORD PTR ds:0xc0031a48,0xc001b774
c001c95a:	c7 05 4c 1a 03 c0 57 b9 01 c0 	mov    DWORD PTR ds:0xc0031a4c,0xc001b957
c001c964:	c7 05 50 1a 03 c0 0c b7 01 c0 	mov    DWORD PTR ds:0xc0031a50,0xc001b70c
c001c96e:	c7 05 54 1a 03 c0 bf b5 01 c0 	mov    DWORD PTR ds:0xc0031a54,0xc001b5bf
c001c978:	c7 05 58 1a 03 c0 a0 b5 01 c0 	mov    DWORD PTR ds:0xc0031a58,0xc001b5a0
c001c982:	c7 05 5c 1a 03 c0 c9 b7 01 c0 	mov    DWORD PTR ds:0xc0031a5c,0xc001b7c9
c001c98c:	c7 05 64 1a 03 c0 5c bf 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001bf5c
c001c996:	c7 05 60 1a 03 c0 27 c7 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001c727
c001c9a0:	c7 05 68 1a 03 c0 e4 bf 01 c0 	mov    DWORD PTR ds:0xc0031a68,0xc001bfe4
c001c9aa:	c7 05 6c 1a 03 c0 4b bc 01 c0 	mov    DWORD PTR ds:0xc0031a6c,0xc001bc4b
c001c9b4:	c7 05 70 1a 03 c0 67 ba 01 c0 	mov    DWORD PTR ds:0xc0031a70,0xc001ba67
c001c9be:	c7 05 74 1a 03 c0 6c ba 01 c0 	mov    DWORD PTR ds:0xc0031a74,0xc001ba6c
c001c9c8:	c7 05 78 1a 03 c0 bf c0 01 c0 	mov    DWORD PTR ds:0xc0031a78,0xc001c0bf
c001c9d2:	c7 05 7c 1a 03 c0 59 c0 01 c0 	mov    DWORD PTR ds:0xc0031a7c,0xc001c059
c001c9dc:	c7 05 80 1a 03 c0 33 bd 01 c0 	mov    DWORD PTR ds:0xc0031a80,0xc001bd33
c001c9e6:	c7 05 84 1a 03 c0 9c bd 01 c0 	mov    DWORD PTR ds:0xc0031a84,0xc001bd9c
c001c9f0:	c7 05 88 1a 03 c0 19 be 01 c0 	mov    DWORD PTR ds:0xc0031a88,0xc001be19
c001c9fa:	c7 05 8c 1a 03 c0 71 ba 01 c0 	mov    DWORD PTR ds:0xc0031a8c,0xc001ba71
c001ca04:	c7 05 90 1a 03 c0 2f c1 01 c0 	mov    DWORD PTR ds:0xc0031a90,0xc001c12f
c001ca0e:	c7 05 94 1a 03 c0 49 c1 01 c0 	mov    DWORD PTR ds:0xc0031a94,0xc001c149
c001ca18:	c7 05 98 1a 03 c0 49 c1 01 c0 	mov    DWORD PTR ds:0xc0031a98,0xc001c149
c001ca22:	c7 05 9c 1a 03 c0 8a c1 01 c0 	mov    DWORD PTR ds:0xc0031a9c,0xc001c18a
c001ca2c:	c7 05 a0 1a 03 c0 ee c1 01 c0 	mov    DWORD PTR ds:0xc0031aa0,0xc001c1ee
c001ca36:	c7 05 a4 1a 03 c0 1d bc 01 c0 	mov    DWORD PTR ds:0xc0031aa4,0xc001bc1d
c001ca40:	c7 05 a8 1a 03 c0 52 c2 01 c0 	mov    DWORD PTR ds:0xc0031aa8,0xc001c252
c001ca4a:	c7 05 ac 1a 03 c0 da bb 01 c0 	mov    DWORD PTR ds:0xc0031aac,0xc001bbda
c001ca54:	c7 05 b0 1a 03 c0 9e c2 01 c0 	mov    DWORD PTR ds:0xc0031ab0,0xc001c29e
c001ca5e:	c7 05 b4 1a 03 c0 d9 bc 01 c0 	mov    DWORD PTR ds:0xc0031ab4,0xc001bcd9
c001ca68:	c7 05 b8 1a 03 c0 21 c3 01 c0 	mov    DWORD PTR ds:0xc0031ab8,0xc001c321
c001ca72:	c7 05 bc 1a 03 c0 9c be 01 c0 	mov    DWORD PTR ds:0xc0031abc,0xc001be9c
c001ca7c:	c7 05 c0 1a 03 c0 48 c3 01 c0 	mov    DWORD PTR ds:0xc0031ac0,0xc001c348
c001ca86:	c7 05 c4 1a 03 c0 bd c3 01 c0 	mov    DWORD PTR ds:0xc0031ac4,0xc001c3bd
c001ca90:	c7 05 c8 1a 03 c0 f5 c4 01 c0 	mov    DWORD PTR ds:0xc0031ac8,0xc001c4f5
c001ca9a:	c7 05 cc 1a 03 c0 7b ba 01 c0 	mov    DWORD PTR ds:0xc0031acc,0xc001ba7b
c001caa4:	c7 05 d0 1a 03 c0 e5 ba 01 c0 	mov    DWORD PTR ds:0xc0031ad0,0xc001bae5
c001caae:	c7 05 d4 1a 03 c0 2b bb 01 c0 	mov    DWORD PTR ds:0xc0031ad4,0xc001bb2b
c001cab8:	c7 05 d8 1a 03 c0 14 c6 01 c0 	mov    DWORD PTR ds:0xc0031ad8,0xc001c614
c001cac2:	c7 05 dc 1a 03 c0 64 c1 01 c0 	mov    DWORD PTR ds:0xc0031adc,0xc001c164
c001cacc:	c7 05 e0 1a 03 c0 7c bb 01 c0 	mov    DWORD PTR ds:0xc0031ae0,0xc001bb7c
c001cad6:	c7 05 e4 1a 03 c0 86 c6 01 c0 	mov    DWORD PTR ds:0xc0031ae4,0xc001c686
c001cae0:	c7 05 e8 1a 03 c0 cb c6 01 c0 	mov    DWORD PTR ds:0xc0031ae8,0xc001c6cb
c001caea:	c7 05 ec 1a 03 c0 64 b6 01 c0 	mov    DWORD PTR ds:0xc0031aec,0xc001b664
c001caf4:	c7 05 f0 1a 03 c0 e5 b7 01 c0 	mov    DWORD PTR ds:0xc0031af0,0xc001b7e5
c001cafe:	c7 05 f4 1a 03 c0 0d b9 01 c0 	mov    DWORD PTR ds:0xc0031af4,0xc001b90d
c001cb08:	c7 05 f8 1a 03 c0 52 b5 01 c0 	mov    DWORD PTR ds:0xc0031af8,0xc001b552
c001cb12:	c7 05 fc 1a 03 c0 bf b9 01 c0 	mov    DWORD PTR ds:0xc0031afc,0xc001b9bf
c001cb1c:	c7 05 00 1b 03 c0 cb b5 01 c0 	mov    DWORD PTR ds:0xc0031b00,0xc001b5cb
c001cb26:	c7 05 04 1b 03 c0 e2 b5 01 c0 	mov    DWORD PTR ds:0xc0031b04,0xc001b5e2
c001cb30:	c3                   	ret    

c001cb31 <Sys::systemCall(regs*, void*)>:
c001cb31:	53                   	push   ebx
c001cb32:	83 ec 08             	sub    esp,0x8
c001cb35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cb3c:	83 f8 7f             	cmp    eax,0x7f
c001cb3f:	77 16                	ja     c001cb57 <Sys::systemCall(regs*, void*)+0x26>
c001cb41:	8b 14 85 40 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce5c0]
c001cb48:	85 d2                	test   edx,edx
c001cb4a:	74 0b                	je     c001cb57 <Sys::systemCall(regs*, void*)+0x26>
c001cb4c:	83 ec 0c             	sub    esp,0xc
c001cb4f:	53                   	push   ebx
c001cb50:	ff d2                	call   edx
c001cb52:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cb55:	eb 0d                	jmp    c001cb64 <Sys::systemCall(regs*, void*)+0x33>
c001cb57:	52                   	push   edx
c001cb58:	52                   	push   edx
c001cb59:	50                   	push   eax
c001cb5a:	68 57 c9 02 c0       	push   0xc002c957
c001cb5f:	e8 13 63 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001cb64:	83 c4 10             	add    esp,0x10
c001cb67:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cb6c:	31 d2                	xor    edx,edx
c001cb6e:	83 c4 08             	add    esp,0x8
c001cb71:	5b                   	pop    ebx
c001cb72:	c3                   	ret    

c001cb73 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cb73:	55                   	push   ebp
c001cb74:	57                   	push   edi
c001cb75:	56                   	push   esi
c001cb76:	53                   	push   ebx
c001cb77:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cb7d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cb84:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cb8b:	85 c0                	test   eax,eax
c001cb8d:	0f 95 c1             	setne  cl
c001cb90:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cb98:	0f 94 c2             	sete   dl
c001cb9b:	84 d1                	test   cl,dl
c001cb9d:	74 23                	je     c001cbc2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb9f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cba5:	74 1b                	je     c001cbc2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cba7:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cbad:	89 da                	mov    edx,ebx
c001cbaf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cbb5:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cbbb:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cbc2:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001cbc9:	05 ff 0f 00 00       	add    eax,0xfff
c001cbce:	83 ec 0c             	sub    esp,0xc
c001cbd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cbd5:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001cbdb:	c1 e8 0c             	shr    eax,0xc
c001cbde:	89 ef                	mov    edi,ebp
c001cbe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbe4:	c1 ef 0c             	shr    edi,0xc
c001cbe7:	6a 01                	push   0x1
c001cbe9:	e8 83 4e ff ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c001cbee:	89 c6                	mov    esi,eax
c001cbf0:	58                   	pop    eax
c001cbf1:	5a                   	pop    edx
c001cbf2:	57                   	push   edi
c001cbf3:	68 db c9 02 c0       	push   0xc002c9db
c001cbf8:	e8 7a 62 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001cbfd:	59                   	pop    ecx
c001cbfe:	58                   	pop    eax
c001cbff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cc03:	68 ed c9 02 c0       	push   0xc002c9ed
c001cc08:	e8 6a 62 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001cc0d:	83 c4 10             	add    esp,0x10
c001cc10:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cc16:	0f 86 31 01 00 00    	jbe    c001cd4d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cc1c:	c1 e7 0c             	shl    edi,0xc
c001cc1f:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001cc22:	89 df                	mov    edi,ebx
c001cc24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc28:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cc2f:	01 dd                	add    ebp,ebx
c001cc31:	29 fd                	sub    ebp,edi
c001cc33:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001cc37:	0f 84 0e 01 00 00    	je     c001cd4b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d8>
c001cc3d:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cc43:	76 05                	jbe    c001cc4a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001cc45:	bd 00 10 00 00       	mov    ebp,0x1000
c001cc4a:	83 ec 0c             	sub    esp,0xc
c001cc4d:	31 d2                	xor    edx,edx
c001cc4f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cc56:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc58:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cc5c:	50                   	push   eax
c001cc5d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cc61:	50                   	push   eax
c001cc62:	52                   	push   edx
c001cc63:	55                   	push   ebp
c001cc64:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cc6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc6e:	83 c4 20             	add    esp,0x20
c001cc71:	85 c0                	test   eax,eax
c001cc73:	74 0a                	je     c001cc7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001cc75:	53                   	push   ebx
c001cc76:	53                   	push   ebx
c001cc77:	50                   	push   eax
c001cc78:	68 ff c9 02 c0       	push   0xc002c9ff
c001cc7d:	eb 0f                	jmp    c001cc8e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001cc7f:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001cc83:	74 20                	je     c001cca5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001cc85:	51                   	push   ecx
c001cc86:	51                   	push   ecx
c001cc87:	6a 00                	push   0x0
c001cc89:	68 2a ca 02 c0       	push   0xc002ca2a
c001cc8e:	e8 e4 61 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001cc93:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc96:	e8 96 52 ff ff       	call   c0011f31 <Virt::freeKernelVirtualPages(unsigned long)>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	31 c0                	xor    eax,eax
c001cca0:	e9 6d 01 00 00       	jmp    c001ce12 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cca5:	fa                   	cli    
c001cca6:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001ccac:	e8 7b 32 ff ff       	call   c000ff2c <Phys::allocatePage()>
c001ccb1:	6a 07                	push   0x7
c001ccb3:	89 c5                	mov    ebp,eax
c001ccb5:	56                   	push   esi
c001ccb6:	50                   	push   eax
c001ccb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccbc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ccbf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccc5:	e8 de 55 ff ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ccca:	83 c4 0c             	add    esp,0xc
c001cccd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ccd4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccda:	6a 00                	push   0x0
c001ccdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cce1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cce4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccea:	e8 13 54 ff ff       	call   c0012102 <VAS::mapOtherVASIn(bool, VAS*)>
c001ccef:	58                   	pop    eax
c001ccf0:	5a                   	pop    edx
c001ccf1:	68 07 0c 00 00       	push   0xc07
c001ccf6:	57                   	push   edi
c001ccf7:	55                   	push   ebp
c001ccf8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ccff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd05:	6a 00                	push   0x0
c001cd07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd0f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd15:	e8 4a 59 ff ff       	call   c0012664 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd1a:	83 c4 1c             	add    esp,0x1c
c001cd1d:	68 00 10 00 00       	push   0x1000
c001cd22:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cd26:	50                   	push   eax
c001cd27:	56                   	push   esi
c001cd28:	e8 83 40 fe ff       	call   c0000db0 <realmemcpy>
c001cd2d:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001cd32:	83 c4 10             	add    esp,0x10
c001cd35:	48                   	dec    eax
c001cd36:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001cd3b:	85 c0                	test   eax,eax
c001cd3d:	75 01                	jne    c001cd40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001cd3f:	fb                   	sti    
c001cd40:	81 c7 00 10 00 00    	add    edi,0x1000
c001cd46:	e9 dd fe ff ff       	jmp    c001cc28 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001cd4b:	89 fb                	mov    ebx,edi
c001cd4d:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cd55:	0f 86 a9 00 00 00    	jbe    c001ce04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cd5b:	fa                   	cli    
c001cd5c:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001cd62:	51                   	push   ecx
c001cd63:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cd6a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd70:	6a 00                	push   0x0
c001cd72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd7a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd80:	e8 7d 53 ff ff       	call   c0012102 <VAS::mapOtherVASIn(bool, VAS*)>
c001cd85:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cd89:	c1 e7 0c             	shl    edi,0xc
c001cd8c:	01 df                	add    edi,ebx
c001cd8e:	83 c4 10             	add    esp,0x10
c001cd91:	39 df                	cmp    edi,ebx
c001cd93:	74 61                	je     c001cdf6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cd95:	e8 92 31 ff ff       	call   c000ff2c <Phys::allocatePage()>
c001cd9a:	6a 07                	push   0x7
c001cd9c:	89 c5                	mov    ebp,eax
c001cd9e:	56                   	push   esi
c001cd9f:	50                   	push   eax
c001cda0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cda5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cda8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdae:	e8 f5 54 ff ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cdb3:	58                   	pop    eax
c001cdb4:	5a                   	pop    edx
c001cdb5:	68 07 0c 00 00       	push   0xc07
c001cdba:	53                   	push   ebx
c001cdbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cdc1:	55                   	push   ebp
c001cdc2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cdc9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cdcf:	6a 00                	push   0x0
c001cdd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cdd9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cddf:	e8 80 58 ff ff       	call   c0012664 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cde4:	83 c4 1c             	add    esp,0x1c
c001cde7:	68 00 10 00 00       	push   0x1000
c001cdec:	6a 00                	push   0x0
c001cdee:	56                   	push   esi
c001cdef:	e8 78 39 fe ff       	call   c000076c <memset>
c001cdf4:	eb 98                	jmp    c001cd8e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cdf6:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001cdfb:	48                   	dec    eax
c001cdfc:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001ce01:	75 01                	jne    c001ce04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ce03:	fb                   	sti    
c001ce04:	83 ec 0c             	sub    esp,0xc
c001ce07:	56                   	push   esi
c001ce08:	e8 24 51 ff ff       	call   c0011f31 <Virt::freeKernelVirtualPages(unsigned long)>
c001ce0d:	83 c4 10             	add    esp,0x10
c001ce10:	b0 01                	mov    al,0x1
c001ce12:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ce18:	5b                   	pop    ebx
c001ce19:	5e                   	pop    esi
c001ce1a:	5f                   	pop    edi
c001ce1b:	5d                   	pop    ebp
c001ce1c:	c3                   	ret    

c001ce1d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ce1d:	55                   	push   ebp
c001ce1e:	57                   	push   edi
c001ce1f:	56                   	push   esi
c001ce20:	53                   	push   ebx
c001ce21:	83 ec 48             	sub    esp,0x48
c001ce24:	68 14 01 00 00       	push   0x114
c001ce29:	e8 92 2a ff ff       	call   c000f8c0 <malloc>
c001ce2e:	83 c4 0c             	add    esp,0xc
c001ce31:	89 c6                	mov    esi,eax
c001ce33:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ce37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ce3b:	50                   	push   eax
c001ce3c:	e8 95 65 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001ce41:	58                   	pop    eax
c001ce42:	5a                   	pop    edx
c001ce43:	6a 01                	push   0x1
c001ce45:	56                   	push   esi
c001ce46:	e8 ef 65 ff ff       	call   c001343a <File::open(FileOpenMode)>
c001ce4b:	83 c4 10             	add    esp,0x10
c001ce4e:	85 c0                	test   eax,eax
c001ce50:	0f 85 47 01 00 00    	jne    c001cf9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce56:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ce5e:	83 ec 0c             	sub    esp,0xc
c001ce61:	6a 34                	push   0x34
c001ce63:	e8 58 2a ff ff       	call   c000f8c0 <malloc>
c001ce68:	89 c3                	mov    ebx,eax
c001ce6a:	58                   	pop    eax
c001ce6b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce6d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ce71:	57                   	push   edi
c001ce72:	53                   	push   ebx
c001ce73:	6a 00                	push   0x0
c001ce75:	6a 34                	push   0x34
c001ce77:	56                   	push   esi
c001ce78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce7b:	83 c4 20             	add    esp,0x20
c001ce7e:	85 c0                	test   eax,eax
c001ce80:	0f 85 17 01 00 00    	jne    c001cf9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce86:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ce8c:	0f 85 0b 01 00 00    	jne    c001cf9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce92:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ce95:	85 c0                	test   eax,eax
c001ce97:	0f 84 00 01 00 00    	je     c001cf9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce9d:	31 d2                	xor    edx,edx
c001ce9f:	55                   	push   ebp
c001cea0:	52                   	push   edx
c001cea1:	50                   	push   eax
c001cea2:	56                   	push   esi
c001cea3:	e8 50 66 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001cea8:	83 c4 10             	add    esp,0x10
c001ceab:	85 c0                	test   eax,eax
c001cead:	0f 85 ea 00 00 00    	jne    c001cf9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ceb3:	83 ec 0c             	sub    esp,0xc
c001ceb6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ceb9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cebd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cec1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cec5:	0f af c2             	imul   eax,edx
c001cec8:	50                   	push   eax
c001cec9:	e8 f2 29 ff ff       	call   c000f8c0 <malloc>
c001cece:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ced0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ced4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ced7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cedb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cedf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cee3:	0f af c2             	imul   eax,edx
c001cee6:	99                   	cdq    
c001cee7:	52                   	push   edx
c001cee8:	50                   	push   eax
c001cee9:	56                   	push   esi
c001ceea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceed:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cef0:	83 c4 20             	add    esp,0x20
c001cef3:	85 c0                	test   eax,eax
c001cef5:	0f 84 a2 00 00 00    	je     c001cf9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cefb:	31 d2                	xor    edx,edx
c001cefd:	51                   	push   ecx
c001cefe:	52                   	push   edx
c001ceff:	50                   	push   eax
c001cf00:	56                   	push   esi
c001cf01:	e8 f2 65 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001cf06:	83 c4 10             	add    esp,0x10
c001cf09:	85 c0                	test   eax,eax
c001cf0b:	0f 85 8c 00 00 00    	jne    c001cf9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cf11:	83 ec 0c             	sub    esp,0xc
c001cf14:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cf18:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cf1c:	31 ed                	xor    ebp,ebp
c001cf1e:	0f af c2             	imul   eax,edx
c001cf21:	50                   	push   eax
c001cf22:	e8 99 29 ff ff       	call   c000f8c0 <malloc>
c001cf27:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cf29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf2d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf34:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cf38:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cf3c:	0f af c2             	imul   eax,edx
c001cf3f:	99                   	cdq    
c001cf40:	52                   	push   edx
c001cf41:	50                   	push   eax
c001cf42:	56                   	push   esi
c001cf43:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf46:	83 c4 20             	add    esp,0x20
c001cf49:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cf51:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cf55:	0f 86 80 00 00 00    	jbe    c001cfdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cf5b:	0f b7 fd             	movzx  edi,bp
c001cf5e:	c1 e7 05             	shl    edi,0x5
c001cf61:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cf65:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cf68:	75 6b                	jne    c001cfd5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf6a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cf6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf71:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf78:	52                   	push   edx
c001cf79:	31 d2                	xor    edx,edx
c001cf7b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cf7e:	52                   	push   edx
c001cf7f:	50                   	push   eax
c001cf80:	56                   	push   esi
c001cf81:	e8 72 65 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001cf86:	83 c4 10             	add    esp,0x10
c001cf89:	85 c0                	test   eax,eax
c001cf8b:	74 17                	je     c001cfa4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cf8d:	83 ec 0c             	sub    esp,0xc
c001cf90:	68 56 ca 02 c0       	push   0xc002ca56
c001cf95:	e8 dd 5e ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001cf9a:	83 c4 10             	add    esp,0x10
c001cf9d:	31 c0                	xor    eax,eax
c001cf9f:	e9 87 00 00 00       	jmp    c001d02b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cfaa:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cfad:	50                   	push   eax
c001cfae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cfb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfb6:	56                   	push   esi
c001cfb7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cfbb:	e8 b3 fb ff ff       	call   c001cb73 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cfc0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cfc4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cfc8:	83 c4 20             	add    esp,0x20
c001cfcb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cfcf:	73 04                	jae    c001cfd5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cfd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cfd5:	45                   	inc    ebp
c001cfd6:	e9 76 ff ff ff       	jmp    c001cf51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cfdb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cfdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cfe3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfe7:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cfed:	83 ec 0c             	sub    esp,0xc
c001cff0:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cff6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cffb:	05 00 10 00 00       	add    eax,0x1000
c001d000:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d007:	e8 c4 28 ff ff       	call   c000f8d0 <free>
c001d00c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d00f:	e8 bc 28 ff ff       	call   c000f8d0 <free>
c001d014:	58                   	pop    eax
c001d015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d019:	e8 b2 28 ff ff       	call   c000f8d0 <free>
c001d01e:	89 34 24             	mov    DWORD PTR [esp],esi
c001d021:	e8 72 64 ff ff       	call   c0013498 <File::close()>
c001d026:	83 c4 10             	add    esp,0x10
c001d029:	b0 01                	mov    al,0x1
c001d02b:	83 c4 3c             	add    esp,0x3c
c001d02e:	5b                   	pop    ebx
c001d02f:	5e                   	pop    esi
c001d030:	5f                   	pop    edi
c001d031:	5d                   	pop    ebp
c001d032:	c3                   	ret    

c001d033 <Thr::runtimeReferenceHelper()>:
c001d033:	83 ec 18             	sub    esp,0x18
c001d036:	68 5e ca 02 c0       	push   0xc002ca5e
c001d03b:	e8 37 5e ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001d040:	fa                   	cli    
c001d041:	83 c4 10             	add    esp,0x10
c001d044:	eb fe                	jmp    c001d044 <Thr::runtimeReferenceHelper()+0x11>

c001d046 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d046:	57                   	push   edi
c001d047:	56                   	push   esi
c001d048:	53                   	push   ebx
c001d049:	31 db                	xor    ebx,ebx
c001d04b:	39 1d e0 23 03 c0    	cmp    DWORD PTR ds:0xc00323e0,ebx
c001d051:	7e 3c                	jle    c001d08f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d053:	8b 34 9d 60 23 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdca0]
c001d05a:	31 ff                	xor    edi,edi
c001d05c:	39 3c 9d 60 22 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdda0],edi
c001d063:	7e 27                	jle    c001d08c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d065:	50                   	push   eax
c001d066:	50                   	push   eax
c001d067:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d06b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d06d:	03 04 9d e0 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdd20]
c001d074:	50                   	push   eax
c001d075:	e8 3a 38 fe ff       	call   c00008b4 <strcmp>
c001d07a:	83 c4 10             	add    esp,0x10
c001d07d:	85 c0                	test   eax,eax
c001d07f:	75 05                	jne    c001d086 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d081:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d084:	eb 0b                	jmp    c001d091 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d086:	83 c6 10             	add    esi,0x10
c001d089:	47                   	inc    edi
c001d08a:	eb d0                	jmp    c001d05c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d08c:	43                   	inc    ebx
c001d08d:	eb bc                	jmp    c001d04b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d08f:	31 c0                	xor    eax,eax
c001d091:	5b                   	pop    ebx
c001d092:	5e                   	pop    esi
c001d093:	5f                   	pop    edi
c001d094:	c3                   	ret    

c001d095 <Thr::loadKernelSymbolTable(char const*)>:
c001d095:	55                   	push   ebp
c001d096:	57                   	push   edi
c001d097:	56                   	push   esi
c001d098:	53                   	push   ebx
c001d099:	83 ec 68             	sub    esp,0x68
c001d09c:	8b 35 30 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032430
c001d0a2:	68 14 01 00 00       	push   0x114
c001d0a7:	e8 14 28 ff ff       	call   c000f8c0 <malloc>
c001d0ac:	83 c4 0c             	add    esp,0xc
c001d0af:	89 c3                	mov    ebx,eax
c001d0b1:	56                   	push   esi
c001d0b2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d0b6:	50                   	push   eax
c001d0b7:	e8 1a 63 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001d0bc:	5e                   	pop    esi
c001d0bd:	5f                   	pop    edi
c001d0be:	6a 01                	push   0x1
c001d0c0:	53                   	push   ebx
c001d0c1:	e8 74 63 ff ff       	call   c001343a <File::open(FileOpenMode)>
c001d0c6:	83 c4 10             	add    esp,0x10
c001d0c9:	85 c0                	test   eax,eax
c001d0cb:	74 0a                	je     c001d0d7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d0cd:	83 ec 0c             	sub    esp,0xc
c001d0d0:	68 80 ca 02 c0       	push   0xc002ca80
c001d0d5:	eb 34                	jmp    c001d10b <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d0d7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d0df:	83 ec 0c             	sub    esp,0xc
c001d0e2:	6a 34                	push   0x34
c001d0e4:	e8 d7 27 ff ff       	call   c000f8c0 <malloc>
c001d0e9:	59                   	pop    ecx
c001d0ea:	89 c7                	mov    edi,eax
c001d0ec:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d0f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0f2:	56                   	push   esi
c001d0f3:	57                   	push   edi
c001d0f4:	6a 00                	push   0x0
c001d0f6:	6a 34                	push   0x34
c001d0f8:	53                   	push   ebx
c001d0f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0fc:	83 c4 20             	add    esp,0x20
c001d0ff:	85 c0                	test   eax,eax
c001d101:	74 17                	je     c001d11a <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d103:	83 ec 0c             	sub    esp,0xc
c001d106:	68 97 ca 02 c0       	push   0xc002ca97
c001d10b:	e8 55 d7 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001d110:	83 c4 10             	add    esp,0x10
c001d113:	31 c0                	xor    eax,eax
c001d115:	e9 31 02 00 00       	jmp    c001d34b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d11a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d120:	75 e1                	jne    c001d103 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d122:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d125:	85 c0                	test   eax,eax
c001d127:	74 da                	je     c001d103 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d129:	52                   	push   edx
c001d12a:	31 d2                	xor    edx,edx
c001d12c:	52                   	push   edx
c001d12d:	50                   	push   eax
c001d12e:	53                   	push   ebx
c001d12f:	e8 c4 63 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	85 c0                	test   eax,eax
c001d139:	75 c8                	jne    c001d103 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d13b:	83 ec 0c             	sub    esp,0xc
c001d13e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d142:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d146:	31 ed                	xor    ebp,ebp
c001d148:	0f af c2             	imul   eax,edx
c001d14b:	50                   	push   eax
c001d14c:	e8 6f 27 ff ff       	call   c000f8c0 <malloc>
c001d151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d157:	89 34 24             	mov    DWORD PTR [esp],esi
c001d15a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d15e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d162:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d166:	0f af c2             	imul   eax,edx
c001d169:	99                   	cdq    
c001d16a:	52                   	push   edx
c001d16b:	50                   	push   eax
c001d16c:	53                   	push   ebx
c001d16d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d170:	83 c4 20             	add    esp,0x20
c001d173:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d17b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d183:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d18b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d193:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d197:	0f 86 aa 00 00 00    	jbe    c001d247 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d19d:	0f b7 f5             	movzx  esi,bp
c001d1a0:	6b f6 28             	imul   esi,esi,0x28
c001d1a3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1a7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d1ae:	50                   	push   eax
c001d1af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1b3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d1b7:	8b 16                	mov    edx,DWORD PTR [esi]
c001d1b9:	6b c0 28             	imul   eax,eax,0x28
c001d1bc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d1c0:	89 d0                	mov    eax,edx
c001d1c2:	31 d2                	xor    edx,edx
c001d1c4:	52                   	push   edx
c001d1c5:	50                   	push   eax
c001d1c6:	53                   	push   ebx
c001d1c7:	e8 2c 63 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d1cc:	83 c4 0c             	add    esp,0xc
c001d1cf:	6a 20                	push   0x20
c001d1d1:	6a 00                	push   0x0
c001d1d3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d1d7:	52                   	push   edx
c001d1d8:	e8 8f 35 fe ff       	call   c000076c <memset>
c001d1dd:	58                   	pop    eax
c001d1de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1e0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d1e4:	51                   	push   ecx
c001d1e5:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d1e9:	52                   	push   edx
c001d1ea:	6a 00                	push   0x0
c001d1ec:	6a 1f                	push   0x1f
c001d1ee:	53                   	push   ebx
c001d1ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1f2:	83 c4 18             	add    esp,0x18
c001d1f5:	68 ae ca 02 c0       	push   0xc002caae
c001d1fa:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d1fe:	52                   	push   edx
c001d1ff:	e8 b0 36 fe ff       	call   c00008b4 <strcmp>
c001d204:	83 c4 10             	add    esp,0x10
c001d207:	85 c0                	test   eax,eax
c001d209:	75 0f                	jne    c001d21a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d20b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d20e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d212:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d216:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d21a:	50                   	push   eax
c001d21b:	50                   	push   eax
c001d21c:	68 b6 ca 02 c0       	push   0xc002cab6
c001d221:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d225:	50                   	push   eax
c001d226:	e8 89 36 fe ff       	call   c00008b4 <strcmp>
c001d22b:	83 c4 10             	add    esp,0x10
c001d22e:	85 c0                	test   eax,eax
c001d230:	75 0f                	jne    c001d241 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d232:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d235:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d239:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d241:	45                   	inc    ebp
c001d242:	e9 4c ff ff ff       	jmp    c001d193 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d247:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d24c:	75 10                	jne    c001d25e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d24e:	83 ec 0c             	sub    esp,0xc
c001d251:	68 be ca 02 c0       	push   0xc002cabe
c001d256:	e8 0a d6 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001d25b:	83 c4 10             	add    esp,0x10
c001d25e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d263:	75 10                	jne    c001d275 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d265:	83 ec 0c             	sub    esp,0xc
c001d268:	68 be ca 02 c0       	push   0xc002cabe
c001d26d:	e8 f3 d5 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001d272:	83 c4 10             	add    esp,0x10
c001d275:	31 d2                	xor    edx,edx
c001d277:	50                   	push   eax
c001d278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d27c:	52                   	push   edx
c001d27d:	50                   	push   eax
c001d27e:	53                   	push   ebx
c001d27f:	e8 74 62 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d284:	5a                   	pop    edx
c001d285:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d289:	e8 32 26 ff ff       	call   c000f8c0 <malloc>
c001d28e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d292:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d296:	31 c9                	xor    ecx,ecx
c001d298:	5e                   	pop    esi
c001d299:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d29b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d29f:	55                   	push   ebp
c001d2a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2a4:	51                   	push   ecx
c001d2a5:	52                   	push   edx
c001d2a6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d2aa:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d2ae:	53                   	push   ebx
c001d2af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2b2:	83 c4 14             	add    esp,0x14
c001d2b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2b9:	e8 02 26 ff ff       	call   c000f8c0 <malloc>
c001d2be:	89 c6                	mov    esi,eax
c001d2c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d2c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2c5:	56                   	push   esi
c001d2c6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d2ce:	51                   	push   ecx
c001d2cf:	52                   	push   edx
c001d2d0:	53                   	push   ebx
c001d2d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2d8:	8b 15 e0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323e0
c001d2de:	83 c4 1c             	add    esp,0x1c
c001d2e1:	c1 e8 04             	shr    eax,0x4
c001d2e4:	89 04 95 60 22 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdda0],eax
c001d2eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2ef:	31 d2                	xor    edx,edx
c001d2f1:	52                   	push   edx
c001d2f2:	50                   	push   eax
c001d2f3:	53                   	push   ebx
c001d2f4:	e8 ff 61 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d2f9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d2fb:	31 d2                	xor    edx,edx
c001d2fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d300:	56                   	push   esi
c001d301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d305:	52                   	push   edx
c001d306:	50                   	push   eax
c001d307:	53                   	push   ebx
c001d308:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d30b:	83 c4 14             	add    esp,0x14
c001d30e:	53                   	push   ebx
c001d30f:	e8 84 61 ff ff       	call   c0013498 <File::close()>
c001d314:	5d                   	pop    ebp
c001d315:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d319:	e8 b2 25 ff ff       	call   c000f8d0 <free>
c001d31e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d321:	e8 aa 25 ff ff       	call   c000f8d0 <free>
c001d326:	a1 e0 23 03 c0       	mov    eax,ds:0xc00323e0
c001d32b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d32f:	8d 50 01             	lea    edx,[eax+0x1]
c001d332:	89 0c 85 60 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdca0],ecx
c001d339:	89 34 85 e0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd20],esi
c001d340:	89 15 e0 23 03 c0    	mov    DWORD PTR ds:0xc00323e0,edx
c001d346:	83 c4 10             	add    esp,0x10
c001d349:	b0 01                	mov    al,0x1
c001d34b:	83 c4 5c             	add    esp,0x5c
c001d34e:	5b                   	pop    ebx
c001d34f:	5e                   	pop    esi
c001d350:	5f                   	pop    edi
c001d351:	5d                   	pop    ebp
c001d352:	c3                   	ret    

c001d353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d353:	55                   	push   ebp
c001d354:	57                   	push   edi
c001d355:	56                   	push   esi
c001d356:	53                   	push   ebx
c001d357:	81 ec 68 03 00 00    	sub    esp,0x368
c001d35d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d364:	8b 1d 30 24 03 c0    	mov    ebx,DWORD PTR ds:0xc0032430
c001d36a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d36e:	68 14 01 00 00       	push   0x114
c001d373:	e8 48 25 ff ff       	call   c000f8c0 <malloc>
c001d378:	83 c4 0c             	add    esp,0xc
c001d37b:	89 c5                	mov    ebp,eax
c001d37d:	53                   	push   ebx
c001d37e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d385:	50                   	push   eax
c001d386:	e8 4b 60 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001d38b:	5e                   	pop    esi
c001d38c:	5f                   	pop    edi
c001d38d:	6a 01                	push   0x1
c001d38f:	55                   	push   ebp
c001d390:	e8 a5 60 ff ff       	call   c001343a <File::open(FileOpenMode)>
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	85 c0                	test   eax,eax
c001d39a:	0f 85 a7 06 00 00    	jne    c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3a0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d3a8:	83 ec 0c             	sub    esp,0xc
c001d3ab:	6a 34                	push   0x34
c001d3ad:	e8 0e 25 ff ff       	call   c000f8c0 <malloc>
c001d3b2:	5b                   	pop    ebx
c001d3b3:	89 c7                	mov    edi,eax
c001d3b5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d3bc:	53                   	push   ebx
c001d3bd:	57                   	push   edi
c001d3be:	6a 00                	push   0x0
c001d3c0:	6a 34                	push   0x34
c001d3c2:	55                   	push   ebp
c001d3c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d3c6:	83 c4 20             	add    esp,0x20
c001d3c9:	85 c0                	test   eax,eax
c001d3cb:	0f 85 76 06 00 00    	jne    c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3d1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d3d7:	0f 85 6a 06 00 00    	jne    c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3dd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d3e0:	85 c0                	test   eax,eax
c001d3e2:	0f 84 5f 06 00 00    	je     c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3e8:	31 d2                	xor    edx,edx
c001d3ea:	51                   	push   ecx
c001d3eb:	52                   	push   edx
c001d3ec:	50                   	push   eax
c001d3ed:	55                   	push   ebp
c001d3ee:	e8 05 61 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d3f3:	83 c4 10             	add    esp,0x10
c001d3f6:	85 c0                	test   eax,eax
c001d3f8:	0f 85 49 06 00 00    	jne    c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3fe:	83 ec 0c             	sub    esp,0xc
c001d401:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d404:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d408:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d40c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d410:	0f af c2             	imul   eax,edx
c001d413:	50                   	push   eax
c001d414:	e8 a7 24 ff ff       	call   c000f8c0 <malloc>
c001d419:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d41c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d420:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d423:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d427:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d42b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d42f:	0f af c2             	imul   eax,edx
c001d432:	99                   	cdq    
c001d433:	52                   	push   edx
c001d434:	50                   	push   eax
c001d435:	55                   	push   ebp
c001d436:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d439:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d43c:	83 c4 20             	add    esp,0x20
c001d43f:	85 c0                	test   eax,eax
c001d441:	0f 84 00 06 00 00    	je     c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d447:	52                   	push   edx
c001d448:	31 d2                	xor    edx,edx
c001d44a:	52                   	push   edx
c001d44b:	50                   	push   eax
c001d44c:	55                   	push   ebp
c001d44d:	e8 a6 60 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d452:	83 c4 10             	add    esp,0x10
c001d455:	85 c0                	test   eax,eax
c001d457:	0f 85 ea 05 00 00    	jne    c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d45d:	83 ec 0c             	sub    esp,0xc
c001d460:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d464:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d468:	31 f6                	xor    esi,esi
c001d46a:	0f af c2             	imul   eax,edx
c001d46d:	50                   	push   eax
c001d46e:	e8 4d 24 ff ff       	call   c000f8c0 <malloc>
c001d473:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d476:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d47a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d47d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d481:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d485:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d489:	0f af c2             	imul   eax,edx
c001d48c:	99                   	cdq    
c001d48d:	52                   	push   edx
c001d48e:	50                   	push   eax
c001d48f:	55                   	push   ebp
c001d490:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d493:	83 c4 20             	add    esp,0x20
c001d496:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d49a:	0f 86 8a 00 00 00    	jbe    c001d52a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d4a0:	0f b7 de             	movzx  ebx,si
c001d4a3:	c1 e3 05             	shl    ebx,0x5
c001d4a6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d4aa:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d4ad:	75 75                	jne    c001d524 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d4af:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4b2:	31 d2                	xor    edx,edx
c001d4b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4b8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d4bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4bf:	50                   	push   eax
c001d4c0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d4c3:	52                   	push   edx
c001d4c4:	50                   	push   eax
c001d4c5:	55                   	push   ebp
c001d4c6:	e8 2d 60 ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d4cb:	83 c4 10             	add    esp,0x10
c001d4ce:	85 c0                	test   eax,eax
c001d4d0:	0f 85 71 05 00 00    	jne    c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d4d6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d4dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d4e0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d4e4:	31 d2                	xor    edx,edx
c001d4e6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d4ea:	83 ec 0c             	sub    esp,0xc
c001d4ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4f8:	50                   	push   eax
c001d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d501:	52                   	push   edx
c001d502:	50                   	push   eax
c001d503:	55                   	push   ebp
c001d504:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d507:	83 c4 1c             	add    esp,0x1c
c001d50a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d50d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d510:	50                   	push   eax
c001d511:	6a 00                	push   0x0
c001d513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d517:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d51b:	50                   	push   eax
c001d51c:	e8 4b 32 fe ff       	call   c000076c <memset>
c001d521:	83 c4 10             	add    esp,0x10
c001d524:	46                   	inc    esi
c001d525:	e9 6c ff ff ff       	jmp    c001d496 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d52a:	53                   	push   ebx
c001d52b:	31 db                	xor    ebx,ebx
c001d52d:	68 00 01 00 00       	push   0x100
c001d532:	6a 00                	push   0x0
c001d534:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d538:	50                   	push   eax
c001d539:	e8 2e 32 fe ff       	call   c000076c <memset>
c001d53e:	83 c4 0c             	add    esp,0xc
c001d541:	68 00 01 00 00       	push   0x100
c001d546:	6a 00                	push   0x0
c001d548:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d54f:	50                   	push   eax
c001d550:	e8 17 32 fe ff       	call   c000076c <memset>
c001d555:	83 c4 10             	add    esp,0x10
c001d558:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d560:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d568:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d570:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d578:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d580:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d584:	0f 86 30 01 00 00    	jbe    c001d6ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d58a:	0f b7 f3             	movzx  esi,bx
c001d58d:	6b f6 28             	imul   esi,esi,0x28
c001d590:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d594:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d59b:	52                   	push   edx
c001d59c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5a0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d5a4:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5a6:	6b d2 28             	imul   edx,edx,0x28
c001d5a9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d5ad:	31 d2                	xor    edx,edx
c001d5af:	52                   	push   edx
c001d5b0:	50                   	push   eax
c001d5b1:	55                   	push   ebp
c001d5b2:	e8 41 5f ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d5b7:	83 c4 0c             	add    esp,0xc
c001d5ba:	6a 20                	push   0x20
c001d5bc:	6a 00                	push   0x0
c001d5be:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d5c5:	51                   	push   ecx
c001d5c6:	e8 a1 31 fe ff       	call   c000076c <memset>
c001d5cb:	59                   	pop    ecx
c001d5cc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5cf:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d5d3:	52                   	push   edx
c001d5d4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d5db:	51                   	push   ecx
c001d5dc:	6a 00                	push   0x0
c001d5de:	6a 1f                	push   0x1f
c001d5e0:	55                   	push   ebp
c001d5e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d5e4:	83 c4 1c             	add    esp,0x1c
c001d5e7:	6a 09                	push   0x9
c001d5e9:	68 d8 ca 02 c0       	push   0xc002cad8
c001d5ee:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d5f5:	51                   	push   ecx
c001d5f6:	e8 6d 30 fe ff       	call   c0000668 <memcmp>
c001d5fb:	83 c4 10             	add    esp,0x10
c001d5fe:	85 c0                	test   eax,eax
c001d600:	75 21                	jne    c001d623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d606:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d60a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d60e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d612:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d615:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d61c:	89 d0                	mov    eax,edx
c001d61e:	40                   	inc    eax
c001d61f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d623:	50                   	push   eax
c001d624:	6a 09                	push   0x9
c001d626:	68 e2 ca 02 c0       	push   0xc002cae2
c001d62b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d632:	50                   	push   eax
c001d633:	e8 30 30 fe ff       	call   c0000668 <memcmp>
c001d638:	83 c4 10             	add    esp,0x10
c001d63b:	85 c0                	test   eax,eax
c001d63d:	75 21                	jne    c001d660 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d63f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d643:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d647:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d64b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d64f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d652:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d659:	89 d0                	mov    eax,edx
c001d65b:	40                   	inc    eax
c001d65c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d660:	50                   	push   eax
c001d661:	50                   	push   eax
c001d662:	68 ae ca 02 c0       	push   0xc002caae
c001d667:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d66e:	50                   	push   eax
c001d66f:	e8 40 32 fe ff       	call   c00008b4 <strcmp>
c001d674:	83 c4 10             	add    esp,0x10
c001d677:	85 c0                	test   eax,eax
c001d679:	75 0f                	jne    c001d68a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d67b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d67e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d682:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d68a:	50                   	push   eax
c001d68b:	50                   	push   eax
c001d68c:	68 b6 ca 02 c0       	push   0xc002cab6
c001d691:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d698:	50                   	push   eax
c001d699:	e8 16 32 fe ff       	call   c00008b4 <strcmp>
c001d69e:	83 c4 10             	add    esp,0x10
c001d6a1:	85 c0                	test   eax,eax
c001d6a3:	75 0f                	jne    c001d6b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d6a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d6a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d6b4:	43                   	inc    ebx
c001d6b5:	e9 c6 fe ff ff       	jmp    c001d580 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d6ba:	31 d2                	xor    edx,edx
c001d6bc:	50                   	push   eax
c001d6bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6c1:	52                   	push   edx
c001d6c2:	50                   	push   eax
c001d6c3:	55                   	push   ebp
c001d6c4:	e8 2f 5e ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d6c9:	58                   	pop    eax
c001d6ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d6ce:	e8 ed 21 ff ff       	call   c000f8c0 <malloc>
c001d6d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d6da:	31 d2                	xor    edx,edx
c001d6dc:	58                   	pop    eax
c001d6dd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d6e1:	53                   	push   ebx
c001d6e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d6e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6ea:	52                   	push   edx
c001d6eb:	50                   	push   eax
c001d6ec:	55                   	push   ebp
c001d6ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6f0:	83 c4 14             	add    esp,0x14
c001d6f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6f7:	e8 c4 21 ff ff       	call   c000f8c0 <malloc>
c001d6fc:	31 d2                	xor    edx,edx
c001d6fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d702:	83 c4 0c             	add    esp,0xc
c001d705:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d709:	52                   	push   edx
c001d70a:	50                   	push   eax
c001d70b:	55                   	push   ebp
c001d70c:	e8 e7 5d ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d711:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d714:	31 d2                	xor    edx,edx
c001d716:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d719:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d71d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d721:	52                   	push   edx
c001d722:	50                   	push   eax
c001d723:	55                   	push   ebp
c001d724:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d727:	83 c4 20             	add    esp,0x20
c001d72a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d732:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d736:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d73a:	0f 84 0b 03 00 00    	je     c001da4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d740:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d747:	31 d2                	xor    edx,edx
c001d749:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d74d:	c1 e8 03             	shr    eax,0x3
c001d750:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d754:	51                   	push   ecx
c001d755:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d759:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d75d:	52                   	push   edx
c001d75e:	50                   	push   eax
c001d75f:	55                   	push   ebp
c001d760:	e8 93 5d ff ff       	call   c00134f8 <File::seek(unsigned long long)>
c001d765:	5b                   	pop    ebx
c001d766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d76a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d771:	e8 4a 21 ff ff       	call   c000f8c0 <malloc>
c001d776:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d779:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d77d:	31 d2                	xor    edx,edx
c001d77f:	5e                   	pop    esi
c001d780:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d784:	50                   	push   eax
c001d785:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d789:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d78d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d794:	52                   	push   edx
c001d795:	50                   	push   eax
c001d796:	55                   	push   ebp
c001d797:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d79a:	83 c4 20             	add    esp,0x20
c001d79d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d7a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d7a9:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d7ad:	0f 8d 7c 02 00 00    	jge    c001da2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d7b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d7b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7bb:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d7c0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d7c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d7c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7cb:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d7cf:	89 d8                	mov    eax,ebx
c001d7d1:	c1 e8 08             	shr    eax,0x8
c001d7d4:	89 c6                	mov    esi,eax
c001d7d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d7da:	c1 e6 04             	shl    esi,0x4
c001d7dd:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d7e1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d7e4:	85 d2                	test   edx,edx
c001d7e6:	0f 85 bf 00 00 00    	jne    c001d8ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7ec:	83 ec 0c             	sub    esp,0xc
c001d7ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7f3:	03 06                	add    eax,DWORD PTR [esi]
c001d7f5:	50                   	push   eax
c001d7f6:	e8 4b f8 ff ff       	call   c001d046 <Thr::getAddressOfKernelSymbol(char const*)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	89 c2                	mov    edx,eax
c001d800:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d805:	85 c0                	test   eax,eax
c001d807:	0f 85 9e 00 00 00    	jne    c001d8ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d80d:	83 ec 0c             	sub    esp,0xc
c001d810:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d814:	03 06                	add    eax,DWORD PTR [esi]
c001d816:	50                   	push   eax
c001d817:	e8 57 0d ff ff       	call   c000e573 <Krnl::resolveCompatibilitySymbol(char*)>
c001d81c:	83 c4 10             	add    esp,0x10
c001d81f:	89 c2                	mov    edx,eax
c001d821:	85 c0                	test   eax,eax
c001d823:	0f 85 82 00 00 00    	jne    c001d8ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d829:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d82d:	50                   	push   eax
c001d82e:	50                   	push   eax
c001d82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d833:	03 06                	add    eax,DWORD PTR [esi]
c001d835:	50                   	push   eax
c001d836:	68 ec ca 02 c0       	push   0xc002caec
c001d83b:	e8 37 56 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001d840:	58                   	pop    eax
c001d841:	5a                   	pop    edx
c001d842:	68 06 cb 02 c0       	push   0xc002cb06
c001d847:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d84e:	50                   	push   eax
c001d84f:	e8 d4 2f fe ff       	call   c0000828 <strcpy>
c001d854:	59                   	pop    ecx
c001d855:	58                   	pop    eax
c001d856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d85a:	03 06                	add    eax,DWORD PTR [esi]
c001d85c:	50                   	push   eax
c001d85d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d864:	50                   	push   eax
c001d865:	e8 fe 30 fe ff       	call   c0000968 <strcat>
c001d86a:	58                   	pop    eax
c001d86b:	5a                   	pop    edx
c001d86c:	68 9c cb 02 c0       	push   0xc002cb9c
c001d871:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d878:	50                   	push   eax
c001d879:	e8 ea 30 fe ff       	call   c0000968 <strcat>
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d886:	0f 84 5d 01 00 00    	je     c001d9e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d88c:	83 ec 0c             	sub    esp,0xc
c001d88f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d896:	50                   	push   eax
c001d897:	e8 c9 cf ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001d89c:	83 c4 10             	add    esp,0x10
c001d89f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d8a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d8a7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d8ab:	80 fb 01             	cmp    bl,0x1
c001d8ae:	0f 85 88 00 00 00    	jne    c001d93c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d8b4:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d8bb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d8bf:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d8c3:	01 ce                	add    esi,ecx
c001d8c5:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d8cb:	0f 94 c0             	sete   al
c001d8ce:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d8d4:	0f 94 c3             	sete   bl
c001d8d7:	09 c3                	or     ebx,eax
c001d8d9:	8b 06                	mov    eax,DWORD PTR [esi]
c001d8db:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d8e0:	74 41                	je     c001d923 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d8e2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d8e5:	84 db                	test   bl,bl
c001d8e7:	75 15                	jne    c001d8fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d8e9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8ed:	66 83 f8 0c          	cmp    ax,0xc
c001d8f1:	76 05                	jbe    c001d8f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d8f3:	b8 0c 00 00 00       	mov    eax,0xc
c001d8f8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8fc:	76 37                	jbe    c001d935 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8fe:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d902:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d907:	0f 84 dc 00 00 00    	je     c001d9e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d90d:	83 ec 0c             	sub    esp,0xc
c001d910:	68 1d cb 02 c0       	push   0xc002cb1d
c001d915:	e8 4b cf ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001d91a:	83 c4 10             	add    esp,0x10
c001d91d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d921:	eb 12                	jmp    c001d935 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d923:	01 c1                	add    ecx,eax
c001d925:	84 db                	test   bl,bl
c001d927:	75 0c                	jne    c001d935 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d929:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d92d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d931:	77 02                	ja     c001d935 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d933:	01 d1                	add    ecx,edx
c001d935:	89 0e                	mov    DWORD PTR [esi],ecx
c001d937:	e9 ea 00 00 00       	jmp    c001da26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d93c:	80 fb 02             	cmp    bl,0x2
c001d93f:	75 7c                	jne    c001d9bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d941:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d948:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d94c:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d950:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d956:	74 20                	je     c001d978 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d958:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d95e:	74 18                	je     c001d978 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d960:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d964:	b9 0a 00 00 00       	mov    ecx,0xa
c001d969:	66 83 f8 0e          	cmp    ax,0xe
c001d96d:	77 03                	ja     c001d972 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d96f:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d972:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d976:	76 1f                	jbe    c001d997 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d978:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d97c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d981:	74 66                	je     c001d9e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d983:	83 ec 0c             	sub    esp,0xc
c001d986:	68 39 cb 02 c0       	push   0xc002cb39
c001d98b:	e8 d5 ce ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001d990:	83 c4 10             	add    esp,0x10
c001d993:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d997:	8b 06                	mov    eax,DWORD PTR [esi]
c001d999:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d99e:	74 13                	je     c001d9b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d9a0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d9a4:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d9ab:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d9af:	01 c8                	add    eax,ecx
c001d9b1:	eb 04                	jmp    c001d9b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d9b3:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d9b7:	01 c2                	add    edx,eax
c001d9b9:	89 16                	mov    DWORD PTR [esi],edx
c001d9bb:	eb 69                	jmp    c001da26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d9bd:	0f b6 db             	movzx  ebx,bl
c001d9c0:	50                   	push   eax
c001d9c1:	50                   	push   eax
c001d9c2:	53                   	push   ebx
c001d9c3:	68 55 cb 02 c0       	push   0xc002cb55
c001d9c8:	e8 aa 54 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001d9cd:	83 c4 10             	add    esp,0x10
c001d9d0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d9d5:	74 12                	je     c001d9e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d9d7:	83 ec 0c             	sub    esp,0xc
c001d9da:	68 60 cb 02 c0       	push   0xc002cb60
c001d9df:	e8 81 ce ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001d9e4:	83 c4 10             	add    esp,0x10
c001d9e7:	eb 3d                	jmp    c001da26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d9e9:	83 ec 0c             	sub    esp,0xc
c001d9ec:	55                   	push   ebp
c001d9ed:	e8 a6 5a ff ff       	call   c0013498 <File::close()>
c001d9f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d9f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9fb:	59                   	pop    ecx
c001d9fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da00:	e8 cb 1e ff ff       	call   c000f8d0 <free>
c001da05:	5b                   	pop    ebx
c001da06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da0a:	e8 c1 1e ff ff       	call   c000f8d0 <free>
c001da0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da12:	e8 b9 1e ff ff       	call   c000f8d0 <free>
c001da17:	5e                   	pop    esi
c001da18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da1c:	e8 af 1e ff ff       	call   c000f8d0 <free>
c001da21:	83 c4 10             	add    esp,0x10
c001da24:	eb 21                	jmp    c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001da26:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001da2a:	e9 76 fd ff ff       	jmp    c001d7a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001da2f:	83 ec 0c             	sub    esp,0xc
c001da32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da36:	e8 95 1e ff ff       	call   c000f8d0 <free>
c001da3b:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001da3f:	83 c4 10             	add    esp,0x10
c001da42:	e9 eb fc ff ff       	jmp    c001d732 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001da47:	31 c0                	xor    eax,eax
c001da49:	eb 33                	jmp    c001da7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001da4b:	83 ec 0c             	sub    esp,0xc
c001da4e:	55                   	push   ebp
c001da4f:	e8 44 5a ff ff       	call   c0013498 <File::close()>
c001da54:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001da57:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da5d:	58                   	pop    eax
c001da5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da62:	e8 69 1e ff ff       	call   c000f8d0 <free>
c001da67:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da6a:	e8 61 1e ff ff       	call   c000f8d0 <free>
c001da6f:	5a                   	pop    edx
c001da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da74:	e8 57 1e ff ff       	call   c000f8d0 <free>
c001da79:	83 c4 10             	add    esp,0x10
c001da7c:	b0 01                	mov    al,0x1
c001da7e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001da84:	5b                   	pop    ebx
c001da85:	5e                   	pop    esi
c001da86:	5f                   	pop    edi
c001da87:	5d                   	pop    ebp
c001da88:	c3                   	ret    

c001da89 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001da89:	56                   	push   esi
c001da8a:	31 d2                	xor    edx,edx
c001da8c:	53                   	push   ebx
c001da8d:	8b 1d 40 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c40
c001da93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da97:	39 d3                	cmp    ebx,edx
c001da99:	7e 1b                	jle    c001dab6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001da9b:	8b 04 95 60 1e 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce1a0]
c001daa2:	39 c8                	cmp    eax,ecx
c001daa4:	77 0d                	ja     c001dab3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001daa6:	8b 34 95 60 1c 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce3a0]
c001daad:	01 c6                	add    esi,eax
c001daaf:	39 ce                	cmp    esi,ecx
c001dab1:	77 05                	ja     c001dab8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dab3:	42                   	inc    edx
c001dab4:	eb e1                	jmp    c001da97 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dab6:	31 c0                	xor    eax,eax
c001dab8:	5b                   	pop    ebx
c001dab9:	5e                   	pop    esi
c001daba:	c3                   	ret    

c001dabb <Thr::getDriverNameFromAddress(unsigned long)>:
c001dabb:	53                   	push   ebx
c001dabc:	31 c0                	xor    eax,eax
c001dabe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dac2:	8b 1d 40 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c40
c001dac8:	39 c3                	cmp    ebx,eax
c001daca:	7e 22                	jle    c001daee <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dacc:	8b 14 85 60 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce1a0]
c001dad3:	39 ca                	cmp    edx,ecx
c001dad5:	77 14                	ja     c001daeb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dad7:	03 14 85 60 1c 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce3a0]
c001dade:	39 ca                	cmp    edx,ecx
c001dae0:	76 09                	jbe    c001daeb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dae2:	8b 04 85 60 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdfa0]
c001dae9:	eb 05                	jmp    c001daf0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001daeb:	40                   	inc    eax
c001daec:	eb da                	jmp    c001dac8 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001daee:	31 c0                	xor    eax,eax
c001daf0:	5b                   	pop    ebx
c001daf1:	c3                   	ret    

c001daf2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001daf2:	53                   	push   ebx
c001daf3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001daf7:	53                   	push   ebx
c001daf8:	e8 8c ff ff ff       	call   c001da89 <Thr::getDriverBaseFromAddress(unsigned long)>
c001dafd:	5a                   	pop    edx
c001dafe:	31 d2                	xor    edx,edx
c001db00:	85 c0                	test   eax,eax
c001db02:	74 04                	je     c001db08 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001db04:	89 da                	mov    edx,ebx
c001db06:	29 c2                	sub    edx,eax
c001db08:	89 d0                	mov    eax,edx
c001db0a:	5b                   	pop    ebx
c001db0b:	c3                   	ret    

c001db0c <Thr::loadDLL(char const*, bool)>:
c001db0c:	55                   	push   ebp
c001db0d:	57                   	push   edi
c001db0e:	56                   	push   esi
c001db0f:	53                   	push   ebx
c001db10:	81 ec 34 01 00 00    	sub    esp,0x134
c001db16:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001db1d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001db24:	56                   	push   esi
c001db25:	68 78 cb 02 c0       	push   0xc002cb78
c001db2a:	e8 48 53 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001db2f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001db36:	e8 85 1d ff ff       	call   c000f8c0 <malloc>
c001db3b:	83 c4 0c             	add    esp,0xc
c001db3e:	89 c3                	mov    ebx,eax
c001db40:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c001db46:	56                   	push   esi
c001db47:	50                   	push   eax
c001db48:	e8 89 58 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001db4d:	83 c4 10             	add    esp,0x10
c001db50:	85 db                	test   ebx,ebx
c001db52:	75 3c                	jne    c001db90 <Thr::loadDLL(char const*, bool)+0x84>
c001db54:	89 f8                	mov    eax,edi
c001db56:	84 c0                	test   al,al
c001db58:	0f 84 cc 01 00 00    	je     c001dd2a <Thr::loadDLL(char const*, bool)+0x21e>
c001db5e:	55                   	push   ebp
c001db5f:	55                   	push   ebp
c001db60:	68 89 cb 02 c0       	push   0xc002cb89
c001db65:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001db69:	55                   	push   ebp
c001db6a:	e8 b9 2c fe ff       	call   c0000828 <strcpy>
c001db6f:	58                   	pop    eax
c001db70:	5a                   	pop    edx
c001db71:	56                   	push   esi
c001db72:	55                   	push   ebp
c001db73:	e8 f0 2d fe ff       	call   c0000968 <strcat>
c001db78:	59                   	pop    ecx
c001db79:	58                   	pop    eax
c001db7a:	68 9c cb 02 c0       	push   0xc002cb9c
c001db7f:	55                   	push   ebp
c001db80:	e8 e3 2d fe ff       	call   c0000968 <strcat>
c001db85:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db88:	e8 d8 cc ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001db8d:	83 c4 10             	add    esp,0x10
c001db90:	51                   	push   ecx
c001db91:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001db95:	50                   	push   eax
c001db96:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db9a:	50                   	push   eax
c001db9b:	53                   	push   ebx
c001db9c:	e8 45 5b ff ff       	call   c00136e6 <File::stat(unsigned long long*, bool*)>
c001dba1:	83 c4 10             	add    esp,0x10
c001dba4:	85 db                	test   ebx,ebx
c001dba6:	74 0c                	je     c001dbb4 <Thr::loadDLL(char const*, bool)+0xa8>
c001dba8:	83 ec 0c             	sub    esp,0xc
c001dbab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dbad:	53                   	push   ebx
c001dbae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dbb1:	83 c4 10             	add    esp,0x10
c001dbb4:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dbb9:	75 0a                	jne    c001dbc5 <Thr::loadDLL(char const*, bool)+0xb9>
c001dbbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbbf:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dbc3:	75 3c                	jne    c001dc01 <Thr::loadDLL(char const*, bool)+0xf5>
c001dbc5:	89 f8                	mov    eax,edi
c001dbc7:	84 c0                	test   al,al
c001dbc9:	0f 84 43 01 00 00    	je     c001dd12 <Thr::loadDLL(char const*, bool)+0x206>
c001dbcf:	51                   	push   ecx
c001dbd0:	51                   	push   ecx
c001dbd1:	68 89 cb 02 c0       	push   0xc002cb89
c001dbd6:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001dbda:	53                   	push   ebx
c001dbdb:	e8 48 2c fe ff       	call   c0000828 <strcpy>
c001dbe0:	5d                   	pop    ebp
c001dbe1:	58                   	pop    eax
c001dbe2:	56                   	push   esi
c001dbe3:	53                   	push   ebx
c001dbe4:	e8 7f 2d fe ff       	call   c0000968 <strcat>
c001dbe9:	58                   	pop    eax
c001dbea:	5a                   	pop    edx
c001dbeb:	68 9c cb 02 c0       	push   0xc002cb9c
c001dbf0:	53                   	push   ebx
c001dbf1:	e8 72 2d fe ff       	call   c0000968 <strcat>
c001dbf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbf9:	e8 67 cc ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001dbfe:	83 c4 10             	add    esp,0x10
c001dc01:	52                   	push   edx
c001dc02:	6a 03                	push   0x3
c001dc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc08:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dc0c:	05 ff 0f 00 00       	add    eax,0xfff
c001dc11:	83 d2 00             	adc    edx,0x0
c001dc14:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dc18:	50                   	push   eax
c001dc19:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c001dc1f:	e8 86 47 ff ff       	call   c00123aa <VAS::allocatePages(int, int)>
c001dc24:	59                   	pop    ecx
c001dc25:	89 c3                	mov    ebx,eax
c001dc27:	5d                   	pop    ebp
c001dc28:	50                   	push   eax
c001dc29:	68 9e cb 02 c0       	push   0xc002cb9e
c001dc2e:	e8 44 52 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001dc33:	89 34 24             	mov    DWORD PTR [esp],esi
c001dc36:	e8 4d 2b fe ff       	call   c0000788 <strlen>
c001dc3b:	8b 2d 40 1c 03 c0    	mov    ebp,DWORD PTR ds:0xc0031c40
c001dc41:	40                   	inc    eax
c001dc42:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc45:	e8 76 1c ff ff       	call   c000f8c0 <malloc>
c001dc4a:	89 04 ad 60 20 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdfa0],eax
c001dc51:	58                   	pop    eax
c001dc52:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c001dc57:	5a                   	pop    edx
c001dc58:	56                   	push   esi
c001dc59:	ff 34 85 60 20 03 c0 	push   DWORD PTR [eax*4-0x3ffcdfa0]
c001dc60:	e8 c3 2b fe ff       	call   c0000828 <strcpy>
c001dc65:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c001dc6a:	8d 50 01             	lea    edx,[eax+0x1]
c001dc6d:	89 1c 85 60 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1a0],ebx
c001dc74:	89 15 40 1c 03 c0    	mov    DWORD PTR ds:0xc0031c40,edx
c001dc7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc7e:	83 c4 0c             	add    esp,0xc
c001dc81:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c001dc88:	6a 01                	push   0x1
c001dc8a:	53                   	push   ebx
c001dc8b:	56                   	push   esi
c001dc8c:	e8 c2 f6 ff ff       	call   c001d353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dc91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dc9d:	0f 85 83 00 00 00    	jne    c001dd26 <Thr::loadDLL(char const*, bool)+0x21a>
c001dca3:	89 f8                	mov    eax,edi
c001dca5:	84 c0                	test   al,al
c001dca7:	74 6d                	je     c001dd16 <Thr::loadDLL(char const*, bool)+0x20a>
c001dca9:	83 ec 0c             	sub    esp,0xc
c001dcac:	68 ab cb 02 c0       	push   0xc002cbab
c001dcb1:	e8 af cb ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001dcb6:	83 c4 10             	add    esp,0x10
c001dcb9:	eb 5b                	jmp    c001dd16 <Thr::loadDLL(char const*, bool)+0x20a>
c001dcbb:	89 ee                	mov    esi,ebp
c001dcbd:	50                   	push   eax
c001dcbe:	c1 e6 0c             	shl    esi,0xc
c001dcc1:	50                   	push   eax
c001dcc2:	01 de                	add    esi,ebx
c001dcc4:	56                   	push   esi
c001dcc5:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c001dccb:	e8 42 42 ff ff       	call   c0011f12 <VAS::getPageTableEntry(unsigned long)>
c001dcd0:	83 c4 10             	add    esp,0x10
c001dcd3:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dcd6:	75 0c                	jne    c001dce4 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dcd8:	83 ec 0c             	sub    esp,0xc
c001dcdb:	56                   	push   esi
c001dcdc:	e8 c1 21 ff ff       	call   c000fea2 <Phys::freePage(unsigned long)>
c001dce1:	83 c4 10             	add    esp,0x10
c001dce4:	45                   	inc    ebp
c001dce5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dce9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dced:	05 ff 0f 00 00       	add    eax,0xfff
c001dcf2:	bf 00 00 00 00       	mov    edi,0x0
c001dcf7:	83 d2 00             	adc    edx,0x0
c001dcfa:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dcfe:	c1 ea 0c             	shr    edx,0xc
c001dd01:	39 c5                	cmp    ebp,eax
c001dd03:	89 d1                	mov    ecx,edx
c001dd05:	89 f8                	mov    eax,edi
c001dd07:	19 c8                	sbb    eax,ecx
c001dd09:	72 b0                	jb     c001dcbb <Thr::loadDLL(char const*, bool)+0x1af>
c001dd0b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dd10:	75 18                	jne    c001dd2a <Thr::loadDLL(char const*, bool)+0x21e>
c001dd12:	31 db                	xor    ebx,ebx
c001dd14:	eb 14                	jmp    c001dd2a <Thr::loadDLL(char const*, bool)+0x21e>
c001dd16:	83 ec 0c             	sub    esp,0xc
c001dd19:	68 ca cb 02 c0       	push   0xc002cbca
c001dd1e:	e8 42 cb ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001dd23:	83 c4 10             	add    esp,0x10
c001dd26:	31 ed                	xor    ebp,ebp
c001dd28:	eb bb                	jmp    c001dce5 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dd2a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dd30:	89 d8                	mov    eax,ebx
c001dd32:	5b                   	pop    ebx
c001dd33:	5e                   	pop    esi
c001dd34:	5f                   	pop    edi
c001dd35:	5d                   	pop    ebp
c001dd36:	c3                   	ret    

c001dd37 <Thr::executeDLL(unsigned long, void*)>:
c001dd37:	56                   	push   esi
c001dd38:	53                   	push   ebx
c001dd39:	52                   	push   edx
c001dd3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd3e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dd42:	85 db                	test   ebx,ebx
c001dd44:	75 10                	jne    c001dd56 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dd46:	83 ec 0c             	sub    esp,0xc
c001dd49:	68 e6 cb 02 c0       	push   0xc002cbe6
c001dd4e:	e8 12 cb ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001dd53:	83 c4 10             	add    esp,0x10
c001dd56:	50                   	push   eax
c001dd57:	50                   	push   eax
c001dd58:	53                   	push   ebx
c001dd59:	68 10 cc 02 c0       	push   0xc002cc10
c001dd5e:	e8 14 51 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001dd63:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd67:	89 d8                	mov    eax,ebx
c001dd69:	83 c4 14             	add    esp,0x14
c001dd6c:	5b                   	pop    ebx
c001dd6d:	5e                   	pop    esi
c001dd6e:	ff e0                	jmp    eax

c001dd70 <userModeEntryPoint(void*)>:
c001dd70:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001dd75:	48                   	dec    eax
c001dd76:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001dd7b:	75 01                	jne    c001dd7e <userModeEntryPoint(void*)+0xe>
c001dd7d:	fb                   	sti    
c001dd7e:	fb                   	sti    
c001dd7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd87:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd91:	e9 94 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd96 <changeTSS>:
c001dd96:	83 ec 14             	sub    esp,0x14
c001dd99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd9e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dda1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dda6:	c1 e2 15             	shl    edx,0x15
c001dda9:	29 d0                	sub    eax,edx
c001ddab:	50                   	push   eax
c001ddac:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001ddb1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddb7:	05 7c 11 00 00       	add    eax,0x117c
c001ddbc:	50                   	push   eax
c001ddbd:	e8 ee 35 ff ff       	call   c00113b0 <TSS::setESP(unsigned long)>
c001ddc2:	83 c4 1c             	add    esp,0x1c
c001ddc5:	c3                   	ret    

c001ddc6 <switchToThread(ThreadControlBlock*)>:
c001ddc6:	57                   	push   edi
c001ddc7:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001ddcc:	56                   	push   esi
c001ddcd:	85 c0                	test   eax,eax
c001ddcf:	53                   	push   ebx
c001ddd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ddd4:	0f 85 88 00 00 00    	jne    c001de62 <switchToThread(ThreadControlBlock*)+0x9c>
c001ddda:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dddd:	3c ff                	cmp    al,0xff
c001dddf:	74 7d                	je     c001de5e <switchToThread(ThreadControlBlock*)+0x98>
c001dde1:	0f b6 d0             	movzx  edx,al
c001dde4:	b8 84 03 00 00       	mov    eax,0x384
c001dde9:	29 d0                	sub    eax,edx
c001ddeb:	c1 e0 10             	shl    eax,0x10
c001ddee:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001ddf1:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ddf4:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c001ddf9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddff:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de06:	74 4a                	je     c001de52 <switchToThread(ThreadControlBlock*)+0x8c>
c001de08:	0f 31                	rdtsc  
c001de0a:	a3 48 24 03 c0       	mov    ds:0xc0032448,eax
c001de0f:	89 c6                	mov    esi,eax
c001de11:	89 d7                	mov    edi,edx
c001de13:	2b 35 38 24 03 c0    	sub    esi,DWORD PTR ds:0xc0032438
c001de19:	89 15 4c 24 03 c0    	mov    DWORD PTR ds:0xc003244c,edx
c001de1f:	1b 3d 3c 24 03 c0    	sbb    edi,DWORD PTR ds:0xc003243c
c001de25:	89 35 40 24 03 c0    	mov    DWORD PTR ds:0xc0032440,esi
c001de2b:	a3 38 24 03 c0       	mov    ds:0xc0032438,eax
c001de30:	89 3d 44 24 03 c0    	mov    DWORD PTR ds:0xc0032444,edi
c001de36:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001de3c:	89 15 3c 24 03 c0    	mov    DWORD PTR ds:0xc003243c,edx
c001de42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001de45:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001de48:	01 c6                	add    esi,eax
c001de4a:	11 d7                	adc    edi,edx
c001de4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001de4f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001de52:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001de56:	5b                   	pop    ebx
c001de57:	5e                   	pop    esi
c001de58:	5f                   	pop    edi
c001de59:	e9 04 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de5e:	31 c0                	xor    eax,eax
c001de60:	eb 8f                	jmp    c001ddf1 <switchToThread(ThreadControlBlock*)+0x2b>
c001de62:	5b                   	pop    ebx
c001de63:	c7 05 00 24 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x1
c001de6d:	5e                   	pop    esi
c001de6e:	5f                   	pop    edi
c001de6f:	c3                   	ret    

c001de70 <Process::addArgs(char**)>:
c001de70:	57                   	push   edi
c001de71:	56                   	push   esi
c001de72:	53                   	push   ebx
c001de73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de77:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001de7b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001de85:	85 ff                	test   edi,edi
c001de87:	74 3d                	je     c001dec6 <Process::addArgs(char**)+0x56>
c001de89:	8b 07                	mov    eax,DWORD PTR [edi]
c001de8b:	85 c0                	test   eax,eax
c001de8d:	74 37                	je     c001dec6 <Process::addArgs(char**)+0x56>
c001de8f:	31 db                	xor    ebx,ebx
c001de91:	83 ec 0c             	sub    esp,0xc
c001de94:	50                   	push   eax
c001de95:	e8 ee 28 fe ff       	call   c0000788 <strlen>
c001de9a:	40                   	inc    eax
c001de9b:	89 04 24             	mov    DWORD PTR [esp],eax
c001de9e:	e8 1d 1a ff ff       	call   c000f8c0 <malloc>
c001dea3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001deaa:	5a                   	pop    edx
c001deab:	59                   	pop    ecx
c001deac:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001deaf:	43                   	inc    ebx
c001deb0:	50                   	push   eax
c001deb1:	e8 72 29 fe ff       	call   c0000828 <strcpy>
c001deb6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001debc:	83 c4 10             	add    esp,0x10
c001debf:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dec2:	85 c0                	test   eax,eax
c001dec4:	75 cb                	jne    c001de91 <Process::addArgs(char**)+0x21>
c001dec6:	5b                   	pop    ebx
c001dec7:	5e                   	pop    esi
c001dec8:	5f                   	pop    edi
c001dec9:	c3                   	ret    

c001deca <Process::Process(char const*, Process*, char**)>:
c001deca:	56                   	push   esi
c001decb:	53                   	push   ebx
c001decc:	83 ec 14             	sub    esp,0x14
c001decf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ded3:	05 0c 02 00 00       	add    eax,0x20c
c001ded8:	bb 07 00 00 00       	mov    ebx,0x7
c001dedd:	89 c6                	mov    esi,eax
c001dedf:	85 db                	test   ebx,ebx
c001dee1:	78 12                	js     c001def5 <Process::Process(char const*, Process*, char**)+0x2b>
c001dee3:	83 ec 0c             	sub    esp,0xc
c001dee6:	56                   	push   esi
c001dee7:	e8 e6 b6 00 00       	call   c00295d2 <ThreadControlBlock::ThreadControlBlock()>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	83 c6 63             	add    esi,0x63
c001def2:	4b                   	dec    ebx
c001def3:	eb ea                	jmp    c001dedf <Process::Process(char const*, Process*, char**)+0x15>
c001def5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001def9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001df00:	83 ec 0c             	sub    esp,0xc
c001df03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df07:	e8 aa c7 ff ff       	call   c001a6b6 <Krnl::newProcessEnv(Process*)>
c001df0c:	83 c4 10             	add    esp,0x10
c001df0f:	89 c2                	mov    edx,eax
c001df11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df15:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001df1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df1f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001df28:	a1 50 e4 02 c0       	mov    eax,ds:0xc002e450
c001df2d:	8d 50 01             	lea    edx,[eax+0x1]
c001df30:	89 15 50 e4 02 c0    	mov    DWORD PTR ds:0xc002e450,edx
c001df36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df3a:	89 02                	mov    DWORD PTR [edx],eax
c001df3c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001df44:	83 ec 0c             	sub    esp,0xc
c001df47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001df4b:	e8 70 19 ff ff       	call   c000f8c0 <malloc>
c001df50:	83 c4 10             	add    esp,0x10
c001df53:	89 c3                	mov    ebx,eax
c001df55:	83 ec 08             	sub    esp,0x8
c001df58:	6a 00                	push   0x0
c001df5a:	53                   	push   ebx
c001df5b:	e8 f2 47 ff ff       	call   c0012752 <VAS::VAS(bool)>
c001df60:	83 c4 10             	add    esp,0x10
c001df63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df67:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001df6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df71:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df83:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001df89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df8d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df93:	85 c0                	test   eax,eax
c001df95:	74 42                	je     c001dfd9 <Process::Process(char const*, Process*, char**)+0x10f>
c001df97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df9b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfa1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dfa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfab:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dfb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfb5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfbb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dfc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfc5:	05 0c 01 00 00       	add    eax,0x10c
c001dfca:	83 ec 08             	sub    esp,0x8
c001dfcd:	52                   	push   edx
c001dfce:	50                   	push   eax
c001dfcf:	e8 54 28 fe ff       	call   c0000828 <strcpy>
c001dfd4:	83 c4 10             	add    esp,0x10
c001dfd7:	eb 63                	jmp    c001e03c <Process::Process(char const*, Process*, char**)+0x172>
c001dfd9:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dfe1:	83 ec 0c             	sub    esp,0xc
c001dfe4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dfe8:	e8 d3 18 ff ff       	call   c000f8c0 <malloc>
c001dfed:	83 c4 10             	add    esp,0x10
c001dff0:	89 c3                	mov    ebx,eax
c001dff2:	83 ec 08             	sub    esp,0x8
c001dff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dff9:	53                   	push   ebx
c001dffa:	e8 93 30 ff ff       	call   c0011092 <VgaText::VgaText(char const*)>
c001dfff:	83 c4 10             	add    esp,0x10
c001e002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e006:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e00c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e010:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e016:	83 ec 0c             	sub    esp,0xc
c001e019:	50                   	push   eax
c001e01a:	e8 aa 25 ff ff       	call   c00105c9 <addToTerminalCycle(VgaText*)>
c001e01f:	83 c4 10             	add    esp,0x10
c001e022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e026:	05 0c 01 00 00       	add    eax,0x10c
c001e02b:	83 ec 08             	sub    esp,0x8
c001e02e:	68 2f cc 02 c0       	push   0xc002cc2f
c001e033:	50                   	push   eax
c001e034:	e8 ef 27 fe ff       	call   c0000828 <strcpy>
c001e039:	83 c4 10             	add    esp,0x10
c001e03c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e040:	83 c0 0c             	add    eax,0xc
c001e043:	83 ec 08             	sub    esp,0x8
c001e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e04a:	50                   	push   eax
c001e04b:	e8 d8 27 fe ff       	call   c0000828 <strcpy>
c001e050:	83 c4 10             	add    esp,0x10
c001e053:	83 ec 08             	sub    esp,0x8
c001e056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e05e:	e8 0d fe ff ff       	call   c001de70 <Process::addArgs(char**)>
c001e063:	83 c4 10             	add    esp,0x10
c001e066:	83 ec 08             	sub    esp,0x8
c001e069:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e06d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e071:	e8 a7 ed ff ff       	call   c001ce1d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e076:	83 c4 10             	add    esp,0x10
c001e079:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e07d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e081:	83 f0 01             	xor    eax,0x1
c001e084:	88 c2                	mov    dl,al
c001e086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e08a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e090:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e095:	83 ec 08             	sub    esp,0x8
c001e098:	50                   	push   eax
c001e099:	68 5c cd 02 c0       	push   0xc002cd5c
c001e09e:	e8 d4 4d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001e0a3:	83 c4 10             	add    esp,0x10
c001e0a6:	90                   	nop
c001e0a7:	83 c4 14             	add    esp,0x14
c001e0aa:	5b                   	pop    ebx
c001e0ab:	5e                   	pop    esi
c001e0ac:	c3                   	ret    
c001e0ad:	90                   	nop

c001e0ae <Process::Process(bool, char const*, Process*, char**)>:
c001e0ae:	56                   	push   esi
c001e0af:	53                   	push   ebx
c001e0b0:	83 ec 24             	sub    esp,0x24
c001e0b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e0b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e0bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0bf:	05 0c 02 00 00       	add    eax,0x20c
c001e0c4:	bb 07 00 00 00       	mov    ebx,0x7
c001e0c9:	89 c6                	mov    esi,eax
c001e0cb:	85 db                	test   ebx,ebx
c001e0cd:	78 12                	js     c001e0e1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e0cf:	83 ec 0c             	sub    esp,0xc
c001e0d2:	56                   	push   esi
c001e0d3:	e8 fa b4 00 00       	call   c00295d2 <ThreadControlBlock::ThreadControlBlock()>
c001e0d8:	83 c4 10             	add    esp,0x10
c001e0db:	83 c6 63             	add    esi,0x63
c001e0de:	4b                   	dec    ebx
c001e0df:	eb ea                	jmp    c001e0cb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e0e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0e5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e0ec:	83 ec 0c             	sub    esp,0xc
c001e0ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0f3:	e8 be c5 ff ff       	call   c001a6b6 <Krnl::newProcessEnv(Process*)>
c001e0f8:	83 c4 10             	add    esp,0x10
c001e0fb:	89 c2                	mov    edx,eax
c001e0fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e101:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e107:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e10b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e114:	a1 50 e4 02 c0       	mov    eax,ds:0xc002e450
c001e119:	8d 50 01             	lea    edx,[eax+0x1]
c001e11c:	89 15 50 e4 02 c0    	mov    DWORD PTR ds:0xc002e450,edx
c001e122:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e126:	89 02                	mov    DWORD PTR [edx],eax
c001e128:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e130:	83 ec 0c             	sub    esp,0xc
c001e133:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e137:	e8 84 17 ff ff       	call   c000f8c0 <malloc>
c001e13c:	83 c4 10             	add    esp,0x10
c001e13f:	89 c3                	mov    ebx,eax
c001e141:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e146:	83 ec 08             	sub    esp,0x8
c001e149:	50                   	push   eax
c001e14a:	53                   	push   ebx
c001e14b:	e8 02 46 ff ff       	call   c0012752 <VAS::VAS(bool)>
c001e150:	83 c4 10             	add    esp,0x10
c001e153:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e157:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e15d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e161:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e16b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e16f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e173:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e17d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e183:	85 c0                	test   eax,eax
c001e185:	74 42                	je     c001e1c9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e187:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e18b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e191:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e197:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e19b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e1a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1a5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1ab:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e1b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1b5:	05 0c 01 00 00       	add    eax,0x10c
c001e1ba:	83 ec 08             	sub    esp,0x8
c001e1bd:	52                   	push   edx
c001e1be:	50                   	push   eax
c001e1bf:	e8 64 26 fe ff       	call   c0000828 <strcpy>
c001e1c4:	83 c4 10             	add    esp,0x10
c001e1c7:	eb 63                	jmp    c001e22c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e1c9:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e1d1:	83 ec 0c             	sub    esp,0xc
c001e1d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e1d8:	e8 e3 16 ff ff       	call   c000f8c0 <malloc>
c001e1dd:	83 c4 10             	add    esp,0x10
c001e1e0:	89 c3                	mov    ebx,eax
c001e1e2:	83 ec 08             	sub    esp,0x8
c001e1e5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e1e9:	53                   	push   ebx
c001e1ea:	e8 a3 2e ff ff       	call   c0011092 <VgaText::VgaText(char const*)>
c001e1ef:	83 c4 10             	add    esp,0x10
c001e1f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1f6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e1fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e200:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e206:	83 ec 0c             	sub    esp,0xc
c001e209:	50                   	push   eax
c001e20a:	e8 ba 23 ff ff       	call   c00105c9 <addToTerminalCycle(VgaText*)>
c001e20f:	83 c4 10             	add    esp,0x10
c001e212:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e216:	05 0c 01 00 00       	add    eax,0x10c
c001e21b:	83 ec 08             	sub    esp,0x8
c001e21e:	68 2f cc 02 c0       	push   0xc002cc2f
c001e223:	50                   	push   eax
c001e224:	e8 ff 25 fe ff       	call   c0000828 <strcpy>
c001e229:	83 c4 10             	add    esp,0x10
c001e22c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e230:	83 c0 0c             	add    eax,0xc
c001e233:	83 ec 08             	sub    esp,0x8
c001e236:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e23a:	50                   	push   eax
c001e23b:	e8 e8 25 fe ff       	call   c0000828 <strcpy>
c001e240:	83 c4 10             	add    esp,0x10
c001e243:	83 ec 08             	sub    esp,0x8
c001e246:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e24a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e24e:	e8 1d fc ff ff       	call   c001de70 <Process::addArgs(char**)>
c001e253:	83 c4 10             	add    esp,0x10
c001e256:	90                   	nop
c001e257:	83 c4 24             	add    esp,0x24
c001e25a:	5b                   	pop    ebx
c001e25b:	5e                   	pop    esi
c001e25c:	c3                   	ret    

c001e25d <taskStartupFunction>:
c001e25d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e262:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e265:	c3                   	ret    

c001e266 <Semaphore::Semaphore(int)>:
c001e266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e26a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e26e:	89 10                	mov    DWORD PTR [eax],edx
c001e270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e274:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e27b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e27f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e28a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e291:	90                   	nop
c001e292:	c3                   	ret    
c001e293:	90                   	nop

c001e294 <Mutex::Mutex()>:
c001e294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e298:	6a 01                	push   0x1
c001e29a:	50                   	push   eax
c001e29b:	e8 c6 ff ff ff       	call   c001e266 <Semaphore::Semaphore(int)>
c001e2a0:	83 c4 08             	add    esp,0x8
c001e2a3:	90                   	nop
c001e2a4:	c3                   	ret    
c001e2a5:	90                   	nop

c001e2a6 <Process::createThread(void (*)(void*), void*, int)>:
c001e2a6:	55                   	push   ebp
c001e2a7:	31 c9                	xor    ecx,ecx
c001e2a9:	57                   	push   edi
c001e2aa:	56                   	push   esi
c001e2ab:	53                   	push   ebx
c001e2ac:	83 ec 1c             	sub    esp,0x1c
c001e2af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2b3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e2ba:	89 f2                	mov    edx,esi
c001e2bc:	0f b7 c2             	movzx  eax,dx
c001e2bf:	83 e2 01             	and    edx,0x1
c001e2c2:	74 16                	je     c001e2da <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e2c4:	d1 f8                	sar    eax,1
c001e2c6:	41                   	inc    ecx
c001e2c7:	89 c2                	mov    edx,eax
c001e2c9:	83 f9 10             	cmp    ecx,0x10
c001e2cc:	75 ee                	jne    c001e2bc <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e2ce:	83 c4 1c             	add    esp,0x1c
c001e2d1:	31 db                	xor    ebx,ebx
c001e2d3:	89 d8                	mov    eax,ebx
c001e2d5:	5b                   	pop    ebx
c001e2d6:	5e                   	pop    esi
c001e2d7:	5f                   	pop    edi
c001e2d8:	5d                   	pop    ebp
c001e2d9:	c3                   	ret    
c001e2da:	b8 01 00 00 00       	mov    eax,0x1
c001e2df:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e2e2:	d3 e0                	shl    eax,cl
c001e2e4:	09 c6                	or     esi,eax
c001e2e6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e2e9:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e2f0:	89 c6                	mov    esi,eax
c001e2f2:	c1 e6 05             	shl    esi,0x5
c001e2f5:	01 f0                	add    eax,esi
c001e2f7:	01 d8                	add    eax,ebx
c001e2f9:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e300:	75 0a                	jne    c001e30c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e302:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e30c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e312:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e316:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e319:	01 ca                	add    edx,ecx
c001e31b:	83 ec 08             	sub    esp,0x8
c001e31e:	89 d0                	mov    eax,edx
c001e320:	c1 e0 05             	shl    eax,0x5
c001e323:	01 d0                	add    eax,edx
c001e325:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e329:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e32d:	01 d8                	add    eax,ebx
c001e32f:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e335:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e33b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e341:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e347:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e34d:	89 cd                	mov    ebp,ecx
c001e34f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e353:	f7 dd                	neg    ebp
c001e355:	c1 e5 15             	shl    ebp,0x15
c001e358:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e35e:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e364:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e36e:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e374:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e37e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e38c:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e393:	53                   	push   ebx
c001e394:	68 24 24 03 c0       	push   0xc0032424
c001e399:	e8 ee af 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e39e:	89 d8                	mov    eax,ebx
c001e3a0:	83 c4 10             	add    esp,0x10
c001e3a3:	83 c4 1c             	add    esp,0x1c
c001e3a6:	5b                   	pop    ebx
c001e3a7:	5e                   	pop    esi
c001e3a8:	5f                   	pop    edi
c001e3a9:	5d                   	pop    ebp
c001e3aa:	c3                   	ret    
c001e3ab:	90                   	nop

c001e3ac <Process::createUserThread()>:
c001e3ac:	83 ec 0c             	sub    esp,0xc
c001e3af:	68 80 00 00 00       	push   0x80
c001e3b4:	6a 00                	push   0x0
c001e3b6:	68 70 dd 01 c0       	push   0xc001dd70
c001e3bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3bf:	e8 e2 fe ff ff       	call   c001e2a6 <Process::createThread(void (*)(void*), void*, int)>
c001e3c4:	83 c4 1c             	add    esp,0x1c
c001e3c7:	c3                   	ret    

c001e3c8 <setupMultitasking(void (*)())>:
c001e3c8:	56                   	push   esi
c001e3c9:	53                   	push   ebx
c001e3ca:	51                   	push   ecx
c001e3cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e3cf:	eb 10                	jmp    c001e3e1 <setupMultitasking(void (*)())+0x19>
c001e3d1:	83 ec 0c             	sub    esp,0xc
c001e3d4:	68 24 24 03 c0       	push   0xc0032424
c001e3d9:	e8 00 af 00 00       	call   c00292de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e3de:	83 c4 10             	add    esp,0x10
c001e3e1:	83 ec 0c             	sub    esp,0xc
c001e3e4:	68 24 24 03 c0       	push   0xc0032424
c001e3e9:	e8 cc ae 00 00       	call   c00292ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e3ee:	83 c4 10             	add    esp,0x10
c001e3f1:	84 c0                	test   al,al
c001e3f3:	74 dc                	je     c001e3d1 <setupMultitasking(void (*)())+0x9>
c001e3f5:	83 ec 0c             	sub    esp,0xc
c001e3f8:	68 3f 07 00 00       	push   0x73f
c001e3fd:	e8 be 14 ff ff       	call   c000f8c0 <malloc>
c001e402:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e409:	89 c3                	mov    ebx,eax
c001e40b:	6a 00                	push   0x0
c001e40d:	68 33 cc 02 c0       	push   0xc002cc33
c001e412:	6a 01                	push   0x1
c001e414:	50                   	push   eax
c001e415:	e8 94 fc ff ff       	call   c001e0ae <Process::Process(bool, char const*, Process*, char**)>
c001e41a:	83 c4 18             	add    esp,0x18
c001e41d:	89 1d 30 24 03 c0    	mov    DWORD PTR ds:0xc0032430,ebx
c001e423:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e429:	68 84 cd 02 c0       	push   0xc002cd84
c001e42e:	e8 44 4a ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001e433:	58                   	pop    eax
c001e434:	5a                   	pop    edx
c001e435:	6a 63                	push   0x63
c001e437:	68 b8 cd 02 c0       	push   0xc002cdb8
c001e43c:	e8 36 4a ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001e441:	59                   	pop    ecx
c001e442:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e448:	e8 4d 28 ff ff       	call   c0010c9a <setActiveTerminal(VgaText*)>
c001e44d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e455:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e45f:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e465:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e468:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e472:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e478:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e47e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e488:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e492:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e49c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e4a2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e4ac:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e4b2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e4bc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e4c2:	58                   	pop    eax
c001e4c3:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e4c9:	5a                   	pop    edx
c001e4ca:	68 2f cc 02 c0       	push   0xc002cc2f
c001e4cf:	50                   	push   eax
c001e4d0:	e8 53 23 fe ff       	call   c0000828 <strcpy>
c001e4d5:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e4dc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e4e0:	83 c4 14             	add    esp,0x14
c001e4e3:	5b                   	pop    ebx
c001e4e4:	5e                   	pop    esi
c001e4e5:	e9 6a 1e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e4ea <schedule()>:
c001e4ea:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001e4ef:	85 c0                	test   eax,eax
c001e4f1:	74 0b                	je     c001e4fe <schedule()+0x14>
c001e4f3:	c7 05 00 24 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x1
c001e4fd:	c3                   	ret    
c001e4fe:	53                   	push   ebx
c001e4ff:	83 ec 14             	sub    esp,0x14
c001e502:	68 24 24 03 c0       	push   0xc0032424
c001e507:	e8 ae ad 00 00       	call   c00292ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e50c:	83 c4 10             	add    esp,0x10
c001e50f:	84 c0                	test   al,al
c001e511:	75 38                	jne    c001e54b <schedule()+0x61>
c001e513:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e518:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e51b:	4a                   	dec    edx
c001e51c:	74 32                	je     c001e550 <schedule()+0x66>
c001e51e:	83 ec 0c             	sub    esp,0xc
c001e521:	68 24 24 03 c0       	push   0xc0032424
c001e526:	e8 ab ad 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e52b:	c7 04 24 24 24 03 c0 	mov    DWORD PTR [esp],0xc0032424
c001e532:	89 c3                	mov    ebx,eax
c001e534:	e8 a5 ad 00 00       	call   c00292de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e539:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e540:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e543:	e8 7e f8 ff ff       	call   c001ddc6 <switchToThread(ThreadControlBlock*)>
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	83 c4 08             	add    esp,0x8
c001e54e:	5b                   	pop    ebx
c001e54f:	c3                   	ret    
c001e550:	83 ec 08             	sub    esp,0x8
c001e553:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e55a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e560:	68 24 24 03 c0       	push   0xc0032424
c001e565:	e8 22 ae 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e56a:	83 c4 10             	add    esp,0x10
c001e56d:	eb af                	jmp    c001e51e <schedule()+0x34>
c001e56f:	90                   	nop

c001e570 <Semaphore::tryAcquire()>:
c001e570:	53                   	push   ebx
c001e571:	83 ec 08             	sub    esp,0x8
c001e574:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e578:	fa                   	cli    
c001e579:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e57e:	8d 50 01             	lea    edx,[eax+0x1]
c001e581:	89 15 08 24 03 c0    	mov    DWORD PTR ds:0xc0032408,edx
c001e587:	8b 15 04 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032404
c001e58d:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e590:	89 1d 04 24 03 c0    	mov    DWORD PTR ds:0xc0032404,ebx
c001e596:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e599:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e59b:	7c 2a                	jl     c001e5c7 <Semaphore::tryAcquire()+0x57>
c001e59d:	89 15 04 24 03 c0    	mov    DWORD PTR ds:0xc0032404,edx
c001e5a3:	85 d2                	test   edx,edx
c001e5a5:	75 0a                	jne    c001e5b1 <Semaphore::tryAcquire()+0x41>
c001e5a7:	8b 15 00 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032400
c001e5ad:	85 d2                	test   edx,edx
c001e5af:	75 5b                	jne    c001e60c <Semaphore::tryAcquire()+0x9c>
c001e5b1:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e5b6:	85 c0                	test   eax,eax
c001e5b8:	74 07                	je     c001e5c1 <Semaphore::tryAcquire()+0x51>
c001e5ba:	31 c0                	xor    eax,eax
c001e5bc:	83 c4 08             	add    esp,0x8
c001e5bf:	5b                   	pop    ebx
c001e5c0:	c3                   	ret    
c001e5c1:	fb                   	sti    
c001e5c2:	83 c4 08             	add    esp,0x8
c001e5c5:	5b                   	pop    ebx
c001e5c6:	c3                   	ret    
c001e5c7:	43                   	inc    ebx
c001e5c8:	89 15 04 24 03 c0    	mov    DWORD PTR ds:0xc0032404,edx
c001e5ce:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e5d1:	85 d2                	test   edx,edx
c001e5d3:	75 1f                	jne    c001e5f4 <Semaphore::tryAcquire()+0x84>
c001e5d5:	8b 0d 00 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032400
c001e5db:	85 c9                	test   ecx,ecx
c001e5dd:	74 15                	je     c001e5f4 <Semaphore::tryAcquire()+0x84>
c001e5df:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c001e5e9:	e8 fc fe ff ff       	call   c001e4ea <schedule()>
c001e5ee:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e5f3:	48                   	dec    eax
c001e5f4:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e5f9:	85 c0                	test   eax,eax
c001e5fb:	75 08                	jne    c001e605 <Semaphore::tryAcquire()+0x95>
c001e5fd:	fb                   	sti    
c001e5fe:	b0 01                	mov    al,0x1
c001e600:	83 c4 08             	add    esp,0x8
c001e603:	5b                   	pop    ebx
c001e604:	c3                   	ret    
c001e605:	b0 01                	mov    al,0x1
c001e607:	83 c4 08             	add    esp,0x8
c001e60a:	5b                   	pop    ebx
c001e60b:	c3                   	ret    
c001e60c:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c001e616:	e8 cf fe ff ff       	call   c001e4ea <schedule()>
c001e61b:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e620:	48                   	dec    eax
c001e621:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e626:	85 c0                	test   eax,eax
c001e628:	75 90                	jne    c001e5ba <Semaphore::tryAcquire()+0x4a>
c001e62a:	eb 95                	jmp    c001e5c1 <Semaphore::tryAcquire()+0x51>

c001e62c <Semaphore::assertLocked(char const*)>:
c001e62c:	83 ec 0c             	sub    esp,0xc
c001e62f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e633:	fa                   	cli    
c001e634:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001e63a:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001e63f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e642:	89 0d 04 24 03 c0    	mov    DWORD PTR ds:0xc0032404,ecx
c001e648:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e64a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e64d:	7c 24                	jl     c001e673 <Semaphore::assertLocked(char const*)+0x47>
c001e64f:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c001e654:	85 c0                	test   eax,eax
c001e656:	75 09                	jne    c001e661 <Semaphore::assertLocked(char const*)+0x35>
c001e658:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c001e65d:	85 c0                	test   eax,eax
c001e65f:	75 29                	jne    c001e68a <Semaphore::assertLocked(char const*)+0x5e>
c001e661:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e666:	48                   	dec    eax
c001e667:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e66c:	75 01                	jne    c001e66f <Semaphore::assertLocked(char const*)+0x43>
c001e66e:	fb                   	sti    
c001e66f:	83 c4 0c             	add    esp,0xc
c001e672:	c3                   	ret    
c001e673:	83 ec 0c             	sub    esp,0xc
c001e676:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e67a:	e8 e6 c1 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001e67f:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001e684:	83 c4 10             	add    esp,0x10
c001e687:	48                   	dec    eax
c001e688:	eb c5                	jmp    c001e64f <Semaphore::assertLocked(char const*)+0x23>
c001e68a:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c001e694:	e8 51 fe ff ff       	call   c001e4ea <schedule()>
c001e699:	eb c6                	jmp    c001e661 <Semaphore::assertLocked(char const*)+0x35>

c001e69b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e69b:	83 ec 14             	sub    esp,0x14
c001e69e:	ff 35 08 24 03 c0    	push   DWORD PTR ds:0xc0032408
c001e6a4:	68 dc cd 02 c0       	push   0xc002cddc
c001e6a9:	e8 c9 47 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001e6ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6ba:	e8 2b fe ff ff       	call   c001e4ea <schedule()>
c001e6bf:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e6c4:	83 c4 10             	add    esp,0x10
c001e6c7:	48                   	dec    eax
c001e6c8:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e6cd:	85 c0                	test   eax,eax
c001e6cf:	75 06                	jne    c001e6d7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e6d1:	fb                   	sti    
c001e6d2:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e6d7:	83 ec 08             	sub    esp,0x8
c001e6da:	50                   	push   eax
c001e6db:	68 10 ce 02 c0       	push   0xc002ce10
c001e6e0:	e8 92 47 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001e6e5:	83 c4 1c             	add    esp,0x1c
c001e6e8:	c3                   	ret    

c001e6e9 <blockTask(TaskState)>:
c001e6e9:	83 ec 0c             	sub    esp,0xc
c001e6ec:	fa                   	cli    
c001e6ed:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001e6f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e6f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6ff:	e8 e6 fd ff ff       	call   c001e4ea <schedule()>
c001e704:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e709:	48                   	dec    eax
c001e70a:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e70f:	75 01                	jne    c001e712 <blockTask(TaskState)+0x29>
c001e711:	fb                   	sti    
c001e712:	83 c4 0c             	add    esp,0xc
c001e715:	c3                   	ret    

c001e716 <waitTask(int, int*, int)>:
c001e716:	83 ec 18             	sub    esp,0x18
c001e719:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e71e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e722:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e725:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e729:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e72e:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e731:	6a 07                	push   0x7
c001e733:	e8 b1 ff ff ff       	call   c001e6e9 <blockTask(TaskState)>
c001e738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e73d:	83 c4 10             	add    esp,0x10
c001e740:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e743:	85 d2                	test   edx,edx
c001e745:	74 0a                	je     c001e751 <waitTask(int, int*, int)+0x3b>
c001e747:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e74a:	89 02                	mov    DWORD PTR [edx],eax
c001e74c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e751:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e754:	83 c4 0c             	add    esp,0xc
c001e757:	c3                   	ret    

c001e758 <nanoSleepUntil(unsigned long long)>:
c001e758:	83 ec 0c             	sub    esp,0xc
c001e75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e75f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e763:	3b 05 50 f5 02 c0    	cmp    eax,DWORD PTR ds:0xc002f550
c001e769:	89 d1                	mov    ecx,edx
c001e76b:	1b 0d 54 f5 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f554
c001e771:	73 04                	jae    c001e777 <nanoSleepUntil(unsigned long long)+0x1f>
c001e773:	83 c4 0c             	add    esp,0xc
c001e776:	c3                   	ret    
c001e777:	fa                   	cli    
c001e778:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001e77e:	83 ec 08             	sub    esp,0x8
c001e781:	ff 05 04 24 03 c0    	inc    DWORD PTR ds:0xc0032404
c001e787:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e78d:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e790:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e793:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e799:	68 18 24 03 c0       	push   0xc0032418
c001e79e:	e8 e9 ab 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7a3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e7aa:	e8 3a ff ff ff       	call   c001e6e9 <blockTask(TaskState)>
c001e7af:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001e7b4:	83 c4 10             	add    esp,0x10
c001e7b7:	48                   	dec    eax
c001e7b8:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c001e7bd:	85 c0                	test   eax,eax
c001e7bf:	75 09                	jne    c001e7ca <nanoSleepUntil(unsigned long long)+0x72>
c001e7c1:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c001e7c6:	85 c0                	test   eax,eax
c001e7c8:	75 12                	jne    c001e7dc <nanoSleepUntil(unsigned long long)+0x84>
c001e7ca:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e7cf:	48                   	dec    eax
c001e7d0:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e7d5:	75 9c                	jne    c001e773 <nanoSleepUntil(unsigned long long)+0x1b>
c001e7d7:	fb                   	sti    
c001e7d8:	83 c4 0c             	add    esp,0xc
c001e7db:	c3                   	ret    
c001e7dc:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c001e7e6:	e8 ff fc ff ff       	call   c001e4ea <schedule()>
c001e7eb:	eb dd                	jmp    c001e7ca <nanoSleepUntil(unsigned long long)+0x72>

c001e7ed <nanoSleep(unsigned long long)>:
c001e7ed:	a1 50 f5 02 c0       	mov    eax,ds:0xc002f550
c001e7f2:	8b 15 54 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f554
c001e7f8:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e7fc:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e800:	e9 53 ff ff ff       	jmp    c001e758 <nanoSleepUntil(unsigned long long)>

c001e805 <sleep(unsigned long long)>:
c001e805:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e80d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e812:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e816:	01 ca                	add    edx,ecx
c001e818:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e81c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e820:	eb cb                	jmp    c001e7ed <nanoSleep(unsigned long long)>

c001e822 <Semaphore::acquire()>:
c001e822:	83 ec 0c             	sub    esp,0xc
c001e825:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e829:	fa                   	cli    
c001e82a:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001e82f:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001e835:	8d 48 01             	lea    ecx,[eax+0x1]
c001e838:	89 0d 04 24 03 c0    	mov    DWORD PTR ds:0xc0032404,ecx
c001e83e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e841:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e843:	7d 28                	jge    c001e86d <Semaphore::acquire()+0x4b>
c001e845:	41                   	inc    ecx
c001e846:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e849:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c001e84e:	85 c0                	test   eax,eax
c001e850:	75 09                	jne    c001e85b <Semaphore::acquire()+0x39>
c001e852:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c001e857:	85 c0                	test   eax,eax
c001e859:	75 4e                	jne    c001e8a9 <Semaphore::acquire()+0x87>
c001e85b:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e860:	48                   	dec    eax
c001e861:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e866:	75 01                	jne    c001e869 <Semaphore::acquire()+0x47>
c001e868:	fb                   	sti    
c001e869:	83 c4 0c             	add    esp,0xc
c001e86c:	c3                   	ret    
c001e86d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e872:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e879:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e87c:	85 c9                	test   ecx,ecx
c001e87e:	74 3a                	je     c001e8ba <Semaphore::acquire()+0x98>
c001e880:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e883:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e889:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e88c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e891:	83 ec 0c             	sub    esp,0xc
c001e894:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e897:	6a 05                	push   0x5
c001e899:	e8 4b fe ff ff       	call   c001e6e9 <blockTask(TaskState)>
c001e89e:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	48                   	dec    eax
c001e8a7:	eb a0                	jmp    c001e849 <Semaphore::acquire()+0x27>
c001e8a9:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c001e8b3:	e8 32 fc ff ff       	call   c001e4ea <schedule()>
c001e8b8:	eb a1                	jmp    c001e85b <Semaphore::acquire()+0x39>
c001e8ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8bf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e8c2:	eb c8                	jmp    c001e88c <Semaphore::acquire()+0x6a>

c001e8c4 <taskReturned>:
c001e8c4:	83 ec 18             	sub    esp,0x18
c001e8c7:	68 44 ce 02 c0       	push   0xc002ce44
c001e8cc:	e8 94 bf ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001e8d1:	83 c4 10             	add    esp,0x10
c001e8d4:	83 ec 0c             	sub    esp,0xc
c001e8d7:	6a 02                	push   0x2
c001e8d9:	e8 0b fe ff ff       	call   c001e6e9 <blockTask(TaskState)>
c001e8de:	fa                   	cli    
c001e8df:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001e8e5:	e8 00 fc ff ff       	call   c001e4ea <schedule()>
c001e8ea:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e8ef:	83 c4 10             	add    esp,0x10
c001e8f2:	48                   	dec    eax
c001e8f3:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e8f8:	85 c0                	test   eax,eax
c001e8fa:	75 d8                	jne    c001e8d4 <taskReturned+0x10>
c001e8fc:	fb                   	sti    
c001e8fd:	eb d5                	jmp    c001e8d4 <taskReturned+0x10>

c001e8ff <Thr::processFromPID(int)>:
c001e8ff:	57                   	push   edi
c001e900:	56                   	push   esi
c001e901:	53                   	push   ebx
c001e902:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e906:	83 ec 0c             	sub    esp,0xc
c001e909:	68 3a cc 02 c0       	push   0xc002cc3a
c001e90e:	e8 64 45 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001e913:	fa                   	cli    
c001e914:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001e91a:	c7 04 24 24 24 03 c0 	mov    DWORD PTR [esp],0xc0032424
c001e921:	e8 b0 a9 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e926:	83 c4 10             	add    esp,0x10
c001e929:	89 c7                	mov    edi,eax
c001e92b:	eb 14                	jmp    c001e941 <Thr::processFromPID(int)+0x42>
c001e92d:	83 ec 0c             	sub    esp,0xc
c001e930:	68 24 24 03 c0       	push   0xc0032424
c001e935:	e8 9c a9 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e93a:	83 c4 10             	add    esp,0x10
c001e93d:	39 f8                	cmp    eax,edi
c001e93f:	74 49                	je     c001e98a <Thr::processFromPID(int)+0x8b>
c001e941:	83 ec 0c             	sub    esp,0xc
c001e944:	68 24 24 03 c0       	push   0xc0032424
c001e949:	e8 88 a9 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e94e:	c7 04 24 24 24 03 c0 	mov    DWORD PTR [esp],0xc0032424
c001e955:	89 c3                	mov    ebx,eax
c001e957:	e8 82 a9 00 00       	call   c00292de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e95c:	58                   	pop    eax
c001e95d:	5a                   	pop    edx
c001e95e:	53                   	push   ebx
c001e95f:	68 24 24 03 c0       	push   0xc0032424
c001e964:	e8 23 aa 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e969:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e96c:	83 c4 10             	add    esp,0x10
c001e96f:	39 30                	cmp    DWORD PTR [eax],esi
c001e971:	75 ba                	jne    c001e92d <Thr::processFromPID(int)+0x2e>
c001e973:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e978:	48                   	dec    eax
c001e979:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e97e:	74 07                	je     c001e987 <Thr::processFromPID(int)+0x88>
c001e980:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e983:	5b                   	pop    ebx
c001e984:	5e                   	pop    esi
c001e985:	5f                   	pop    edi
c001e986:	c3                   	ret    
c001e987:	fb                   	sti    
c001e988:	eb f6                	jmp    c001e980 <Thr::processFromPID(int)+0x81>
c001e98a:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001e98f:	48                   	dec    eax
c001e990:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001e995:	75 01                	jne    c001e998 <Thr::processFromPID(int)+0x99>
c001e997:	fb                   	sti    
c001e998:	83 ec 0c             	sub    esp,0xc
c001e99b:	68 55 cc 02 c0       	push   0xc002cc55
c001e9a0:	e8 d2 44 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001e9a5:	83 c4 10             	add    esp,0x10
c001e9a8:	31 c0                	xor    eax,eax
c001e9aa:	5b                   	pop    ebx
c001e9ab:	5e                   	pop    esi
c001e9ac:	5f                   	pop    edi
c001e9ad:	c3                   	ret    

c001e9ae <unblockTask(ThreadControlBlock*)>:
c001e9ae:	53                   	push   ebx
c001e9af:	83 ec 08             	sub    esp,0x8
c001e9b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e9b6:	fa                   	cli    
c001e9b7:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001e9bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e9c0:	85 c0                	test   eax,eax
c001e9c2:	74 66                	je     c001ea2a <unblockTask(ThreadControlBlock*)+0x7c>
c001e9c4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e9c7:	48                   	dec    eax
c001e9c8:	74 31                	je     c001e9fb <unblockTask(ThreadControlBlock*)+0x4d>
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	68 24 24 03 c0       	push   0xc0032424
c001e9d2:	e8 ff a8 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	85 c0                	test   eax,eax
c001e9dc:	75 17                	jne    c001e9f5 <unblockTask(ThreadControlBlock*)+0x47>
c001e9de:	eb 68                	jmp    c001ea48 <unblockTask(ThreadControlBlock*)+0x9a>
c001e9e0:	83 ec 08             	sub    esp,0x8
c001e9e3:	50                   	push   eax
c001e9e4:	68 24 24 03 c0       	push   0xc0032424
c001e9e9:	e8 86 ac 00 00       	call   c0029674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	85 c0                	test   eax,eax
c001e9f3:	74 53                	je     c001ea48 <unblockTask(ThreadControlBlock*)+0x9a>
c001e9f5:	39 c3                	cmp    ebx,eax
c001e9f7:	75 e7                	jne    c001e9e0 <unblockTask(ThreadControlBlock*)+0x32>
c001e9f9:	eb 1c                	jmp    c001ea17 <unblockTask(ThreadControlBlock*)+0x69>
c001e9fb:	83 ec 0c             	sub    esp,0xc
c001e9fe:	68 34 cf 02 c0       	push   0xc002cf34
c001ea03:	e8 6f 44 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ea08:	c7 04 24 c0 ce 02 c0 	mov    DWORD PTR [esp],0xc002cec0
c001ea0f:	e8 63 44 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ea14:	83 c4 10             	add    esp,0x10
c001ea17:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001ea1c:	48                   	dec    eax
c001ea1d:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001ea22:	75 01                	jne    c001ea25 <unblockTask(ThreadControlBlock*)+0x77>
c001ea24:	fb                   	sti    
c001ea25:	83 c4 08             	add    esp,0x8
c001ea28:	5b                   	pop    ebx
c001ea29:	c3                   	ret    
c001ea2a:	83 ec 0c             	sub    esp,0xc
c001ea2d:	68 78 ce 02 c0       	push   0xc002ce78
c001ea32:	e8 40 44 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ea37:	c7 04 24 c0 ce 02 c0 	mov    DWORD PTR [esp],0xc002cec0
c001ea3e:	e8 34 44 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ea43:	83 c4 10             	add    esp,0x10
c001ea46:	eb cf                	jmp    c001ea17 <unblockTask(ThreadControlBlock*)+0x69>
c001ea48:	83 ec 08             	sub    esp,0x8
c001ea4b:	53                   	push   ebx
c001ea4c:	68 24 24 03 c0       	push   0xc0032424
c001ea51:	e8 36 a9 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea56:	83 c4 10             	add    esp,0x10
c001ea59:	eb bc                	jmp    c001ea17 <unblockTask(ThreadControlBlock*)+0x69>

c001ea5b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ea5b:	55                   	push   ebp
c001ea5c:	57                   	push   edi
c001ea5d:	56                   	push   esi
c001ea5e:	53                   	push   ebx
c001ea5f:	83 ec 1c             	sub    esp,0x1c
c001ea62:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea66:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea69:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ea6f:	85 ff                	test   edi,edi
c001ea71:	7e 20                	jle    c001ea93 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ea73:	31 f6                	xor    esi,esi
c001ea75:	83 ec 0c             	sub    esp,0xc
c001ea78:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ea7f:	46                   	inc    esi
c001ea80:	e8 4b 0e ff ff       	call   c000f8d0 <free>
c001ea85:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea88:	83 c4 10             	add    esp,0x10
c001ea8b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ea91:	7f e2                	jg     c001ea75 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ea93:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ea9d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001eaa2:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001eaa5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eaa8:	d3 c0                	rol    eax,cl
c001eaaa:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001eab1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eab4:	89 f7                	mov    edi,esi
c001eab6:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001eabe:	0f 85 74 01 00 00    	jne    c001ec38 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001eac4:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001eaca:	85 ed                	test   ebp,ebp
c001eacc:	74 1b                	je     c001eae9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	55                   	push   ebp
c001ead2:	e8 fb ba ff ff       	call   c001a5d2 <EnvVarContainer::~EnvVarContainer()>
c001ead7:	59                   	pop    ecx
c001ead8:	5e                   	pop    esi
c001ead9:	6a 0c                	push   0xc
c001eadb:	55                   	push   ebp
c001eadc:	e8 b6 42 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c001eae1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eae4:	83 c4 10             	add    esp,0x10
c001eae7:	89 f7                	mov    edi,esi
c001eae9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eaef:	85 c0                	test   eax,eax
c001eaf1:	0f 84 aa 00 00 00    	je     c001eba1 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eaf7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001eafa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eafe:	31 c9                	xor    ecx,ecx
c001eb00:	eb 10                	jmp    c001eb12 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001eb02:	41                   	inc    ecx
c001eb03:	83 f9 10             	cmp    ecx,0x10
c001eb06:	0f 84 95 00 00 00    	je     c001eba1 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eb0c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb12:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eb19:	d3 fa                	sar    edx,cl
c001eb1b:	83 e2 01             	and    edx,0x1
c001eb1e:	74 e2                	je     c001eb02 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb20:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001eb23:	01 ca                	add    edx,ecx
c001eb25:	89 d5                	mov    ebp,edx
c001eb27:	c1 e5 05             	shl    ebp,0x5
c001eb2a:	01 ea                	add    edx,ebp
c001eb2c:	01 d0                	add    eax,edx
c001eb2e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001eb34:	83 fd 07             	cmp    ebp,0x7
c001eb37:	75 c9                	jne    c001eb02 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb39:	05 40 02 00 00       	add    eax,0x240
c001eb3e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eb41:	83 fd ff             	cmp    ebp,0xffffffff
c001eb44:	0f 8c 08 01 00 00    	jl     c001ec52 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eb4a:	0f 84 b9 01 00 00    	je     c001ed09 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eb50:	85 ed                	test   ebp,ebp
c001eb52:	0f 84 a0 01 00 00    	je     c001ecf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eb58:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eb5a:	75 a6                	jne    c001eb02 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb5c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb62:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb66:	01 d0                	add    eax,edx
c001eb68:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eb6c:	83 ec 0c             	sub    esp,0xc
c001eb6f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001eb75:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb78:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eb7e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eb85:	50                   	push   eax
c001eb86:	e8 23 fe ff ff       	call   c001e9ae <unblockTask(ThreadControlBlock*)>
c001eb8b:	83 c4 10             	add    esp,0x10
c001eb8e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb95:	89 f7                	mov    edi,esi
c001eb97:	41                   	inc    ecx
c001eb98:	83 f9 10             	cmp    ecx,0x10
c001eb9b:	0f 85 6b ff ff ff    	jne    c001eb0c <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eba1:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eba7:	85 c0                	test   eax,eax
c001eba9:	74 5d                	je     c001ec08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ebab:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ebb1:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ebb7:	74 4f                	je     c001ec08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ebb9:	83 ec 0c             	sub    esp,0xc
c001ebbc:	68 24 24 03 c0       	push   0xc0032424
c001ebc1:	e8 10 a7 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ebc6:	c7 04 24 24 24 03 c0 	mov    DWORD PTR [esp],0xc0032424
c001ebcd:	89 c7                	mov    edi,eax
c001ebcf:	e8 e6 a6 00 00       	call   c00292ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ebd4:	83 c4 10             	add    esp,0x10
c001ebd7:	84 c0                	test   al,al
c001ebd9:	0f 84 e4 00 00 00    	je     c001ecc3 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ebdf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebe2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ebe8:	85 d2                	test   edx,edx
c001ebea:	74 0f                	je     c001ebfb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ebec:	83 ec 0c             	sub    esp,0xc
c001ebef:	8b 02                	mov    eax,DWORD PTR [edx]
c001ebf1:	52                   	push   edx
c001ebf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ebf5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ec05:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ec08:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ec0e:	85 db                	test   ebx,ebx
c001ec10:	74 16                	je     c001ec28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ec12:	83 ec 0c             	sub    esp,0xc
c001ec15:	53                   	push   ebx
c001ec16:	e8 11 35 ff ff       	call   c001212c <VAS::~VAS()>
c001ec1b:	58                   	pop    eax
c001ec1c:	5a                   	pop    edx
c001ec1d:	6a 14                	push   0x14
c001ec1f:	53                   	push   ebx
c001ec20:	e8 72 41 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c001ec25:	83 c4 10             	add    esp,0x10
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	68 6c cc 02 c0       	push   0xc002cc6c
c001ec30:	e8 42 42 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ec35:	83 c4 10             	add    esp,0x10
c001ec38:	83 ec 08             	sub    esp,0x8
c001ec3b:	68 3f 07 00 00       	push   0x73f
c001ec40:	68 7a cc 02 c0       	push   0xc002cc7a
c001ec45:	e8 2d 42 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ec4a:	83 c4 2c             	add    esp,0x2c
c001ec4d:	5b                   	pop    ebx
c001ec4e:	5e                   	pop    esi
c001ec4f:	5f                   	pop    edi
c001ec50:	5d                   	pop    ebp
c001ec51:	c3                   	ret    
c001ec52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec56:	83 ec 0c             	sub    esp,0xc
c001ec59:	68 78 cf 02 c0       	push   0xc002cf78
c001ec5e:	e8 02 bc ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001ec63:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec66:	83 c4 10             	add    esp,0x10
c001ec69:	89 f7                	mov    edi,esi
c001ec6b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec6f:	e9 8e fe ff ff       	jmp    c001eb02 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec74:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ec7a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ec80:	75 1c                	jne    c001ec9e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec82:	83 ec 0c             	sub    esp,0xc
c001ec85:	68 e0 cf 02 c0       	push   0xc002cfe0
c001ec8a:	e8 e8 41 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ec8f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec96:	e8 4e fa ff ff       	call   c001e6e9 <blockTask(TaskState)>
c001ec9b:	83 c4 10             	add    esp,0x10
c001ec9e:	83 ec 08             	sub    esp,0x8
c001eca1:	56                   	push   esi
c001eca2:	68 24 24 03 c0       	push   0xc0032424
c001eca7:	e8 e0 a6 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ecac:	c7 04 24 24 24 03 c0 	mov    DWORD PTR [esp],0xc0032424
c001ecb3:	e8 1e a6 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ecb8:	83 c4 10             	add    esp,0x10
c001ecbb:	39 f8                	cmp    eax,edi
c001ecbd:	0f 84 1c ff ff ff    	je     c001ebdf <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ecc3:	83 ec 0c             	sub    esp,0xc
c001ecc6:	68 24 24 03 c0       	push   0xc0032424
c001eccb:	e8 06 a6 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ecd0:	c7 04 24 24 24 03 c0 	mov    DWORD PTR [esp],0xc0032424
c001ecd7:	89 c6                	mov    esi,eax
c001ecd9:	e8 00 a6 00 00       	call   c00292de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ecde:	83 c4 10             	add    esp,0x10
c001ece1:	39 f3                	cmp    ebx,esi
c001ece3:	74 b9                	je     c001ec9e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ece5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ece8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eceb:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ecf1:	75 ab                	jne    c001ec9e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ecf3:	e9 7c ff ff ff       	jmp    c001ec74 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ecf8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecfc:	83 ec 0c             	sub    esp,0xc
c001ecff:	68 ac cf 02 c0       	push   0xc002cfac
c001ed04:	e9 55 ff ff ff       	jmp    c001ec5e <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ed09:	8b 36                	mov    esi,DWORD PTR [esi]
c001ed0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed0f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ed12:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed15:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ed1b:	01 d7                	add    edi,edx
c001ed1d:	89 f8                	mov    eax,edi
c001ed1f:	e9 44 fe ff ff       	jmp    c001eb68 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ed24 <cleanerTaskFunction(void*)>:
c001ed24:	53                   	push   ebx
c001ed25:	83 ec 08             	sub    esp,0x8
c001ed28:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001ed2d:	48                   	dec    eax
c001ed2e:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001ed33:	75 01                	jne    c001ed36 <cleanerTaskFunction(void*)+0x12>
c001ed35:	fb                   	sti    
c001ed36:	fa                   	cli    
c001ed37:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001ed3c:	80 3d ec 23 03 c0 00 	cmp    BYTE PTR ds:0xc00323ec,0x0
c001ed43:	8d 50 01             	lea    edx,[eax+0x1]
c001ed46:	89 15 08 24 03 c0    	mov    DWORD PTR ds:0xc0032408,edx
c001ed4c:	0f 84 b9 00 00 00    	je     c001ee0b <cleanerTaskFunction(void*)+0xe7>
c001ed52:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001ed57:	85 c0                	test   eax,eax
c001ed59:	75 01                	jne    c001ed5c <cleanerTaskFunction(void*)+0x38>
c001ed5b:	fb                   	sti    
c001ed5c:	c6 05 ec 23 03 c0 00 	mov    BYTE PTR ds:0xc00323ec,0x0
c001ed63:	fa                   	cli    
c001ed64:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001ed6a:	ff 05 04 24 03 c0    	inc    DWORD PTR ds:0xc0032404
c001ed70:	fa                   	cli    
c001ed71:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001ed77:	eb 3e                	jmp    c001edb7 <cleanerTaskFunction(void*)+0x93>
c001ed79:	83 ec 0c             	sub    esp,0xc
c001ed7c:	68 0c 24 03 c0       	push   0xc003240c
c001ed81:	e8 50 a5 00 00       	call   c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed86:	c7 04 24 0c 24 03 c0 	mov    DWORD PTR [esp],0xc003240c
c001ed8d:	89 c3                	mov    ebx,eax
c001ed8f:	e8 4a a5 00 00       	call   c00292de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed94:	c7 04 24 90 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc90
c001ed9b:	e8 d7 40 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001eda0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eda3:	e8 b3 fc ff ff       	call   c001ea5b <cleanupTerminatedTask(ThreadControlBlock*)>
c001eda8:	c7 04 24 a9 cc 02 c0 	mov    DWORD PTR [esp],0xc002cca9
c001edaf:	e8 c3 40 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001edb4:	83 c4 10             	add    esp,0x10
c001edb7:	83 ec 0c             	sub    esp,0xc
c001edba:	68 0c 24 03 c0       	push   0xc003240c
c001edbf:	e8 f6 a4 00 00       	call   c00292ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001edc4:	83 c4 10             	add    esp,0x10
c001edc7:	84 c0                	test   al,al
c001edc9:	74 ae                	je     c001ed79 <cleanerTaskFunction(void*)+0x55>
c001edcb:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001edd0:	48                   	dec    eax
c001edd1:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001edd6:	75 01                	jne    c001edd9 <cleanerTaskFunction(void*)+0xb5>
c001edd8:	fb                   	sti    
c001edd9:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001edde:	48                   	dec    eax
c001eddf:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c001ede4:	0f 85 3e ff ff ff    	jne    c001ed28 <cleanerTaskFunction(void*)+0x4>
c001edea:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c001edef:	85 c0                	test   eax,eax
c001edf1:	0f 84 31 ff ff ff    	je     c001ed28 <cleanerTaskFunction(void*)+0x4>
c001edf7:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c001ee01:	e8 e4 f6 ff ff       	call   c001e4ea <schedule()>
c001ee06:	e9 1d ff ff ff       	jmp    c001ed28 <cleanerTaskFunction(void*)+0x4>
c001ee0b:	83 ec 0c             	sub    esp,0xc
c001ee0e:	6a 02                	push   0x2
c001ee10:	e8 86 f8 ff ff       	call   c001e69b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ee15:	83 c4 10             	add    esp,0x10
c001ee18:	e9 3f ff ff ff       	jmp    c001ed5c <cleanerTaskFunction(void*)+0x38>

c001ee1d <terminateTask(int)>:
c001ee1d:	83 ec 14             	sub    esp,0x14
c001ee20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ee28:	83 c0 0c             	add    eax,0xc
c001ee2b:	50                   	push   eax
c001ee2c:	68 08 d0 02 c0       	push   0xc002d008
c001ee31:	e8 41 40 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ee36:	fa                   	cli    
c001ee37:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001ee3d:	ff 05 04 24 03 c0    	inc    DWORD PTR ds:0xc0032404
c001ee43:	fa                   	cli    
c001ee44:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001ee4a:	c7 04 24 bc cc 02 c0 	mov    DWORD PTR [esp],0xc002ccbc
c001ee51:	e8 21 40 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ee56:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ee5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee5f:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ee62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee67:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ee6a:	5a                   	pop    edx
c001ee6b:	59                   	pop    ecx
c001ee6c:	50                   	push   eax
c001ee6d:	68 0c 24 03 c0       	push   0xc003240c
c001ee72:	e8 15 a5 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee7c:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ee83:	c7 04 24 d6 cc 02 c0 	mov    DWORD PTR [esp],0xc002ccd6
c001ee8a:	e8 e8 3f ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ee8f:	83 c4 10             	add    esp,0x10
c001ee92:	a1 e8 23 03 c0       	mov    eax,ds:0xc00323e8
c001ee97:	85 c0                	test   eax,eax
c001ee99:	0f 84 8d 00 00 00    	je     c001ef2c <terminateTask(int)+0x10f>
c001ee9f:	83 ec 0c             	sub    esp,0xc
c001eea2:	68 f0 cc 02 c0       	push   0xc002ccf0
c001eea7:	e8 cb 3f ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001eeac:	58                   	pop    eax
c001eead:	c6 05 ec 23 03 c0 01 	mov    BYTE PTR ds:0xc00323ec,0x1
c001eeb4:	ff 35 e8 23 03 c0    	push   DWORD PTR ds:0xc00323e8
c001eeba:	e8 ef fa ff ff       	call   c001e9ae <unblockTask(ThreadControlBlock*)>
c001eebf:	c7 04 24 0a cd 02 c0 	mov    DWORD PTR [esp],0xc002cd0a
c001eec6:	e8 ac 3f ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001eecb:	83 c4 10             	add    esp,0x10
c001eece:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001eed3:	48                   	dec    eax
c001eed4:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001eed9:	75 01                	jne    c001eedc <terminateTask(int)+0xbf>
c001eedb:	fb                   	sti    
c001eedc:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001eee1:	48                   	dec    eax
c001eee2:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c001eee7:	75 09                	jne    c001eef2 <terminateTask(int)+0xd5>
c001eee9:	83 3d 00 24 03 c0 00 	cmp    DWORD PTR ds:0xc0032400,0x0
c001eef0:	75 4c                	jne    c001ef3e <terminateTask(int)+0x121>
c001eef2:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001eef7:	48                   	dec    eax
c001eef8:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001eefd:	75 01                	jne    c001ef00 <terminateTask(int)+0xe3>
c001eeff:	fb                   	sti    
c001ef00:	83 ec 0c             	sub    esp,0xc
c001ef03:	68 42 cd 02 c0       	push   0xc002cd42
c001ef08:	e8 6a 3f ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ef0d:	83 c4 10             	add    esp,0x10
c001ef10:	fa                   	cli    
c001ef11:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001ef17:	e8 ce f5 ff ff       	call   c001e4ea <schedule()>
c001ef1c:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001ef21:	48                   	dec    eax
c001ef22:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001ef27:	75 e7                	jne    c001ef10 <terminateTask(int)+0xf3>
c001ef29:	fb                   	sti    
c001ef2a:	eb e4                	jmp    c001ef10 <terminateTask(int)+0xf3>
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	68 24 cd 02 c0       	push   0xc002cd24
c001ef34:	e8 3e 3f ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001ef39:	83 c4 10             	add    esp,0x10
c001ef3c:	eb 90                	jmp    c001eece <terminateTask(int)+0xb1>
c001ef3e:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c001ef48:	e8 9d f5 ff ff       	call   c001e4ea <schedule()>
c001ef4d:	eb a3                	jmp    c001eef2 <terminateTask(int)+0xd5>

c001ef4f <Thr::terminateFromIRQ(int)>:
c001ef4f:	83 ec 18             	sub    esp,0x18
c001ef52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef56:	e8 c2 fe ff ff       	call   c001ee1d <terminateTask(int)>
c001ef5b:	90                   	nop

c001ef5c <Semaphore::release()>:
c001ef5c:	83 ec 0c             	sub    esp,0xc
c001ef5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef63:	fa                   	cli    
c001ef64:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001ef69:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001ef6f:	8d 48 01             	lea    ecx,[eax+0x1]
c001ef72:	89 0d 04 24 03 c0    	mov    DWORD PTR ds:0xc0032404,ecx
c001ef78:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ef7b:	85 c9                	test   ecx,ecx
c001ef7d:	74 3c                	je     c001efbb <Semaphore::release()+0x5f>
c001ef7f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ef82:	83 ec 0c             	sub    esp,0xc
c001ef85:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ef88:	51                   	push   ecx
c001ef89:	e8 20 fa ff ff       	call   c001e9ae <unblockTask(ThreadControlBlock*)>
c001ef8e:	a1 04 24 03 c0       	mov    eax,ds:0xc0032404
c001ef93:	83 c4 10             	add    esp,0x10
c001ef96:	48                   	dec    eax
c001ef97:	a3 04 24 03 c0       	mov    ds:0xc0032404,eax
c001ef9c:	85 c0                	test   eax,eax
c001ef9e:	75 09                	jne    c001efa9 <Semaphore::release()+0x4d>
c001efa0:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c001efa5:	85 c0                	test   eax,eax
c001efa7:	75 17                	jne    c001efc0 <Semaphore::release()+0x64>
c001efa9:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001efae:	48                   	dec    eax
c001efaf:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001efb4:	75 01                	jne    c001efb7 <Semaphore::release()+0x5b>
c001efb6:	fb                   	sti    
c001efb7:	83 c4 0c             	add    esp,0xc
c001efba:	c3                   	ret    
c001efbb:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001efbe:	eb d7                	jmp    c001ef97 <Semaphore::release()+0x3b>
c001efc0:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c001efca:	e8 1b f5 ff ff       	call   c001e4ea <schedule()>
c001efcf:	eb d8                	jmp    c001efa9 <Semaphore::release()+0x4d>

c001efd1 <__static_initialization_and_destruction_0(int, int)>:
c001efd1:	83 ec 0c             	sub    esp,0xc
c001efd4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001efd9:	0f 85 88 00 00 00    	jne    c001f067 <__static_initialization_and_destruction_0(int, int)+0x96>
c001efdf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001efe7:	75 7e                	jne    c001f067 <__static_initialization_and_destruction_0(int, int)+0x96>
c001efe9:	83 ec 0c             	sub    esp,0xc
c001efec:	68 24 24 03 c0       	push   0xc0032424
c001eff1:	e8 26 a6 00 00       	call   c002961c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eff6:	83 c4 10             	add    esp,0x10
c001eff9:	83 ec 04             	sub    esp,0x4
c001effc:	68 f0 dd 02 c0       	push   0xc002ddf0
c001f001:	68 24 24 03 c0       	push   0xc0032424
c001f006:	68 d0 95 02 c0       	push   0xc00295d0
c001f00b:	e8 01 3d ff ff       	call   c0012d11 <__cxa_atexit>
c001f010:	83 c4 10             	add    esp,0x10
c001f013:	83 ec 0c             	sub    esp,0xc
c001f016:	68 18 24 03 c0       	push   0xc0032418
c001f01b:	e8 fc a5 00 00       	call   c002961c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f020:	83 c4 10             	add    esp,0x10
c001f023:	83 ec 04             	sub    esp,0x4
c001f026:	68 f0 dd 02 c0       	push   0xc002ddf0
c001f02b:	68 18 24 03 c0       	push   0xc0032418
c001f030:	68 d0 95 02 c0       	push   0xc00295d0
c001f035:	e8 d7 3c ff ff       	call   c0012d11 <__cxa_atexit>
c001f03a:	83 c4 10             	add    esp,0x10
c001f03d:	83 ec 0c             	sub    esp,0xc
c001f040:	68 0c 24 03 c0       	push   0xc003240c
c001f045:	e8 d2 a5 00 00       	call   c002961c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f04a:	83 c4 10             	add    esp,0x10
c001f04d:	83 ec 04             	sub    esp,0x4
c001f050:	68 f0 dd 02 c0       	push   0xc002ddf0
c001f055:	68 0c 24 03 c0       	push   0xc003240c
c001f05a:	68 d0 95 02 c0       	push   0xc00295d0
c001f05f:	e8 ad 3c ff ff       	call   c0012d11 <__cxa_atexit>
c001f064:	83 c4 10             	add    esp,0x10
c001f067:	90                   	nop
c001f068:	83 c4 0c             	add    esp,0xc
c001f06b:	c3                   	ret    

c001f06c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f06c:	83 ec 0c             	sub    esp,0xc
c001f06f:	83 ec 08             	sub    esp,0x8
c001f072:	68 ff ff 00 00       	push   0xffff
c001f077:	6a 01                	push   0x1
c001f079:	e8 53 ff ff ff       	call   c001efd1 <__static_initialization_and_destruction_0(int, int)>
c001f07e:	83 c4 10             	add    esp,0x10
c001f081:	83 c4 0c             	add    esp,0xc
c001f084:	c3                   	ret    

c001f085 <Vm::inbv(unsigned short)>:
c001f085:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f089:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f08e:	75 06                	jne    c001f096 <Vm::inbv(unsigned short)+0x11>
c001f090:	a0 6c 24 03 c0       	mov    al,ds:0xc003246c
c001f095:	c3                   	ret    
c001f096:	ec                   	in     al,dx
c001f097:	c3                   	ret    

c001f098 <Vm::outbv(unsigned short, unsigned char)>:
c001f098:	53                   	push   ebx
c001f099:	83 ec 08             	sub    esp,0x8
c001f09c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f0a4:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f0a9:	75 38                	jne    c001f0e3 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f0ab:	0f b6 c3             	movzx  eax,bl
c001f0ae:	51                   	push   ecx
c001f0af:	51                   	push   ecx
c001f0b0:	50                   	push   eax
c001f0b1:	68 27 d0 02 c0       	push   0xc002d027
c001f0b6:	e8 bc 3d ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f0bb:	8b 15 6c 24 03 c0    	mov    edx,DWORD PTR ds:0xc003246c
c001f0c1:	83 c4 10             	add    esp,0x10
c001f0c4:	8d 42 01             	lea    eax,[edx+0x1]
c001f0c7:	88 9a 80 24 03 c0    	mov    BYTE PTR [edx-0x3ffcdb80],bl
c001f0cd:	a3 6c 24 03 c0       	mov    ds:0xc003246c,eax
c001f0d2:	83 f8 20             	cmp    eax,0x20
c001f0d5:	75 0f                	jne    c001f0e6 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f0d7:	c7 05 6c 24 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003246c,0x1f
c001f0e1:	eb 03                	jmp    c001f0e6 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f0e3:	88 d8                	mov    al,bl
c001f0e5:	ee                   	out    dx,al
c001f0e6:	83 c4 08             	add    esp,0x8
c001f0e9:	5b                   	pop    ebx
c001f0ea:	c3                   	ret    

c001f0eb <Vm::realToLinear(unsigned short, unsigned short)>:
c001f0eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0f5:	c1 e0 04             	shl    eax,0x4
c001f0f8:	01 d0                	add    eax,edx
c001f0fa:	c3                   	ret    

c001f0fb <Vm::getSegment(unsigned int)>:
c001f0fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ff:	c1 e8 10             	shr    eax,0x10
c001f102:	c3                   	ret    

c001f103 <Vm::getOffset(unsigned int)>:
c001f103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f107:	c3                   	ret    

c001f108 <Vm::mainloop2()>:
c001f108:	83 ec 18             	sub    esp,0x18
c001f10b:	fa                   	cli    
c001f10c:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001f112:	6a 02                	push   0x2
c001f114:	c6 05 65 24 03 c0 01 	mov    BYTE PTR ds:0xc0032465,0x1
c001f11b:	e8 7b f5 ff ff       	call   c001e69b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f120:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f125:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f129:	52                   	push   edx
c001f12a:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f12e:	52                   	push   edx
c001f12f:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f133:	52                   	push   edx
c001f134:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f138:	50                   	push   eax
c001f139:	e8 bc 11 fe ff       	call   c00002fa <goToVM86>
c001f13e:	83 c4 2c             	add    esp,0x2c
c001f141:	c3                   	ret    

c001f142 <Vm::mainVm8086Loop(void*)>:
c001f142:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001f147:	48                   	dec    eax
c001f148:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001f14d:	75 01                	jne    c001f150 <Vm::mainVm8086Loop(void*)+0xe>
c001f14f:	fb                   	sti    
c001f150:	eb b6                	jmp    c001f108 <Vm::mainloop2()>

c001f152 <Vm::mainloop3(unsigned long)>:
c001f152:	83 ec 18             	sub    esp,0x18
c001f155:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f159:	fa                   	cli    
c001f15a:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001f160:	6a 02                	push   0x2
c001f162:	c6 05 64 24 03 c0 01 	mov    BYTE PTR ds:0xc0032464,0x1
c001f169:	a3 60 24 03 c0       	mov    ds:0xc0032460,eax
c001f16e:	e8 28 f5 ff ff       	call   c001e69b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f173:	83 c4 1c             	add    esp,0x1c
c001f176:	eb 90                	jmp    c001f108 <Vm::mainloop2()>

c001f178 <Vm::initialise8086()>:
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	68 80 00 00 00       	push   0x80
c001f180:	6a 00                	push   0x0
c001f182:	68 42 f1 01 c0       	push   0xc001f142
c001f187:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c001f18d:	e8 14 f1 ff ff       	call   c001e2a6 <Process::createThread(void (*)(void*), void*, int)>
c001f192:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f199:	a3 68 24 03 c0       	mov    ds:0xc0032468,eax
c001f19e:	68 00 01 00 00       	push   0x100
c001f1a3:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c001f1a8:	6a 00                	push   0x0
c001f1aa:	6a 00                	push   0x0
c001f1ac:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f1b2:	e8 e7 33 ff ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f1b7:	83 c4 2c             	add    esp,0x2c
c001f1ba:	c3                   	ret    

c001f1bb <Vm::finish8086()>:
c001f1bb:	53                   	push   ebx
c001f1bc:	83 ec 08             	sub    esp,0x8
c001f1bf:	fa                   	cli    
c001f1c0:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001f1c6:	80 3d 64 24 03 c0 00 	cmp    BYTE PTR ds:0xc0032464,0x0
c001f1cd:	75 15                	jne    c001f1e4 <Vm::finish8086()+0x29>
c001f1cf:	e8 16 f3 ff ff       	call   c001e4ea <schedule()>
c001f1d4:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001f1d9:	48                   	dec    eax
c001f1da:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001f1df:	75 de                	jne    c001f1bf <Vm::finish8086()+0x4>
c001f1e1:	fb                   	sti    
c001f1e2:	eb db                	jmp    c001f1bf <Vm::finish8086()+0x4>
c001f1e4:	83 ec 0c             	sub    esp,0xc
c001f1e7:	8b 1d 60 24 03 c0    	mov    ebx,DWORD PTR ds:0xc0032460
c001f1ed:	ff 35 68 24 03 c0    	push   DWORD PTR ds:0xc0032468
c001f1f3:	c6 05 64 24 03 c0 00 	mov    BYTE PTR ds:0xc0032464,0x0
c001f1fa:	e8 af f7 ff ff       	call   c001e9ae <unblockTask(ThreadControlBlock*)>
c001f1ff:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001f204:	83 c4 10             	add    esp,0x10
c001f207:	8d 50 ff             	lea    edx,[eax-0x1]
c001f20a:	89 15 08 24 03 c0    	mov    DWORD PTR ds:0xc0032408,edx
c001f210:	85 d2                	test   edx,edx
c001f212:	75 01                	jne    c001f215 <Vm::finish8086()+0x5a>
c001f214:	fb                   	sti    
c001f215:	89 d8                	mov    eax,ebx
c001f217:	83 c4 08             	add    esp,0x8
c001f21a:	5b                   	pop    ebx
c001f21b:	c3                   	ret    

c001f21c <Vm::getOutput8086(unsigned char*)>:
c001f21c:	83 ec 10             	sub    esp,0x10
c001f21f:	ff 35 6c 24 03 c0    	push   DWORD PTR ds:0xc003246c
c001f225:	68 80 24 03 c0       	push   0xc0032480
c001f22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22e:	e8 7d 1b fe ff       	call   c0000db0 <realmemcpy>
c001f233:	a1 6c 24 03 c0       	mov    eax,ds:0xc003246c
c001f238:	c7 05 6c 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003246c,0x0
c001f242:	83 c4 1c             	add    esp,0x1c
c001f245:	c3                   	ret    

c001f246 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f246:	55                   	push   ebp
c001f247:	57                   	push   edi
c001f248:	56                   	push   esi
c001f249:	53                   	push   ebx
c001f24a:	83 ec 2c             	sub    esp,0x2c
c001f24d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f251:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f255:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f259:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f25d:	fa                   	cli    
c001f25e:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c001f264:	0f b6 35 65 24 03 c0 	movzx  esi,BYTE PTR ds:0xc0032465
c001f26b:	89 f0                	mov    eax,esi
c001f26d:	84 c0                	test   al,al
c001f26f:	75 1d                	jne    c001f28e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f271:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f275:	e8 70 f2 ff ff       	call   c001e4ea <schedule()>
c001f27a:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001f27f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f283:	48                   	dec    eax
c001f284:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001f289:	75 d2                	jne    c001f25d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f28b:	fb                   	sti    
c001f28c:	eb cf                	jmp    c001f25d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f28e:	a1 68 24 03 c0       	mov    eax,ds:0xc0032468
c001f293:	c7 05 6c 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003246c,0x0
c001f29d:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f2a1:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f2a5:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f2a9:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f2ad:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f2b1:	50                   	push   eax
c001f2b2:	6a 20                	push   0x20
c001f2b4:	6a 00                	push   0x0
c001f2b6:	68 80 24 03 c0       	push   0xc0032480
c001f2bb:	e8 ac 14 fe ff       	call   c000076c <memset>
c001f2c0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f2c7:	e8 f4 05 ff ff       	call   c000f8c0 <malloc>
c001f2cc:	83 c4 0c             	add    esp,0xc
c001f2cf:	89 c3                	mov    ebx,eax
c001f2d1:	ff 35 30 24 03 c0    	push   DWORD PTR ds:0xc0032430
c001f2d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f2db:	50                   	push   eax
c001f2dc:	e8 f5 40 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c001f2e1:	83 c4 10             	add    esp,0x10
c001f2e4:	85 db                	test   ebx,ebx
c001f2e6:	75 0a                	jne    c001f2f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f2e8:	83 ec 0c             	sub    esp,0xc
c001f2eb:	68 43 d0 02 c0       	push   0xc002d043
c001f2f0:	eb 3e                	jmp    c001f330 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2f2:	50                   	push   eax
c001f2f3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f2f7:	50                   	push   eax
c001f2f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f2fc:	50                   	push   eax
c001f2fd:	53                   	push   ebx
c001f2fe:	e8 e3 43 ff ff       	call   c00136e6 <File::stat(unsigned long long*, bool*)>
c001f303:	83 c4 10             	add    esp,0x10
c001f306:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f30b:	74 0a                	je     c001f317 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f30d:	83 ec 0c             	sub    esp,0xc
c001f310:	68 57 d0 02 c0       	push   0xc002d057
c001f315:	eb 19                	jmp    c001f330 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f317:	51                   	push   ecx
c001f318:	51                   	push   ecx
c001f319:	6a 01                	push   0x1
c001f31b:	53                   	push   ebx
c001f31c:	e8 19 41 ff ff       	call   c001343a <File::open(FileOpenMode)>
c001f321:	83 c4 10             	add    esp,0x10
c001f324:	85 c0                	test   eax,eax
c001f326:	74 24                	je     c001f34c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f328:	83 ec 0c             	sub    esp,0xc
c001f32b:	68 70 d0 02 c0       	push   0xc002d070
c001f330:	e8 30 b5 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001f335:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001f33a:	83 c4 10             	add    esp,0x10
c001f33d:	48                   	dec    eax
c001f33e:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001f343:	85 c0                	test   eax,eax
c001f345:	75 01                	jne    c001f348 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f347:	fb                   	sti    
c001f348:	31 f6                	xor    esi,esi
c001f34a:	eb 58                	jmp    c001f3a4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f34c:	0f b7 ed             	movzx  ebp,bp
c001f34f:	50                   	push   eax
c001f350:	0f b7 ff             	movzx  edi,di
c001f353:	50                   	push   eax
c001f354:	55                   	push   ebp
c001f355:	57                   	push   edi
c001f356:	e8 90 fd ff ff       	call   c001f0eb <Vm::realToLinear(unsigned short, unsigned short)>
c001f35b:	5a                   	pop    edx
c001f35c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f35e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f362:	51                   	push   ecx
c001f363:	50                   	push   eax
c001f364:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f368:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f36c:	53                   	push   ebx
c001f36d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f370:	83 c4 14             	add    esp,0x14
c001f373:	53                   	push   ebx
c001f374:	e8 1f 41 ff ff       	call   c0013498 <File::close()>
c001f379:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001f37e:	83 c4 10             	add    esp,0x10
c001f381:	48                   	dec    eax
c001f382:	c6 05 65 24 03 c0 00 	mov    BYTE PTR ds:0xc0032465,0x0
c001f389:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001f38e:	85 c0                	test   eax,eax
c001f390:	75 01                	jne    c001f393 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f392:	fb                   	sti    
c001f393:	83 ec 0c             	sub    esp,0xc
c001f396:	ff 35 68 24 03 c0    	push   DWORD PTR ds:0xc0032468
c001f39c:	e8 0d f6 ff ff       	call   c001e9ae <unblockTask(ThreadControlBlock*)>
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	83 c4 2c             	add    esp,0x2c
c001f3a7:	89 f0                	mov    eax,esi
c001f3a9:	5b                   	pop    ebx
c001f3aa:	5e                   	pop    esi
c001f3ab:	5f                   	pop    edi
c001f3ac:	5d                   	pop    ebp
c001f3ad:	c3                   	ret    

c001f3ae <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f3ae:	57                   	push   edi
c001f3af:	56                   	push   esi
c001f3b0:	53                   	push   ebx
c001f3b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f3b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f3bd:	83 e8 06             	sub    eax,0x6
c001f3c0:	0f b7 c0             	movzx  eax,ax
c001f3c3:	50                   	push   eax
c001f3c4:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f3c9:	50                   	push   eax
c001f3ca:	e8 1c fd ff ff       	call   c001f0eb <Vm::realToLinear(unsigned short, unsigned short)>
c001f3cf:	5a                   	pop    edx
c001f3d0:	5e                   	pop    esi
c001f3d1:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f3d4:	8d 56 fa             	lea    edx,[esi-0x6]
c001f3d7:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f3dd:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f3e0:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f3e3:	83 c2 02             	add    edx,0x2
c001f3e6:	66 89 10             	mov    WORD PTR [eax],dx
c001f3e9:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f3ec:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f3f0:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f3f3:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f3f7:	89 d6                	mov    esi,edx
c001f3f9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f3ff:	66 81 e6 ff fd       	and    si,0xfdff
c001f404:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f408:	74 07                	je     c001f411 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f40a:	89 d6                	mov    esi,edx
c001f40c:	66 81 ce 00 02       	or     si,0x200
c001f411:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f415:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f41a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f41e:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f426:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f429:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f431:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f434:	5b                   	pop    ebx
c001f435:	5e                   	pop    esi
c001f436:	5f                   	pop    edi
c001f437:	c3                   	ret    

c001f438 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f438:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f43d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f442:	c1 e0 04             	shl    eax,0x4
c001f445:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f448:	c3                   	ret    

c001f449 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f449:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f44e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f453:	c1 e0 04             	shl    eax,0x4
c001f456:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f45a:	c3                   	ret    

c001f45b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f45b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f460:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f465:	c1 e0 04             	shl    eax,0x4
c001f468:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f46b:	c3                   	ret    

c001f46c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f46c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f471:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f476:	c1 e0 04             	shl    eax,0x4
c001f479:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f47d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f480:	c3                   	ret    

c001f481 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f481:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f486:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f48b:	c1 e0 04             	shl    eax,0x4
c001f48e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f492:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f496:	c3                   	ret    

c001f497 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f497:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f49c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f4a1:	c1 e0 04             	shl    eax,0x4
c001f4a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4a8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f4ab:	c3                   	ret    

c001f4ac <Vm::faultHandler(regs*)>:
c001f4ac:	55                   	push   ebp
c001f4ad:	57                   	push   edi
c001f4ae:	56                   	push   esi
c001f4af:	53                   	push   ebx
c001f4b0:	83 ec 1c             	sub    esp,0x1c
c001f4b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f4b7:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f4ba:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f4bd:	0f b7 c1             	movzx  eax,cx
c001f4c0:	50                   	push   eax
c001f4c1:	0f b7 c3             	movzx  eax,bx
c001f4c4:	c1 e3 04             	shl    ebx,0x4
c001f4c7:	50                   	push   eax
c001f4c8:	e8 1e fc ff ff       	call   c001f0eb <Vm::realToLinear(unsigned short, unsigned short)>
c001f4cd:	5a                   	pop    edx
c001f4ce:	89 c5                	mov    ebp,eax
c001f4d0:	5e                   	pop    esi
c001f4d1:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f4d5:	50                   	push   eax
c001f4d6:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f4da:	50                   	push   eax
c001f4db:	e8 0b fc ff ff       	call   c001f0eb <Vm::realToLinear(unsigned short, unsigned short)>
c001f4e0:	01 cb                	add    ebx,ecx
c001f4e2:	89 c6                	mov    esi,eax
c001f4e4:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f4e8:	50                   	push   eax
c001f4e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4ed:	50                   	push   eax
c001f4ee:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4f2:	50                   	push   eax
c001f4f3:	55                   	push   ebp
c001f4f4:	53                   	push   ebx
c001f4f5:	b3 06                	mov    bl,0x6
c001f4f7:	68 89 d0 02 c0       	push   0xc002d089
c001f4fc:	e8 76 39 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f501:	83 c4 20             	add    esp,0x20
c001f504:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f509:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f50e:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f512:	3c 9d                	cmp    al,0x9d
c001f514:	0f 84 d7 02 00 00    	je     c001f7f1 <Vm::faultHandler(regs*)+0x345>
c001f51a:	0f 87 a3 00 00 00    	ja     c001f5c3 <Vm::faultHandler(regs*)+0x117>
c001f520:	3c 66                	cmp    al,0x66
c001f522:	0f 84 15 02 00 00    	je     c001f73d <Vm::faultHandler(regs*)+0x291>
c001f528:	77 5f                	ja     c001f589 <Vm::faultHandler(regs*)+0xdd>
c001f52a:	3c 36                	cmp    al,0x36
c001f52c:	0f 84 f1 01 00 00    	je     c001f723 <Vm::faultHandler(regs*)+0x277>
c001f532:	77 28                	ja     c001f55c <Vm::faultHandler(regs*)+0xb0>
c001f534:	3c 26                	cmp    al,0x26
c001f536:	0f 84 99 01 00 00    	je     c001f6d5 <Vm::faultHandler(regs*)+0x229>
c001f53c:	3c 2e                	cmp    al,0x2e
c001f53e:	0f 85 3b 07 00 00    	jne    c001fc7f <Vm::faultHandler(regs*)+0x7d3>
c001f544:	83 ec 0c             	sub    esp,0xc
c001f547:	31 db                	xor    ebx,ebx
c001f549:	68 9e d0 02 c0       	push   0xc002d09e
c001f54e:	e8 24 39 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f553:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f556:	83 c4 10             	add    esp,0x10
c001f559:	45                   	inc    ebp
c001f55a:	eb b2                	jmp    c001f50e <Vm::faultHandler(regs*)+0x62>
c001f55c:	3c 64                	cmp    al,0x64
c001f55e:	0f 84 8b 01 00 00    	je     c001f6ef <Vm::faultHandler(regs*)+0x243>
c001f564:	0f 87 9f 01 00 00    	ja     c001f709 <Vm::faultHandler(regs*)+0x25d>
c001f56a:	3c 3e                	cmp    al,0x3e
c001f56c:	0f 85 0d 07 00 00    	jne    c001fc7f <Vm::faultHandler(regs*)+0x7d3>
c001f572:	83 ec 0c             	sub    esp,0xc
c001f575:	b3 01                	mov    bl,0x1
c001f577:	68 a2 d0 02 c0       	push   0xc002d0a2
c001f57c:	e8 f6 38 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f581:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f584:	83 c4 10             	add    esp,0x10
c001f587:	eb d0                	jmp    c001f559 <Vm::faultHandler(regs*)+0xad>
c001f589:	3c 6d                	cmp    al,0x6d
c001f58b:	0f 84 af 03 00 00    	je     c001f940 <Vm::faultHandler(regs*)+0x494>
c001f591:	77 15                	ja     c001f5a8 <Vm::faultHandler(regs*)+0xfc>
c001f593:	3c 67                	cmp    al,0x67
c001f595:	0f 84 bf 01 00 00    	je     c001f75a <Vm::faultHandler(regs*)+0x2ae>
c001f59b:	3c 6c                	cmp    al,0x6c
c001f59d:	0f 84 3f 03 00 00    	je     c001f8e2 <Vm::faultHandler(regs*)+0x436>
c001f5a3:	e9 d7 06 00 00       	jmp    c001fc7f <Vm::faultHandler(regs*)+0x7d3>
c001f5a8:	3c 6f                	cmp    al,0x6f
c001f5aa:	0f 84 a4 04 00 00    	je     c001fa54 <Vm::faultHandler(regs*)+0x5a8>
c001f5b0:	0f 82 11 04 00 00    	jb     c001f9c7 <Vm::faultHandler(regs*)+0x51b>
c001f5b6:	3c 9c                	cmp    al,0x9c
c001f5b8:	0f 84 ba 01 00 00    	je     c001f778 <Vm::faultHandler(regs*)+0x2cc>
c001f5be:	e9 bc 06 00 00       	jmp    c001fc7f <Vm::faultHandler(regs*)+0x7d3>
c001f5c3:	3c ec                	cmp    al,0xec
c001f5c5:	0f 84 24 06 00 00    	je     c001fbef <Vm::faultHandler(regs*)+0x743>
c001f5cb:	0f 87 93 00 00 00    	ja     c001f664 <Vm::faultHandler(regs*)+0x1b8>
c001f5d1:	3c e4                	cmp    al,0xe4
c001f5d3:	0f 84 5c 05 00 00    	je     c001fb35 <Vm::faultHandler(regs*)+0x689>
c001f5d9:	77 6a                	ja     c001f645 <Vm::faultHandler(regs*)+0x199>
c001f5db:	3c cd                	cmp    al,0xcd
c001f5dd:	0f 84 7e 02 00 00    	je     c001f861 <Vm::faultHandler(regs*)+0x3b5>
c001f5e3:	3c cf                	cmp    al,0xcf
c001f5e5:	0f 85 94 06 00 00    	jne    c001fc7f <Vm::faultHandler(regs*)+0x7d3>
c001f5eb:	83 ec 0c             	sub    esp,0xc
c001f5ee:	68 e6 d0 02 c0       	push   0xc002d0e6
c001f5f3:	e8 7f 38 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f5f8:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f5fb:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f5fe:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f602:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f605:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f609:	0d 00 02 02 00       	or     eax,0x20200
c001f60e:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f611:	56                   	push   esi
c001f612:	53                   	push   ebx
c001f613:	52                   	push   edx
c001f614:	68 ec d0 02 c0       	push   0xc002d0ec
c001f619:	e8 59 38 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f61e:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f622:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f628:	66 c1 e8 09          	shr    ax,0x9
c001f62c:	83 e0 01             	and    eax,0x1
c001f62f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f632:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f635:	83 c0 06             	add    eax,0x6
c001f638:	25 ff ff 00 00       	and    eax,0xffff
c001f63d:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f640:	e9 95 02 00 00       	jmp    c001f8da <Vm::faultHandler(regs*)+0x42e>
c001f645:	3c e6                	cmp    al,0xe6
c001f647:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f64b:	0f 84 4e 05 00 00    	je     c001fb9f <Vm::faultHandler(regs*)+0x6f3>
c001f651:	0f 82 0a 05 00 00    	jb     c001fb61 <Vm::faultHandler(regs*)+0x6b5>
c001f657:	3c e7                	cmp    al,0xe7
c001f659:	0f 84 69 05 00 00    	je     c001fbc8 <Vm::faultHandler(regs*)+0x71c>
c001f65f:	e9 1b 06 00 00       	jmp    c001fc7f <Vm::faultHandler(regs*)+0x7d3>
c001f664:	3c ef                	cmp    al,0xef
c001f666:	0f 84 e6 05 00 00    	je     c001fc52 <Vm::faultHandler(regs*)+0x7a6>
c001f66c:	77 37                	ja     c001f6a5 <Vm::faultHandler(regs*)+0x1f9>
c001f66e:	3c ed                	cmp    al,0xed
c001f670:	0f 84 a3 05 00 00    	je     c001fc19 <Vm::faultHandler(regs*)+0x76d>
c001f676:	3c ee                	cmp    al,0xee
c001f678:	0f 85 01 06 00 00    	jne    c001fc7f <Vm::faultHandler(regs*)+0x7d3>
c001f67e:	52                   	push   edx
c001f67f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f682:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f685:	68 87 d1 02 c0       	push   0xc002d187
c001f68a:	e8 e8 37 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f68f:	59                   	pop    ecx
c001f690:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f694:	5b                   	pop    ebx
c001f695:	50                   	push   eax
c001f696:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f69a:	50                   	push   eax
c001f69b:	e8 f8 f9 ff ff       	call   c001f098 <Vm::outbv(unsigned short, unsigned char)>
c001f6a0:	e9 a5 05 00 00       	jmp    c001fc4a <Vm::faultHandler(regs*)+0x79e>
c001f6a5:	3c fa                	cmp    al,0xfa
c001f6a7:	0f 84 f7 01 00 00    	je     c001f8a4 <Vm::faultHandler(regs*)+0x3f8>
c001f6ad:	3c fb                	cmp    al,0xfb
c001f6af:	0f 84 0a 02 00 00    	je     c001f8bf <Vm::faultHandler(regs*)+0x413>
c001f6b5:	3c f3                	cmp    al,0xf3
c001f6b7:	0f 85 c2 05 00 00    	jne    c001fc7f <Vm::faultHandler(regs*)+0x7d3>
c001f6bd:	83 ec 0c             	sub    esp,0xc
c001f6c0:	68 bf d0 02 c0       	push   0xc002d0bf
c001f6c5:	e8 ad 37 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f6ca:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6cd:	83 c4 10             	add    esp,0x10
c001f6d0:	e9 84 fe ff ff       	jmp    c001f559 <Vm::faultHandler(regs*)+0xad>
c001f6d5:	83 ec 0c             	sub    esp,0xc
c001f6d8:	b3 02                	mov    bl,0x2
c001f6da:	68 9a d0 02 c0       	push   0xc002d09a
c001f6df:	e8 93 37 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f6e4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6e7:	83 c4 10             	add    esp,0x10
c001f6ea:	e9 6a fe ff ff       	jmp    c001f559 <Vm::faultHandler(regs*)+0xad>
c001f6ef:	83 ec 0c             	sub    esp,0xc
c001f6f2:	b3 03                	mov    bl,0x3
c001f6f4:	68 a6 d0 02 c0       	push   0xc002d0a6
c001f6f9:	e8 79 37 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f6fe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f701:	83 c4 10             	add    esp,0x10
c001f704:	e9 50 fe ff ff       	jmp    c001f559 <Vm::faultHandler(regs*)+0xad>
c001f709:	83 ec 0c             	sub    esp,0xc
c001f70c:	b3 04                	mov    bl,0x4
c001f70e:	68 aa d0 02 c0       	push   0xc002d0aa
c001f713:	e8 5f 37 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f718:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f71b:	83 c4 10             	add    esp,0x10
c001f71e:	e9 36 fe ff ff       	jmp    c001f559 <Vm::faultHandler(regs*)+0xad>
c001f723:	83 ec 0c             	sub    esp,0xc
c001f726:	b3 05                	mov    bl,0x5
c001f728:	68 ae d0 02 c0       	push   0xc002d0ae
c001f72d:	e8 45 37 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f732:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f735:	83 c4 10             	add    esp,0x10
c001f738:	e9 1c fe ff ff       	jmp    c001f559 <Vm::faultHandler(regs*)+0xad>
c001f73d:	83 ec 0c             	sub    esp,0xc
c001f740:	68 b2 d0 02 c0       	push   0xc002d0b2
c001f745:	e8 2d 37 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f74a:	83 c4 10             	add    esp,0x10
c001f74d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f750:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f755:	e9 ff fd ff ff       	jmp    c001f559 <Vm::faultHandler(regs*)+0xad>
c001f75a:	50                   	push   eax
c001f75b:	50                   	push   eax
c001f75c:	6a 01                	push   0x1
c001f75e:	68 b7 d0 02 c0       	push   0xc002d0b7
c001f763:	e8 0f 37 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f768:	83 c4 10             	add    esp,0x10
c001f76b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f76e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f773:	e9 e1 fd ff ff       	jmp    c001f559 <Vm::faultHandler(regs*)+0xad>
c001f778:	83 ec 0c             	sub    esp,0xc
c001f77b:	68 c5 d0 02 c0       	push   0xc002d0c5
c001f780:	e8 f2 36 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f785:	83 c4 10             	add    esp,0x10
c001f788:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f78b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f790:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f793:	74 2f                	je     c001f7c4 <Vm::faultHandler(regs*)+0x318>
c001f795:	83 ea 04             	sub    edx,0x4
c001f798:	25 ff 0d 00 00       	and    eax,0xdff
c001f79d:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f7a3:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f7a6:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f7a9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7af:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f7b3:	0f 84 bf 04 00 00    	je     c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001f7b9:	80 cc 02             	or     ah,0x2
c001f7bc:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f7bf:	e9 b4 04 00 00       	jmp    c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001f7c4:	83 ea 02             	sub    edx,0x2
c001f7c7:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f7cd:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f7d0:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f7d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7da:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f7de:	74 05                	je     c001f7e5 <Vm::faultHandler(regs*)+0x339>
c001f7e0:	80 cc 02             	or     ah,0x2
c001f7e3:	eb 03                	jmp    c001f7e8 <Vm::faultHandler(regs*)+0x33c>
c001f7e5:	80 e4 fd             	and    ah,0xfd
c001f7e8:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f7ec:	e9 87 04 00 00       	jmp    c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001f7f1:	83 ec 0c             	sub    esp,0xc
c001f7f4:	68 cc d0 02 c0       	push   0xc002d0cc
c001f7f9:	e8 79 36 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f7fe:	83 c4 10             	add    esp,0x10
c001f801:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f806:	74 28                	je     c001f830 <Vm::faultHandler(regs*)+0x384>
c001f808:	8b 06                	mov    eax,DWORD PTR [esi]
c001f80a:	25 ff 0d 00 00       	and    eax,0xdff
c001f80f:	0d 00 02 02 00       	or     eax,0x20200
c001f814:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f817:	8b 06                	mov    eax,DWORD PTR [esi]
c001f819:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f81f:	c1 e8 09             	shr    eax,0x9
c001f822:	83 e0 01             	and    eax,0x1
c001f825:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f828:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f82b:	83 c0 04             	add    eax,0x4
c001f82e:	eb 24                	jmp    c001f854 <Vm::faultHandler(regs*)+0x3a8>
c001f830:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f833:	0d 00 02 02 00       	or     eax,0x20200
c001f838:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f83b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f83e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f844:	66 c1 e8 09          	shr    ax,0x9
c001f848:	83 e0 01             	and    eax,0x1
c001f84b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f84e:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f851:	83 c0 02             	add    eax,0x2
c001f854:	25 ff ff 00 00       	and    eax,0xffff
c001f859:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f85c:	e9 17 04 00 00       	jmp    c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001f861:	53                   	push   ebx
c001f862:	53                   	push   ebx
c001f863:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f867:	50                   	push   eax
c001f868:	68 d2 d0 02 c0       	push   0xc002d0d2
c001f86d:	e8 05 36 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f872:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f876:	83 c4 10             	add    esp,0x10
c001f879:	3c ee                	cmp    al,0xee
c001f87b:	75 10                	jne    c001f88d <Vm::faultHandler(regs*)+0x3e1>
c001f87d:	83 ec 0c             	sub    esp,0xc
c001f880:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f883:	e8 ca f8 ff ff       	call   c001f152 <Vm::mainloop3(unsigned long)>
c001f888:	e9 c0 03 00 00       	jmp    c001fc4d <Vm::faultHandler(regs*)+0x7a1>
c001f88d:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f891:	83 ec 0c             	sub    esp,0xc
c001f894:	53                   	push   ebx
c001f895:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f899:	53                   	push   ebx
c001f89a:	55                   	push   ebp
c001f89b:	50                   	push   eax
c001f89c:	57                   	push   edi
c001f89d:	e8 0c fb ff ff       	call   c001f3ae <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f8a2:	eb 36                	jmp    c001f8da <Vm::faultHandler(regs*)+0x42e>
c001f8a4:	83 ec 0c             	sub    esp,0xc
c001f8a7:	68 dc d0 02 c0       	push   0xc002d0dc
c001f8ac:	e8 c6 35 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f8b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f8b6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f8ba:	e9 8b 03 00 00       	jmp    c001fc4a <Vm::faultHandler(regs*)+0x79e>
c001f8bf:	83 ec 0c             	sub    esp,0xc
c001f8c2:	68 e1 d0 02 c0       	push   0xc002d0e1
c001f8c7:	e8 ab 35 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f8cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f8d1:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f8d5:	e9 70 03 00 00       	jmp    c001fc4a <Vm::faultHandler(regs*)+0x79e>
c001f8da:	83 c4 20             	add    esp,0x20
c001f8dd:	e9 99 03 00 00       	jmp    c001fc7b <Vm::faultHandler(regs*)+0x7cf>
c001f8e2:	83 ec 0c             	sub    esp,0xc
c001f8e5:	68 1f d1 02 c0       	push   0xc002d11f
c001f8ea:	e8 88 35 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f8ef:	83 c4 10             	add    esp,0x10
c001f8f2:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f8f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f8fa:	74 0d                	je     c001f909 <Vm::faultHandler(regs*)+0x45d>
c001f8fc:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f903:	0f 87 9e 01 00 00    	ja     c001faa7 <Vm::faultHandler(regs*)+0x5fb>
c001f909:	83 ec 0c             	sub    esp,0xc
c001f90c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f910:	0f b7 db             	movzx  ebx,bx
c001f913:	50                   	push   eax
c001f914:	e8 6c f7 ff ff       	call   c001f085 <Vm::inbv(unsigned short)>
c001f919:	83 c4 0c             	add    esp,0xc
c001f91c:	0f b6 c0             	movzx  eax,al
c001f91f:	50                   	push   eax
c001f920:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f924:	50                   	push   eax
c001f925:	53                   	push   ebx
c001f926:	e8 41 fb ff ff       	call   c001f46c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f92b:	83 c4 10             	add    esp,0x10
c001f92e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f931:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f935:	74 03                	je     c001f93a <Vm::faultHandler(regs*)+0x48e>
c001f937:	48                   	dec    eax
c001f938:	eb 01                	jmp    c001f93b <Vm::faultHandler(regs*)+0x48f>
c001f93a:	40                   	inc    eax
c001f93b:	0f b7 c0             	movzx  eax,ax
c001f93e:	eb 7f                	jmp    c001f9bf <Vm::faultHandler(regs*)+0x513>
c001f940:	83 ec 0c             	sub    esp,0xc
c001f943:	68 51 d1 02 c0       	push   0xc002d151
c001f948:	e8 2a 35 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f94d:	83 c4 10             	add    esp,0x10
c001f950:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f953:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f958:	74 0d                	je     c001f967 <Vm::faultHandler(regs*)+0x4bb>
c001f95a:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f961:	0f 87 40 01 00 00    	ja     c001faa7 <Vm::faultHandler(regs*)+0x5fb>
c001f967:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f96a:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f96e:	0f b7 db             	movzx  ebx,bx
c001f971:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f976:	74 20                	je     c001f998 <Vm::faultHandler(regs*)+0x4ec>
c001f978:	ed                   	in     eax,dx
c001f979:	51                   	push   ecx
c001f97a:	50                   	push   eax
c001f97b:	56                   	push   esi
c001f97c:	53                   	push   ebx
c001f97d:	e8 15 fb ff ff       	call   c001f497 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f982:	83 c4 10             	add    esp,0x10
c001f985:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f988:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f98c:	74 05                	je     c001f993 <Vm::faultHandler(regs*)+0x4e7>
c001f98e:	83 e8 04             	sub    eax,0x4
c001f991:	eb 27                	jmp    c001f9ba <Vm::faultHandler(regs*)+0x50e>
c001f993:	83 c0 04             	add    eax,0x4
c001f996:	eb 22                	jmp    c001f9ba <Vm::faultHandler(regs*)+0x50e>
c001f998:	66 ed                	in     ax,dx
c001f99a:	0f b7 c0             	movzx  eax,ax
c001f99d:	52                   	push   edx
c001f99e:	50                   	push   eax
c001f99f:	56                   	push   esi
c001f9a0:	53                   	push   ebx
c001f9a1:	e8 db fa ff ff       	call   c001f481 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f9a6:	83 c4 10             	add    esp,0x10
c001f9a9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f9ac:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9b0:	74 05                	je     c001f9b7 <Vm::faultHandler(regs*)+0x50b>
c001f9b2:	83 e8 02             	sub    eax,0x2
c001f9b5:	eb 03                	jmp    c001f9ba <Vm::faultHandler(regs*)+0x50e>
c001f9b7:	83 c0 02             	add    eax,0x2
c001f9ba:	25 ff ff 00 00       	and    eax,0xffff
c001f9bf:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f9c2:	e9 b1 02 00 00       	jmp    c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001f9c7:	83 ec 0c             	sub    esp,0xc
c001f9ca:	4b                   	dec    ebx
c001f9cb:	68 57 d1 02 c0       	push   0xc002d157
c001f9d0:	e8 a2 34 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001f9d5:	83 c4 10             	add    esp,0x10
c001f9d8:	80 fb 05             	cmp    bl,0x5
c001f9db:	77 0a                	ja     c001f9e7 <Vm::faultHandler(regs*)+0x53b>
c001f9dd:	0f b6 db             	movzx  ebx,bl
c001f9e0:	ff 24 9d c8 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2e38]
c001f9e7:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f9eb:	eb 1b                	jmp    c001fa08 <Vm::faultHandler(regs*)+0x55c>
c001f9ed:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f9f1:	eb 15                	jmp    c001fa08 <Vm::faultHandler(regs*)+0x55c>
c001f9f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f9f7:	eb 0f                	jmp    c001fa08 <Vm::faultHandler(regs*)+0x55c>
c001f9f9:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f9fd:	eb 09                	jmp    c001fa08 <Vm::faultHandler(regs*)+0x55c>
c001f9ff:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa02:	eb 04                	jmp    c001fa08 <Vm::faultHandler(regs*)+0x55c>
c001fa04:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa08:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa0d:	74 0d                	je     c001fa1c <Vm::faultHandler(regs*)+0x570>
c001fa0f:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fa16:	0f 87 8b 00 00 00    	ja     c001faa7 <Vm::faultHandler(regs*)+0x5fb>
c001fa1c:	53                   	push   ebx
c001fa1d:	53                   	push   ebx
c001fa1e:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fa22:	52                   	push   edx
c001fa23:	50                   	push   eax
c001fa24:	e8 0f fa ff ff       	call   c001f438 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fa29:	5e                   	pop    esi
c001fa2a:	0f b6 c0             	movzx  eax,al
c001fa2d:	5d                   	pop    ebp
c001fa2e:	50                   	push   eax
c001fa2f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fa33:	50                   	push   eax
c001fa34:	e8 5f f6 ff ff       	call   c001f098 <Vm::outbv(unsigned short, unsigned char)>
c001fa39:	83 c4 10             	add    esp,0x10
c001fa3c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fa3f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fa43:	74 03                	je     c001fa48 <Vm::faultHandler(regs*)+0x59c>
c001fa45:	48                   	dec    eax
c001fa46:	eb 01                	jmp    c001fa49 <Vm::faultHandler(regs*)+0x59d>
c001fa48:	40                   	inc    eax
c001fa49:	0f b7 c0             	movzx  eax,ax
c001fa4c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fa4f:	e9 24 02 00 00       	jmp    c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	4b                   	dec    ebx
c001fa58:	68 57 d1 02 c0       	push   0xc002d157
c001fa5d:	e8 15 34 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fa62:	83 c4 10             	add    esp,0x10
c001fa65:	80 fb 05             	cmp    bl,0x5
c001fa68:	77 0a                	ja     c001fa74 <Vm::faultHandler(regs*)+0x5c8>
c001fa6a:	0f b6 db             	movzx  ebx,bl
c001fa6d:	ff 24 9d e0 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2e20]
c001fa74:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa78:	eb 1b                	jmp    c001fa95 <Vm::faultHandler(regs*)+0x5e9>
c001fa7a:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa7e:	eb 15                	jmp    c001fa95 <Vm::faultHandler(regs*)+0x5e9>
c001fa80:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fa84:	eb 0f                	jmp    c001fa95 <Vm::faultHandler(regs*)+0x5e9>
c001fa86:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fa8a:	eb 09                	jmp    c001fa95 <Vm::faultHandler(regs*)+0x5e9>
c001fa8c:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa8f:	eb 04                	jmp    c001fa95 <Vm::faultHandler(regs*)+0x5e9>
c001fa91:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa95:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fa98:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa9d:	74 39                	je     c001fad8 <Vm::faultHandler(regs*)+0x62c>
c001fa9f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001faa5:	76 31                	jbe    c001fad8 <Vm::faultHandler(regs*)+0x62c>
c001faa7:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001faab:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001faaf:	51                   	push   ecx
c001fab0:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fab4:	51                   	push   ecx
c001fab5:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fab9:	51                   	push   ecx
c001faba:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fabe:	51                   	push   ecx
c001fabf:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fac3:	52                   	push   edx
c001fac4:	50                   	push   eax
c001fac5:	50                   	push   eax
c001fac6:	68 24 d1 02 c0       	push   0xc002d124
c001facb:	e8 a7 33 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fad0:	83 c4 20             	add    esp,0x20
c001fad3:	e9 fb 01 00 00       	jmp    c001fcd3 <Vm::faultHandler(regs*)+0x827>
c001fad8:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fadb:	0f b7 d3             	movzx  edx,bx
c001fade:	81 e6 00 04 00 00    	and    esi,0x400
c001fae4:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fae7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001faec:	74 1d                	je     c001fb0b <Vm::faultHandler(regs*)+0x65f>
c001faee:	51                   	push   ecx
c001faef:	51                   	push   ecx
c001faf0:	52                   	push   edx
c001faf1:	50                   	push   eax
c001faf2:	e8 64 f9 ff ff       	call   c001f45b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001faf7:	83 c4 10             	add    esp,0x10
c001fafa:	89 ea                	mov    edx,ebp
c001fafc:	ef                   	out    dx,eax
c001fafd:	85 f6                	test   esi,esi
c001faff:	74 05                	je     c001fb06 <Vm::faultHandler(regs*)+0x65a>
c001fb01:	83 eb 04             	sub    ebx,0x4
c001fb04:	eb 21                	jmp    c001fb27 <Vm::faultHandler(regs*)+0x67b>
c001fb06:	83 c3 04             	add    ebx,0x4
c001fb09:	eb 1c                	jmp    c001fb27 <Vm::faultHandler(regs*)+0x67b>
c001fb0b:	51                   	push   ecx
c001fb0c:	51                   	push   ecx
c001fb0d:	52                   	push   edx
c001fb0e:	50                   	push   eax
c001fb0f:	e8 35 f9 ff ff       	call   c001f449 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fb14:	83 c4 10             	add    esp,0x10
c001fb17:	89 ea                	mov    edx,ebp
c001fb19:	66 ef                	out    dx,ax
c001fb1b:	85 f6                	test   esi,esi
c001fb1d:	74 05                	je     c001fb24 <Vm::faultHandler(regs*)+0x678>
c001fb1f:	83 eb 02             	sub    ebx,0x2
c001fb22:	eb 03                	jmp    c001fb27 <Vm::faultHandler(regs*)+0x67b>
c001fb24:	83 c3 02             	add    ebx,0x2
c001fb27:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fb2d:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fb30:	e9 43 01 00 00       	jmp    c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001fb35:	53                   	push   ebx
c001fb36:	53                   	push   ebx
c001fb37:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb3b:	50                   	push   eax
c001fb3c:	68 5d d1 02 c0       	push   0xc002d15d
c001fb41:	e8 31 33 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fb46:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fb4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb51:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb54:	e8 2c f5 ff ff       	call   c001f085 <Vm::inbv(unsigned short)>
c001fb59:	0f b6 c0             	movzx  eax,al
c001fb5c:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fb5f:	eb 5e                	jmp    c001fbbf <Vm::faultHandler(regs*)+0x713>
c001fb61:	51                   	push   ecx
c001fb62:	51                   	push   ecx
c001fb63:	53                   	push   ebx
c001fb64:	68 63 d1 02 c0       	push   0xc002d163
c001fb69:	e8 09 33 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fb6e:	83 c4 10             	add    esp,0x10
c001fb71:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb76:	74 07                	je     c001fb7f <Vm::faultHandler(regs*)+0x6d3>
c001fb78:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb7c:	ed                   	in     eax,dx
c001fb7d:	eb 14                	jmp    c001fb93 <Vm::faultHandler(regs*)+0x6e7>
c001fb7f:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fb82:	66 31 db             	xor    bx,bx
c001fb85:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fb88:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb8c:	66 ed                	in     ax,dx
c001fb8e:	0f b7 c0             	movzx  eax,ax
c001fb91:	09 d8                	or     eax,ebx
c001fb93:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fb96:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb9a:	e9 dc 00 00 00       	jmp    c001fc7b <Vm::faultHandler(regs*)+0x7cf>
c001fb9f:	50                   	push   eax
c001fba0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fba3:	53                   	push   ebx
c001fba4:	68 69 d1 02 c0       	push   0xc002d169
c001fba9:	e8 c9 32 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fbae:	58                   	pop    eax
c001fbaf:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fbb3:	5a                   	pop    edx
c001fbb4:	50                   	push   eax
c001fbb5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbb9:	50                   	push   eax
c001fbba:	e8 d9 f4 ff ff       	call   c001f098 <Vm::outbv(unsigned short, unsigned char)>
c001fbbf:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fbc3:	e9 85 00 00 00       	jmp    c001fc4d <Vm::faultHandler(regs*)+0x7a1>
c001fbc8:	50                   	push   eax
c001fbc9:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fbcc:	53                   	push   ebx
c001fbcd:	68 72 d1 02 c0       	push   0xc002d172
c001fbd2:	e8 a0 32 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fbd7:	83 c4 10             	add    esp,0x10
c001fbda:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fbde:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbe3:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fbe6:	74 03                	je     c001fbeb <Vm::faultHandler(regs*)+0x73f>
c001fbe8:	ef                   	out    dx,eax
c001fbe9:	eb ab                	jmp    c001fb96 <Vm::faultHandler(regs*)+0x6ea>
c001fbeb:	66 ef                	out    dx,ax
c001fbed:	eb a7                	jmp    c001fb96 <Vm::faultHandler(regs*)+0x6ea>
c001fbef:	55                   	push   ebp
c001fbf0:	55                   	push   ebp
c001fbf1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbf4:	68 7b d1 02 c0       	push   0xc002d17b
c001fbf9:	e8 79 32 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fbfe:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fc05:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fc09:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc0c:	e8 74 f4 ff ff       	call   c001f085 <Vm::inbv(unsigned short)>
c001fc11:	0f b6 c0             	movzx  eax,al
c001fc14:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fc17:	eb 31                	jmp    c001fc4a <Vm::faultHandler(regs*)+0x79e>
c001fc19:	56                   	push   esi
c001fc1a:	56                   	push   esi
c001fc1b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fc1e:	68 81 d1 02 c0       	push   0xc002d181
c001fc23:	e8 4f 32 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fc28:	83 c4 10             	add    esp,0x10
c001fc2b:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fc2e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc33:	74 03                	je     c001fc38 <Vm::faultHandler(regs*)+0x78c>
c001fc35:	ed                   	in     eax,dx
c001fc36:	eb 0d                	jmp    c001fc45 <Vm::faultHandler(regs*)+0x799>
c001fc38:	66 ed                	in     ax,dx
c001fc3a:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fc3d:	0f b7 c0             	movzx  eax,ax
c001fc40:	66 31 d2             	xor    dx,dx
c001fc43:	09 d0                	or     eax,edx
c001fc45:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fc48:	eb 2e                	jmp    c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001fc4a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc4d:	83 c4 10             	add    esp,0x10
c001fc50:	eb 29                	jmp    c001fc7b <Vm::faultHandler(regs*)+0x7cf>
c001fc52:	50                   	push   eax
c001fc53:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fc56:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fc59:	68 90 d1 02 c0       	push   0xc002d190
c001fc5e:	e8 14 32 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fc63:	83 c4 10             	add    esp,0x10
c001fc66:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fc69:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc6e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc71:	74 03                	je     c001fc76 <Vm::faultHandler(regs*)+0x7ca>
c001fc73:	ef                   	out    dx,eax
c001fc74:	eb 02                	jmp    c001fc78 <Vm::faultHandler(regs*)+0x7cc>
c001fc76:	66 ef                	out    dx,ax
c001fc78:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc7b:	b0 01                	mov    al,0x1
c001fc7d:	eb 56                	jmp    c001fcd5 <Vm::faultHandler(regs*)+0x829>
c001fc7f:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc83:	51                   	push   ecx
c001fc84:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc88:	51                   	push   ecx
c001fc89:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc8d:	51                   	push   ecx
c001fc8e:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc92:	51                   	push   ecx
c001fc93:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc97:	52                   	push   edx
c001fc98:	50                   	push   eax
c001fc99:	50                   	push   eax
c001fc9a:	68 99 d1 02 c0       	push   0xc002d199
c001fc9f:	e8 d3 31 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c001fca4:	83 c4 20             	add    esp,0x20
c001fca7:	83 ec 0c             	sub    esp,0xc
c001fcaa:	6a 60                	push   0x60
c001fcac:	e8 d4 f3 ff ff       	call   c001f085 <Vm::inbv(unsigned short)>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	3c 1c                	cmp    al,0x1c
c001fcb6:	74 04                	je     c001fcbc <Vm::faultHandler(regs*)+0x810>
c001fcb8:	3c 5a                	cmp    al,0x5a
c001fcba:	75 eb                	jne    c001fca7 <Vm::faultHandler(regs*)+0x7fb>
c001fcbc:	3c 1c                	cmp    al,0x1c
c001fcbe:	74 04                	je     c001fcc4 <Vm::faultHandler(regs*)+0x818>
c001fcc0:	3c 5a                	cmp    al,0x5a
c001fcc2:	75 0f                	jne    c001fcd3 <Vm::faultHandler(regs*)+0x827>
c001fcc4:	83 ec 0c             	sub    esp,0xc
c001fcc7:	6a 60                	push   0x60
c001fcc9:	e8 b7 f3 ff ff       	call   c001f085 <Vm::inbv(unsigned short)>
c001fcce:	83 c4 10             	add    esp,0x10
c001fcd1:	eb e9                	jmp    c001fcbc <Vm::faultHandler(regs*)+0x810>
c001fcd3:	31 c0                	xor    eax,eax
c001fcd5:	83 c4 1c             	add    esp,0x1c
c001fcd8:	5b                   	pop    ebx
c001fcd9:	5e                   	pop    esi
c001fcda:	5f                   	pop    edi
c001fcdb:	5d                   	pop    ebp
c001fcdc:	c3                   	ret    

c001fcdd <Vm::fpuInternalTo32(unsigned long long)>:
c001fcdd:	57                   	push   edi
c001fcde:	56                   	push   esi
c001fcdf:	53                   	push   ebx
c001fce0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce8:	89 d6                	mov    esi,edx
c001fcea:	89 d7                	mov    edi,edx
c001fcec:	89 c1                	mov    ecx,eax
c001fcee:	c1 ef 14             	shr    edi,0x14
c001fcf1:	89 d3                	mov    ebx,edx
c001fcf3:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fcf9:	31 d2                	xor    edx,edx
c001fcfb:	89 f8                	mov    eax,edi
c001fcfd:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fd03:	bf ff 00 00 00       	mov    edi,0xff
c001fd08:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fd0d:	83 d2 ff             	adc    edx,0xffffffff
c001fd10:	39 c7                	cmp    edi,eax
c001fd12:	bf 00 00 00 00       	mov    edi,0x0
c001fd17:	19 d7                	sbb    edi,edx
c001fd19:	72 15                	jb     c001fd30 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fd1b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fd1f:	c1 e0 17             	shl    eax,0x17
c001fd22:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fd28:	09 f1                	or     ecx,esi
c001fd2a:	09 c1                	or     ecx,eax
c001fd2c:	89 cf                	mov    edi,ecx
c001fd2e:	eb 02                	jmp    c001fd32 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fd30:	31 ff                	xor    edi,edi
c001fd32:	89 f8                	mov    eax,edi
c001fd34:	5b                   	pop    ebx
c001fd35:	5e                   	pop    esi
c001fd36:	5f                   	pop    edi
c001fd37:	c3                   	ret    

c001fd38 <Vm::fpuInternalTo64(unsigned long long)>:
c001fd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd40:	c3                   	ret    

c001fd41 <Vm::fpu32ToInternal(unsigned int)>:
c001fd41:	57                   	push   edi
c001fd42:	31 ff                	xor    edi,edi
c001fd44:	56                   	push   esi
c001fd45:	53                   	push   ebx
c001fd46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fd4a:	89 cb                	mov    ebx,ecx
c001fd4c:	89 ce                	mov    esi,ecx
c001fd4e:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fd54:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fd5a:	c1 e9 17             	shr    ecx,0x17
c001fd5d:	89 f0                	mov    eax,esi
c001fd5f:	0f b6 d1             	movzx  edx,cl
c001fd62:	81 c2 80 03 00 00    	add    edx,0x380
c001fd68:	89 d1                	mov    ecx,edx
c001fd6a:	89 fa                	mov    edx,edi
c001fd6c:	c1 e1 14             	shl    ecx,0x14
c001fd6f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fd73:	c1 e0 1d             	shl    eax,0x1d
c001fd76:	89 d7                	mov    edi,edx
c001fd78:	89 c6                	mov    esi,eax
c001fd7a:	89 ca                	mov    edx,ecx
c001fd7c:	89 f0                	mov    eax,esi
c001fd7e:	09 fa                	or     edx,edi
c001fd80:	09 da                	or     edx,ebx
c001fd82:	5b                   	pop    ebx
c001fd83:	5e                   	pop    esi
c001fd84:	5f                   	pop    edi
c001fd85:	c3                   	ret    

c001fd86 <Vm::fpu64ToInternal(unsigned long long)>:
c001fd86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd8e:	c3                   	ret    

c001fd8f <Vm::fpuFloatToLong(unsigned long long)>:
c001fd8f:	57                   	push   edi
c001fd90:	31 c0                	xor    eax,eax
c001fd92:	56                   	push   esi
c001fd93:	31 d2                	xor    edx,edx
c001fd95:	53                   	push   ebx
c001fd96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd9a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd9e:	89 d9                	mov    ecx,ebx
c001fda0:	c1 e9 14             	shr    ecx,0x14
c001fda3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fda9:	89 cf                	mov    edi,ecx
c001fdab:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fdb1:	78 33                	js     c001fde6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fdb3:	89 d9                	mov    ecx,ebx
c001fdb5:	89 f0                	mov    eax,esi
c001fdb7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fdbd:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fdc3:	89 ca                	mov    edx,ecx
c001fdc5:	b9 34 00 00 00       	mov    ecx,0x34
c001fdca:	29 f9                	sub    ecx,edi
c001fdcc:	0f ad d0             	shrd   eax,edx,cl
c001fdcf:	d3 fa                	sar    edx,cl
c001fdd1:	f6 c1 20             	test   cl,0x20
c001fdd4:	74 05                	je     c001fddb <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fdd6:	89 d0                	mov    eax,edx
c001fdd8:	c1 fa 1f             	sar    edx,0x1f
c001fddb:	85 db                	test   ebx,ebx
c001fddd:	79 07                	jns    c001fde6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fddf:	f7 d8                	neg    eax
c001fde1:	83 d2 00             	adc    edx,0x0
c001fde4:	f7 da                	neg    edx
c001fde6:	5b                   	pop    ebx
c001fde7:	5e                   	pop    esi
c001fde8:	5f                   	pop    edi
c001fde9:	c3                   	ret    

c001fdea <Vm::fpuULongToFloat(unsigned long long)>:
c001fdea:	57                   	push   edi
c001fdeb:	31 c9                	xor    ecx,ecx
c001fded:	56                   	push   esi
c001fdee:	53                   	push   ebx
c001fdef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdf3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fdf7:	0f ba e7 14          	bt     edi,0x14
c001fdfb:	72 07                	jb     c001fe04 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fdfd:	01 f6                	add    esi,esi
c001fdff:	11 ff                	adc    edi,edi
c001fe01:	41                   	inc    ecx
c001fe02:	eb f3                	jmp    c001fdf7 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fe04:	89 fa                	mov    edx,edi
c001fe06:	89 f0                	mov    eax,esi
c001fe08:	bb 33 04 00 00       	mov    ebx,0x433
c001fe0d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fe13:	29 cb                	sub    ebx,ecx
c001fe15:	89 d9                	mov    ecx,ebx
c001fe17:	5b                   	pop    ebx
c001fe18:	c1 e1 14             	shl    ecx,0x14
c001fe1b:	5e                   	pop    esi
c001fe1c:	09 ca                	or     edx,ecx
c001fe1e:	5f                   	pop    edi
c001fe1f:	c3                   	ret    

c001fe20 <Vm::fpuLongToFloat(long long)>:
c001fe20:	56                   	push   esi
c001fe21:	31 c0                	xor    eax,eax
c001fe23:	53                   	push   ebx
c001fe24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe2c:	39 c8                	cmp    eax,ecx
c001fe2e:	19 d8                	sbb    eax,ebx
c001fe30:	7d 04                	jge    c001fe36 <Vm::fpuLongToFloat(long long)+0x16>
c001fe32:	31 f6                	xor    esi,esi
c001fe34:	eb 0c                	jmp    c001fe42 <Vm::fpuLongToFloat(long long)+0x22>
c001fe36:	f7 d9                	neg    ecx
c001fe38:	be 01 00 00 00       	mov    esi,0x1
c001fe3d:	83 d3 00             	adc    ebx,0x0
c001fe40:	f7 db                	neg    ebx
c001fe42:	31 c0                	xor    eax,eax
c001fe44:	0f ba e3 14          	bt     ebx,0x14
c001fe48:	72 07                	jb     c001fe51 <Vm::fpuLongToFloat(long long)+0x31>
c001fe4a:	01 c9                	add    ecx,ecx
c001fe4c:	11 db                	adc    ebx,ebx
c001fe4e:	40                   	inc    eax
c001fe4f:	eb f3                	jmp    c001fe44 <Vm::fpuLongToFloat(long long)+0x24>
c001fe51:	ba 33 04 00 00       	mov    edx,0x433
c001fe56:	29 c2                	sub    edx,eax
c001fe58:	89 c8                	mov    eax,ecx
c001fe5a:	c1 e2 14             	shl    edx,0x14
c001fe5d:	89 d9                	mov    ecx,ebx
c001fe5f:	89 f3                	mov    ebx,esi
c001fe61:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe67:	09 ca                	or     edx,ecx
c001fe69:	84 db                	test   bl,bl
c001fe6b:	74 06                	je     c001fe73 <Vm::fpuLongToFloat(long long)+0x53>
c001fe6d:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fe73:	5b                   	pop    ebx
c001fe74:	5e                   	pop    esi
c001fe75:	c3                   	ret    

c001fe76 <Vm::fpuGet0()>:
c001fe76:	31 c0                	xor    eax,eax
c001fe78:	31 d2                	xor    edx,edx
c001fe7a:	c3                   	ret    

c001fe7b <Vm::fpuGet1()>:
c001fe7b:	b8 01 00 00 00       	mov    eax,0x1
c001fe80:	31 d2                	xor    edx,edx
c001fe82:	c3                   	ret    

c001fe83 <Vm::fpuGetPi()>:
c001fe83:	b8 03 00 00 00       	mov    eax,0x3
c001fe88:	31 d2                	xor    edx,edx
c001fe8a:	c3                   	ret    

c001fe8b <Vm::fpuGetLog2E()>:
c001fe8b:	83 ec 18             	sub    esp,0x18
c001fe8e:	68 f8 d1 02 c0       	push   0xc002d1f8
c001fe93:	e8 cd a9 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001fe98:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe9d:	31 d2                	xor    edx,edx
c001fe9f:	83 c4 1c             	add    esp,0x1c
c001fea2:	c3                   	ret    

c001fea3 <Vm::fpuGetLogE2()>:
c001fea3:	83 ec 18             	sub    esp,0x18
c001fea6:	68 04 d2 02 c0       	push   0xc002d204
c001feab:	e8 b5 a9 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001feb0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001feb5:	31 d2                	xor    edx,edx
c001feb7:	83 c4 1c             	add    esp,0x1c
c001feba:	c3                   	ret    

c001febb <Vm::fpuGetLog210()>:
c001febb:	83 ec 18             	sub    esp,0x18
c001febe:	68 10 d2 02 c0       	push   0xc002d210
c001fec3:	e8 9d a9 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001fec8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fecd:	31 d2                	xor    edx,edx
c001fecf:	83 c4 1c             	add    esp,0x1c
c001fed2:	c3                   	ret    

c001fed3 <Vm::fpuGetLog102()>:
c001fed3:	83 ec 18             	sub    esp,0x18
c001fed6:	68 1d d2 02 c0       	push   0xc002d21d
c001fedb:	e8 85 a9 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c001fee0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fee5:	31 d2                	xor    edx,edx
c001fee7:	83 c4 1c             	add    esp,0x1c
c001feea:	c3                   	ret    

c001feeb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001feeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001feef:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fef3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef7:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fefb:	0f 92 c0             	setb   al
c001fefe:	c3                   	ret    

c001feff <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001feff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff07:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ff0b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ff0f:	09 c2                	or     edx,eax
c001ff11:	0f 94 c0             	sete   al
c001ff14:	c3                   	ret    

c001ff15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ff15:	57                   	push   edi
c001ff16:	56                   	push   esi
c001ff17:	53                   	push   ebx
c001ff18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ff1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff20:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ff24:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ff28:	57                   	push   edi
c001ff29:	56                   	push   esi
c001ff2a:	53                   	push   ebx
c001ff2b:	51                   	push   ecx
c001ff2c:	e8 ce ff ff ff       	call   c001feff <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ff31:	83 c4 10             	add    esp,0x10
c001ff34:	88 c2                	mov    dl,al
c001ff36:	31 c0                	xor    eax,eax
c001ff38:	84 d2                	test   dl,dl
c001ff3a:	75 0c                	jne    c001ff48 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ff3c:	57                   	push   edi
c001ff3d:	56                   	push   esi
c001ff3e:	53                   	push   ebx
c001ff3f:	51                   	push   ecx
c001ff40:	e8 a6 ff ff ff       	call   c001feeb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ff45:	83 c4 10             	add    esp,0x10
c001ff48:	83 e0 01             	and    eax,0x1
c001ff4b:	5b                   	pop    ebx
c001ff4c:	88 c1                	mov    cl,al
c001ff4e:	83 e2 01             	and    edx,0x1
c001ff51:	a0 a1 24 03 c0       	mov    al,ds:0xc00324a1
c001ff56:	c1 e2 06             	shl    edx,0x6
c001ff59:	83 e0 ba             	and    eax,0xffffffba
c001ff5c:	5e                   	pop    esi
c001ff5d:	09 c8                	or     eax,ecx
c001ff5f:	5f                   	pop    edi
c001ff60:	09 d0                	or     eax,edx
c001ff62:	a2 a1 24 03 c0       	mov    ds:0xc00324a1,al
c001ff67:	c3                   	ret    

c001ff68 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ff68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff70:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ff74:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ff78:	c3                   	ret    

c001ff79 <Vm::fpuAbs(unsigned long long)>:
c001ff79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff81:	c3                   	ret    

c001ff82 <Vm::fpuChs(unsigned long long)>:
c001ff82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff8a:	f7 d8                	neg    eax
c001ff8c:	83 d2 00             	adc    edx,0x0
c001ff8f:	f7 da                	neg    edx
c001ff91:	c3                   	ret    

c001ff92 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ff92:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ff96:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ff9b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ff9f:	eb c7                	jmp    c001ff68 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ffa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ffa1:	53                   	push   ebx
c001ffa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffa6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ffaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ffb2:	0f af ca             	imul   ecx,edx
c001ffb5:	0f af d8             	imul   ebx,eax
c001ffb8:	f7 e2                	mul    edx
c001ffba:	01 d9                	add    ecx,ebx
c001ffbc:	5b                   	pop    ebx
c001ffbd:	01 ca                	add    edx,ecx
c001ffbf:	c3                   	ret    

c001ffc0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ffc0:	83 ec 0c             	sub    esp,0xc
c001ffc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd3:	e8 5c 72 00 00       	call   c0027234 <__udivdi3>
c001ffd8:	83 c4 1c             	add    esp,0x1c
c001ffdb:	c3                   	ret    

c001ffdc <Vm::fpuSquare(unsigned long long)>:
c001ffdc:	50                   	push   eax
c001ffdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffe1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ffe5:	52                   	push   edx
c001ffe6:	50                   	push   eax
c001ffe7:	52                   	push   edx
c001ffe8:	50                   	push   eax
c001ffe9:	e8 b3 ff ff ff       	call   c001ffa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffee:	83 c4 14             	add    esp,0x14
c001fff1:	c3                   	ret    

c001fff2 <Vm::fpuGetReg(int)>:
c001fff2:	83 ec 0c             	sub    esp,0xc
c001fff5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fffa:	76 10                	jbe    c002000c <Vm::fpuGetReg(int)+0x1a>
c001fffc:	83 ec 0c             	sub    esp,0xc
c001ffff:	68 2a d2 02 c0       	push   0xc002d22a
c0020004:	e8 5c a8 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0020009:	83 c4 10             	add    esp,0x10
c002000c:	a0 a1 24 03 c0       	mov    al,ds:0xc00324a1
c0020011:	b9 08 00 00 00       	mov    ecx,0x8
c0020016:	c0 e8 03             	shr    al,0x3
c0020019:	83 e0 07             	and    eax,0x7
c002001c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020020:	99                   	cdq    
c0020021:	f7 f9                	idiv   ecx
c0020023:	8b 04 d5 a4 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdb5c]
c002002a:	8b 14 d5 a8 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdb58]
c0020031:	83 c4 0c             	add    esp,0xc
c0020034:	c3                   	ret    

c0020035 <Vm::fpuSetReg(int, unsigned long long)>:
c0020035:	57                   	push   edi
c0020036:	56                   	push   esi
c0020037:	52                   	push   edx
c0020038:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002003c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020040:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020045:	76 10                	jbe    c0020057 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c0020047:	83 ec 0c             	sub    esp,0xc
c002004a:	68 3d d2 02 c0       	push   0xc002d23d
c002004f:	e8 11 a8 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0020054:	83 c4 10             	add    esp,0x10
c0020057:	a0 a1 24 03 c0       	mov    al,ds:0xc00324a1
c002005c:	b9 08 00 00 00       	mov    ecx,0x8
c0020061:	c0 e8 03             	shr    al,0x3
c0020064:	83 e0 07             	and    eax,0x7
c0020067:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002006b:	99                   	cdq    
c002006c:	f7 f9                	idiv   ecx
c002006e:	89 34 d5 a4 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdb5c],esi
c0020075:	89 3c d5 a8 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdb58],edi
c002007c:	58                   	pop    eax
c002007d:	5e                   	pop    esi
c002007e:	5f                   	pop    edi
c002007f:	c3                   	ret    

c0020080 <Vm::fpuPush(unsigned long long)>:
c0020080:	a0 a1 24 03 c0       	mov    al,ds:0xc00324a1
c0020085:	c0 e8 03             	shr    al,0x3
c0020088:	83 e0 07             	and    eax,0x7
c002008b:	83 c0 07             	add    eax,0x7
c002008e:	88 c2                	mov    dl,al
c0020090:	83 e0 07             	and    eax,0x7
c0020093:	83 e2 07             	and    edx,0x7
c0020096:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c002009d:	8a 15 a1 24 03 c0    	mov    dl,BYTE PTR ds:0xc00324a1
c00200a3:	83 e2 c7             	and    edx,0xffffffc7
c00200a6:	09 ca                	or     edx,ecx
c00200a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00200ac:	88 15 a1 24 03 c0    	mov    BYTE PTR ds:0xc00324a1,dl
c00200b2:	89 0c c5 a8 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdb58],ecx
c00200b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00200bd:	89 14 c5 a4 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdb5c],edx
c00200c4:	a1 e4 24 03 c0       	mov    eax,ds:0xc00324e4
c00200c9:	83 f8 08             	cmp    eax,0x8
c00200cc:	75 08                	jne    c00200d6 <Vm::fpuPush(unsigned long long)+0x56>
c00200ce:	80 0d a0 24 03 c0 40 	or     BYTE PTR ds:0xc00324a0,0x40
c00200d5:	c3                   	ret    
c00200d6:	40                   	inc    eax
c00200d7:	a3 e4 24 03 c0       	mov    ds:0xc00324e4,eax
c00200dc:	c3                   	ret    

c00200dd <Vm::fpuPop()>:
c00200dd:	8a 0d a1 24 03 c0    	mov    cl,BYTE PTR ds:0xc00324a1
c00200e3:	53                   	push   ebx
c00200e4:	c0 e9 03             	shr    cl,0x3
c00200e7:	8a 1d a1 24 03 c0    	mov    bl,BYTE PTR ds:0xc00324a1
c00200ed:	83 e1 07             	and    ecx,0x7
c00200f0:	83 e3 c7             	and    ebx,0xffffffc7
c00200f3:	8b 04 cd a4 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdb5c]
c00200fa:	8b 14 cd a8 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdb58]
c0020101:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020108:	83 e1 38             	and    ecx,0x38
c002010b:	09 d9                	or     ecx,ebx
c002010d:	88 0d a1 24 03 c0    	mov    BYTE PTR ds:0xc00324a1,cl
c0020113:	8b 0d e4 24 03 c0    	mov    ecx,DWORD PTR ds:0xc00324e4
c0020119:	85 c9                	test   ecx,ecx
c002011b:	74 09                	je     c0020126 <Vm::fpuPop()+0x49>
c002011d:	49                   	dec    ecx
c002011e:	89 0d e4 24 03 c0    	mov    DWORD PTR ds:0xc00324e4,ecx
c0020124:	eb 07                	jmp    c002012d <Vm::fpuPop()+0x50>
c0020126:	80 0d a0 24 03 c0 40 	or     BYTE PTR ds:0xc00324a0,0x40
c002012d:	5b                   	pop    ebx
c002012e:	c3                   	ret    

c002012f <Vm::x87Handler(regs*)>:
c002012f:	55                   	push   ebp
c0020130:	57                   	push   edi
c0020131:	56                   	push   esi
c0020132:	53                   	push   ebx
c0020133:	83 ec 1c             	sub    esp,0x1c
c0020136:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002013a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c002013f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0020142:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c002014a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c002014e:	50                   	push   eax
c002014f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0020153:	50                   	push   eax
c0020154:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020158:	50                   	push   eax
c0020159:	53                   	push   ebx
c002015a:	e8 cd 9d ff ff       	call   c0019f2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c002015f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0020162:	83 c4 10             	add    esp,0x10
c0020165:	89 c6                	mov    esi,eax
c0020167:	80 fa d9             	cmp    dl,0xd9
c002016a:	0f 85 52 01 00 00    	jne    c00202c2 <Vm::x87Handler(regs*)+0x193>
c0020170:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020174:	8d 50 20             	lea    edx,[eax+0x20]
c0020177:	80 fa 0e             	cmp    dl,0xe
c002017a:	0f 87 86 00 00 00    	ja     c0020206 <Vm::x87Handler(regs*)+0xd7>
c0020180:	0f b6 d2             	movzx  edx,dl
c0020183:	ff 24 95 50 d2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2db0]
c002018a:	e8 e7 fc ff ff       	call   c001fe76 <Vm::fpuGet0()>
c002018f:	eb 05                	jmp    c0020196 <Vm::x87Handler(regs*)+0x67>
c0020191:	e8 e5 fc ff ff       	call   c001fe7b <Vm::fpuGet1()>
c0020196:	57                   	push   edi
c0020197:	57                   	push   edi
c0020198:	52                   	push   edx
c0020199:	50                   	push   eax
c002019a:	e8 e1 fe ff ff       	call   c0020080 <Vm::fpuPush(unsigned long long)>
c002019f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201a3:	83 c4 10             	add    esp,0x10
c00201a6:	b0 01                	mov    al,0x1
c00201a8:	e9 e3 09 00 00       	jmp    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c00201ad:	83 ec 0c             	sub    esp,0xc
c00201b0:	6a 00                	push   0x0
c00201b2:	e8 3b fe ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00201b7:	59                   	pop    ecx
c00201b8:	5e                   	pop    esi
c00201b9:	52                   	push   edx
c00201ba:	50                   	push   eax
c00201bb:	e8 c2 fd ff ff       	call   c001ff82 <Vm::fpuChs(unsigned long long)>
c00201c0:	eb 13                	jmp    c00201d5 <Vm::x87Handler(regs*)+0xa6>
c00201c2:	83 ec 0c             	sub    esp,0xc
c00201c5:	6a 00                	push   0x0
c00201c7:	e8 26 fe ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00201cc:	5f                   	pop    edi
c00201cd:	5d                   	pop    ebp
c00201ce:	52                   	push   edx
c00201cf:	50                   	push   eax
c00201d0:	e8 a4 fd ff ff       	call   c001ff79 <Vm::fpuAbs(unsigned long long)>
c00201d5:	83 c4 0c             	add    esp,0xc
c00201d8:	52                   	push   edx
c00201d9:	50                   	push   eax
c00201da:	6a 00                	push   0x0
c00201dc:	e8 54 fe ff ff       	call   c0020035 <Vm::fpuSetReg(int, unsigned long long)>
c00201e1:	eb bc                	jmp    c002019f <Vm::x87Handler(regs*)+0x70>
c00201e3:	e8 d3 fc ff ff       	call   c001febb <Vm::fpuGetLog210()>
c00201e8:	eb ac                	jmp    c0020196 <Vm::x87Handler(regs*)+0x67>
c00201ea:	e8 9c fc ff ff       	call   c001fe8b <Vm::fpuGetLog2E()>
c00201ef:	eb a5                	jmp    c0020196 <Vm::x87Handler(regs*)+0x67>
c00201f1:	e8 8d fc ff ff       	call   c001fe83 <Vm::fpuGetPi()>
c00201f6:	eb 9e                	jmp    c0020196 <Vm::x87Handler(regs*)+0x67>
c00201f8:	e8 d6 fc ff ff       	call   c001fed3 <Vm::fpuGetLog102()>
c00201fd:	eb 97                	jmp    c0020196 <Vm::x87Handler(regs*)+0x67>
c00201ff:	e8 9f fc ff ff       	call   c001fea3 <Vm::fpuGetLogE2()>
c0020204:	eb 90                	jmp    c0020196 <Vm::x87Handler(regs*)+0x67>
c0020206:	8d 50 40             	lea    edx,[eax+0x40]
c0020209:	80 fa 07             	cmp    dl,0x7
c002020c:	77 15                	ja     c0020223 <Vm::x87Handler(regs*)+0xf4>
c002020e:	83 ec 0c             	sub    esp,0xc
c0020211:	2d c0 00 00 00       	sub    eax,0xc0
c0020216:	50                   	push   eax
c0020217:	e8 d6 fd ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002021c:	59                   	pop    ecx
c002021d:	5e                   	pop    esi
c002021e:	e9 75 ff ff ff       	jmp    c0020198 <Vm::x87Handler(regs*)+0x69>
c0020223:	8d 50 38             	lea    edx,[eax+0x38]
c0020226:	80 fa 07             	cmp    dl,0x7
c0020229:	77 3c                	ja     c0020267 <Vm::x87Handler(regs*)+0x138>
c002022b:	83 ec 0c             	sub    esp,0xc
c002022e:	2d c8 00 00 00       	sub    eax,0xc8
c0020233:	50                   	push   eax
c0020234:	e8 b9 fd ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020239:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020240:	89 c6                	mov    esi,eax
c0020242:	89 d7                	mov    edi,edx
c0020244:	e8 a9 fd ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020249:	83 c4 0c             	add    esp,0xc
c002024c:	52                   	push   edx
c002024d:	50                   	push   eax
c002024e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020252:	2d c8 00 00 00       	sub    eax,0xc8
c0020257:	50                   	push   eax
c0020258:	e8 d8 fd ff ff       	call   c0020035 <Vm::fpuSetReg(int, unsigned long long)>
c002025d:	83 c4 0c             	add    esp,0xc
c0020260:	57                   	push   edi
c0020261:	56                   	push   esi
c0020262:	e9 73 ff ff ff       	jmp    c00201da <Vm::x87Handler(regs*)+0xab>
c0020267:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002026b:	84 d2                	test   dl,dl
c002026d:	75 0f                	jne    c002027e <Vm::x87Handler(regs*)+0x14f>
c002026f:	83 ec 0c             	sub    esp,0xc
c0020272:	ff 36                	push   DWORD PTR [esi]
c0020274:	e8 c8 fa ff ff       	call   c001fd41 <Vm::fpu32ToInternal(unsigned int)>
c0020279:	e9 bf 00 00 00       	jmp    c002033d <Vm::x87Handler(regs*)+0x20e>
c002027e:	80 fa 03             	cmp    dl,0x3
c0020281:	75 13                	jne    c0020296 <Vm::x87Handler(regs*)+0x167>
c0020283:	e8 55 fe ff ff       	call   c00200dd <Vm::fpuPop()>
c0020288:	55                   	push   ebp
c0020289:	55                   	push   ebp
c002028a:	52                   	push   edx
c002028b:	50                   	push   eax
c002028c:	e8 4c fa ff ff       	call   c001fcdd <Vm::fpuInternalTo32(unsigned long long)>
c0020291:	e9 88 00 00 00       	jmp    c002031e <Vm::x87Handler(regs*)+0x1ef>
c0020296:	80 fa 05             	cmp    dl,0x5
c0020299:	75 0e                	jne    c00202a9 <Vm::x87Handler(regs*)+0x17a>
c002029b:	66 8b 06             	mov    ax,WORD PTR [esi]
c002029e:	66 a3 a2 24 03 c0    	mov    ds:0xc00324a2,ax
c00202a4:	e9 df 00 00 00       	jmp    c0020388 <Vm::x87Handler(regs*)+0x259>
c00202a9:	31 c0                	xor    eax,eax
c00202ab:	80 fa 07             	cmp    dl,0x7
c00202ae:	0f 85 dc 08 00 00    	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c00202b4:	66 a1 a2 24 03 c0    	mov    ax,ds:0xc00324a2
c00202ba:	66 89 06             	mov    WORD PTR [esi],ax
c00202bd:	e9 c6 00 00 00       	jmp    c0020388 <Vm::x87Handler(regs*)+0x259>
c00202c2:	80 fa d8             	cmp    dl,0xd8
c00202c5:	0f 84 c9 00 00 00    	je     c0020394 <Vm::x87Handler(regs*)+0x265>
c00202cb:	80 fa dc             	cmp    dl,0xdc
c00202ce:	0f 84 0d 02 00 00    	je     c00204e1 <Vm::x87Handler(regs*)+0x3b2>
c00202d4:	80 fa de             	cmp    dl,0xde
c00202d7:	0f 84 cd 02 00 00    	je     c00205aa <Vm::x87Handler(regs*)+0x47b>
c00202dd:	80 fa dd             	cmp    dl,0xdd
c00202e0:	0f 84 5f 04 00 00    	je     c0020745 <Vm::x87Handler(regs*)+0x616>
c00202e6:	80 fa da             	cmp    dl,0xda
c00202e9:	0f 84 24 05 00 00    	je     c0020813 <Vm::x87Handler(regs*)+0x6e4>
c00202ef:	80 fa df             	cmp    dl,0xdf
c00202f2:	0f 84 68 05 00 00    	je     c0020860 <Vm::x87Handler(regs*)+0x731>
c00202f8:	31 c0                	xor    eax,eax
c00202fa:	80 fa db             	cmp    dl,0xdb
c00202fd:	0f 85 8d 08 00 00    	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c0020303:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020307:	80 fa 03             	cmp    dl,0x3
c002030a:	0f 85 70 06 00 00    	jne    c0020980 <Vm::x87Handler(regs*)+0x851>
c0020310:	e8 c8 fd ff ff       	call   c00200dd <Vm::fpuPop()>
c0020315:	55                   	push   ebp
c0020316:	55                   	push   ebp
c0020317:	52                   	push   edx
c0020318:	50                   	push   eax
c0020319:	e8 71 fa ff ff       	call   c001fd8f <Vm::fpuFloatToLong(unsigned long long)>
c002031e:	83 c4 10             	add    esp,0x10
c0020321:	89 06                	mov    DWORD PTR [esi],eax
c0020323:	eb 63                	jmp    c0020388 <Vm::x87Handler(regs*)+0x259>
c0020325:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020329:	84 d2                	test   dl,dl
c002032b:	0f 85 e6 05 00 00    	jne    c0020917 <Vm::x87Handler(regs*)+0x7e8>
c0020331:	57                   	push   edi
c0020332:	57                   	push   edi
c0020333:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020336:	ff 36                	push   DWORD PTR [esi]
c0020338:	e8 49 fa ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c002033d:	5e                   	pop    esi
c002033e:	5f                   	pop    edi
c002033f:	52                   	push   edx
c0020340:	50                   	push   eax
c0020341:	e8 3a fd ff ff       	call   c0020080 <Vm::fpuPush(unsigned long long)>
c0020346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002034a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002034d:	e9 51 fe ff ff       	jmp    c00201a3 <Vm::x87Handler(regs*)+0x74>
c0020352:	80 fa 03             	cmp    dl,0x3
c0020355:	0f 85 d7 06 00 00    	jne    c0020a32 <Vm::x87Handler(regs*)+0x903>
c002035b:	57                   	push   edi
c002035c:	57                   	push   edi
c002035d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020360:	ff 36                	push   DWORD PTR [esi]
c0020362:	e8 1f fa ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c0020367:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002036e:	89 c6                	mov    esi,eax
c0020370:	89 d7                	mov    edi,edx
c0020372:	e8 7b fc ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020377:	57                   	push   edi
c0020378:	56                   	push   esi
c0020379:	52                   	push   edx
c002037a:	50                   	push   eax
c002037b:	e8 95 fb ff ff       	call   c001ff15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020380:	83 c4 20             	add    esp,0x20
c0020383:	e8 55 fd ff ff       	call   c00200dd <Vm::fpuPop()>
c0020388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002038c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002038f:	e9 12 fe ff ff       	jmp    c00201a6 <Vm::x87Handler(regs*)+0x77>
c0020394:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020398:	8d 50 40             	lea    edx,[eax+0x40]
c002039b:	80 fa 07             	cmp    dl,0x7
c002039e:	77 29                	ja     c00203c9 <Vm::x87Handler(regs*)+0x29a>
c00203a0:	83 ec 0c             	sub    esp,0xc
c00203a3:	2d c0 00 00 00       	sub    eax,0xc0
c00203a8:	50                   	push   eax
c00203a9:	e8 44 fc ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00203ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203b5:	89 c6                	mov    esi,eax
c00203b7:	89 d7                	mov    edi,edx
c00203b9:	e8 34 fc ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00203be:	57                   	push   edi
c00203bf:	56                   	push   esi
c00203c0:	52                   	push   edx
c00203c1:	50                   	push   eax
c00203c2:	e8 a1 fb ff ff       	call   c001ff68 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203c7:	eb 2f                	jmp    c00203f8 <Vm::x87Handler(regs*)+0x2c9>
c00203c9:	8d 50 38             	lea    edx,[eax+0x38]
c00203cc:	80 fa 07             	cmp    dl,0x7
c00203cf:	77 2f                	ja     c0020400 <Vm::x87Handler(regs*)+0x2d1>
c00203d1:	83 ec 0c             	sub    esp,0xc
c00203d4:	2d c8 00 00 00       	sub    eax,0xc8
c00203d9:	50                   	push   eax
c00203da:	e8 13 fc ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00203df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e6:	89 c6                	mov    esi,eax
c00203e8:	89 d7                	mov    edi,edx
c00203ea:	e8 03 fc ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00203ef:	57                   	push   edi
c00203f0:	56                   	push   esi
c00203f1:	52                   	push   edx
c00203f2:	50                   	push   eax
c00203f3:	e8 a9 fb ff ff       	call   c001ffa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00203f8:	83 c4 1c             	add    esp,0x1c
c00203fb:	e9 d8 fd ff ff       	jmp    c00201d8 <Vm::x87Handler(regs*)+0xa9>
c0020400:	8d 50 30             	lea    edx,[eax+0x30]
c0020403:	80 fa 07             	cmp    dl,0x7
c0020406:	77 0d                	ja     c0020415 <Vm::x87Handler(regs*)+0x2e6>
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	2d d0 00 00 00       	sub    eax,0xd0
c0020410:	e9 99 03 00 00       	jmp    c00207ae <Vm::x87Handler(regs*)+0x67f>
c0020415:	8d 50 28             	lea    edx,[eax+0x28]
c0020418:	80 fa 07             	cmp    dl,0x7
c002041b:	77 0d                	ja     c002042a <Vm::x87Handler(regs*)+0x2fb>
c002041d:	83 ec 0c             	sub    esp,0xc
c0020420:	2d d8 00 00 00       	sub    eax,0xd8
c0020425:	e9 c0 03 00 00       	jmp    c00207ea <Vm::x87Handler(regs*)+0x6bb>
c002042a:	8d 50 20             	lea    edx,[eax+0x20]
c002042d:	80 fa 07             	cmp    dl,0x7
c0020430:	77 1b                	ja     c002044d <Vm::x87Handler(regs*)+0x31e>
c0020432:	83 ec 0c             	sub    esp,0xc
c0020435:	2d e0 00 00 00       	sub    eax,0xe0
c002043a:	50                   	push   eax
c002043b:	e8 b2 fb ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020440:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020447:	89 c6                	mov    esi,eax
c0020449:	89 d7                	mov    edi,edx
c002044b:	eb 22                	jmp    c002046f <Vm::x87Handler(regs*)+0x340>
c002044d:	8d 50 18             	lea    edx,[eax+0x18]
c0020450:	80 fa 07             	cmp    dl,0x7
c0020453:	77 2d                	ja     c0020482 <Vm::x87Handler(regs*)+0x353>
c0020455:	83 ec 0c             	sub    esp,0xc
c0020458:	6a 00                	push   0x0
c002045a:	e8 93 fb ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002045f:	89 c6                	mov    esi,eax
c0020461:	89 d7                	mov    edi,edx
c0020463:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020467:	2d e8 00 00 00       	sub    eax,0xe8
c002046c:	89 04 24             	mov    DWORD PTR [esp],eax
c002046f:	e8 7e fb ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020474:	57                   	push   edi
c0020475:	56                   	push   esi
c0020476:	52                   	push   edx
c0020477:	50                   	push   eax
c0020478:	e8 15 fb ff ff       	call   c001ff92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002047d:	e9 76 ff ff ff       	jmp    c00203f8 <Vm::x87Handler(regs*)+0x2c9>
c0020482:	8d 50 10             	lea    edx,[eax+0x10]
c0020485:	80 fa 07             	cmp    dl,0x7
c0020488:	77 1b                	ja     c00204a5 <Vm::x87Handler(regs*)+0x376>
c002048a:	83 ec 0c             	sub    esp,0xc
c002048d:	2d f0 00 00 00       	sub    eax,0xf0
c0020492:	50                   	push   eax
c0020493:	e8 5a fb ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020498:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049f:	89 c6                	mov    esi,eax
c00204a1:	89 d7                	mov    edi,edx
c00204a3:	eb 22                	jmp    c00204c7 <Vm::x87Handler(regs*)+0x398>
c00204a5:	3c f7                	cmp    al,0xf7
c00204a7:	0f 86 d1 03 00 00    	jbe    c002087e <Vm::x87Handler(regs*)+0x74f>
c00204ad:	83 ec 0c             	sub    esp,0xc
c00204b0:	6a 00                	push   0x0
c00204b2:	e8 3b fb ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00204b7:	89 c6                	mov    esi,eax
c00204b9:	89 d7                	mov    edi,edx
c00204bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204bf:	2d f8 00 00 00       	sub    eax,0xf8
c00204c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00204c7:	e8 26 fb ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00204cc:	57                   	push   edi
c00204cd:	56                   	push   esi
c00204ce:	52                   	push   edx
c00204cf:	50                   	push   eax
c00204d0:	e8 eb fa ff ff       	call   c001ffc0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204d5:	83 c4 1c             	add    esp,0x1c
c00204d8:	52                   	push   edx
c00204d9:	50                   	push   eax
c00204da:	6a 00                	push   0x0
c00204dc:	e9 51 02 00 00       	jmp    c0020732 <Vm::x87Handler(regs*)+0x603>
c00204e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204e5:	8d 50 40             	lea    edx,[eax+0x40]
c00204e8:	80 fa 07             	cmp    dl,0x7
c00204eb:	77 37                	ja     c0020524 <Vm::x87Handler(regs*)+0x3f5>
c00204ed:	83 ec 0c             	sub    esp,0xc
c00204f0:	2d c0 00 00 00       	sub    eax,0xc0
c00204f5:	50                   	push   eax
c00204f6:	e8 f7 fa ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00204fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020502:	89 c6                	mov    esi,eax
c0020504:	89 d7                	mov    edi,edx
c0020506:	e8 e7 fa ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002050b:	57                   	push   edi
c002050c:	56                   	push   esi
c002050d:	52                   	push   edx
c002050e:	50                   	push   eax
c002050f:	e8 54 fa ff ff       	call   c001ff68 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020514:	83 c4 1c             	add    esp,0x1c
c0020517:	52                   	push   edx
c0020518:	50                   	push   eax
c0020519:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002051d:	2d c0 00 00 00       	sub    eax,0xc0
c0020522:	eb 3d                	jmp    c0020561 <Vm::x87Handler(regs*)+0x432>
c0020524:	8d 50 38             	lea    edx,[eax+0x38]
c0020527:	80 fa 07             	cmp    dl,0x7
c002052a:	77 3b                	ja     c0020567 <Vm::x87Handler(regs*)+0x438>
c002052c:	83 ec 0c             	sub    esp,0xc
c002052f:	2d c8 00 00 00       	sub    eax,0xc8
c0020534:	50                   	push   eax
c0020535:	e8 b8 fa ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002053a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020541:	89 c6                	mov    esi,eax
c0020543:	89 d7                	mov    edi,edx
c0020545:	e8 a8 fa ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002054a:	57                   	push   edi
c002054b:	56                   	push   esi
c002054c:	52                   	push   edx
c002054d:	50                   	push   eax
c002054e:	e8 4e fa ff ff       	call   c001ffa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020553:	83 c4 1c             	add    esp,0x1c
c0020556:	52                   	push   edx
c0020557:	50                   	push   eax
c0020558:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002055c:	2d c8 00 00 00       	sub    eax,0xc8
c0020561:	50                   	push   eax
c0020562:	e9 75 fc ff ff       	jmp    c00201dc <Vm::x87Handler(regs*)+0xad>
c0020567:	83 c0 18             	add    eax,0x18
c002056a:	3c 07                	cmp    al,0x7
c002056c:	0f 87 3b 04 00 00    	ja     c00209ad <Vm::x87Handler(regs*)+0x87e>
c0020572:	83 ec 0c             	sub    esp,0xc
c0020575:	6a 00                	push   0x0
c0020577:	e8 76 fa ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002057c:	89 c6                	mov    esi,eax
c002057e:	89 d7                	mov    edi,edx
c0020580:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020584:	2d e8 00 00 00       	sub    eax,0xe8
c0020589:	89 04 24             	mov    DWORD PTR [esp],eax
c002058c:	e8 61 fa ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020591:	57                   	push   edi
c0020592:	56                   	push   esi
c0020593:	52                   	push   edx
c0020594:	50                   	push   eax
c0020595:	e8 f8 f9 ff ff       	call   c001ff92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002059a:	83 c4 1c             	add    esp,0x1c
c002059d:	52                   	push   edx
c002059e:	50                   	push   eax
c002059f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205a3:	2d e8 00 00 00       	sub    eax,0xe8
c00205a8:	eb b7                	jmp    c0020561 <Vm::x87Handler(regs*)+0x432>
c00205aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205ae:	8d 50 40             	lea    edx,[eax+0x40]
c00205b1:	80 fa 07             	cmp    dl,0x7
c00205b4:	77 3a                	ja     c00205f0 <Vm::x87Handler(regs*)+0x4c1>
c00205b6:	83 ec 0c             	sub    esp,0xc
c00205b9:	2d c0 00 00 00       	sub    eax,0xc0
c00205be:	50                   	push   eax
c00205bf:	e8 2e fa ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00205c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205cb:	89 c6                	mov    esi,eax
c00205cd:	89 d7                	mov    edi,edx
c00205cf:	e8 1e fa ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00205d4:	57                   	push   edi
c00205d5:	56                   	push   esi
c00205d6:	52                   	push   edx
c00205d7:	50                   	push   eax
c00205d8:	e8 8b f9 ff ff       	call   c001ff68 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00205dd:	83 c4 1c             	add    esp,0x1c
c00205e0:	52                   	push   edx
c00205e1:	50                   	push   eax
c00205e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205e6:	2d c0 00 00 00       	sub    eax,0xc0
c00205eb:	e9 9e 01 00 00       	jmp    c002078e <Vm::x87Handler(regs*)+0x65f>
c00205f0:	8d 50 20             	lea    edx,[eax+0x20]
c00205f3:	80 fa 07             	cmp    dl,0x7
c00205f6:	77 3a                	ja     c0020632 <Vm::x87Handler(regs*)+0x503>
c00205f8:	83 ec 0c             	sub    esp,0xc
c00205fb:	2d e0 00 00 00       	sub    eax,0xe0
c0020600:	50                   	push   eax
c0020601:	e8 ec f9 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020606:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002060d:	89 c6                	mov    esi,eax
c002060f:	89 d7                	mov    edi,edx
c0020611:	e8 dc f9 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020616:	57                   	push   edi
c0020617:	56                   	push   esi
c0020618:	52                   	push   edx
c0020619:	50                   	push   eax
c002061a:	e8 73 f9 ff ff       	call   c001ff92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002061f:	83 c4 1c             	add    esp,0x1c
c0020622:	52                   	push   edx
c0020623:	50                   	push   eax
c0020624:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020628:	2d e0 00 00 00       	sub    eax,0xe0
c002062d:	e9 5c 01 00 00       	jmp    c002078e <Vm::x87Handler(regs*)+0x65f>
c0020632:	8d 50 18             	lea    edx,[eax+0x18]
c0020635:	80 fa 07             	cmp    dl,0x7
c0020638:	77 3b                	ja     c0020675 <Vm::x87Handler(regs*)+0x546>
c002063a:	83 ec 0c             	sub    esp,0xc
c002063d:	6a 00                	push   0x0
c002063f:	e8 ae f9 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020644:	89 c6                	mov    esi,eax
c0020646:	89 d7                	mov    edi,edx
c0020648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002064c:	2d e8 00 00 00       	sub    eax,0xe8
c0020651:	89 04 24             	mov    DWORD PTR [esp],eax
c0020654:	e8 99 f9 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020659:	57                   	push   edi
c002065a:	56                   	push   esi
c002065b:	52                   	push   edx
c002065c:	50                   	push   eax
c002065d:	e8 30 f9 ff ff       	call   c001ff92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020662:	83 c4 1c             	add    esp,0x1c
c0020665:	52                   	push   edx
c0020666:	50                   	push   eax
c0020667:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002066b:	2d e8 00 00 00       	sub    eax,0xe8
c0020670:	e9 19 01 00 00       	jmp    c002078e <Vm::x87Handler(regs*)+0x65f>
c0020675:	8d 50 38             	lea    edx,[eax+0x38]
c0020678:	80 fa 07             	cmp    dl,0x7
c002067b:	77 37                	ja     c00206b4 <Vm::x87Handler(regs*)+0x585>
c002067d:	83 ec 0c             	sub    esp,0xc
c0020680:	2d c8 00 00 00       	sub    eax,0xc8
c0020685:	50                   	push   eax
c0020686:	e8 67 f9 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002068b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020692:	89 c6                	mov    esi,eax
c0020694:	89 d7                	mov    edi,edx
c0020696:	e8 57 f9 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002069b:	57                   	push   edi
c002069c:	56                   	push   esi
c002069d:	52                   	push   edx
c002069e:	50                   	push   eax
c002069f:	e8 fd f8 ff ff       	call   c001ffa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00206a4:	83 c4 1c             	add    esp,0x1c
c00206a7:	52                   	push   edx
c00206a8:	50                   	push   eax
c00206a9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206ad:	2d c8 00 00 00       	sub    eax,0xc8
c00206b2:	eb 7d                	jmp    c0020731 <Vm::x87Handler(regs*)+0x602>
c00206b4:	3c f7                	cmp    al,0xf7
c00206b6:	76 38                	jbe    c00206f0 <Vm::x87Handler(regs*)+0x5c1>
c00206b8:	83 ec 0c             	sub    esp,0xc
c00206bb:	6a 00                	push   0x0
c00206bd:	e8 30 f9 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00206c2:	89 c6                	mov    esi,eax
c00206c4:	89 d7                	mov    edi,edx
c00206c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206ca:	2d f8 00 00 00       	sub    eax,0xf8
c00206cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00206d2:	e8 1b f9 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00206d7:	57                   	push   edi
c00206d8:	56                   	push   esi
c00206d9:	52                   	push   edx
c00206da:	50                   	push   eax
c00206db:	e8 e0 f8 ff ff       	call   c001ffc0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206e0:	83 c4 1c             	add    esp,0x1c
c00206e3:	52                   	push   edx
c00206e4:	50                   	push   eax
c00206e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206e9:	2d f8 00 00 00       	sub    eax,0xf8
c00206ee:	eb 41                	jmp    c0020731 <Vm::x87Handler(regs*)+0x602>
c00206f0:	8d 50 10             	lea    edx,[eax+0x10]
c00206f3:	80 fa 07             	cmp    dl,0x7
c00206f6:	0f 87 5a 01 00 00    	ja     c0020856 <Vm::x87Handler(regs*)+0x727>
c00206fc:	83 ec 0c             	sub    esp,0xc
c00206ff:	2d f0 00 00 00       	sub    eax,0xf0
c0020704:	50                   	push   eax
c0020705:	e8 e8 f8 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002070a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020711:	89 c6                	mov    esi,eax
c0020713:	89 d7                	mov    edi,edx
c0020715:	e8 d8 f8 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002071a:	57                   	push   edi
c002071b:	56                   	push   esi
c002071c:	52                   	push   edx
c002071d:	50                   	push   eax
c002071e:	e8 9d f8 ff ff       	call   c001ffc0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020723:	83 c4 1c             	add    esp,0x1c
c0020726:	52                   	push   edx
c0020727:	50                   	push   eax
c0020728:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002072c:	2d f0 00 00 00       	sub    eax,0xf0
c0020731:	50                   	push   eax
c0020732:	e8 fe f8 ff ff       	call   c0020035 <Vm::fpuSetReg(int, unsigned long long)>
c0020737:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002073b:	e8 9d f9 ff ff       	call   c00200dd <Vm::fpuPop()>
c0020740:	e9 5e fa ff ff       	jmp    c00201a3 <Vm::x87Handler(regs*)+0x74>
c0020745:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020749:	8d 50 30             	lea    edx,[eax+0x30]
c002074c:	80 fa 07             	cmp    dl,0x7
c002074f:	77 1d                	ja     c002076e <Vm::x87Handler(regs*)+0x63f>
c0020751:	83 ec 0c             	sub    esp,0xc
c0020754:	6a 00                	push   0x0
c0020756:	e8 97 f8 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002075b:	83 c4 0c             	add    esp,0xc
c002075e:	52                   	push   edx
c002075f:	50                   	push   eax
c0020760:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020764:	2d d0 00 00 00       	sub    eax,0xd0
c0020769:	e9 f3 fd ff ff       	jmp    c0020561 <Vm::x87Handler(regs*)+0x432>
c002076e:	8d 50 28             	lea    edx,[eax+0x28]
c0020771:	80 fa 07             	cmp    dl,0x7
c0020774:	77 28                	ja     c002079e <Vm::x87Handler(regs*)+0x66f>
c0020776:	83 ec 0c             	sub    esp,0xc
c0020779:	6a 00                	push   0x0
c002077b:	e8 72 f8 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020780:	83 c4 0c             	add    esp,0xc
c0020783:	52                   	push   edx
c0020784:	50                   	push   eax
c0020785:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020789:	2d d8 00 00 00       	sub    eax,0xd8
c002078e:	50                   	push   eax
c002078f:	e8 a1 f8 ff ff       	call   c0020035 <Vm::fpuSetReg(int, unsigned long long)>
c0020794:	e8 44 f9 ff ff       	call   c00200dd <Vm::fpuPop()>
c0020799:	e9 01 fa ff ff       	jmp    c002019f <Vm::x87Handler(regs*)+0x70>
c002079e:	8d 50 20             	lea    edx,[eax+0x20]
c00207a1:	80 fa 07             	cmp    dl,0x7
c00207a4:	77 30                	ja     c00207d6 <Vm::x87Handler(regs*)+0x6a7>
c00207a6:	83 ec 0c             	sub    esp,0xc
c00207a9:	2d e0 00 00 00       	sub    eax,0xe0
c00207ae:	50                   	push   eax
c00207af:	e8 3e f8 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00207b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207bb:	89 c6                	mov    esi,eax
c00207bd:	89 d7                	mov    edi,edx
c00207bf:	e8 2e f8 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00207c4:	57                   	push   edi
c00207c5:	56                   	push   esi
c00207c6:	52                   	push   edx
c00207c7:	50                   	push   eax
c00207c8:	e8 48 f7 ff ff       	call   c001ff15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207cd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00207d1:	e9 54 02 00 00       	jmp    c0020a2a <Vm::x87Handler(regs*)+0x8fb>
c00207d6:	8d 50 18             	lea    edx,[eax+0x18]
c00207d9:	80 fa 07             	cmp    dl,0x7
c00207dc:	0f 87 43 fb ff ff    	ja     c0020325 <Vm::x87Handler(regs*)+0x1f6>
c00207e2:	83 ec 0c             	sub    esp,0xc
c00207e5:	2d e8 00 00 00       	sub    eax,0xe8
c00207ea:	50                   	push   eax
c00207eb:	e8 02 f8 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00207f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207f7:	89 c6                	mov    esi,eax
c00207f9:	89 d7                	mov    edi,edx
c00207fb:	e8 f2 f7 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020800:	57                   	push   edi
c0020801:	56                   	push   esi
c0020802:	52                   	push   edx
c0020803:	50                   	push   eax
c0020804:	e8 0c f7 ff ff       	call   c001ff15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020809:	83 c4 20             	add    esp,0x20
c002080c:	e8 cc f8 ff ff       	call   c00200dd <Vm::fpuPop()>
c0020811:	eb 62                	jmp    c0020875 <Vm::x87Handler(regs*)+0x746>
c0020813:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020817:	0f 85 0f 01 00 00    	jne    c002092c <Vm::x87Handler(regs*)+0x7fd>
c002081d:	83 ec 0c             	sub    esp,0xc
c0020820:	6a 01                	push   0x1
c0020822:	e8 cb f7 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020827:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002082e:	89 c6                	mov    esi,eax
c0020830:	89 d7                	mov    edi,edx
c0020832:	e8 bb f7 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020837:	57                   	push   edi
c0020838:	56                   	push   esi
c0020839:	52                   	push   edx
c002083a:	50                   	push   eax
c002083b:	e8 d5 f6 ff ff       	call   c001ff15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020840:	83 c4 20             	add    esp,0x20
c0020843:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020847:	e8 91 f8 ff ff       	call   c00200dd <Vm::fpuPop()>
c002084c:	e8 8c f8 ff ff       	call   c00200dd <Vm::fpuPop()>
c0020851:	e9 50 f9 ff ff       	jmp    c00201a6 <Vm::x87Handler(regs*)+0x77>
c0020856:	3c d9                	cmp    al,0xd9
c0020858:	0f 85 b5 02 00 00    	jne    c0020b13 <Vm::x87Handler(regs*)+0x9e4>
c002085e:	eb bd                	jmp    c002081d <Vm::x87Handler(regs*)+0x6ee>
c0020860:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020864:	0f 85 ea 02 00 00    	jne    c0020b54 <Vm::x87Handler(regs*)+0xa25>
c002086a:	0f b7 05 a0 24 03 c0 	movzx  eax,WORD PTR ds:0xc00324a0
c0020871:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020875:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020879:	e9 28 f9 ff ff       	jmp    c00201a6 <Vm::x87Handler(regs*)+0x77>
c002087e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020882:	84 d2                	test   dl,dl
c0020884:	75 0f                	jne    c0020895 <Vm::x87Handler(regs*)+0x766>
c0020886:	83 ec 0c             	sub    esp,0xc
c0020889:	ff 36                	push   DWORD PTR [esi]
c002088b:	e8 b1 f4 ff ff       	call   c001fd41 <Vm::fpu32ToInternal(unsigned int)>
c0020890:	e9 2c 01 00 00       	jmp    c00209c1 <Vm::x87Handler(regs*)+0x892>
c0020895:	80 fa 01             	cmp    dl,0x1
c0020898:	75 0f                	jne    c00208a9 <Vm::x87Handler(regs*)+0x77a>
c002089a:	83 ec 0c             	sub    esp,0xc
c002089d:	ff 36                	push   DWORD PTR [esi]
c002089f:	e8 9d f4 ff ff       	call   c001fd41 <Vm::fpu32ToInternal(unsigned int)>
c00208a4:	e9 81 02 00 00       	jmp    c0020b2a <Vm::x87Handler(regs*)+0x9fb>
c00208a9:	80 fa 04             	cmp    dl,0x4
c00208ac:	75 0f                	jne    c00208bd <Vm::x87Handler(regs*)+0x78e>
c00208ae:	83 ec 0c             	sub    esp,0xc
c00208b1:	ff 36                	push   DWORD PTR [esi]
c00208b3:	e8 89 f4 ff ff       	call   c001fd41 <Vm::fpu32ToInternal(unsigned int)>
c00208b8:	e9 86 01 00 00       	jmp    c0020a43 <Vm::x87Handler(regs*)+0x914>
c00208bd:	80 fa 05             	cmp    dl,0x5
c00208c0:	75 1b                	jne    c00208dd <Vm::x87Handler(regs*)+0x7ae>
c00208c2:	83 ec 0c             	sub    esp,0xc
c00208c5:	6a 00                	push   0x0
c00208c7:	e8 26 f7 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00208cc:	89 c7                	mov    edi,eax
c00208ce:	89 d5                	mov    ebp,edx
c00208d0:	58                   	pop    eax
c00208d1:	ff 36                	push   DWORD PTR [esi]
c00208d3:	e8 69 f4 ff ff       	call   c001fd41 <Vm::fpu32ToInternal(unsigned int)>
c00208d8:	e9 a3 01 00 00       	jmp    c0020a80 <Vm::x87Handler(regs*)+0x951>
c00208dd:	80 fa 06             	cmp    dl,0x6
c00208e0:	75 0f                	jne    c00208f1 <Vm::x87Handler(regs*)+0x7c2>
c00208e2:	83 ec 0c             	sub    esp,0xc
c00208e5:	ff 36                	push   DWORD PTR [esi]
c00208e7:	e8 55 f4 ff ff       	call   c001fd41 <Vm::fpu32ToInternal(unsigned int)>
c00208ec:	e9 ae 01 00 00       	jmp    c0020a9f <Vm::x87Handler(regs*)+0x970>
c00208f1:	31 c0                	xor    eax,eax
c00208f3:	80 fa 07             	cmp    dl,0x7
c00208f6:	0f 85 94 02 00 00    	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c00208fc:	83 ec 0c             	sub    esp,0xc
c00208ff:	6a 00                	push   0x0
c0020901:	e8 ec f6 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020906:	89 c7                	mov    edi,eax
c0020908:	89 d5                	mov    ebp,edx
c002090a:	58                   	pop    eax
c002090b:	ff 36                	push   DWORD PTR [esi]
c002090d:	e8 2f f4 ff ff       	call   c001fd41 <Vm::fpu32ToInternal(unsigned int)>
c0020912:	e9 cb 01 00 00       	jmp    c0020ae2 <Vm::x87Handler(regs*)+0x9b3>
c0020917:	80 fa 03             	cmp    dl,0x3
c002091a:	0f 85 d3 01 00 00    	jne    c0020af3 <Vm::x87Handler(regs*)+0x9c4>
c0020920:	e8 b8 f7 ff ff       	call   c00200dd <Vm::fpuPop()>
c0020925:	51                   	push   ecx
c0020926:	51                   	push   ecx
c0020927:	e9 de 01 00 00       	jmp    c0020b0a <Vm::x87Handler(regs*)+0x9db>
c002092c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020930:	80 fa 01             	cmp    dl,0x1
c0020933:	75 09                	jne    c002093e <Vm::x87Handler(regs*)+0x80f>
c0020935:	57                   	push   edi
c0020936:	57                   	push   edi
c0020937:	8b 06                	mov    eax,DWORD PTR [esi]
c0020939:	e9 e3 01 00 00       	jmp    c0020b21 <Vm::x87Handler(regs*)+0x9f2>
c002093e:	80 fa 04             	cmp    dl,0x4
c0020941:	75 12                	jne    c0020955 <Vm::x87Handler(regs*)+0x826>
c0020943:	31 d2                	xor    edx,edx
c0020945:	51                   	push   ecx
c0020946:	51                   	push   ecx
c0020947:	8b 06                	mov    eax,DWORD PTR [esi]
c0020949:	52                   	push   edx
c002094a:	50                   	push   eax
c002094b:	e8 d0 f4 ff ff       	call   c001fe20 <Vm::fpuLongToFloat(long long)>
c0020950:	e9 ee 00 00 00       	jmp    c0020a43 <Vm::x87Handler(regs*)+0x914>
c0020955:	31 c0                	xor    eax,eax
c0020957:	80 fa 07             	cmp    dl,0x7
c002095a:	0f 85 30 02 00 00    	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c0020960:	83 ec 0c             	sub    esp,0xc
c0020963:	6a 00                	push   0x0
c0020965:	e8 88 f6 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c002096a:	89 c7                	mov    edi,eax
c002096c:	89 d5                	mov    ebp,edx
c002096e:	58                   	pop    eax
c002096f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020971:	5a                   	pop    edx
c0020972:	31 d2                	xor    edx,edx
c0020974:	52                   	push   edx
c0020975:	50                   	push   eax
c0020976:	e8 a5 f4 ff ff       	call   c001fe20 <Vm::fpuLongToFloat(long long)>
c002097b:	e9 62 01 00 00       	jmp    c0020ae2 <Vm::x87Handler(regs*)+0x9b3>
c0020980:	84 d2                	test   dl,dl
c0020982:	75 0d                	jne    c0020991 <Vm::x87Handler(regs*)+0x862>
c0020984:	31 d2                	xor    edx,edx
c0020986:	55                   	push   ebp
c0020987:	55                   	push   ebp
c0020988:	8b 06                	mov    eax,DWORD PTR [esi]
c002098a:	52                   	push   edx
c002098b:	50                   	push   eax
c002098c:	e9 d3 01 00 00       	jmp    c0020b64 <Vm::x87Handler(regs*)+0xa35>
c0020991:	31 c0                	xor    eax,eax
c0020993:	80 fa 02             	cmp    dl,0x2
c0020996:	0f 85 f4 01 00 00    	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c002099c:	83 ec 0c             	sub    esp,0xc
c002099f:	6a 00                	push   0x0
c00209a1:	e8 4c f6 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00209a6:	59                   	pop    ecx
c00209a7:	5f                   	pop    edi
c00209a8:	e9 6a f9 ff ff       	jmp    c0020317 <Vm::x87Handler(regs*)+0x1e8>
c00209ad:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00209b1:	84 d2                	test   dl,dl
c00209b3:	75 2a                	jne    c00209df <Vm::x87Handler(regs*)+0x8b0>
c00209b5:	50                   	push   eax
c00209b6:	50                   	push   eax
c00209b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209ba:	ff 36                	push   DWORD PTR [esi]
c00209bc:	e8 c5 f3 ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c00209c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209c8:	89 c6                	mov    esi,eax
c00209ca:	89 d7                	mov    edi,edx
c00209cc:	e8 21 f6 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c00209d1:	57                   	push   edi
c00209d2:	56                   	push   esi
c00209d3:	52                   	push   edx
c00209d4:	50                   	push   eax
c00209d5:	e8 8e f5 ff ff       	call   c001ff68 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00209da:	e9 64 01 00 00       	jmp    c0020b43 <Vm::x87Handler(regs*)+0xa14>
c00209df:	80 fa 01             	cmp    dl,0x1
c00209e2:	75 11                	jne    c00209f5 <Vm::x87Handler(regs*)+0x8c6>
c00209e4:	50                   	push   eax
c00209e5:	50                   	push   eax
c00209e6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209e9:	ff 36                	push   DWORD PTR [esi]
c00209eb:	e8 96 f3 ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c00209f0:	e9 35 01 00 00       	jmp    c0020b2a <Vm::x87Handler(regs*)+0x9fb>
c00209f5:	80 fa 02             	cmp    dl,0x2
c00209f8:	0f 85 54 f9 ff ff    	jne    c0020352 <Vm::x87Handler(regs*)+0x223>
c00209fe:	55                   	push   ebp
c00209ff:	55                   	push   ebp
c0020a00:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a03:	ff 36                	push   DWORD PTR [esi]
c0020a05:	e8 7c f3 ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c0020a0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a11:	89 c6                	mov    esi,eax
c0020a13:	89 d7                	mov    edi,edx
c0020a15:	e8 d8 f5 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020a1a:	57                   	push   edi
c0020a1b:	56                   	push   esi
c0020a1c:	52                   	push   edx
c0020a1d:	50                   	push   eax
c0020a1e:	e8 f2 f4 ff ff       	call   c001ff15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a27:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020a2a:	83 c4 20             	add    esp,0x20
c0020a2d:	e9 74 f7 ff ff       	jmp    c00201a6 <Vm::x87Handler(regs*)+0x77>
c0020a32:	80 fa 04             	cmp    dl,0x4
c0020a35:	75 2a                	jne    c0020a61 <Vm::x87Handler(regs*)+0x932>
c0020a37:	51                   	push   ecx
c0020a38:	51                   	push   ecx
c0020a39:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a3c:	ff 36                	push   DWORD PTR [esi]
c0020a3e:	e8 43 f3 ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c0020a43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a4a:	89 c6                	mov    esi,eax
c0020a4c:	89 d7                	mov    edi,edx
c0020a4e:	e8 9f f5 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020a53:	57                   	push   edi
c0020a54:	56                   	push   esi
c0020a55:	52                   	push   edx
c0020a56:	50                   	push   eax
c0020a57:	e8 36 f5 ff ff       	call   c001ff92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a5c:	e9 e2 00 00 00       	jmp    c0020b43 <Vm::x87Handler(regs*)+0xa14>
c0020a61:	80 fa 05             	cmp    dl,0x5
c0020a64:	75 28                	jne    c0020a8e <Vm::x87Handler(regs*)+0x95f>
c0020a66:	83 ec 0c             	sub    esp,0xc
c0020a69:	6a 00                	push   0x0
c0020a6b:	e8 82 f5 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020a70:	89 c7                	mov    edi,eax
c0020a72:	89 d5                	mov    ebp,edx
c0020a74:	58                   	pop    eax
c0020a75:	5a                   	pop    edx
c0020a76:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a79:	ff 36                	push   DWORD PTR [esi]
c0020a7b:	e8 06 f3 ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c0020a80:	83 c4 10             	add    esp,0x10
c0020a83:	55                   	push   ebp
c0020a84:	57                   	push   edi
c0020a85:	52                   	push   edx
c0020a86:	50                   	push   eax
c0020a87:	e8 06 f5 ff ff       	call   c001ff92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a8c:	eb 60                	jmp    c0020aee <Vm::x87Handler(regs*)+0x9bf>
c0020a8e:	80 fa 06             	cmp    dl,0x6
c0020a91:	75 2a                	jne    c0020abd <Vm::x87Handler(regs*)+0x98e>
c0020a93:	51                   	push   ecx
c0020a94:	51                   	push   ecx
c0020a95:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a98:	ff 36                	push   DWORD PTR [esi]
c0020a9a:	e8 e7 f2 ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c0020a9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020aa6:	89 c6                	mov    esi,eax
c0020aa8:	89 d7                	mov    edi,edx
c0020aaa:	e8 43 f5 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020aaf:	57                   	push   edi
c0020ab0:	56                   	push   esi
c0020ab1:	52                   	push   edx
c0020ab2:	50                   	push   eax
c0020ab3:	e8 08 f5 ff ff       	call   c001ffc0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020ab8:	e9 86 00 00 00       	jmp    c0020b43 <Vm::x87Handler(regs*)+0xa14>
c0020abd:	31 c0                	xor    eax,eax
c0020abf:	80 fa 07             	cmp    dl,0x7
c0020ac2:	0f 85 c8 00 00 00    	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c0020ac8:	83 ec 0c             	sub    esp,0xc
c0020acb:	6a 00                	push   0x0
c0020acd:	e8 20 f5 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020ad2:	89 c7                	mov    edi,eax
c0020ad4:	89 d5                	mov    ebp,edx
c0020ad6:	58                   	pop    eax
c0020ad7:	5a                   	pop    edx
c0020ad8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020adb:	ff 36                	push   DWORD PTR [esi]
c0020add:	e8 a4 f2 ff ff       	call   c001fd86 <Vm::fpu64ToInternal(unsigned long long)>
c0020ae2:	83 c4 10             	add    esp,0x10
c0020ae5:	55                   	push   ebp
c0020ae6:	57                   	push   edi
c0020ae7:	52                   	push   edx
c0020ae8:	50                   	push   eax
c0020ae9:	e8 d2 f4 ff ff       	call   c001ffc0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020aee:	83 c4 0c             	add    esp,0xc
c0020af1:	eb 53                	jmp    c0020b46 <Vm::x87Handler(regs*)+0xa17>
c0020af3:	31 c0                	xor    eax,eax
c0020af5:	80 fa 02             	cmp    dl,0x2
c0020af8:	0f 85 92 00 00 00    	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c0020afe:	83 ec 0c             	sub    esp,0xc
c0020b01:	6a 00                	push   0x0
c0020b03:	e8 ea f4 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020b08:	59                   	pop    ecx
c0020b09:	5f                   	pop    edi
c0020b0a:	52                   	push   edx
c0020b0b:	50                   	push   eax
c0020b0c:	e8 27 f2 ff ff       	call   c001fd38 <Vm::fpuInternalTo64(unsigned long long)>
c0020b11:	eb 70                	jmp    c0020b83 <Vm::x87Handler(regs*)+0xa54>
c0020b13:	31 c0                	xor    eax,eax
c0020b15:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020b1a:	75 74                	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c0020b1c:	50                   	push   eax
c0020b1d:	50                   	push   eax
c0020b1e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020b21:	31 d2                	xor    edx,edx
c0020b23:	52                   	push   edx
c0020b24:	50                   	push   eax
c0020b25:	e8 f6 f2 ff ff       	call   c001fe20 <Vm::fpuLongToFloat(long long)>
c0020b2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b31:	89 c6                	mov    esi,eax
c0020b33:	89 d7                	mov    edi,edx
c0020b35:	e8 b8 f4 ff ff       	call   c001fff2 <Vm::fpuGetReg(int)>
c0020b3a:	57                   	push   edi
c0020b3b:	56                   	push   esi
c0020b3c:	52                   	push   edx
c0020b3d:	50                   	push   eax
c0020b3e:	e8 5e f4 ff ff       	call   c001ffa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020b43:	83 c4 1c             	add    esp,0x1c
c0020b46:	52                   	push   edx
c0020b47:	50                   	push   eax
c0020b48:	6a 00                	push   0x0
c0020b4a:	e8 e6 f4 ff ff       	call   c0020035 <Vm::fpuSetReg(int, unsigned long long)>
c0020b4f:	e9 f2 f7 ff ff       	jmp    c0020346 <Vm::x87Handler(regs*)+0x217>
c0020b54:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b58:	80 fa 05             	cmp    dl,0x5
c0020b5b:	75 11                	jne    c0020b6e <Vm::x87Handler(regs*)+0xa3f>
c0020b5d:	55                   	push   ebp
c0020b5e:	55                   	push   ebp
c0020b5f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b62:	ff 36                	push   DWORD PTR [esi]
c0020b64:	e8 81 f2 ff ff       	call   c001fdea <Vm::fpuULongToFloat(unsigned long long)>
c0020b69:	e9 cf f7 ff ff       	jmp    c002033d <Vm::x87Handler(regs*)+0x20e>
c0020b6e:	31 c0                	xor    eax,eax
c0020b70:	80 fa 07             	cmp    dl,0x7
c0020b73:	75 1b                	jne    c0020b90 <Vm::x87Handler(regs*)+0xa61>
c0020b75:	e8 63 f5 ff ff       	call   c00200dd <Vm::fpuPop()>
c0020b7a:	51                   	push   ecx
c0020b7b:	51                   	push   ecx
c0020b7c:	52                   	push   edx
c0020b7d:	50                   	push   eax
c0020b7e:	e8 0c f2 ff ff       	call   c001fd8f <Vm::fpuFloatToLong(unsigned long long)>
c0020b83:	83 c4 10             	add    esp,0x10
c0020b86:	89 06                	mov    DWORD PTR [esi],eax
c0020b88:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020b8b:	e9 f8 f7 ff ff       	jmp    c0020388 <Vm::x87Handler(regs*)+0x259>
c0020b90:	83 c4 1c             	add    esp,0x1c
c0020b93:	5b                   	pop    ebx
c0020b94:	5e                   	pop    esi
c0020b95:	5f                   	pop    edi
c0020b96:	5d                   	pop    ebp
c0020b97:	c3                   	ret    

c0020b98 <__static_initialization_and_destruction_0(int, int)>:
c0020b98:	83 ec 0c             	sub    esp,0xc
c0020b9b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020ba0:	75 1a                	jne    c0020bbc <__static_initialization_and_destruction_0(int, int)+0x24>
c0020ba2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020baa:	75 10                	jne    c0020bbc <__static_initialization_and_destruction_0(int, int)+0x24>
c0020bac:	83 ec 0c             	sub    esp,0xc
c0020baf:	68 a0 24 03 c0       	push   0xc00324a0
c0020bb4:	e8 c3 8a 00 00       	call   c002967c <Vm::_FPUState::_FPUState()>
c0020bb9:	83 c4 10             	add    esp,0x10
c0020bbc:	90                   	nop
c0020bbd:	83 c4 0c             	add    esp,0xc
c0020bc0:	c3                   	ret    

c0020bc1 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020bc1:	83 ec 0c             	sub    esp,0xc
c0020bc4:	83 ec 08             	sub    esp,0x8
c0020bc7:	68 ff ff 00 00       	push   0xffff
c0020bcc:	6a 01                	push   0x1
c0020bce:	e8 c5 ff ff ff       	call   c0020b98 <__static_initialization_and_destruction_0(int, int)>
c0020bd3:	83 c4 10             	add    esp,0x10
c0020bd6:	83 c4 0c             	add    esp,0xc
c0020bd9:	c3                   	ret    

c0020bda <FAT::getName()>:
c0020bda:	b8 8c d2 02 c0       	mov    eax,0xc002d28c
c0020bdf:	c3                   	ret    

c0020be0 <FAT::tell(void*, unsigned long long*)>:
c0020be0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020be5:	75 06                	jne    c0020bed <FAT::tell(void*, unsigned long long*)+0xd>
c0020be7:	b8 04 00 00 00       	mov    eax,0x4
c0020bec:	c3                   	ret    
c0020bed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020bf2:	75 06                	jne    c0020bfa <FAT::tell(void*, unsigned long long*)+0x1a>
c0020bf4:	b8 04 00 00 00       	mov    eax,0x4
c0020bf9:	c3                   	ret    
c0020bfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bfe:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020c01:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020c04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c08:	89 01                	mov    DWORD PTR [ecx],eax
c0020c0a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c0d:	b8 00 00 00 00       	mov    eax,0x0
c0020c12:	c3                   	ret    
c0020c13:	90                   	nop

c0020c14 <FAT::stat(void*, unsigned long long*)>:
c0020c14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020c19:	75 06                	jne    c0020c21 <FAT::stat(void*, unsigned long long*)+0xd>
c0020c1b:	b8 04 00 00 00       	mov    eax,0x4
c0020c20:	c3                   	ret    
c0020c21:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020c26:	75 06                	jne    c0020c2e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020c28:	b8 04 00 00 00       	mov    eax,0x4
c0020c2d:	c3                   	ret    
c0020c2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c32:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020c35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020c38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c3c:	89 01                	mov    DWORD PTR [ecx],eax
c0020c3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c41:	b8 00 00 00 00       	mov    eax,0x0
c0020c46:	c3                   	ret    
c0020c47:	90                   	nop

c0020c48 <FAT::~FAT()>:
c0020c48:	83 ec 0c             	sub    esp,0xc
c0020c4b:	ba 1c d3 02 c0       	mov    edx,0xc002d31c
c0020c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c54:	89 10                	mov    DWORD PTR [eax],edx
c0020c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c5a:	83 ec 0c             	sub    esp,0xc
c0020c5d:	50                   	push   eax
c0020c5e:	e8 43 25 ff ff       	call   c00131a6 <Filesystem::~Filesystem()>
c0020c63:	83 c4 10             	add    esp,0x10
c0020c66:	90                   	nop
c0020c67:	83 c4 0c             	add    esp,0xc
c0020c6a:	c3                   	ret    
c0020c6b:	90                   	nop

c0020c6c <FAT::~FAT()>:
c0020c6c:	83 ec 0c             	sub    esp,0xc
c0020c6f:	83 ec 0c             	sub    esp,0xc
c0020c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c76:	e8 cd ff ff ff       	call   c0020c48 <FAT::~FAT()>
c0020c7b:	83 c4 10             	add    esp,0x10
c0020c7e:	83 ec 08             	sub    esp,0x8
c0020c81:	6a 08                	push   0x8
c0020c83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c87:	e8 0b 21 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0020c8c:	83 c4 10             	add    esp,0x10
c0020c8f:	83 c4 0c             	add    esp,0xc
c0020c92:	c3                   	ret    
c0020c93:	90                   	nop

c0020c94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020c94:	83 ec 1c             	sub    esp,0x1c
c0020c97:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020c9e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020ca3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ca7:	8b 04 85 20 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdae0]
c0020cae:	83 f8 ff             	cmp    eax,0xffffffff
c0020cb1:	75 34                	jne    c0020ce7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020cb3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020cb7:	88 c2                	mov    dl,al
c0020cb9:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c0020cbe:	01 d0                	add    eax,edx
c0020cc0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020cc4:	8b 15 00 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032500
c0020cca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cce:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020cd5:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c0020cda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020cde:	89 14 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],edx
c0020ce5:	eb 17                	jmp    c0020cfe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020ce7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020ceb:	88 c2                	mov    dl,al
c0020ced:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cf1:	8b 04 85 20 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdae0]
c0020cf8:	01 d0                	add    eax,edx
c0020cfa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020cfe:	83 ec 04             	sub    esp,0x4
c0020d01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d09:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020d0d:	50                   	push   eax
c0020d0e:	e8 2f 60 fe ff       	call   c0006d42 <f_getlabel>
c0020d13:	83 c4 10             	add    esp,0x10
c0020d16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d1a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020d1f:	75 07                	jne    c0020d28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020d21:	b8 00 00 00 00       	mov    eax,0x0
c0020d26:	eb 05                	jmp    c0020d2d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020d28:	b8 01 00 00 00       	mov    eax,0x1
c0020d2d:	83 c4 1c             	add    esp,0x1c
c0020d30:	c3                   	ret    
c0020d31:	90                   	nop

c0020d32 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020d32:	57                   	push   edi
c0020d33:	83 ec 58             	sub    esp,0x58
c0020d36:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020d3e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020d42:	b9 0f 00 00 00       	mov    ecx,0xf
c0020d47:	b8 00 00 00 00       	mov    eax,0x0
c0020d4c:	fc                   	cld    
c0020d4d:	89 d7                	mov    edi,edx
c0020d4f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020d51:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d55:	8b 04 85 20 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdae0]
c0020d5c:	83 f8 ff             	cmp    eax,0xffffffff
c0020d5f:	75 34                	jne    c0020d95 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020d61:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d65:	88 c2                	mov    dl,al
c0020d67:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c0020d6c:	01 d0                	add    eax,edx
c0020d6e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d72:	8b 15 00 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032500
c0020d78:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d7c:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020d83:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c0020d88:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020d8c:	89 14 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],edx
c0020d93:	eb 17                	jmp    c0020dac <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020d95:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d99:	88 c2                	mov    dl,al
c0020d9b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d9f:	8b 04 85 20 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdae0]
c0020da6:	01 d0                	add    eax,edx
c0020da8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dac:	83 ec 08             	sub    esp,0x8
c0020daf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020db3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020db7:	50                   	push   eax
c0020db8:	e8 ab fb fd ff       	call   c0000968 <strcat>
c0020dbd:	83 c4 10             	add    esp,0x10
c0020dc0:	83 ec 0c             	sub    esp,0xc
c0020dc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020dc7:	50                   	push   eax
c0020dc8:	e8 63 61 fe ff       	call   c0006f30 <f_setlabel>
c0020dcd:	83 c4 10             	add    esp,0x10
c0020dd0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020dd4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020dd9:	75 07                	jne    c0020de2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020ddb:	b8 00 00 00 00       	mov    eax,0x0
c0020de0:	eb 05                	jmp    c0020de7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020de2:	b8 01 00 00 00       	mov    eax,0x1
c0020de7:	83 c4 58             	add    esp,0x58
c0020dea:	5f                   	pop    edi
c0020deb:	c3                   	ret    

c0020dec <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020dec:	83 ec 2c             	sub    esp,0x2c
c0020def:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020df7:	83 ec 08             	sub    esp,0x8
c0020dfa:	68 b0 d2 02 c0       	push   0xc002d2b0
c0020dff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e03:	e8 ac fa fd ff       	call   c00008b4 <strcmp>
c0020e08:	83 c4 10             	add    esp,0x10
c0020e0b:	85 c0                	test   eax,eax
c0020e0d:	0f 94 c0             	sete   al
c0020e10:	84 c0                	test   al,al
c0020e12:	74 0d                	je     c0020e21 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020e14:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e1c:	e9 a6 00 00 00       	jmp    c0020ec7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e21:	83 ec 08             	sub    esp,0x8
c0020e24:	68 a2 d2 02 c0       	push   0xc002d2a2
c0020e29:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e2d:	e8 82 fa fd ff       	call   c00008b4 <strcmp>
c0020e32:	83 c4 10             	add    esp,0x10
c0020e35:	85 c0                	test   eax,eax
c0020e37:	0f 94 c0             	sete   al
c0020e3a:	84 c0                	test   al,al
c0020e3c:	74 0a                	je     c0020e48 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020e3e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e46:	eb 7f                	jmp    c0020ec7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e48:	83 ec 08             	sub    esp,0x8
c0020e4b:	68 a8 d2 02 c0       	push   0xc002d2a8
c0020e50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e54:	e8 5b fa fd ff       	call   c00008b4 <strcmp>
c0020e59:	83 c4 10             	add    esp,0x10
c0020e5c:	85 c0                	test   eax,eax
c0020e5e:	0f 94 c0             	sete   al
c0020e61:	84 c0                	test   al,al
c0020e63:	74 0a                	je     c0020e6f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020e65:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e6d:	eb 58                	jmp    c0020ec7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e6f:	83 ec 08             	sub    esp,0x8
c0020e72:	68 ec 9d 02 c0       	push   0xc0029dec
c0020e77:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e7b:	e8 34 fa fd ff       	call   c00008b4 <strcmp>
c0020e80:	83 c4 10             	add    esp,0x10
c0020e83:	85 c0                	test   eax,eax
c0020e85:	0f 94 c0             	sete   al
c0020e88:	84 c0                	test   al,al
c0020e8a:	74 0a                	je     c0020e96 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020e8c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020e94:	eb 31                	jmp    c0020ec7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e96:	83 ec 08             	sub    esp,0x8
c0020e99:	68 ae d2 02 c0       	push   0xc002d2ae
c0020e9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020ea2:	e8 0d fa fd ff       	call   c00008b4 <strcmp>
c0020ea7:	83 c4 10             	add    esp,0x10
c0020eaa:	85 c0                	test   eax,eax
c0020eac:	0f 94 c0             	sete   al
c0020eaf:	84 c0                	test   al,al
c0020eb1:	74 0a                	je     c0020ebd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020eb3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020ebb:	eb 0a                	jmp    c0020ec7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ebd:	b8 08 00 00 00       	mov    eax,0x8
c0020ec2:	e9 04 01 00 00       	jmp    c0020fcb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020ec7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020ece:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020ed3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ed7:	8b 04 85 20 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdae0]
c0020ede:	83 f8 ff             	cmp    eax,0xffffffff
c0020ee1:	75 34                	jne    c0020f17 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020ee3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020ee7:	88 c2                	mov    dl,al
c0020ee9:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c0020eee:	01 d0                	add    eax,edx
c0020ef0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020ef4:	8b 15 00 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032500
c0020efa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020efe:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020f05:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c0020f0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020f0e:	89 14 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],edx
c0020f15:	eb 17                	jmp    c0020f2e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020f17:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020f1b:	88 c2                	mov    dl,al
c0020f1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f21:	8b 04 85 20 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdae0]
c0020f28:	01 d0                	add    eax,edx
c0020f2a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020f2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f32:	88 04 24             	mov    BYTE PTR [esp],al
c0020f35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020f39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f45:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020f4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020f52:	83 ec 0c             	sub    esp,0xc
c0020f55:	68 00 20 00 00       	push   0x2000
c0020f5a:	e8 61 e9 fe ff       	call   c000f8c0 <malloc>
c0020f5f:	83 c4 10             	add    esp,0x10
c0020f62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f66:	68 00 20 00 00       	push   0x2000
c0020f6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f6f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f73:	50                   	push   eax
c0020f74:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020f78:	50                   	push   eax
c0020f79:	e8 fd 63 fe ff       	call   c000737b <f_mkfs>
c0020f7e:	83 c4 10             	add    esp,0x10
c0020f81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020f8a:	75 07                	jne    c0020f93 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020f8c:	b8 00 00 00 00       	mov    eax,0x0
c0020f91:	eb 38                	jmp    c0020fcb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f93:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020f98:	75 17                	jne    c0020fb1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020f9a:	83 ec 0c             	sub    esp,0xc
c0020f9d:	68 ec d2 02 c0       	push   0xc002d2ec
c0020fa2:	e8 d0 1e ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0020fa7:	83 c4 10             	add    esp,0x10
c0020faa:	b8 09 00 00 00       	mov    eax,0x9
c0020faf:	eb 1a                	jmp    c0020fcb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020fb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fb5:	83 ec 08             	sub    esp,0x8
c0020fb8:	50                   	push   eax
c0020fb9:	68 b4 d2 02 c0       	push   0xc002d2b4
c0020fbe:	e8 b4 1e ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0020fc3:	83 c4 10             	add    esp,0x10
c0020fc6:	b8 01 00 00 00       	mov    eax,0x1
c0020fcb:	83 c4 2c             	add    esp,0x2c
c0020fce:	c3                   	ret    
c0020fcf:	90                   	nop

c0020fd0 <FAT::tryMount(LogicalDisk*, int)>:
c0020fd0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020fd6:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c0020fdb:	83 f8 14             	cmp    eax,0x14
c0020fde:	75 17                	jne    c0020ff7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020fe0:	83 ec 0c             	sub    esp,0xc
c0020fe3:	68 c6 d2 02 c0       	push   0xc002d2c6
c0020fe8:	e8 78 98 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0020fed:	83 c4 10             	add    esp,0x10
c0020ff0:	b0 00                	mov    al,0x0
c0020ff2:	e9 d7 01 00 00       	jmp    c00211ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ff7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020ffe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021004:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002100a:	3d 00 02 00 00       	cmp    eax,0x200
c002100f:	74 07                	je     c0021018 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0021011:	b0 00                	mov    al,0x0
c0021013:	e9 b6 01 00 00       	jmp    c00211ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021018:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0021020:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021027:	8b 04 85 20 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdae0]
c002102e:	83 f8 ff             	cmp    eax,0xffffffff
c0021031:	74 07                	je     c002103a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0021033:	b0 01                	mov    al,0x1
c0021035:	e9 94 01 00 00       	jmp    c00211ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002103a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0021044:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002104c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0021053:	88 c2                	mov    dl,al
c0021055:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c002105a:	01 d0                	add    eax,edx
c002105c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0021063:	8b 15 00 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032500
c0021069:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021070:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0021077:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c002107c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021083:	89 14 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],edx
c002108a:	83 ec 0c             	sub    esp,0xc
c002108d:	68 54 02 00 00       	push   0x254
c0021092:	e8 29 e8 fe ff       	call   c000f8c0 <malloc>
c0021097:	83 c4 10             	add    esp,0x10
c002109a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00210a1:	83 ec 04             	sub    esp,0x4
c00210a4:	6a 00                	push   0x0
c00210a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00210ad:	50                   	push   eax
c00210ae:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00210b5:	e8 7f 3e fe ff       	call   c0004f39 <f_mount>
c00210ba:	83 c4 10             	add    esp,0x10
c00210bd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00210c4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00210cc:	74 19                	je     c00210e7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00210ce:	83 ec 0c             	sub    esp,0xc
c00210d1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00210d8:	e8 03 e8 fe ff       	call   c000f8e0 <rfree>
c00210dd:	83 c4 10             	add    esp,0x10
c00210e0:	b0 00                	mov    al,0x0
c00210e2:	e9 e7 00 00 00       	jmp    c00211ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00210e7:	83 ec 04             	sub    esp,0x4
c00210ea:	68 00 01 00 00       	push   0x100
c00210ef:	6a 00                	push   0x0
c00210f1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210f8:	50                   	push   eax
c00210f9:	e8 6e f6 fd ff       	call   c000076c <memset>
c00210fe:	83 c4 10             	add    esp,0x10
c0021101:	83 ec 08             	sub    esp,0x8
c0021104:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002110b:	50                   	push   eax
c002110c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021113:	50                   	push   eax
c0021114:	e8 4f f8 fd ff       	call   c0000968 <strcat>
c0021119:	83 c4 10             	add    esp,0x10
c002111c:	83 ec 08             	sub    esp,0x8
c002111f:	68 d4 d2 02 c0       	push   0xc002d2d4
c0021124:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002112b:	50                   	push   eax
c002112c:	e8 37 f8 fd ff       	call   c0000968 <strcat>
c0021131:	83 c4 10             	add    esp,0x10
c0021134:	83 ec 04             	sub    esp,0x4
c0021137:	6a 01                	push   0x1
c0021139:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0021140:	50                   	push   eax
c0021141:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021145:	50                   	push   eax
c0021146:	e8 50 3e fe ff       	call   c0004f9b <f_open>
c002114b:	83 c4 10             	add    esp,0x10
c002114e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021155:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002115c:	85 c0                	test   eax,eax
c002115e:	74 0a                	je     c002116a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0021160:	78 2d                	js     c002118f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021162:	83 e8 04             	sub    eax,0x4
c0021165:	83 f8 01             	cmp    eax,0x1
c0021168:	77 25                	ja     c002118f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002116a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021172:	83 ec 0c             	sub    esp,0xc
c0021175:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021179:	50                   	push   eax
c002117a:	e8 6e 49 fe ff       	call   c0005aed <f_close>
c002117f:	83 c4 10             	add    esp,0x10
c0021182:	90                   	nop
c0021183:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002118b:	74 3a                	je     c00211c7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002118d:	eb 2d                	jmp    c00211bc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002118f:	83 ec 0c             	sub    esp,0xc
c0021192:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021199:	e8 42 e7 fe ff       	call   c000f8e0 <rfree>
c002119e:	83 c4 10             	add    esp,0x10
c00211a1:	83 ec 04             	sub    esp,0x4
c00211a4:	6a 00                	push   0x0
c00211a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00211ad:	50                   	push   eax
c00211ae:	6a 00                	push   0x0
c00211b0:	e8 84 3d fe ff       	call   c0004f39 <f_mount>
c00211b5:	83 c4 10             	add    esp,0x10
c00211b8:	b0 00                	mov    al,0x0
c00211ba:	eb 12                	jmp    c00211ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211bc:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c00211c1:	40                   	inc    eax
c00211c2:	a3 00 25 03 c0       	mov    ds:0xc0032500,eax
c00211c7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00211ce:	81 c4 6c 03 00 00    	add    esp,0x36c
c00211d4:	c3                   	ret    
c00211d5:	90                   	nop

c00211d6 <FAT::getFileFirstSector(char const*)>:
c00211d6:	53                   	push   ebx
c00211d7:	83 ec 28             	sub    esp,0x28
c00211da:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00211e2:	83 ec 0c             	sub    esp,0xc
c00211e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211e9:	e8 d2 e6 fe ff       	call   c000f8c0 <malloc>
c00211ee:	83 c4 10             	add    esp,0x10
c00211f1:	89 c3                	mov    ebx,eax
c00211f3:	a1 30 24 03 c0       	mov    eax,ds:0xc0032430
c00211f8:	83 ec 04             	sub    esp,0x4
c00211fb:	50                   	push   eax
c00211fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021200:	53                   	push   ebx
c0021201:	e8 d0 21 ff ff       	call   c00133d6 <File::File(char const*, Process*)>
c0021206:	83 c4 10             	add    esp,0x10
c0021209:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002120d:	83 ec 08             	sub    esp,0x8
c0021210:	6a 01                	push   0x1
c0021212:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021216:	e8 1f 22 ff ff       	call   c001343a <File::open(FileOpenMode)>
c002121b:	83 c4 10             	add    esp,0x10
c002121e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021222:	8b 00                	mov    eax,DWORD PTR [eax]
c0021224:	83 c0 0c             	add    eax,0xc
c0021227:	8b 00                	mov    eax,DWORD PTR [eax]
c0021229:	83 ec 0c             	sub    esp,0xc
c002122c:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021230:	52                   	push   edx
c0021231:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021235:	52                   	push   edx
c0021236:	6a 00                	push   0x0
c0021238:	6a 04                	push   0x4
c002123a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002123e:	ff d0                	call   eax
c0021240:	83 c4 20             	add    esp,0x20
c0021243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021247:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002124d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021251:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021255:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021258:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002125b:	83 ec 04             	sub    esp,0x4
c002125e:	52                   	push   edx
c002125f:	50                   	push   eax
c0021260:	68 df d2 02 c0       	push   0xc002d2df
c0021265:	e8 0d 1c ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c002126a:	83 c4 10             	add    esp,0x10
c002126d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021271:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021274:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021277:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002127b:	83 ec 0c             	sub    esp,0xc
c002127e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021282:	e8 11 22 ff ff       	call   c0013498 <File::close()>
c0021287:	83 c4 10             	add    esp,0x10
c002128a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002128e:	ba 00 00 00 00       	mov    edx,0x0
c0021293:	83 c4 28             	add    esp,0x28
c0021296:	5b                   	pop    ebx
c0021297:	c3                   	ret    

c0021298 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021298:	81 ec 4c 02 00 00    	sub    esp,0x24c
c002129e:	83 bc 24 54 02 00 00 00 	cmp    DWORD PTR [esp+0x254],0x0
c00212a6:	74 0a                	je     c00212b2 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00212a8:	83 bc 24 60 02 00 00 00 	cmp    DWORD PTR [esp+0x260],0x0
c00212b0:	75 0a                	jne    c00212bc <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00212b2:	b8 04 00 00 00       	mov    eax,0x4
c00212b7:	e9 05 01 00 00       	jmp    c00213c1 <FAT::readDir(void*, unsigned long, void*, int*)+0x129>
c00212bc:	83 ec 08             	sub    esp,0x8
c00212bf:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00212c6:	50                   	push   eax
c00212c7:	ff b4 24 60 02 00 00 	push   DWORD PTR [esp+0x260]
c00212ce:	e8 24 4e fe ff       	call   c00060f7 <f_readdir>
c00212d3:	83 c4 10             	add    esp,0x10
c00212d6:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00212dd:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00212e4:	83 ec 0c             	sub    esp,0xc
c00212e7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00212ee:	83 c0 1a             	add    eax,0x1a
c00212f1:	50                   	push   eax
c00212f2:	e8 91 f4 fd ff       	call   c0000788 <strlen>
c00212f7:	83 c4 10             	add    esp,0x10
c00212fa:	ba 00 00 00 00       	mov    edx,0x0
c00212ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021303:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021307:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002130e:	0f b6 c0             	movzx  eax,al
c0021311:	83 e0 10             	and    eax,0x10
c0021314:	74 07                	je     c002131d <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c0021316:	b8 02 00 00 00       	mov    eax,0x2
c002131b:	eb 05                	jmp    c0021322 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c002131d:	b8 01 00 00 00       	mov    eax,0x1
c0021322:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021326:	83 ec 08             	sub    esp,0x8
c0021329:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021330:	83 c0 1a             	add    eax,0x1a
c0021333:	50                   	push   eax
c0021334:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021338:	83 c0 10             	add    eax,0x10
c002133b:	50                   	push   eax
c002133c:	e8 e7 f4 fd ff       	call   c0000828 <strcpy>
c0021341:	83 c4 10             	add    esp,0x10
c0021344:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c002134b:	89 84 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],eax
c0021352:	8d 44 24 04          	lea    eax,[esp+0x4]
c0021356:	89 84 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],eax
c002135d:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c0021364:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002136b:	83 ec 04             	sub    esp,0x4
c002136e:	ff b4 24 34 02 00 00 	push   DWORD PTR [esp+0x234]
c0021375:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002137c:	ff b4 24 44 02 00 00 	push   DWORD PTR [esp+0x244]
c0021383:	e8 28 fa fd ff       	call   c0000db0 <realmemcpy>
c0021388:	83 c4 10             	add    esp,0x10
c002138b:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
c0021392:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021398:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002139f:	84 c0                	test   al,al
c00213a1:	75 07                	jne    c00213aa <FAT::readDir(void*, unsigned long, void*, int*)+0x112>
c00213a3:	b8 07 00 00 00       	mov    eax,0x7
c00213a8:	eb 17                	jmp    c00213c1 <FAT::readDir(void*, unsigned long, void*, int*)+0x129>
c00213aa:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00213b1:	85 c0                	test   eax,eax
c00213b3:	75 07                	jne    c00213bc <FAT::readDir(void*, unsigned long, void*, int*)+0x124>
c00213b5:	b8 00 00 00 00       	mov    eax,0x0
c00213ba:	eb 05                	jmp    c00213c1 <FAT::readDir(void*, unsigned long, void*, int*)+0x129>
c00213bc:	b8 01 00 00 00       	mov    eax,0x1
c00213c1:	81 c4 4c 02 00 00    	add    esp,0x24c
c00213c7:	c3                   	ret    

c00213c8 <FAT::read(void*, unsigned long, void*, int*)>:
c00213c8:	83 ec 1c             	sub    esp,0x1c
c00213cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00213d0:	74 07                	je     c00213d9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00213d2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00213d7:	75 07                	jne    c00213e0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00213d9:	b8 04 00 00 00       	mov    eax,0x4
c00213de:	eb 3d                	jmp    c002141d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00213e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213e4:	50                   	push   eax
c00213e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00213ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213f1:	e8 e1 3f fe ff       	call   c00053d7 <f_read>
c00213f6:	83 c4 10             	add    esp,0x10
c00213f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021401:	89 c2                	mov    edx,eax
c0021403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021407:	89 10                	mov    DWORD PTR [eax],edx
c0021409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002140d:	85 c0                	test   eax,eax
c002140f:	75 07                	jne    c0021418 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021411:	b8 00 00 00 00       	mov    eax,0x0
c0021416:	eb 05                	jmp    c002141d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021418:	b8 01 00 00 00       	mov    eax,0x1
c002141d:	83 c4 1c             	add    esp,0x1c
c0021420:	c3                   	ret    
c0021421:	90                   	nop

c0021422 <FAT::write(void*, unsigned long, void*, int*)>:
c0021422:	83 ec 1c             	sub    esp,0x1c
c0021425:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002142a:	74 07                	je     c0021433 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002142c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021431:	75 07                	jne    c002143a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0021433:	b8 04 00 00 00       	mov    eax,0x4
c0021438:	eb 3d                	jmp    c0021477 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002143a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002143e:	50                   	push   eax
c002143f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021443:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021447:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002144b:	e8 07 42 fe ff       	call   c0005657 <f_write>
c0021450:	83 c4 10             	add    esp,0x10
c0021453:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021457:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002145b:	89 c2                	mov    edx,eax
c002145d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021461:	89 10                	mov    DWORD PTR [eax],edx
c0021463:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021467:	85 c0                	test   eax,eax
c0021469:	75 07                	jne    c0021472 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002146b:	b8 00 00 00 00       	mov    eax,0x0
c0021470:	eb 05                	jmp    c0021477 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021472:	b8 01 00 00 00       	mov    eax,0x1
c0021477:	83 c4 1c             	add    esp,0x1c
c002147a:	c3                   	ret    
c002147b:	90                   	nop

c002147c <FAT::close(void*)>:
c002147c:	83 ec 1c             	sub    esp,0x1c
c002147f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021484:	75 07                	jne    c002148d <FAT::close(void*)+0x11>
c0021486:	b8 04 00 00 00       	mov    eax,0x4
c002148b:	eb 36                	jmp    c00214c3 <FAT::close(void*)+0x47>
c002148d:	83 ec 0c             	sub    esp,0xc
c0021490:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021494:	e8 54 46 fe ff       	call   c0005aed <f_close>
c0021499:	83 c4 10             	add    esp,0x10
c002149c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214a0:	83 ec 0c             	sub    esp,0xc
c00214a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214a7:	e8 24 e4 fe ff       	call   c000f8d0 <free>
c00214ac:	83 c4 10             	add    esp,0x10
c00214af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214b3:	85 c0                	test   eax,eax
c00214b5:	75 07                	jne    c00214be <FAT::close(void*)+0x42>
c00214b7:	b8 00 00 00 00       	mov    eax,0x0
c00214bc:	eb 05                	jmp    c00214c3 <FAT::close(void*)+0x47>
c00214be:	b8 01 00 00 00       	mov    eax,0x1
c00214c3:	83 c4 1c             	add    esp,0x1c
c00214c6:	c3                   	ret    
c00214c7:	90                   	nop

c00214c8 <FAT::closeDir(void*)>:
c00214c8:	83 ec 1c             	sub    esp,0x1c
c00214cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00214d0:	75 07                	jne    c00214d9 <FAT::closeDir(void*)+0x11>
c00214d2:	b8 04 00 00 00       	mov    eax,0x4
c00214d7:	eb 36                	jmp    c002150f <FAT::closeDir(void*)+0x47>
c00214d9:	83 ec 0c             	sub    esp,0xc
c00214dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214e0:	e8 f0 4b fe ff       	call   c00060d5 <f_closedir>
c00214e5:	83 c4 10             	add    esp,0x10
c00214e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214ec:	83 ec 0c             	sub    esp,0xc
c00214ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214f3:	e8 d8 e3 fe ff       	call   c000f8d0 <free>
c00214f8:	83 c4 10             	add    esp,0x10
c00214fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214ff:	85 c0                	test   eax,eax
c0021501:	75 07                	jne    c002150a <FAT::closeDir(void*)+0x42>
c0021503:	b8 00 00 00 00       	mov    eax,0x0
c0021508:	eb 05                	jmp    c002150f <FAT::closeDir(void*)+0x47>
c002150a:	b8 01 00 00 00       	mov    eax,0x1
c002150f:	83 c4 1c             	add    esp,0x1c
c0021512:	c3                   	ret    
c0021513:	90                   	nop

c0021514 <FAT::seek(void*, unsigned long long)>:
c0021514:	83 ec 2c             	sub    esp,0x2c
c0021517:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002151b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002151f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021523:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021527:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002152c:	75 07                	jne    c0021535 <FAT::seek(void*, unsigned long long)+0x21>
c002152e:	b8 04 00 00 00       	mov    eax,0x4
c0021533:	eb 2f                	jmp    c0021564 <FAT::seek(void*, unsigned long long)+0x50>
c0021535:	83 ec 04             	sub    esp,0x4
c0021538:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002153c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021540:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021544:	e8 d3 45 fe ff       	call   c0005b1c <f_lseek>
c0021549:	83 c4 10             	add    esp,0x10
c002154c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021554:	85 c0                	test   eax,eax
c0021556:	75 07                	jne    c002155f <FAT::seek(void*, unsigned long long)+0x4b>
c0021558:	b8 00 00 00 00       	mov    eax,0x0
c002155d:	eb 05                	jmp    c0021564 <FAT::seek(void*, unsigned long long)+0x50>
c002155f:	b8 01 00 00 00       	mov    eax,0x1
c0021564:	83 c4 2c             	add    esp,0x2c
c0021567:	c3                   	ret    

c0021568 <fatWrapperReadDisk>:
c0021568:	83 ec 1c             	sub    esp,0x1c
c002156b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002156f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021573:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021577:	89 04 24             	mov    DWORD PTR [esp],eax
c002157a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002157e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021582:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021587:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c002158e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021592:	83 ec 0c             	sub    esp,0xc
c0021595:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021599:	52                   	push   edx
c002159a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002159e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00215a2:	50                   	push   eax
c00215a3:	e8 5a 52 ff ff       	call   c0016802 <LogicalDisk::read(unsigned long long, int, void*)>
c00215a8:	83 c4 20             	add    esp,0x20
c00215ab:	83 c4 1c             	add    esp,0x1c
c00215ae:	c3                   	ret    

c00215af <fatWrapperWriteDisk>:
c00215af:	83 ec 1c             	sub    esp,0x1c
c00215b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215b6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00215ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00215be:	89 04 24             	mov    DWORD PTR [esp],eax
c00215c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00215c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00215c9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215ce:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c00215d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00215d9:	83 ec 0c             	sub    esp,0xc
c00215dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215e0:	52                   	push   edx
c00215e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00215e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00215e9:	50                   	push   eax
c00215ea:	e8 7f 52 ff ff       	call   c001686e <LogicalDisk::write(unsigned long long, int, void*)>
c00215ef:	83 c4 20             	add    esp,0x20
c00215f2:	83 c4 1c             	add    esp,0x1c
c00215f5:	c3                   	ret    

c00215f6 <fatWrapperIoctl>:
c00215f6:	53                   	push   ebx
c00215f7:	83 ec 28             	sub    esp,0x28
c00215fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00215fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021602:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021606:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002160a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002160f:	75 31                	jne    c0021642 <fatWrapperIoctl+0x4c>
c0021611:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021615:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021619:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002161e:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c0021625:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002162b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021631:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021635:	66 89 02             	mov    WORD PTR [edx],ax
c0021638:	b8 00 00 00 00       	mov    eax,0x0
c002163d:	e9 b2 00 00 00       	jmp    c00216f4 <fatWrapperIoctl+0xfe>
c0021642:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021647:	75 6a                	jne    c00216b3 <fatWrapperIoctl+0xbd>
c0021649:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002164d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021651:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021656:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c002165d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021663:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021669:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002166f:	89 c8                	mov    eax,ecx
c0021671:	89 da                	mov    edx,ebx
c0021673:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021677:	c1 e0 0a             	shl    eax,0xa
c002167a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002167f:	8b 0c 8d e0 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b20]
c0021686:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002168c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021692:	89 cb                	mov    ebx,ecx
c0021694:	c1 fb 1f             	sar    ebx,0x1f
c0021697:	53                   	push   ebx
c0021698:	51                   	push   ecx
c0021699:	52                   	push   edx
c002169a:	50                   	push   eax
c002169b:	e8 94 5b 00 00       	call   c0027234 <__udivdi3>
c00216a0:	83 c4 10             	add    esp,0x10
c00216a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00216a7:	89 01                	mov    DWORD PTR [ecx],eax
c00216a9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00216ac:	b8 00 00 00 00       	mov    eax,0x0
c00216b1:	eb 41                	jmp    c00216f4 <fatWrapperIoctl+0xfe>
c00216b3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00216b8:	75 07                	jne    c00216c1 <fatWrapperIoctl+0xcb>
c00216ba:	b8 00 00 00 00       	mov    eax,0x0
c00216bf:	eb 33                	jmp    c00216f4 <fatWrapperIoctl+0xfe>
c00216c1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00216c6:	75 19                	jne    c00216e1 <fatWrapperIoctl+0xeb>
c00216c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00216d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00216d4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00216da:	b8 00 00 00 00       	mov    eax,0x0
c00216df:	eb 13                	jmp    c00216f4 <fatWrapperIoctl+0xfe>
c00216e1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00216e6:	75 07                	jne    c00216ef <fatWrapperIoctl+0xf9>
c00216e8:	b8 00 00 00 00       	mov    eax,0x0
c00216ed:	eb 05                	jmp    c00216f4 <fatWrapperIoctl+0xfe>
c00216ef:	b8 04 00 00 00       	mov    eax,0x4
c00216f4:	83 c4 28             	add    esp,0x28
c00216f7:	5b                   	pop    ebx
c00216f8:	c3                   	ret    
c00216f9:	90                   	nop

c00216fa <FAT::FAT()>:
c00216fa:	83 ec 1c             	sub    esp,0x1c
c00216fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021701:	83 ec 0c             	sub    esp,0xc
c0021704:	50                   	push   eax
c0021705:	e8 78 1a ff ff       	call   c0013182 <Filesystem::Filesystem()>
c002170a:	83 c4 10             	add    esp,0x10
c002170d:	ba 1c d3 02 c0       	mov    edx,0xc002d31c
c0021712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021716:	89 10                	mov    DWORD PTR [eax],edx
c0021718:	c7 05 00 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032500,0x0
c0021722:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002172a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002172f:	7f 15                	jg     c0021746 <FAT::FAT()+0x4c>
c0021731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021735:	c7 04 85 20 25 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdae0],0xffffffff
c0021740:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021744:	eb e4                	jmp    c002172a <FAT::FAT()+0x30>
c0021746:	90                   	nop
c0021747:	83 c4 1c             	add    esp,0x1c
c002174a:	c3                   	ret    
c002174b:	90                   	nop

c002174c <FAT::fixFilepath(char*)>:
c002174c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021750:	8a 00                	mov    al,BYTE PTR [eax]
c0021752:	3c 40                	cmp    al,0x40
c0021754:	7e 2c                	jle    c0021782 <FAT::fixFilepath(char*)+0x36>
c0021756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002175a:	8a 00                	mov    al,BYTE PTR [eax]
c002175c:	83 e8 41             	sub    eax,0x41
c002175f:	88 c2                	mov    dl,al
c0021761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021765:	88 10                	mov    BYTE PTR [eax],dl
c0021767:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002176b:	8a 00                	mov    al,BYTE PTR [eax]
c002176d:	0f be c0             	movsx  eax,al
c0021770:	8b 04 85 20 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdae0]
c0021777:	83 c0 30             	add    eax,0x30
c002177a:	88 c2                	mov    dl,al
c002177c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021780:	88 10                	mov    BYTE PTR [eax],dl
c0021782:	90                   	nop
c0021783:	c3                   	ret    

c0021784 <FAT::open(char const*, void**, FileOpenMode)>:
c0021784:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002178a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021792:	74 0a                	je     c002179e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021794:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002179c:	75 0a                	jne    c00217a8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002179e:	b8 04 00 00 00       	mov    eax,0x4
c00217a3:	e9 fd 00 00 00       	jmp    c00218a5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00217a8:	83 ec 08             	sub    esp,0x8
c00217ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00217b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217b6:	50                   	push   eax
c00217b7:	e8 6c f0 fd ff       	call   c0000828 <strcpy>
c00217bc:	83 c4 10             	add    esp,0x10
c00217bf:	83 ec 08             	sub    esp,0x8
c00217c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00217c6:	50                   	push   eax
c00217c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00217ce:	e8 79 ff ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c00217d3:	83 c4 10             	add    esp,0x10
c00217d6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00217de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217e5:	83 e0 01             	and    eax,0x1
c00217e8:	74 08                	je     c00217f2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00217ea:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00217f2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217f9:	83 e0 04             	and    eax,0x4
c00217fc:	74 10                	je     c002180e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00217fe:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021806:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002180e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021815:	83 e0 02             	and    eax,0x2
c0021818:	74 08                	je     c0021822 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002181a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021822:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021829:	83 e0 08             	and    eax,0x8
c002182c:	74 08                	je     c0021836 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002182e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021836:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002183d:	83 e0 10             	and    eax,0x10
c0021840:	74 08                	je     c002184a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021842:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002184a:	83 ec 0c             	sub    esp,0xc
c002184d:	68 50 02 00 00       	push   0x250
c0021852:	e8 69 e0 fe ff       	call   c000f8c0 <malloc>
c0021857:	83 c4 10             	add    esp,0x10
c002185a:	89 c2                	mov    edx,eax
c002185c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021863:	89 10                	mov    DWORD PTR [eax],edx
c0021865:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002186d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021874:	8b 00                	mov    eax,DWORD PTR [eax]
c0021876:	83 ec 04             	sub    esp,0x4
c0021879:	52                   	push   edx
c002187a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002187e:	52                   	push   edx
c002187f:	50                   	push   eax
c0021880:	e8 16 37 fe ff       	call   c0004f9b <f_open>
c0021885:	83 c4 10             	add    esp,0x10
c0021888:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002188f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021897:	74 07                	je     c00218a0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021899:	b8 01 00 00 00       	mov    eax,0x1
c002189e:	eb 05                	jmp    c00218a5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00218a0:	b8 00 00 00 00       	mov    eax,0x0
c00218a5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218ab:	c3                   	ret    

c00218ac <FAT::openDir(char const*, void**)>:
c00218ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00218b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00218ba:	74 0a                	je     c00218c6 <FAT::openDir(char const*, void**)+0x1a>
c00218bc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00218c4:	75 07                	jne    c00218cd <FAT::openDir(char const*, void**)+0x21>
c00218c6:	b8 04 00 00 00       	mov    eax,0x4
c00218cb:	eb 7d                	jmp    c002194a <FAT::openDir(char const*, void**)+0x9e>
c00218cd:	83 ec 08             	sub    esp,0x8
c00218d0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00218d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218db:	50                   	push   eax
c00218dc:	e8 47 ef fd ff       	call   c0000828 <strcpy>
c00218e1:	83 c4 10             	add    esp,0x10
c00218e4:	83 ec 08             	sub    esp,0x8
c00218e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218eb:	50                   	push   eax
c00218ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00218f3:	e8 54 fe ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c00218f8:	83 c4 10             	add    esp,0x10
c00218fb:	83 ec 0c             	sub    esp,0xc
c00218fe:	6a 4c                	push   0x4c
c0021900:	e8 bb df fe ff       	call   c000f8c0 <malloc>
c0021905:	83 c4 10             	add    esp,0x10
c0021908:	89 c2                	mov    edx,eax
c002190a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021911:	89 10                	mov    DWORD PTR [eax],edx
c0021913:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002191a:	8b 00                	mov    eax,DWORD PTR [eax]
c002191c:	83 ec 08             	sub    esp,0x8
c002191f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021923:	52                   	push   edx
c0021924:	50                   	push   eax
c0021925:	e8 a9 46 fe ff       	call   c0005fd3 <f_opendir>
c002192a:	83 c4 10             	add    esp,0x10
c002192d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021934:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002193c:	74 07                	je     c0021945 <FAT::openDir(char const*, void**)+0x99>
c002193e:	b8 01 00 00 00       	mov    eax,0x1
c0021943:	eb 05                	jmp    c002194a <FAT::openDir(char const*, void**)+0x9e>
c0021945:	b8 00 00 00 00       	mov    eax,0x0
c002194a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021950:	c3                   	ret    
c0021951:	90                   	nop

c0021952 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021952:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021958:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021960:	75 0a                	jne    c002196c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021962:	b8 04 00 00 00       	mov    eax,0x4
c0021967:	e9 c9 00 00 00       	jmp    c0021a35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002196c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021974:	75 0a                	jne    c0021980 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021976:	b8 04 00 00 00       	mov    eax,0x4
c002197b:	e9 b5 00 00 00       	jmp    c0021a35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021980:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021988:	75 0a                	jne    c0021994 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002198a:	b8 04 00 00 00       	mov    eax,0x4
c002198f:	e9 a1 00 00 00       	jmp    c0021a35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021994:	83 ec 08             	sub    esp,0x8
c0021997:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002199e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00219a5:	50                   	push   eax
c00219a6:	e8 7d ee fd ff       	call   c0000828 <strcpy>
c00219ab:	83 c4 10             	add    esp,0x10
c00219ae:	83 ec 08             	sub    esp,0x8
c00219b1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00219b8:	50                   	push   eax
c00219b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00219c0:	e8 87 fd ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c00219c5:	83 c4 10             	add    esp,0x10
c00219c8:	83 ec 08             	sub    esp,0x8
c00219cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219cf:	50                   	push   eax
c00219d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00219d7:	50                   	push   eax
c00219d8:	e8 b5 47 fe ff       	call   c0006192 <f_stat>
c00219dd:	83 c4 10             	add    esp,0x10
c00219e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00219e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00219ee:	85 c0                	test   eax,eax
c00219f0:	74 07                	je     c00219f9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00219f2:	83 f8 04             	cmp    eax,0x4
c00219f5:	74 32                	je     c0021a29 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00219f7:	eb 37                	jmp    c0021a30 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00219f9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00219fd:	0f b6 c0             	movzx  eax,al
c0021a00:	83 e0 10             	and    eax,0x10
c0021a03:	0f 95 c2             	setne  dl
c0021a06:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021a0d:	88 10                	mov    BYTE PTR [eax],dl
c0021a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a16:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021a1d:	89 01                	mov    DWORD PTR [ecx],eax
c0021a1f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021a22:	b8 00 00 00 00       	mov    eax,0x0
c0021a27:	eb 0c                	jmp    c0021a35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a29:	b8 02 00 00 00       	mov    eax,0x2
c0021a2e:	eb 05                	jmp    c0021a35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a30:	b8 01 00 00 00       	mov    eax,0x1
c0021a35:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021a3b:	c3                   	ret    

c0021a3c <FAT::unlink(char const*)>:
c0021a3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a42:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a4a:	75 07                	jne    c0021a53 <FAT::unlink(char const*)+0x17>
c0021a4c:	b8 04 00 00 00       	mov    eax,0x4
c0021a51:	eb 5c                	jmp    c0021aaf <FAT::unlink(char const*)+0x73>
c0021a53:	83 ec 08             	sub    esp,0x8
c0021a56:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a61:	50                   	push   eax
c0021a62:	e8 c1 ed fd ff       	call   c0000828 <strcpy>
c0021a67:	83 c4 10             	add    esp,0x10
c0021a6a:	83 ec 08             	sub    esp,0x8
c0021a6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a71:	50                   	push   eax
c0021a72:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a79:	e8 ce fc ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c0021a7e:	83 c4 10             	add    esp,0x10
c0021a81:	83 ec 0c             	sub    esp,0xc
c0021a84:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a88:	50                   	push   eax
c0021a89:	e8 56 4a fe ff       	call   c00064e4 <f_unlink>
c0021a8e:	83 c4 10             	add    esp,0x10
c0021a91:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a98:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021a9f:	85 c0                	test   eax,eax
c0021aa1:	75 07                	jne    c0021aaa <FAT::unlink(char const*)+0x6e>
c0021aa3:	b8 00 00 00 00       	mov    eax,0x0
c0021aa8:	eb 05                	jmp    c0021aaf <FAT::unlink(char const*)+0x73>
c0021aaa:	b8 01 00 00 00       	mov    eax,0x1
c0021aaf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ab5:	c3                   	ret    

c0021ab6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021ab6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021abc:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021ac3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021aca:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021ace:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021ad2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021ada:	75 0a                	jne    c0021ae6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021adc:	b8 04 00 00 00       	mov    eax,0x4
c0021ae1:	e9 1c 01 00 00       	jmp    c0021c02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021ae6:	83 ec 08             	sub    esp,0x8
c0021ae9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021af0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021af4:	50                   	push   eax
c0021af5:	e8 2e ed fd ff       	call   c0000828 <strcpy>
c0021afa:	83 c4 10             	add    esp,0x10
c0021afd:	83 ec 08             	sub    esp,0x8
c0021b00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021b04:	50                   	push   eax
c0021b05:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021b0c:	e8 3b fc ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c0021b11:	83 c4 10             	add    esp,0x10
c0021b14:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021b1c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021b24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b29:	83 e0 01             	and    eax,0x1
c0021b2c:	74 08                	je     c0021b36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021b2e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021b36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b3b:	83 e0 02             	and    eax,0x2
c0021b3e:	74 08                	je     c0021b48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021b40:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021b48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b4d:	83 e0 04             	and    eax,0x4
c0021b50:	74 08                	je     c0021b5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021b52:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021b5a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b5f:	83 e0 08             	and    eax,0x8
c0021b62:	74 08                	je     c0021b6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021b64:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021b6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b71:	83 e0 01             	and    eax,0x1
c0021b74:	74 08                	je     c0021b7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021b76:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021b7e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b83:	83 e0 02             	and    eax,0x2
c0021b86:	74 08                	je     c0021b90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021b88:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021b90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b95:	83 e0 04             	and    eax,0x4
c0021b98:	74 08                	je     c0021ba2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021b9a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021ba2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021ba7:	83 e0 08             	and    eax,0x8
c0021baa:	74 08                	je     c0021bb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021bac:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021bb4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021bbb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021bc2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021bca:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021bd2:	83 ec 04             	sub    esp,0x4
c0021bd5:	52                   	push   edx
c0021bd6:	50                   	push   eax
c0021bd7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bdb:	50                   	push   eax
c0021bdc:	e8 a5 4f fe ff       	call   c0006b86 <f_chmod>
c0021be1:	83 c4 10             	add    esp,0x10
c0021be4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021beb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021bf2:	85 c0                	test   eax,eax
c0021bf4:	75 07                	jne    c0021bfd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021bf6:	b8 00 00 00 00       	mov    eax,0x0
c0021bfb:	eb 05                	jmp    c0021c02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021bfd:	b8 01 00 00 00       	mov    eax,0x1
c0021c02:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021c08:	c3                   	ret    
c0021c09:	90                   	nop

c0021c0a <FAT::rename(char const*, char const*)>:
c0021c0a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021c10:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021c18:	74 0a                	je     c0021c24 <FAT::rename(char const*, char const*)+0x1a>
c0021c1a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021c22:	75 0a                	jne    c0021c2e <FAT::rename(char const*, char const*)+0x24>
c0021c24:	b8 04 00 00 00       	mov    eax,0x4
c0021c29:	e9 98 00 00 00       	jmp    c0021cc6 <FAT::rename(char const*, char const*)+0xbc>
c0021c2e:	83 ec 08             	sub    esp,0x8
c0021c31:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c38:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c3f:	50                   	push   eax
c0021c40:	e8 e3 eb fd ff       	call   c0000828 <strcpy>
c0021c45:	83 c4 10             	add    esp,0x10
c0021c48:	83 ec 08             	sub    esp,0x8
c0021c4b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021c52:	50                   	push   eax
c0021c53:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c5a:	e8 ed fa ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c0021c5f:	83 c4 10             	add    esp,0x10
c0021c62:	83 ec 08             	sub    esp,0x8
c0021c65:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021c6c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c70:	50                   	push   eax
c0021c71:	e8 b2 eb fd ff       	call   c0000828 <strcpy>
c0021c76:	83 c4 10             	add    esp,0x10
c0021c79:	83 ec 08             	sub    esp,0x8
c0021c7c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c80:	50                   	push   eax
c0021c81:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c88:	e8 bf fa ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c0021c8d:	83 c4 10             	add    esp,0x10
c0021c90:	83 ec 08             	sub    esp,0x8
c0021c93:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c97:	50                   	push   eax
c0021c98:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c9f:	50                   	push   eax
c0021ca0:	e8 ee 4b fe ff       	call   c0006893 <f_rename>
c0021ca5:	83 c4 10             	add    esp,0x10
c0021ca8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021caf:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021cb6:	85 c0                	test   eax,eax
c0021cb8:	75 07                	jne    c0021cc1 <FAT::rename(char const*, char const*)+0xb7>
c0021cba:	b8 00 00 00 00       	mov    eax,0x0
c0021cbf:	eb 05                	jmp    c0021cc6 <FAT::rename(char const*, char const*)+0xbc>
c0021cc1:	b8 01 00 00 00       	mov    eax,0x1
c0021cc6:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021ccc:	c3                   	ret    
c0021ccd:	90                   	nop

c0021cce <FAT::mkdir(char const*)>:
c0021cce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cd4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021cdc:	75 07                	jne    c0021ce5 <FAT::mkdir(char const*)+0x17>
c0021cde:	b8 04 00 00 00       	mov    eax,0x4
c0021ce3:	eb 5c                	jmp    c0021d41 <FAT::mkdir(char const*)+0x73>
c0021ce5:	83 ec 08             	sub    esp,0x8
c0021ce8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021cef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cf3:	50                   	push   eax
c0021cf4:	e8 2f eb fd ff       	call   c0000828 <strcpy>
c0021cf9:	83 c4 10             	add    esp,0x10
c0021cfc:	83 ec 08             	sub    esp,0x8
c0021cff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d03:	50                   	push   eax
c0021d04:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021d0b:	e8 3c fa ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c0021d10:	83 c4 10             	add    esp,0x10
c0021d13:	83 ec 0c             	sub    esp,0xc
c0021d16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d1a:	50                   	push   eax
c0021d1b:	e8 47 49 fe ff       	call   c0006667 <f_mkdir>
c0021d20:	83 c4 10             	add    esp,0x10
c0021d23:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021d2a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021d31:	85 c0                	test   eax,eax
c0021d33:	75 07                	jne    c0021d3c <FAT::mkdir(char const*)+0x6e>
c0021d35:	b8 00 00 00 00       	mov    eax,0x0
c0021d3a:	eb 05                	jmp    c0021d41 <FAT::mkdir(char const*)+0x73>
c0021d3c:	b8 01 00 00 00       	mov    eax,0x1
c0021d41:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d47:	c3                   	ret    

c0021d48 <FAT::exists(char const*)>:
c0021d48:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021d4e:	83 ec 08             	sub    esp,0x8
c0021d51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021d58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021d5c:	50                   	push   eax
c0021d5d:	e8 c6 ea fd ff       	call   c0000828 <strcpy>
c0021d62:	83 c4 10             	add    esp,0x10
c0021d65:	83 ec 08             	sub    esp,0x8
c0021d68:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021d6c:	50                   	push   eax
c0021d6d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021d74:	e8 d3 f9 ff ff       	call   c002174c <FAT::fixFilepath(char*)>
c0021d79:	83 c4 10             	add    esp,0x10
c0021d7c:	83 ec 08             	sub    esp,0x8
c0021d7f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021d86:	50                   	push   eax
c0021d87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021d8b:	50                   	push   eax
c0021d8c:	e8 01 44 fe ff       	call   c0006192 <f_stat>
c0021d91:	83 c4 10             	add    esp,0x10
c0021d94:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021d9b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021da2:	85 c0                	test   eax,eax
c0021da4:	75 04                	jne    c0021daa <FAT::exists(char const*)+0x62>
c0021da6:	b0 01                	mov    al,0x1
c0021da8:	eb 02                	jmp    c0021dac <FAT::exists(char const*)+0x64>
c0021daa:	b0 00                	mov    al,0x0
c0021dac:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021db2:	c3                   	ret    
c0021db3:	90                   	nop

c0021db4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021db4:	b8 08 00 00 00       	mov    eax,0x8
c0021db9:	c3                   	ret    

c0021dba <ISO9660::seek(void*, unsigned long long)>:
c0021dba:	53                   	push   ebx
c0021dbb:	b8 04 00 00 00       	mov    eax,0x4
c0021dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021dc8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021dcc:	85 d2                	test   edx,edx
c0021dce:	74 17                	je     c0021de7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021dd0:	89 c8                	mov    eax,ecx
c0021dd2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021dd5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021dd8:	b8 01 00 00 00       	mov    eax,0x1
c0021ddd:	73 08                	jae    c0021de7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021ddf:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021de2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021de5:	31 c0                	xor    eax,eax
c0021de7:	5b                   	pop    ebx
c0021de8:	c3                   	ret    
c0021de9:	90                   	nop

c0021dea <ISO9660::tell(void*, unsigned long long*)>:
c0021dea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021dee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021df2:	85 d2                	test   edx,edx
c0021df4:	74 12                	je     c0021e08 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021df6:	85 c0                	test   eax,eax
c0021df8:	74 0e                	je     c0021e08 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021dfa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021dfd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021e00:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021e03:	89 10                	mov    DWORD PTR [eax],edx
c0021e05:	31 c0                	xor    eax,eax
c0021e07:	c3                   	ret    
c0021e08:	b8 04 00 00 00       	mov    eax,0x4
c0021e0d:	c3                   	ret    

c0021e0e <ISO9660::getName()>:
c0021e0e:	b8 7c d3 02 c0       	mov    eax,0xc002d37c
c0021e13:	c3                   	ret    

c0021e14 <ISO9660::stat(void*, unsigned long long*)>:
c0021e14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e1c:	85 d2                	test   edx,edx
c0021e1e:	74 12                	je     c0021e32 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021e20:	85 c0                	test   eax,eax
c0021e22:	74 0e                	je     c0021e32 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021e24:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021e27:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021e2a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021e2d:	89 10                	mov    DWORD PTR [eax],edx
c0021e2f:	31 c0                	xor    eax,eax
c0021e31:	c3                   	ret    
c0021e32:	b8 04 00 00 00       	mov    eax,0x4
c0021e37:	c3                   	ret    

c0021e38 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021e38:	b8 01 00 00 00       	mov    eax,0x1
c0021e3d:	c3                   	ret    

c0021e3e <ISO9660::unlink(char const*)>:
c0021e3e:	b8 01 00 00 00       	mov    eax,0x1
c0021e43:	c3                   	ret    

c0021e44 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021e44:	b8 01 00 00 00       	mov    eax,0x1
c0021e49:	c3                   	ret    

c0021e4a <ISO9660::rename(char const*, char const*)>:
c0021e4a:	b8 01 00 00 00       	mov    eax,0x1
c0021e4f:	c3                   	ret    

c0021e50 <ISO9660::mkdir(char const*)>:
c0021e50:	b8 01 00 00 00       	mov    eax,0x1
c0021e55:	c3                   	ret    

c0021e56 <ISO9660::close(void*)>:
c0021e56:	83 ec 0c             	sub    esp,0xc
c0021e59:	b8 04 00 00 00       	mov    eax,0x4
c0021e5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e62:	85 d2                	test   edx,edx
c0021e64:	74 0e                	je     c0021e74 <ISO9660::close(void*)+0x1e>
c0021e66:	83 ec 0c             	sub    esp,0xc
c0021e69:	52                   	push   edx
c0021e6a:	e8 61 da fe ff       	call   c000f8d0 <free>
c0021e6f:	83 c4 10             	add    esp,0x10
c0021e72:	31 c0                	xor    eax,eax
c0021e74:	83 c4 0c             	add    esp,0xc
c0021e77:	c3                   	ret    

c0021e78 <ISO9660::closeDir(void*)>:
c0021e78:	83 ec 0c             	sub    esp,0xc
c0021e7b:	b8 04 00 00 00       	mov    eax,0x4
c0021e80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e84:	85 d2                	test   edx,edx
c0021e86:	74 0e                	je     c0021e96 <ISO9660::closeDir(void*)+0x1e>
c0021e88:	83 ec 0c             	sub    esp,0xc
c0021e8b:	52                   	push   edx
c0021e8c:	e8 3f da fe ff       	call   c000f8d0 <free>
c0021e91:	83 c4 10             	add    esp,0x10
c0021e94:	31 c0                	xor    eax,eax
c0021e96:	83 c4 0c             	add    esp,0xc
c0021e99:	c3                   	ret    

c0021e9a <ISO9660::~ISO9660()>:
c0021e9a:	83 ec 0c             	sub    esp,0xc
c0021e9d:	ba e0 d3 02 c0       	mov    edx,0xc002d3e0
c0021ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea6:	89 10                	mov    DWORD PTR [eax],edx
c0021ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eac:	83 ec 0c             	sub    esp,0xc
c0021eaf:	50                   	push   eax
c0021eb0:	e8 f1 12 ff ff       	call   c00131a6 <Filesystem::~Filesystem()>
c0021eb5:	83 c4 10             	add    esp,0x10
c0021eb8:	90                   	nop
c0021eb9:	83 c4 0c             	add    esp,0xc
c0021ebc:	c3                   	ret    
c0021ebd:	90                   	nop

c0021ebe <ISO9660::~ISO9660()>:
c0021ebe:	83 ec 0c             	sub    esp,0xc
c0021ec1:	83 ec 0c             	sub    esp,0xc
c0021ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ec8:	e8 cd ff ff ff       	call   c0021e9a <ISO9660::~ISO9660()>
c0021ecd:	83 c4 10             	add    esp,0x10
c0021ed0:	83 ec 08             	sub    esp,0x8
c0021ed3:	6a 08                	push   0x8
c0021ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ed9:	e8 b9 0e ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0021ede:	83 c4 10             	add    esp,0x10
c0021ee1:	83 c4 0c             	add    esp,0xc
c0021ee4:	c3                   	ret    

c0021ee5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021ee5:	55                   	push   ebp
c0021ee6:	31 c9                	xor    ecx,ecx
c0021ee8:	57                   	push   edi
c0021ee9:	56                   	push   esi
c0021eea:	53                   	push   ebx
c0021eeb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021eef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021ef3:	89 eb                	mov    ebx,ebp
c0021ef5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021ef9:	39 ce                	cmp    esi,ecx
c0021efb:	7e 17                	jle    c0021f14 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021efd:	31 d2                	xor    edx,edx
c0021eff:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021f03:	7d 13                	jge    c0021f18 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021f05:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021f09:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f0c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021f0f:	75 0d                	jne    c0021f1e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021f11:	42                   	inc    edx
c0021f12:	eb eb                	jmp    c0021eff <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021f14:	31 c0                	xor    eax,eax
c0021f16:	eb 0a                	jmp    c0021f22 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021f18:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021f1c:	eb 04                	jmp    c0021f22 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021f1e:	41                   	inc    ecx
c0021f1f:	43                   	inc    ebx
c0021f20:	eb d7                	jmp    c0021ef9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021f22:	5b                   	pop    ebx
c0021f23:	5e                   	pop    esi
c0021f24:	5f                   	pop    edi
c0021f25:	5d                   	pop    ebp
c0021f26:	c3                   	ret    

c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021f27:	56                   	push   esi
c0021f28:	53                   	push   ebx
c0021f29:	52                   	push   edx
c0021f2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021f2e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021f32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f36:	39 0d 00 26 03 c0    	cmp    DWORD PTR ds:0xc0032600,ecx
c0021f3c:	75 08                	jne    c0021f46 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021f3e:	38 05 54 e4 02 c0    	cmp    BYTE PTR ds:0xc002e454,al
c0021f44:	74 2b                	je     c0021f71 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021f46:	83 ec 0c             	sub    esp,0xc
c0021f49:	a2 54 e4 02 c0       	mov    ds:0xc002e454,al
c0021f4e:	68 20 26 03 c0       	push   0xc0032620
c0021f53:	0f be c0             	movsx  eax,al
c0021f56:	6a 01                	push   0x1
c0021f58:	89 0d 00 26 03 c0    	mov    DWORD PTR ds:0xc0032600,ecx
c0021f5e:	31 db                	xor    ebx,ebx
c0021f60:	53                   	push   ebx
c0021f61:	51                   	push   ecx
c0021f62:	ff 34 85 dc f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c24]
c0021f69:	e8 94 48 ff ff       	call   c0016802 <LogicalDisk::read(unsigned long long, int, void*)>
c0021f6e:	83 c4 20             	add    esp,0x20
c0021f71:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021f79:	c7 44 24 14 20 26 03 c0 	mov    DWORD PTR [esp+0x14],0xc0032620
c0021f81:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021f85:	58                   	pop    eax
c0021f86:	5b                   	pop    ebx
c0021f87:	5e                   	pop    esi
c0021f88:	e9 23 ee fd ff       	jmp    c0000db0 <realmemcpy>
c0021f8d:	90                   	nop

c0021f8e <ISO9660::tryMount(LogicalDisk*, int)>:
c0021f8e:	81 ec 10 08 00 00    	sub    esp,0x810
c0021f94:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021f9b:	83 c0 41             	add    eax,0x41
c0021f9e:	0f be c0             	movsx  eax,al
c0021fa1:	50                   	push   eax
c0021fa2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021fa6:	50                   	push   eax
c0021fa7:	6a 10                	push   0x10
c0021fa9:	e8 79 ff ff ff       	call   c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fae:	83 c4 10             	add    esp,0x10
c0021fb1:	31 c0                	xor    eax,eax
c0021fb3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021fb8:	75 1d                	jne    c0021fd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021fba:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021fbf:	75 16                	jne    c0021fd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021fc1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021fc6:	75 0f                	jne    c0021fd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021fc8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021fcd:	75 08                	jne    c0021fd7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021fcf:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021fd4:	0f 94 c0             	sete   al
c0021fd7:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021fdd:	c3                   	ret    

c0021fde <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021fde:	55                   	push   ebp
c0021fdf:	57                   	push   edi
c0021fe0:	56                   	push   esi
c0021fe1:	53                   	push   ebx
c0021fe2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021fe8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021fef:	85 ed                	test   ebp,ebp
c0021ff1:	0f 84 d6 01 00 00    	je     c00221cd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021ff7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021fff:	0f 84 c8 01 00 00    	je     c00221cd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0022005:	b8 01 00 00 00       	mov    eax,0x1
c002200a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002200e:	0f 85 be 01 00 00    	jne    c00221d2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0022014:	31 d2                	xor    edx,edx
c0022016:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002201d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022020:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0022023:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022027:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002202a:	89 04 24             	mov    DWORD PTR [esp],eax
c002202d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022031:	01 f0                	add    eax,esi
c0022033:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0022036:	11 fa                	adc    edx,edi
c0022038:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002203c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0022040:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022044:	19 d1                	sbb    ecx,edx
c0022046:	72 0a                	jb     c0022052 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0022048:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002204c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022050:	eb 13                	jmp    c0022065 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0022052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022056:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002205a:	29 f0                	sub    eax,esi
c002205c:	19 fa                	sbb    edx,edi
c002205e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022061:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022065:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022068:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002206b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002206f:	51                   	push   ecx
c0022070:	c1 e0 0b             	shl    eax,0xb
c0022073:	01 c6                	add    esi,eax
c0022075:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022079:	11 d7                	adc    edi,edx
c002207b:	50                   	push   eax
c002207c:	89 fa                	mov    edx,edi
c002207e:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0022082:	89 f0                	mov    eax,esi
c0022084:	53                   	push   ebx
c0022085:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022089:	50                   	push   eax
c002208a:	e8 98 fe ff ff       	call   c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002208f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022093:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022096:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002209a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00220a0:	83 c4 10             	add    esp,0x10
c00220a3:	b8 00 08 00 00       	mov    eax,0x800
c00220a8:	29 d0                	sub    eax,edx
c00220aa:	39 c1                	cmp    ecx,eax
c00220ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00220b0:	83 d9 00             	sbb    ecx,0x0
c00220b3:	7d 1c                	jge    c00220d1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00220b5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00220ba:	75 12                	jne    c00220ce <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00220bc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00220c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220c9:	e9 fb 00 00 00       	jmp    c00221c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00220ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00220d1:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00220d4:	31 d2                	xor    edx,edx
c00220d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00220da:	39 c2                	cmp    edx,eax
c00220dc:	7d 14                	jge    c00220f2 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00220de:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00220e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220e9:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00220ec:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00220ef:	42                   	inc    edx
c00220f0:	eb e8                	jmp    c00220da <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00220f2:	89 c3                	mov    ebx,eax
c00220f4:	85 c0                	test   eax,eax
c00220f6:	79 02                	jns    c00220fa <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00220f8:	31 db                	xor    ebx,ebx
c00220fa:	99                   	cdq    
c00220fb:	01 c3                	add    ebx,eax
c00220fd:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0022104:	01 c6                	add    esi,eax
c0022106:	11 d7                	adc    edi,edx
c0022108:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002210c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022110:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0022113:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022117:	29 c6                	sub    esi,eax
c0022119:	19 d7                	sbb    edi,edx
c002211b:	89 34 24             	mov    DWORD PTR [esp],esi
c002211e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0022122:	b8 ff 07 00 00       	mov    eax,0x7ff
c0022127:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002212a:	b8 00 00 00 00       	mov    eax,0x0
c002212f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022133:	7d 3e                	jge    c0022173 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0022135:	52                   	push   edx
c0022136:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002213a:	50                   	push   eax
c002213b:	53                   	push   ebx
c002213c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022140:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022144:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022148:	50                   	push   eax
c0022149:	e8 d9 fd ff ff       	call   c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002214e:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0022156:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002215b:	81 c3 00 08 00 00    	add    ebx,0x800
c0022161:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0022169:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002216e:	83 c4 10             	add    esp,0x10
c0022171:	eb af                	jmp    c0022122 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0022173:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022177:	0b 04 24             	or     eax,DWORD PTR [esp]
c002217a:	74 32                	je     c00221ae <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002217c:	50                   	push   eax
c002217d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022181:	50                   	push   eax
c0022182:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022186:	50                   	push   eax
c0022187:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002218b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002218f:	0f ac fe 0b          	shrd   esi,edi,0xb
c0022193:	56                   	push   esi
c0022194:	e8 8e fd ff ff       	call   c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022199:	83 c4 0c             	add    esp,0xc
c002219c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00221a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00221a4:	50                   	push   eax
c00221a5:	53                   	push   ebx
c00221a6:	e8 05 ec fd ff       	call   c0000db0 <realmemcpy>
c00221ab:	83 c4 10             	add    esp,0x10
c00221ae:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00221b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00221b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221bd:	89 38                	mov    DWORD PTR [eax],edi
c00221bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221c3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00221c6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00221c9:	31 c0                	xor    eax,eax
c00221cb:	eb 05                	jmp    c00221d2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00221cd:	b8 04 00 00 00       	mov    eax,0x4
c00221d2:	81 c4 2c 08 00 00    	add    esp,0x82c
c00221d8:	5b                   	pop    ebx
c00221d9:	5e                   	pop    esi
c00221da:	5f                   	pop    edi
c00221db:	5d                   	pop    ebp
c00221dc:	c3                   	ret    
c00221dd:	90                   	nop

c00221de <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00221de:	55                   	push   ebp
c00221df:	57                   	push   edi
c00221e0:	56                   	push   esi
c00221e1:	53                   	push   ebx
c00221e2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00221e8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00221ef:	85 f6                	test   esi,esi
c00221f1:	0f 84 64 02 00 00    	je     c002245b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00221f7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00221ff:	0f 84 56 02 00 00    	je     c002245b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0022205:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0022208:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c002220b:	75 0a                	jne    c0022217 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002220d:	b8 07 00 00 00       	mov    eax,0x7
c0022212:	e9 49 02 00 00       	jmp    c0022460 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0022217:	50                   	push   eax
c0022218:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002221c:	50                   	push   eax
c002221d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022224:	53                   	push   ebx
c0022225:	8b 06                	mov    eax,DWORD PTR [esi]
c0022227:	c1 e0 0b             	shl    eax,0xb
c002222a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002222d:	c1 e8 0b             	shr    eax,0xb
c0022230:	50                   	push   eax
c0022231:	e8 f1 fc ff ff       	call   c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022236:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0022239:	83 c4 10             	add    esp,0x10
c002223c:	89 c1                	mov    ecx,eax
c002223e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0022241:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0022247:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002224a:	84 db                	test   bl,bl
c002224c:	0f 85 90 00 00 00    	jne    c00222e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0022252:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0022258:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002225e:	29 c7                	sub    edi,eax
c0022260:	89 fb                	mov    ebx,edi
c0022262:	c1 fb 1f             	sar    ebx,0x1f
c0022265:	01 f8                	add    eax,edi
c0022267:	11 da                	adc    edx,ebx
c0022269:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002226d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022271:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0022274:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0022277:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002227a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002227d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022280:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022284:	89 d8                	mov    eax,ebx
c0022286:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022289:	ba 00 00 00 00       	mov    edx,0x0
c002228e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022292:	b8 00 00 00 00       	mov    eax,0x0
c0022297:	73 0b                	jae    c00222a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0022299:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002229c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222a0:	29 f8                	sub    eax,edi
c00222a2:	19 da                	sbb    edx,ebx
c00222a4:	89 d3                	mov    ebx,edx
c00222a6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00222a9:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00222ac:	09 c3                	or     ebx,eax
c00222ae:	0f 84 59 ff ff ff    	je     c002220d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00222b4:	55                   	push   ebp
c00222b5:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00222b9:	50                   	push   eax
c00222ba:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00222c1:	53                   	push   ebx
c00222c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00222c4:	c1 e0 0b             	shl    eax,0xb
c00222c7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00222cb:	c1 e8 0b             	shr    eax,0xb
c00222ce:	50                   	push   eax
c00222cf:	e8 53 fc ff ff       	call   c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00222d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00222d7:	83 c4 10             	add    esp,0x10
c00222da:	25 ff 07 00 00       	and    eax,0x7ff
c00222df:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00222e2:	57                   	push   edi
c00222e3:	6a 28                	push   0x28
c00222e5:	6a 00                	push   0x0
c00222e7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00222eb:	50                   	push   eax
c00222ec:	e8 7b e4 fd ff       	call   c000076c <memset>
c00222f1:	31 d2                	xor    edx,edx
c00222f3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00222f6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00222fc:	89 f8                	mov    eax,edi
c00222fe:	83 c0 21             	add    eax,0x21
c0022301:	83 d2 00             	adc    edx,0x0
c0022304:	89 c7                	mov    edi,eax
c0022306:	89 d5                	mov    ebp,edx
c0022308:	83 c4 10             	add    esp,0x10
c002230b:	31 c9                	xor    ecx,ecx
c002230d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0022314:	83 f9 28             	cmp    ecx,0x28
c0022317:	88 04 24             	mov    BYTE PTR [esp],al
c002231a:	0f 94 c2             	sete   dl
c002231d:	88 d0                	mov    al,dl
c002231f:	ba ff 07 00 00       	mov    edx,0x7ff
c0022324:	39 fa                	cmp    edx,edi
c0022326:	ba 00 00 00 00       	mov    edx,0x0
c002232b:	19 ea                	sbb    edx,ebp
c002232d:	0f 92 c2             	setb   dl
c0022330:	09 c2                	or     edx,eax
c0022332:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0022336:	0f 94 c0             	sete   al
c0022339:	08 d0                	or     al,dl
c002233b:	75 16                	jne    c0022353 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c002233d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0022341:	74 10                	je     c0022353 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0022343:	8a 04 24             	mov    al,BYTE PTR [esp]
c0022346:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002234a:	41                   	inc    ecx
c002234b:	83 c7 01             	add    edi,0x1
c002234e:	83 d5 00             	adc    ebp,0x0
c0022351:	eb ba                	jmp    c002230d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0022353:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002235a:	83 ec 0c             	sub    esp,0xc
c002235d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0022361:	57                   	push   edi
c0022362:	e8 21 e4 fd ff       	call   c0000788 <strlen>
c0022367:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002236f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022373:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c002237a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002237d:	5a                   	pop    edx
c002237e:	25 ff 07 00 00       	and    eax,0x7ff
c0022383:	01 c8                	add    eax,ecx
c0022385:	59                   	pop    ecx
c0022386:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002238c:	83 e0 02             	and    eax,0x2
c002238f:	3c 01                	cmp    al,0x1
c0022391:	19 c0                	sbb    eax,eax
c0022393:	83 c0 02             	add    eax,0x2
c0022396:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002239a:	57                   	push   edi
c002239b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002239f:	50                   	push   eax
c00223a0:	e8 83 e4 fd ff       	call   c0000828 <strcpy>
c00223a5:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00223a9:	83 c4 10             	add    esp,0x10
c00223ac:	84 c0                	test   al,al
c00223ae:	75 21                	jne    c00223d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c00223b0:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00223b8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00223c0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00223c8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00223cf:	eb 28                	jmp    c00223f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00223d1:	fe c8                	dec    al
c00223d3:	75 24                	jne    c00223f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00223d5:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00223dd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00223e5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00223ed:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00223f4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00223f9:	0f b6 fb             	movzx  edi,bl
c00223fc:	31 db                	xor    ebx,ebx
c00223fe:	50                   	push   eax
c00223ff:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0022406:	8d 44 24 48          	lea    eax,[esp+0x48]
c002240a:	50                   	push   eax
c002240b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0022412:	e8 99 e9 fd ff       	call   c0000db0 <realmemcpy>
c0022417:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c002241e:	89 f9                	mov    ecx,edi
c0022420:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0022426:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0022429:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002242c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c002242f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0022432:	83 c4 10             	add    esp,0x10
c0022435:	39 c7                	cmp    edi,eax
c0022437:	89 df                	mov    edi,ebx
c0022439:	19 d7                	sbb    edi,edx
c002243b:	72 10                	jb     c002244d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002243d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0022444:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c002244b:	eb 0a                	jmp    c0022457 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c002244d:	29 c8                	sub    eax,ecx
c002244f:	19 da                	sbb    edx,ebx
c0022451:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0022454:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0022457:	31 c0                	xor    eax,eax
c0022459:	eb 05                	jmp    c0022460 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002245b:	b8 04 00 00 00       	mov    eax,0x4
c0022460:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022466:	5b                   	pop    ebx
c0022467:	5e                   	pop    esi
c0022468:	5f                   	pop    edi
c0022469:	5d                   	pop    ebp
c002246a:	c3                   	ret    

c002246b <readRoot(unsigned int*, unsigned int*, char)>:
c002246b:	81 ec 40 08 00 00    	sub    esp,0x840
c0022471:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0022479:	50                   	push   eax
c002247a:	8d 44 24 38          	lea    eax,[esp+0x38]
c002247e:	50                   	push   eax
c002247f:	6a 10                	push   0x10
c0022481:	e8 a1 fa ff ff       	call   c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022486:	83 c4 0c             	add    esp,0xc
c0022489:	6a 22                	push   0x22
c002248b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0022492:	50                   	push   eax
c0022493:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022497:	50                   	push   eax
c0022498:	e8 13 e9 fd ff       	call   c0000db0 <realmemcpy>
c002249d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00224a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00224a8:	89 10                	mov    DWORD PTR [eax],edx
c00224aa:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00224b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00224b5:	89 10                	mov    DWORD PTR [eax],edx
c00224b7:	b0 01                	mov    al,0x1
c00224b9:	81 c4 4c 08 00 00    	add    esp,0x84c
c00224bf:	c3                   	ret    

c00224c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00224c0:	55                   	push   ebp
c00224c1:	57                   	push   edi
c00224c2:	56                   	push   esi
c00224c3:	53                   	push   ebx
c00224c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00224ca:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00224d1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00224d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00224dc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00224e0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00224e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00224e8:	75 03                	jne    c00224ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00224ea:	83 c3 02             	add    ebx,0x2
c00224ed:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00224f0:	75 03                	jne    c00224f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00224f2:	43                   	inc    ebx
c00224f3:	eb f8                	jmp    c00224ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00224f5:	51                   	push   ecx
c00224f6:	68 00 01 00 00       	push   0x100
c00224fb:	6a 00                	push   0x0
c00224fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022501:	50                   	push   eax
c0022502:	e8 65 e2 fd ff       	call   c000076c <memset>
c0022507:	83 c4 10             	add    esp,0x10
c002250a:	31 d2                	xor    edx,edx
c002250c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002250f:	84 c0                	test   al,al
c0022511:	74 21                	je     c0022534 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022513:	3c 2f                	cmp    al,0x2f
c0022515:	75 0b                	jne    c0022522 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022517:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002251b:	bd 01 00 00 00       	mov    ebp,0x1
c0022520:	eb 14                	jmp    c0022536 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022522:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022525:	80 f9 19             	cmp    cl,0x19
c0022528:	77 03                	ja     c002252d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002252a:	83 e8 20             	sub    eax,0x20
c002252d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0022531:	42                   	inc    edx
c0022532:	eb d8                	jmp    c002250c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022534:	31 ed                	xor    ebp,ebp
c0022536:	83 ec 0c             	sub    esp,0xc
c0022539:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0022540:	e8 7b d3 fe ff       	call   c000f8c0 <malloc>
c0022545:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002254c:	89 c6                	mov    esi,eax
c002254e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022554:	c1 ef 0b             	shr    edi,0xb
c0022557:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002255e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022562:	83 c4 10             	add    esp,0x10
c0022565:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002256a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002256e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022575:	74 28                	je     c002259f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022577:	52                   	push   edx
c0022578:	57                   	push   edi
c0022579:	50                   	push   eax
c002257a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002257e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022585:	e8 9d f9 ff ff       	call   c0021f27 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002258a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002258e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022595:	05 00 08 00 00       	add    eax,0x800
c002259a:	83 c4 10             	add    esp,0x10
c002259d:	eb cb                	jmp    c002256a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002259f:	83 ec 0c             	sub    esp,0xc
c00225a2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00225a6:	57                   	push   edi
c00225a7:	e8 dc e1 fd ff       	call   c0000788 <strlen>
c00225ac:	50                   	push   eax
c00225ad:	57                   	push   edi
c00225ae:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00225b5:	56                   	push   esi
c00225b6:	e8 2a f9 ff ff       	call   c0021ee5 <__memmem(unsigned char*, int, unsigned char*, int)>
c00225bb:	83 c4 20             	add    esp,0x20
c00225be:	85 c0                	test   eax,eax
c00225c0:	75 13                	jne    c00225d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00225c2:	83 ec 0c             	sub    esp,0xc
c00225c5:	56                   	push   esi
c00225c6:	e8 05 d3 fe ff       	call   c000f8d0 <free>
c00225cb:	83 c4 10             	add    esp,0x10
c00225ce:	31 c0                	xor    eax,eax
c00225d0:	e9 b3 00 00 00       	jmp    c0022688 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00225d5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00225d9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00225dd:	c1 e7 08             	shl    edi,0x8
c00225e0:	c1 e2 10             	shl    edx,0x10
c00225e3:	09 d7                	or     edi,edx
c00225e5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00225e9:	09 d7                	or     edi,edx
c00225eb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00225ef:	c1 e2 18             	shl    edx,0x18
c00225f2:	09 d7                	or     edi,edx
c00225f4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00225f8:	89 d1                	mov    ecx,edx
c00225fa:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00225fe:	c1 e1 08             	shl    ecx,0x8
c0022601:	c1 e2 10             	shl    edx,0x10
c0022604:	09 ca                	or     edx,ecx
c0022606:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002260a:	09 ca                	or     edx,ecx
c002260c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022610:	c1 e1 18             	shl    ecx,0x18
c0022613:	09 ca                	or     edx,ecx
c0022615:	89 e9                	mov    ecx,ebp
c0022617:	84 c9                	test   cl,cl
c0022619:	74 3c                	je     c0022657 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002261b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002261f:	83 ec 0c             	sub    esp,0xc
c0022622:	56                   	push   esi
c0022623:	e8 a8 d2 fe ff       	call   c000f8d0 <free>
c0022628:	83 c4 0c             	add    esp,0xc
c002262b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022632:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022637:	50                   	push   eax
c0022638:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002263f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022646:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002264a:	52                   	push   edx
c002264b:	57                   	push   edi
c002264c:	53                   	push   ebx
c002264d:	e8 6e fe ff ff       	call   c00224c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022652:	83 c4 20             	add    esp,0x20
c0022655:	eb 31                	jmp    c0022688 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022657:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002265a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022661:	d0 e8                	shr    al,1
c0022663:	89 3b                	mov    DWORD PTR [ebx],edi
c0022665:	83 e0 01             	and    eax,0x1
c0022668:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002266f:	83 ec 0c             	sub    esp,0xc
c0022672:	89 13                	mov    DWORD PTR [ebx],edx
c0022674:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002267b:	89 03                	mov    DWORD PTR [ebx],eax
c002267d:	56                   	push   esi
c002267e:	e8 4d d2 fe ff       	call   c000f8d0 <free>
c0022683:	83 c4 10             	add    esp,0x10
c0022686:	b0 01                	mov    al,0x1
c0022688:	81 c4 1c 01 00 00    	add    esp,0x11c
c002268e:	5b                   	pop    ebx
c002268f:	5e                   	pop    esi
c0022690:	5f                   	pop    edi
c0022691:	5d                   	pop    ebp
c0022692:	c3                   	ret    

c0022693 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022693:	55                   	push   ebp
c0022694:	57                   	push   edi
c0022695:	56                   	push   esi
c0022696:	53                   	push   ebx
c0022697:	83 ec 20             	sub    esp,0x20
c002269a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002269e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00226a2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00226a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00226ae:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00226b6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00226bb:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00226c1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00226c7:	57                   	push   edi
c00226c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00226cc:	50                   	push   eax
c00226cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00226d1:	50                   	push   eax
c00226d2:	e8 94 fd ff ff       	call   c002246b <readRoot(unsigned int*, unsigned int*, char)>
c00226d7:	5a                   	pop    edx
c00226d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00226dc:	e8 a7 e0 fd ff       	call   c0000788 <strlen>
c00226e1:	83 c4 10             	add    esp,0x10
c00226e4:	83 f8 03             	cmp    eax,0x3
c00226e7:	77 17                	ja     c0022700 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00226e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00226ed:	89 03                	mov    DWORD PTR [ebx],eax
c00226ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226f3:	89 06                	mov    DWORD PTR [esi],eax
c00226f5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00226fc:	b0 01                	mov    al,0x1
c00226fe:	eb 19                	jmp    c0022719 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022700:	50                   	push   eax
c0022701:	55                   	push   ebp
c0022702:	57                   	push   edi
c0022703:	56                   	push   esi
c0022704:	53                   	push   ebx
c0022705:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022709:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002270d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022711:	e8 aa fd ff ff       	call   c00224c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022716:	83 c4 20             	add    esp,0x20
c0022719:	83 c4 1c             	add    esp,0x1c
c002271c:	5b                   	pop    ebx
c002271d:	5e                   	pop    esi
c002271e:	5f                   	pop    edi
c002271f:	5d                   	pop    ebp
c0022720:	c3                   	ret    
c0022721:	90                   	nop

c0022722 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022722:	57                   	push   edi
c0022723:	56                   	push   esi
c0022724:	53                   	push   ebx
c0022725:	83 ec 10             	sub    esp,0x10
c0022728:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002272c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022730:	85 ff                	test   edi,edi
c0022732:	0f 84 9d 00 00 00    	je     c00227d5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022738:	85 f6                	test   esi,esi
c002273a:	0f 84 95 00 00 00    	je     c00227d5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022740:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022745:	74 17                	je     c002275e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022747:	83 ec 0c             	sub    esp,0xc
c002274a:	68 97 d3 02 c0       	push   0xc002d397
c002274f:	e8 23 07 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0022754:	83 c4 10             	add    esp,0x10
c0022757:	b8 03 00 00 00       	mov    eax,0x3
c002275c:	eb 7c                	jmp    c00227da <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002275e:	83 ec 0c             	sub    esp,0xc
c0022761:	6a 1c                	push   0x1c
c0022763:	e8 58 d1 fe ff       	call   c000f8c0 <malloc>
c0022768:	89 07                	mov    DWORD PTR [edi],eax
c002276a:	89 c3                	mov    ebx,eax
c002276c:	58                   	pop    eax
c002276d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022771:	50                   	push   eax
c0022772:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022775:	50                   	push   eax
c0022776:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002277a:	50                   	push   eax
c002277b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002277f:	50                   	push   eax
c0022780:	56                   	push   esi
c0022781:	e8 0d ff ff ff       	call   c0022693 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022786:	83 c4 20             	add    esp,0x20
c0022789:	84 c0                	test   al,al
c002278b:	74 07                	je     c0022794 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002278d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022792:	74 0b                	je     c002279f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022794:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022798:	b8 01 00 00 00       	mov    eax,0x1
c002279d:	eb 3b                	jmp    c00227da <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002279f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00227a3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00227a7:	89 03                	mov    DWORD PTR [ebx],eax
c00227a9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00227b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00227b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00227bb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227c2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00227c5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00227cc:	8a 06                	mov    al,BYTE PTR [esi]
c00227ce:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00227d1:	31 c0                	xor    eax,eax
c00227d3:	eb 05                	jmp    c00227da <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00227d5:	b8 04 00 00 00       	mov    eax,0x4
c00227da:	83 c4 10             	add    esp,0x10
c00227dd:	5b                   	pop    ebx
c00227de:	5e                   	pop    esi
c00227df:	5f                   	pop    edi
c00227e0:	c3                   	ret    
c00227e1:	90                   	nop

c00227e2 <ISO9660::exists(char const*)>:
c00227e2:	83 ec 28             	sub    esp,0x28
c00227e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227e9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00227ed:	52                   	push   edx
c00227ee:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00227f1:	52                   	push   edx
c00227f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00227f6:	52                   	push   edx
c00227f7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00227fb:	52                   	push   edx
c00227fc:	50                   	push   eax
c00227fd:	e8 91 fe ff ff       	call   c0022693 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022802:	83 c4 3c             	add    esp,0x3c
c0022805:	c3                   	ret    

c0022806 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022806:	56                   	push   esi
c0022807:	53                   	push   ebx
c0022808:	83 ec 14             	sub    esp,0x14
c002280b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002280f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022813:	85 db                	test   ebx,ebx
c0022815:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022819:	0f 94 c2             	sete   dl
c002281c:	85 f6                	test   esi,esi
c002281e:	0f 94 c0             	sete   al
c0022821:	08 c2                	or     dl,al
c0022823:	75 68                	jne    c002288d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022825:	85 c9                	test   ecx,ecx
c0022827:	74 64                	je     c002288d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022829:	83 ec 0c             	sub    esp,0xc
c002282c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002282f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022833:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022839:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022840:	50                   	push   eax
c0022841:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022844:	50                   	push   eax
c0022845:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022849:	50                   	push   eax
c002284a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002284e:	50                   	push   eax
c002284f:	51                   	push   ecx
c0022850:	e8 3e fe ff ff       	call   c0022693 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022855:	83 c4 20             	add    esp,0x20
c0022858:	ba 01 00 00 00       	mov    edx,0x1
c002285d:	84 c0                	test   al,al
c002285f:	74 31                	je     c0022892 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022865:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002286c:	89 03                	mov    DWORD PTR [ebx],eax
c002286e:	ba 00 00 00 00       	mov    edx,0x0
c0022873:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022877:	85 c0                	test   eax,eax
c0022879:	0f 95 06             	setne  BYTE PTR [esi]
c002287c:	74 14                	je     c0022892 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002287e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022884:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002288b:	eb 05                	jmp    c0022892 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002288d:	ba 04 00 00 00       	mov    edx,0x4
c0022892:	83 c4 14             	add    esp,0x14
c0022895:	89 d0                	mov    eax,edx
c0022897:	5b                   	pop    ebx
c0022898:	5e                   	pop    esi
c0022899:	c3                   	ret    

c002289a <ISO9660::openDir(char const*, void**)>:
c002289a:	57                   	push   edi
c002289b:	56                   	push   esi
c002289c:	53                   	push   ebx
c002289d:	83 ec 10             	sub    esp,0x10
c00228a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00228a4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00228a8:	85 ff                	test   edi,edi
c00228aa:	0f 84 95 00 00 00    	je     c0022945 <ISO9660::openDir(char const*, void**)+0xab>
c00228b0:	85 f6                	test   esi,esi
c00228b2:	0f 84 8d 00 00 00    	je     c0022945 <ISO9660::openDir(char const*, void**)+0xab>
c00228b8:	83 ec 0c             	sub    esp,0xc
c00228bb:	6a 1c                	push   0x1c
c00228bd:	e8 fe cf fe ff       	call   c000f8c0 <malloc>
c00228c2:	89 07                	mov    DWORD PTR [edi],eax
c00228c4:	89 c3                	mov    ebx,eax
c00228c6:	59                   	pop    ecx
c00228c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00228cb:	50                   	push   eax
c00228cc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00228cf:	50                   	push   eax
c00228d0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228d4:	50                   	push   eax
c00228d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228d9:	50                   	push   eax
c00228da:	56                   	push   esi
c00228db:	e8 b3 fd ff ff       	call   c0022693 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00228e0:	83 c4 20             	add    esp,0x20
c00228e3:	84 c0                	test   al,al
c00228e5:	74 07                	je     c00228ee <ISO9660::openDir(char const*, void**)+0x54>
c00228e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00228ec:	75 21                	jne    c002290f <ISO9660::openDir(char const*, void**)+0x75>
c00228ee:	0f b6 c0             	movzx  eax,al
c00228f1:	52                   	push   edx
c00228f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228f6:	50                   	push   eax
c00228f7:	68 bd d3 02 c0       	push   0xc002d3bd
c00228fc:	e8 76 05 ff ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0022901:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022905:	83 c4 10             	add    esp,0x10
c0022908:	b8 01 00 00 00       	mov    eax,0x1
c002290d:	eb 3b                	jmp    c002294a <ISO9660::openDir(char const*, void**)+0xb0>
c002290f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022913:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022917:	89 03                	mov    DWORD PTR [ebx],eax
c0022919:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022924:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002292b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022932:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002293c:	8a 06                	mov    al,BYTE PTR [esi]
c002293e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022941:	31 c0                	xor    eax,eax
c0022943:	eb 05                	jmp    c002294a <ISO9660::openDir(char const*, void**)+0xb0>
c0022945:	b8 04 00 00 00       	mov    eax,0x4
c002294a:	83 c4 10             	add    esp,0x10
c002294d:	5b                   	pop    ebx
c002294e:	5e                   	pop    esi
c002294f:	5f                   	pop    edi
c0022950:	c3                   	ret    
c0022951:	90                   	nop

c0022952 <ISO9660::ISO9660()>:
c0022952:	83 ec 0c             	sub    esp,0xc
c0022955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022959:	83 ec 0c             	sub    esp,0xc
c002295c:	50                   	push   eax
c002295d:	e8 20 08 ff ff       	call   c0013182 <Filesystem::Filesystem()>
c0022962:	83 c4 10             	add    esp,0x10
c0022965:	ba e0 d3 02 c0       	mov    edx,0xc002d3e0
c002296a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296e:	89 10                	mov    DWORD PTR [eax],edx
c0022970:	90                   	nop
c0022971:	83 c4 0c             	add    esp,0xc
c0022974:	c3                   	ret    
c0022975:	90                   	nop

c0022976 <SoundChannel::~SoundChannel()>:
c0022976:	83 ec 0c             	sub    esp,0xc
c0022979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022980:	83 ec 0c             	sub    esp,0xc
c0022983:	50                   	push   eax
c0022984:	e8 47 cf fe ff       	call   c000f8d0 <free>
c0022989:	83 c4 10             	add    esp,0x10
c002298c:	90                   	nop
c002298d:	83 c4 0c             	add    esp,0xc
c0022990:	c3                   	ret    
c0022991:	90                   	nop

c0022992 <SoundChannel::setSpeed(float)>:
c0022992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022996:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002299a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002299d:	c3                   	ret    

c002299e <SoundChannel::getSpeed()>:
c002299e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229a2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00229a5:	c3                   	ret    

c00229a6 <SoundChannel::setVolume(int)>:
c00229a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229aa:	83 f8 64             	cmp    eax,0x64
c00229ad:	7e 05                	jle    c00229b4 <SoundChannel::setVolume(int)+0xe>
c00229af:	b8 64 00 00 00       	mov    eax,0x64
c00229b4:	85 c0                	test   eax,eax
c00229b6:	79 02                	jns    c00229ba <SoundChannel::setVolume(int)+0x14>
c00229b8:	31 c0                	xor    eax,eax
c00229ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00229be:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00229c1:	c3                   	ret    

c00229c2 <SoundChannel::getVolume()>:
c00229c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229c6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00229c9:	c3                   	ret    

c00229ca <SoundChannel::pause()>:
c00229ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229ce:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00229d2:	c3                   	ret    
c00229d3:	90                   	nop

c00229d4 <SoundChannel::SoundChannel(int, int, int, int)>:
c00229d4:	83 ec 1c             	sub    esp,0x1c
c00229d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00229db:	e8 ea ff ff ff       	call   c00229ca <SoundChannel::pause()>
c00229e0:	83 c4 04             	add    esp,0x4
c00229e3:	6a 50                	push   0x50
c00229e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229e9:	e8 b8 ff ff ff       	call   c00229a6 <SoundChannel::setVolume(int)>
c00229ee:	83 c4 08             	add    esp,0x8
c00229f1:	a1 5c d4 02 c0       	mov    eax,ds:0xc002d45c
c00229f6:	50                   	push   eax
c00229f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229fb:	e8 92 ff ff ff       	call   c0022992 <SoundChannel::setSpeed(float)>
c0022a00:	83 c4 08             	add    esp,0x8
c0022a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a07:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022a0b:	89 10                	mov    DWORD PTR [eax],edx
c0022a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022a15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022a20:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a23:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022a28:	75 23                	jne    c0022a4d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a37:	0f af c2             	imul   eax,edx
c0022a3a:	85 c0                	test   eax,eax
c0022a3c:	79 03                	jns    c0022a41 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022a3e:	83 c0 03             	add    eax,0x3
c0022a41:	c1 f8 02             	sar    eax,0x2
c0022a44:	05 a0 0f 00 00       	add    eax,0xfa0
c0022a49:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022a55:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a5c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022a63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a67:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a72:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022a75:	c1 e0 02             	shl    eax,0x2
c0022a78:	83 ec 0c             	sub    esp,0xc
c0022a7b:	50                   	push   eax
c0022a7c:	e8 3f ce fe ff       	call   c000f8c0 <malloc>
c0022a81:	83 c4 10             	add    esp,0x10
c0022a84:	89 c2                	mov    edx,eax
c0022a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a8a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022a8d:	83 ec 04             	sub    esp,0x4
c0022a90:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022a94:	50                   	push   eax
c0022a95:	6a 01                	push   0x1
c0022a97:	6a 04                	push   0x4
c0022a99:	e8 0b 61 fe ff       	call   c0008ba9 <src_new>
c0022a9e:	83 c4 10             	add    esp,0x10
c0022aa1:	89 c2                	mov    edx,eax
c0022aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022aa7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aae:	85 c0                	test   eax,eax
c0022ab0:	74 10                	je     c0022ac2 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022ab2:	83 ec 0c             	sub    esp,0xc
c0022ab5:	68 40 d4 02 c0       	push   0xc002d440
c0022aba:	e8 a6 7d ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0022abf:	83 c4 10             	add    esp,0x10
c0022ac2:	a0 20 32 03 c0       	mov    al,ds:0xc0033220
c0022ac7:	83 f0 01             	xor    eax,0x1
c0022aca:	84 c0                	test   al,al
c0022acc:	74 57                	je     c0022b25 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022ace:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c0022ad3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ad7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022adf:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022ae7:	7f 35                	jg     c0022b1e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022ae9:	83 ec 0c             	sub    esp,0xc
c0022aec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022af0:	e8 6a 50 00 00       	call   c0027b5f <__floatsisf>
c0022af5:	83 c4 10             	add    esp,0x10
c0022af8:	8b 15 60 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d460
c0022afe:	83 ec 08             	sub    esp,0x8
c0022b01:	52                   	push   edx
c0022b02:	50                   	push   eax
c0022b03:	e8 69 4c 00 00       	call   c0027771 <__mulsf3>
c0022b08:	83 c4 10             	add    esp,0x10
c0022b0b:	89 c2                	mov    edx,eax
c0022b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b11:	89 14 85 20 2e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd1e0],edx
c0022b18:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022b1c:	eb c1                	jmp    c0022adf <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022b1e:	c6 05 20 32 03 c0 01 	mov    BYTE PTR ds:0xc0033220,0x1
c0022b25:	90                   	nop
c0022b26:	83 c4 1c             	add    esp,0x1c
c0022b29:	c3                   	ret    

c0022b2a <SoundChannel::play()>:
c0022b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b2e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022b32:	c3                   	ret    
c0022b33:	90                   	nop

c0022b34 <SoundChannel::paused()>:
c0022b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b38:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022b3b:	c3                   	ret    

c0022b3c <SoundChannel::getSampleRate()>:
c0022b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b42:	c3                   	ret    
c0022b43:	90                   	nop

c0022b44 <SoundChannel::getBits()>:
c0022b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b4b:	c3                   	ret    

c0022b4c <SoundChannel::getBufferUsed()>:
c0022b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b50:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022b53:	c3                   	ret    

c0022b54 <SoundChannel::getBufferSize()>:
c0022b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b58:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022b5b:	c3                   	ret    

c0022b5c <SoundChannel::unbuffer(float*, int, int)>:
c0022b5c:	56                   	push   esi
c0022b5d:	53                   	push   ebx
c0022b5e:	83 ec 40             	sub    esp,0x40
c0022b61:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022b65:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022b68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022b6f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b73:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022b77:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022b7b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022b7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022b87:	e8 d3 4f 00 00       	call   c0027b5f <__floatsisf>
c0022b8c:	5a                   	pop    edx
c0022b8d:	89 c6                	mov    esi,eax
c0022b8f:	ff 33                	push   DWORD PTR [ebx]
c0022b91:	e8 c9 4f 00 00       	call   c0027b5f <__floatsisf>
c0022b96:	59                   	pop    ecx
c0022b97:	5a                   	pop    edx
c0022b98:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022b9b:	50                   	push   eax
c0022b9c:	e8 d0 4b 00 00       	call   c0027771 <__mulsf3>
c0022ba1:	59                   	pop    ecx
c0022ba2:	5a                   	pop    edx
c0022ba3:	50                   	push   eax
c0022ba4:	56                   	push   esi
c0022ba5:	e8 8a 4d 00 00       	call   c0027934 <__divsf3>
c0022baa:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bad:	e8 7d 62 00 00       	call   c0028e2f <__extendsfdf2>
c0022bb2:	59                   	pop    ecx
c0022bb3:	5e                   	pop    esi
c0022bb4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022bb8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022bbc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022bc4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022bc8:	50                   	push   eax
c0022bc9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022bcc:	e8 cd 5b fe ff       	call   c000879e <src_process>
c0022bd1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022bd5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022bd8:	83 c4 0c             	add    esp,0xc
c0022bdb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022bde:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022be1:	29 d0                	sub    eax,edx
c0022be3:	c1 e0 02             	shl    eax,0x2
c0022be6:	50                   	push   eax
c0022be7:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022bea:	50                   	push   eax
c0022beb:	51                   	push   ecx
c0022bec:	e8 b3 da fd ff       	call   c00006a4 <memmove>
c0022bf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022bf5:	83 c4 44             	add    esp,0x44
c0022bf8:	5b                   	pop    ebx
c0022bf9:	5e                   	pop    esi
c0022bfa:	c3                   	ret    
c0022bfb:	90                   	nop

c0022bfc <SoundChannel::buffer8(unsigned char*, int)>:
c0022bfc:	55                   	push   ebp
c0022bfd:	57                   	push   edi
c0022bfe:	56                   	push   esi
c0022bff:	53                   	push   ebx
c0022c00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c04:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022c08:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022c0b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022c0f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022c12:	74 7a                	je     c0022c8e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022c14:	85 ff                	test   edi,edi
c0022c16:	7e 76                	jle    c0022c8e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022c18:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022c1c:	8d 70 01             	lea    esi,[eax+0x1]
c0022c1f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022c22:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022c25:	8b 1c 9d 20 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd1e0]
c0022c2c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022c2f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022c32:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022c35:	74 5e                	je     c0022c95 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022c37:	83 ff 01             	cmp    edi,0x1
c0022c3a:	74 4b                	je     c0022c87 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022c3c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022c40:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022c43:	8d 70 01             	lea    esi,[eax+0x1]
c0022c46:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022c49:	8b 1c 9d 20 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd1e0]
c0022c50:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022c53:	b8 02 00 00 00       	mov    eax,0x2
c0022c58:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022c5b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022c5e:	75 23                	jne    c0022c83 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022c60:	eb 27                	jmp    c0022c89 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c62:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022c67:	8d 71 01             	lea    esi,[ecx+0x1]
c0022c6a:	40                   	inc    eax
c0022c6b:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022c6e:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022c71:	8b 1c 9d 20 2e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd1e0]
c0022c78:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022c7b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022c7e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022c81:	74 06                	je     c0022c89 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c83:	39 c7                	cmp    edi,eax
c0022c85:	75 db                	jne    c0022c62 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022c87:	89 f8                	mov    eax,edi
c0022c89:	5b                   	pop    ebx
c0022c8a:	5e                   	pop    esi
c0022c8b:	5f                   	pop    edi
c0022c8c:	5d                   	pop    ebp
c0022c8d:	c3                   	ret    
c0022c8e:	5b                   	pop    ebx
c0022c8f:	31 c0                	xor    eax,eax
c0022c91:	5e                   	pop    esi
c0022c92:	5f                   	pop    edi
c0022c93:	5d                   	pop    ebp
c0022c94:	c3                   	ret    
c0022c95:	b8 01 00 00 00       	mov    eax,0x1
c0022c9a:	eb ed                	jmp    c0022c89 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022c9c <SoundDevice::SoundDevice(char const*)>:
c0022c9c:	83 ec 1c             	sub    esp,0x1c
c0022c9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ca3:	83 ec 08             	sub    esp,0x8
c0022ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022caa:	50                   	push   eax
c0022cab:	e8 ec 17 ff ff       	call   c001449c <Device::Device(char const*)>
c0022cb0:	83 c4 10             	add    esp,0x10
c0022cb3:	ba 6c d4 02 c0       	mov    edx,0xc002d46c
c0022cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cbc:	89 10                	mov    DWORD PTR [eax],edx
c0022cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cc2:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cd0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022cda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022ce2:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022ce7:	7f 19                	jg     c0022d02 <SoundDevice::SoundDevice(char const*)+0x66>
c0022ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ced:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cf1:	83 c2 54             	add    edx,0x54
c0022cf4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022cfc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d00:	eb e0                	jmp    c0022ce2 <SoundDevice::SoundDevice(char const*)+0x46>
c0022d02:	90                   	nop
c0022d03:	83 c4 1c             	add    esp,0x1c
c0022d06:	c3                   	ret    
c0022d07:	90                   	nop

c0022d08 <SoundDevice::~SoundDevice()>:
c0022d08:	53                   	push   ebx
c0022d09:	83 ec 18             	sub    esp,0x18
c0022d0c:	ba 6c d4 02 c0       	mov    edx,0xc002d46c
c0022d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d15:	89 10                	mov    DWORD PTR [eax],edx
c0022d17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022d1f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022d24:	7f 46                	jg     c0022d6c <SoundDevice::~SoundDevice()+0x64>
c0022d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022d2e:	83 c2 54             	add    edx,0x54
c0022d31:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022d35:	85 c0                	test   eax,eax
c0022d37:	74 2d                	je     c0022d66 <SoundDevice::~SoundDevice()+0x5e>
c0022d39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022d41:	83 c2 54             	add    edx,0x54
c0022d44:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022d48:	85 db                	test   ebx,ebx
c0022d4a:	74 1a                	je     c0022d66 <SoundDevice::~SoundDevice()+0x5e>
c0022d4c:	83 ec 0c             	sub    esp,0xc
c0022d4f:	53                   	push   ebx
c0022d50:	e8 21 fc ff ff       	call   c0022976 <SoundChannel::~SoundChannel()>
c0022d55:	83 c4 10             	add    esp,0x10
c0022d58:	83 ec 08             	sub    esp,0x8
c0022d5b:	6a 2c                	push   0x2c
c0022d5d:	53                   	push   ebx
c0022d5e:	e8 34 00 ff ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0022d63:	83 c4 10             	add    esp,0x10
c0022d66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d6a:	eb b3                	jmp    c0022d1f <SoundDevice::~SoundDevice()+0x17>
c0022d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d70:	83 ec 0c             	sub    esp,0xc
c0022d73:	50                   	push   eax
c0022d74:	e8 05 14 ff ff       	call   c001417e <Device::~Device()>
c0022d79:	83 c4 10             	add    esp,0x10
c0022d7c:	90                   	nop
c0022d7d:	83 c4 18             	add    esp,0x18
c0022d80:	5b                   	pop    ebx
c0022d81:	c3                   	ret    

c0022d82 <SoundDevice::~SoundDevice()>:
c0022d82:	83 ec 0c             	sub    esp,0xc
c0022d85:	83 ec 0c             	sub    esp,0xc
c0022d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d8c:	e8 77 ff ff ff       	call   c0022d08 <SoundDevice::~SoundDevice()>
c0022d91:	83 c4 10             	add    esp,0x10
c0022d94:	83 ec 08             	sub    esp,0x8
c0022d97:	68 e4 01 00 00       	push   0x1e4
c0022d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022da0:	e8 f2 ff fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0022da5:	83 c4 10             	add    esp,0x10
c0022da8:	83 c4 0c             	add    esp,0xc
c0022dab:	c3                   	ret    

c0022dac <SoundDevice::getFreeChannelNum()>:
c0022dac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022db0:	31 c0                	xor    eax,eax
c0022db2:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022dba:	74 09                	je     c0022dc5 <SoundDevice::getFreeChannelNum()+0x19>
c0022dbc:	40                   	inc    eax
c0022dbd:	83 f8 20             	cmp    eax,0x20
c0022dc0:	75 f0                	jne    c0022db2 <SoundDevice::getFreeChannelNum()+0x6>
c0022dc2:	83 c8 ff             	or     eax,0xffffffff
c0022dc5:	c3                   	ret    

c0022dc6 <SoundDevice::addChannel(SoundChannel*)>:
c0022dc6:	56                   	push   esi
c0022dc7:	53                   	push   ebx
c0022dc8:	51                   	push   ecx
c0022dc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022dcd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022dd1:	53                   	push   ebx
c0022dd2:	e8 d5 ff ff ff       	call   c0022dac <SoundDevice::getFreeChannelNum()>
c0022dd7:	5a                   	pop    edx
c0022dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0022ddb:	74 51                	je     c0022e2e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022ddd:	85 f6                	test   esi,esi
c0022ddf:	74 4d                	je     c0022e2e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022de1:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022de8:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022def:	75 30                	jne    c0022e21 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022df1:	83 ec 0c             	sub    esp,0xc
c0022df4:	56                   	push   esi
c0022df5:	e8 42 fd ff ff       	call   c0022b3c <SoundChannel::getSampleRate()>
c0022dfa:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022e00:	89 34 24             	mov    DWORD PTR [esp],esi
c0022e03:	e8 3c fd ff ff       	call   c0022b44 <SoundChannel::getBits()>
c0022e08:	83 c4 0c             	add    esp,0xc
c0022e0b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022e11:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022e13:	50                   	push   eax
c0022e14:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022e1a:	53                   	push   ebx
c0022e1b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022e1e:	83 c4 10             	add    esp,0x10
c0022e21:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022e27:	b8 01 00 00 00       	mov    eax,0x1
c0022e2c:	eb 03                	jmp    c0022e31 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022e2e:	83 c8 ff             	or     eax,0xffffffff
c0022e31:	5a                   	pop    edx
c0022e32:	5b                   	pop    ebx
c0022e33:	5e                   	pop    esi
c0022e34:	c3                   	ret    
c0022e35:	90                   	nop

c0022e36 <SoundDevice::removeChannel(int)>:
c0022e36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e3e:	83 fa 1f             	cmp    edx,0x1f
c0022e41:	77 23                	ja     c0022e66 <SoundDevice::removeChannel(int)+0x30>
c0022e43:	8d 14 90             	lea    edx,[eax+edx*4]
c0022e46:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022e4d:	74 17                	je     c0022e66 <SoundDevice::removeChannel(int)+0x30>
c0022e4f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022e59:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022e5f:	75 05                	jne    c0022e66 <SoundDevice::removeChannel(int)+0x30>
c0022e61:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e63:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022e66:	c3                   	ret    
c0022e67:	90                   	nop

c0022e68 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022e68:	57                   	push   edi
c0022e69:	56                   	push   esi
c0022e6a:	53                   	push   ebx
c0022e6b:	31 db                	xor    ebx,ebx
c0022e6d:	83 ec 10             	sub    esp,0x10
c0022e70:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022e74:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022e78:	0f 8d cb 00 00 00    	jge    c0022f49 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022e7e:	83 ec 0c             	sub    esp,0xc
c0022e81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e85:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022e88:	e8 a2 5f 00 00       	call   c0028e2f <__extendsfdf2>
c0022e8d:	83 c4 10             	add    esp,0x10
c0022e90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e98:	68 00 00 f0 3f       	push   0x3ff00000
c0022e9d:	6a 00                	push   0x0
c0022e9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ea3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ea7:	e8 0f 4f 00 00       	call   c0027dbb <__adddf3>
c0022eac:	83 c4 10             	add    esp,0x10
c0022eaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022eb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022eb7:	68 00 00 e0 3f       	push   0x3fe00000
c0022ebc:	6a 00                	push   0x0
c0022ebe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ec2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ec6:	e8 6d 55 00 00       	call   c0028438 <__muldf3>
c0022ecb:	83 c4 10             	add    esp,0x10
c0022ece:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ed2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ed6:	68 00 00 60 40       	push   0x40600000
c0022edb:	6a 00                	push   0x0
c0022edd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ee1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ee5:	e8 4e 55 00 00       	call   c0028438 <__muldf3>
c0022eea:	59                   	pop    ecx
c0022eeb:	5f                   	pop    edi
c0022eec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ef0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022ef4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ef8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022efc:	e8 0a 5e 00 00       	call   c0028d0b <__truncdfsf2>
c0022f01:	5a                   	pop    edx
c0022f02:	89 c7                	mov    edi,eax
c0022f04:	59                   	pop    ecx
c0022f05:	68 00 00 fe 42       	push   0x42fe0000
c0022f0a:	50                   	push   eax
c0022f0b:	e8 a5 4e 00 00       	call   c0027db5 <__gesf2>
c0022f10:	83 c4 10             	add    esp,0x10
c0022f13:	85 c0                	test   eax,eax
c0022f15:	78 06                	js     c0022f1d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022f17:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022f1b:	eb 26                	jmp    c0022f43 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022f1d:	50                   	push   eax
c0022f1e:	50                   	push   eax
c0022f1f:	6a 00                	push   0x0
c0022f21:	57                   	push   edi
c0022f22:	e8 92 4e 00 00       	call   c0027db9 <__lesf2>
c0022f27:	83 c4 10             	add    esp,0x10
c0022f2a:	85 c0                	test   eax,eax
c0022f2c:	7f 06                	jg     c0022f34 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022f2e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022f32:	eb 0f                	jmp    c0022f43 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022f34:	83 ec 0c             	sub    esp,0xc
c0022f37:	57                   	push   edi
c0022f38:	e8 8f 5f 00 00       	call   c0028ecc <lrintf>
c0022f3d:	83 c4 10             	add    esp,0x10
c0022f40:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022f43:	43                   	inc    ebx
c0022f44:	e9 2b ff ff ff       	jmp    c0022e74 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022f49:	83 c4 10             	add    esp,0x10
c0022f4c:	5b                   	pop    ebx
c0022f4d:	5e                   	pop    esi
c0022f4e:	5f                   	pop    edi
c0022f4f:	c3                   	ret    

c0022f50 <SoundDevice::getAudio(int, float*, float*)>:
c0022f50:	55                   	push   ebp
c0022f51:	57                   	push   edi
c0022f52:	56                   	push   esi
c0022f53:	53                   	push   ebx
c0022f54:	31 db                	xor    ebx,ebx
c0022f56:	83 ec 20             	sub    esp,0x20
c0022f59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022f5d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022f61:	c1 e0 02             	shl    eax,0x2
c0022f64:	50                   	push   eax
c0022f65:	6a 00                	push   0x0
c0022f67:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022f6b:	e8 fc d7 fd ff       	call   c000076c <memset>
c0022f70:	83 c4 10             	add    esp,0x10
c0022f73:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022f77:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022f7e:	85 c0                	test   eax,eax
c0022f80:	0f 84 d7 00 00 00    	je     c002305d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f86:	83 ec 0c             	sub    esp,0xc
c0022f89:	50                   	push   eax
c0022f8a:	e8 a5 fb ff ff       	call   c0022b34 <SoundChannel::paused()>
c0022f8f:	83 c4 10             	add    esp,0x10
c0022f92:	84 c0                	test   al,al
c0022f94:	0f 85 c3 00 00 00    	jne    c002305d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f9a:	83 ec 0c             	sub    esp,0xc
c0022f9d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022fa4:	e8 19 fa ff ff       	call   c00229c2 <SoundChannel::getVolume()>
c0022fa9:	83 c4 10             	add    esp,0x10
c0022fac:	85 c0                	test   eax,eax
c0022fae:	0f 84 a9 00 00 00    	je     c002305d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022fb4:	83 ec 0c             	sub    esp,0xc
c0022fb7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022fbe:	e8 ff f9 ff ff       	call   c00229c2 <SoundChannel::getVolume()>
c0022fc3:	83 ec 0c             	sub    esp,0xc
c0022fc6:	50                   	push   eax
c0022fc7:	e8 93 4b 00 00       	call   c0027b5f <__floatsisf>
c0022fcc:	59                   	pop    ecx
c0022fcd:	5d                   	pop    ebp
c0022fce:	31 ed                	xor    ebp,ebp
c0022fd0:	68 00 00 c8 42       	push   0x42c80000
c0022fd5:	50                   	push   eax
c0022fd6:	e8 59 49 00 00       	call   c0027934 <__divsf3>
c0022fdb:	83 c4 10             	add    esp,0x10
c0022fde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022fe2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022fe6:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022fec:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022ff0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022ff7:	e8 60 fb ff ff       	call   c0022b5c <SoundChannel::unbuffer(float*, int, int)>
c0022ffc:	83 c4 20             	add    esp,0x20
c0022fff:	89 c1                	mov    ecx,eax
c0023001:	39 cd                	cmp    ebp,ecx
c0023003:	7d 52                	jge    c0023057 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0023005:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023009:	50                   	push   eax
c002300a:	50                   	push   eax
c002300b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002300f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0023012:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023016:	e8 56 47 00 00       	call   c0027771 <__mulsf3>
c002301b:	5a                   	pop    edx
c002301c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023020:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0023026:	e8 34 4b 00 00       	call   c0027b5f <__floatsisf>
c002302b:	59                   	pop    ecx
c002302c:	5a                   	pop    edx
c002302d:	50                   	push   eax
c002302e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023032:	e8 fd 48 00 00       	call   c0027934 <__divsf3>
c0023037:	59                   	pop    ecx
c0023038:	5a                   	pop    edx
c0023039:	50                   	push   eax
c002303a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002303e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0023041:	e8 08 44 00 00       	call   c002744e <__addsf3>
c0023046:	83 c4 10             	add    esp,0x10
c0023049:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002304d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023051:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0023054:	45                   	inc    ebp
c0023055:	eb aa                	jmp    c0023001 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0023057:	39 cf                	cmp    edi,ecx
c0023059:	7e 02                	jle    c002305d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002305b:	89 cf                	mov    edi,ecx
c002305d:	43                   	inc    ebx
c002305e:	83 fb 20             	cmp    ebx,0x20
c0023061:	0f 85 10 ff ff ff    	jne    c0022f77 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0023067:	83 c4 1c             	add    esp,0x1c
c002306a:	89 f8                	mov    eax,edi
c002306c:	5b                   	pop    ebx
c002306d:	5e                   	pop    esi
c002306e:	5f                   	pop    edi
c002306f:	5d                   	pop    ebp
c0023070:	c3                   	ret    
c0023071:	90                   	nop

c0023072 <PCI::open(int, int, void*)>:
c0023072:	83 ec 18             	sub    esp,0x18
c0023075:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023079:	8b 10                	mov    edx,DWORD PTR [eax]
c002307b:	50                   	push   eax
c002307c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002307f:	31 c0                	xor    eax,eax
c0023081:	83 c4 1c             	add    esp,0x1c
c0023084:	c3                   	ret    
c0023085:	90                   	nop

c0023086 <PCI::close(int, int, void*)>:
c0023086:	31 c0                	xor    eax,eax
c0023088:	c3                   	ret    
c0023089:	90                   	nop

c002308a <PCI::PCI()>:
c002308a:	83 ec 0c             	sub    esp,0xc
c002308d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023091:	83 ec 08             	sub    esp,0x8
c0023094:	68 9c d4 02 c0       	push   0xc002d49c
c0023099:	50                   	push   eax
c002309a:	e8 79 0a ff ff       	call   c0013b18 <Bus::Bus(char const*)>
c002309f:	83 c4 10             	add    esp,0x10
c00230a2:	ba 24 d5 02 c0       	mov    edx,0xc002d524
c00230a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ab:	89 10                	mov    DWORD PTR [eax],edx
c00230ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00230b7:	0f b6 d0             	movzx  edx,al
c00230ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230be:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00230c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00230cf:	0f b6 d0             	movzx  edx,al
c00230d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230d6:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00230db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00230e5:	8d 50 01             	lea    edx,[eax+0x1]
c00230e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230ec:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00230f2:	0f b6 d0             	movzx  edx,al
c00230f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00230fd:	83 c9 c0             	or     ecx,0xffffffc0
c0023100:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023104:	90                   	nop
c0023105:	83 c4 0c             	add    esp,0xc
c0023108:	c3                   	ret    
c0023109:	90                   	nop

c002310a <PCI::readBAR8(unsigned int, int)>:
c002310a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002310e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023112:	f6 c2 01             	test   dl,0x1
c0023115:	74 07                	je     c002311e <PCI::readBAR8(unsigned int, int)+0x14>
c0023117:	83 e2 fc             	and    edx,0xfffffffc
c002311a:	01 c2                	add    edx,eax
c002311c:	ec                   	in     al,dx
c002311d:	c3                   	ret    
c002311e:	83 e2 f0             	and    edx,0xfffffff0
c0023121:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0023124:	c3                   	ret    
c0023125:	90                   	nop

c0023126 <PCI::readBAR16(unsigned int, int)>:
c0023126:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002312a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002312e:	f6 c2 01             	test   dl,0x1
c0023131:	74 08                	je     c002313b <PCI::readBAR16(unsigned int, int)+0x15>
c0023133:	83 e2 fc             	and    edx,0xfffffffc
c0023136:	01 c2                	add    edx,eax
c0023138:	66 ed                	in     ax,dx
c002313a:	c3                   	ret    
c002313b:	83 e2 f0             	and    edx,0xfffffff0
c002313e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0023142:	c3                   	ret    
c0023143:	90                   	nop

c0023144 <PCI::readBAR32(unsigned int, int)>:
c0023144:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023148:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002314c:	f6 c2 01             	test   dl,0x1
c002314f:	74 07                	je     c0023158 <PCI::readBAR32(unsigned int, int)+0x14>
c0023151:	83 e2 fc             	and    edx,0xfffffffc
c0023154:	01 c2                	add    edx,eax
c0023156:	ed                   	in     eax,dx
c0023157:	c3                   	ret    
c0023158:	83 e2 f0             	and    edx,0xfffffff0
c002315b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002315e:	c3                   	ret    
c002315f:	90                   	nop

c0023160 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0023160:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023168:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002316c:	f6 c2 01             	test   dl,0x1
c002316f:	74 07                	je     c0023178 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023171:	83 e2 fc             	and    edx,0xfffffffc
c0023174:	01 ca                	add    edx,ecx
c0023176:	ee                   	out    dx,al
c0023177:	c3                   	ret    
c0023178:	83 e2 f0             	and    edx,0xfffffff0
c002317b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002317e:	c3                   	ret    
c002317f:	90                   	nop

c0023180 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023188:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002318c:	f6 c2 01             	test   dl,0x1
c002318f:	74 08                	je     c0023199 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0023191:	83 e2 fc             	and    edx,0xfffffffc
c0023194:	01 ca                	add    edx,ecx
c0023196:	66 ef                	out    dx,ax
c0023198:	c3                   	ret    
c0023199:	83 e2 f0             	and    edx,0xfffffff0
c002319c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00231a0:	c3                   	ret    
c00231a1:	90                   	nop

c00231a2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00231a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00231a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00231ae:	f6 c2 01             	test   dl,0x1
c00231b1:	74 07                	je     c00231ba <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00231b3:	83 e2 fc             	and    edx,0xfffffffc
c00231b6:	01 ca                	add    edx,ecx
c00231b8:	ef                   	out    dx,eax
c00231b9:	c3                   	ret    
c00231ba:	83 e2 f0             	and    edx,0xfffffff0
c00231bd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00231c0:	c3                   	ret    
c00231c1:	90                   	nop

c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00231c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00231c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00231cb:	89 ca                	mov    edx,ecx
c00231cd:	c1 e0 10             	shl    eax,0x10
c00231d0:	81 e2 fc 00 00 00    	and    edx,0xfc
c00231d6:	09 d0                	or     eax,edx
c00231d8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00231dd:	c1 e2 08             	shl    edx,0x8
c00231e0:	09 d0                	or     eax,edx
c00231e2:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00231e7:	c1 e2 0b             	shl    edx,0xb
c00231ea:	09 d0                	or     eax,edx
c00231ec:	ba f8 0c 00 00       	mov    edx,0xcf8
c00231f1:	0d 00 00 00 80       	or     eax,0x80000000
c00231f6:	ef                   	out    dx,eax
c00231f7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00231fc:	ed                   	in     eax,dx
c00231fd:	83 e1 02             	and    ecx,0x2
c0023200:	0f b6 c9             	movzx  ecx,cl
c0023203:	c1 e1 03             	shl    ecx,0x3
c0023206:	d3 e8                	shr    eax,cl
c0023208:	c3                   	ret    
c0023209:	90                   	nop

c002320a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002320a:	6a 00                	push   0x0
c002320c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023211:	50                   	push   eax
c0023212:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023217:	50                   	push   eax
c0023218:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002321d:	50                   	push   eax
c002321e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023222:	e8 9b ff ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023227:	83 c4 14             	add    esp,0x14
c002322a:	c3                   	ret    
c002322b:	90                   	nop

c002322c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002322c:	6a 0e                	push   0xe
c002322e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023233:	50                   	push   eax
c0023234:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023239:	50                   	push   eax
c002323a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002323f:	50                   	push   eax
c0023240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023244:	e8 79 ff ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023249:	83 c4 14             	add    esp,0x14
c002324c:	0f b6 c0             	movzx  eax,al
c002324f:	c3                   	ret    

c0023250 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023250:	55                   	push   ebp
c0023251:	57                   	push   edi
c0023252:	56                   	push   esi
c0023253:	53                   	push   ebx
c0023254:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0023259:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002325e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0023263:	6a 0a                	push   0xa
c0023265:	56                   	push   esi
c0023266:	55                   	push   ebp
c0023267:	57                   	push   edi
c0023268:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002326c:	e8 51 ff ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023271:	6a 0a                	push   0xa
c0023273:	89 c3                	mov    ebx,eax
c0023275:	56                   	push   esi
c0023276:	0f b6 db             	movzx  ebx,bl
c0023279:	55                   	push   ebp
c002327a:	57                   	push   edi
c002327b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002327f:	e8 3e ff ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023284:	83 c4 28             	add    esp,0x28
c0023287:	25 00 ff 00 00       	and    eax,0xff00
c002328c:	09 d8                	or     eax,ebx
c002328e:	5b                   	pop    ebx
c002328f:	5e                   	pop    esi
c0023290:	5f                   	pop    edi
c0023291:	5d                   	pop    ebp
c0023292:	c3                   	ret    
c0023293:	90                   	nop

c0023294 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023294:	6a 08                	push   0x8
c0023296:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002329b:	50                   	push   eax
c002329c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232a1:	50                   	push   eax
c00232a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232a7:	50                   	push   eax
c00232a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232ac:	e8 11 ff ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232b1:	83 c4 14             	add    esp,0x14
c00232b4:	0f b6 c4             	movzx  eax,ah
c00232b7:	c3                   	ret    

c00232b8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00232b8:	6a 08                	push   0x8
c00232ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232bf:	50                   	push   eax
c00232c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232c5:	50                   	push   eax
c00232c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232cb:	50                   	push   eax
c00232cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232d0:	e8 ed fe ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232d5:	83 c4 14             	add    esp,0x14
c00232d8:	c3                   	ret    
c00232d9:	90                   	nop

c00232da <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00232da:	6a 3c                	push   0x3c
c00232dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232e1:	50                   	push   eax
c00232e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232e7:	50                   	push   eax
c00232e8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232ed:	50                   	push   eax
c00232ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232f2:	e8 cb fe ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232f7:	83 c4 14             	add    esp,0x14
c00232fa:	c3                   	ret    
c00232fb:	90                   	nop

c00232fc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00232fc:	6a 18                	push   0x18
c00232fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023303:	50                   	push   eax
c0023304:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023309:	50                   	push   eax
c002330a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002330f:	50                   	push   eax
c0023310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023314:	e8 a9 fe ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023319:	83 c4 14             	add    esp,0x14
c002331c:	0f b6 c4             	movzx  eax,ah
c002331f:	c3                   	ret    

c0023320 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023320:	55                   	push   ebp
c0023321:	57                   	push   edi
c0023322:	56                   	push   esi
c0023323:	53                   	push   ebx
c0023324:	50                   	push   eax
c0023325:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0023329:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002332e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023333:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0023338:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002333f:	8d 43 12             	lea    eax,[ebx+0x12]
c0023342:	83 c3 10             	add    ebx,0x10
c0023345:	0f b6 c0             	movzx  eax,al
c0023348:	0f b6 db             	movzx  ebx,bl
c002334b:	50                   	push   eax
c002334c:	51                   	push   ecx
c002334d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023351:	57                   	push   edi
c0023352:	55                   	push   ebp
c0023353:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023357:	e8 66 fe ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002335c:	53                   	push   ebx
c002335d:	89 c6                	mov    esi,eax
c002335f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023363:	c1 e6 10             	shl    esi,0x10
c0023366:	51                   	push   ecx
c0023367:	57                   	push   edi
c0023368:	55                   	push   ebp
c0023369:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002336d:	e8 50 fe ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023372:	83 c4 2c             	add    esp,0x2c
c0023375:	0f b7 c0             	movzx  eax,ax
c0023378:	5b                   	pop    ebx
c0023379:	09 f0                	or     eax,esi
c002337b:	5e                   	pop    esi
c002337c:	5f                   	pop    edi
c002337d:	5d                   	pop    ebp
c002337e:	c3                   	ret    
c002337f:	90                   	nop

c0023380 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023380:	53                   	push   ebx
c0023381:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023386:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002338b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002338f:	c1 e1 10             	shl    ecx,0x10
c0023392:	25 fc 00 00 00       	and    eax,0xfc
c0023397:	09 c1                	or     ecx,eax
c0023399:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002339e:	c1 e0 08             	shl    eax,0x8
c00233a1:	09 c1                	or     ecx,eax
c00233a3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00233a8:	c1 e0 0b             	shl    eax,0xb
c00233ab:	09 c1                	or     ecx,eax
c00233ad:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00233b3:	89 c8                	mov    eax,ecx
c00233b5:	ef                   	out    dx,eax
c00233b6:	ba fc 0c 00 00       	mov    edx,0xcfc
c00233bb:	ed                   	in     eax,dx
c00233bc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00233c1:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00233c6:	74 0a                	je     c00233d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00233c8:	0f b7 d8             	movzx  ebx,ax
c00233cb:	89 d0                	mov    eax,edx
c00233cd:	c1 e0 10             	shl    eax,0x10
c00233d0:	eb 05                	jmp    c00233d7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00233d2:	66 31 c0             	xor    ax,ax
c00233d5:	89 d3                	mov    ebx,edx
c00233d7:	09 c3                	or     ebx,eax
c00233d9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00233de:	89 c8                	mov    eax,ecx
c00233e0:	ef                   	out    dx,eax
c00233e1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00233e6:	89 d8                	mov    eax,ebx
c00233e8:	ef                   	out    dx,eax
c00233e9:	5b                   	pop    ebx
c00233ea:	c3                   	ret    
c00233eb:	90                   	nop

c00233ec <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c00233ec:	31 c0                	xor    eax,eax
c00233ee:	c3                   	ret    
c00233ef:	90                   	nop

c00233f0 <PCI::checkBus(unsigned char)>:
c00233f0:	56                   	push   esi
c00233f1:	53                   	push   ebx
c00233f2:	31 db                	xor    ebx,ebx
c00233f4:	51                   	push   ecx
c00233f5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00233fa:	52                   	push   edx
c00233fb:	53                   	push   ebx
c00233fc:	43                   	inc    ebx
c00233fd:	56                   	push   esi
c00233fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023402:	e8 41 03 00 00       	call   c0023748 <PCI::checkDevice(unsigned char, unsigned char)>
c0023407:	83 c4 10             	add    esp,0x10
c002340a:	83 fb 20             	cmp    ebx,0x20
c002340d:	75 eb                	jne    c00233fa <PCI::checkBus(unsigned char)+0xa>
c002340f:	58                   	pop    eax
c0023410:	5b                   	pop    ebx
c0023411:	5e                   	pop    esi
c0023412:	c3                   	ret    
c0023413:	90                   	nop

c0023414 <PCI::foundDevice(PCIDeviceInfo)>:
c0023414:	55                   	push   ebp
c0023415:	57                   	push   edi
c0023416:	56                   	push   esi
c0023417:	53                   	push   ebx
c0023418:	83 ec 1c             	sub    esp,0x1c
c002341b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002341f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023425:	0f 84 68 01 00 00    	je     c0023593 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002342b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002342f:	66 81 f9 06 04       	cmp    cx,0x406
c0023434:	75 2c                	jne    c0023462 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023436:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002343b:	50                   	push   eax
c002343c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023441:	50                   	push   eax
c0023442:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023447:	50                   	push   eax
c0023448:	56                   	push   esi
c0023449:	e8 ae fe ff ff       	call   c00232fc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002344e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023452:	0f b6 c0             	movzx  eax,al
c0023455:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023459:	83 c4 2c             	add    esp,0x2c
c002345c:	5b                   	pop    ebx
c002345d:	5e                   	pop    esi
c002345e:	5f                   	pop    edi
c002345f:	5d                   	pop    ebp
c0023460:	eb 8e                	jmp    c00233f0 <PCI::checkBus(unsigned char)>
c0023462:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023466:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002346c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023470:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023474:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023478:	88 d3                	mov    bl,dl
c002347a:	85 c0                	test   eax,eax
c002347c:	74 33                	je     c00234b1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002347e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023481:	85 d2                	test   edx,edx
c0023483:	74 28                	je     c00234ad <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023485:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002348b:	31 ef                	xor    edi,ebp
c002348d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023493:	75 18                	jne    c00234ad <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023495:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023499:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002349f:	75 0c                	jne    c00234ad <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234a1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00234a7:	0f 84 e6 00 00 00    	je     c0023593 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00234ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00234af:	eb c9                	jmp    c002347a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00234b1:	66 81 f9 01 06       	cmp    cx,0x601
c00234b6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00234ba:	75 19                	jne    c00234d5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00234bc:	83 ec 0c             	sub    esp,0xc
c00234bf:	68 64 01 00 00       	push   0x164
c00234c4:	e8 f7 c3 fe ff       	call   c000f8c0 <malloc>
c00234c9:	89 c5                	mov    ebp,eax
c00234cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00234ce:	e8 ab 0f 00 00       	call   c002447e <SATABus::SATABus()>
c00234d3:	eb 1e                	jmp    c00234f3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00234d5:	66 81 f9 01 01       	cmp    cx,0x101
c00234da:	75 60                	jne    c002353c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00234dc:	83 ec 0c             	sub    esp,0xc
c00234df:	68 70 02 00 00       	push   0x270
c00234e4:	e8 d7 c3 fe ff       	call   c000f8c0 <malloc>
c00234e9:	89 c5                	mov    ebp,eax
c00234eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00234ee:	e8 19 03 00 00       	call   c002380c <IDE::IDE()>
c00234f3:	58                   	pop    eax
c00234f4:	5a                   	pop    edx
c00234f5:	55                   	push   ebp
c00234f6:	56                   	push   esi
c00234f7:	e8 b0 0d ff ff       	call   c00142ac <Device::addChild(Device*)>
c00234fc:	83 ec 1c             	sub    esp,0x1c
c00234ff:	b9 09 00 00 00       	mov    ecx,0x9
c0023504:	fc                   	cld    
c0023505:	89 e7                	mov    edi,esp
c0023507:	89 de                	mov    esi,ebx
c0023509:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002350b:	55                   	push   ebp
c002350c:	e8 a5 0c ff ff       	call   c00141b6 <Device::preOpenPCI(PCIDeviceInfo)>
c0023511:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023514:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023518:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023520:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023528:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023530:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023533:	83 c4 4c             	add    esp,0x4c
c0023536:	5b                   	pop    ebx
c0023537:	5e                   	pop    esi
c0023538:	5f                   	pop    edi
c0023539:	5d                   	pop    ebp
c002353a:	ff e0                	jmp    eax
c002353c:	50                   	push   eax
c002353d:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c0023542:	50                   	push   eax
c0023543:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0023548:	50                   	push   eax
c0023549:	68 a4 d4 02 c0       	push   0xc002d4a4
c002354e:	e8 24 f9 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0023553:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c002355a:	e8 61 c3 fe ff       	call   c000f8c0 <malloc>
c002355f:	5a                   	pop    edx
c0023560:	89 c5                	mov    ebp,eax
c0023562:	59                   	pop    ecx
c0023563:	68 c0 d4 02 c0       	push   0xc002d4c0
c0023568:	50                   	push   eax
c0023569:	e8 34 10 ff ff       	call   c00145a2 <DriverlessDevice::DriverlessDevice(char const*)>
c002356e:	5f                   	pop    edi
c002356f:	58                   	pop    eax
c0023570:	55                   	push   ebp
c0023571:	56                   	push   esi
c0023572:	e8 35 0d ff ff       	call   c00142ac <Device::addChild(Device*)>
c0023577:	b9 09 00 00 00       	mov    ecx,0x9
c002357c:	fc                   	cld    
c002357d:	89 df                	mov    edi,ebx
c002357f:	89 de                	mov    esi,ebx
c0023581:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023583:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023587:	83 c4 2c             	add    esp,0x2c
c002358a:	5b                   	pop    ebx
c002358b:	5e                   	pop    esi
c002358c:	5f                   	pop    edi
c002358d:	5d                   	pop    ebp
c002358e:	e9 23 0c ff ff       	jmp    c00141b6 <Device::preOpenPCI(PCIDeviceInfo)>
c0023593:	83 c4 1c             	add    esp,0x1c
c0023596:	5b                   	pop    ebx
c0023597:	5e                   	pop    esi
c0023598:	5f                   	pop    edi
c0023599:	5d                   	pop    ebp
c002359a:	c3                   	ret    
c002359b:	90                   	nop

c002359c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002359c:	55                   	push   ebp
c002359d:	57                   	push   edi
c002359e:	56                   	push   esi
c002359f:	53                   	push   ebx
c00235a0:	83 ec 5c             	sub    esp,0x5c
c00235a3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00235a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00235ab:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00235af:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00235b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00235b8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00235bc:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00235c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00235c5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00235ca:	6a 0c                	push   0xc
c00235cc:	55                   	push   ebp
c00235cd:	53                   	push   ebx
c00235ce:	57                   	push   edi
c00235cf:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00235d6:	e8 e7 fb ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235db:	55                   	push   ebp
c00235dc:	53                   	push   ebx
c00235dd:	57                   	push   edi
c00235de:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00235e5:	e8 66 fc ff ff       	call   c0023250 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00235ea:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00235ef:	83 c4 24             	add    esp,0x24
c00235f2:	55                   	push   ebp
c00235f3:	53                   	push   ebx
c00235f4:	57                   	push   edi
c00235f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00235f9:	e8 dc fc ff ff       	call   c00232da <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00235fe:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023602:	6a 3c                	push   0x3c
c0023604:	55                   	push   ebp
c0023605:	53                   	push   ebx
c0023606:	57                   	push   edi
c0023607:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002360e:	e8 af fb ff ff       	call   c00231c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023613:	0f b6 c4             	movzx  eax,ah
c0023616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002361a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002361e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023622:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0023627:	83 c4 24             	add    esp,0x24
c002362a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023630:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023637:	74 6c                	je     c00236a5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023639:	31 f6                	xor    esi,esi
c002363b:	8b 15 c8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eec8
c0023641:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023647:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c002364d:	7e 56                	jle    c00236a5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002364f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023652:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023659:	39 cb                	cmp    ebx,ecx
c002365b:	75 45                	jne    c00236a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002365d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023664:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0023668:	75 38                	jne    c00236a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002366a:	83 ec 0c             	sub    esp,0xc
c002366d:	68 da d4 02 c0       	push   0xc002d4da
c0023672:	e8 00 f8 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0023677:	8b 15 c8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eec8
c002367d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023683:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c002368b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002368f:	52                   	push   edx
c0023690:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023694:	53                   	push   ebx
c0023695:	68 ff d4 02 c0       	push   0xc002d4ff
c002369a:	e8 d8 f7 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c002369f:	83 c4 20             	add    esp,0x20
c00236a2:	46                   	inc    esi
c00236a3:	eb 96                	jmp    c002363b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00236a5:	31 d2                	xor    edx,edx
c00236a7:	83 ec 0c             	sub    esp,0xc
c00236aa:	55                   	push   ebp
c00236ab:	53                   	push   ebx
c00236ac:	57                   	push   edi
c00236ad:	52                   	push   edx
c00236ae:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00236b2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00236b9:	e8 62 fc ff ff       	call   c0023320 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236be:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00236c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00236c6:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00236ca:	42                   	inc    edx
c00236cb:	83 c4 20             	add    esp,0x20
c00236ce:	83 fa 06             	cmp    edx,0x6
c00236d1:	75 d4                	jne    c00236a7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00236d3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00236d7:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00236db:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00236df:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00236e3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00236e7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00236eb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00236f0:	86 e0                	xchg   al,ah
c00236f2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00236f7:	55                   	push   ebp
c00236f8:	53                   	push   ebx
c00236f9:	57                   	push   edi
c00236fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00236fe:	e8 91 fb ff ff       	call   c0023294 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023703:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023707:	55                   	push   ebp
c0023708:	53                   	push   ebx
c0023709:	57                   	push   edi
c002370a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023711:	e8 f4 fa ff ff       	call   c002320a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023716:	83 ec 0c             	sub    esp,0xc
c0023719:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002371e:	b9 09 00 00 00       	mov    ecx,0x9
c0023723:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023727:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002372b:	fc                   	cld    
c002372c:	89 e7                	mov    edi,esp
c002372e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023730:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023737:	e8 d8 fc ff ff       	call   c0023414 <PCI::foundDevice(PCIDeviceInfo)>
c002373c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023742:	5b                   	pop    ebx
c0023743:	5e                   	pop    esi
c0023744:	5f                   	pop    edi
c0023745:	5d                   	pop    ebp
c0023746:	c3                   	ret    
c0023747:	90                   	nop

c0023748 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023748:	55                   	push   ebp
c0023749:	57                   	push   edi
c002374a:	56                   	push   esi
c002374b:	53                   	push   ebx
c002374c:	83 ec 0c             	sub    esp,0xc
c002374f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023753:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023758:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002375d:	6a 00                	push   0x0
c002375f:	56                   	push   esi
c0023760:	57                   	push   edi
c0023761:	55                   	push   ebp
c0023762:	e8 a3 fa ff ff       	call   c002320a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023767:	6a 00                	push   0x0
c0023769:	56                   	push   esi
c002376a:	57                   	push   edi
c002376b:	55                   	push   ebp
c002376c:	e8 2b fe ff ff       	call   c002359c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023771:	83 c4 20             	add    esp,0x20
c0023774:	6a 00                	push   0x0
c0023776:	56                   	push   esi
c0023777:	57                   	push   edi
c0023778:	55                   	push   ebp
c0023779:	e8 ae fa ff ff       	call   c002322c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002377e:	83 c4 10             	add    esp,0x10
c0023781:	84 c0                	test   al,al
c0023783:	79 27                	jns    c00237ac <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023785:	bb 01 00 00 00       	mov    ebx,0x1
c002378a:	53                   	push   ebx
c002378b:	56                   	push   esi
c002378c:	57                   	push   edi
c002378d:	55                   	push   ebp
c002378e:	e8 77 fa ff ff       	call   c002320a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023793:	83 c4 10             	add    esp,0x10
c0023796:	66 40                	inc    ax
c0023798:	74 0c                	je     c00237a6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002379a:	53                   	push   ebx
c002379b:	56                   	push   esi
c002379c:	57                   	push   edi
c002379d:	55                   	push   ebp
c002379e:	e8 f9 fd ff ff       	call   c002359c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237a3:	83 c4 10             	add    esp,0x10
c00237a6:	43                   	inc    ebx
c00237a7:	83 fb 08             	cmp    ebx,0x8
c00237aa:	75 de                	jne    c002378a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00237ac:	83 c4 0c             	add    esp,0xc
c00237af:	5b                   	pop    ebx
c00237b0:	5e                   	pop    esi
c00237b1:	5f                   	pop    edi
c00237b2:	5d                   	pop    ebp
c00237b3:	c3                   	ret    

c00237b4 <PCI::detect()>:
c00237b4:	56                   	push   esi
c00237b5:	53                   	push   ebx
c00237b6:	53                   	push   ebx
c00237b7:	31 db                	xor    ebx,ebx
c00237b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00237bd:	6a 00                	push   0x0
c00237bf:	6a 00                	push   0x0
c00237c1:	6a 00                	push   0x0
c00237c3:	56                   	push   esi
c00237c4:	e8 63 fa ff ff       	call   c002322c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237c9:	83 c4 10             	add    esp,0x10
c00237cc:	a8 80                	test   al,0x80
c00237ce:	75 21                	jne    c00237f1 <PCI::detect()+0x3d>
c00237d0:	51                   	push   ecx
c00237d1:	51                   	push   ecx
c00237d2:	6a 00                	push   0x0
c00237d4:	56                   	push   esi
c00237d5:	e8 16 fc ff ff       	call   c00233f0 <PCI::checkBus(unsigned char)>
c00237da:	83 c4 10             	add    esp,0x10
c00237dd:	eb 24                	jmp    c0023803 <PCI::detect()+0x4f>
c00237df:	52                   	push   edx
c00237e0:	52                   	push   edx
c00237e1:	53                   	push   ebx
c00237e2:	43                   	inc    ebx
c00237e3:	56                   	push   esi
c00237e4:	e8 07 fc ff ff       	call   c00233f0 <PCI::checkBus(unsigned char)>
c00237e9:	83 c4 10             	add    esp,0x10
c00237ec:	83 fb 08             	cmp    ebx,0x8
c00237ef:	74 12                	je     c0023803 <PCI::detect()+0x4f>
c00237f1:	53                   	push   ebx
c00237f2:	6a 00                	push   0x0
c00237f4:	6a 00                	push   0x0
c00237f6:	56                   	push   esi
c00237f7:	e8 0e fa ff ff       	call   c002320a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237fc:	83 c4 10             	add    esp,0x10
c00237ff:	66 40                	inc    ax
c0023801:	74 dc                	je     c00237df <PCI::detect()+0x2b>
c0023803:	58                   	pop    eax
c0023804:	5b                   	pop    ebx
c0023805:	5e                   	pop    esi
c0023806:	c3                   	ret    
c0023807:	90                   	nop

c0023808 <IDE::close(int, int, void*)>:
c0023808:	83 c8 ff             	or     eax,0xffffffff
c002380b:	c3                   	ret    

c002380c <IDE::IDE()>:
c002380c:	83 ec 0c             	sub    esp,0xc
c002380f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023813:	83 ec 08             	sub    esp,0x8
c0023816:	68 48 d5 02 c0       	push   0xc002d548
c002381b:	50                   	push   eax
c002381c:	e8 25 0e ff ff       	call   c0014646 <HardDiskController::HardDiskController(char const*)>
c0023821:	83 c4 10             	add    esp,0x10
c0023824:	ba 88 d7 02 c0       	mov    edx,0xc002d788
c0023829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002382d:	89 10                	mov    DWORD PTR [eax],edx
c002382f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023833:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002383a:	90                   	nop
c002383b:	83 c4 0c             	add    esp,0xc
c002383e:	c3                   	ret    
c002383f:	90                   	nop

c0023840 <IDE::prepareInterrupt(unsigned char)>:
c0023840:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023845:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023849:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023851:	c3                   	ret    

c0023852 <selectDrive(unsigned char, unsigned char)>:
c0023852:	c3                   	ret    
c0023853:	90                   	nop

c0023854 <IDE::getBase(unsigned char)>:
c0023854:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002385d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023865:	c3                   	ret    

c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023866:	55                   	push   ebp
c0023867:	57                   	push   edi
c0023868:	56                   	push   esi
c0023869:	53                   	push   ebx
c002386a:	83 ec 1c             	sub    esp,0x1c
c002386d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023871:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023875:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023878:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002387c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023880:	80 f9 03             	cmp    cl,0x3
c0023883:	77 51                	ja     c00238d6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023889:	0f b6 f2             	movzx  esi,dl
c002388c:	0f b6 db             	movzx  ebx,bl
c002388f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023892:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023896:	83 ca 80             	or     edx,0xffffff80
c0023899:	0f b6 d2             	movzx  edx,dl
c002389c:	52                   	push   edx
c002389d:	6a 0c                	push   0xc
c002389f:	56                   	push   esi
c00238a0:	57                   	push   edi
c00238a1:	e8 c0 ff ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238a6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00238ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238af:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00238b3:	ee                   	out    dx,al
c00238b4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00238b9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00238bd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00238c1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00238c5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00238cd:	83 c4 2c             	add    esp,0x2c
c00238d0:	5b                   	pop    ebx
c00238d1:	5e                   	pop    esi
c00238d2:	5f                   	pop    edi
c00238d3:	5d                   	pop    ebp
c00238d4:	eb 90                	jmp    c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238d6:	80 fb 07             	cmp    bl,0x7
c00238d9:	77 12                	ja     c00238ed <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00238db:	0f b6 d2             	movzx  edx,dl
c00238de:	0f b6 db             	movzx  ebx,bl
c00238e1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00238e9:	89 da                	mov    edx,ebx
c00238eb:	eb 2f                	jmp    c002391c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00238ed:	80 fb 0d             	cmp    bl,0xd
c00238f0:	77 13                	ja     c0023905 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00238f2:	0f b6 d2             	movzx  edx,dl
c00238f5:	0f b6 db             	movzx  ebx,bl
c00238f8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00238ff:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023903:	eb 17                	jmp    c002391c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023905:	80 fb 15             	cmp    bl,0x15
c0023908:	77 13                	ja     c002391d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002390a:	0f b6 d2             	movzx  edx,dl
c002390d:	0f b6 db             	movzx  ebx,bl
c0023910:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023918:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002391c:	ee                   	out    dx,al
c002391d:	83 c4 1c             	add    esp,0x1c
c0023920:	5b                   	pop    ebx
c0023921:	5e                   	pop    esi
c0023922:	5f                   	pop    edi
c0023923:	5d                   	pop    ebp
c0023924:	c3                   	ret    
c0023925:	90                   	nop

c0023926 <IDE::read(unsigned char, unsigned char)>:
c0023926:	55                   	push   ebp
c0023927:	57                   	push   edi
c0023928:	56                   	push   esi
c0023929:	53                   	push   ebx
c002392a:	83 ec 1c             	sub    esp,0x1c
c002392d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023931:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023935:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023938:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002393c:	3c 03                	cmp    al,0x3
c002393e:	77 43                	ja     c0023983 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023940:	0f b6 f2             	movzx  esi,dl
c0023943:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023946:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002394a:	83 c8 80             	or     eax,0xffffff80
c002394d:	0f b6 c0             	movzx  eax,al
c0023950:	50                   	push   eax
c0023951:	6a 0c                	push   0xc
c0023953:	56                   	push   esi
c0023954:	57                   	push   edi
c0023955:	e8 0c ff ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002395a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002395f:	0f b6 c3             	movzx  eax,bl
c0023962:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023966:	ec                   	in     al,dx
c0023967:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002396b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023970:	52                   	push   edx
c0023971:	6a 0c                	push   0xc
c0023973:	56                   	push   esi
c0023974:	57                   	push   edi
c0023975:	e8 ec fe ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002397a:	83 c4 20             	add    esp,0x20
c002397d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023981:	eb 49                	jmp    c00239cc <IDE::read(unsigned char, unsigned char)+0xa6>
c0023983:	80 fb 07             	cmp    bl,0x7
c0023986:	77 12                	ja     c002399a <IDE::read(unsigned char, unsigned char)+0x74>
c0023988:	0f b6 d2             	movzx  edx,dl
c002398b:	0f b6 c3             	movzx  eax,bl
c002398e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023996:	89 c2                	mov    edx,eax
c0023998:	eb 31                	jmp    c00239cb <IDE::read(unsigned char, unsigned char)+0xa5>
c002399a:	80 fb 0d             	cmp    bl,0xd
c002399d:	77 13                	ja     c00239b2 <IDE::read(unsigned char, unsigned char)+0x8c>
c002399f:	0f b6 d2             	movzx  edx,dl
c00239a2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00239a9:	0f b6 d3             	movzx  edx,bl
c00239ac:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00239b0:	eb 19                	jmp    c00239cb <IDE::read(unsigned char, unsigned char)+0xa5>
c00239b2:	31 c0                	xor    eax,eax
c00239b4:	80 fb 15             	cmp    bl,0x15
c00239b7:	77 13                	ja     c00239cc <IDE::read(unsigned char, unsigned char)+0xa6>
c00239b9:	0f b6 d2             	movzx  edx,dl
c00239bc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00239c4:	0f b6 d3             	movzx  edx,bl
c00239c7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00239cb:	ec                   	in     al,dx
c00239cc:	83 c4 1c             	add    esp,0x1c
c00239cf:	5b                   	pop    ebx
c00239d0:	5e                   	pop    esi
c00239d1:	5f                   	pop    edi
c00239d2:	5d                   	pop    ebp
c00239d3:	c3                   	ret    

c00239d4 <IDE::waitInterrupt(unsigned char)>:
c00239d4:	55                   	push   ebp
c00239d5:	57                   	push   edi
c00239d6:	56                   	push   esi
c00239d7:	53                   	push   ebx
c00239d8:	31 db                	xor    ebx,ebx
c00239da:	83 ec 0c             	sub    esp,0xc
c00239dd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00239e1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00239e6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00239ee:	89 e8                	mov    eax,ebp
c00239f0:	84 c0                	test   al,al
c00239f2:	75 34                	jne    c0023a28 <IDE::waitInterrupt(unsigned char)+0x54>
c00239f4:	52                   	push   edx
c00239f5:	6a 0c                	push   0xc
c00239f7:	56                   	push   esi
c00239f8:	57                   	push   edi
c00239f9:	e8 28 ff ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c00239fe:	83 c4 10             	add    esp,0x10
c0023a01:	a8 01                	test   al,0x1
c0023a03:	75 2b                	jne    c0023a30 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a05:	f6 c3 04             	test   bl,0x4
c0023a08:	75 16                	jne    c0023a20 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a0a:	83 fb 32             	cmp    ebx,0x32
c0023a0d:	7e 11                	jle    c0023a20 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a0f:	50                   	push   eax
c0023a10:	50                   	push   eax
c0023a11:	6a 00                	push   0x0
c0023a13:	68 80 96 98 00       	push   0x989680
c0023a18:	e8 d0 ad ff ff       	call   c001e7ed <nanoSleep(unsigned long long)>
c0023a1d:	83 c4 10             	add    esp,0x10
c0023a20:	83 fb 3c             	cmp    ebx,0x3c
c0023a23:	74 0b                	je     c0023a30 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a25:	43                   	inc    ebx
c0023a26:	eb be                	jmp    c00239e6 <IDE::waitInterrupt(unsigned char)+0x12>
c0023a28:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023a30:	83 c4 0c             	add    esp,0xc
c0023a33:	89 e8                	mov    eax,ebp
c0023a35:	5b                   	pop    ebx
c0023a36:	5e                   	pop    esi
c0023a37:	5f                   	pop    edi
c0023a38:	5d                   	pop    ebp
c0023a39:	c3                   	ret    

c0023a3a <ideChannel0IRQHandler(regs*, void*)>:
c0023a3a:	83 ec 10             	sub    esp,0x10
c0023a3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a41:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023a48:	6a 07                	push   0x7
c0023a4a:	6a 00                	push   0x0
c0023a4c:	50                   	push   eax
c0023a4d:	e8 d4 fe ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0023a52:	83 c4 1c             	add    esp,0x1c
c0023a55:	c3                   	ret    

c0023a56 <ideChannel1IRQHandler(regs*, void*)>:
c0023a56:	83 ec 10             	sub    esp,0x10
c0023a59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a5d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023a64:	6a 07                	push   0x7
c0023a66:	6a 01                	push   0x1
c0023a68:	50                   	push   eax
c0023a69:	e8 b8 fe ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0023a6e:	83 c4 1c             	add    esp,0x1c
c0023a71:	c3                   	ret    

c0023a72 <IDE::enableIRQs(unsigned char, bool)>:
c0023a72:	57                   	push   edi
c0023a73:	56                   	push   esi
c0023a74:	be 04 00 00 00       	mov    esi,0x4
c0023a79:	53                   	push   ebx
c0023a7a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023a7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a83:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023a88:	0f 94 c0             	sete   al
c0023a8b:	d1 e0                	shl    eax,1
c0023a8d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023a94:	0f b6 c0             	movzx  eax,al
c0023a97:	50                   	push   eax
c0023a98:	6a 0c                	push   0xc
c0023a9a:	57                   	push   edi
c0023a9b:	53                   	push   ebx
c0023a9c:	e8 c5 fd ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aa1:	83 c4 10             	add    esp,0x10
c0023aa4:	50                   	push   eax
c0023aa5:	6a 0c                	push   0xc
c0023aa7:	57                   	push   edi
c0023aa8:	53                   	push   ebx
c0023aa9:	e8 78 fe ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0023aae:	83 c4 10             	add    esp,0x10
c0023ab1:	4e                   	dec    esi
c0023ab2:	75 f0                	jne    c0023aa4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023ab4:	5b                   	pop    ebx
c0023ab5:	5e                   	pop    esi
c0023ab6:	5f                   	pop    edi
c0023ab7:	c3                   	ret    

c0023ab8 <IDE::open(int, int, void*)>:
c0023ab8:	55                   	push   ebp
c0023ab9:	57                   	push   edi
c0023aba:	56                   	push   esi
c0023abb:	53                   	push   ebx
c0023abc:	83 ec 1c             	sub    esp,0x1c
c0023abf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023ac3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023acc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023ad5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023adc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023ae3:	0f 85 b0 02 00 00    	jne    c0023d99 <IDE::open(int, int, void*)+0x2e1>
c0023ae9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023aef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023af3:	83 e0 7f             	and    eax,0x7f
c0023af6:	3c 05                	cmp    al,0x5
c0023af8:	74 04                	je     c0023afe <IDE::open(int, int, void*)+0x46>
c0023afa:	3c 0f                	cmp    al,0xf
c0023afc:	75 32                	jne    c0023b30 <IDE::open(int, int, void*)+0x78>
c0023afe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023b04:	83 e0 fc             	and    eax,0xfffffffc
c0023b07:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023b0e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023b14:	83 e0 fc             	and    eax,0xfffffffc
c0023b17:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023b1e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023b24:	83 e0 fc             	and    eax,0xfffffffc
c0023b27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b2e:	eb 14                	jmp    c0023b44 <IDE::open(int, int, void*)+0x8c>
c0023b30:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023b3a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023b44:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023b4b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023b56:	89 c6                	mov    esi,eax
c0023b58:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b5d:	c1 e6 10             	shl    esi,0x10
c0023b60:	89 e8                	mov    eax,ebp
c0023b62:	89 fa                	mov    edx,edi
c0023b64:	c1 e0 0b             	shl    eax,0xb
c0023b67:	09 f0                	or     eax,esi
c0023b69:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023b70:	c1 e6 08             	shl    esi,0x8
c0023b73:	09 c6                	or     esi,eax
c0023b75:	89 f0                	mov    eax,esi
c0023b77:	0d 08 00 00 80       	or     eax,0x80000008
c0023b7c:	ef                   	out    dx,eax
c0023b7d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023b82:	89 ca                	mov    edx,ecx
c0023b84:	ed                   	in     eax,dx
c0023b85:	c1 e8 10             	shr    eax,0x10
c0023b88:	3d ff ff 00 00       	cmp    eax,0xffff
c0023b8d:	0f 84 f5 00 00 00    	je     c0023c88 <IDE::open(int, int, void*)+0x1d0>
c0023b93:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023b99:	89 fa                	mov    edx,edi
c0023b9b:	89 f0                	mov    eax,esi
c0023b9d:	ef                   	out    dx,eax
c0023b9e:	b0 fe                	mov    al,0xfe
c0023ba0:	89 ca                	mov    edx,ecx
c0023ba2:	ee                   	out    dx,al
c0023ba3:	89 f0                	mov    eax,esi
c0023ba5:	89 fa                	mov    edx,edi
c0023ba7:	ef                   	out    dx,eax
c0023ba8:	89 ca                	mov    edx,ecx
c0023baa:	ed                   	in     eax,dx
c0023bab:	3c fe                	cmp    al,0xfe
c0023bad:	0f 85 a9 00 00 00    	jne    c0023c5c <IDE::open(int, int, void*)+0x1a4>
c0023bb3:	8b 15 c8 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eec8
c0023bb9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023bc0:	74 33                	je     c0023bf5 <IDE::open(int, int, void*)+0x13d>
c0023bc2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023bc8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023bcc:	40                   	inc    eax
c0023bcd:	83 ec 0c             	sub    esp,0xc
c0023bd0:	0f b6 c0             	movzx  eax,al
c0023bd3:	50                   	push   eax
c0023bd4:	55                   	push   ebp
c0023bd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023bd9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023bdf:	51                   	push   ecx
c0023be0:	e8 8d 47 ff ff       	call   c0018372 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023be5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023bea:	83 c4 1c             	add    esp,0x1c
c0023bed:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023bf3:	eb 0a                	jmp    c0023bff <IDE::open(int, int, void*)+0x147>
c0023bf5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023bff:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023c06:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023c0d:	c1 e1 10             	shl    ecx,0x10
c0023c10:	c1 e0 08             	shl    eax,0x8
c0023c13:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c18:	09 c1                	or     ecx,eax
c0023c1a:	89 fa                	mov    edx,edi
c0023c1c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023c23:	c1 e0 0b             	shl    eax,0xb
c0023c26:	09 c1                	or     ecx,eax
c0023c28:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023c2e:	89 c8                	mov    eax,ecx
c0023c30:	ef                   	out    dx,eax
c0023c31:	be fc 0c 00 00       	mov    esi,0xcfc
c0023c36:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023c3c:	89 f2                	mov    edx,esi
c0023c3e:	ee                   	out    dx,al
c0023c3f:	89 c8                	mov    eax,ecx
c0023c41:	89 fa                	mov    edx,edi
c0023c43:	ef                   	out    dx,eax
c0023c44:	89 f2                	mov    edx,esi
c0023c46:	ed                   	in     eax,dx
c0023c47:	0f b6 c0             	movzx  eax,al
c0023c4a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023c50:	74 46                	je     c0023c98 <IDE::open(int, int, void*)+0x1e0>
c0023c52:	83 ec 0c             	sub    esp,0xc
c0023c55:	68 60 d5 02 c0       	push   0xc002d560
c0023c5a:	eb 34                	jmp    c0023c90 <IDE::open(int, int, void*)+0x1d8>
c0023c5c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023c65:	75 17                	jne    c0023c7e <IDE::open(int, int, void*)+0x1c6>
c0023c67:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023c6c:	74 07                	je     c0023c75 <IDE::open(int, int, void*)+0x1bd>
c0023c6e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023c73:	75 09                	jne    c0023c7e <IDE::open(int, int, void*)+0x1c6>
c0023c75:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023c7c:	eb 1a                	jmp    c0023c98 <IDE::open(int, int, void*)+0x1e0>
c0023c7e:	83 ec 0c             	sub    esp,0xc
c0023c81:	68 68 d5 02 c0       	push   0xc002d568
c0023c86:	eb 08                	jmp    c0023c90 <IDE::open(int, int, void*)+0x1d8>
c0023c88:	83 ec 0c             	sub    esp,0xc
c0023c8b:	68 99 d5 02 c0       	push   0xc002d599
c0023c90:	e8 d0 6b ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0023c95:	83 c4 10             	add    esp,0x10
c0023c98:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023c9f:	79 1a                	jns    c0023cbb <IDE::open(int, int, void*)+0x203>
c0023ca1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023ca7:	83 e0 fc             	and    eax,0xfffffffc
c0023caa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023cb1:	83 c0 08             	add    eax,0x8
c0023cb4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023cbb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023cc1:	89 c2                	mov    edx,eax
c0023cc3:	83 e2 0f             	and    edx,0xf
c0023cc6:	66 83 fa 08          	cmp    dx,0x8
c0023cca:	75 0a                	jne    c0023cd6 <IDE::open(int, int, void*)+0x21e>
c0023ccc:	83 e8 02             	sub    eax,0x2
c0023ccf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023cd6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023cdc:	89 c2                	mov    edx,eax
c0023cde:	83 e2 0f             	and    edx,0xf
c0023ce1:	66 83 fa 08          	cmp    dx,0x8
c0023ce5:	75 0a                	jne    c0023cf1 <IDE::open(int, int, void*)+0x239>
c0023ce7:	83 e8 02             	sub    eax,0x2
c0023cea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023cf1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023cf8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023cff:	89 d0                	mov    eax,edx
c0023d01:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d04:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d08:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023d0c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023d0f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d14:	0f b6 c9             	movzx  ecx,cl
c0023d17:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023d1e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d21:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d25:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023d29:	8d 50 02             	lea    edx,[eax+0x2]
c0023d2c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d31:	0f b6 d2             	movzx  edx,dl
c0023d34:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023d3a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d3d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d41:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023d45:	8d 48 03             	lea    ecx,[eax+0x3]
c0023d48:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d4d:	0f b6 c9             	movzx  ecx,cl
c0023d50:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023d56:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d59:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d5d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023d61:	8d 50 04             	lea    edx,[eax+0x4]
c0023d64:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023d6a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d6f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023d76:	66 85 f6             	test   si,si
c0023d79:	74 3e                	je     c0023db9 <IDE::open(int, int, void*)+0x301>
c0023d7b:	0f b6 d2             	movzx  edx,dl
c0023d7e:	83 c0 05             	add    eax,0x5
c0023d81:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d84:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d88:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023d8c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023d92:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d97:	eb 20                	jmp    c0023db9 <IDE::open(int, int, void*)+0x301>
c0023d99:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023da3:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023dad:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023db4:	e9 02 ff ff ff       	jmp    c0023cbb <IDE::open(int, int, void*)+0x203>
c0023db9:	52                   	push   edx
c0023dba:	52                   	push   edx
c0023dbb:	6a 00                	push   0x0
c0023dbd:	53                   	push   ebx
c0023dbe:	e8 7d fa ff ff       	call   c0023840 <IDE::prepareInterrupt(unsigned char)>
c0023dc3:	59                   	pop    ecx
c0023dc4:	5e                   	pop    esi
c0023dc5:	6a 01                	push   0x1
c0023dc7:	53                   	push   ebx
c0023dc8:	e8 73 fa ff ff       	call   c0023840 <IDE::prepareInterrupt(unsigned char)>
c0023dcd:	83 c4 0c             	add    esp,0xc
c0023dd0:	6a 00                	push   0x0
c0023dd2:	6a 00                	push   0x0
c0023dd4:	53                   	push   ebx
c0023dd5:	e8 98 fc ff ff       	call   c0023a72 <IDE::enableIRQs(unsigned char, bool)>
c0023dda:	83 c4 0c             	add    esp,0xc
c0023ddd:	6a 00                	push   0x0
c0023ddf:	6a 01                	push   0x1
c0023de1:	53                   	push   ebx
c0023de2:	e8 8b fc ff ff       	call   c0023a72 <IDE::enableIRQs(unsigned char, bool)>
c0023de7:	83 c4 10             	add    esp,0x10
c0023dea:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023df1:	74 40                	je     c0023e33 <IDE::open(int, int, void*)+0x37b>
c0023df3:	83 ec 0c             	sub    esp,0xc
c0023df6:	68 c3 d5 02 c0       	push   0xc002d5c3
c0023dfb:	e8 77 f0 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0023e00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e03:	6a 01                	push   0x1
c0023e05:	68 3a 3a 02 c0       	push   0xc0023a3a
c0023e0a:	6a 0e                	push   0xe
c0023e0c:	53                   	push   ebx
c0023e0d:	e8 1e 04 ff ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e12:	83 c4 14             	add    esp,0x14
c0023e15:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e1b:	53                   	push   ebx
c0023e1c:	6a 01                	push   0x1
c0023e1e:	68 56 3a 02 c0       	push   0xc0023a56
c0023e23:	6a 0f                	push   0xf
c0023e25:	53                   	push   ebx
c0023e26:	e8 05 04 ff ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e2b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023e31:	eb 4a                	jmp    c0023e7d <IDE::open(int, int, void*)+0x3c5>
c0023e33:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023e3d:	50                   	push   eax
c0023e3e:	6a 0f                	push   0xf
c0023e40:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e46:	68 df d5 02 c0       	push   0xc002d5df
c0023e4b:	e8 27 f0 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0023e50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e53:	6a 00                	push   0x0
c0023e55:	68 3a 3a 02 c0       	push   0xc0023a3a
c0023e5a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e60:	53                   	push   ebx
c0023e61:	e8 ca 03 ff ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e66:	83 c4 14             	add    esp,0x14
c0023e69:	53                   	push   ebx
c0023e6a:	6a 00                	push   0x0
c0023e6c:	68 56 3a 02 c0       	push   0xc0023a56
c0023e71:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023e77:	53                   	push   ebx
c0023e78:	e8 b3 03 ff ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e7f:	83 c4 20             	add    esp,0x20
c0023e82:	83 ec 0c             	sub    esp,0xc
c0023e85:	53                   	push   ebx
c0023e86:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023e89:	83 c4 0c             	add    esp,0xc
c0023e8c:	6a 07                	push   0x7
c0023e8e:	6a 00                	push   0x0
c0023e90:	53                   	push   ebx
c0023e91:	e8 90 fa ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0023e96:	83 c4 0c             	add    esp,0xc
c0023e99:	6a 07                	push   0x7
c0023e9b:	6a 01                	push   0x1
c0023e9d:	53                   	push   ebx
c0023e9e:	e8 83 fa ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0023ea3:	83 c4 0c             	add    esp,0xc
c0023ea6:	6a 01                	push   0x1
c0023ea8:	6a 00                	push   0x0
c0023eaa:	53                   	push   ebx
c0023eab:	e8 c2 fb ff ff       	call   c0023a72 <IDE::enableIRQs(unsigned char, bool)>
c0023eb0:	83 c4 0c             	add    esp,0xc
c0023eb3:	6a 01                	push   0x1
c0023eb5:	6a 01                	push   0x1
c0023eb7:	53                   	push   ebx
c0023eb8:	e8 b5 fb ff ff       	call   c0023a72 <IDE::enableIRQs(unsigned char, bool)>
c0023ebd:	83 c4 2c             	add    esp,0x2c
c0023ec0:	31 c0                	xor    eax,eax
c0023ec2:	5b                   	pop    ebx
c0023ec3:	5e                   	pop    esi
c0023ec4:	5f                   	pop    edi
c0023ec5:	5d                   	pop    ebp
c0023ec6:	c3                   	ret    
c0023ec7:	90                   	nop

c0023ec8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023ec8:	55                   	push   ebp
c0023ec9:	57                   	push   edi
c0023eca:	56                   	push   esi
c0023ecb:	53                   	push   ebx
c0023ecc:	83 ec 1c             	sub    esp,0x1c
c0023ecf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023ed3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023ed7:	8d 50 f8             	lea    edx,[eax-0x8]
c0023eda:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023ede:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023ee2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023ee6:	80 fa 03             	cmp    dl,0x3
c0023ee9:	77 5d                	ja     c0023f48 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023eeb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023eef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023ef3:	0f b6 db             	movzx  ebx,bl
c0023ef6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023ef9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023efd:	83 ca 80             	or     edx,0xffffff80
c0023f00:	0f b6 d2             	movzx  edx,dl
c0023f03:	52                   	push   edx
c0023f04:	6a 0c                	push   0xc
c0023f06:	53                   	push   ebx
c0023f07:	56                   	push   esi
c0023f08:	e8 59 f9 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f0d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023f12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f16:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f1a:	0f b6 c0             	movzx  eax,al
c0023f1d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023f21:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f23:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023f28:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023f2c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023f30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023f34:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023f3c:	83 c4 2c             	add    esp,0x2c
c0023f3f:	5b                   	pop    ebx
c0023f40:	5e                   	pop    esi
c0023f41:	5f                   	pop    edi
c0023f42:	5d                   	pop    ebp
c0023f43:	e9 1e f9 ff ff       	jmp    c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f48:	3c 07                	cmp    al,0x7
c0023f4a:	77 10                	ja     c0023f5c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023f4c:	0f b6 db             	movzx  ebx,bl
c0023f4f:	0f b6 d0             	movzx  edx,al
c0023f52:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023f5a:	eb 2d                	jmp    c0023f89 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f5c:	3c 0d                	cmp    al,0xd
c0023f5e:	77 13                	ja     c0023f73 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023f60:	0f b6 db             	movzx  ebx,bl
c0023f63:	0f b6 c0             	movzx  eax,al
c0023f66:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023f6d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023f71:	eb 16                	jmp    c0023f89 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f73:	3c 15                	cmp    al,0x15
c0023f75:	77 14                	ja     c0023f8b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023f77:	0f b6 db             	movzx  ebx,bl
c0023f7a:	0f b6 c0             	movzx  eax,al
c0023f7d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023f85:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023f89:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f8b:	83 c4 1c             	add    esp,0x1c
c0023f8e:	5b                   	pop    ebx
c0023f8f:	5e                   	pop    esi
c0023f90:	5f                   	pop    edi
c0023f91:	5d                   	pop    ebp
c0023f92:	c3                   	ret    
c0023f93:	90                   	nop

c0023f94 <IDE::detect()>:
c0023f94:	55                   	push   ebp
c0023f95:	57                   	push   edi
c0023f96:	56                   	push   esi
c0023f97:	53                   	push   ebx
c0023f98:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023f9e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023fa5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023fac:	0f 85 be 02 00 00    	jne    c0024270 <IDE::detect()+0x2dc>
c0023fb2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023fb9:	31 f6                	xor    esi,esi
c0023fbb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023fc3:	31 ed                	xor    ebp,ebp
c0023fc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023fc9:	c1 e0 06             	shl    eax,0x6
c0023fcc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023fd4:	89 e8                	mov    eax,ebp
c0023fd6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023fda:	c1 e0 04             	shl    eax,0x4
c0023fdd:	83 c8 a0             	or     eax,0xffffffa0
c0023fe0:	0f b6 c0             	movzx  eax,al
c0023fe3:	50                   	push   eax
c0023fe4:	6a 06                	push   0x6
c0023fe6:	56                   	push   esi
c0023fe7:	53                   	push   ebx
c0023fe8:	e8 79 f8 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fed:	83 c4 0c             	add    esp,0xc
c0023ff0:	6a 0c                	push   0xc
c0023ff2:	56                   	push   esi
c0023ff3:	53                   	push   ebx
c0023ff4:	e8 2d f9 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0023ff9:	83 c4 0c             	add    esp,0xc
c0023ffc:	6a 0c                	push   0xc
c0023ffe:	56                   	push   esi
c0023fff:	53                   	push   ebx
c0024000:	e8 21 f9 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024005:	83 c4 0c             	add    esp,0xc
c0024008:	6a 0c                	push   0xc
c002400a:	56                   	push   esi
c002400b:	53                   	push   ebx
c002400c:	e8 15 f9 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024011:	83 c4 0c             	add    esp,0xc
c0024014:	6a 0c                	push   0xc
c0024016:	56                   	push   esi
c0024017:	53                   	push   ebx
c0024018:	e8 09 f9 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c002401d:	68 ec 00 00 00       	push   0xec
c0024022:	6a 07                	push   0x7
c0024024:	56                   	push   esi
c0024025:	53                   	push   ebx
c0024026:	e8 3b f8 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002402b:	83 c4 1c             	add    esp,0x1c
c002402e:	6a 0c                	push   0xc
c0024030:	56                   	push   esi
c0024031:	53                   	push   ebx
c0024032:	e8 ef f8 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024037:	83 c4 0c             	add    esp,0xc
c002403a:	6a 0c                	push   0xc
c002403c:	56                   	push   esi
c002403d:	53                   	push   ebx
c002403e:	e8 e3 f8 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024043:	83 c4 0c             	add    esp,0xc
c0024046:	6a 0c                	push   0xc
c0024048:	56                   	push   esi
c0024049:	53                   	push   ebx
c002404a:	e8 d7 f8 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c002404f:	83 c4 0c             	add    esp,0xc
c0024052:	6a 0c                	push   0xc
c0024054:	56                   	push   esi
c0024055:	53                   	push   ebx
c0024056:	e8 cb f8 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c002405b:	83 c4 0c             	add    esp,0xc
c002405e:	6a 0c                	push   0xc
c0024060:	56                   	push   esi
c0024061:	53                   	push   ebx
c0024062:	e8 bf f8 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024067:	83 c4 10             	add    esp,0x10
c002406a:	84 c0                	test   al,al
c002406c:	0f 84 8b 01 00 00    	je     c00241fd <IDE::detect()+0x269>
c0024072:	31 ff                	xor    edi,edi
c0024074:	50                   	push   eax
c0024075:	6a 0c                	push   0xc
c0024077:	56                   	push   esi
c0024078:	53                   	push   ebx
c0024079:	e8 a8 f8 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c002407e:	83 c4 10             	add    esp,0x10
c0024081:	a8 01                	test   al,0x1
c0024083:	0f 85 8e 01 00 00    	jne    c0024217 <IDE::detect()+0x283>
c0024089:	84 c0                	test   al,al
c002408b:	78 04                	js     c0024091 <IDE::detect()+0xfd>
c002408d:	a8 08                	test   al,0x8
c002408f:	75 27                	jne    c00240b8 <IDE::detect()+0x124>
c0024091:	47                   	inc    edi
c0024092:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024098:	7e da                	jle    c0024074 <IDE::detect()+0xe0>
c002409a:	50                   	push   eax
c002409b:	50                   	push   eax
c002409c:	6a 00                	push   0x0
c002409e:	68 40 4b 4c 00       	push   0x4c4b40
c00240a3:	e8 45 a7 ff ff       	call   c001e7ed <nanoSleep(unsigned long long)>
c00240a8:	83 c4 10             	add    esp,0x10
c00240ab:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00240b1:	75 c1                	jne    c0024074 <IDE::detect()+0xe0>
c00240b3:	e9 5f 01 00 00       	jmp    c0024217 <IDE::detect()+0x283>
c00240b8:	31 c9                	xor    ecx,ecx
c00240ba:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00240be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00240c2:	83 ec 0c             	sub    esp,0xc
c00240c5:	68 80 00 00 00       	push   0x80
c00240ca:	57                   	push   edi
c00240cb:	6a 00                	push   0x0
c00240cd:	56                   	push   esi
c00240ce:	53                   	push   ebx
c00240cf:	e8 f4 fd ff ff       	call   c0023ec8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00240d4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00240d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00240dd:	89 d1                	mov    ecx,edx
c00240df:	c1 e0 06             	shl    eax,0x6
c00240e2:	01 d8                	add    eax,ebx
c00240e4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00240eb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00240f2:	89 f2                	mov    edx,esi
c00240f4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00240fa:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00240fe:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024104:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024108:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002410f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024117:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002411e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024126:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002412c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024133:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024139:	8d 54 24 58          	lea    edx,[esp+0x58]
c002413d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024141:	83 c4 20             	add    esp,0x20
c0024144:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024147:	83 c0 02             	add    eax,0x2
c002414a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024150:	83 c7 02             	add    edi,0x2
c0024153:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024156:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002415c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024160:	75 e2                	jne    c0024144 <IDE::detect()+0x1b0>
c0024162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024166:	c1 e0 06             	shl    eax,0x6
c0024169:	01 d8                	add    eax,ebx
c002416b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024171:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024178:	66 c1 ea 09          	shr    dx,0x9
c002417c:	83 e2 01             	and    edx,0x1
c002417f:	84 c9                	test   cl,cl
c0024181:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024187:	75 2f                	jne    c00241b8 <IDE::detect()+0x224>
c0024189:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002418f:	85 c0                	test   eax,eax
c0024191:	74 66                	je     c00241f9 <IDE::detect()+0x265>
c0024193:	50                   	push   eax
c0024194:	55                   	push   ebp
c0024195:	56                   	push   esi
c0024196:	68 fb d5 02 c0       	push   0xc002d5fb
c002419b:	e8 d7 ec fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00241a0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00241a7:	e8 14 b7 fe ff       	call   c000f8c0 <malloc>
c00241ac:	89 c7                	mov    edi,eax
c00241ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00241b1:	e8 78 06 00 00       	call   c002482e <ATA::ATA()>
c00241b6:	eb 28                	jmp    c00241e0 <IDE::detect()+0x24c>
c00241b8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00241be:	55                   	push   ebp
c00241bf:	56                   	push   esi
c00241c0:	68 2a d6 02 c0       	push   0xc002d62a
c00241c5:	e8 ad ec fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00241ca:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00241d1:	e8 ea b6 fe ff       	call   c000f8c0 <malloc>
c00241d6:	89 c7                	mov    edi,eax
c00241d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00241db:	e8 8e 0c 00 00       	call   c0024e6e <ATAPI::ATAPI()>
c00241e0:	5a                   	pop    edx
c00241e1:	59                   	pop    ecx
c00241e2:	57                   	push   edi
c00241e3:	53                   	push   ebx
c00241e4:	e8 c3 00 ff ff       	call   c00142ac <Device::addChild(Device*)>
c00241e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00241eb:	53                   	push   ebx
c00241ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00241f0:	6a 00                	push   0x0
c00241f2:	57                   	push   edi
c00241f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00241f6:	83 c4 20             	add    esp,0x20
c00241f9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00241fd:	4d                   	dec    ebp
c00241fe:	74 0a                	je     c002420a <IDE::detect()+0x276>
c0024200:	bd 01 00 00 00       	mov    ebp,0x1
c0024205:	e9 bb fd ff ff       	jmp    c0023fc5 <IDE::detect()+0x31>
c002420a:	4e                   	dec    esi
c002420b:	74 63                	je     c0024270 <IDE::detect()+0x2dc>
c002420d:	be 01 00 00 00       	mov    esi,0x1
c0024212:	e9 ac fd ff ff       	jmp    c0023fc3 <IDE::detect()+0x2f>
c0024217:	50                   	push   eax
c0024218:	6a 04                	push   0x4
c002421a:	56                   	push   esi
c002421b:	53                   	push   ebx
c002421c:	e8 05 f7 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024221:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024225:	83 c4 0c             	add    esp,0xc
c0024228:	6a 05                	push   0x5
c002422a:	56                   	push   esi
c002422b:	53                   	push   ebx
c002422c:	e8 f5 f6 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024231:	83 c4 10             	add    esp,0x10
c0024234:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024238:	80 fa 14             	cmp    dl,0x14
c002423b:	75 04                	jne    c0024241 <IDE::detect()+0x2ad>
c002423d:	3c eb                	cmp    al,0xeb
c002423f:	eb 07                	jmp    c0024248 <IDE::detect()+0x2b4>
c0024241:	3c 96                	cmp    al,0x96
c0024243:	75 b8                	jne    c00241fd <IDE::detect()+0x269>
c0024245:	80 fa 69             	cmp    dl,0x69
c0024248:	75 b3                	jne    c00241fd <IDE::detect()+0x269>
c002424a:	68 a1 00 00 00       	push   0xa1
c002424f:	6a 07                	push   0x7
c0024251:	56                   	push   esi
c0024252:	53                   	push   ebx
c0024253:	e8 0e f6 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024258:	5f                   	pop    edi
c0024259:	58                   	pop    eax
c002425a:	6a 00                	push   0x0
c002425c:	68 40 42 0f 00       	push   0xf4240
c0024261:	e8 87 a5 ff ff       	call   c001e7ed <nanoSleep(unsigned long long)>
c0024266:	83 c4 10             	add    esp,0x10
c0024269:	b1 01                	mov    cl,0x1
c002426b:	e9 4a fe ff ff       	jmp    c00240ba <IDE::detect()+0x126>
c0024270:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024276:	5b                   	pop    ebx
c0024277:	5e                   	pop    esi
c0024278:	5f                   	pop    edi
c0024279:	5d                   	pop    ebp
c002427a:	c3                   	ret    
c002427b:	90                   	nop

c002427c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002427c:	55                   	push   ebp
c002427d:	57                   	push   edi
c002427e:	56                   	push   esi
c002427f:	53                   	push   ebx
c0024280:	83 ec 1c             	sub    esp,0x1c
c0024283:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024287:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002428b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002428f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024293:	88 c3                	mov    bl,al
c0024295:	84 c0                	test   al,al
c0024297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002429b:	0f 84 67 01 00 00    	je     c0024408 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00242a1:	83 ec 0c             	sub    esp,0xc
c00242a4:	68 5b d6 02 c0       	push   0xc002d65b
c00242a9:	e8 c9 eb fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00242ae:	83 c4 10             	add    esp,0x10
c00242b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242b5:	3c 01                	cmp    al,0x1
c00242b7:	75 17                	jne    c00242d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00242b9:	83 ec 0c             	sub    esp,0xc
c00242bc:	b3 13                	mov    bl,0x13
c00242be:	68 67 d6 02 c0       	push   0xc002d667
c00242c3:	e8 af eb fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00242c8:	83 c4 10             	add    esp,0x10
c00242cb:	e9 25 01 00 00       	jmp    c00243f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00242d0:	3c 02                	cmp    al,0x2
c00242d2:	0f 85 ef 00 00 00    	jne    c00243c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00242d8:	d1 e6                	shl    esi,1
c00242da:	09 ee                	or     esi,ebp
c00242dc:	52                   	push   edx
c00242dd:	89 f0                	mov    eax,esi
c00242df:	6a 01                	push   0x1
c00242e1:	0f b6 f0             	movzx  esi,al
c00242e4:	c1 e6 06             	shl    esi,0x6
c00242e7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00242ef:	50                   	push   eax
c00242f0:	57                   	push   edi
c00242f1:	e8 30 f6 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c00242f6:	83 c4 10             	add    esp,0x10
c00242f9:	89 c6                	mov    esi,eax
c00242fb:	a8 01                	test   al,0x1
c00242fd:	74 12                	je     c0024311 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00242ff:	83 ec 0c             	sub    esp,0xc
c0024302:	b3 07                	mov    bl,0x7
c0024304:	68 7c d6 02 c0       	push   0xc002d67c
c0024309:	e8 69 eb fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c002430e:	83 c4 10             	add    esp,0x10
c0024311:	f7 c6 02 00 00 00    	test   esi,0x2
c0024317:	74 12                	je     c002432b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024319:	83 ec 0c             	sub    esp,0xc
c002431c:	b3 03                	mov    bl,0x3
c002431e:	68 9a d6 02 c0       	push   0xc002d69a
c0024323:	e8 4f eb fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024328:	83 c4 10             	add    esp,0x10
c002432b:	f7 c6 04 00 00 00    	test   esi,0x4
c0024331:	74 12                	je     c0024345 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024333:	83 ec 0c             	sub    esp,0xc
c0024336:	b3 14                	mov    bl,0x14
c0024338:	68 ba d6 02 c0       	push   0xc002d6ba
c002433d:	e8 35 eb fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024342:	83 c4 10             	add    esp,0x10
c0024345:	f7 c6 08 00 00 00    	test   esi,0x8
c002434b:	74 12                	je     c002435f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002434d:	83 ec 0c             	sub    esp,0xc
c0024350:	b3 03                	mov    bl,0x3
c0024352:	68 9a d6 02 c0       	push   0xc002d69a
c0024357:	e8 1b eb fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c002435c:	83 c4 10             	add    esp,0x10
c002435f:	f7 c6 10 00 00 00    	test   esi,0x10
c0024365:	74 12                	je     c0024379 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024367:	83 ec 0c             	sub    esp,0xc
c002436a:	b3 15                	mov    bl,0x15
c002436c:	68 d2 d6 02 c0       	push   0xc002d6d2
c0024371:	e8 01 eb fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024376:	83 c4 10             	add    esp,0x10
c0024379:	f7 c6 20 00 00 00    	test   esi,0x20
c002437f:	74 12                	je     c0024393 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024381:	83 ec 0c             	sub    esp,0xc
c0024384:	b3 03                	mov    bl,0x3
c0024386:	68 9a d6 02 c0       	push   0xc002d69a
c002438b:	e8 e7 ea fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024390:	83 c4 10             	add    esp,0x10
c0024393:	f7 c6 40 00 00 00    	test   esi,0x40
c0024399:	74 12                	je     c00243ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002439b:	83 ec 0c             	sub    esp,0xc
c002439e:	b3 16                	mov    bl,0x16
c00243a0:	68 ec d6 02 c0       	push   0xc002d6ec
c00243a5:	e8 cd ea fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00243aa:	83 c4 10             	add    esp,0x10
c00243ad:	89 f0                	mov    eax,esi
c00243af:	84 c0                	test   al,al
c00243b1:	79 42                	jns    c00243f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243b3:	83 ec 0c             	sub    esp,0xc
c00243b6:	b3 0d                	mov    bl,0xd
c00243b8:	68 0d d7 02 c0       	push   0xc002d70d
c00243bd:	e8 b5 ea fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00243c2:	83 c4 10             	add    esp,0x10
c00243c5:	eb 2e                	jmp    c00243f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243c7:	3c 03                	cmp    al,0x3
c00243c9:	75 14                	jne    c00243df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00243cb:	83 ec 0c             	sub    esp,0xc
c00243ce:	b3 17                	mov    bl,0x17
c00243d0:	68 21 d7 02 c0       	push   0xc002d721
c00243d5:	e8 9d ea fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00243da:	83 c4 10             	add    esp,0x10
c00243dd:	eb 16                	jmp    c00243f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243df:	3c 04                	cmp    al,0x4
c00243e1:	75 12                	jne    c00243f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243e3:	83 ec 0c             	sub    esp,0xc
c00243e6:	b3 08                	mov    bl,0x8
c00243e8:	68 37 d7 02 c0       	push   0xc002d737
c00243ed:	e8 85 ea fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00243f2:	83 c4 10             	add    esp,0x10
c00243f5:	50                   	push   eax
c00243f6:	50                   	push   eax
c00243f7:	0f b6 c3             	movzx  eax,bl
c00243fa:	50                   	push   eax
c00243fb:	68 4f d7 02 c0       	push   0xc002d74f
c0024400:	e8 72 ea fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024405:	83 c4 10             	add    esp,0x10
c0024408:	83 c4 1c             	add    esp,0x1c
c002440b:	88 d8                	mov    al,bl
c002440d:	5b                   	pop    ebx
c002440e:	5e                   	pop    esi
c002440f:	5f                   	pop    edi
c0024410:	5d                   	pop    ebp
c0024411:	c3                   	ret    

c0024412 <IDE::polling(unsigned char, unsigned int)>:
c0024412:	57                   	push   edi
c0024413:	56                   	push   esi
c0024414:	53                   	push   ebx
c0024415:	bb 04 00 00 00       	mov    ebx,0x4
c002441a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002441e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024423:	52                   	push   edx
c0024424:	6a 0c                	push   0xc
c0024426:	56                   	push   esi
c0024427:	57                   	push   edi
c0024428:	e8 f9 f4 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c002442d:	83 c4 10             	add    esp,0x10
c0024430:	4b                   	dec    ebx
c0024431:	75 f0                	jne    c0024423 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024433:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024438:	50                   	push   eax
c0024439:	6a 0c                	push   0xc
c002443b:	56                   	push   esi
c002443c:	57                   	push   edi
c002443d:	e8 e4 f4 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024442:	83 c4 10             	add    esp,0x10
c0024445:	a8 01                	test   al,0x1
c0024447:	74 12                	je     c002445b <IDE::polling(unsigned char, unsigned int)+0x49>
c0024449:	83 ec 0c             	sub    esp,0xc
c002444c:	68 69 d7 02 c0       	push   0xc002d769
c0024451:	e8 21 ea fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024456:	83 c4 10             	add    esp,0x10
c0024459:	eb 17                	jmp    c0024472 <IDE::polling(unsigned char, unsigned int)+0x60>
c002445b:	a8 20                	test   al,0x20
c002445d:	75 0f                	jne    c002446e <IDE::polling(unsigned char, unsigned int)+0x5c>
c002445f:	4b                   	dec    ebx
c0024460:	74 10                	je     c0024472 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024462:	84 c0                	test   al,al
c0024464:	78 d2                	js     c0024438 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024466:	a8 08                	test   al,0x8
c0024468:	74 ce                	je     c0024438 <IDE::polling(unsigned char, unsigned int)+0x26>
c002446a:	31 c0                	xor    eax,eax
c002446c:	eb 06                	jmp    c0024474 <IDE::polling(unsigned char, unsigned int)+0x62>
c002446e:	b0 01                	mov    al,0x1
c0024470:	eb 02                	jmp    c0024474 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024472:	b0 02                	mov    al,0x2
c0024474:	5b                   	pop    ebx
c0024475:	5e                   	pop    esi
c0024476:	5f                   	pop    edi
c0024477:	c3                   	ret    

c0024478 <SATABus::close(int, int, void*)>:
c0024478:	31 c0                	xor    eax,eax
c002447a:	c3                   	ret    
c002447b:	90                   	nop

c002447c <SATABus::detect()>:
c002447c:	c3                   	ret    
c002447d:	90                   	nop

c002447e <SATABus::SATABus()>:
c002447e:	83 ec 0c             	sub    esp,0xc
c0024481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024485:	83 ec 08             	sub    esp,0x8
c0024488:	68 ac d7 02 c0       	push   0xc002d7ac
c002448d:	50                   	push   eax
c002448e:	e8 b3 01 ff ff       	call   c0014646 <HardDiskController::HardDiskController(char const*)>
c0024493:	83 c4 10             	add    esp,0x10
c0024496:	ba 68 d8 02 c0       	mov    edx,0xc002d868
c002449b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002449f:	89 10                	mov    DWORD PTR [eax],edx
c00244a1:	83 ec 0c             	sub    esp,0xc
c00244a4:	6a 50                	push   0x50
c00244a6:	e8 66 bb fe ff       	call   c0010011 <Phys::allocateContiguousPages(int)>
c00244ab:	83 c4 10             	add    esp,0x10
c00244ae:	89 c2                	mov    edx,eax
c00244b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244ba:	83 ec 0c             	sub    esp,0xc
c00244bd:	6a 50                	push   0x50
c00244bf:	e8 ad d5 fe ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c00244c4:	83 c4 10             	add    esp,0x10
c00244c7:	89 c2                	mov    edx,eax
c00244c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00244d3:	a1 50 f0 02 c0       	mov    eax,ds:0xc002f050
c00244d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00244dc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00244e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00244e6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00244ec:	83 ec 0c             	sub    esp,0xc
c00244ef:	6a 03                	push   0x3
c00244f1:	6a 50                	push   0x50
c00244f3:	51                   	push   ecx
c00244f4:	52                   	push   edx
c00244f5:	50                   	push   eax
c00244f6:	e8 a3 e0 fe ff       	call   c001259e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00244fb:	83 c4 20             	add    esp,0x20
c00244fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024502:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002450c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024512:	83 ec 04             	sub    esp,0x4
c0024515:	52                   	push   edx
c0024516:	50                   	push   eax
c0024517:	68 d0 d7 02 c0       	push   0xc002d7d0
c002451c:	e8 56 e9 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024521:	83 c4 10             	add    esp,0x10
c0024524:	90                   	nop
c0024525:	83 c4 0c             	add    esp,0xc
c0024528:	c3                   	ret    
c0024529:	90                   	nop

c002452a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002452a:	83 ec 0c             	sub    esp,0xc
c002452d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024531:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024534:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024537:	09 c2                	or     edx,eax
c0024539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002453d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024543:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024545:	31 c0                	xor    eax,eax
c0024547:	c1 e9 08             	shr    ecx,0x8
c002454a:	83 e1 0f             	and    ecx,0xf
c002454d:	39 c8                	cmp    eax,ecx
c002454f:	74 0a                	je     c002455b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024551:	f6 c2 01             	test   dl,0x1
c0024554:	74 18                	je     c002456e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024556:	d1 ea                	shr    edx,1
c0024558:	40                   	inc    eax
c0024559:	eb f2                	jmp    c002454d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002455b:	83 ec 0c             	sub    esp,0xc
c002455e:	68 f4 d7 02 c0       	push   0xc002d7f4
c0024563:	e8 fd 62 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0024568:	83 c4 10             	add    esp,0x10
c002456b:	83 c8 ff             	or     eax,0xffffffff
c002456e:	83 c4 0c             	add    esp,0xc
c0024571:	c3                   	ret    

c0024572 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024572:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024576:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024579:	89 c2                	mov    edx,eax
c002457b:	c1 ea 08             	shr    edx,0x8
c002457e:	83 e2 0f             	and    edx,0xf
c0024581:	fe ca                	dec    dl
c0024583:	75 31                	jne    c00245b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024585:	83 e0 0f             	and    eax,0xf
c0024588:	3c 03                	cmp    al,0x3
c002458a:	75 2a                	jne    c00245b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002458c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002458f:	b8 02 00 00 00       	mov    eax,0x2
c0024594:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002459a:	74 1c                	je     c00245b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002459c:	b8 04 00 00 00       	mov    eax,0x4
c00245a1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00245a7:	74 0f                	je     c00245b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245a9:	31 c0                	xor    eax,eax
c00245ab:	83 fa 03             	cmp    edx,0x3
c00245ae:	0f 94 c0             	sete   al
c00245b1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00245b5:	c3                   	ret    
c00245b6:	31 c0                	xor    eax,eax
c00245b8:	c3                   	ret    
c00245b9:	90                   	nop

c00245ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00245ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00245be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245c1:	0f ba e2 0f          	bt     edx,0xf
c00245c5:	72 f7                	jb     c00245be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00245c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245ca:	83 ca 10             	or     edx,0x10
c00245cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245d3:	83 ca 01             	or     edx,0x1
c00245d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245d9:	c3                   	ret    

c00245da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00245da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00245de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245e1:	83 e2 fe             	and    edx,0xfffffffe
c00245e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245ea:	83 e2 ef             	and    edx,0xffffffef
c00245ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245f3:	0f ba e2 0e          	bt     edx,0xe
c00245f7:	72 f7                	jb     c00245f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00245f9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245fc:	0f ba e2 0f          	bt     edx,0xf
c0024600:	72 ee                	jb     c00245f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024602:	c3                   	ret    
c0024603:	90                   	nop

c0024604 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024604:	55                   	push   ebp
c0024605:	57                   	push   edi
c0024606:	56                   	push   esi
c0024607:	53                   	push   ebx
c0024608:	83 ec 1c             	sub    esp,0x1c
c002460b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002460f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024613:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024617:	53                   	push   ebx
c0024618:	89 fd                	mov    ebp,edi
c002461a:	56                   	push   esi
c002461b:	c1 e5 0a             	shl    ebp,0xa
c002461e:	e8 b7 ff ff ff       	call   c00245da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024623:	83 ec 0c             	sub    esp,0xc
c0024626:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002462c:	01 e8                	add    eax,ebp
c002462e:	89 03                	mov    DWORD PTR [ebx],eax
c0024630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024632:	68 00 04 00 00       	push   0x400
c0024637:	6a 00                	push   0x0
c0024639:	50                   	push   eax
c002463a:	e8 2d c1 fd ff       	call   c000076c <memset>
c002463f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024645:	89 fa                	mov    edx,edi
c0024647:	01 e8                	add    eax,ebp
c0024649:	c1 e7 0d             	shl    edi,0xd
c002464c:	89 03                	mov    DWORD PTR [ebx],eax
c002464e:	c1 e2 08             	shl    edx,0x8
c0024651:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024658:	81 c2 00 80 00 00    	add    edx,0x8000
c002465e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024662:	89 d0                	mov    eax,edx
c0024664:	83 c4 1c             	add    esp,0x1c
c0024667:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002466d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024670:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024673:	68 00 01 00 00       	push   0x100
c0024678:	6a 00                	push   0x0
c002467a:	50                   	push   eax
c002467b:	e8 ec c0 fd ff       	call   c000076c <memset>
c0024680:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024684:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002468a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024690:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024694:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024697:	83 c4 10             	add    esp,0x10
c002469a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00246a1:	31 ff                	xor    edi,edi
c00246a3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00246a9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00246af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246b3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00246b9:	83 c5 20             	add    ebp,0x20
c00246bc:	01 f8                	add    eax,edi
c00246be:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246c1:	52                   	push   edx
c00246c2:	68 00 01 00 00       	push   0x100
c00246c7:	6a 00                	push   0x0
c00246c9:	50                   	push   eax
c00246ca:	e8 9d c0 fd ff       	call   c000076c <memset>
c00246cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00246d3:	83 c4 10             	add    esp,0x10
c00246d6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00246dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00246e3:	01 f8                	add    eax,edi
c00246e5:	81 c7 00 01 00 00    	add    edi,0x100
c00246eb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246ee:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00246f4:	75 b3                	jne    c00246a9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00246f6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00246fa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00246fe:	83 c4 1c             	add    esp,0x1c
c0024701:	5b                   	pop    ebx
c0024702:	5e                   	pop    esi
c0024703:	5f                   	pop    edi
c0024704:	5d                   	pop    ebp
c0024705:	e9 b0 fe ff ff       	jmp    c00245ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002470a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002470a:	55                   	push   ebp
c002470b:	57                   	push   edi
c002470c:	56                   	push   esi
c002470d:	53                   	push   ebx
c002470e:	31 db                	xor    ebx,ebx
c0024710:	83 ec 0c             	sub    esp,0xc
c0024713:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024717:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002471b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002471e:	f7 c7 01 00 00 00    	test   edi,0x1
c0024724:	0f 84 aa 00 00 00    	je     c00247d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002472a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002472e:	89 d8                	mov    eax,ebx
c0024730:	c1 e0 07             	shl    eax,0x7
c0024733:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002473a:	55                   	push   ebp
c002473b:	56                   	push   esi
c002473c:	e8 31 fe ff ff       	call   c0024572 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024741:	5a                   	pop    edx
c0024742:	83 f8 01             	cmp    eax,0x1
c0024745:	59                   	pop    ecx
c0024746:	75 30                	jne    c0024778 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024748:	50                   	push   eax
c0024749:	50                   	push   eax
c002474a:	53                   	push   ebx
c002474b:	68 19 d8 02 c0       	push   0xc002d819
c0024750:	e8 22 e7 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024755:	83 c4 0c             	add    esp,0xc
c0024758:	53                   	push   ebx
c0024759:	55                   	push   ebp
c002475a:	56                   	push   esi
c002475b:	e8 a4 fe ff ff       	call   c0024604 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024760:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024767:	e8 54 b1 fe ff       	call   c000f8c0 <malloc>
c002476c:	89 c5                	mov    ebp,eax
c002476e:	89 04 24             	mov    DWORD PTR [esp],eax
c0024771:	e8 5c 0d 00 00       	call   c00254d2 <SATA::SATA()>
c0024776:	eb 33                	jmp    c00247ab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024778:	83 f8 04             	cmp    eax,0x4
c002477b:	75 47                	jne    c00247c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002477d:	50                   	push   eax
c002477e:	50                   	push   eax
c002477f:	53                   	push   ebx
c0024780:	68 30 d8 02 c0       	push   0xc002d830
c0024785:	e8 ed e6 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c002478a:	83 c4 0c             	add    esp,0xc
c002478d:	53                   	push   ebx
c002478e:	55                   	push   ebp
c002478f:	56                   	push   esi
c0024790:	e8 6f fe ff ff       	call   c0024604 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024795:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002479c:	e8 1f b1 fe ff       	call   c000f8c0 <malloc>
c00247a1:	89 c5                	mov    ebp,eax
c00247a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00247a6:	e8 d3 10 00 00       	call   c002587e <SATAPI::SATAPI()>
c00247ab:	5a                   	pop    edx
c00247ac:	59                   	pop    ecx
c00247ad:	55                   	push   ebp
c00247ae:	56                   	push   esi
c00247af:	e8 f8 fa fe ff       	call   c00142ac <Device::addChild(Device*)>
c00247b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00247b7:	56                   	push   esi
c00247b8:	6a 00                	push   0x0
c00247ba:	53                   	push   ebx
c00247bb:	55                   	push   ebp
c00247bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00247bf:	83 c4 20             	add    esp,0x20
c00247c2:	eb 10                	jmp    c00247d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00247c4:	50                   	push   eax
c00247c5:	50                   	push   eax
c00247c6:	53                   	push   ebx
c00247c7:	68 49 d8 02 c0       	push   0xc002d849
c00247cc:	e8 a6 e6 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00247d1:	83 c4 10             	add    esp,0x10
c00247d4:	d1 ef                	shr    edi,1
c00247d6:	43                   	inc    ebx
c00247d7:	83 fb 20             	cmp    ebx,0x20
c00247da:	0f 85 3e ff ff ff    	jne    c002471e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00247e0:	83 c4 0c             	add    esp,0xc
c00247e3:	5b                   	pop    ebx
c00247e4:	5e                   	pop    esi
c00247e5:	5f                   	pop    edi
c00247e6:	5d                   	pop    ebp
c00247e7:	c3                   	ret    

c00247e8 <SATABus::open(int, int, void*)>:
c00247e8:	83 ec 14             	sub    esp,0x14
c00247eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247ef:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00247f5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00247fb:	52                   	push   edx
c00247fc:	50                   	push   eax
c00247fd:	e8 08 ff ff ff       	call   c002470a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024802:	31 c0                	xor    eax,eax
c0024804:	83 c4 1c             	add    esp,0x1c
c0024807:	c3                   	ret    

c0024808 <ATA::close(int, int, void*)>:
c0024808:	83 ec 0c             	sub    esp,0xc
c002480b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002480f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024815:	85 c0                	test   eax,eax
c0024817:	74 0c                	je     c0024825 <ATA::close(int, int, void*)+0x1d>
c0024819:	83 ec 0c             	sub    esp,0xc
c002481c:	8b 10                	mov    edx,DWORD PTR [eax]
c002481e:	50                   	push   eax
c002481f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024822:	83 c4 10             	add    esp,0x10
c0024825:	31 c0                	xor    eax,eax
c0024827:	83 c4 0c             	add    esp,0xc
c002482a:	c3                   	ret    
c002482b:	90                   	nop

c002482c <ATA::powerSaving(PowerSavingLevel)>:
c002482c:	c3                   	ret    
c002482d:	90                   	nop

c002482e <ATA::ATA()>:
c002482e:	83 ec 0c             	sub    esp,0xc
c0024831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024835:	83 ec 04             	sub    esp,0x4
c0024838:	68 00 02 00 00       	push   0x200
c002483d:	68 31 d9 02 c0       	push   0xc002d931
c0024842:	50                   	push   eax
c0024843:	e8 96 fe fe ff       	call   c00146de <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024848:	83 c4 10             	add    esp,0x10
c002484b:	ba b4 d8 02 c0       	mov    edx,0xc002d8b4
c0024850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024854:	89 10                	mov    DWORD PTR [eax],edx
c0024856:	90                   	nop
c0024857:	83 c4 0c             	add    esp,0xc
c002485a:	c3                   	ret    
c002485b:	90                   	nop

c002485c <ATA::flush(bool)>:
c002485c:	53                   	push   ebx
c002485d:	83 ec 08             	sub    esp,0x8
c0024860:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024865:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024869:	19 c0                	sbb    eax,eax
c002486b:	83 e0 fd             	and    eax,0xfffffffd
c002486e:	05 ea 00 00 00       	add    eax,0xea
c0024873:	50                   	push   eax
c0024874:	6a 07                	push   0x7
c0024876:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002487d:	50                   	push   eax
c002487e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024884:	e8 dd ef ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024889:	83 c4 0c             	add    esp,0xc
c002488c:	6a 00                	push   0x0
c002488e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024895:	50                   	push   eax
c0024896:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002489c:	e8 71 fb ff ff       	call   c0024412 <IDE::polling(unsigned char, unsigned int)>
c00248a1:	83 c4 18             	add    esp,0x18
c00248a4:	5b                   	pop    ebx
c00248a5:	c3                   	ret    

c00248a6 <ATA::readyForCommand()>:
c00248a6:	56                   	push   esi
c00248a7:	53                   	push   ebx
c00248a8:	31 db                	xor    ebx,ebx
c00248aa:	50                   	push   eax
c00248ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00248af:	50                   	push   eax
c00248b0:	6a 0c                	push   0xc
c00248b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00248b9:	50                   	push   eax
c00248ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00248c0:	e8 61 f0 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c00248c5:	83 c4 10             	add    esp,0x10
c00248c8:	a8 88                	test   al,0x88
c00248ca:	74 23                	je     c00248ef <ATA::readyForCommand()+0x49>
c00248cc:	43                   	inc    ebx
c00248cd:	83 fb 63             	cmp    ebx,0x63
c00248d0:	7e dd                	jle    c00248af <ATA::readyForCommand()+0x9>
c00248d2:	51                   	push   ecx
c00248d3:	51                   	push   ecx
c00248d4:	6a 00                	push   0x0
c00248d6:	68 40 42 0f 00       	push   0xf4240
c00248db:	e8 0d 9f ff ff       	call   c001e7ed <nanoSleep(unsigned long long)>
c00248e0:	83 c4 10             	add    esp,0x10
c00248e3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00248e9:	75 c4                	jne    c00248af <ATA::readyForCommand()+0x9>
c00248eb:	31 c0                	xor    eax,eax
c00248ed:	eb 02                	jmp    c00248f1 <ATA::readyForCommand()+0x4b>
c00248ef:	b0 01                	mov    al,0x1
c00248f1:	5a                   	pop    edx
c00248f2:	5b                   	pop    ebx
c00248f3:	5e                   	pop    esi
c00248f4:	c3                   	ret    
c00248f5:	90                   	nop

c00248f6 <ATA::access(unsigned long long, int, void*, bool)>:
c00248f6:	55                   	push   ebp
c00248f7:	57                   	push   edi
c00248f8:	56                   	push   esi
c00248f9:	53                   	push   ebx
c00248fa:	83 ec 2c             	sub    esp,0x2c
c00248fd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024901:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024905:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024909:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002490d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024911:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024915:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024919:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002491f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024923:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024929:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002492d:	c1 e0 06             	shl    eax,0x6
c0024930:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024938:	74 5d                	je     c0024997 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002493a:	89 fa                	mov    edx,edi
c002493c:	89 f0                	mov    eax,esi
c002493e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024942:	c1 ea 1c             	shr    edx,0x1c
c0024945:	89 d1                	mov    ecx,edx
c0024947:	09 c1                	or     ecx,eax
c0024949:	74 25                	je     c0024970 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002494b:	31 ed                	xor    ebp,ebp
c002494d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024954:	89 fa                	mov    edx,edi
c0024956:	89 f0                	mov    eax,esi
c0024958:	0f ad d0             	shrd   eax,edx,cl
c002495b:	d3 ea                	shr    edx,cl
c002495d:	f6 c1 20             	test   cl,0x20
c0024960:	74 02                	je     c0024964 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024962:	89 d0                	mov    eax,edx
c0024964:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024968:	45                   	inc    ebp
c0024969:	83 fd 06             	cmp    ebp,0x6
c002496c:	75 df                	jne    c002494d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002496e:	eb 76                	jmp    c00249e6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024970:	89 f0                	mov    eax,esi
c0024972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024977:	89 fa                	mov    edx,edi
c0024979:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024980:	0f ac d0 10          	shrd   eax,edx,0x10
c0024984:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024989:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002498d:	c1 ee 18             	shr    esi,0x18
c0024990:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024995:	eb 56                	jmp    c00249ed <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024997:	6a 00                	push   0x0
c0024999:	6a 3f                	push   0x3f
c002499b:	57                   	push   edi
c002499c:	56                   	push   esi
c002499d:	e8 92 29 00 00       	call   c0027334 <__umoddi3>
c00249a2:	83 c4 10             	add    esp,0x10
c00249a5:	40                   	inc    eax
c00249a6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00249aa:	6a 00                	push   0x0
c00249ac:	68 f0 03 00 00       	push   0x3f0
c00249b1:	57                   	push   edi
c00249b2:	56                   	push   esi
c00249b3:	e8 7c 28 00 00       	call   c0027234 <__udivdi3>
c00249b8:	83 c4 10             	add    esp,0x10
c00249bb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00249c0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249c7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249cc:	6a 00                	push   0x0
c00249ce:	6a 3f                	push   0x3f
c00249d0:	57                   	push   edi
c00249d1:	56                   	push   esi
c00249d2:	e8 5d 28 00 00       	call   c0027234 <__udivdi3>
c00249d7:	83 c4 10             	add    esp,0x10
c00249da:	89 c6                	mov    esi,eax
c00249dc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00249e1:	83 e6 0f             	and    esi,0xf
c00249e4:	eb 07                	jmp    c00249ed <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00249e6:	31 f6                	xor    esi,esi
c00249e8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00249ed:	bf 01 00 00 00       	mov    edi,0x1
c00249f2:	50                   	push   eax
c00249f3:	6a 00                	push   0x0
c00249f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249fc:	50                   	push   eax
c00249fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a01:	e8 6c f0 ff ff       	call   c0023a72 <IDE::enableIRQs(unsigned char, bool)>
c0024a06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a09:	e8 98 fe ff ff       	call   c00248a6 <ATA::readyForCommand()>
c0024a0e:	83 c4 10             	add    esp,0x10
c0024a11:	84 c0                	test   al,al
c0024a13:	0f 84 5a 02 00 00    	je     c0024c73 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024a19:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a1f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a25:	c1 e0 04             	shl    eax,0x4
c0024a28:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024a2f:	09 c6                	or     esi,eax
c0024a31:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024a36:	75 05                	jne    c0024a3d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024a38:	83 ce a0             	or     esi,0xffffffa0
c0024a3b:	eb 03                	jmp    c0024a40 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024a3d:	83 ce e0             	or     esi,0xffffffe0
c0024a40:	89 f0                	mov    eax,esi
c0024a42:	0f b6 f0             	movzx  esi,al
c0024a45:	56                   	push   esi
c0024a46:	6a 06                	push   0x6
c0024a48:	51                   	push   ecx
c0024a49:	52                   	push   edx
c0024a4a:	e8 17 ee ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a4f:	83 c4 10             	add    esp,0x10
c0024a52:	6a 00                	push   0x0
c0024a54:	6a 01                	push   0x1
c0024a56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a5d:	50                   	push   eax
c0024a5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a64:	e8 fd ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a69:	83 c4 10             	add    esp,0x10
c0024a6c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024a71:	75 6e                	jne    c0024ae1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024a73:	6a 00                	push   0x0
c0024a75:	6a 08                	push   0x8
c0024a77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a7e:	50                   	push   eax
c0024a7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a85:	e8 dc ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a8a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024a8f:	50                   	push   eax
c0024a90:	6a 09                	push   0x9
c0024a92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a99:	50                   	push   eax
c0024a9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aa0:	e8 c1 ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa5:	83 c4 20             	add    esp,0x20
c0024aa8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024aad:	50                   	push   eax
c0024aae:	6a 0a                	push   0xa
c0024ab0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab7:	50                   	push   eax
c0024ab8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024abe:	e8 a3 ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024ac8:	50                   	push   eax
c0024ac9:	6a 0b                	push   0xb
c0024acb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ad2:	50                   	push   eax
c0024ad3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad9:	e8 88 ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ade:	83 c4 20             	add    esp,0x20
c0024ae1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024ae6:	50                   	push   eax
c0024ae7:	6a 02                	push   0x2
c0024ae9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024af0:	50                   	push   eax
c0024af1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024af7:	e8 6a ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024afc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024b01:	50                   	push   eax
c0024b02:	6a 03                	push   0x3
c0024b04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b0b:	50                   	push   eax
c0024b0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b12:	e8 4f ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b17:	83 c4 20             	add    esp,0x20
c0024b1a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024b1f:	50                   	push   eax
c0024b20:	6a 04                	push   0x4
c0024b22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b29:	50                   	push   eax
c0024b2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b30:	e8 31 ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024b3a:	50                   	push   eax
c0024b3b:	6a 05                	push   0x5
c0024b3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b44:	50                   	push   eax
c0024b45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b4b:	e8 16 ed ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b50:	83 c4 20             	add    esp,0x20
c0024b53:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b58:	0f 94 c0             	sete   al
c0024b5b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024b60:	74 09                	je     c0024b6b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024b62:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024b69:	eb 07                	jmp    c0024b72 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024b6b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024b72:	0f b6 c0             	movzx  eax,al
c0024b75:	50                   	push   eax
c0024b76:	6a 07                	push   0x7
c0024b78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b7f:	50                   	push   eax
c0024b80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b86:	e8 db ec ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b8b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024b8f:	83 c4 10             	add    esp,0x10
c0024b92:	85 f6                	test   esi,esi
c0024b94:	0f 84 ba 00 00 00    	je     c0024c54 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024b9a:	50                   	push   eax
c0024b9b:	6a 01                	push   0x1
c0024b9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ba4:	50                   	push   eax
c0024ba5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bab:	e8 62 f8 ff ff       	call   c0024412 <IDE::polling(unsigned char, unsigned int)>
c0024bb0:	83 c4 10             	add    esp,0x10
c0024bb3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024bb9:	84 c0                	test   al,al
c0024bbb:	74 2c                	je     c0024be9 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024bbd:	0f b6 f8             	movzx  edi,al
c0024bc0:	0f b6 d2             	movzx  edx,dl
c0024bc3:	57                   	push   edi
c0024bc4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024bcb:	50                   	push   eax
c0024bcc:	52                   	push   edx
c0024bcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bd3:	e8 a4 f6 ff ff       	call   c002427c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024bd8:	c7 04 24 8c d8 02 c0 	mov    DWORD PTR [esp],0xc002d88c
c0024bdf:	e8 93 e2 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0024be4:	e9 87 00 00 00       	jmp    c0024c70 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024be9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024bee:	74 33                	je     c0024c23 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024bf0:	31 ed                	xor    ebp,ebp
c0024bf2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024bf6:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024bfa:	50                   	push   eax
c0024bfb:	50                   	push   eax
c0024bfc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c03:	50                   	push   eax
c0024c04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c0a:	e8 45 ec ff ff       	call   c0023854 <IDE::getBase(unsigned char)>
c0024c0f:	89 c2                	mov    edx,eax
c0024c11:	89 f8                	mov    eax,edi
c0024c13:	66 ef                	out    dx,ax
c0024c15:	45                   	inc    ebp
c0024c16:	83 c4 10             	add    esp,0x10
c0024c19:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024c1f:	75 d1                	jne    c0024bf2 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024c21:	eb 23                	jmp    c0024c46 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024c23:	0f b6 d2             	movzx  edx,dl
c0024c26:	51                   	push   ecx
c0024c27:	51                   	push   ecx
c0024c28:	52                   	push   edx
c0024c29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c2f:	e8 20 ec ff ff       	call   c0023854 <IDE::getBase(unsigned char)>
c0024c34:	b9 00 01 00 00       	mov    ecx,0x100
c0024c39:	89 c2                	mov    edx,eax
c0024c3b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024c3f:	fc                   	cld    
c0024c40:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024c43:	83 c4 10             	add    esp,0x10
c0024c46:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024c4e:	4e                   	dec    esi
c0024c4f:	e9 3e ff ff ff       	jmp    c0024b92 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024c54:	31 ff                	xor    edi,edi
c0024c56:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c5b:	74 16                	je     c0024c73 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c5d:	50                   	push   eax
c0024c5e:	50                   	push   eax
c0024c5f:	31 c0                	xor    eax,eax
c0024c61:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024c66:	0f 94 c0             	sete   al
c0024c69:	50                   	push   eax
c0024c6a:	53                   	push   ebx
c0024c6b:	e8 ec fb ff ff       	call   c002485c <ATA::flush(bool)>
c0024c70:	83 c4 10             	add    esp,0x10
c0024c73:	83 c4 2c             	add    esp,0x2c
c0024c76:	89 f8                	mov    eax,edi
c0024c78:	5b                   	pop    ebx
c0024c79:	5e                   	pop    esi
c0024c7a:	5f                   	pop    edi
c0024c7b:	5d                   	pop    ebp
c0024c7c:	c3                   	ret    
c0024c7d:	90                   	nop

c0024c7e <ATA::read(unsigned long long, int, void*)>:
c0024c7e:	57                   	push   edi
c0024c7f:	b8 04 00 00 00       	mov    eax,0x4
c0024c84:	56                   	push   esi
c0024c85:	53                   	push   ebx
c0024c86:	83 ec 10             	sub    esp,0x10
c0024c89:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c8d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c91:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c94:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c9c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ca2:	77 3b                	ja     c0024cdf <ATA::read(unsigned long long, int, void*)+0x61>
c0024ca4:	b8 06 00 00 00       	mov    eax,0x6
c0024ca9:	85 d2                	test   edx,edx
c0024cab:	74 32                	je     c0024cdf <ATA::read(unsigned long long, int, void*)+0x61>
c0024cad:	50                   	push   eax
c0024cae:	50                   	push   eax
c0024caf:	6a 00                	push   0x0
c0024cb1:	52                   	push   edx
c0024cb2:	53                   	push   ebx
c0024cb3:	57                   	push   edi
c0024cb4:	56                   	push   esi
c0024cb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024cb9:	e8 38 fc ff ff       	call   c00248f6 <ATA::access(unsigned long long, int, void*, bool)>
c0024cbe:	83 c4 20             	add    esp,0x20
c0024cc1:	85 c0                	test   eax,eax
c0024cc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cc7:	75 11                	jne    c0024cda <ATA::read(unsigned long long, int, void*)+0x5c>
c0024cc9:	01 1d 28 32 03 c0    	add    DWORD PTR ds:0xc0033228,ebx
c0024ccf:	e8 a8 bc fe ff       	call   c001097c <VgaText::updateDiskUsage()>
c0024cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cd8:	eb 05                	jmp    c0024cdf <ATA::read(unsigned long long, int, void*)+0x61>
c0024cda:	b8 01 00 00 00       	mov    eax,0x1
c0024cdf:	83 c4 10             	add    esp,0x10
c0024ce2:	5b                   	pop    ebx
c0024ce3:	5e                   	pop    esi
c0024ce4:	5f                   	pop    edi
c0024ce5:	c3                   	ret    

c0024ce6 <ATA::write(unsigned long long, int, void*)>:
c0024ce6:	57                   	push   edi
c0024ce7:	b8 04 00 00 00       	mov    eax,0x4
c0024cec:	56                   	push   esi
c0024ced:	53                   	push   ebx
c0024cee:	83 ec 10             	sub    esp,0x10
c0024cf1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cf5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024cf9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024cfc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024d00:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024d04:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024d0a:	77 3b                	ja     c0024d47 <ATA::write(unsigned long long, int, void*)+0x61>
c0024d0c:	b8 06 00 00 00       	mov    eax,0x6
c0024d11:	85 d2                	test   edx,edx
c0024d13:	74 32                	je     c0024d47 <ATA::write(unsigned long long, int, void*)+0x61>
c0024d15:	50                   	push   eax
c0024d16:	50                   	push   eax
c0024d17:	6a 01                	push   0x1
c0024d19:	52                   	push   edx
c0024d1a:	53                   	push   ebx
c0024d1b:	57                   	push   edi
c0024d1c:	56                   	push   esi
c0024d1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d21:	e8 d0 fb ff ff       	call   c00248f6 <ATA::access(unsigned long long, int, void*, bool)>
c0024d26:	83 c4 20             	add    esp,0x20
c0024d29:	85 c0                	test   eax,eax
c0024d2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d2f:	75 11                	jne    c0024d42 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024d31:	01 1d 24 32 03 c0    	add    DWORD PTR ds:0xc0033224,ebx
c0024d37:	e8 40 bc fe ff       	call   c001097c <VgaText::updateDiskUsage()>
c0024d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d40:	eb 05                	jmp    c0024d47 <ATA::write(unsigned long long, int, void*)+0x61>
c0024d42:	b8 01 00 00 00       	mov    eax,0x1
c0024d47:	83 c4 10             	add    esp,0x10
c0024d4a:	5b                   	pop    ebx
c0024d4b:	5e                   	pop    esi
c0024d4c:	5f                   	pop    edi
c0024d4d:	c3                   	ret    

c0024d4e <ATA::detectCHS()>:
c0024d4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d52:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024d58:	c1 e0 06             	shl    eax,0x6
c0024d5b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d61:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d6b:	c7 44 24 04 97 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d897
c0024d73:	e9 ed 5a ff ff       	jmp    c001a865 <Krnl::panic(char const*)>

c0024d78 <ATA::open(int, int, void*)>:
c0024d78:	53                   	push   ebx
c0024d79:	83 ec 08             	sub    esp,0x8
c0024d7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d88:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d8e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d94:	c1 e0 06             	shl    eax,0x6
c0024d97:	01 d0                	add    eax,edx
c0024d99:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024da0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024da6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024dad:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024db7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024dbd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024dc4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024dcb:	75 0c                	jne    c0024dd9 <ATA::open(int, int, void*)+0x61>
c0024dcd:	83 ec 0c             	sub    esp,0xc
c0024dd0:	53                   	push   ebx
c0024dd1:	e8 78 ff ff ff       	call   c0024d4e <ATA::detectCHS()>
c0024dd6:	83 c4 10             	add    esp,0x10
c0024dd9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024ddf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024de5:	c1 e0 06             	shl    eax,0x6
c0024de8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024def:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024df9:	d1 e8                	shr    eax,1
c0024dfb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024e01:	6a 04                	push   0x4
c0024e03:	6a 0c                	push   0xc
c0024e05:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e0c:	50                   	push   eax
c0024e0d:	52                   	push   edx
c0024e0e:	e8 53 ea ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e13:	90                   	nop
c0024e14:	90                   	nop
c0024e15:	6a 00                	push   0x0
c0024e17:	6a 0c                	push   0xc
c0024e19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e20:	50                   	push   eax
c0024e21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e27:	e8 3a ea ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e2c:	83 c4 14             	add    esp,0x14
c0024e2f:	53                   	push   ebx
c0024e30:	e8 11 f9 fe ff       	call   c0014746 <PhysicalDisk::startCache()>
c0024e35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e38:	e8 e9 1b ff ff       	call   c0016a26 <createPartitionsForDisk(PhysicalDisk*)>
c0024e3d:	31 c0                	xor    eax,eax
c0024e3f:	83 c4 18             	add    esp,0x18
c0024e42:	5b                   	pop    ebx
c0024e43:	c3                   	ret    

c0024e44 <ATAPI::write(unsigned long long, int, void*)>:
c0024e44:	b8 03 00 00 00       	mov    eax,0x3
c0024e49:	c3                   	ret    

c0024e4a <ATAPI::close(int, int, void*)>:
c0024e4a:	83 ec 0c             	sub    esp,0xc
c0024e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e57:	85 c0                	test   eax,eax
c0024e59:	74 0c                	je     c0024e67 <ATAPI::close(int, int, void*)+0x1d>
c0024e5b:	83 ec 0c             	sub    esp,0xc
c0024e5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e60:	50                   	push   eax
c0024e61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e64:	83 c4 10             	add    esp,0x10
c0024e67:	31 c0                	xor    eax,eax
c0024e69:	83 c4 0c             	add    esp,0xc
c0024e6c:	c3                   	ret    
c0024e6d:	90                   	nop

c0024e6e <ATAPI::ATAPI()>:
c0024e6e:	83 ec 0c             	sub    esp,0xc
c0024e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e75:	83 ec 04             	sub    esp,0x4
c0024e78:	68 00 08 00 00       	push   0x800
c0024e7d:	68 d1 d9 02 c0       	push   0xc002d9d1
c0024e82:	50                   	push   eax
c0024e83:	e8 56 f8 fe ff       	call   c00146de <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e88:	83 c4 10             	add    esp,0x10
c0024e8b:	ba ec d8 02 c0       	mov    edx,0xc002d8ec
c0024e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e94:	89 10                	mov    DWORD PTR [eax],edx
c0024e96:	90                   	nop
c0024e97:	83 c4 0c             	add    esp,0xc
c0024e9a:	c3                   	ret    
c0024e9b:	90                   	nop

c0024e9c <ATAPI::readyForCommand()>:
c0024e9c:	56                   	push   esi
c0024e9d:	53                   	push   ebx
c0024e9e:	31 db                	xor    ebx,ebx
c0024ea0:	50                   	push   eax
c0024ea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ea5:	50                   	push   eax
c0024ea6:	6a 0c                	push   0xc
c0024ea8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024eaf:	50                   	push   eax
c0024eb0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024eb6:	e8 6b ea ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0024ebb:	83 c4 10             	add    esp,0x10
c0024ebe:	a8 88                	test   al,0x88
c0024ec0:	74 23                	je     c0024ee5 <ATAPI::readyForCommand()+0x49>
c0024ec2:	43                   	inc    ebx
c0024ec3:	83 fb 63             	cmp    ebx,0x63
c0024ec6:	7e dd                	jle    c0024ea5 <ATAPI::readyForCommand()+0x9>
c0024ec8:	51                   	push   ecx
c0024ec9:	51                   	push   ecx
c0024eca:	6a 00                	push   0x0
c0024ecc:	68 40 42 0f 00       	push   0xf4240
c0024ed1:	e8 17 99 ff ff       	call   c001e7ed <nanoSleep(unsigned long long)>
c0024ed6:	83 c4 10             	add    esp,0x10
c0024ed9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024edf:	75 c4                	jne    c0024ea5 <ATAPI::readyForCommand()+0x9>
c0024ee1:	31 c0                	xor    eax,eax
c0024ee3:	eb 02                	jmp    c0024ee7 <ATAPI::readyForCommand()+0x4b>
c0024ee5:	b0 01                	mov    al,0x1
c0024ee7:	5a                   	pop    edx
c0024ee8:	5b                   	pop    ebx
c0024ee9:	5e                   	pop    esi
c0024eea:	c3                   	ret    
c0024eeb:	90                   	nop

c0024eec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024eec:	55                   	push   ebp
c0024eed:	57                   	push   edi
c0024eee:	56                   	push   esi
c0024eef:	53                   	push   ebx
c0024ef0:	83 ec 20             	sub    esp,0x20
c0024ef3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024ef7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024efb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024eff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f03:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f07:	6a 01                	push   0x1
c0024f09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f10:	50                   	push   eax
c0024f11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f17:	e8 56 eb ff ff       	call   c0023a72 <IDE::enableIRQs(unsigned char, bool)>
c0024f1c:	5e                   	pop    esi
c0024f1d:	58                   	pop    eax
c0024f1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f25:	50                   	push   eax
c0024f26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f2c:	e8 0f e9 ff ff       	call   c0023840 <IDE::prepareInterrupt(unsigned char)>
c0024f31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024f34:	e8 63 ff ff ff       	call   c0024e9c <ATAPI::readyForCommand()>
c0024f39:	83 c4 10             	add    esp,0x10
c0024f3c:	84 c0                	test   al,al
c0024f3e:	75 0a                	jne    c0024f4a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024f40:	bb 01 00 00 00       	mov    ebx,0x1
c0024f45:	e9 57 02 00 00       	jmp    c00251a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f4a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024f50:	c1 e0 04             	shl    eax,0x4
c0024f53:	0f b6 c0             	movzx  eax,al
c0024f56:	50                   	push   eax
c0024f57:	6a 06                	push   0x6
c0024f59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f60:	50                   	push   eax
c0024f61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f67:	e8 fa e8 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f6c:	6a 00                	push   0x0
c0024f6e:	6a 01                	push   0x1
c0024f70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f77:	50                   	push   eax
c0024f78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f7e:	e8 e3 e8 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f83:	83 c4 20             	add    esp,0x20
c0024f86:	0f b6 c3             	movzx  eax,bl
c0024f89:	0f b6 df             	movzx  ebx,bh
c0024f8c:	50                   	push   eax
c0024f8d:	6a 04                	push   0x4
c0024f8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f96:	50                   	push   eax
c0024f97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f9d:	e8 c4 e8 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fa2:	53                   	push   ebx
c0024fa3:	6a 05                	push   0x5
c0024fa5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fac:	50                   	push   eax
c0024fad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fb3:	e8 ae e8 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fb8:	83 c4 20             	add    esp,0x20
c0024fbb:	68 a0 00 00 00       	push   0xa0
c0024fc0:	6a 07                	push   0x7
c0024fc2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fc9:	50                   	push   eax
c0024fca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fd0:	e8 91 e8 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fd5:	83 c4 0c             	add    esp,0xc
c0024fd8:	6a 01                	push   0x1
c0024fda:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fe1:	50                   	push   eax
c0024fe2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fe8:	e8 25 f4 ff ff       	call   c0024412 <IDE::polling(unsigned char, unsigned int)>
c0024fed:	83 c4 10             	add    esp,0x10
c0024ff0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024ff6:	84 c0                	test   al,al
c0024ff8:	74 23                	je     c002501d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024ffa:	0f b6 d8             	movzx  ebx,al
c0024ffd:	0f b6 d2             	movzx  edx,dl
c0025000:	53                   	push   ebx
c0025001:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025008:	50                   	push   eax
c0025009:	52                   	push   edx
c002500a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025010:	e8 67 f2 ff ff       	call   c002427c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0025015:	83 c4 10             	add    esp,0x10
c0025018:	e9 84 01 00 00       	jmp    c00251a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002501d:	0f b6 d2             	movzx  edx,dl
c0025020:	53                   	push   ebx
c0025021:	53                   	push   ebx
c0025022:	52                   	push   edx
c0025023:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025029:	e8 26 e8 ff ff       	call   c0023854 <IDE::getBase(unsigned char)>
c002502e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025032:	b9 06 00 00 00       	mov    ecx,0x6
c0025037:	89 c2                	mov    edx,eax
c0025039:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002503c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025040:	83 c4 10             	add    esp,0x10
c0025043:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025049:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025050:	85 db                	test   ebx,ebx
c0025052:	0f 84 ec 00 00 00    	je     c0025144 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025058:	51                   	push   ecx
c0025059:	51                   	push   ecx
c002505a:	52                   	push   edx
c002505b:	50                   	push   eax
c002505c:	e8 73 e9 ff ff       	call   c00239d4 <IDE::waitInterrupt(unsigned char)>
c0025061:	83 c4 10             	add    esp,0x10
c0025064:	84 c0                	test   al,al
c0025066:	0f 84 d4 fe ff ff    	je     c0024f40 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002506c:	56                   	push   esi
c002506d:	56                   	push   esi
c002506e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025075:	50                   	push   eax
c0025076:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002507c:	e8 bf e7 ff ff       	call   c0023840 <IDE::prepareInterrupt(unsigned char)>
c0025081:	83 c4 0c             	add    esp,0xc
c0025084:	6a 04                	push   0x4
c0025086:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002508d:	50                   	push   eax
c002508e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025094:	e8 8d e8 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c0025099:	83 c4 0c             	add    esp,0xc
c002509c:	89 c6                	mov    esi,eax
c002509e:	6a 05                	push   0x5
c00250a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250a7:	50                   	push   eax
c00250a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250ae:	e8 73 e8 ff ff       	call   c0023926 <IDE::read(unsigned char, unsigned char)>
c00250b3:	89 f1                	mov    ecx,esi
c00250b5:	0f b6 c0             	movzx  eax,al
c00250b8:	0f b6 f1             	movzx  esi,cl
c00250bb:	c1 e0 08             	shl    eax,0x8
c00250be:	09 c6                	or     esi,eax
c00250c0:	d1 fe                	sar    esi,1
c00250c2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00250c6:	83 c4 10             	add    esp,0x10
c00250c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00250ce:	74 41                	je     c0025111 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00250d0:	31 c9                	xor    ecx,ecx
c00250d2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250d8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250df:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00250e3:	75 0a                	jne    c00250ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00250e5:	01 c9                	add    ecx,ecx
c00250e7:	01 cd                	add    ebp,ecx
c00250e9:	4b                   	dec    ebx
c00250ea:	e9 54 ff ff ff       	jmp    c0025043 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00250ef:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00250f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00250f8:	51                   	push   ecx
c00250f9:	51                   	push   ecx
c00250fa:	52                   	push   edx
c00250fb:	50                   	push   eax
c00250fc:	e8 53 e7 ff ff       	call   c0023854 <IDE::getBase(unsigned char)>
c0025101:	89 c2                	mov    edx,eax
c0025103:	89 f0                	mov    eax,esi
c0025105:	66 ef                	out    dx,ax
c0025107:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002510b:	83 c4 10             	add    esp,0x10
c002510e:	41                   	inc    ecx
c002510f:	eb c1                	jmp    c00250d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025111:	31 f6                	xor    esi,esi
c0025113:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025119:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025120:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025124:	75 06                	jne    c002512c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025126:	01 f6                	add    esi,esi
c0025128:	01 f5                	add    ebp,esi
c002512a:	eb bd                	jmp    c00250e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002512c:	51                   	push   ecx
c002512d:	51                   	push   ecx
c002512e:	52                   	push   edx
c002512f:	50                   	push   eax
c0025130:	e8 1f e7 ff ff       	call   c0023854 <IDE::getBase(unsigned char)>
c0025135:	89 c2                	mov    edx,eax
c0025137:	66 ed                	in     ax,dx
c0025139:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002513e:	83 c4 10             	add    esp,0x10
c0025141:	46                   	inc    esi
c0025142:	eb cf                	jmp    c0025113 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025144:	51                   	push   ecx
c0025145:	51                   	push   ecx
c0025146:	52                   	push   edx
c0025147:	50                   	push   eax
c0025148:	e8 87 e8 ff ff       	call   c00239d4 <IDE::waitInterrupt(unsigned char)>
c002514d:	83 c4 10             	add    esp,0x10
c0025150:	84 c0                	test   al,al
c0025152:	0f 84 e8 fd ff ff    	je     c0024f40 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025158:	bb a0 86 01 00       	mov    ebx,0x186a0
c002515d:	52                   	push   edx
c002515e:	52                   	push   edx
c002515f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025166:	50                   	push   eax
c0025167:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002516d:	e8 ce e6 ff ff       	call   c0023840 <IDE::prepareInterrupt(unsigned char)>
c0025172:	83 c4 10             	add    esp,0x10
c0025175:	50                   	push   eax
c0025176:	50                   	push   eax
c0025177:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002517e:	50                   	push   eax
c002517f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025185:	e8 ca e6 ff ff       	call   c0023854 <IDE::getBase(unsigned char)>
c002518a:	8d 50 07             	lea    edx,[eax+0x7]
c002518d:	ec                   	in     al,dx
c002518e:	83 c4 10             	add    esp,0x10
c0025191:	a8 88                	test   al,0x88
c0025193:	74 0a                	je     c002519f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025195:	4b                   	dec    ebx
c0025196:	75 dd                	jne    c0025175 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025198:	bb 02 00 00 00       	mov    ebx,0x2
c002519d:	eb 02                	jmp    c00251a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002519f:	31 db                	xor    ebx,ebx
c00251a1:	83 c4 1c             	add    esp,0x1c
c00251a4:	89 d8                	mov    eax,ebx
c00251a6:	5b                   	pop    ebx
c00251a7:	5e                   	pop    esi
c00251a8:	5f                   	pop    edi
c00251a9:	5d                   	pop    ebp
c00251aa:	c3                   	ret    
c00251ab:	90                   	nop

c00251ac <ATAPI::diskRemoved()>:
c00251ac:	83 ec 18             	sub    esp,0x18
c00251af:	68 dd d9 02 c0       	push   0xc002d9dd
c00251b4:	e8 be dc fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00251b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251bd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00251c4:	83 c4 1c             	add    esp,0x1c
c00251c7:	c3                   	ret    

c00251c8 <ATAPI::eject()>:
c00251c8:	57                   	push   edi
c00251c9:	b9 03 00 00 00       	mov    ecx,0x3
c00251ce:	53                   	push   ebx
c00251cf:	83 ec 14             	sub    esp,0x14
c00251d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251d6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251da:	fc                   	cld    
c00251db:	31 c0                	xor    eax,eax
c00251dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251df:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00251e4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00251e9:	50                   	push   eax
c00251ea:	50                   	push   eax
c00251eb:	6a 00                	push   0x0
c00251ed:	6a 00                	push   0x0
c00251ef:	6a 00                	push   0x0
c00251f1:	6a 02                	push   0x2
c00251f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251f7:	50                   	push   eax
c00251f8:	53                   	push   ebx
c00251f9:	e8 ee fc ff ff       	call   c0024eec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251fe:	83 c4 14             	add    esp,0x14
c0025201:	53                   	push   ebx
c0025202:	e8 a5 ff ff ff       	call   c00251ac <ATAPI::diskRemoved()>
c0025207:	83 c4 24             	add    esp,0x24
c002520a:	31 c0                	xor    eax,eax
c002520c:	5b                   	pop    ebx
c002520d:	5f                   	pop    edi
c002520e:	c3                   	ret    
c002520f:	90                   	nop

c0025210 <ATAPI::diskInserted()>:
c0025210:	53                   	push   ebx
c0025211:	83 ec 14             	sub    esp,0x14
c0025214:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025218:	68 f4 d9 02 c0       	push   0xc002d9f4
c002521d:	e8 55 dc fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0025222:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025229:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002522c:	e8 15 f5 fe ff       	call   c0014746 <PhysicalDisk::startCache()>
c0025231:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025235:	83 c4 18             	add    esp,0x18
c0025238:	5b                   	pop    ebx
c0025239:	e9 e8 17 ff ff       	jmp    c0016a26 <createPartitionsForDisk(PhysicalDisk*)>

c002523e <ATAPI::detectMedia()>:
c002523e:	56                   	push   esi
c002523f:	53                   	push   ebx
c0025240:	83 ec 28             	sub    esp,0x28
c0025243:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025247:	6a 0c                	push   0xc
c0025249:	6a 00                	push   0x0
c002524b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002524f:	56                   	push   esi
c0025250:	e8 17 b5 fd ff       	call   c000076c <memset>
c0025255:	58                   	pop    eax
c0025256:	5a                   	pop    edx
c0025257:	6a 00                	push   0x0
c0025259:	6a 00                	push   0x0
c002525b:	6a 00                	push   0x0
c002525d:	6a 00                	push   0x0
c002525f:	56                   	push   esi
c0025260:	53                   	push   ebx
c0025261:	e8 86 fc ff ff       	call   c0024eec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025266:	83 c4 1c             	add    esp,0x1c
c0025269:	6a 0c                	push   0xc
c002526b:	6a 00                	push   0x0
c002526d:	56                   	push   esi
c002526e:	e8 f9 b4 fd ff       	call   c000076c <memset>
c0025273:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025278:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002527d:	59                   	pop    ecx
c002527e:	58                   	pop    eax
c002527f:	6a 01                	push   0x1
c0025281:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025285:	50                   	push   eax
c0025286:	6a 00                	push   0x0
c0025288:	6a 12                	push   0x12
c002528a:	56                   	push   esi
c002528b:	53                   	push   ebx
c002528c:	e8 5b fc ff ff       	call   c0024eec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025291:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025295:	83 c4 20             	add    esp,0x20
c0025298:	83 e0 7f             	and    eax,0x7f
c002529b:	3c 70                	cmp    al,0x70
c002529d:	74 15                	je     c00252b4 <ATAPI::detectMedia()+0x76>
c002529f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252a6:	75 0c                	jne    c00252b4 <ATAPI::detectMedia()+0x76>
c00252a8:	83 ec 0c             	sub    esp,0xc
c00252ab:	53                   	push   ebx
c00252ac:	e8 5f ff ff ff       	call   c0025210 <ATAPI::diskInserted()>
c00252b1:	83 c4 10             	add    esp,0x10
c00252b4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252b8:	83 e0 0f             	and    eax,0xf
c00252bb:	3c 02                	cmp    al,0x2
c00252bd:	75 1b                	jne    c00252da <ATAPI::detectMedia()+0x9c>
c00252bf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252c4:	75 2d                	jne    c00252f3 <ATAPI::detectMedia()+0xb5>
c00252c6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252cd:	74 24                	je     c00252f3 <ATAPI::detectMedia()+0xb5>
c00252cf:	83 ec 0c             	sub    esp,0xc
c00252d2:	53                   	push   ebx
c00252d3:	e8 d4 fe ff ff       	call   c00251ac <ATAPI::diskRemoved()>
c00252d8:	eb 16                	jmp    c00252f0 <ATAPI::detectMedia()+0xb2>
c00252da:	84 c0                	test   al,al
c00252dc:	75 15                	jne    c00252f3 <ATAPI::detectMedia()+0xb5>
c00252de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252e5:	75 0c                	jne    c00252f3 <ATAPI::detectMedia()+0xb5>
c00252e7:	83 ec 0c             	sub    esp,0xc
c00252ea:	53                   	push   ebx
c00252eb:	e8 20 ff ff ff       	call   c0025210 <ATAPI::diskInserted()>
c00252f0:	83 c4 10             	add    esp,0x10
c00252f3:	83 c4 24             	add    esp,0x24
c00252f6:	5b                   	pop    ebx
c00252f7:	5e                   	pop    esi
c00252f8:	c3                   	ret    
c00252f9:	90                   	nop

c00252fa <ATAPI::open(int, int, void*)>:
c00252fa:	53                   	push   ebx
c00252fb:	83 ec 08             	sub    esp,0x8
c00252fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025302:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025306:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002530a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025310:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025316:	c1 e0 06             	shl    eax,0x6
c0025319:	01 d0                	add    eax,edx
c002531b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025322:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025328:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002532f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025339:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002533f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025346:	6a 04                	push   0x4
c0025348:	6a 0c                	push   0xc
c002534a:	51                   	push   ecx
c002534b:	52                   	push   edx
c002534c:	e8 15 e5 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025351:	90                   	nop
c0025352:	90                   	nop
c0025353:	6a 00                	push   0x0
c0025355:	6a 0c                	push   0xc
c0025357:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002535e:	50                   	push   eax
c002535f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025365:	e8 fc e4 ff ff       	call   c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002536a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025371:	83 c4 14             	add    esp,0x14
c0025374:	53                   	push   ebx
c0025375:	e8 c4 fe ff ff       	call   c002523e <ATAPI::detectMedia()>
c002537a:	31 c0                	xor    eax,eax
c002537c:	83 c4 18             	add    esp,0x18
c002537f:	5b                   	pop    ebx
c0025380:	c3                   	ret    
c0025381:	90                   	nop

c0025382 <ATAPI::read(unsigned long long, int, void*)>:
c0025382:	55                   	push   ebp
c0025383:	57                   	push   edi
c0025384:	56                   	push   esi
c0025385:	53                   	push   ebx
c0025386:	83 ec 1c             	sub    esp,0x1c
c0025389:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002538d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025391:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025395:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002539c:	74 41                	je     c00253df <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002539e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253a2:	b9 03 00 00 00       	mov    ecx,0x3
c00253a7:	fc                   	cld    
c00253a8:	31 c0                	xor    eax,eax
c00253aa:	86 fb                	xchg   bl,bh
c00253ac:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253ae:	c1 c3 10             	rol    ebx,0x10
c00253b1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253b6:	89 e8                	mov    eax,ebp
c00253b8:	86 fb                	xchg   bl,bh
c00253ba:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253be:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00253c2:	50                   	push   eax
c00253c3:	50                   	push   eax
c00253c4:	55                   	push   ebp
c00253c5:	c1 e5 0b             	shl    ebp,0xb
c00253c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00253cc:	6a 00                	push   0x0
c00253ce:	55                   	push   ebp
c00253cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253d3:	50                   	push   eax
c00253d4:	56                   	push   esi
c00253d5:	e8 12 fb ff ff       	call   c0024eec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253da:	83 c4 20             	add    esp,0x20
c00253dd:	eb 1a                	jmp    c00253f9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00253df:	83 ec 0c             	sub    esp,0xc
c00253e2:	56                   	push   esi
c00253e3:	e8 56 fe ff ff       	call   c002523e <ATAPI::detectMedia()>
c00253e8:	83 c4 10             	add    esp,0x10
c00253eb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00253f2:	75 aa                	jne    c002539e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00253f4:	b8 02 00 00 00       	mov    eax,0x2
c00253f9:	83 c4 1c             	add    esp,0x1c
c00253fc:	5b                   	pop    ebx
c00253fd:	5e                   	pop    esi
c00253fe:	5f                   	pop    edi
c00253ff:	5d                   	pop    ebp
c0025400:	c3                   	ret    
c0025401:	90                   	nop

c0025402 <SATA::close(int, int, void*)>:
c0025402:	83 ec 0c             	sub    esp,0xc
c0025405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025409:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002540f:	85 c0                	test   eax,eax
c0025411:	74 0c                	je     c002541f <SATA::close(int, int, void*)+0x1d>
c0025413:	83 ec 0c             	sub    esp,0xc
c0025416:	8b 10                	mov    edx,DWORD PTR [eax]
c0025418:	50                   	push   eax
c0025419:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002541c:	83 c4 10             	add    esp,0x10
c002541f:	31 c0                	xor    eax,eax
c0025421:	83 c4 0c             	add    esp,0xc
c0025424:	c3                   	ret    
c0025425:	90                   	nop

c0025426 <SATA::powerSaving(PowerSavingLevel)>:
c0025426:	c3                   	ret    
c0025427:	90                   	nop

c0025428 <SATA::open(int, int, void*)>:
c0025428:	56                   	push   esi
c0025429:	53                   	push   ebx
c002542a:	50                   	push   eax
c002542b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002542f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025433:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002543d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025443:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002544d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025451:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002545b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025461:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025468:	e8 bf aa fe ff       	call   c000ff2c <Phys::allocatePage()>
c002546d:	89 c6                	mov    esi,eax
c002546f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025475:	81 c6 00 10 00 00    	add    esi,0x1000
c002547b:	e8 ac aa fe ff       	call   c000ff2c <Phys::allocatePage()>
c0025480:	39 c6                	cmp    esi,eax
c0025482:	74 10                	je     c0025494 <SATA::open(int, int, void*)+0x6c>
c0025484:	83 ec 0c             	sub    esp,0xc
c0025487:	68 1c d9 02 c0       	push   0xc002d91c
c002548c:	e8 d4 53 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0025491:	83 c4 10             	add    esp,0x10
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	6a 02                	push   0x2
c0025499:	e8 d3 c5 fe ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c002549e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254a4:	6a 03                	push   0x3
c00254a6:	50                   	push   eax
c00254a7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00254ad:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c00254b3:	e8 f0 cd fe ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00254b8:	83 c4 14             	add    esp,0x14
c00254bb:	53                   	push   ebx
c00254bc:	e8 85 f2 fe ff       	call   c0014746 <PhysicalDisk::startCache()>
c00254c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254c4:	e8 5d 15 ff ff       	call   c0016a26 <createPartitionsForDisk(PhysicalDisk*)>
c00254c9:	83 c4 14             	add    esp,0x14
c00254cc:	31 c0                	xor    eax,eax
c00254ce:	5b                   	pop    ebx
c00254cf:	5e                   	pop    esi
c00254d0:	c3                   	ret    
c00254d1:	90                   	nop

c00254d2 <SATA::SATA()>:
c00254d2:	83 ec 0c             	sub    esp,0xc
c00254d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d9:	83 ec 04             	sub    esp,0x4
c00254dc:	68 00 02 00 00       	push   0x200
c00254e1:	68 30 d9 02 c0       	push   0xc002d930
c00254e6:	50                   	push   eax
c00254e7:	e8 f2 f1 fe ff       	call   c00146de <PhysicalDisk::PhysicalDisk(char const*, int)>
c00254ec:	83 c4 10             	add    esp,0x10
c00254ef:	ba a0 d9 02 c0       	mov    edx,0xc002d9a0
c00254f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f8:	89 10                	mov    DWORD PTR [eax],edx
c00254fa:	90                   	nop
c00254fb:	83 c4 0c             	add    esp,0xc
c00254fe:	c3                   	ret    
c00254ff:	90                   	nop

c0025500 <SATA::access(unsigned long long, int, void*, bool)>:
c0025500:	55                   	push   ebp
c0025501:	57                   	push   edi
c0025502:	56                   	push   esi
c0025503:	53                   	push   ebx
c0025504:	83 ec 2c             	sub    esp,0x2c
c0025507:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002550b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002550f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025513:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0025517:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002551b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025520:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025524:	7e 10                	jle    c0025536 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025526:	83 ec 0c             	sub    esp,0xc
c0025529:	68 40 d9 02 c0       	push   0xc002d940
c002552e:	e8 32 53 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0025533:	83 c4 10             	add    esp,0x10
c0025536:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c002553c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025542:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025548:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002554c:	89 f0                	mov    eax,esi
c002554e:	c1 e0 07             	shl    eax,0x7
c0025551:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0025555:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002555f:	53                   	push   ebx
c0025560:	8d 46 02             	lea    eax,[esi+0x2]
c0025563:	53                   	push   ebx
c0025564:	c1 e0 07             	shl    eax,0x7
c0025567:	bb 01 00 00 00       	mov    ebx,0x1
c002556c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0025570:	50                   	push   eax
c0025571:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025577:	e8 ae ef ff ff       	call   c002452a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002557c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025580:	83 c4 10             	add    esp,0x10
c0025583:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0025588:	0f 84 ce 01 00 00    	je     c002575c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002558e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025592:	c1 e0 09             	shl    eax,0x9
c0025595:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c002559a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002559e:	74 17                	je     c00255b7 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c00255a0:	51                   	push   ecx
c00255a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00255a5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00255a9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00255af:	e8 fc b7 fd ff       	call   c0000db0 <realmemcpy>
c00255b4:	83 c4 10             	add    esp,0x10
c00255b7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00255bd:	8d 46 02             	lea    eax,[esi+0x2]
c00255c0:	c1 e0 07             	shl    eax,0x7
c00255c3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00255c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00255cf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00255d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00255d9:	c1 e1 05             	shl    ecx,0x5
c00255dc:	01 c8                	add    eax,ecx
c00255de:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00255e2:	8a 18                	mov    bl,BYTE PTR [eax]
c00255e4:	83 e1 01             	and    ecx,0x1
c00255e7:	83 e3 bf             	and    ebx,0xffffffbf
c00255ea:	c1 e1 06             	shl    ecx,0x6
c00255ed:	09 d9                	or     ecx,ebx
c00255ef:	88 08                	mov    BYTE PTR [eax],cl
c00255f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00255f3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00255f9:	81 c9 05 00 01 00    	or     ecx,0x10005
c00255ff:	89 08                	mov    DWORD PTR [eax],ecx
c0025601:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025607:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002560d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025613:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025616:	52                   	push   edx
c0025617:	68 90 00 00 00       	push   0x90
c002561c:	6a 00                	push   0x0
c002561e:	53                   	push   ebx
c002561f:	e8 48 b1 fd ff       	call   c000076c <memset>
c0025624:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c002562a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c002562e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025634:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025638:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002563c:	83 c4 10             	add    esp,0x10
c002563f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025642:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025648:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002564e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025653:	09 c8                	or     eax,ecx
c0025655:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002565b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002565e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025665:	66 25 00 7f          	and    ax,0x7f00
c0025669:	66 0d 27 80          	or     ax,0x8027
c002566d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0025672:	66 89 03             	mov    WORD PTR [ebx],ax
c0025675:	19 c0                	sbb    eax,eax
c0025677:	83 e0 f0             	and    eax,0xfffffff0
c002567a:	83 c0 35             	add    eax,0x35
c002567d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0025680:	89 f8                	mov    eax,edi
c0025682:	c1 e8 10             	shr    eax,0x10
c0025685:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025688:	89 f8                	mov    eax,edi
c002568a:	c1 e8 18             	shr    eax,0x18
c002568d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0025690:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025694:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025697:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002569b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002569e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00256a2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00256a6:	89 f3                	mov    ebx,esi
c00256a8:	31 c0                	xor    eax,eax
c00256aa:	c1 e3 07             	shl    ebx,0x7
c00256ad:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00256b1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c00256b7:	80 e1 88             	and    cl,0x88
c00256ba:	74 0a                	je     c00256c6 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c00256bc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256c1:	74 0a                	je     c00256cd <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c00256c3:	40                   	inc    eax
c00256c4:	eb eb                	jmp    c00256b1 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c00256c6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256cb:	75 0a                	jne    c00256d7 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c00256cd:	83 ec 0c             	sub    esp,0xc
c00256d0:	68 79 d9 02 c0       	push   0xc002d979
c00256d5:	eb 56                	jmp    c002572d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c00256d7:	b8 01 00 00 00       	mov    eax,0x1
c00256dc:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c00256e0:	c1 e6 07             	shl    esi,0x7
c00256e3:	d3 e0                	shl    eax,cl
c00256e5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00256e9:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00256ef:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c00256f5:	85 c8                	test   eax,ecx
c00256f7:	74 20                	je     c0025719 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c00256f9:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c00256ff:	0f ba e1 1e          	bt     ecx,0x1e
c0025703:	73 ea                	jae    c00256ef <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0025705:	83 ec 0c             	sub    esp,0xc
c0025708:	31 db                	xor    ebx,ebx
c002570a:	68 87 d9 02 c0       	push   0xc002d987
c002570f:	e8 51 51 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0025714:	83 c4 10             	add    esp,0x10
c0025717:	eb 43                	jmp    c002575c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025719:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c002571f:	0f ba e0 1e          	bt     eax,0x1e
c0025723:	73 17                	jae    c002573c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0025725:	83 ec 0c             	sub    esp,0xc
c0025728:	68 87 d9 02 c0       	push   0xc002d987
c002572d:	e8 33 51 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0025732:	bb 01 00 00 00       	mov    ebx,0x1
c0025737:	83 c4 10             	add    esp,0x10
c002573a:	eb 20                	jmp    c002575c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002573c:	31 db                	xor    ebx,ebx
c002573e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0025743:	75 17                	jne    c002575c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025745:	50                   	push   eax
c0025746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002574a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0025750:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0025754:	e8 57 b6 fd ff       	call   c0000db0 <realmemcpy>
c0025759:	83 c4 10             	add    esp,0x10
c002575c:	83 c4 2c             	add    esp,0x2c
c002575f:	89 d8                	mov    eax,ebx
c0025761:	5b                   	pop    ebx
c0025762:	5e                   	pop    esi
c0025763:	5f                   	pop    edi
c0025764:	5d                   	pop    ebp
c0025765:	c3                   	ret    

c0025766 <SATA::read(unsigned long long, int, void*)>:
c0025766:	57                   	push   edi
c0025767:	b8 04 00 00 00       	mov    eax,0x4
c002576c:	56                   	push   esi
c002576d:	53                   	push   ebx
c002576e:	83 ec 10             	sub    esp,0x10
c0025771:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025775:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025779:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002577c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025780:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025784:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002578a:	77 3b                	ja     c00257c7 <SATA::read(unsigned long long, int, void*)+0x61>
c002578c:	b8 06 00 00 00       	mov    eax,0x6
c0025791:	85 d2                	test   edx,edx
c0025793:	74 32                	je     c00257c7 <SATA::read(unsigned long long, int, void*)+0x61>
c0025795:	50                   	push   eax
c0025796:	50                   	push   eax
c0025797:	6a 00                	push   0x0
c0025799:	52                   	push   edx
c002579a:	53                   	push   ebx
c002579b:	57                   	push   edi
c002579c:	56                   	push   esi
c002579d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00257a1:	e8 5a fd ff ff       	call   c0025500 <SATA::access(unsigned long long, int, void*, bool)>
c00257a6:	83 c4 20             	add    esp,0x20
c00257a9:	85 c0                	test   eax,eax
c00257ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00257af:	75 11                	jne    c00257c2 <SATA::read(unsigned long long, int, void*)+0x5c>
c00257b1:	01 1d 28 32 03 c0    	add    DWORD PTR ds:0xc0033228,ebx
c00257b7:	e8 c0 b1 fe ff       	call   c001097c <VgaText::updateDiskUsage()>
c00257bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00257c0:	eb 05                	jmp    c00257c7 <SATA::read(unsigned long long, int, void*)+0x61>
c00257c2:	b8 01 00 00 00       	mov    eax,0x1
c00257c7:	83 c4 10             	add    esp,0x10
c00257ca:	5b                   	pop    ebx
c00257cb:	5e                   	pop    esi
c00257cc:	5f                   	pop    edi
c00257cd:	c3                   	ret    

c00257ce <SATA::write(unsigned long long, int, void*)>:
c00257ce:	55                   	push   ebp
c00257cf:	b8 04 00 00 00       	mov    eax,0x4
c00257d4:	57                   	push   edi
c00257d5:	56                   	push   esi
c00257d6:	53                   	push   ebx
c00257d7:	83 ec 1c             	sub    esp,0x1c
c00257da:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00257de:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00257e2:	8d 75 ff             	lea    esi,[ebp-0x1]
c00257e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00257e9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00257ed:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00257f3:	77 56                	ja     c002584b <SATA::write(unsigned long long, int, void*)+0x7d>
c00257f5:	b8 06 00 00 00       	mov    eax,0x6
c00257fa:	85 ff                	test   edi,edi
c00257fc:	74 4d                	je     c002584b <SATA::write(unsigned long long, int, void*)+0x7d>
c00257fe:	89 ee                	mov    esi,ebp
c0025800:	c1 e6 09             	shl    esi,0x9
c0025803:	01 fe                	add    esi,edi
c0025805:	89 c8                	mov    eax,ecx
c0025807:	89 da                	mov    edx,ebx
c0025809:	83 c0 01             	add    eax,0x1
c002580c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025810:	83 d2 00             	adc    edx,0x0
c0025813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025817:	50                   	push   eax
c0025818:	50                   	push   eax
c0025819:	6a 01                	push   0x1
c002581b:	57                   	push   edi
c002581c:	81 c7 00 02 00 00    	add    edi,0x200
c0025822:	6a 01                	push   0x1
c0025824:	53                   	push   ebx
c0025825:	51                   	push   ecx
c0025826:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002582a:	e8 d1 fc ff ff       	call   c0025500 <SATA::access(unsigned long long, int, void*, bool)>
c002582f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025833:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025837:	83 c4 20             	add    esp,0x20
c002583a:	39 f7                	cmp    edi,esi
c002583c:	75 c7                	jne    c0025805 <SATA::write(unsigned long long, int, void*)+0x37>
c002583e:	01 2d 24 32 03 c0    	add    DWORD PTR ds:0xc0033224,ebp
c0025844:	e8 33 b1 fe ff       	call   c001097c <VgaText::updateDiskUsage()>
c0025849:	31 c0                	xor    eax,eax
c002584b:	83 c4 1c             	add    esp,0x1c
c002584e:	5b                   	pop    ebx
c002584f:	5e                   	pop    esi
c0025850:	5f                   	pop    edi
c0025851:	5d                   	pop    ebp
c0025852:	c3                   	ret    
c0025853:	90                   	nop

c0025854 <SATAPI::write(unsigned long long, int, void*)>:
c0025854:	b8 03 00 00 00       	mov    eax,0x3
c0025859:	c3                   	ret    

c002585a <SATAPI::close(int, int, void*)>:
c002585a:	83 ec 0c             	sub    esp,0xc
c002585d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025861:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025867:	85 c0                	test   eax,eax
c0025869:	74 0c                	je     c0025877 <SATAPI::close(int, int, void*)+0x1d>
c002586b:	83 ec 0c             	sub    esp,0xc
c002586e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025870:	50                   	push   eax
c0025871:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025874:	83 c4 10             	add    esp,0x10
c0025877:	31 c0                	xor    eax,eax
c0025879:	83 c4 0c             	add    esp,0xc
c002587c:	c3                   	ret    
c002587d:	90                   	nop

c002587e <SATAPI::SATAPI()>:
c002587e:	83 ec 0c             	sub    esp,0xc
c0025881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025885:	83 ec 04             	sub    esp,0x4
c0025888:	68 00 08 00 00       	push   0x800
c002588d:	68 d0 d9 02 c0       	push   0xc002d9d0
c0025892:	50                   	push   eax
c0025893:	e8 46 ee fe ff       	call   c00146de <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025898:	83 c4 10             	add    esp,0x10
c002589b:	ba 7c da 02 c0       	mov    edx,0xc002da7c
c00258a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258a4:	89 10                	mov    DWORD PTR [eax],edx
c00258a6:	90                   	nop
c00258a7:	83 c4 0c             	add    esp,0xc
c00258aa:	c3                   	ret    
c00258ab:	90                   	nop

c00258ac <SATAPI::diskRemoved()>:
c00258ac:	83 ec 18             	sub    esp,0x18
c00258af:	68 dc d9 02 c0       	push   0xc002d9dc
c00258b4:	e8 be d5 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00258b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258bd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00258c4:	83 c4 1c             	add    esp,0x1c
c00258c7:	c3                   	ret    

c00258c8 <SATAPI::diskInserted()>:
c00258c8:	53                   	push   ebx
c00258c9:	83 ec 14             	sub    esp,0x14
c00258cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00258d0:	68 f3 d9 02 c0       	push   0xc002d9f3
c00258d5:	e8 9d d5 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00258da:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00258e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00258e4:	e8 5d ee fe ff       	call   c0014746 <PhysicalDisk::startCache()>
c00258e9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00258ed:	83 c4 18             	add    esp,0x18
c00258f0:	5b                   	pop    ebx
c00258f1:	e9 30 11 ff ff       	jmp    c0016a26 <createPartitionsForDisk(PhysicalDisk*)>

c00258f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00258f6:	55                   	push   ebp
c00258f7:	57                   	push   edi
c00258f8:	56                   	push   esi
c00258f9:	53                   	push   ebx
c00258fa:	83 ec 24             	sub    esp,0x24
c00258fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025901:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025905:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002590b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002590f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025913:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025919:	8d 5f 02             	lea    ebx,[edi+0x2]
c002591c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025922:	c1 e3 07             	shl    ebx,0x7
c0025925:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025929:	89 f8                	mov    eax,edi
c002592b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002592f:	c1 e0 07             	shl    eax,0x7
c0025932:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025936:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002593a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025944:	53                   	push   ebx
c0025945:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002594b:	e8 da eb ff ff       	call   c002452a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025950:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025954:	83 c4 10             	add    esp,0x10
c0025957:	b8 01 00 00 00       	mov    eax,0x1
c002595c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025961:	0f 84 8a 01 00 00    	je     c0025af1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025967:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002596d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002596f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025975:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002597b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002597f:	c1 e1 05             	shl    ecx,0x5
c0025982:	01 c8                	add    eax,ecx
c0025984:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025986:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002598c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025992:	89 08                	mov    DWORD PTR [eax],ecx
c0025994:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002599a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00259a0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00259a6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00259a9:	52                   	push   edx
c00259aa:	68 90 00 00 00       	push   0x90
c00259af:	6a 00                	push   0x0
c00259b1:	53                   	push   ebx
c00259b2:	e8 b5 ad fd ff       	call   c000076c <memset>
c00259b7:	83 c4 0c             	add    esp,0xc
c00259ba:	8d 43 40             	lea    eax,[ebx+0x40]
c00259bd:	6a 0c                	push   0xc
c00259bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00259c3:	50                   	push   eax
c00259c4:	e8 e7 b3 fd ff       	call   c0000db0 <realmemcpy>
c00259c9:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00259cf:	89 ea                	mov    edx,ebp
c00259d1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00259d7:	c1 ea 18             	shr    edx,0x18
c00259da:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00259de:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00259e1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00259e4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00259e8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00259ee:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00259f4:	25 00 00 c0 ff       	and    eax,0xffc00000
c00259f9:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00259fd:	09 c8                	or     eax,ecx
c00259ff:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025a03:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025a09:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025a0c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025a13:	66 25 00 7f          	and    ax,0x7f00
c0025a17:	66 0d 27 80          	or     ax,0x8027
c0025a1b:	66 89 03             	mov    WORD PTR [ebx],ax
c0025a1e:	89 e8                	mov    eax,ebp
c0025a20:	c1 e8 10             	shr    eax,0x10
c0025a23:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025a26:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025a2a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025a2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a31:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025a34:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025a38:	83 c4 10             	add    esp,0x10
c0025a3b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025a3f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a43:	31 c0                	xor    eax,eax
c0025a45:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025a4b:	80 e1 88             	and    cl,0x88
c0025a4e:	74 0a                	je     c0025a5a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025a50:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a55:	74 0a                	je     c0025a61 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025a57:	40                   	inc    eax
c0025a58:	eb eb                	jmp    c0025a45 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025a5a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a5f:	75 0f                	jne    c0025a70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025a61:	83 ec 0c             	sub    esp,0xc
c0025a64:	68 79 d9 02 c0       	push   0xc002d979
c0025a69:	e8 f7 4d ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0025a6e:	eb 3a                	jmp    c0025aaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025a70:	b8 01 00 00 00       	mov    eax,0x1
c0025a75:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025a79:	c1 e7 07             	shl    edi,0x7
c0025a7c:	d3 e0                	shl    eax,cl
c0025a7e:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025a81:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025a87:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025a8d:	85 d0                	test   eax,edx
c0025a8f:	74 23                	je     c0025ab4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025a91:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025a97:	0f ba e2 1e          	bt     edx,0x1e
c0025a9b:	73 ea                	jae    c0025a87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025a9d:	83 ec 0c             	sub    esp,0xc
c0025aa0:	68 0b da 02 c0       	push   0xc002da0b
c0025aa5:	e8 cd d3 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0025aaa:	83 c4 10             	add    esp,0x10
c0025aad:	b8 01 00 00 00       	mov    eax,0x1
c0025ab2:	eb 3d                	jmp    c0025af1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025ab4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025aba:	0f ba e0 1e          	bt     eax,0x1e
c0025abe:	73 0a                	jae    c0025aca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025ac0:	83 ec 0c             	sub    esp,0xc
c0025ac3:	68 1e da 02 c0       	push   0xc002da1e
c0025ac8:	eb db                	jmp    c0025aa5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025aca:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025acf:	74 1e                	je     c0025aef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025ad1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025ad6:	74 17                	je     c0025aef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025ad8:	50                   	push   eax
c0025ad9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025add:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025ae3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025ae7:	e8 c4 b2 fd ff       	call   c0000db0 <realmemcpy>
c0025aec:	83 c4 10             	add    esp,0x10
c0025aef:	31 c0                	xor    eax,eax
c0025af1:	83 c4 1c             	add    esp,0x1c
c0025af4:	5b                   	pop    ebx
c0025af5:	5e                   	pop    esi
c0025af6:	5f                   	pop    edi
c0025af7:	5d                   	pop    ebp
c0025af8:	c3                   	ret    
c0025af9:	90                   	nop

c0025afa <SATAPI::eject()>:
c0025afa:	57                   	push   edi
c0025afb:	b9 03 00 00 00       	mov    ecx,0x3
c0025b00:	53                   	push   ebx
c0025b01:	83 ec 14             	sub    esp,0x14
c0025b04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025b08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025b0c:	fc                   	cld    
c0025b0d:	31 c0                	xor    eax,eax
c0025b0f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025b11:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025b16:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025b1b:	50                   	push   eax
c0025b1c:	6a 00                	push   0x0
c0025b1e:	6a 00                	push   0x0
c0025b20:	6a 00                	push   0x0
c0025b22:	6a 00                	push   0x0
c0025b24:	6a 02                	push   0x2
c0025b26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025b2a:	50                   	push   eax
c0025b2b:	53                   	push   ebx
c0025b2c:	e8 c5 fd ff ff       	call   c00258f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b31:	83 c4 14             	add    esp,0x14
c0025b34:	53                   	push   ebx
c0025b35:	e8 72 fd ff ff       	call   c00258ac <SATAPI::diskRemoved()>
c0025b3a:	83 c4 24             	add    esp,0x24
c0025b3d:	31 c0                	xor    eax,eax
c0025b3f:	5b                   	pop    ebx
c0025b40:	5f                   	pop    edi
c0025b41:	c3                   	ret    

c0025b42 <SATAPI::detectMedia()>:
c0025b42:	56                   	push   esi
c0025b43:	53                   	push   ebx
c0025b44:	83 ec 28             	sub    esp,0x28
c0025b47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b4b:	6a 0c                	push   0xc
c0025b4d:	6a 00                	push   0x0
c0025b4f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025b53:	56                   	push   esi
c0025b54:	e8 13 ac fd ff       	call   c000076c <memset>
c0025b59:	83 c4 0c             	add    esp,0xc
c0025b5c:	6a 00                	push   0x0
c0025b5e:	6a 00                	push   0x0
c0025b60:	6a 00                	push   0x0
c0025b62:	6a 00                	push   0x0
c0025b64:	6a 00                	push   0x0
c0025b66:	56                   	push   esi
c0025b67:	53                   	push   ebx
c0025b68:	e8 89 fd ff ff       	call   c00258f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b6d:	83 c4 1c             	add    esp,0x1c
c0025b70:	6a 0c                	push   0xc
c0025b72:	6a 00                	push   0x0
c0025b74:	56                   	push   esi
c0025b75:	e8 f2 ab fd ff       	call   c000076c <memset>
c0025b7a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b7f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b84:	83 c4 0c             	add    esp,0xc
c0025b87:	6a 01                	push   0x1
c0025b89:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b8d:	50                   	push   eax
c0025b8e:	6a 00                	push   0x0
c0025b90:	6a 00                	push   0x0
c0025b92:	6a 12                	push   0x12
c0025b94:	56                   	push   esi
c0025b95:	53                   	push   ebx
c0025b96:	e8 5b fd ff ff       	call   c00258f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b9b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b9f:	83 c4 20             	add    esp,0x20
c0025ba2:	83 e0 7f             	and    eax,0x7f
c0025ba5:	3c 70                	cmp    al,0x70
c0025ba7:	74 15                	je     c0025bbe <SATAPI::detectMedia()+0x7c>
c0025ba9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bb0:	75 0c                	jne    c0025bbe <SATAPI::detectMedia()+0x7c>
c0025bb2:	83 ec 0c             	sub    esp,0xc
c0025bb5:	53                   	push   ebx
c0025bb6:	e8 0d fd ff ff       	call   c00258c8 <SATAPI::diskInserted()>
c0025bbb:	83 c4 10             	add    esp,0x10
c0025bbe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025bc2:	83 e0 0f             	and    eax,0xf
c0025bc5:	3c 02                	cmp    al,0x2
c0025bc7:	75 1b                	jne    c0025be4 <SATAPI::detectMedia()+0xa2>
c0025bc9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025bce:	75 2d                	jne    c0025bfd <SATAPI::detectMedia()+0xbb>
c0025bd0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bd7:	74 24                	je     c0025bfd <SATAPI::detectMedia()+0xbb>
c0025bd9:	83 ec 0c             	sub    esp,0xc
c0025bdc:	53                   	push   ebx
c0025bdd:	e8 ca fc ff ff       	call   c00258ac <SATAPI::diskRemoved()>
c0025be2:	eb 16                	jmp    c0025bfa <SATAPI::detectMedia()+0xb8>
c0025be4:	84 c0                	test   al,al
c0025be6:	75 15                	jne    c0025bfd <SATAPI::detectMedia()+0xbb>
c0025be8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bef:	75 0c                	jne    c0025bfd <SATAPI::detectMedia()+0xbb>
c0025bf1:	83 ec 0c             	sub    esp,0xc
c0025bf4:	53                   	push   ebx
c0025bf5:	e8 ce fc ff ff       	call   c00258c8 <SATAPI::diskInserted()>
c0025bfa:	83 c4 10             	add    esp,0x10
c0025bfd:	83 c4 24             	add    esp,0x24
c0025c00:	5b                   	pop    ebx
c0025c01:	5e                   	pop    esi
c0025c02:	c3                   	ret    
c0025c03:	90                   	nop

c0025c04 <SATAPI::open(int, int, void*)>:
c0025c04:	56                   	push   esi
c0025c05:	53                   	push   ebx
c0025c06:	50                   	push   eax
c0025c07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025c0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c0f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025c19:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025c1f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025c29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c2d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025c37:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025c3d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025c44:	e8 e3 a2 fe ff       	call   c000ff2c <Phys::allocatePage()>
c0025c49:	89 c6                	mov    esi,eax
c0025c4b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025c51:	81 c6 00 10 00 00    	add    esi,0x1000
c0025c57:	e8 d0 a2 fe ff       	call   c000ff2c <Phys::allocatePage()>
c0025c5c:	39 c6                	cmp    esi,eax
c0025c5e:	74 10                	je     c0025c70 <SATAPI::open(int, int, void*)+0x6c>
c0025c60:	83 ec 0c             	sub    esp,0xc
c0025c63:	68 33 da 02 c0       	push   0xc002da33
c0025c68:	e8 f8 4b ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0025c6d:	83 c4 10             	add    esp,0x10
c0025c70:	83 ec 0c             	sub    esp,0xc
c0025c73:	6a 02                	push   0x2
c0025c75:	e8 f7 bd fe ff       	call   c0011a71 <Virt::allocateKernelVirtualPages(int)>
c0025c7a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c80:	6a 03                	push   0x3
c0025c82:	50                   	push   eax
c0025c83:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c89:	ff 35 50 f0 02 c0    	push   DWORD PTR ds:0xc002f050
c0025c8f:	e8 14 c6 fe ff       	call   c00122a8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c94:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c9b:	83 c4 14             	add    esp,0x14
c0025c9e:	53                   	push   ebx
c0025c9f:	e8 9e fe ff ff       	call   c0025b42 <SATAPI::detectMedia()>
c0025ca4:	83 c4 14             	add    esp,0x14
c0025ca7:	31 c0                	xor    eax,eax
c0025ca9:	5b                   	pop    ebx
c0025caa:	5e                   	pop    esi
c0025cab:	c3                   	ret    

c0025cac <SATAPI::read(unsigned long long, int, void*)>:
c0025cac:	55                   	push   ebp
c0025cad:	57                   	push   edi
c0025cae:	56                   	push   esi
c0025caf:	53                   	push   ebx
c0025cb0:	83 ec 1c             	sub    esp,0x1c
c0025cb3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025cb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025cbb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025cbf:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025cc6:	74 19                	je     c0025ce1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025cc8:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025ccd:	7e 2e                	jle    c0025cfd <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025ccf:	83 ec 0c             	sub    esp,0xc
c0025cd2:	68 49 da 02 c0       	push   0xc002da49
c0025cd7:	e8 89 4b ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0025cdc:	83 c4 10             	add    esp,0x10
c0025cdf:	eb 1c                	jmp    c0025cfd <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025ce1:	83 ec 0c             	sub    esp,0xc
c0025ce4:	55                   	push   ebp
c0025ce5:	e8 58 fe ff ff       	call   c0025b42 <SATAPI::detectMedia()>
c0025cea:	83 c4 10             	add    esp,0x10
c0025ced:	b8 02 00 00 00       	mov    eax,0x2
c0025cf2:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025cf9:	75 cd                	jne    c0025cc8 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025cfb:	eb 49                	jmp    c0025d46 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025cfd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025d01:	b9 03 00 00 00       	mov    ecx,0x3
c0025d06:	fc                   	cld    
c0025d07:	31 c0                	xor    eax,eax
c0025d09:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025d0b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025d10:	89 d8                	mov    eax,ebx
c0025d12:	86 e0                	xchg   al,ah
c0025d14:	c1 c0 10             	rol    eax,0x10
c0025d17:	86 e0                	xchg   al,ah
c0025d19:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025d1d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025d21:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025d25:	50                   	push   eax
c0025d26:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025d2a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d2e:	56                   	push   esi
c0025d2f:	53                   	push   ebx
c0025d30:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025d34:	c1 e0 0b             	shl    eax,0xb
c0025d37:	50                   	push   eax
c0025d38:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d3c:	50                   	push   eax
c0025d3d:	55                   	push   ebp
c0025d3e:	e8 b3 fb ff ff       	call   c00258f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d43:	83 c4 20             	add    esp,0x20
c0025d46:	83 c4 1c             	add    esp,0x1c
c0025d49:	5b                   	pop    ebx
c0025d4a:	5e                   	pop    esi
c0025d4b:	5f                   	pop    edi
c0025d4c:	5d                   	pop    ebp
c0025d4d:	c3                   	ret    

c0025d4e <AVX::open(int, int, void*)>:
c0025d4e:	83 ec 0c             	sub    esp,0xc
c0025d51:	e8 42 11 00 00       	call   c0026e98 <avxInit>
c0025d56:	b8 00 00 00 00       	mov    eax,0x0
c0025d5b:	83 c4 0c             	add    esp,0xc
c0025d5e:	c3                   	ret    
c0025d5f:	90                   	nop

c0025d60 <AVX::close(int, int, void*)>:
c0025d60:	83 ec 0c             	sub    esp,0xc
c0025d63:	e8 31 11 00 00       	call   c0026e99 <avxClose>
c0025d68:	b8 00 00 00 00       	mov    eax,0x0
c0025d6d:	83 c4 0c             	add    esp,0xc
c0025d70:	c3                   	ret    
c0025d71:	90                   	nop

c0025d72 <AVX::available()>:
c0025d72:	83 ec 0c             	sub    esp,0xc
c0025d75:	e8 16 11 00 00       	call   c0026e90 <avxDetect>
c0025d7a:	85 c0                	test   eax,eax
c0025d7c:	0f 95 c0             	setne  al
c0025d7f:	83 c4 0c             	add    esp,0xc
c0025d82:	c3                   	ret    
c0025d83:	90                   	nop

c0025d84 <AVX::save(void*)>:
c0025d84:	83 ec 0c             	sub    esp,0xc
c0025d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d8b:	83 ec 0c             	sub    esp,0xc
c0025d8e:	50                   	push   eax
c0025d8f:	e8 02 11 00 00       	call   c0026e96 <avxSave>
c0025d94:	83 c4 10             	add    esp,0x10
c0025d97:	90                   	nop
c0025d98:	83 c4 0c             	add    esp,0xc
c0025d9b:	c3                   	ret    

c0025d9c <AVX::load(void*)>:
c0025d9c:	83 ec 0c             	sub    esp,0xc
c0025d9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025da3:	83 ec 0c             	sub    esp,0xc
c0025da6:	50                   	push   eax
c0025da7:	e8 eb 10 00 00       	call   c0026e97 <avxLoad>
c0025dac:	83 c4 10             	add    esp,0x10
c0025daf:	90                   	nop
c0025db0:	83 c4 0c             	add    esp,0xc
c0025db3:	c3                   	ret    

c0025db4 <AVX::AVX()>:
c0025db4:	83 ec 0c             	sub    esp,0xc
c0025db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dbb:	83 ec 08             	sub    esp,0x8
c0025dbe:	68 ac da 02 c0       	push   0xc002daac
c0025dc3:	50                   	push   eax
c0025dc4:	e8 f3 e9 fe ff       	call   c00147bc <FPU::FPU(char const*)>
c0025dc9:	83 c4 10             	add    esp,0x10
c0025dcc:	ba bc da 02 c0       	mov    edx,0xc002dabc
c0025dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd5:	89 10                	mov    DWORD PTR [eax],edx
c0025dd7:	90                   	nop
c0025dd8:	83 c4 0c             	add    esp,0xc
c0025ddb:	c3                   	ret    

c0025ddc <MMX::available()>:
c0025ddc:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0025de1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025de7:	83 e0 20             	and    eax,0x20
c0025dea:	84 c0                	test   al,al
c0025dec:	0f 95 c0             	setne  al
c0025def:	c3                   	ret    

c0025df0 <MMX::open(int, int, void*)>:
c0025df0:	83 ec 0c             	sub    esp,0xc
c0025df3:	e8 2a 11 00 00       	call   c0026f22 <x87Init>
c0025df8:	b8 00 00 00 00       	mov    eax,0x0
c0025dfd:	83 c4 0c             	add    esp,0xc
c0025e00:	c3                   	ret    
c0025e01:	90                   	nop

c0025e02 <MMX::close(int, int, void*)>:
c0025e02:	83 ec 0c             	sub    esp,0xc
c0025e05:	e8 32 11 00 00       	call   c0026f3c <x87Close>
c0025e0a:	b8 00 00 00 00       	mov    eax,0x0
c0025e0f:	83 c4 0c             	add    esp,0xc
c0025e12:	c3                   	ret    
c0025e13:	90                   	nop

c0025e14 <MMX::save(void*)>:
c0025e14:	83 ec 0c             	sub    esp,0xc
c0025e17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e1b:	83 ec 0c             	sub    esp,0xc
c0025e1e:	50                   	push   eax
c0025e1f:	e8 ed 10 00 00       	call   c0026f11 <x87Save>
c0025e24:	83 c4 10             	add    esp,0x10
c0025e27:	90                   	nop
c0025e28:	83 c4 0c             	add    esp,0xc
c0025e2b:	c3                   	ret    

c0025e2c <MMX::load(void*)>:
c0025e2c:	83 ec 0c             	sub    esp,0xc
c0025e2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e33:	83 ec 0c             	sub    esp,0xc
c0025e36:	50                   	push   eax
c0025e37:	e8 de 10 00 00       	call   c0026f1a <x87Load>
c0025e3c:	83 c4 10             	add    esp,0x10
c0025e3f:	90                   	nop
c0025e40:	83 c4 0c             	add    esp,0xc
c0025e43:	c3                   	ret    

c0025e44 <MMX::MMX()>:
c0025e44:	83 ec 0c             	sub    esp,0xc
c0025e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4b:	83 ec 08             	sub    esp,0x8
c0025e4e:	68 ec da 02 c0       	push   0xc002daec
c0025e53:	50                   	push   eax
c0025e54:	e8 63 e9 fe ff       	call   c00147bc <FPU::FPU(char const*)>
c0025e59:	83 c4 10             	add    esp,0x10
c0025e5c:	ba fc da 02 c0       	mov    edx,0xc002dafc
c0025e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e65:	89 10                	mov    DWORD PTR [eax],edx
c0025e67:	90                   	nop
c0025e68:	83 c4 0c             	add    esp,0xc
c0025e6b:	c3                   	ret    

c0025e6c <SSE::open(int, int, void*)>:
c0025e6c:	83 ec 0c             	sub    esp,0xc
c0025e6f:	e8 60 10 00 00       	call   c0026ed4 <sseInit>
c0025e74:	b8 00 00 00 00       	mov    eax,0x0
c0025e79:	83 c4 0c             	add    esp,0xc
c0025e7c:	c3                   	ret    
c0025e7d:	90                   	nop

c0025e7e <SSE::close(int, int, void*)>:
c0025e7e:	83 ec 0c             	sub    esp,0xc
c0025e81:	e8 5e 10 00 00       	call   c0026ee4 <sseClose>
c0025e86:	b8 00 00 00 00       	mov    eax,0x0
c0025e8b:	83 c4 0c             	add    esp,0xc
c0025e8e:	c3                   	ret    
c0025e8f:	90                   	nop

c0025e90 <SSE::available()>:
c0025e90:	83 ec 1c             	sub    esp,0x1c
c0025e93:	e8 18 10 00 00       	call   c0026eb0 <absolutelyNoChanceInHell>
c0025e98:	85 c0                	test   eax,eax
c0025e9a:	0f 95 c0             	setne  al
c0025e9d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025ea1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025ea5:	83 c4 1c             	add    esp,0x1c
c0025ea8:	c3                   	ret    
c0025ea9:	90                   	nop

c0025eaa <SSE::save(void*)>:
c0025eaa:	83 ec 0c             	sub    esp,0xc
c0025ead:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025eb1:	83 ec 0c             	sub    esp,0xc
c0025eb4:	50                   	push   eax
c0025eb5:	e8 0e 10 00 00       	call   c0026ec8 <sseSave>
c0025eba:	83 c4 10             	add    esp,0x10
c0025ebd:	90                   	nop
c0025ebe:	83 c4 0c             	add    esp,0xc
c0025ec1:	c3                   	ret    

c0025ec2 <SSE::load(void*)>:
c0025ec2:	83 ec 0c             	sub    esp,0xc
c0025ec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ec9:	83 ec 0c             	sub    esp,0xc
c0025ecc:	50                   	push   eax
c0025ecd:	e8 fc 0f 00 00       	call   c0026ece <sseLoad>
c0025ed2:	83 c4 10             	add    esp,0x10
c0025ed5:	90                   	nop
c0025ed6:	83 c4 0c             	add    esp,0xc
c0025ed9:	c3                   	ret    

c0025eda <SSE::SSE()>:
c0025eda:	83 ec 0c             	sub    esp,0xc
c0025edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee1:	83 ec 08             	sub    esp,0x8
c0025ee4:	68 2c db 02 c0       	push   0xc002db2c
c0025ee9:	50                   	push   eax
c0025eea:	e8 cd e8 fe ff       	call   c00147bc <FPU::FPU(char const*)>
c0025eef:	83 c4 10             	add    esp,0x10
c0025ef2:	ba 3c db 02 c0       	mov    edx,0xc002db3c
c0025ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efb:	89 10                	mov    DWORD PTR [eax],edx
c0025efd:	90                   	nop
c0025efe:	83 c4 0c             	add    esp,0xc
c0025f01:	c3                   	ret    

c0025f02 <x87::open(int, int, void*)>:
c0025f02:	83 ec 0c             	sub    esp,0xc
c0025f05:	e8 18 10 00 00       	call   c0026f22 <x87Init>
c0025f0a:	b8 00 00 00 00       	mov    eax,0x0
c0025f0f:	83 c4 0c             	add    esp,0xc
c0025f12:	c3                   	ret    
c0025f13:	90                   	nop

c0025f14 <x87::close(int, int, void*)>:
c0025f14:	83 ec 0c             	sub    esp,0xc
c0025f17:	e8 20 10 00 00       	call   c0026f3c <x87Close>
c0025f1c:	b8 00 00 00 00       	mov    eax,0x0
c0025f21:	83 c4 0c             	add    esp,0xc
c0025f24:	c3                   	ret    
c0025f25:	90                   	nop

c0025f26 <x87::available()>:
c0025f26:	83 ec 0c             	sub    esp,0xc
c0025f29:	e8 c8 0f 00 00       	call   c0026ef6 <x87Detect>
c0025f2e:	85 c0                	test   eax,eax
c0025f30:	0f 95 c0             	setne  al
c0025f33:	83 c4 0c             	add    esp,0xc
c0025f36:	c3                   	ret    
c0025f37:	90                   	nop

c0025f38 <x87::save(void*)>:
c0025f38:	83 ec 0c             	sub    esp,0xc
c0025f3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f3f:	83 ec 0c             	sub    esp,0xc
c0025f42:	50                   	push   eax
c0025f43:	e8 c9 0f 00 00       	call   c0026f11 <x87Save>
c0025f48:	83 c4 10             	add    esp,0x10
c0025f4b:	90                   	nop
c0025f4c:	83 c4 0c             	add    esp,0xc
c0025f4f:	c3                   	ret    

c0025f50 <x87::load(void*)>:
c0025f50:	83 ec 0c             	sub    esp,0xc
c0025f53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f57:	83 ec 0c             	sub    esp,0xc
c0025f5a:	50                   	push   eax
c0025f5b:	e8 ba 0f 00 00       	call   c0026f1a <x87Load>
c0025f60:	83 c4 10             	add    esp,0x10
c0025f63:	90                   	nop
c0025f64:	83 c4 0c             	add    esp,0xc
c0025f67:	c3                   	ret    

c0025f68 <x87::x87()>:
c0025f68:	83 ec 0c             	sub    esp,0xc
c0025f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6f:	83 ec 08             	sub    esp,0x8
c0025f72:	68 6c db 02 c0       	push   0xc002db6c
c0025f77:	50                   	push   eax
c0025f78:	e8 3f e8 fe ff       	call   c00147bc <FPU::FPU(char const*)>
c0025f7d:	83 c4 10             	add    esp,0x10
c0025f80:	ba 7c db 02 c0       	mov    edx,0xc002db7c
c0025f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f89:	89 10                	mov    DWORD PTR [eax],edx
c0025f8b:	90                   	nop
c0025f8c:	83 c4 0c             	add    esp,0xc
c0025f8f:	c3                   	ret    

c0025f90 <APIC::disable()>:
c0025f90:	90                   	nop
c0025f91:	c3                   	ret    

c0025f92 <APIC::close(int, int, void*)>:
c0025f92:	55                   	push   ebp
c0025f93:	89 e5                	mov    ebp,esp
c0025f95:	83 ec 08             	sub    esp,0x8
c0025f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f9d:	83 c0 3c             	add    eax,0x3c
c0025fa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fa2:	83 ec 0c             	sub    esp,0xc
c0025fa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa8:	ff d0                	call   eax
c0025faa:	83 c4 10             	add    esp,0x10
c0025fad:	b8 00 00 00 00       	mov    eax,0x0
c0025fb2:	c9                   	leave  
c0025fb3:	c3                   	ret    

c0025fb4 <IOAPIC::close(int, int, void*)>:
c0025fb4:	b8 00 00 00 00       	mov    eax,0x0
c0025fb9:	c3                   	ret    

c0025fba <APIC::io_wait()>:
c0025fba:	eb 00                	jmp    c0025fbc <APIC::io_wait()+0x2>
c0025fbc:	eb 00                	jmp    c0025fbe <APIC::io_wait()+0x4>
c0025fbe:	90                   	nop
c0025fbf:	c3                   	ret    

c0025fc0 <APIC::getBase()>:
c0025fc0:	55                   	push   ebp
c0025fc1:	89 e5                	mov    ebp,esp
c0025fc3:	83 ec 18             	sub    esp,0x18
c0025fc6:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0025fcb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025fd1:	83 e0 08             	and    eax,0x8
c0025fd4:	84 c0                	test   al,al
c0025fd6:	75 07                	jne    c0025fdf <APIC::getBase()+0x1f>
c0025fd8:	b8 00 00 00 00       	mov    eax,0x0
c0025fdd:	eb 21                	jmp    c0026000 <APIC::getBase()+0x40>
c0025fdf:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0025fe4:	83 ec 08             	sub    esp,0x8
c0025fe7:	6a 1b                	push   0x1b
c0025fe9:	50                   	push   eax
c0025fea:	e8 77 8e fe ff       	call   c000ee66 <Computer::rdmsr(unsigned int)>
c0025fef:	83 c4 10             	add    esp,0x10
c0025ff2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ff5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ff8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ffb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0026000:	c9                   	leave  
c0026001:	c3                   	ret    

c0026002 <APIC::eoi(unsigned char)>:
c0026002:	55                   	push   ebp
c0026003:	89 e5                	mov    ebp,esp
c0026005:	83 ec 28             	sub    esp,0x28
c0026008:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002600b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002600e:	83 ec 0c             	sub    esp,0xc
c0026011:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026014:	e8 a7 ff ff ff       	call   c0025fc0 <APIC::getBase()>
c0026019:	83 c4 10             	add    esp,0x10
c002601c:	05 b0 00 00 00       	add    eax,0xb0
c0026021:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026024:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026027:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002602d:	90                   	nop
c002602e:	c9                   	leave  
c002602f:	c3                   	ret    

c0026030 <APIC::open(int, int, void*)>:
c0026030:	55                   	push   ebp
c0026031:	89 e5                	mov    ebp,esp
c0026033:	57                   	push   edi
c0026034:	56                   	push   esi
c0026035:	53                   	push   ebx
c0026036:	83 ec 2c             	sub    esp,0x2c
c0026039:	83 ec 0c             	sub    esp,0xc
c002603c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002603f:	e8 7c ff ff ff       	call   c0025fc0 <APIC::getBase()>
c0026044:	83 c4 10             	add    esp,0x10
c0026047:	89 c2                	mov    edx,eax
c0026049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002604c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026052:	0f b6 f8             	movzx  edi,al
c0026055:	89 d0                	mov    eax,edx
c0026057:	ba 00 00 00 00       	mov    edx,0x0
c002605c:	89 c1                	mov    ecx,eax
c002605e:	80 e5 ff             	and    ch,0xff
c0026061:	89 cb                	mov    ebx,ecx
c0026063:	0f b6 f2             	movzx  esi,dl
c0026066:	89 d8                	mov    eax,ebx
c0026068:	89 f2                	mov    edx,esi
c002606a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002606d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026070:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026074:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026078:	83 e0 00             	and    eax,0x0
c002607b:	09 d0                	or     eax,edx
c002607d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026084:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002608a:	8d 50 01             	lea    edx,[eax+0x1]
c002608d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026090:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026096:	0f b6 d0             	movzx  edx,al
c0026099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002609c:	83 c2 08             	add    edx,0x8
c002609f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00260a3:	0f b6 c9             	movzx  ecx,cl
c00260a6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00260ac:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00260b0:	83 ec 0c             	sub    esp,0xc
c00260b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b6:	e8 05 ff ff ff       	call   c0025fc0 <APIC::getBase()>
c00260bb:	83 c4 10             	add    esp,0x10
c00260be:	05 f0 00 00 00       	add    eax,0xf0
c00260c3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00260c6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00260cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00260ce:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00260d5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00260dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260df:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260e2:	89 10                	mov    DWORD PTR [eax],edx
c00260e4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00260eb:	a1 b0 17 03 c0       	mov    eax,ds:0xc00317b0
c00260f0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00260f3:	7d 7c                	jge    c0026171 <APIC::open(int, int, void*)+0x141>
c00260f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260f8:	8b 04 85 c0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce840]
c00260ff:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026102:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026105:	8b 04 85 c0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce840]
c002610c:	c1 e8 08             	shr    eax,0x8
c002610f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026113:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026116:	8b 04 85 c0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce840]
c002611d:	c1 e8 18             	shr    eax,0x18
c0026120:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026123:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026127:	75 40                	jne    c0026169 <APIC::open(int, int, void*)+0x139>
c0026129:	83 ec 0c             	sub    esp,0xc
c002612c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002612f:	e8 8c fe ff ff       	call   c0025fc0 <APIC::getBase()>
c0026134:	83 c4 10             	add    esp,0x10
c0026137:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002613b:	75 07                	jne    c0026144 <APIC::open(int, int, void*)+0x114>
c002613d:	ba 60 03 00 00       	mov    edx,0x360
c0026142:	eb 05                	jmp    c0026149 <APIC::open(int, int, void*)+0x119>
c0026144:	ba 50 03 00 00       	mov    edx,0x350
c0026149:	01 d0                	add    eax,edx
c002614b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002614e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026151:	8b 00                	mov    eax,DWORD PTR [eax]
c0026153:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026156:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002615d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026161:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026164:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026167:	89 10                	mov    DWORD PTR [eax],edx
c0026169:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002616c:	e9 7a ff ff ff       	jmp    c00260eb <APIC::open(int, int, void*)+0xbb>
c0026171:	b8 00 00 00 00       	mov    eax,0x0
c0026176:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026179:	5b                   	pop    ebx
c002617a:	5e                   	pop    esi
c002617b:	5f                   	pop    edi
c002617c:	5d                   	pop    ebp
c002617d:	c3                   	ret    

c002617e <IOAPIC::IOAPIC()>:
c002617e:	83 ec 0c             	sub    esp,0xc
c0026181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026185:	83 ec 08             	sub    esp,0x8
c0026188:	68 ac db 02 c0       	push   0xc002dbac
c002618d:	50                   	push   eax
c002618e:	e8 09 e3 fe ff       	call   c001449c <Device::Device(char const*)>
c0026193:	83 c4 10             	add    esp,0x10
c0026196:	ba d4 dc 02 c0       	mov    edx,0xc002dcd4
c002619b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619f:	89 10                	mov    DWORD PTR [eax],edx
c00261a1:	90                   	nop
c00261a2:	83 c4 0c             	add    esp,0xc
c00261a5:	c3                   	ret    

c00261a6 <APIC::APIC()>:
c00261a6:	53                   	push   ebx
c00261a7:	83 ec 18             	sub    esp,0x18
c00261aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261ae:	83 ec 08             	sub    esp,0x8
c00261b1:	68 b4 db 02 c0       	push   0xc002dbb4
c00261b6:	50                   	push   eax
c00261b7:	e8 5a ea fe ff       	call   c0014c16 <InterruptController::InterruptController(char const*)>
c00261bc:	83 c4 10             	add    esp,0x10
c00261bf:	ba 8c dc 02 c0       	mov    edx,0xc002dc8c
c00261c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261c8:	89 10                	mov    DWORD PTR [eax],edx
c00261ca:	a0 80 32 03 c0       	mov    al,ds:0xc0033280
c00261cf:	83 f0 01             	xor    eax,0x1
c00261d2:	84 c0                	test   al,al
c00261d4:	0f 84 a1 00 00 00    	je     c002627b <APIC::APIC()+0xd5>
c00261da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00261df:	a0 60 18 03 c0       	mov    al,ds:0xc0031860
c00261e4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00261e8:	0f 83 86 00 00 00    	jae    c0026274 <APIC::APIC()+0xce>
c00261ee:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00261f6:	83 ec 0c             	sub    esp,0xc
c00261f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261fd:	e8 be 96 fe ff       	call   c000f8c0 <malloc>
c0026202:	83 c4 10             	add    esp,0x10
c0026205:	89 c3                	mov    ebx,eax
c0026207:	83 ec 0c             	sub    esp,0xc
c002620a:	53                   	push   ebx
c002620b:	e8 6e ff ff ff       	call   c002617e <IOAPIC::IOAPIC()>
c0026210:	83 c4 10             	add    esp,0x10
c0026213:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026217:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002621c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026220:	89 14 85 60 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccda0],edx
c0026227:	a1 40 32 03 c0       	mov    eax,ds:0xc0033240
c002622c:	40                   	inc    eax
c002622d:	a3 40 32 03 c0       	mov    ds:0xc0033240,eax
c0026232:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0026237:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002623d:	83 ec 08             	sub    esp,0x8
c0026240:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026244:	50                   	push   eax
c0026245:	e8 62 e0 fe ff       	call   c00142ac <Device::addChild(Device*)>
c002624a:	83 c4 10             	add    esp,0x10
c002624d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026251:	8b 00                	mov    eax,DWORD PTR [eax]
c0026253:	83 c0 08             	add    eax,0x8
c0026256:	8b 00                	mov    eax,DWORD PTR [eax]
c0026258:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002625d:	6a 00                	push   0x0
c002625f:	6a 00                	push   0x0
c0026261:	52                   	push   edx
c0026262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026266:	ff d0                	call   eax
c0026268:	83 c4 10             	add    esp,0x10
c002626b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002626f:	e9 6b ff ff ff       	jmp    c00261df <APIC::APIC()+0x39>
c0026274:	c6 05 80 32 03 c0 01 	mov    BYTE PTR ds:0xc0033280,0x1
c002627b:	90                   	nop
c002627c:	83 c4 18             	add    esp,0x18
c002627f:	5b                   	pop    ebx
c0026280:	c3                   	ret    
c0026281:	90                   	nop

c0026282 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026282:	55                   	push   ebp
c0026283:	89 e5                	mov    ebp,esp
c0026285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026288:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002628e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026291:	72 1d                	jb     c00262b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026296:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002629c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002629f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00262a5:	01 d0                	add    eax,edx
c00262a7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00262aa:	73 04                	jae    c00262b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00262ac:	b0 01                	mov    al,0x1
c00262ae:	eb 02                	jmp    c00262b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00262b0:	b0 00                	mov    al,0x0
c00262b2:	5d                   	pop    ebp
c00262b3:	c3                   	ret    

c00262b4 <IOAPIC::read(int)>:
c00262b4:	55                   	push   ebp
c00262b5:	89 e5                	mov    ebp,esp
c00262b7:	83 ec 10             	sub    esp,0x10
c00262ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00262c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262c9:	0f b6 d0             	movzx  edx,al
c00262cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262cf:	89 10                	mov    DWORD PTR [eax],edx
c00262d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262d4:	83 c0 10             	add    eax,0x10
c00262d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00262d9:	c9                   	leave  
c00262da:	c3                   	ret    
c00262db:	90                   	nop

c00262dc <IOAPIC::open(int, int, void*)>:
c00262dc:	55                   	push   ebp
c00262dd:	89 e5                	mov    ebp,esp
c00262df:	57                   	push   edi
c00262e0:	56                   	push   esi
c00262e1:	53                   	push   ebx
c00262e2:	83 ec 0c             	sub    esp,0xc
c00262e5:	83 ec 0c             	sub    esp,0xc
c00262e8:	68 df db 02 c0       	push   0xc002dbdf
c00262ed:	e8 85 cb fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00262f2:	83 c4 10             	add    esp,0x10
c00262f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00262fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026304:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002630a:	8b 14 85 a0 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce760]
c0026311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026314:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002631a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002631d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026323:	8b 14 85 20 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce6e0]
c002632a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002632d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026336:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002633c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002633f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026345:	0f b6 f8             	movzx  edi,al
c0026348:	89 d0                	mov    eax,edx
c002634a:	ba 00 00 00 00       	mov    edx,0x0
c002634f:	89 c1                	mov    ecx,eax
c0026351:	80 e5 ff             	and    ch,0xff
c0026354:	89 cb                	mov    ebx,ecx
c0026356:	0f b6 f2             	movzx  esi,dl
c0026359:	89 d8                	mov    eax,ebx
c002635b:	89 f2                	mov    edx,esi
c002635d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026360:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026363:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026367:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002636b:	83 e0 00             	and    eax,0x0
c002636e:	09 d0                	or     eax,edx
c0026370:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026377:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002637d:	8d 50 01             	lea    edx,[eax+0x1]
c0026380:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026383:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026389:	0f b6 d0             	movzx  edx,al
c002638c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002638f:	83 c2 08             	add    edx,0x8
c0026392:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026396:	0f b6 c9             	movzx  ecx,cl
c0026399:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002639f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263a3:	83 ec 08             	sub    esp,0x8
c00263a6:	6a 01                	push   0x1
c00263a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263ab:	e8 04 ff ff ff       	call   c00262b4 <IOAPIC::read(int)>
c00263b0:	83 c4 10             	add    esp,0x10
c00263b3:	c1 f8 10             	sar    eax,0x10
c00263b6:	0f b6 c0             	movzx  eax,al
c00263b9:	8d 50 01             	lea    edx,[eax+0x1]
c00263bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263bf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00263c5:	b8 00 00 00 00       	mov    eax,0x0
c00263ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c00263cd:	5b                   	pop    ebx
c00263ce:	5e                   	pop    esi
c00263cf:	5f                   	pop    edi
c00263d0:	5d                   	pop    ebp
c00263d1:	c3                   	ret    

c00263d2 <IOAPIC::write(int, int)>:
c00263d2:	55                   	push   ebp
c00263d3:	89 e5                	mov    ebp,esp
c00263d5:	83 ec 10             	sub    esp,0x10
c00263d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00263e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263e7:	0f b6 d0             	movzx  edx,al
c00263ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263ed:	89 10                	mov    DWORD PTR [eax],edx
c00263ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263f2:	8d 50 10             	lea    edx,[eax+0x10]
c00263f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263f8:	89 02                	mov    DWORD PTR [edx],eax
c00263fa:	90                   	nop
c00263fb:	c9                   	leave  
c00263fc:	c3                   	ret    
c00263fd:	90                   	nop

c00263fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00263fe:	55                   	push   ebp
c00263ff:	89 e5                	mov    ebp,esp
c0026401:	53                   	push   ebx
c0026402:	83 ec 2c             	sub    esp,0x2c
c0026405:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026408:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002640b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002640e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026411:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026414:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026417:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002641a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002641d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026420:	88 d8                	mov    al,bl
c0026422:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026425:	88 c8                	mov    al,cl
c0026427:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002642a:	88 d0                	mov    al,dl
c002642c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002642f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026433:	83 c0 08             	add    eax,0x8
c0026436:	01 c0                	add    eax,eax
c0026438:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002643b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002643f:	83 c0 08             	add    eax,0x8
c0026442:	01 c0                	add    eax,eax
c0026444:	40                   	inc    eax
c0026445:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026448:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002644b:	50                   	push   eax
c002644c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002644f:	e8 60 fe ff ff       	call   c00262b4 <IOAPIC::read(int)>
c0026454:	83 c4 08             	add    esp,0x8
c0026457:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002645a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026461:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026464:	c1 e0 18             	shl    eax,0x18
c0026467:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002646a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002646d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026470:	52                   	push   edx
c0026471:	50                   	push   eax
c0026472:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026475:	e8 58 ff ff ff       	call   c00263d2 <IOAPIC::write(int, int)>
c002647a:	83 c4 0c             	add    esp,0xc
c002647d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026480:	50                   	push   eax
c0026481:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026484:	e8 2b fe ff ff       	call   c00262b4 <IOAPIC::read(int)>
c0026489:	83 c4 08             	add    esp,0x8
c002648c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002648f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026496:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002649d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00264a4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264a8:	74 09                	je     c00264b3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00264aa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00264b1:	eb 07                	jmp    c00264ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00264b3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00264ba:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00264be:	74 09                	je     c00264c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00264c0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00264c7:	eb 07                	jmp    c00264d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00264c9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00264d0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00264d7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00264db:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00264de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00264e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264e4:	52                   	push   edx
c00264e5:	50                   	push   eax
c00264e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264e9:	e8 e4 fe ff ff       	call   c00263d2 <IOAPIC::write(int, int)>
c00264ee:	83 c4 0c             	add    esp,0xc
c00264f1:	90                   	nop
c00264f2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00264f5:	c9                   	leave  
c00264f6:	c3                   	ret    
c00264f7:	90                   	nop

c00264f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00264f8:	55                   	push   ebp
c00264f9:	89 e5                	mov    ebp,esp
c00264fb:	57                   	push   edi
c00264fc:	56                   	push   esi
c00264fd:	53                   	push   ebx
c00264fe:	83 ec 2c             	sub    esp,0x2c
c0026501:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026504:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026507:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002650b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002650f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026513:	74 5a                	je     c002656f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026515:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026519:	7f 44                	jg     c002655f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002651b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002651e:	05 20 e1 02 c0       	add    eax,0xc002e120
c0026523:	8a 00                	mov    al,BYTE PTR [eax]
c0026525:	0f b6 c0             	movzx  eax,al
c0026528:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002652b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002652e:	66 8b 84 00 40 18 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce7c0]
c0026536:	0f b7 c0             	movzx  eax,ax
c0026539:	83 e0 02             	and    eax,0x2
c002653c:	85 c0                	test   eax,eax
c002653e:	74 04                	je     c0026544 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026540:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026544:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026547:	66 8b 84 00 40 18 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce7c0]
c002654f:	0f b7 c0             	movzx  eax,ax
c0026552:	83 e0 08             	and    eax,0x8
c0026555:	85 c0                	test   eax,eax
c0026557:	74 16                	je     c002656f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026559:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002655d:	eb 10                	jmp    c002656f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002655f:	83 ec 0c             	sub    esp,0xc
c0026562:	68 f0 db 02 c0       	push   0xc002dbf0
c0026567:	e8 f9 42 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c002656c:	83 c4 10             	add    esp,0x10
c002656f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026573:	a1 40 32 03 c0       	mov    eax,ds:0xc0033240
c0026578:	83 ec 08             	sub    esp,0x8
c002657b:	50                   	push   eax
c002657c:	68 28 dc 02 c0       	push   0xc002dc28
c0026581:	e8 f1 c8 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0026586:	83 c4 10             	add    esp,0x10
c0026589:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026590:	a1 40 32 03 c0       	mov    eax,ds:0xc0033240
c0026595:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026598:	7d 67                	jge    c0026601 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002659a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002659d:	8b 04 85 60 32 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccda0]
c00265a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265a7:	83 ec 08             	sub    esp,0x8
c00265aa:	52                   	push   edx
c00265ab:	50                   	push   eax
c00265ac:	e8 d1 fc ff ff       	call   c0026282 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00265b1:	83 c4 10             	add    esp,0x10
c00265b4:	84 c0                	test   al,al
c00265b6:	74 44                	je     c00265fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00265b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00265bb:	8b 1c 85 60 32 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccda0]
c00265c2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00265c6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00265c9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00265cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265d0:	83 c0 20             	add    eax,0x20
c00265d3:	0f b6 f0             	movzx  esi,al
c00265d6:	b8 00 00 00 00       	mov    eax,0x0
c00265db:	99                   	cdq    
c00265dc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265df:	0f b6 c9             	movzx  ecx,cl
c00265e2:	83 ec 04             	sub    esp,0x4
c00265e5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00265e8:	57                   	push   edi
c00265e9:	56                   	push   esi
c00265ea:	52                   	push   edx
c00265eb:	50                   	push   eax
c00265ec:	51                   	push   ecx
c00265ed:	53                   	push   ebx
c00265ee:	e8 0b fe ff ff       	call   c00263fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00265f3:	83 c4 20             	add    esp,0x20
c00265f6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00265fa:	eb 05                	jmp    c0026601 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265fc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00265ff:	eb 8f                	jmp    c0026590 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026601:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026604:	83 f0 01             	xor    eax,0x1
c0026607:	84 c0                	test   al,al
c0026609:	74 10                	je     c002661b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002660b:	83 ec 0c             	sub    esp,0xc
c002660e:	68 3f dc 02 c0       	push   0xc002dc3f
c0026613:	e8 4d 42 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0026618:	83 c4 10             	add    esp,0x10
c002661b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002661f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026626:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002662a:	7f 65                	jg     c0026691 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002662c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002662f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026632:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026639:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002663c:	01 ca                	add    edx,ecx
c002663e:	83 c2 54             	add    edx,0x54
c0026641:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026645:	85 c0                	test   eax,eax
c0026647:	75 43                	jne    c002668c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002664c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002664f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026656:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026659:	01 ca                	add    edx,ecx
c002665b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002665e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026661:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026668:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002666b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026672:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026675:	01 ca                	add    edx,ecx
c0026677:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002667d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026680:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026684:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026687:	83 e8 20             	sub    eax,0x20
c002668a:	eb 1a                	jmp    c00266a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002668c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002668f:	eb 95                	jmp    c0026626 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026691:	83 ec 0c             	sub    esp,0xc
c0026694:	68 4c dc 02 c0       	push   0xc002dc4c
c0026699:	e8 c7 41 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c002669e:	83 c4 10             	add    esp,0x10
c00266a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00266a6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00266a9:	5b                   	pop    ebx
c00266aa:	5e                   	pop    esi
c00266ab:	5f                   	pop    edi
c00266ac:	5d                   	pop    ebp
c00266ad:	c3                   	ret    

c00266ae <PIC::disable()>:
c00266ae:	55                   	push   ebp
c00266af:	89 e5                	mov    ebp,esp
c00266b1:	83 ec 10             	sub    esp,0x10
c00266b4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00266ba:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00266be:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00266c1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00266c5:	ee                   	out    dx,al
c00266c6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00266cc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00266d0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00266d3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00266d7:	ee                   	out    dx,al
c00266d8:	90                   	nop
c00266d9:	c9                   	leave  
c00266da:	c3                   	ret    
c00266db:	90                   	nop

c00266dc <PIC::close(int, int, void*)>:
c00266dc:	55                   	push   ebp
c00266dd:	89 e5                	mov    ebp,esp
c00266df:	83 ec 08             	sub    esp,0x8
c00266e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00266e7:	83 c0 3c             	add    eax,0x3c
c00266ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00266ec:	83 ec 0c             	sub    esp,0xc
c00266ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266f2:	ff d0                	call   eax
c00266f4:	83 c4 10             	add    esp,0x10
c00266f7:	b8 00 00 00 00       	mov    eax,0x0
c00266fc:	c9                   	leave  
c00266fd:	c3                   	ret    

c00266fe <PIC::PIC()>:
c00266fe:	83 ec 0c             	sub    esp,0xc
c0026701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026705:	83 ec 08             	sub    esp,0x8
c0026708:	68 f8 dc 02 c0       	push   0xc002dcf8
c002670d:	50                   	push   eax
c002670e:	e8 03 e5 fe ff       	call   c0014c16 <InterruptController::InterruptController(char const*)>
c0026713:	83 c4 10             	add    esp,0x10
c0026716:	ba 24 dd 02 c0       	mov    edx,0xc002dd24
c002671b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671f:	89 10                	mov    DWORD PTR [eax],edx
c0026721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026725:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002672b:	0f b6 d0             	movzx  edx,al
c002672e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026732:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026743:	0f b6 d0             	movzx  edx,al
c0026746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002674a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002674f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026753:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026759:	8d 50 01             	lea    edx,[eax+0x1]
c002675c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026760:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026766:	0f b6 d0             	movzx  edx,al
c0026769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026771:	83 e1 3f             	and    ecx,0x3f
c0026774:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002677c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026782:	0f b6 d0             	movzx  edx,al
c0026785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026789:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026794:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002679a:	0f b6 d0             	movzx  edx,al
c002679d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267a1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00267a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267b0:	8d 50 01             	lea    edx,[eax+0x1]
c00267b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267b7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00267bd:	0f b6 d0             	movzx  edx,al
c00267c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267c4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00267c8:	83 e1 3f             	and    ecx,0x3f
c00267cb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00267cf:	90                   	nop
c00267d0:	83 c4 0c             	add    esp,0xc
c00267d3:	c3                   	ret    

c00267d4 <PIC::ioWait()>:
c00267d4:	eb 00                	jmp    c00267d6 <PIC::ioWait()+0x2>
c00267d6:	eb 00                	jmp    c00267d8 <PIC::ioWait()+0x4>
c00267d8:	90                   	nop
c00267d9:	c3                   	ret    

c00267da <PIC::getIRQReg(int)>:
c00267da:	55                   	push   ebp
c00267db:	89 e5                	mov    ebp,esp
c00267dd:	83 ec 10             	sub    esp,0x10
c00267e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267e3:	0f b6 c0             	movzx  eax,al
c00267e6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00267ec:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00267ef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267f2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267f6:	ee                   	out    dx,al
c00267f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267fa:	0f b6 c0             	movzx  eax,al
c00267fd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026803:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026806:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026809:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002680d:	ee                   	out    dx,al
c002680e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026814:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026818:	89 c2                	mov    edx,eax
c002681a:	ec                   	in     al,dx
c002681b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002681e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026821:	0f b6 c0             	movzx  eax,al
c0026824:	c1 e0 08             	shl    eax,0x8
c0026827:	89 c1                	mov    ecx,eax
c0026829:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002682f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026833:	89 c2                	mov    edx,eax
c0026835:	ec                   	in     al,dx
c0026836:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026839:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002683c:	0f b6 c0             	movzx  eax,al
c002683f:	09 c8                	or     eax,ecx
c0026841:	c9                   	leave  
c0026842:	c3                   	ret    
c0026843:	90                   	nop

c0026844 <PIC::eoi(unsigned char)>:
c0026844:	55                   	push   ebp
c0026845:	89 e5                	mov    ebp,esp
c0026847:	83 ec 14             	sub    esp,0x14
c002684a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002684d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026850:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026854:	75 1e                	jne    c0026874 <PIC::eoi(unsigned char)+0x30>
c0026856:	6a 0b                	push   0xb
c0026858:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002685b:	e8 7a ff ff ff       	call   c00267da <PIC::getIRQReg(int)>
c0026860:	83 c4 08             	add    esp,0x8
c0026863:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026867:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002686b:	25 80 00 00 00       	and    eax,0x80
c0026870:	85 c0                	test   eax,eax
c0026872:	74 5f                	je     c00268d3 <PIC::eoi(unsigned char)+0x8f>
c0026874:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026878:	75 2d                	jne    c00268a7 <PIC::eoi(unsigned char)+0x63>
c002687a:	6a 0b                	push   0xb
c002687c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002687f:	e8 56 ff ff ff       	call   c00267da <PIC::getIRQReg(int)>
c0026884:	83 c4 08             	add    esp,0x8
c0026887:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002688b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002688e:	66 85 c0             	test   ax,ax
c0026891:	78 14                	js     c00268a7 <PIC::eoi(unsigned char)+0x63>
c0026893:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026899:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002689d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00268a0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00268a4:	ee                   	out    dx,al
c00268a5:	eb 2d                	jmp    c00268d4 <PIC::eoi(unsigned char)+0x90>
c00268a7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00268ab:	76 12                	jbe    c00268bf <PIC::eoi(unsigned char)+0x7b>
c00268ad:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00268b3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00268b7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00268ba:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00268be:	ee                   	out    dx,al
c00268bf:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00268c5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00268c9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00268cc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00268d0:	ee                   	out    dx,al
c00268d1:	eb 01                	jmp    c00268d4 <PIC::eoi(unsigned char)+0x90>
c00268d3:	90                   	nop
c00268d4:	c9                   	leave  
c00268d5:	c3                   	ret    

c00268d6 <PIC::remap()>:
c00268d6:	55                   	push   ebp
c00268d7:	89 e5                	mov    ebp,esp
c00268d9:	83 ec 48             	sub    esp,0x48
c00268dc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00268e3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00268ea:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00268f0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00268f3:	89 c2                	mov    edx,eax
c00268f5:	ec                   	in     al,dx
c00268f6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00268f9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00268fc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00268ff:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026905:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026908:	89 c2                	mov    edx,eax
c002690a:	ec                   	in     al,dx
c002690b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002690e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026911:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026914:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002691a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002691e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026921:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026924:	ee                   	out    dx,al
c0026925:	83 ec 0c             	sub    esp,0xc
c0026928:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002692b:	e8 a4 fe ff ff       	call   c00267d4 <PIC::ioWait()>
c0026930:	83 c4 10             	add    esp,0x10
c0026933:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026939:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002693d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026940:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026943:	ee                   	out    dx,al
c0026944:	83 ec 0c             	sub    esp,0xc
c0026947:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002694a:	e8 85 fe ff ff       	call   c00267d4 <PIC::ioWait()>
c002694f:	83 c4 10             	add    esp,0x10
c0026952:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026955:	0f b6 c0             	movzx  eax,al
c0026958:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002695e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026961:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026964:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026967:	ee                   	out    dx,al
c0026968:	83 ec 0c             	sub    esp,0xc
c002696b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002696e:	e8 61 fe ff ff       	call   c00267d4 <PIC::ioWait()>
c0026973:	83 c4 10             	add    esp,0x10
c0026976:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026979:	0f b6 c0             	movzx  eax,al
c002697c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026982:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026985:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026988:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002698b:	ee                   	out    dx,al
c002698c:	83 ec 0c             	sub    esp,0xc
c002698f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026992:	e8 3d fe ff ff       	call   c00267d4 <PIC::ioWait()>
c0026997:	83 c4 10             	add    esp,0x10
c002699a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00269a0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00269a4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00269a7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00269aa:	ee                   	out    dx,al
c00269ab:	83 ec 0c             	sub    esp,0xc
c00269ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269b1:	e8 1e fe ff ff       	call   c00267d4 <PIC::ioWait()>
c00269b6:	83 c4 10             	add    esp,0x10
c00269b9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00269bf:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00269c3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00269c6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00269c9:	ee                   	out    dx,al
c00269ca:	83 ec 0c             	sub    esp,0xc
c00269cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269d0:	e8 ff fd ff ff       	call   c00267d4 <PIC::ioWait()>
c00269d5:	83 c4 10             	add    esp,0x10
c00269d8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00269de:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00269e2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00269e5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00269e8:	ee                   	out    dx,al
c00269e9:	83 ec 0c             	sub    esp,0xc
c00269ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269ef:	e8 e0 fd ff ff       	call   c00267d4 <PIC::ioWait()>
c00269f4:	83 c4 10             	add    esp,0x10
c00269f7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00269fd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026a01:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026a04:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026a07:	ee                   	out    dx,al
c0026a08:	83 ec 0c             	sub    esp,0xc
c0026a0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a0e:	e8 c1 fd ff ff       	call   c00267d4 <PIC::ioWait()>
c0026a13:	83 c4 10             	add    esp,0x10
c0026a16:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026a1a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026a20:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026a23:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026a26:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a29:	ee                   	out    dx,al
c0026a2a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026a2e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026a34:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026a37:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026a3a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026a3d:	ee                   	out    dx,al
c0026a3e:	90                   	nop
c0026a3f:	c9                   	leave  
c0026a40:	c3                   	ret    
c0026a41:	90                   	nop

c0026a42 <PIC::open(int, int, void*)>:
c0026a42:	55                   	push   ebp
c0026a43:	89 e5                	mov    ebp,esp
c0026a45:	83 ec 18             	sub    esp,0x18
c0026a48:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026a4e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026a52:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a55:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a59:	ee                   	out    dx,al
c0026a5a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a60:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a64:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a67:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a6b:	ee                   	out    dx,al
c0026a6c:	83 ec 0c             	sub    esp,0xc
c0026a6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a72:	e8 5f fe ff ff       	call   c00268d6 <PIC::remap()>
c0026a77:	83 c4 10             	add    esp,0x10
c0026a7a:	b8 00 00 00 00       	mov    eax,0x0
c0026a7f:	c9                   	leave  
c0026a80:	c3                   	ret    
c0026a81:	90                   	nop

c0026a82 <APICTimer::close(int, int, void*)>:
c0026a82:	b8 00 00 00 00       	mov    eax,0x0
c0026a87:	c3                   	ret    

c0026a88 <apicTimerHandler(regs*, void*)>:
c0026a88:	83 ec 0c             	sub    esp,0xc
c0026a8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a91:	99                   	cdq    
c0026a92:	52                   	push   edx
c0026a93:	50                   	push   eax
c0026a94:	6a 00                	push   0x0
c0026a96:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a9b:	e8 94 07 00 00       	call   c0027234 <__udivdi3>
c0026aa0:	83 c4 10             	add    esp,0x10
c0026aa3:	83 ec 08             	sub    esp,0x8
c0026aa6:	52                   	push   edx
c0026aa7:	50                   	push   eax
c0026aa8:	e8 1e 03 ff ff       	call   c0016dcb <timerHandler(unsigned long long)>
c0026aad:	83 c4 10             	add    esp,0x10
c0026ab0:	90                   	nop
c0026ab1:	83 c4 0c             	add    esp,0xc
c0026ab4:	c3                   	ret    
c0026ab5:	90                   	nop

c0026ab6 <APICTimer::write(int)>:
c0026ab6:	53                   	push   ebx
c0026ab7:	83 ec 28             	sub    esp,0x28
c0026aba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026abe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026ac2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026ac8:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0026acd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026ad3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026ad9:	83 ec 0c             	sub    esp,0xc
c0026adc:	50                   	push   eax
c0026add:	e8 de f4 ff ff       	call   c0025fc0 <APIC::getBase()>
c0026ae2:	83 c4 10             	add    esp,0x10
c0026ae5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026ae9:	a1 50 f5 02 c0       	mov    eax,ds:0xc002f550
c0026aee:	8b 15 54 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f554
c0026af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026afc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b00:	05 e0 03 00 00       	add    eax,0x3e0
c0026b05:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b0f:	05 80 03 00 00       	add    eax,0x380
c0026b14:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026b1a:	fb                   	sti    
c0026b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b23:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026b28:	83 d2 00             	adc    edx,0x0
c0026b2b:	89 c1                	mov    ecx,eax
c0026b2d:	89 d3                	mov    ebx,edx
c0026b2f:	a1 50 f5 02 c0       	mov    eax,ds:0xc002f550
c0026b34:	8b 15 54 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f554
c0026b3a:	39 c8                	cmp    eax,ecx
c0026b3c:	89 d0                	mov    eax,edx
c0026b3e:	19 d8                	sbb    eax,ebx
c0026b40:	73 02                	jae    c0026b44 <APICTimer::write(int)+0x8e>
c0026b42:	eb d7                	jmp    c0026b1b <APICTimer::write(int)+0x65>
c0026b44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b48:	05 20 03 00 00       	add    eax,0x320
c0026b4d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026b53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b57:	05 90 03 00 00       	add    eax,0x390
c0026b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b5e:	f7 d0                	not    eax
c0026b60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b64:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b6c:	ba 00 00 00 00       	mov    edx,0x0
c0026b71:	f7 f3                	div    ebx
c0026b73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b81:	0d 00 00 02 00       	or     eax,0x20000
c0026b86:	89 c2                	mov    edx,eax
c0026b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b8c:	05 20 03 00 00       	add    eax,0x320
c0026b91:	89 10                	mov    DWORD PTR [eax],edx
c0026b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b97:	05 e0 03 00 00       	add    eax,0x3e0
c0026b9c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026ba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ba6:	05 80 03 00 00       	add    eax,0x380
c0026bab:	89 c2                	mov    edx,eax
c0026bad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026bb1:	89 02                	mov    DWORD PTR [edx],eax
c0026bb3:	90                   	nop
c0026bb4:	83 c4 28             	add    esp,0x28
c0026bb7:	5b                   	pop    ebx
c0026bb8:	c3                   	ret    
c0026bb9:	90                   	nop

c0026bba <APICTimer::open(int, int, void*)>:
c0026bba:	57                   	push   edi
c0026bbb:	56                   	push   esi
c0026bbc:	53                   	push   ebx
c0026bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bc3:	83 c0 24             	add    eax,0x24
c0026bc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bc8:	83 ec 08             	sub    esp,0x8
c0026bcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bd3:	ff d0                	call   eax
c0026bd5:	83 c4 10             	add    esp,0x10
c0026bd8:	a1 c8 ee 02 c0       	mov    eax,ds:0xc002eec8
c0026bdd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026be3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026be9:	83 ec 0c             	sub    esp,0xc
c0026bec:	50                   	push   eax
c0026bed:	e8 ce f3 ff ff       	call   c0025fc0 <APIC::getBase()>
c0026bf2:	83 c4 10             	add    esp,0x10
c0026bf5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c05:	0f b6 f8             	movzx  edi,al
c0026c08:	89 d0                	mov    eax,edx
c0026c0a:	ba 00 00 00 00       	mov    edx,0x0
c0026c0f:	89 c1                	mov    ecx,eax
c0026c11:	80 e5 ff             	and    ch,0xff
c0026c14:	89 cb                	mov    ebx,ecx
c0026c16:	0f b6 f2             	movzx  esi,dl
c0026c19:	89 d8                	mov    eax,ebx
c0026c1b:	89 f2                	mov    edx,esi
c0026c1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c21:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026c24:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026c28:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026c2c:	83 e0 00             	and    eax,0x0
c0026c2f:	09 d0                	or     eax,edx
c0026c31:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c39:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0026c42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c46:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026c4c:	0f b6 d0             	movzx  edx,al
c0026c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c53:	83 c2 08             	add    edx,0x8
c0026c56:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c5a:	0f b6 c9             	movzx  ecx,cl
c0026c5d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c63:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c6f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c7d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c87:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c8d:	83 ec 0c             	sub    esp,0xc
c0026c90:	51                   	push   ecx
c0026c91:	6a 01                	push   0x1
c0026c93:	68 88 6a 02 c0       	push   0xc0026a88
c0026c98:	52                   	push   edx
c0026c99:	50                   	push   eax
c0026c9a:	e8 91 d5 fe ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c9f:	83 c4 20             	add    esp,0x20
c0026ca2:	89 c2                	mov    edx,eax
c0026ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026cae:	b8 00 00 00 00       	mov    eax,0x0
c0026cb3:	5b                   	pop    ebx
c0026cb4:	5e                   	pop    esi
c0026cb5:	5f                   	pop    edi
c0026cb6:	c3                   	ret    
c0026cb7:	90                   	nop

c0026cb8 <APICTimer::APICTimer()>:
c0026cb8:	83 ec 0c             	sub    esp,0xc
c0026cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cbf:	83 ec 08             	sub    esp,0x8
c0026cc2:	68 64 dd 02 c0       	push   0xc002dd64
c0026cc7:	50                   	push   eax
c0026cc8:	e8 6f 00 ff ff       	call   c0016d3c <Timer::Timer(char const*)>
c0026ccd:	83 c4 10             	add    esp,0x10
c0026cd0:	ba 78 dd 02 c0       	mov    edx,0xc002dd78
c0026cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cd9:	89 10                	mov    DWORD PTR [eax],edx
c0026cdb:	90                   	nop
c0026cdc:	83 c4 0c             	add    esp,0xc
c0026cdf:	c3                   	ret    

c0026ce0 <PIT::write(int)>:
c0026ce0:	83 ec 10             	sub    esp,0x10
c0026ce3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ce7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026ceb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026cf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026cf5:	a3 84 32 03 c0       	mov    ds:0xc0033284,eax
c0026cfa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026cff:	99                   	cdq    
c0026d00:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026d04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026d08:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026d0f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026d14:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026d18:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026d1d:	ee                   	out    dx,al
c0026d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d22:	0f b6 c0             	movzx  eax,al
c0026d25:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026d2c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026d30:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026d34:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026d39:	ee                   	out    dx,al
c0026d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d3e:	c1 f8 08             	sar    eax,0x8
c0026d41:	0f b6 c0             	movzx  eax,al
c0026d44:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026d4b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026d4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026d53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d58:	ee                   	out    dx,al
c0026d59:	90                   	nop
c0026d5a:	83 c4 10             	add    esp,0x10
c0026d5d:	c3                   	ret    

c0026d5e <pitHandler(regs*, void*)>:
c0026d5e:	83 ec 0c             	sub    esp,0xc
c0026d61:	a1 84 32 03 c0       	mov    eax,ds:0xc0033284
c0026d66:	99                   	cdq    
c0026d67:	52                   	push   edx
c0026d68:	50                   	push   eax
c0026d69:	6a 00                	push   0x0
c0026d6b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d70:	e8 bf 04 00 00       	call   c0027234 <__udivdi3>
c0026d75:	83 c4 10             	add    esp,0x10
c0026d78:	83 ec 08             	sub    esp,0x8
c0026d7b:	52                   	push   edx
c0026d7c:	50                   	push   eax
c0026d7d:	e8 49 00 ff ff       	call   c0016dcb <timerHandler(unsigned long long)>
c0026d82:	83 c4 10             	add    esp,0x10
c0026d85:	90                   	nop
c0026d86:	83 c4 0c             	add    esp,0xc
c0026d89:	c3                   	ret    

c0026d8a <PIT::open(int, int, void*)>:
c0026d8a:	83 ec 0c             	sub    esp,0xc
c0026d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d93:	83 c0 24             	add    eax,0x24
c0026d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d98:	83 ec 08             	sub    esp,0x8
c0026d9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026da3:	ff d0                	call   eax
c0026da5:	83 c4 10             	add    esp,0x10
c0026da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dac:	83 ec 0c             	sub    esp,0xc
c0026daf:	6a 00                	push   0x0
c0026db1:	6a 01                	push   0x1
c0026db3:	68 5e 6d 02 c0       	push   0xc0026d5e
c0026db8:	6a 00                	push   0x0
c0026dba:	50                   	push   eax
c0026dbb:	e8 70 d4 fe ff       	call   c0014230 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026dc0:	83 c4 20             	add    esp,0x20
c0026dc3:	89 c2                	mov    edx,eax
c0026dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026dcf:	b8 00 00 00 00       	mov    eax,0x0
c0026dd4:	83 c4 0c             	add    esp,0xc
c0026dd7:	c3                   	ret    

c0026dd8 <PIT::close(int, int, void*)>:
c0026dd8:	83 ec 0c             	sub    esp,0xc
c0026ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ddf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ded:	6a 01                	push   0x1
c0026def:	68 5e 6d 02 c0       	push   0xc0026d5e
c0026df4:	6a 00                	push   0x0
c0026df6:	50                   	push   eax
c0026df7:	e8 72 d4 fe ff       	call   c001426e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026dfc:	83 c4 10             	add    esp,0x10
c0026dff:	b8 00 00 00 00       	mov    eax,0x0
c0026e04:	83 c4 0c             	add    esp,0xc
c0026e07:	c3                   	ret    

c0026e08 <PIT::PIT()>:
c0026e08:	83 ec 0c             	sub    esp,0xc
c0026e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e0f:	83 ec 08             	sub    esp,0x8
c0026e12:	68 a0 dd 02 c0       	push   0xc002dda0
c0026e17:	50                   	push   eax
c0026e18:	e8 1f ff fe ff       	call   c0016d3c <Timer::Timer(char const*)>
c0026e1d:	83 c4 10             	add    esp,0x10
c0026e20:	ba c8 dd 02 c0       	mov    edx,0xc002ddc8
c0026e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e29:	89 10                	mov    DWORD PTR [eax],edx
c0026e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e35:	0f b6 d0             	movzx  edx,al
c0026e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e3c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e47:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e4d:	0f b6 d0             	movzx  edx,al
c0026e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e54:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e63:	8d 50 01             	lea    edx,[eax+0x1]
c0026e66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e6a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e70:	0f b6 d0             	movzx  edx,al
c0026e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e77:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e7b:	83 e1 3f             	and    ecx,0x3f
c0026e7e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e82:	90                   	nop
c0026e83:	83 c4 0c             	add    esp,0xc
c0026e86:	c3                   	ret    
c0026e87:	66 90                	xchg   ax,ax
c0026e89:	66 90                	xchg   ax,ax
c0026e8b:	66 90                	xchg   ax,ax
c0026e8d:	66 90                	xchg   ax,ax
c0026e8f:	90                   	nop

c0026e90 <avxDetect>:
c0026e90:	b8 00 00 00 00       	mov    eax,0x0
c0026e95:	c3                   	ret    

c0026e96 <avxSave>:
c0026e96:	c3                   	ret    

c0026e97 <avxLoad>:
c0026e97:	c3                   	ret    

c0026e98 <avxInit>:
c0026e98:	c3                   	ret    

c0026e99 <avxClose>:
c0026e99:	c3                   	ret    

c0026e9a <wouldSheSayYes>:
c0026e9a:	c3                   	ret    
c0026e9b:	49                   	dec    ecx
c0026e9c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026ea0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026ea4:	75 20                	jne    c0026ec6 <sseDetect.noSSE+0x1>
c0026ea6:	4e                   	dec    esi
c0026ea7:	79 61                	jns    c0026f0a <x87Detect+0x14>
c0026ea9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026eae:	66 90                	xchg   ax,ax

c0026eb0 <absolutelyNoChanceInHell>:
c0026eb0:	b8 01 00 00 00       	mov    eax,0x1
c0026eb5:	0f a2                	cpuid  
c0026eb7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026ebd:	74 06                	je     c0026ec5 <sseDetect.noSSE>
c0026ebf:	b8 01 00 00 00       	mov    eax,0x1
c0026ec4:	c3                   	ret    

c0026ec5 <sseDetect.noSSE>:
c0026ec5:	31 c0                	xor    eax,eax
c0026ec7:	c3                   	ret    

c0026ec8 <sseSave>:
c0026ec8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026ecd:	c3                   	ret    

c0026ece <sseLoad>:
c0026ece:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026ed3:	c3                   	ret    

c0026ed4 <sseInit>:
c0026ed4:	e8 49 00 00 00       	call   c0026f22 <x87Init>
c0026ed9:	0f 20 e0             	mov    eax,cr4
c0026edc:	66 0d 00 06          	or     ax,0x600
c0026ee0:	0f 22 e0             	mov    cr4,eax
c0026ee3:	c3                   	ret    

c0026ee4 <sseClose>:
c0026ee4:	c3                   	ret    
c0026ee5:	66 90                	xchg   ax,ax
c0026ee7:	66 90                	xchg   ax,ax
c0026ee9:	66 90                	xchg   ax,ax
c0026eeb:	66 90                	xchg   ax,ax
c0026eed:	66 90                	xchg   ax,ax
c0026eef:	90                   	nop

c0026ef0 <value_37F>:
c0026ef0:	7f 03                	jg     c0026ef5 <value_37A+0x1>

c0026ef2 <value_37E>:
c0026ef2:	7e 03                	jle    c0026ef7 <x87Detect+0x1>

c0026ef4 <value_37A>:
c0026ef4:	7a 03                	jp     c0026ef9 <x87Detect+0x3>

c0026ef6 <x87Detect>:
c0026ef6:	b8 01 00 00 00       	mov    eax,0x1
c0026efb:	0f a2                	cpuid  
c0026efd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026f03:	74 06                	je     c0026f0b <x87Detect.nox87>
c0026f05:	b8 01 00 00 00       	mov    eax,0x1
c0026f0a:	c3                   	ret    

c0026f0b <x87Detect.nox87>:
c0026f0b:	b8 00 00 00 00       	mov    eax,0x0
c0026f10:	c3                   	ret    

c0026f11 <x87Save>:
c0026f11:	55                   	push   ebp
c0026f12:	89 e5                	mov    ebp,esp
c0026f14:	9b dd 75 08          	fsave  [ebp+0x8]
c0026f18:	c9                   	leave  
c0026f19:	c3                   	ret    

c0026f1a <x87Load>:
c0026f1a:	55                   	push   ebp
c0026f1b:	89 e5                	mov    ebp,esp
c0026f1d:	dd 65 08             	frstor [ebp+0x8]
c0026f20:	c9                   	leave  
c0026f21:	c3                   	ret    

c0026f22 <x87Init>:
c0026f22:	9b db e3             	finit  
c0026f25:	0f 20 c0             	mov    eax,cr0
c0026f28:	66 25 fb ff          	and    ax,0xfffb
c0026f2c:	66 0d 22 00          	or     ax,0x22
c0026f30:	0f 22 c0             	mov    cr0,eax
c0026f33:	0f 06                	clts   
c0026f35:	d9 2d f4 6e 02 c0    	fldcw  WORD PTR ds:0xc0026ef4
c0026f3b:	c3                   	ret    

c0026f3c <x87Close>:
c0026f3c:	c3                   	ret    
c0026f3d:	66 90                	xchg   ax,ax
c0026f3f:	90                   	nop

c0026f40 <__do_global_ctors_aux>:
c0026f40:	a1 78 9b 02 c0       	mov    eax,ds:0xc0029b78
c0026f45:	83 f8 ff             	cmp    eax,0xffffffff
c0026f48:	74 1a                	je     c0026f64 <__do_global_ctors_aux+0x24>
c0026f4a:	55                   	push   ebp
c0026f4b:	89 e5                	mov    ebp,esp
c0026f4d:	53                   	push   ebx
c0026f4e:	52                   	push   edx
c0026f4f:	bb 78 9b 02 c0       	mov    ebx,0xc0029b78
c0026f54:	ff d0                	call   eax
c0026f56:	83 eb 04             	sub    ebx,0x4
c0026f59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026f5b:	83 f8 ff             	cmp    eax,0xffffffff
c0026f5e:	75 f4                	jne    c0026f54 <__do_global_ctors_aux+0x14>
c0026f60:	58                   	pop    eax
c0026f61:	5b                   	pop    ebx
c0026f62:	5d                   	pop    ebp
c0026f63:	c3                   	ret    
c0026f64:	c3                   	ret    
c0026f65:	66 90                	xchg   ax,ax
c0026f67:	90                   	nop

c0026f68 <__divdi3>:
c0026f68:	55                   	push   ebp
c0026f69:	57                   	push   edi
c0026f6a:	56                   	push   esi
c0026f6b:	53                   	push   ebx
c0026f6c:	83 ec 1c             	sub    esp,0x1c
c0026f6f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f7a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f86:	85 db                	test   ebx,ebx
c0026f88:	0f 88 8e 00 00 00    	js     c002701c <__divdi3+0xb4>
c0026f8e:	89 dd                	mov    ebp,ebx
c0026f90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f98:	89 d3                	mov    ebx,edx
c0026f9a:	85 d2                	test   edx,edx
c0026f9c:	79 0d                	jns    c0026fab <__divdi3+0x43>
c0026f9e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026fa2:	f7 d8                	neg    eax
c0026fa4:	83 d2 00             	adc    edx,0x0
c0026fa7:	f7 da                	neg    edx
c0026fa9:	89 d3                	mov    ebx,edx
c0026fab:	89 c7                	mov    edi,eax
c0026fad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fb0:	85 db                	test   ebx,ebx
c0026fb2:	75 48                	jne    c0026ffc <__divdi3+0x94>
c0026fb4:	39 ef                	cmp    edi,ebp
c0026fb6:	76 24                	jbe    c0026fdc <__divdi3+0x74>
c0026fb8:	89 ea                	mov    edx,ebp
c0026fba:	f7 f7                	div    edi
c0026fbc:	89 c1                	mov    ecx,eax
c0026fbe:	31 f6                	xor    esi,esi
c0026fc0:	89 c8                	mov    eax,ecx
c0026fc2:	89 f2                	mov    edx,esi
c0026fc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026fc8:	85 c9                	test   ecx,ecx
c0026fca:	74 07                	je     c0026fd3 <__divdi3+0x6b>
c0026fcc:	f7 d8                	neg    eax
c0026fce:	83 d2 00             	adc    edx,0x0
c0026fd1:	f7 da                	neg    edx
c0026fd3:	83 c4 1c             	add    esp,0x1c
c0026fd6:	5b                   	pop    ebx
c0026fd7:	5e                   	pop    esi
c0026fd8:	5f                   	pop    edi
c0026fd9:	5d                   	pop    ebp
c0026fda:	c3                   	ret    
c0026fdb:	90                   	nop
c0026fdc:	85 ff                	test   edi,edi
c0026fde:	75 0b                	jne    c0026feb <__divdi3+0x83>
c0026fe0:	b8 01 00 00 00       	mov    eax,0x1
c0026fe5:	31 d2                	xor    edx,edx
c0026fe7:	f7 f3                	div    ebx
c0026fe9:	89 c7                	mov    edi,eax
c0026feb:	31 d2                	xor    edx,edx
c0026fed:	89 e8                	mov    eax,ebp
c0026fef:	f7 f7                	div    edi
c0026ff1:	89 c6                	mov    esi,eax
c0026ff3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026ff6:	f7 f7                	div    edi
c0026ff8:	89 c1                	mov    ecx,eax
c0026ffa:	eb c4                	jmp    c0026fc0 <__divdi3+0x58>
c0026ffc:	39 eb                	cmp    ebx,ebp
c0026ffe:	77 3c                	ja     c002703c <__divdi3+0xd4>
c0027000:	0f bd f3             	bsr    esi,ebx
c0027003:	83 f6 1f             	xor    esi,0x1f
c0027006:	75 40                	jne    c0027048 <__divdi3+0xe0>
c0027008:	39 eb                	cmp    ebx,ebp
c002700a:	72 09                	jb     c0027015 <__divdi3+0xad>
c002700c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002700f:	0f 87 97 00 00 00    	ja     c00270ac <__divdi3+0x144>
c0027015:	b9 01 00 00 00       	mov    ecx,0x1
c002701a:	eb a4                	jmp    c0026fc0 <__divdi3+0x58>
c002701c:	f7 d9                	neg    ecx
c002701e:	83 d3 00             	adc    ebx,0x0
c0027021:	f7 db                	neg    ebx
c0027023:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027026:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002702a:	89 dd                	mov    ebp,ebx
c002702c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027034:	e9 5f ff ff ff       	jmp    c0026f98 <__divdi3+0x30>
c0027039:	8d 76 00             	lea    esi,[esi+0x0]
c002703c:	31 f6                	xor    esi,esi
c002703e:	31 c9                	xor    ecx,ecx
c0027040:	e9 7b ff ff ff       	jmp    c0026fc0 <__divdi3+0x58>
c0027045:	8d 76 00             	lea    esi,[esi+0x0]
c0027048:	b8 20 00 00 00       	mov    eax,0x20
c002704d:	29 f0                	sub    eax,esi
c002704f:	89 f1                	mov    ecx,esi
c0027051:	d3 e3                	shl    ebx,cl
c0027053:	89 fa                	mov    edx,edi
c0027055:	88 c1                	mov    cl,al
c0027057:	d3 ea                	shr    edx,cl
c0027059:	09 da                	or     edx,ebx
c002705b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002705f:	89 f1                	mov    ecx,esi
c0027061:	d3 e7                	shl    edi,cl
c0027063:	89 eb                	mov    ebx,ebp
c0027065:	88 c1                	mov    cl,al
c0027067:	d3 eb                	shr    ebx,cl
c0027069:	89 f1                	mov    ecx,esi
c002706b:	d3 e5                	shl    ebp,cl
c002706d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027070:	88 c1                	mov    cl,al
c0027072:	d3 ea                	shr    edx,cl
c0027074:	09 d5                	or     ebp,edx
c0027076:	89 e8                	mov    eax,ebp
c0027078:	89 da                	mov    edx,ebx
c002707a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002707e:	89 d3                	mov    ebx,edx
c0027080:	89 c5                	mov    ebp,eax
c0027082:	f7 e7                	mul    edi
c0027084:	39 d3                	cmp    ebx,edx
c0027086:	72 18                	jb     c00270a0 <__divdi3+0x138>
c0027088:	74 0a                	je     c0027094 <__divdi3+0x12c>
c002708a:	89 e9                	mov    ecx,ebp
c002708c:	31 f6                	xor    esi,esi
c002708e:	e9 2d ff ff ff       	jmp    c0026fc0 <__divdi3+0x58>
c0027093:	90                   	nop
c0027094:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027097:	89 f1                	mov    ecx,esi
c0027099:	d3 e7                	shl    edi,cl
c002709b:	39 c7                	cmp    edi,eax
c002709d:	73 eb                	jae    c002708a <__divdi3+0x122>
c002709f:	90                   	nop
c00270a0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00270a3:	31 f6                	xor    esi,esi
c00270a5:	e9 16 ff ff ff       	jmp    c0026fc0 <__divdi3+0x58>
c00270aa:	66 90                	xchg   ax,ax
c00270ac:	31 c9                	xor    ecx,ecx
c00270ae:	e9 0d ff ff ff       	jmp    c0026fc0 <__divdi3+0x58>
c00270b3:	90                   	nop

c00270b4 <__moddi3>:
c00270b4:	55                   	push   ebp
c00270b5:	57                   	push   edi
c00270b6:	56                   	push   esi
c00270b7:	53                   	push   ebx
c00270b8:	83 ec 2c             	sub    esp,0x2c
c00270bb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00270bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00270c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00270c7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00270cb:	85 db                	test   ebx,ebx
c00270cd:	0f 88 85 00 00 00    	js     c0027158 <__moddi3+0xa4>
c00270d3:	89 de                	mov    esi,ebx
c00270d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00270dd:	89 d7                	mov    edi,edx
c00270df:	85 d2                	test   edx,edx
c00270e1:	79 09                	jns    c00270ec <__moddi3+0x38>
c00270e3:	f7 d8                	neg    eax
c00270e5:	83 d2 00             	adc    edx,0x0
c00270e8:	f7 da                	neg    edx
c00270ea:	89 d7                	mov    edi,edx
c00270ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270f0:	89 cd                	mov    ebp,ecx
c00270f2:	85 ff                	test   edi,edi
c00270f4:	75 52                	jne    c0027148 <__moddi3+0x94>
c00270f6:	89 c3                	mov    ebx,eax
c00270f8:	39 f0                	cmp    eax,esi
c00270fa:	76 24                	jbe    c0027120 <__moddi3+0x6c>
c00270fc:	89 c8                	mov    eax,ecx
c00270fe:	89 f2                	mov    edx,esi
c0027100:	f7 f3                	div    ebx
c0027102:	89 d6                	mov    esi,edx
c0027104:	89 f0                	mov    eax,esi
c0027106:	31 d2                	xor    edx,edx
c0027108:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002710c:	85 c9                	test   ecx,ecx
c002710e:	74 07                	je     c0027117 <__moddi3+0x63>
c0027110:	f7 d8                	neg    eax
c0027112:	83 d2 00             	adc    edx,0x0
c0027115:	f7 da                	neg    edx
c0027117:	83 c4 2c             	add    esp,0x2c
c002711a:	5b                   	pop    ebx
c002711b:	5e                   	pop    esi
c002711c:	5f                   	pop    edi
c002711d:	5d                   	pop    ebp
c002711e:	c3                   	ret    
c002711f:	90                   	nop
c0027120:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027124:	85 db                	test   ebx,ebx
c0027126:	75 0d                	jne    c0027135 <__moddi3+0x81>
c0027128:	b8 01 00 00 00       	mov    eax,0x1
c002712d:	31 d2                	xor    edx,edx
c002712f:	f7 f7                	div    edi
c0027131:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027135:	89 f0                	mov    eax,esi
c0027137:	31 d2                	xor    edx,edx
c0027139:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002713d:	f7 f7                	div    edi
c002713f:	89 e8                	mov    eax,ebp
c0027141:	f7 f7                	div    edi
c0027143:	89 d6                	mov    esi,edx
c0027145:	eb bd                	jmp    c0027104 <__moddi3+0x50>
c0027147:	90                   	nop
c0027148:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002714c:	39 f7                	cmp    edi,esi
c002714e:	76 20                	jbe    c0027170 <__moddi3+0xbc>
c0027150:	89 c8                	mov    eax,ecx
c0027152:	89 f2                	mov    edx,esi
c0027154:	eb b2                	jmp    c0027108 <__moddi3+0x54>
c0027156:	66 90                	xchg   ax,ax
c0027158:	f7 d9                	neg    ecx
c002715a:	83 d3 00             	adc    ebx,0x0
c002715d:	f7 db                	neg    ebx
c002715f:	89 de                	mov    esi,ebx
c0027161:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027169:	e9 6f ff ff ff       	jmp    c00270dd <__moddi3+0x29>
c002716e:	66 90                	xchg   ax,ax
c0027170:	0f bd c7             	bsr    eax,edi
c0027173:	83 f0 1f             	xor    eax,0x1f
c0027176:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002717a:	75 24                	jne    c00271a0 <__moddi3+0xec>
c002717c:	39 f7                	cmp    edi,esi
c002717e:	72 06                	jb     c0027186 <__moddi3+0xd2>
c0027180:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027184:	77 0c                	ja     c0027192 <__moddi3+0xde>
c0027186:	89 e9                	mov    ecx,ebp
c0027188:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002718c:	19 fe                	sbb    esi,edi
c002718e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027192:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027196:	89 f2                	mov    edx,esi
c0027198:	e9 6b ff ff ff       	jmp    c0027108 <__moddi3+0x54>
c002719d:	8d 76 00             	lea    esi,[esi+0x0]
c00271a0:	b8 20 00 00 00       	mov    eax,0x20
c00271a5:	89 c2                	mov    edx,eax
c00271a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00271ab:	29 da                	sub    edx,ebx
c00271ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00271b1:	88 d9                	mov    cl,bl
c00271b3:	d3 e7                	shl    edi,cl
c00271b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00271b9:	88 d1                	mov    cl,dl
c00271bb:	d3 e8                	shr    eax,cl
c00271bd:	09 c7                	or     edi,eax
c00271bf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00271c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00271c7:	89 d8                	mov    eax,ebx
c00271c9:	88 d9                	mov    cl,bl
c00271cb:	d3 e7                	shl    edi,cl
c00271cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00271d1:	89 f3                	mov    ebx,esi
c00271d3:	88 d1                	mov    cl,dl
c00271d5:	d3 eb                	shr    ebx,cl
c00271d7:	89 c7                	mov    edi,eax
c00271d9:	88 c1                	mov    cl,al
c00271db:	d3 e6                	shl    esi,cl
c00271dd:	89 e8                	mov    eax,ebp
c00271df:	88 d1                	mov    cl,dl
c00271e1:	d3 e8                	shr    eax,cl
c00271e3:	09 f0                	or     eax,esi
c00271e5:	89 f9                	mov    ecx,edi
c00271e7:	d3 e5                	shl    ebp,cl
c00271e9:	89 da                	mov    edx,ebx
c00271eb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00271ef:	89 d3                	mov    ebx,edx
c00271f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00271f5:	89 c6                	mov    esi,eax
c00271f7:	89 d1                	mov    ecx,edx
c00271f9:	39 d3                	cmp    ebx,edx
c00271fb:	72 27                	jb     c0027224 <__moddi3+0x170>
c00271fd:	74 21                	je     c0027220 <__moddi3+0x16c>
c00271ff:	29 f5                	sub    ebp,esi
c0027201:	19 cb                	sbb    ebx,ecx
c0027203:	89 de                	mov    esi,ebx
c0027205:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027209:	d3 e6                	shl    esi,cl
c002720b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002720f:	89 f9                	mov    ecx,edi
c0027211:	d3 ed                	shr    ebp,cl
c0027213:	09 ee                	or     esi,ebp
c0027215:	89 f0                	mov    eax,esi
c0027217:	d3 eb                	shr    ebx,cl
c0027219:	89 da                	mov    edx,ebx
c002721b:	e9 e8 fe ff ff       	jmp    c0027108 <__moddi3+0x54>
c0027220:	39 c5                	cmp    ebp,eax
c0027222:	73 db                	jae    c00271ff <__moddi3+0x14b>
c0027224:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027228:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002722c:	89 d1                	mov    ecx,edx
c002722e:	89 c6                	mov    esi,eax
c0027230:	eb cd                	jmp    c00271ff <__moddi3+0x14b>
c0027232:	66 90                	xchg   ax,ax

c0027234 <__udivdi3>:
c0027234:	55                   	push   ebp
c0027235:	57                   	push   edi
c0027236:	56                   	push   esi
c0027237:	53                   	push   ebx
c0027238:	83 ec 1c             	sub    esp,0x1c
c002723b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002723f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027243:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027247:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002724b:	85 d2                	test   edx,edx
c002724d:	75 41                	jne    c0027290 <__udivdi3+0x5c>
c002724f:	39 f7                	cmp    edi,esi
c0027251:	76 15                	jbe    c0027268 <__udivdi3+0x34>
c0027253:	89 e8                	mov    eax,ebp
c0027255:	89 f2                	mov    edx,esi
c0027257:	f7 f7                	div    edi
c0027259:	31 db                	xor    ebx,ebx
c002725b:	89 da                	mov    edx,ebx
c002725d:	83 c4 1c             	add    esp,0x1c
c0027260:	5b                   	pop    ebx
c0027261:	5e                   	pop    esi
c0027262:	5f                   	pop    edi
c0027263:	5d                   	pop    ebp
c0027264:	c3                   	ret    
c0027265:	8d 76 00             	lea    esi,[esi+0x0]
c0027268:	89 f9                	mov    ecx,edi
c002726a:	85 ff                	test   edi,edi
c002726c:	75 0b                	jne    c0027279 <__udivdi3+0x45>
c002726e:	b8 01 00 00 00       	mov    eax,0x1
c0027273:	31 d2                	xor    edx,edx
c0027275:	f7 f7                	div    edi
c0027277:	89 c1                	mov    ecx,eax
c0027279:	31 d2                	xor    edx,edx
c002727b:	89 f0                	mov    eax,esi
c002727d:	f7 f1                	div    ecx
c002727f:	89 c3                	mov    ebx,eax
c0027281:	89 e8                	mov    eax,ebp
c0027283:	f7 f1                	div    ecx
c0027285:	89 da                	mov    edx,ebx
c0027287:	83 c4 1c             	add    esp,0x1c
c002728a:	5b                   	pop    ebx
c002728b:	5e                   	pop    esi
c002728c:	5f                   	pop    edi
c002728d:	5d                   	pop    ebp
c002728e:	c3                   	ret    
c002728f:	90                   	nop
c0027290:	39 f2                	cmp    edx,esi
c0027292:	77 1c                	ja     c00272b0 <__udivdi3+0x7c>
c0027294:	0f bd da             	bsr    ebx,edx
c0027297:	83 f3 1f             	xor    ebx,0x1f
c002729a:	75 24                	jne    c00272c0 <__udivdi3+0x8c>
c002729c:	39 f2                	cmp    edx,esi
c002729e:	72 08                	jb     c00272a8 <__udivdi3+0x74>
c00272a0:	39 ef                	cmp    edi,ebp
c00272a2:	0f 87 84 00 00 00    	ja     c002732c <__udivdi3+0xf8>
c00272a8:	b8 01 00 00 00       	mov    eax,0x1
c00272ad:	eb ac                	jmp    c002725b <__udivdi3+0x27>
c00272af:	90                   	nop
c00272b0:	31 db                	xor    ebx,ebx
c00272b2:	31 c0                	xor    eax,eax
c00272b4:	89 da                	mov    edx,ebx
c00272b6:	83 c4 1c             	add    esp,0x1c
c00272b9:	5b                   	pop    ebx
c00272ba:	5e                   	pop    esi
c00272bb:	5f                   	pop    edi
c00272bc:	5d                   	pop    ebp
c00272bd:	c3                   	ret    
c00272be:	66 90                	xchg   ax,ax
c00272c0:	b8 20 00 00 00       	mov    eax,0x20
c00272c5:	29 d8                	sub    eax,ebx
c00272c7:	88 d9                	mov    cl,bl
c00272c9:	d3 e2                	shl    edx,cl
c00272cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00272cf:	89 fa                	mov    edx,edi
c00272d1:	88 c1                	mov    cl,al
c00272d3:	d3 ea                	shr    edx,cl
c00272d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00272d9:	09 d1                	or     ecx,edx
c00272db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00272df:	88 d9                	mov    cl,bl
c00272e1:	d3 e7                	shl    edi,cl
c00272e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00272e7:	89 f7                	mov    edi,esi
c00272e9:	88 c1                	mov    cl,al
c00272eb:	d3 ef                	shr    edi,cl
c00272ed:	88 d9                	mov    cl,bl
c00272ef:	d3 e6                	shl    esi,cl
c00272f1:	89 ea                	mov    edx,ebp
c00272f3:	88 c1                	mov    cl,al
c00272f5:	d3 ea                	shr    edx,cl
c00272f7:	09 d6                	or     esi,edx
c00272f9:	89 f0                	mov    eax,esi
c00272fb:	89 fa                	mov    edx,edi
c00272fd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027301:	89 d7                	mov    edi,edx
c0027303:	89 c6                	mov    esi,eax
c0027305:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027309:	39 d7                	cmp    edi,edx
c002730b:	72 13                	jb     c0027320 <__udivdi3+0xec>
c002730d:	74 09                	je     c0027318 <__udivdi3+0xe4>
c002730f:	89 f0                	mov    eax,esi
c0027311:	31 db                	xor    ebx,ebx
c0027313:	e9 43 ff ff ff       	jmp    c002725b <__udivdi3+0x27>
c0027318:	88 d9                	mov    cl,bl
c002731a:	d3 e5                	shl    ebp,cl
c002731c:	39 c5                	cmp    ebp,eax
c002731e:	73 ef                	jae    c002730f <__udivdi3+0xdb>
c0027320:	8d 46 ff             	lea    eax,[esi-0x1]
c0027323:	31 db                	xor    ebx,ebx
c0027325:	e9 31 ff ff ff       	jmp    c002725b <__udivdi3+0x27>
c002732a:	66 90                	xchg   ax,ax
c002732c:	31 c0                	xor    eax,eax
c002732e:	e9 28 ff ff ff       	jmp    c002725b <__udivdi3+0x27>
c0027333:	90                   	nop

c0027334 <__umoddi3>:
c0027334:	55                   	push   ebp
c0027335:	57                   	push   edi
c0027336:	56                   	push   esi
c0027337:	53                   	push   ebx
c0027338:	83 ec 1c             	sub    esp,0x1c
c002733b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002733f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027343:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027347:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002734b:	89 da                	mov    edx,ebx
c002734d:	85 c0                	test   eax,eax
c002734f:	75 37                	jne    c0027388 <__umoddi3+0x54>
c0027351:	39 df                	cmp    edi,ebx
c0027353:	76 13                	jbe    c0027368 <__umoddi3+0x34>
c0027355:	89 f0                	mov    eax,esi
c0027357:	f7 f7                	div    edi
c0027359:	89 d0                	mov    eax,edx
c002735b:	31 d2                	xor    edx,edx
c002735d:	83 c4 1c             	add    esp,0x1c
c0027360:	5b                   	pop    ebx
c0027361:	5e                   	pop    esi
c0027362:	5f                   	pop    edi
c0027363:	5d                   	pop    ebp
c0027364:	c3                   	ret    
c0027365:	8d 76 00             	lea    esi,[esi+0x0]
c0027368:	89 fd                	mov    ebp,edi
c002736a:	85 ff                	test   edi,edi
c002736c:	75 0b                	jne    c0027379 <__umoddi3+0x45>
c002736e:	b8 01 00 00 00       	mov    eax,0x1
c0027373:	31 d2                	xor    edx,edx
c0027375:	f7 f7                	div    edi
c0027377:	89 c5                	mov    ebp,eax
c0027379:	89 d8                	mov    eax,ebx
c002737b:	31 d2                	xor    edx,edx
c002737d:	f7 f5                	div    ebp
c002737f:	89 f0                	mov    eax,esi
c0027381:	f7 f5                	div    ebp
c0027383:	89 d0                	mov    eax,edx
c0027385:	eb d4                	jmp    c002735b <__umoddi3+0x27>
c0027387:	90                   	nop
c0027388:	89 f1                	mov    ecx,esi
c002738a:	39 d8                	cmp    eax,ebx
c002738c:	76 0a                	jbe    c0027398 <__umoddi3+0x64>
c002738e:	89 f0                	mov    eax,esi
c0027390:	83 c4 1c             	add    esp,0x1c
c0027393:	5b                   	pop    ebx
c0027394:	5e                   	pop    esi
c0027395:	5f                   	pop    edi
c0027396:	5d                   	pop    ebp
c0027397:	c3                   	ret    
c0027398:	0f bd e8             	bsr    ebp,eax
c002739b:	83 f5 1f             	xor    ebp,0x1f
c002739e:	75 1c                	jne    c00273bc <__umoddi3+0x88>
c00273a0:	39 d8                	cmp    eax,ebx
c00273a2:	72 04                	jb     c00273a8 <__umoddi3+0x74>
c00273a4:	39 f7                	cmp    edi,esi
c00273a6:	77 08                	ja     c00273b0 <__umoddi3+0x7c>
c00273a8:	89 da                	mov    edx,ebx
c00273aa:	29 fe                	sub    esi,edi
c00273ac:	19 c2                	sbb    edx,eax
c00273ae:	89 f1                	mov    ecx,esi
c00273b0:	89 c8                	mov    eax,ecx
c00273b2:	83 c4 1c             	add    esp,0x1c
c00273b5:	5b                   	pop    ebx
c00273b6:	5e                   	pop    esi
c00273b7:	5f                   	pop    edi
c00273b8:	5d                   	pop    ebp
c00273b9:	c3                   	ret    
c00273ba:	66 90                	xchg   ax,ax
c00273bc:	ba 20 00 00 00       	mov    edx,0x20
c00273c1:	29 ea                	sub    edx,ebp
c00273c3:	89 e9                	mov    ecx,ebp
c00273c5:	d3 e0                	shl    eax,cl
c00273c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00273cb:	89 f8                	mov    eax,edi
c00273cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00273d1:	88 d1                	mov    cl,dl
c00273d3:	d3 e8                	shr    eax,cl
c00273d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00273d9:	09 c1                	or     ecx,eax
c00273db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00273df:	89 e9                	mov    ecx,ebp
c00273e1:	d3 e7                	shl    edi,cl
c00273e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00273e7:	89 d8                	mov    eax,ebx
c00273e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00273ed:	88 d1                	mov    cl,dl
c00273ef:	d3 e8                	shr    eax,cl
c00273f1:	89 c7                	mov    edi,eax
c00273f3:	89 e9                	mov    ecx,ebp
c00273f5:	d3 e3                	shl    ebx,cl
c00273f7:	89 f0                	mov    eax,esi
c00273f9:	88 d1                	mov    cl,dl
c00273fb:	d3 e8                	shr    eax,cl
c00273fd:	09 d8                	or     eax,ebx
c00273ff:	89 e9                	mov    ecx,ebp
c0027401:	d3 e6                	shl    esi,cl
c0027403:	89 f3                	mov    ebx,esi
c0027405:	89 fa                	mov    edx,edi
c0027407:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002740b:	89 d1                	mov    ecx,edx
c002740d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027411:	89 c6                	mov    esi,eax
c0027413:	89 d7                	mov    edi,edx
c0027415:	39 d1                	cmp    ecx,edx
c0027417:	72 27                	jb     c0027440 <__umoddi3+0x10c>
c0027419:	74 21                	je     c002743c <__umoddi3+0x108>
c002741b:	89 ca                	mov    edx,ecx
c002741d:	29 f3                	sub    ebx,esi
c002741f:	19 fa                	sbb    edx,edi
c0027421:	89 d0                	mov    eax,edx
c0027423:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027427:	d3 e0                	shl    eax,cl
c0027429:	89 e9                	mov    ecx,ebp
c002742b:	d3 eb                	shr    ebx,cl
c002742d:	09 d8                	or     eax,ebx
c002742f:	d3 ea                	shr    edx,cl
c0027431:	83 c4 1c             	add    esp,0x1c
c0027434:	5b                   	pop    ebx
c0027435:	5e                   	pop    esi
c0027436:	5f                   	pop    edi
c0027437:	5d                   	pop    ebp
c0027438:	c3                   	ret    
c0027439:	8d 76 00             	lea    esi,[esi+0x0]
c002743c:	39 c3                	cmp    ebx,eax
c002743e:	73 db                	jae    c002741b <__umoddi3+0xe7>
c0027440:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027444:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027448:	89 d7                	mov    edi,edx
c002744a:	89 c6                	mov    esi,eax
c002744c:	eb cd                	jmp    c002741b <__umoddi3+0xe7>

c002744e <__addsf3>:
c002744e:	55                   	push   ebp
c002744f:	89 e5                	mov    ebp,esp
c0027451:	57                   	push   edi
c0027452:	56                   	push   esi
c0027453:	53                   	push   ebx
c0027454:	83 ec 08             	sub    esp,0x8
c0027457:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002745a:	89 fa                	mov    edx,edi
c002745c:	89 f8                	mov    eax,edi
c002745e:	c1 f8 17             	sar    eax,0x17
c0027461:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027464:	c1 e2 08             	shl    edx,0x8
c0027467:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002746d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027470:	89 de                	mov    esi,ebx
c0027472:	c1 fe 17             	sar    esi,0x17
c0027475:	c1 e3 08             	shl    ebx,0x8
c0027478:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002747e:	31 f0                	xor    eax,esi
c0027480:	0f 88 3b 01 00 00    	js     c00275c1 <__addsf3+0x173>
c0027486:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027489:	29 f1                	sub    ecx,esi
c002748b:	85 c9                	test   ecx,ecx
c002748d:	7e 54                	jle    c00274e3 <__addsf3+0x95>
c002748f:	89 f0                	mov    eax,esi
c0027491:	84 c0                	test   al,al
c0027493:	75 10                	jne    c00274a5 <__addsf3+0x57>
c0027495:	85 db                	test   ebx,ebx
c0027497:	0f 84 aa 02 00 00    	je     c0027747 <__addsf3+0x2f9>
c002749d:	49                   	dec    ecx
c002749e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274a1:	74 38                	je     c00274db <__addsf3+0x8d>
c00274a3:	eb 13                	jmp    c00274b8 <__addsf3+0x6a>
c00274a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274a8:	f7 d0                	not    eax
c00274aa:	84 c0                	test   al,al
c00274ac:	0f 84 95 02 00 00    	je     c0027747 <__addsf3+0x2f9>
c00274b2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00274b8:	83 f9 1f             	cmp    ecx,0x1f
c00274bb:	0f 8f 86 02 00 00    	jg     c0027747 <__addsf3+0x2f9>
c00274c1:	89 de                	mov    esi,ebx
c00274c3:	d3 ee                	shr    esi,cl
c00274c5:	b8 20 00 00 00       	mov    eax,0x20
c00274ca:	29 c8                	sub    eax,ecx
c00274cc:	89 c1                	mov    ecx,eax
c00274ce:	d3 e3                	shl    ebx,cl
c00274d0:	31 c0                	xor    eax,eax
c00274d2:	85 db                	test   ebx,ebx
c00274d4:	0f 95 c0             	setne  al
c00274d7:	09 f0                	or     eax,esi
c00274d9:	01 d0                	add    eax,edx
c00274db:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00274de:	e9 b6 00 00 00       	jmp    c0027599 <__addsf3+0x14b>
c00274e3:	74 5c                	je     c0027541 <__addsf3+0xf3>
c00274e5:	89 f1                	mov    ecx,esi
c00274e7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00274ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274ed:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274f1:	75 14                	jne    c0027507 <__addsf3+0xb9>
c00274f3:	85 d2                	test   edx,edx
c00274f5:	0f 84 4c 02 00 00    	je     c0027747 <__addsf3+0x2f9>
c00274fb:	49                   	dec    ecx
c00274fc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274ff:	0f 84 94 00 00 00    	je     c0027599 <__addsf3+0x14b>
c0027505:	eb 12                	jmp    c0027519 <__addsf3+0xcb>
c0027507:	89 f0                	mov    eax,esi
c0027509:	f7 d0                	not    eax
c002750b:	84 c0                	test   al,al
c002750d:	0f 84 34 02 00 00    	je     c0027747 <__addsf3+0x2f9>
c0027513:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027519:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002751c:	83 f9 1f             	cmp    ecx,0x1f
c002751f:	0f 8f 22 02 00 00    	jg     c0027747 <__addsf3+0x2f9>
c0027525:	89 d7                	mov    edi,edx
c0027527:	d3 ef                	shr    edi,cl
c0027529:	b8 20 00 00 00       	mov    eax,0x20
c002752e:	29 c8                	sub    eax,ecx
c0027530:	89 c1                	mov    ecx,eax
c0027532:	d3 e2                	shl    edx,cl
c0027534:	31 c0                	xor    eax,eax
c0027536:	85 d2                	test   edx,edx
c0027538:	0f 95 c0             	setne  al
c002753b:	09 f8                	or     eax,edi
c002753d:	01 d8                	add    eax,ebx
c002753f:	eb 58                	jmp    c0027599 <__addsf3+0x14b>
c0027541:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027544:	8d 70 01             	lea    esi,[eax+0x1]
c0027547:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002754d:	75 32                	jne    c0027581 <__addsf3+0x133>
c002754f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027553:	75 1f                	jne    c0027574 <__addsf3+0x126>
c0027555:	85 d2                	test   edx,edx
c0027557:	0f 84 e0 01 00 00    	je     c002773d <__addsf3+0x2ef>
c002755d:	85 db                	test   ebx,ebx
c002755f:	0f 84 e2 01 00 00    	je     c0027747 <__addsf3+0x2f9>
c0027565:	89 d0                	mov    eax,edx
c0027567:	01 d8                	add    eax,ebx
c0027569:	0f 89 a9 01 00 00    	jns    c0027718 <__addsf3+0x2ca>
c002756f:	e9 9d 01 00 00       	jmp    c0027711 <__addsf3+0x2c3>
c0027574:	85 d2                	test   edx,edx
c0027576:	0f 85 cb 01 00 00    	jne    c0027747 <__addsf3+0x2f9>
c002757c:	e9 bc 01 00 00       	jmp    c002773d <__addsf3+0x2ef>
c0027581:	31 c0                	xor    eax,eax
c0027583:	89 f1                	mov    ecx,esi
c0027585:	f7 d1                	not    ecx
c0027587:	84 c9                	test   cl,cl
c0027589:	0f 84 90 01 00 00    	je     c002771f <__addsf3+0x2d1>
c002758f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027592:	d1 e8                	shr    eax,1
c0027594:	e9 86 01 00 00       	jmp    c002771f <__addsf3+0x2d1>
c0027599:	85 c0                	test   eax,eax
c002759b:	0f 89 7e 01 00 00    	jns    c002771f <__addsf3+0x2d1>
c00275a1:	46                   	inc    esi
c00275a2:	89 f2                	mov    edx,esi
c00275a4:	f7 d2                	not    edx
c00275a6:	84 d2                	test   dl,dl
c00275a8:	0f 84 6f 01 00 00    	je     c002771d <__addsf3+0x2cf>
c00275ae:	89 c2                	mov    edx,eax
c00275b0:	83 e2 01             	and    edx,0x1
c00275b3:	d1 e8                	shr    eax,1
c00275b5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00275ba:	09 d0                	or     eax,edx
c00275bc:	e9 5e 01 00 00       	jmp    c002771f <__addsf3+0x2d1>
c00275c1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00275c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275c8:	89 f0                	mov    eax,esi
c00275ca:	0f b6 c0             	movzx  eax,al
c00275cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275d0:	29 c1                	sub    ecx,eax
c00275d2:	85 c9                	test   ecx,ecx
c00275d4:	7e 55                	jle    c002762b <__addsf3+0x1dd>
c00275d6:	85 c0                	test   eax,eax
c00275d8:	75 11                	jne    c00275eb <__addsf3+0x19d>
c00275da:	85 db                	test   ebx,ebx
c00275dc:	0f 84 65 01 00 00    	je     c0027747 <__addsf3+0x2f9>
c00275e2:	49                   	dec    ecx
c00275e3:	75 19                	jne    c00275fe <__addsf3+0x1b0>
c00275e5:	89 d0                	mov    eax,edx
c00275e7:	29 d8                	sub    eax,ebx
c00275e9:	eb 38                	jmp    c0027623 <__addsf3+0x1d5>
c00275eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275ee:	f7 d0                	not    eax
c00275f0:	84 c0                	test   al,al
c00275f2:	0f 84 4f 01 00 00    	je     c0027747 <__addsf3+0x2f9>
c00275f8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275fe:	83 f9 1f             	cmp    ecx,0x1f
c0027601:	0f 8f 40 01 00 00    	jg     c0027747 <__addsf3+0x2f9>
c0027607:	89 de                	mov    esi,ebx
c0027609:	d3 ee                	shr    esi,cl
c002760b:	b8 20 00 00 00       	mov    eax,0x20
c0027610:	29 c8                	sub    eax,ecx
c0027612:	89 c1                	mov    ecx,eax
c0027614:	d3 e3                	shl    ebx,cl
c0027616:	31 c0                	xor    eax,eax
c0027618:	85 db                	test   ebx,ebx
c002761a:	0f 95 c0             	setne  al
c002761d:	09 f0                	or     eax,esi
c002761f:	29 c2                	sub    edx,eax
c0027621:	89 d0                	mov    eax,edx
c0027623:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027626:	e9 af 00 00 00       	jmp    c00276da <__addsf3+0x28c>
c002762b:	74 5c                	je     c0027689 <__addsf3+0x23b>
c002762d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027630:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027633:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027637:	75 14                	jne    c002764d <__addsf3+0x1ff>
c0027639:	85 d2                	test   edx,edx
c002763b:	0f 84 06 01 00 00    	je     c0027747 <__addsf3+0x2f9>
c0027641:	48                   	dec    eax
c0027642:	75 1b                	jne    c002765f <__addsf3+0x211>
c0027644:	89 d8                	mov    eax,ebx
c0027646:	29 d0                	sub    eax,edx
c0027648:	e9 8d 00 00 00       	jmp    c00276da <__addsf3+0x28c>
c002764d:	89 f1                	mov    ecx,esi
c002764f:	f7 d1                	not    ecx
c0027651:	84 c9                	test   cl,cl
c0027653:	0f 84 ee 00 00 00    	je     c0027747 <__addsf3+0x2f9>
c0027659:	81 ca 00 00 00 80    	or     edx,0x80000000
c002765f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027662:	83 f8 1f             	cmp    eax,0x1f
c0027665:	0f 8f dc 00 00 00    	jg     c0027747 <__addsf3+0x2f9>
c002766b:	89 d7                	mov    edi,edx
c002766d:	88 c1                	mov    cl,al
c002766f:	d3 ef                	shr    edi,cl
c0027671:	b9 20 00 00 00       	mov    ecx,0x20
c0027676:	29 c1                	sub    ecx,eax
c0027678:	d3 e2                	shl    edx,cl
c002767a:	31 c0                	xor    eax,eax
c002767c:	85 d2                	test   edx,edx
c002767e:	0f 95 c0             	setne  al
c0027681:	09 f8                	or     eax,edi
c0027683:	29 c3                	sub    ebx,eax
c0027685:	89 d8                	mov    eax,ebx
c0027687:	eb 51                	jmp    c00276da <__addsf3+0x28c>
c0027689:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002768c:	40                   	inc    eax
c002768d:	a8 fe                	test   al,0xfe
c002768f:	75 3d                	jne    c00276ce <__addsf3+0x280>
c0027691:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027695:	0f 85 a7 00 00 00    	jne    c0027742 <__addsf3+0x2f4>
c002769b:	85 d2                	test   edx,edx
c002769d:	75 12                	jne    c00276b1 <__addsf3+0x263>
c002769f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276a2:	85 db                	test   ebx,ebx
c00276a4:	0f 85 9d 00 00 00    	jne    c0027747 <__addsf3+0x2f9>
c00276aa:	31 ff                	xor    edi,edi
c00276ac:	e9 96 00 00 00       	jmp    c0027747 <__addsf3+0x2f9>
c00276b1:	85 db                	test   ebx,ebx
c00276b3:	0f 84 8e 00 00 00    	je     c0027747 <__addsf3+0x2f9>
c00276b9:	89 d0                	mov    eax,edx
c00276bb:	29 d8                	sub    eax,ebx
c00276bd:	79 06                	jns    c00276c5 <__addsf3+0x277>
c00276bf:	89 d8                	mov    eax,ebx
c00276c1:	29 d0                	sub    eax,edx
c00276c3:	eb 5a                	jmp    c002771f <__addsf3+0x2d1>
c00276c5:	bf 00 00 00 00       	mov    edi,0x0
c00276ca:	74 7b                	je     c0027747 <__addsf3+0x2f9>
c00276cc:	eb 4a                	jmp    c0027718 <__addsf3+0x2ca>
c00276ce:	89 d0                	mov    eax,edx
c00276d0:	29 d8                	sub    eax,ebx
c00276d2:	79 12                	jns    c00276e6 <__addsf3+0x298>
c00276d4:	89 d8                	mov    eax,ebx
c00276d6:	29 d0                	sub    eax,edx
c00276d8:	eb 09                	jmp    c00276e3 <__addsf3+0x295>
c00276da:	85 c0                	test   eax,eax
c00276dc:	79 41                	jns    c002771f <__addsf3+0x2d1>
c00276de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276e3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00276e6:	31 f6                	xor    esi,esi
c00276e8:	85 c0                	test   eax,eax
c00276ea:	74 33                	je     c002771f <__addsf3+0x2d1>
c00276ec:	0f bd c8             	bsr    ecx,eax
c00276ef:	83 f1 1f             	xor    ecx,0x1f
c00276f2:	d3 e0                	shl    eax,cl
c00276f4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00276f8:	39 ca                	cmp    edx,ecx
c00276fa:	7f 10                	jg     c002770c <__addsf3+0x2be>
c00276fc:	29 d1                	sub    ecx,edx
c00276fe:	41                   	inc    ecx
c00276ff:	d3 e8                	shr    eax,cl
c0027701:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027704:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002770a:	eb 13                	jmp    c002771f <__addsf3+0x2d1>
c002770c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002770f:	29 ce                	sub    esi,ecx
c0027711:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027716:	eb 07                	jmp    c002771f <__addsf3+0x2d1>
c0027718:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002771b:	eb 02                	jmp    c002771f <__addsf3+0x2d1>
c002771d:	31 c0                	xor    eax,eax
c002771f:	89 c2                	mov    edx,eax
c0027721:	c1 ea 08             	shr    edx,0x8
c0027724:	a8 7f                	test   al,0x7f
c0027726:	0f 95 c1             	setne  cl
c0027729:	09 d1                	or     ecx,edx
c002772b:	83 e1 01             	and    ecx,0x1
c002772e:	c1 e8 07             	shr    eax,0x7
c0027731:	21 c8                	and    eax,ecx
c0027733:	c1 e6 17             	shl    esi,0x17
c0027736:	09 d6                	or     esi,edx
c0027738:	8d 3c 30             	lea    edi,[eax+esi*1]
c002773b:	eb 0a                	jmp    c0027747 <__addsf3+0x2f9>
c002773d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027740:	eb 05                	jmp    c0027747 <__addsf3+0x2f9>
c0027742:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027747:	89 f8                	mov    eax,edi
c0027749:	5a                   	pop    edx
c002774a:	59                   	pop    ecx
c002774b:	5b                   	pop    ebx
c002774c:	5e                   	pop    esi
c002774d:	5f                   	pop    edi
c002774e:	5d                   	pop    ebp
c002774f:	c3                   	ret    

c0027750 <__subsf3>:
c0027750:	55                   	push   ebp
c0027751:	89 e5                	mov    ebp,esp
c0027753:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027756:	05 00 00 00 80       	add    eax,0x80000000
c002775b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002775e:	5d                   	pop    ebp
c002775f:	e9 ea fc ff ff       	jmp    c002744e <__addsf3>

c0027764 <__negsf2>:
c0027764:	55                   	push   ebp
c0027765:	89 e5                	mov    ebp,esp
c0027767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002776a:	05 00 00 00 80       	add    eax,0x80000000
c002776f:	5d                   	pop    ebp
c0027770:	c3                   	ret    

c0027771 <__mulsf3>:
c0027771:	55                   	push   ebp
c0027772:	89 e5                	mov    ebp,esp
c0027774:	57                   	push   edi
c0027775:	56                   	push   esi
c0027776:	53                   	push   ebx
c0027777:	83 ec 1c             	sub    esp,0x1c
c002777a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002777d:	89 f0                	mov    eax,esi
c002777f:	89 f1                	mov    ecx,esi
c0027781:	c1 f9 17             	sar    ecx,0x17
c0027784:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027787:	c1 e0 08             	shl    eax,0x8
c002778a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002778f:	89 c1                	mov    ecx,eax
c0027791:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027794:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027797:	89 c7                	mov    edi,eax
c0027799:	c1 ff 17             	sar    edi,0x17
c002779c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00277a0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00277a3:	89 f8                	mov    eax,edi
c00277a5:	0f b6 c0             	movzx  eax,al
c00277a8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277ab:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00277af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00277b2:	42                   	inc    edx
c00277b3:	80 e2 fe             	and    dl,0xfe
c00277b6:	75 7b                	jne    c0027833 <__mulsf3+0xc2>
c00277b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00277bc:	74 54                	je     c0027812 <__mulsf3+0xa1>
c00277be:	85 c9                	test   ecx,ecx
c00277c0:	0f 85 64 01 00 00    	jne    c002792a <__mulsf3+0x1b9>
c00277c6:	8d 57 01             	lea    edx,[edi+0x1]
c00277c9:	80 e2 fe             	and    dl,0xfe
c00277cc:	75 1f                	jne    c00277ed <__mulsf3+0x7c>
c00277ce:	85 c0                	test   eax,eax
c00277d0:	b8 00 00 00 00       	mov    eax,0x0
c00277d5:	74 29                	je     c0027800 <__mulsf3+0x8f>
c00277d7:	53                   	push   ebx
c00277d8:	53                   	push   ebx
c00277d9:	50                   	push   eax
c00277da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277dd:	e8 96 05 00 00       	call   c0027d78 <__nesf2>
c00277e2:	83 c4 10             	add    esp,0x10
c00277e5:	85 c0                	test   eax,eax
c00277e7:	0f 85 3a 01 00 00    	jne    c0027927 <__mulsf3+0x1b6>
c00277ed:	85 ff                	test   edi,edi
c00277ef:	0f 89 35 01 00 00    	jns    c002792a <__mulsf3+0x1b9>
c00277f5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00277fb:	e9 2a 01 00 00       	jmp    c002792a <__mulsf3+0x1b9>
c0027800:	51                   	push   ecx
c0027801:	51                   	push   ecx
c0027802:	50                   	push   eax
c0027803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027806:	e8 6d 05 00 00       	call   c0027d78 <__nesf2>
c002780b:	83 c4 10             	add    esp,0x10
c002780e:	85 c0                	test   eax,eax
c0027810:	eb 15                	jmp    c0027827 <__mulsf3+0xb6>
c0027812:	85 c9                	test   ecx,ecx
c0027814:	74 0b                	je     c0027821 <__mulsf3+0xb0>
c0027816:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027819:	01 c9                	add    ecx,ecx
c002781b:	78 16                	js     c0027833 <__mulsf3+0xc2>
c002781d:	89 d3                	mov    ebx,edx
c002781f:	eb f5                	jmp    c0027816 <__mulsf3+0xa5>
c0027821:	89 f8                	mov    eax,edi
c0027823:	f7 d0                	not    eax
c0027825:	84 c0                	test   al,al
c0027827:	75 c4                	jne    c00277ed <__mulsf3+0x7c>
c0027829:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002782e:	e9 f7 00 00 00       	jmp    c002792a <__mulsf3+0x1b9>
c0027833:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027836:	c1 e6 08             	shl    esi,0x8
c0027839:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002783f:	8d 57 01             	lea    edx,[edi+0x1]
c0027842:	80 e2 fe             	and    dl,0xfe
c0027845:	75 63                	jne    c00278aa <__mulsf3+0x139>
c0027847:	85 c0                	test   eax,eax
c0027849:	74 2f                	je     c002787a <__mulsf3+0x109>
c002784b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002784f:	0f 89 d2 00 00 00    	jns    c0027927 <__mulsf3+0x1b6>
c0027855:	52                   	push   edx
c0027856:	52                   	push   edx
c0027857:	6a 00                	push   0x0
c0027859:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002785c:	e8 dc 04 00 00       	call   c0027d3d <__eqsf2>
c0027861:	83 c4 10             	add    esp,0x10
c0027864:	85 c0                	test   eax,eax
c0027866:	0f 85 bb 00 00 00    	jne    c0027927 <__mulsf3+0x1b6>
c002786c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002786f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027875:	e9 b0 00 00 00       	jmp    c002792a <__mulsf3+0x1b9>
c002787a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002787d:	50                   	push   eax
c002787e:	50                   	push   eax
c002787f:	6a 00                	push   0x0
c0027881:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027884:	e8 b4 04 00 00       	call   c0027d3d <__eqsf2>
c0027889:	83 c4 10             	add    esp,0x10
c002788c:	85 c0                	test   eax,eax
c002788e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027891:	75 0c                	jne    c002789f <__mulsf3+0x12e>
c0027893:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027897:	0f 89 8a 00 00 00    	jns    c0027927 <__mulsf3+0x1b6>
c002789d:	eb cd                	jmp    c002786c <__mulsf3+0xfb>
c002789f:	8d 43 ff             	lea    eax,[ebx-0x1]
c00278a2:	01 f6                	add    esi,esi
c00278a4:	78 04                	js     c00278aa <__mulsf3+0x139>
c00278a6:	89 c3                	mov    ebx,eax
c00278a8:	eb f5                	jmp    c002789f <__mulsf3+0x12e>
c00278aa:	89 c8                	mov    eax,ecx
c00278ac:	0d 00 00 00 80       	or     eax,0x80000000
c00278b1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00278b7:	f7 e6                	mul    esi
c00278b9:	85 c0                	test   eax,eax
c00278bb:	0f 95 c0             	setne  al
c00278be:	0f b6 c0             	movzx  eax,al
c00278c1:	09 c2                	or     edx,eax
c00278c3:	78 03                	js     c00278c8 <__mulsf3+0x157>
c00278c5:	01 d2                	add    edx,edx
c00278c7:	4b                   	dec    ebx
c00278c8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00278ce:	7f 22                	jg     c00278f2 <__mulsf3+0x181>
c00278d0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00278d6:	85 db                	test   ebx,ebx
c00278d8:	7f 23                	jg     c00278fd <__mulsf3+0x18c>
c00278da:	83 fb e9             	cmp    ebx,0xffffffe9
c00278dd:	7c 1a                	jl     c00278f9 <__mulsf3+0x188>
c00278df:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278e5:	b9 01 00 00 00       	mov    ecx,0x1
c00278ea:	29 d9                	sub    ecx,ebx
c00278ec:	d3 ea                	shr    edx,cl
c00278ee:	31 db                	xor    ebx,ebx
c00278f0:	eb 0b                	jmp    c00278fd <__mulsf3+0x18c>
c00278f2:	bb ff 00 00 00       	mov    ebx,0xff
c00278f7:	eb 02                	jmp    c00278fb <__mulsf3+0x18a>
c00278f9:	31 db                	xor    ebx,ebx
c00278fb:	31 d2                	xor    edx,edx
c00278fd:	89 d0                	mov    eax,edx
c00278ff:	c1 e8 08             	shr    eax,0x8
c0027902:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027905:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002790b:	09 fb                	or     ebx,edi
c002790d:	c1 e3 17             	shl    ebx,0x17
c0027910:	09 c3                	or     ebx,eax
c0027912:	f6 c2 7f             	test   dl,0x7f
c0027915:	0f 95 c1             	setne  cl
c0027918:	09 c8                	or     eax,ecx
c002791a:	83 e0 01             	and    eax,0x1
c002791d:	c1 ea 07             	shr    edx,0x7
c0027920:	21 c2                	and    edx,eax
c0027922:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027925:	eb 03                	jmp    c002792a <__mulsf3+0x1b9>
c0027927:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002792a:	89 f0                	mov    eax,esi
c002792c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002792f:	5b                   	pop    ebx
c0027930:	5e                   	pop    esi
c0027931:	5f                   	pop    edi
c0027932:	5d                   	pop    ebp
c0027933:	c3                   	ret    

c0027934 <__divsf3>:
c0027934:	55                   	push   ebp
c0027935:	89 e5                	mov    ebp,esp
c0027937:	57                   	push   edi
c0027938:	56                   	push   esi
c0027939:	53                   	push   ebx
c002793a:	83 ec 1c             	sub    esp,0x1c
c002793d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027940:	89 d8                	mov    eax,ebx
c0027942:	89 d9                	mov    ecx,ebx
c0027944:	c1 f9 17             	sar    ecx,0x17
c0027947:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002794a:	c1 e0 08             	shl    eax,0x8
c002794d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027952:	89 c1                	mov    ecx,eax
c0027954:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027957:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002795a:	89 c7                	mov    edi,eax
c002795c:	c1 ff 17             	sar    edi,0x17
c002795f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027963:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027966:	89 f8                	mov    eax,edi
c0027968:	0f b6 c0             	movzx  eax,al
c002796b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002796e:	29 c6                	sub    esi,eax
c0027970:	83 c6 7f             	add    esi,0x7f
c0027973:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027976:	42                   	inc    edx
c0027977:	80 e2 fe             	and    dl,0xfe
c002797a:	0f 85 9c 00 00 00    	jne    c0027a1c <__divsf3+0xe8>
c0027980:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027984:	74 33                	je     c00279b9 <__divsf3+0x85>
c0027986:	85 c9                	test   ecx,ecx
c0027988:	0f 85 c7 01 00 00    	jne    c0027b55 <__divsf3+0x221>
c002798e:	8d 57 01             	lea    edx,[edi+0x1]
c0027991:	80 e2 fe             	and    dl,0xfe
c0027994:	75 2f                	jne    c00279c5 <__divsf3+0x91>
c0027996:	85 c0                	test   eax,eax
c0027998:	74 2b                	je     c00279c5 <__divsf3+0x91>
c002799a:	51                   	push   ecx
c002799b:	51                   	push   ecx
c002799c:	6a 00                	push   0x0
c002799e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279a1:	e8 d2 03 00 00       	call   c0027d78 <__nesf2>
c00279a6:	83 c4 10             	add    esp,0x10
c00279a9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00279ac:	85 c0                	test   eax,eax
c00279ae:	0f 85 a1 01 00 00    	jne    c0027b55 <__divsf3+0x221>
c00279b4:	e9 92 01 00 00       	jmp    c0027b4b <__divsf3+0x217>
c00279b9:	85 c9                	test   ecx,ecx
c00279bb:	75 1b                	jne    c00279d8 <__divsf3+0xa4>
c00279bd:	8d 57 01             	lea    edx,[edi+0x1]
c00279c0:	80 e2 fe             	and    dl,0xfe
c00279c3:	74 1e                	je     c00279e3 <__divsf3+0xaf>
c00279c5:	85 ff                	test   edi,edi
c00279c7:	0f 89 88 01 00 00    	jns    c0027b55 <__divsf3+0x221>
c00279cd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00279d3:	e9 7d 01 00 00       	jmp    c0027b55 <__divsf3+0x221>
c00279d8:	8d 56 ff             	lea    edx,[esi-0x1]
c00279db:	01 c9                	add    ecx,ecx
c00279dd:	78 3d                	js     c0027a1c <__divsf3+0xe8>
c00279df:	89 d6                	mov    esi,edx
c00279e1:	eb f5                	jmp    c00279d8 <__divsf3+0xa4>
c00279e3:	85 c0                	test   eax,eax
c00279e5:	b8 00 00 00 00       	mov    eax,0x0
c00279ea:	74 18                	je     c0027a04 <__divsf3+0xd0>
c00279ec:	52                   	push   edx
c00279ed:	52                   	push   edx
c00279ee:	50                   	push   eax
c00279ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279f2:	e8 81 03 00 00       	call   c0027d78 <__nesf2>
c00279f7:	83 c4 10             	add    esp,0x10
c00279fa:	85 c0                	test   eax,eax
c00279fc:	0f 85 50 01 00 00    	jne    c0027b52 <__divsf3+0x21e>
c0027a02:	eb c1                	jmp    c00279c5 <__divsf3+0x91>
c0027a04:	56                   	push   esi
c0027a05:	56                   	push   esi
c0027a06:	50                   	push   eax
c0027a07:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a0a:	e8 69 03 00 00       	call   c0027d78 <__nesf2>
c0027a0f:	83 c4 10             	add    esp,0x10
c0027a12:	85 c0                	test   eax,eax
c0027a14:	0f 84 31 01 00 00    	je     c0027b4b <__divsf3+0x217>
c0027a1a:	eb a9                	jmp    c00279c5 <__divsf3+0x91>
c0027a1c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027a1f:	c1 e3 08             	shl    ebx,0x8
c0027a22:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027a28:	8d 57 01             	lea    edx,[edi+0x1]
c0027a2b:	80 e2 fe             	and    dl,0xfe
c0027a2e:	75 71                	jne    c0027aa1 <__divsf3+0x16d>
c0027a30:	85 c0                	test   eax,eax
c0027a32:	ba 00 00 00 00       	mov    edx,0x0
c0027a37:	74 2f                	je     c0027a68 <__divsf3+0x134>
c0027a39:	51                   	push   ecx
c0027a3a:	51                   	push   ecx
c0027a3b:	52                   	push   edx
c0027a3c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a3f:	e8 f9 02 00 00       	call   c0027d3d <__eqsf2>
c0027a44:	83 c4 10             	add    esp,0x10
c0027a47:	85 c0                	test   eax,eax
c0027a49:	0f 85 03 01 00 00    	jne    c0027b52 <__divsf3+0x21e>
c0027a4f:	31 d2                	xor    edx,edx
c0027a51:	89 d3                	mov    ebx,edx
c0027a53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a56:	31 f8                	xor    eax,edi
c0027a58:	0f 89 f7 00 00 00    	jns    c0027b55 <__divsf3+0x221>
c0027a5e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a63:	e9 ed 00 00 00       	jmp    c0027b55 <__divsf3+0x221>
c0027a68:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a6b:	50                   	push   eax
c0027a6c:	50                   	push   eax
c0027a6d:	52                   	push   edx
c0027a6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a71:	e8 c7 02 00 00       	call   c0027d3d <__eqsf2>
c0027a76:	83 c4 10             	add    esp,0x10
c0027a79:	85 c0                	test   eax,eax
c0027a7b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a7e:	75 16                	jne    c0027a96 <__divsf3+0x162>
c0027a80:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a83:	31 fb                	xor    ebx,edi
c0027a85:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a8b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a91:	e9 bf 00 00 00       	jmp    c0027b55 <__divsf3+0x221>
c0027a96:	8d 46 01             	lea    eax,[esi+0x1]
c0027a99:	01 db                	add    ebx,ebx
c0027a9b:	78 04                	js     c0027aa1 <__divsf3+0x16d>
c0027a9d:	89 c6                	mov    esi,eax
c0027a9f:	eb f5                	jmp    c0027a96 <__divsf3+0x162>
c0027aa1:	89 c8                	mov    eax,ecx
c0027aa3:	0d 00 00 00 80       	or     eax,0x80000000
c0027aa8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027aae:	31 d2                	xor    edx,edx
c0027ab0:	39 d8                	cmp    eax,ebx
c0027ab2:	72 07                	jb     c0027abb <__divsf3+0x187>
c0027ab4:	29 d8                	sub    eax,ebx
c0027ab6:	ba 01 00 00 00       	mov    edx,0x1
c0027abb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027ac2:	01 d2                	add    edx,edx
c0027ac4:	89 c1                	mov    ecx,eax
c0027ac6:	01 c0                	add    eax,eax
c0027ac8:	85 c9                	test   ecx,ecx
c0027aca:	78 04                	js     c0027ad0 <__divsf3+0x19c>
c0027acc:	39 c3                	cmp    ebx,eax
c0027ace:	77 05                	ja     c0027ad5 <__divsf3+0x1a1>
c0027ad0:	29 d8                	sub    eax,ebx
c0027ad2:	83 ca 01             	or     edx,0x1
c0027ad5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027ad8:	75 e8                	jne    c0027ac2 <__divsf3+0x18e>
c0027ada:	85 c0                	test   eax,eax
c0027adc:	0f 95 c0             	setne  al
c0027adf:	0f b6 c0             	movzx  eax,al
c0027ae2:	c1 e2 06             	shl    edx,0x6
c0027ae5:	09 c2                	or     edx,eax
c0027ae7:	78 03                	js     c0027aec <__divsf3+0x1b8>
c0027ae9:	01 d2                	add    edx,edx
c0027aeb:	4e                   	dec    esi
c0027aec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027af2:	7f 22                	jg     c0027b16 <__divsf3+0x1e2>
c0027af4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027afa:	85 f6                	test   esi,esi
c0027afc:	7f 23                	jg     c0027b21 <__divsf3+0x1ed>
c0027afe:	83 fe e9             	cmp    esi,0xffffffe9
c0027b01:	7c 1a                	jl     c0027b1d <__divsf3+0x1e9>
c0027b03:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b09:	b9 01 00 00 00       	mov    ecx,0x1
c0027b0e:	29 f1                	sub    ecx,esi
c0027b10:	d3 ea                	shr    edx,cl
c0027b12:	31 f6                	xor    esi,esi
c0027b14:	eb 0b                	jmp    c0027b21 <__divsf3+0x1ed>
c0027b16:	be ff 00 00 00       	mov    esi,0xff
c0027b1b:	eb 02                	jmp    c0027b1f <__divsf3+0x1eb>
c0027b1d:	31 f6                	xor    esi,esi
c0027b1f:	31 d2                	xor    edx,edx
c0027b21:	89 d0                	mov    eax,edx
c0027b23:	c1 e8 08             	shr    eax,0x8
c0027b26:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b29:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b2f:	09 fe                	or     esi,edi
c0027b31:	c1 e6 17             	shl    esi,0x17
c0027b34:	09 c6                	or     esi,eax
c0027b36:	f6 c2 7f             	test   dl,0x7f
c0027b39:	0f 95 c1             	setne  cl
c0027b3c:	09 c8                	or     eax,ecx
c0027b3e:	83 e0 01             	and    eax,0x1
c0027b41:	c1 ea 07             	shr    edx,0x7
c0027b44:	21 c2                	and    edx,eax
c0027b46:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027b49:	eb 0a                	jmp    c0027b55 <__divsf3+0x221>
c0027b4b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027b50:	eb 03                	jmp    c0027b55 <__divsf3+0x221>
c0027b52:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b55:	89 d8                	mov    eax,ebx
c0027b57:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b5a:	5b                   	pop    ebx
c0027b5b:	5e                   	pop    esi
c0027b5c:	5f                   	pop    edi
c0027b5d:	5d                   	pop    ebp
c0027b5e:	c3                   	ret    

c0027b5f <__floatsisf>:
c0027b5f:	55                   	push   ebp
c0027b60:	89 e5                	mov    ebp,esp
c0027b62:	53                   	push   ebx
c0027b63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b66:	85 d2                	test   edx,edx
c0027b68:	7e 2b                	jle    c0027b95 <__floatsisf+0x36>
c0027b6a:	0f bd ca             	bsr    ecx,edx
c0027b6d:	83 f1 1f             	xor    ecx,0x1f
c0027b70:	d3 e2                	shl    edx,cl
c0027b72:	89 d0                	mov    eax,edx
c0027b74:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b79:	89 c3                	mov    ebx,eax
c0027b7b:	c1 eb 08             	shr    ebx,0x8
c0027b7e:	80 e2 7f             	and    dl,0x7f
c0027b81:	0f 95 c2             	setne  dl
c0027b84:	09 da                	or     edx,ebx
c0027b86:	83 e2 01             	and    edx,0x1
c0027b89:	c1 e8 07             	shr    eax,0x7
c0027b8c:	21 c2                	and    edx,eax
c0027b8e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b93:	eb 32                	jmp    c0027bc7 <__floatsisf+0x68>
c0027b95:	b8 00 00 00 00       	mov    eax,0x0
c0027b9a:	74 34                	je     c0027bd0 <__floatsisf+0x71>
c0027b9c:	f7 da                	neg    edx
c0027b9e:	0f bd ca             	bsr    ecx,edx
c0027ba1:	83 f1 1f             	xor    ecx,0x1f
c0027ba4:	d3 e2                	shl    edx,cl
c0027ba6:	89 d0                	mov    eax,edx
c0027ba8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bad:	89 c3                	mov    ebx,eax
c0027baf:	c1 eb 08             	shr    ebx,0x8
c0027bb2:	80 e2 7f             	and    dl,0x7f
c0027bb5:	0f 95 c2             	setne  dl
c0027bb8:	09 da                	or     edx,ebx
c0027bba:	83 e2 01             	and    edx,0x1
c0027bbd:	c1 e8 07             	shr    eax,0x7
c0027bc0:	21 c2                	and    edx,eax
c0027bc2:	b8 9e 01 00 00       	mov    eax,0x19e
c0027bc7:	29 c8                	sub    eax,ecx
c0027bc9:	c1 e0 17             	shl    eax,0x17
c0027bcc:	09 d8                	or     eax,ebx
c0027bce:	01 d0                	add    eax,edx
c0027bd0:	5b                   	pop    ebx
c0027bd1:	5d                   	pop    ebp
c0027bd2:	c3                   	ret    

c0027bd3 <__floatunsisf>:
c0027bd3:	55                   	push   ebp
c0027bd4:	89 e5                	mov    ebp,esp
c0027bd6:	53                   	push   ebx
c0027bd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bda:	31 c0                	xor    eax,eax
c0027bdc:	85 d2                	test   edx,edx
c0027bde:	74 32                	je     c0027c12 <__floatunsisf+0x3f>
c0027be0:	0f bd ca             	bsr    ecx,edx
c0027be3:	83 f1 1f             	xor    ecx,0x1f
c0027be6:	d3 e2                	shl    edx,cl
c0027be8:	89 d0                	mov    eax,edx
c0027bea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bef:	89 c3                	mov    ebx,eax
c0027bf1:	c1 eb 08             	shr    ebx,0x8
c0027bf4:	80 e2 7f             	and    dl,0x7f
c0027bf7:	0f 95 c2             	setne  dl
c0027bfa:	09 da                	or     edx,ebx
c0027bfc:	83 e2 01             	and    edx,0x1
c0027bff:	c1 e8 07             	shr    eax,0x7
c0027c02:	21 c2                	and    edx,eax
c0027c04:	b8 9e 00 00 00       	mov    eax,0x9e
c0027c09:	29 c8                	sub    eax,ecx
c0027c0b:	c1 e0 17             	shl    eax,0x17
c0027c0e:	09 d8                	or     eax,ebx
c0027c10:	01 d0                	add    eax,edx
c0027c12:	5b                   	pop    ebx
c0027c13:	5d                   	pop    ebp
c0027c14:	c3                   	ret    

c0027c15 <__fixsfsi>:
c0027c15:	55                   	push   ebp
c0027c16:	89 e5                	mov    ebp,esp
c0027c18:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c1b:	89 d1                	mov    ecx,edx
c0027c1d:	c1 e1 08             	shl    ecx,0x8
c0027c20:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027c26:	c1 fa 17             	sar    edx,0x17
c0027c29:	78 1c                	js     c0027c47 <__fixsfsi+0x32>
c0027c2b:	83 ea 7f             	sub    edx,0x7f
c0027c2e:	31 c0                	xor    eax,eax
c0027c30:	83 fa 1e             	cmp    edx,0x1e
c0027c33:	77 40                	ja     c0027c75 <__fixsfsi+0x60>
c0027c35:	89 c8                	mov    eax,ecx
c0027c37:	0d 00 00 00 80       	or     eax,0x80000000
c0027c3c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c41:	29 d1                	sub    ecx,edx
c0027c43:	d3 e8                	shr    eax,cl
c0027c45:	eb 2e                	jmp    c0027c75 <__fixsfsi+0x60>
c0027c47:	31 c0                	xor    eax,eax
c0027c49:	81 c2 81 00 00 00    	add    edx,0x81
c0027c4f:	78 24                	js     c0027c75 <__fixsfsi+0x60>
c0027c51:	83 fa 1e             	cmp    edx,0x1e
c0027c54:	7e 09                	jle    c0027c5f <__fixsfsi+0x4a>
c0027c56:	83 fa 1f             	cmp    edx,0x1f
c0027c59:	75 18                	jne    c0027c73 <__fixsfsi+0x5e>
c0027c5b:	85 c9                	test   ecx,ecx
c0027c5d:	75 14                	jne    c0027c73 <__fixsfsi+0x5e>
c0027c5f:	89 c8                	mov    eax,ecx
c0027c61:	0d 00 00 00 80       	or     eax,0x80000000
c0027c66:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c6b:	29 d1                	sub    ecx,edx
c0027c6d:	d3 e8                	shr    eax,cl
c0027c6f:	f7 d8                	neg    eax
c0027c71:	eb 02                	jmp    c0027c75 <__fixsfsi+0x60>
c0027c73:	31 c0                	xor    eax,eax
c0027c75:	5d                   	pop    ebp
c0027c76:	c3                   	ret    

c0027c77 <__fixunssfsi>:
c0027c77:	55                   	push   ebp
c0027c78:	89 e5                	mov    ebp,esp
c0027c7a:	53                   	push   ebx
c0027c7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c7e:	89 d3                	mov    ebx,edx
c0027c80:	c1 fb 17             	sar    ebx,0x17
c0027c83:	83 eb 7f             	sub    ebx,0x7f
c0027c86:	31 c0                	xor    eax,eax
c0027c88:	83 fb 1f             	cmp    ebx,0x1f
c0027c8b:	77 18                	ja     c0027ca5 <__fixunssfsi+0x2e>
c0027c8d:	89 d0                	mov    eax,edx
c0027c8f:	c1 e0 08             	shl    eax,0x8
c0027c92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c97:	0d 00 00 00 80       	or     eax,0x80000000
c0027c9c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ca1:	29 d9                	sub    ecx,ebx
c0027ca3:	d3 e8                	shr    eax,cl
c0027ca5:	5b                   	pop    ebx
c0027ca6:	5d                   	pop    ebp
c0027ca7:	c3                   	ret    

c0027ca8 <__cmpsf2>:
c0027ca8:	55                   	push   ebp
c0027ca9:	89 e5                	mov    ebp,esp
c0027cab:	57                   	push   edi
c0027cac:	56                   	push   esi
c0027cad:	53                   	push   ebx
c0027cae:	83 ec 24             	sub    esp,0x24
c0027cb1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027cb7:	e8 4f 10 00 00       	call   c0028d0b <__truncdfsf2>
c0027cbc:	5a                   	pop    edx
c0027cbd:	59                   	pop    ecx
c0027cbe:	89 c3                	mov    ebx,eax
c0027cc0:	c1 e8 17             	shr    eax,0x17
c0027cc3:	0f b6 f0             	movzx  esi,al
c0027cc6:	89 d8                	mov    eax,ebx
c0027cc8:	c1 e8 1f             	shr    eax,0x1f
c0027ccb:	31 c6                	xor    esi,eax
c0027ccd:	c1 e3 08             	shl    ebx,0x8
c0027cd0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027cd3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027cd6:	e8 30 10 00 00       	call   c0028d0b <__truncdfsf2>
c0027cdb:	83 c4 10             	add    esp,0x10
c0027cde:	89 c1                	mov    ecx,eax
c0027ce0:	c1 e9 17             	shr    ecx,0x17
c0027ce3:	0f b6 c9             	movzx  ecx,cl
c0027ce6:	89 c7                	mov    edi,eax
c0027ce8:	c1 ef 1f             	shr    edi,0x1f
c0027ceb:	89 ca                	mov    edx,ecx
c0027ced:	31 fa                	xor    edx,edi
c0027cef:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027cf2:	c1 e0 08             	shl    eax,0x8
c0027cf5:	89 c2                	mov    edx,eax
c0027cf7:	89 d8                	mov    eax,ebx
c0027cf9:	09 d0                	or     eax,edx
c0027cfb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d00:	09 f0                	or     eax,esi
c0027d02:	75 08                	jne    c0027d0c <__cmpsf2+0x64>
c0027d04:	31 c0                	xor    eax,eax
c0027d06:	39 f9                	cmp    ecx,edi
c0027d08:	75 0c                	jne    c0027d16 <__cmpsf2+0x6e>
c0027d0a:	eb 29                	jmp    c0027d35 <__cmpsf2+0x8d>
c0027d0c:	b8 01 00 00 00       	mov    eax,0x1
c0027d11:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027d14:	7f 1f                	jg     c0027d35 <__cmpsf2+0x8d>
c0027d16:	83 c8 ff             	or     eax,0xffffffff
c0027d19:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027d1c:	7c 17                	jl     c0027d35 <__cmpsf2+0x8d>
c0027d1e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027d24:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d2a:	b8 01 00 00 00       	mov    eax,0x1
c0027d2f:	39 d3                	cmp    ebx,edx
c0027d31:	77 02                	ja     c0027d35 <__cmpsf2+0x8d>
c0027d33:	19 c0                	sbb    eax,eax
c0027d35:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d38:	5b                   	pop    ebx
c0027d39:	5e                   	pop    esi
c0027d3a:	5f                   	pop    edi
c0027d3b:	5d                   	pop    ebp
c0027d3c:	c3                   	ret    

c0027d3d <__eqsf2>:
c0027d3d:	55                   	push   ebp
c0027d3e:	89 e5                	mov    ebp,esp
c0027d40:	83 ec 24             	sub    esp,0x24
c0027d43:	6a 01                	push   0x1
c0027d45:	83 ec 0c             	sub    esp,0xc
c0027d48:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d4b:	e8 df 10 00 00       	call   c0028e2f <__extendsfdf2>
c0027d50:	83 c4 10             	add    esp,0x10
c0027d53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d56:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d59:	52                   	push   edx
c0027d5a:	50                   	push   eax
c0027d5b:	50                   	push   eax
c0027d5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d5f:	e8 cb 10 00 00       	call   c0028e2f <__extendsfdf2>
c0027d64:	59                   	pop    ecx
c0027d65:	59                   	pop    ecx
c0027d66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d69:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d6c:	52                   	push   edx
c0027d6d:	50                   	push   eax
c0027d6e:	e8 35 ff ff ff       	call   c0027ca8 <__cmpsf2>
c0027d73:	83 c4 20             	add    esp,0x20
c0027d76:	c9                   	leave  
c0027d77:	c3                   	ret    

c0027d78 <__nesf2>:
c0027d78:	eb c3                	jmp    c0027d3d <__eqsf2>

c0027d7a <__gtsf2>:
c0027d7a:	55                   	push   ebp
c0027d7b:	89 e5                	mov    ebp,esp
c0027d7d:	83 ec 24             	sub    esp,0x24
c0027d80:	6a ff                	push   0xffffffff
c0027d82:	83 ec 0c             	sub    esp,0xc
c0027d85:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d88:	e8 a2 10 00 00       	call   c0028e2f <__extendsfdf2>
c0027d8d:	83 c4 10             	add    esp,0x10
c0027d90:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d93:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d96:	52                   	push   edx
c0027d97:	50                   	push   eax
c0027d98:	50                   	push   eax
c0027d99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d9c:	e8 8e 10 00 00       	call   c0028e2f <__extendsfdf2>
c0027da1:	59                   	pop    ecx
c0027da2:	59                   	pop    ecx
c0027da3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027da6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027da9:	52                   	push   edx
c0027daa:	50                   	push   eax
c0027dab:	e8 f8 fe ff ff       	call   c0027ca8 <__cmpsf2>
c0027db0:	83 c4 20             	add    esp,0x20
c0027db3:	c9                   	leave  
c0027db4:	c3                   	ret    

c0027db5 <__gesf2>:
c0027db5:	eb c3                	jmp    c0027d7a <__gtsf2>

c0027db7 <__ltsf2>:
c0027db7:	eb 84                	jmp    c0027d3d <__eqsf2>

c0027db9 <__lesf2>:
c0027db9:	eb 82                	jmp    c0027d3d <__eqsf2>

c0027dbb <__adddf3>:
c0027dbb:	55                   	push   ebp
c0027dbc:	89 e5                	mov    ebp,esp
c0027dbe:	57                   	push   edi
c0027dbf:	56                   	push   esi
c0027dc0:	53                   	push   ebx
c0027dc1:	83 ec 24             	sub    esp,0x24
c0027dc4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027dc7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027dca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027dcd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027dd0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027dd3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027dd6:	89 c8                	mov    eax,ecx
c0027dd8:	89 ce                	mov    esi,ecx
c0027dda:	c1 fe 14             	sar    esi,0x14
c0027ddd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027de0:	89 fb                	mov    ebx,edi
c0027de2:	89 fa                	mov    edx,edi
c0027de4:	c1 e2 0b             	shl    edx,0xb
c0027de7:	c1 e0 0b             	shl    eax,0xb
c0027dea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027def:	c1 eb 15             	shr    ebx,0x15
c0027df2:	09 d8                	or     eax,ebx
c0027df4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027df7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dfa:	c1 fe 14             	sar    esi,0x14
c0027dfd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027e00:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e03:	89 f3                	mov    ebx,esi
c0027e05:	c1 e3 0b             	shl    ebx,0xb
c0027e08:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027e0b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e0e:	c1 e3 0b             	shl    ebx,0xb
c0027e11:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027e17:	c1 ee 15             	shr    esi,0x15
c0027e1a:	09 f3                	or     ebx,esi
c0027e1c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027e1f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e22:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027e25:	0f 88 5f 02 00 00    	js     c002808a <__adddf3+0x2cf>
c0027e2b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e2e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027e31:	85 db                	test   ebx,ebx
c0027e33:	0f 8e c7 00 00 00    	jle    c0027f00 <__adddf3+0x145>
c0027e39:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027e40:	75 1a                	jne    c0027e5c <__adddf3+0xa1>
c0027e42:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e45:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027e48:	0f 84 b2 05 00 00    	je     c0028400 <__adddf3+0x645>
c0027e4e:	4b                   	dec    ebx
c0027e4f:	75 23                	jne    c0027e74 <__adddf3+0xb9>
c0027e51:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027e54:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027e57:	e9 99 00 00 00       	jmp    c0027ef5 <__adddf3+0x13a>
c0027e5c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e5f:	f7 d6                	not    esi
c0027e61:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e67:	0f 84 93 05 00 00    	je     c0028400 <__adddf3+0x645>
c0027e6d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e74:	83 fb 1f             	cmp    ebx,0x1f
c0027e77:	7e 42                	jle    c0027ebb <__adddf3+0x100>
c0027e79:	83 fb 3f             	cmp    ebx,0x3f
c0027e7c:	0f 8f 7e 05 00 00    	jg     c0028400 <__adddf3+0x645>
c0027e82:	83 e3 1f             	and    ebx,0x1f
c0027e85:	89 d9                	mov    ecx,ebx
c0027e87:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e8a:	d3 ef                	shr    edi,cl
c0027e8c:	31 db                	xor    ebx,ebx
c0027e8e:	85 c9                	test   ecx,ecx
c0027e90:	74 15                	je     c0027ea7 <__adddf3+0xec>
c0027e92:	be 20 00 00 00       	mov    esi,0x20
c0027e97:	29 ce                	sub    esi,ecx
c0027e99:	89 f1                	mov    ecx,esi
c0027e9b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e9e:	d3 e6                	shl    esi,cl
c0027ea0:	31 db                	xor    ebx,ebx
c0027ea2:	85 f6                	test   esi,esi
c0027ea4:	0f 95 c3             	setne  bl
c0027ea7:	31 c9                	xor    ecx,ecx
c0027ea9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027ead:	0f 95 c1             	setne  cl
c0027eb0:	09 cf                	or     edi,ecx
c0027eb2:	09 fb                	or     ebx,edi
c0027eb4:	01 da                	add    edx,ebx
c0027eb6:	83 d0 00             	adc    eax,0x0
c0027eb9:	eb 3a                	jmp    c0027ef5 <__adddf3+0x13a>
c0027ebb:	bf 20 00 00 00       	mov    edi,0x20
c0027ec0:	29 df                	sub    edi,ebx
c0027ec2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ec5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ec8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ecb:	d3 e6                	shl    esi,cl
c0027ecd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ed0:	88 d9                	mov    cl,bl
c0027ed2:	d3 ef                	shr    edi,cl
c0027ed4:	09 fe                	or     esi,edi
c0027ed6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ed9:	88 d9                	mov    cl,bl
c0027edb:	d3 ef                	shr    edi,cl
c0027edd:	89 fb                	mov    ebx,edi
c0027edf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ee2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ee5:	d3 e7                	shl    edi,cl
c0027ee7:	85 ff                	test   edi,edi
c0027ee9:	0f 95 c1             	setne  cl
c0027eec:	0f b6 c9             	movzx  ecx,cl
c0027eef:	09 ce                	or     esi,ecx
c0027ef1:	01 f2                	add    edx,esi
c0027ef3:	11 d8                	adc    eax,ebx
c0027ef5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ef8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027efb:	e9 52 01 00 00       	jmp    c0028052 <__adddf3+0x297>
c0027f00:	0f 84 d5 00 00 00    	je     c0027fdb <__adddf3+0x220>
c0027f06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f09:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027f0c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f0f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f12:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f19:	75 20                	jne    c0027f3b <__adddf3+0x180>
c0027f1b:	89 d6                	mov    esi,edx
c0027f1d:	09 c6                	or     esi,eax
c0027f1f:	0f 84 db 04 00 00    	je     c0028400 <__adddf3+0x645>
c0027f25:	4b                   	dec    ebx
c0027f26:	75 29                	jne    c0027f51 <__adddf3+0x196>
c0027f28:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f2e:	01 d1                	add    ecx,edx
c0027f30:	11 c6                	adc    esi,eax
c0027f32:	89 f0                	mov    eax,esi
c0027f34:	89 ca                	mov    edx,ecx
c0027f36:	e9 17 01 00 00       	jmp    c0028052 <__adddf3+0x297>
c0027f3b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f3e:	f7 d6                	not    esi
c0027f40:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f46:	0f 84 b4 04 00 00    	je     c0028400 <__adddf3+0x645>
c0027f4c:	0d 00 00 00 80       	or     eax,0x80000000
c0027f51:	83 fb 1f             	cmp    ebx,0x1f
c0027f54:	7e 48                	jle    c0027f9e <__adddf3+0x1e3>
c0027f56:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f59:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f5c:	83 fb 3f             	cmp    ebx,0x3f
c0027f5f:	0f 8f 9b 04 00 00    	jg     c0028400 <__adddf3+0x645>
c0027f65:	83 e3 1f             	and    ebx,0x1f
c0027f68:	89 d9                	mov    ecx,ebx
c0027f6a:	89 c7                	mov    edi,eax
c0027f6c:	d3 ef                	shr    edi,cl
c0027f6e:	31 db                	xor    ebx,ebx
c0027f70:	85 c9                	test   ecx,ecx
c0027f72:	74 12                	je     c0027f86 <__adddf3+0x1cb>
c0027f74:	be 20 00 00 00       	mov    esi,0x20
c0027f79:	29 ce                	sub    esi,ecx
c0027f7b:	89 f1                	mov    ecx,esi
c0027f7d:	d3 e0                	shl    eax,cl
c0027f7f:	31 db                	xor    ebx,ebx
c0027f81:	85 c0                	test   eax,eax
c0027f83:	0f 95 c3             	setne  bl
c0027f86:	31 c0                	xor    eax,eax
c0027f88:	85 d2                	test   edx,edx
c0027f8a:	0f 95 c0             	setne  al
c0027f8d:	09 c7                	or     edi,eax
c0027f8f:	09 fb                	or     ebx,edi
c0027f91:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f94:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f97:	01 da                	add    edx,ebx
c0027f99:	83 d6 00             	adc    esi,0x0
c0027f9c:	eb 39                	jmp    c0027fd7 <__adddf3+0x21c>
c0027f9e:	be 20 00 00 00       	mov    esi,0x20
c0027fa3:	29 de                	sub    esi,ebx
c0027fa5:	89 c7                	mov    edi,eax
c0027fa7:	89 f1                	mov    ecx,esi
c0027fa9:	d3 e7                	shl    edi,cl
c0027fab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027fae:	89 d7                	mov    edi,edx
c0027fb0:	88 d9                	mov    cl,bl
c0027fb2:	d3 ef                	shr    edi,cl
c0027fb4:	89 f9                	mov    ecx,edi
c0027fb6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fb9:	09 cf                	or     edi,ecx
c0027fbb:	88 d9                	mov    cl,bl
c0027fbd:	d3 e8                	shr    eax,cl
c0027fbf:	89 f1                	mov    ecx,esi
c0027fc1:	d3 e2                	shl    edx,cl
c0027fc3:	85 d2                	test   edx,edx
c0027fc5:	0f 95 c2             	setne  dl
c0027fc8:	0f b6 d2             	movzx  edx,dl
c0027fcb:	09 d7                	or     edi,edx
c0027fcd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fd0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027fd3:	01 fa                	add    edx,edi
c0027fd5:	11 c6                	adc    esi,eax
c0027fd7:	89 f0                	mov    eax,esi
c0027fd9:	eb 77                	jmp    c0028052 <__adddf3+0x297>
c0027fdb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027fde:	46                   	inc    esi
c0027fdf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027fe2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fe8:	75 41                	jne    c002802b <__adddf3+0x270>
c0027fea:	89 d3                	mov    ebx,edx
c0027fec:	09 c3                	or     ebx,eax
c0027fee:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ff5:	75 27                	jne    c002801e <__adddf3+0x263>
c0027ff7:	85 db                	test   ebx,ebx
c0027ff9:	0f 84 fb 03 00 00    	je     c00283fa <__adddf3+0x63f>
c0027fff:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028002:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028005:	0f 84 f5 03 00 00    	je     c0028400 <__adddf3+0x645>
c002800b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002800e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028011:	85 c0                	test   eax,eax
c0028013:	0f 89 91 03 00 00    	jns    c00283aa <__adddf3+0x5ef>
c0028019:	e9 85 03 00 00       	jmp    c00283a3 <__adddf3+0x5e8>
c002801e:	85 db                	test   ebx,ebx
c0028020:	0f 85 da 03 00 00    	jne    c0028400 <__adddf3+0x645>
c0028026:	e9 cf 03 00 00       	jmp    c00283fa <__adddf3+0x63f>
c002802b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002802e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028031:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028034:	f7 d1                	not    ecx
c0028036:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002803c:	0f 84 70 03 00 00    	je     c00283b2 <__adddf3+0x5f7>
c0028042:	d1 ea                	shr    edx,1
c0028044:	89 c1                	mov    ecx,eax
c0028046:	c1 e1 1f             	shl    ecx,0x1f
c0028049:	09 ca                	or     edx,ecx
c002804b:	d1 e8                	shr    eax,1
c002804d:	e9 6f 03 00 00       	jmp    c00283c1 <__adddf3+0x606>
c0028052:	85 c0                	test   eax,eax
c0028054:	0f 89 67 03 00 00    	jns    c00283c1 <__adddf3+0x606>
c002805a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002805d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028060:	f7 d1                	not    ecx
c0028062:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028068:	0f 84 44 03 00 00    	je     c00283b2 <__adddf3+0x5f7>
c002806e:	89 d1                	mov    ecx,edx
c0028070:	d1 e9                	shr    ecx,1
c0028072:	83 e2 01             	and    edx,0x1
c0028075:	09 ca                	or     edx,ecx
c0028077:	89 c1                	mov    ecx,eax
c0028079:	c1 e1 1f             	shl    ecx,0x1f
c002807c:	09 ca                	or     edx,ecx
c002807e:	d1 e8                	shr    eax,1
c0028080:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028085:	e9 37 03 00 00       	jmp    c00283c1 <__adddf3+0x606>
c002808a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002808d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028093:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028096:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028099:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002809f:	29 de                	sub    esi,ebx
c00280a1:	85 f6                	test   esi,esi
c00280a3:	0f 8e bd 00 00 00    	jle    c0028166 <__adddf3+0x3ab>
c00280a9:	85 db                	test   ebx,ebx
c00280ab:	75 17                	jne    c00280c4 <__adddf3+0x309>
c00280ad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00280b0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00280b3:	0f 84 47 03 00 00    	je     c0028400 <__adddf3+0x645>
c00280b9:	4e                   	dec    esi
c00280ba:	75 20                	jne    c00280dc <__adddf3+0x321>
c00280bc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00280bf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00280c2:	eb 5b                	jmp    c002811f <__adddf3+0x364>
c00280c4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00280c7:	f7 d3                	not    ebx
c00280c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280cf:	0f 84 2b 03 00 00    	je     c0028400 <__adddf3+0x645>
c00280d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00280dc:	83 fe 1f             	cmp    esi,0x1f
c00280df:	7e 49                	jle    c002812a <__adddf3+0x36f>
c00280e1:	83 fe 3f             	cmp    esi,0x3f
c00280e4:	0f 8f 16 03 00 00    	jg     c0028400 <__adddf3+0x645>
c00280ea:	83 e6 1f             	and    esi,0x1f
c00280ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280f0:	89 f1                	mov    ecx,esi
c00280f2:	d3 ef                	shr    edi,cl
c00280f4:	31 db                	xor    ebx,ebx
c00280f6:	85 f6                	test   esi,esi
c00280f8:	74 13                	je     c002810d <__adddf3+0x352>
c00280fa:	b9 20 00 00 00       	mov    ecx,0x20
c00280ff:	29 f1                	sub    ecx,esi
c0028101:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028104:	d3 e6                	shl    esi,cl
c0028106:	31 db                	xor    ebx,ebx
c0028108:	85 f6                	test   esi,esi
c002810a:	0f 95 c3             	setne  bl
c002810d:	31 c9                	xor    ecx,ecx
c002810f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028113:	0f 95 c1             	setne  cl
c0028116:	09 cf                	or     edi,ecx
c0028118:	09 fb                	or     ebx,edi
c002811a:	29 da                	sub    edx,ebx
c002811c:	83 d8 00             	sbb    eax,0x0
c002811f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028122:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028125:	e9 aa 01 00 00       	jmp    c00282d4 <__adddf3+0x519>
c002812a:	bf 20 00 00 00       	mov    edi,0x20
c002812f:	29 f7                	sub    edi,esi
c0028131:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028134:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028137:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002813a:	d3 e3                	shl    ebx,cl
c002813c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002813f:	89 f1                	mov    ecx,esi
c0028141:	d3 ef                	shr    edi,cl
c0028143:	09 fb                	or     ebx,edi
c0028145:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028148:	89 f1                	mov    ecx,esi
c002814a:	d3 ef                	shr    edi,cl
c002814c:	89 fe                	mov    esi,edi
c002814e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028151:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028154:	d3 e7                	shl    edi,cl
c0028156:	85 ff                	test   edi,edi
c0028158:	0f 95 c1             	setne  cl
c002815b:	0f b6 c9             	movzx  ecx,cl
c002815e:	09 cb                	or     ebx,ecx
c0028160:	29 da                	sub    edx,ebx
c0028162:	19 f0                	sbb    eax,esi
c0028164:	eb b9                	jmp    c002811f <__adddf3+0x364>
c0028166:	0f 84 cd 00 00 00    	je     c0028239 <__adddf3+0x47e>
c002816c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002816f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028172:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028175:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028179:	75 1b                	jne    c0028196 <__adddf3+0x3db>
c002817b:	89 d6                	mov    esi,edx
c002817d:	09 c6                	or     esi,eax
c002817f:	0f 84 7b 02 00 00    	je     c0028400 <__adddf3+0x645>
c0028185:	4b                   	dec    ebx
c0028186:	75 24                	jne    c00281ac <__adddf3+0x3f1>
c0028188:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002818b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002818e:	29 d1                	sub    ecx,edx
c0028190:	19 c6                	sbb    esi,eax
c0028192:	89 ca                	mov    edx,ecx
c0028194:	eb 61                	jmp    c00281f7 <__adddf3+0x43c>
c0028196:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028199:	f7 d6                	not    esi
c002819b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00281a1:	0f 84 59 02 00 00    	je     c0028400 <__adddf3+0x645>
c00281a7:	0d 00 00 00 80       	or     eax,0x80000000
c00281ac:	83 fb 1f             	cmp    ebx,0x1f
c00281af:	7e 4d                	jle    c00281fe <__adddf3+0x443>
c00281b1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281b4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281b7:	83 fb 3f             	cmp    ebx,0x3f
c00281ba:	0f 8f 40 02 00 00    	jg     c0028400 <__adddf3+0x645>
c00281c0:	83 e3 1f             	and    ebx,0x1f
c00281c3:	89 d9                	mov    ecx,ebx
c00281c5:	89 c7                	mov    edi,eax
c00281c7:	d3 ef                	shr    edi,cl
c00281c9:	31 db                	xor    ebx,ebx
c00281cb:	85 c9                	test   ecx,ecx
c00281cd:	74 12                	je     c00281e1 <__adddf3+0x426>
c00281cf:	be 20 00 00 00       	mov    esi,0x20
c00281d4:	29 ce                	sub    esi,ecx
c00281d6:	89 f1                	mov    ecx,esi
c00281d8:	d3 e0                	shl    eax,cl
c00281da:	31 db                	xor    ebx,ebx
c00281dc:	85 c0                	test   eax,eax
c00281de:	0f 95 c3             	setne  bl
c00281e1:	31 c0                	xor    eax,eax
c00281e3:	85 d2                	test   edx,edx
c00281e5:	0f 95 c0             	setne  al
c00281e8:	09 c7                	or     edi,eax
c00281ea:	09 fb                	or     ebx,edi
c00281ec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281ef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281f2:	29 da                	sub    edx,ebx
c00281f4:	83 de 00             	sbb    esi,0x0
c00281f7:	89 f0                	mov    eax,esi
c00281f9:	e9 d6 00 00 00       	jmp    c00282d4 <__adddf3+0x519>
c00281fe:	be 20 00 00 00       	mov    esi,0x20
c0028203:	29 de                	sub    esi,ebx
c0028205:	89 c7                	mov    edi,eax
c0028207:	89 f1                	mov    ecx,esi
c0028209:	d3 e7                	shl    edi,cl
c002820b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002820e:	89 d7                	mov    edi,edx
c0028210:	88 d9                	mov    cl,bl
c0028212:	d3 ef                	shr    edi,cl
c0028214:	89 f9                	mov    ecx,edi
c0028216:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028219:	09 cf                	or     edi,ecx
c002821b:	88 d9                	mov    cl,bl
c002821d:	d3 e8                	shr    eax,cl
c002821f:	89 f1                	mov    ecx,esi
c0028221:	d3 e2                	shl    edx,cl
c0028223:	85 d2                	test   edx,edx
c0028225:	0f 95 c2             	setne  dl
c0028228:	0f b6 d2             	movzx  edx,dl
c002822b:	09 d7                	or     edi,edx
c002822d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028230:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028233:	29 fa                	sub    edx,edi
c0028235:	19 c6                	sbb    esi,eax
c0028237:	eb be                	jmp    c00281f7 <__adddf3+0x43c>
c0028239:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002823c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002823f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028245:	75 6a                	jne    c00282b1 <__adddf3+0x4f6>
c0028247:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002824b:	75 58                	jne    c00282a5 <__adddf3+0x4ea>
c002824d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028250:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028253:	89 d6                	mov    esi,edx
c0028255:	09 c6                	or     esi,eax
c0028257:	75 17                	jne    c0028270 <__adddf3+0x4b5>
c0028259:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002825c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002825f:	85 db                	test   ebx,ebx
c0028261:	0f 85 99 01 00 00    	jne    c0028400 <__adddf3+0x645>
c0028267:	31 ff                	xor    edi,edi
c0028269:	31 c9                	xor    ecx,ecx
c002826b:	e9 90 01 00 00       	jmp    c0028400 <__adddf3+0x645>
c0028270:	85 db                	test   ebx,ebx
c0028272:	0f 84 88 01 00 00    	je     c0028400 <__adddf3+0x645>
c0028278:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002827b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002827e:	85 c0                	test   eax,eax
c0028280:	79 10                	jns    c0028292 <__adddf3+0x4d7>
c0028282:	31 c9                	xor    ecx,ecx
c0028284:	f7 da                	neg    edx
c0028286:	0f 95 c1             	setne  cl
c0028289:	01 c8                	add    eax,ecx
c002828b:	f7 d8                	neg    eax
c002828d:	e9 2f 01 00 00       	jmp    c00283c1 <__adddf3+0x606>
c0028292:	31 ff                	xor    edi,edi
c0028294:	31 c9                	xor    ecx,ecx
c0028296:	89 c3                	mov    ebx,eax
c0028298:	09 d3                	or     ebx,edx
c002829a:	0f 84 60 01 00 00    	je     c0028400 <__adddf3+0x645>
c00282a0:	e9 05 01 00 00       	jmp    c00283aa <__adddf3+0x5ef>
c00282a5:	31 ff                	xor    edi,edi
c00282a7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00282ac:	e9 4f 01 00 00       	jmp    c0028400 <__adddf3+0x645>
c00282b1:	89 c1                	mov    ecx,eax
c00282b3:	89 d0                	mov    eax,edx
c00282b5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00282b8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00282bb:	89 ca                	mov    edx,ecx
c00282bd:	85 c9                	test   ecx,ecx
c00282bf:	79 2c                	jns    c00282ed <__adddf3+0x532>
c00282c1:	31 c9                	xor    ecx,ecx
c00282c3:	f7 d8                	neg    eax
c00282c5:	0f 95 c1             	setne  cl
c00282c8:	01 ca                	add    edx,ecx
c00282ca:	f7 da                	neg    edx
c00282cc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282cf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00282d2:	eb 19                	jmp    c00282ed <__adddf3+0x532>
c00282d4:	85 c0                	test   eax,eax
c00282d6:	0f 89 e5 00 00 00    	jns    c00283c1 <__adddf3+0x606>
c00282dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282e1:	89 c1                	mov    ecx,eax
c00282e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282e6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00282e9:	89 d0                	mov    eax,edx
c00282eb:	89 ca                	mov    edx,ecx
c00282ed:	85 d2                	test   edx,edx
c00282ef:	74 59                	je     c002834a <__adddf3+0x58f>
c00282f1:	0f bd da             	bsr    ebx,edx
c00282f4:	83 f3 1f             	xor    ebx,0x1f
c00282f7:	88 d9                	mov    cl,bl
c00282f9:	d3 e2                	shl    edx,cl
c00282fb:	bf 20 00 00 00       	mov    edi,0x20
c0028300:	89 f9                	mov    ecx,edi
c0028302:	29 d9                	sub    ecx,ebx
c0028304:	89 c6                	mov    esi,eax
c0028306:	d3 ee                	shr    esi,cl
c0028308:	09 d6                	or     esi,edx
c002830a:	88 d9                	mov    cl,bl
c002830c:	d3 e0                	shl    eax,cl
c002830e:	89 c2                	mov    edx,eax
c0028310:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028313:	25 ff 07 00 00       	and    eax,0x7ff
c0028318:	39 d8                	cmp    eax,ebx
c002831a:	7f 22                	jg     c002833e <__adddf3+0x583>
c002831c:	29 c3                	sub    ebx,eax
c002831e:	43                   	inc    ebx
c002831f:	88 d9                	mov    cl,bl
c0028321:	d3 ea                	shr    edx,cl
c0028323:	29 df                	sub    edi,ebx
c0028325:	89 f9                	mov    ecx,edi
c0028327:	89 f0                	mov    eax,esi
c0028329:	d3 e0                	shl    eax,cl
c002832b:	09 c2                	or     edx,eax
c002832d:	89 f0                	mov    eax,esi
c002832f:	88 d9                	mov    cl,bl
c0028331:	d3 e8                	shr    eax,cl
c0028333:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028336:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002833c:	eb 6f                	jmp    c00283ad <__adddf3+0x5f2>
c002833e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028341:	29 d8                	sub    eax,ebx
c0028343:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028346:	89 f0                	mov    eax,esi
c0028348:	eb 59                	jmp    c00283a3 <__adddf3+0x5e8>
c002834a:	85 c0                	test   eax,eax
c002834c:	74 6a                	je     c00283b8 <__adddf3+0x5fd>
c002834e:	0f bd c8             	bsr    ecx,eax
c0028351:	83 f1 1f             	xor    ecx,0x1f
c0028354:	d3 e0                	shl    eax,cl
c0028356:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028359:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002835f:	83 c1 20             	add    ecx,0x20
c0028362:	39 cb                	cmp    ebx,ecx
c0028364:	7f 35                	jg     c002839b <__adddf3+0x5e0>
c0028366:	29 d9                	sub    ecx,ebx
c0028368:	8d 71 01             	lea    esi,[ecx+0x1]
c002836b:	83 fe 1f             	cmp    esi,0x1f
c002836e:	7e 09                	jle    c0028379 <__adddf3+0x5be>
c0028370:	83 e9 1f             	sub    ecx,0x1f
c0028373:	d3 e8                	shr    eax,cl
c0028375:	89 c3                	mov    ebx,eax
c0028377:	eb 11                	jmp    c002838a <__adddf3+0x5cf>
c0028379:	b9 20 00 00 00       	mov    ecx,0x20
c002837e:	29 f1                	sub    ecx,esi
c0028380:	89 c3                	mov    ebx,eax
c0028382:	d3 e3                	shl    ebx,cl
c0028384:	89 f1                	mov    ecx,esi
c0028386:	d3 e8                	shr    eax,cl
c0028388:	89 c2                	mov    edx,eax
c002838a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002838d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028392:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028395:	89 d0                	mov    eax,edx
c0028397:	89 da                	mov    edx,ebx
c0028399:	eb 26                	jmp    c00283c1 <__adddf3+0x606>
c002839b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002839e:	29 cf                	sub    edi,ecx
c00283a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283a3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00283a8:	eb 17                	jmp    c00283c1 <__adddf3+0x606>
c00283aa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283ad:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283b0:	eb 0f                	jmp    c00283c1 <__adddf3+0x606>
c00283b2:	31 d2                	xor    edx,edx
c00283b4:	31 c0                	xor    eax,eax
c00283b6:	eb 09                	jmp    c00283c1 <__adddf3+0x606>
c00283b8:	89 c2                	mov    edx,eax
c00283ba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00283c1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283c4:	c1 e1 14             	shl    ecx,0x14
c00283c7:	89 c3                	mov    ebx,eax
c00283c9:	c1 eb 0b             	shr    ebx,0xb
c00283cc:	09 d9                	or     ecx,ebx
c00283ce:	89 d3                	mov    ebx,edx
c00283d0:	c1 eb 0b             	shr    ebx,0xb
c00283d3:	c1 e0 15             	shl    eax,0x15
c00283d6:	09 d8                	or     eax,ebx
c00283d8:	89 c7                	mov    edi,eax
c00283da:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00283e0:	0f 95 c0             	setne  al
c00283e3:	89 c6                	mov    esi,eax
c00283e5:	09 f3                	or     ebx,esi
c00283e7:	83 e3 01             	and    ebx,0x1
c00283ea:	c1 ea 0a             	shr    edx,0xa
c00283ed:	21 da                	and    edx,ebx
c00283ef:	89 f8                	mov    eax,edi
c00283f1:	01 d0                	add    eax,edx
c00283f3:	83 d1 00             	adc    ecx,0x0
c00283f6:	89 c7                	mov    edi,eax
c00283f8:	eb 06                	jmp    c0028400 <__adddf3+0x645>
c00283fa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283fd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028400:	89 f8                	mov    eax,edi
c0028402:	89 ca                	mov    edx,ecx
c0028404:	83 c4 24             	add    esp,0x24
c0028407:	5b                   	pop    ebx
c0028408:	5e                   	pop    esi
c0028409:	5f                   	pop    edi
c002840a:	5d                   	pop    ebp
c002840b:	c3                   	ret    

c002840c <__subdf3>:
c002840c:	55                   	push   ebp
c002840d:	89 e5                	mov    ebp,esp
c002840f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028412:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028415:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002841b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002841e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028421:	5d                   	pop    ebp
c0028422:	e9 94 f9 ff ff       	jmp    c0027dbb <__adddf3>

c0028427 <__negdf2>:
c0028427:	55                   	push   ebp
c0028428:	89 e5                	mov    ebp,esp
c002842a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002842d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028430:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028436:	5d                   	pop    ebp
c0028437:	c3                   	ret    

c0028438 <__muldf3>:
c0028438:	55                   	push   ebp
c0028439:	89 e5                	mov    ebp,esp
c002843b:	57                   	push   edi
c002843c:	56                   	push   esi
c002843d:	53                   	push   ebx
c002843e:	83 ec 24             	sub    esp,0x24
c0028441:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028444:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028447:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002844a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002844d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028450:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028453:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028456:	89 c8                	mov    eax,ecx
c0028458:	c1 f8 14             	sar    eax,0x14
c002845b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002845e:	89 f8                	mov    eax,edi
c0028460:	89 fb                	mov    ebx,edi
c0028462:	c1 e3 0b             	shl    ebx,0xb
c0028465:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028468:	c1 e1 0b             	shl    ecx,0xb
c002846b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028471:	c1 e8 15             	shr    eax,0x15
c0028474:	09 c1                	or     ecx,eax
c0028476:	89 d6                	mov    esi,edx
c0028478:	89 d0                	mov    eax,edx
c002847a:	c1 f8 14             	sar    eax,0x14
c002847d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028480:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028483:	89 c3                	mov    ebx,eax
c0028485:	c1 e3 0b             	shl    ebx,0xb
c0028488:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002848b:	c1 e6 0b             	shl    esi,0xb
c002848e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028494:	c1 e8 15             	shr    eax,0x15
c0028497:	09 c6                	or     esi,eax
c0028499:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002849c:	25 ff 07 00 00       	and    eax,0x7ff
c00284a1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00284a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284a7:	25 ff 07 00 00       	and    eax,0x7ff
c00284ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00284af:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00284b2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00284b5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00284bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00284bf:	40                   	inc    eax
c00284c0:	a9 fe 07 00 00       	test   eax,0x7fe
c00284c5:	0f 85 8d 00 00 00    	jne    c0028558 <__muldf3+0x120>
c00284cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00284ce:	09 c8                	or     eax,ecx
c00284d0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00284d4:	74 44                	je     c002851a <__muldf3+0xe2>
c00284d6:	85 c0                	test   eax,eax
c00284d8:	0f 85 31 02 00 00    	jne    c002870f <__muldf3+0x2d7>
c00284de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284e1:	40                   	inc    eax
c00284e2:	a9 fe 07 00 00       	test   eax,0x7fe
c00284e7:	75 13                	jne    c00284fc <__muldf3+0xc4>
c00284e9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00284ec:	09 f1                	or     ecx,esi
c00284ee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284f2:	74 22                	je     c0028516 <__muldf3+0xde>
c00284f4:	85 c9                	test   ecx,ecx
c00284f6:	0f 85 0d 02 00 00    	jne    c0028709 <__muldf3+0x2d1>
c00284fc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028500:	0f 89 09 02 00 00    	jns    c002870f <__muldf3+0x2d7>
c0028506:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028509:	05 00 00 00 80       	add    eax,0x80000000
c002850e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028511:	e9 f9 01 00 00       	jmp    c002870f <__muldf3+0x2d7>
c0028516:	85 c9                	test   ecx,ecx
c0028518:	eb 2e                	jmp    c0028548 <__muldf3+0x110>
c002851a:	85 c0                	test   eax,eax
c002851c:	74 20                	je     c002853e <__muldf3+0x106>
c002851e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028521:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028524:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028527:	c1 ef 1f             	shr    edi,0x1f
c002852a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002852d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028530:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028533:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028536:	09 f9                	or     ecx,edi
c0028538:	78 1e                	js     c0028558 <__muldf3+0x120>
c002853a:	89 c3                	mov    ebx,eax
c002853c:	eb e0                	jmp    c002851e <__muldf3+0xe6>
c002853e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028541:	f7 d0                	not    eax
c0028543:	a9 ff 07 00 00       	test   eax,0x7ff
c0028548:	75 b2                	jne    c00284fc <__muldf3+0xc4>
c002854a:	31 ff                	xor    edi,edi
c002854c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028553:	e9 b7 01 00 00       	jmp    c002870f <__muldf3+0x2d7>
c0028558:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002855b:	40                   	inc    eax
c002855c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028561:	75 57                	jne    c00285ba <__muldf3+0x182>
c0028563:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028566:	09 f0                	or     eax,esi
c0028568:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002856c:	74 23                	je     c0028591 <__muldf3+0x159>
c002856e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028572:	0f 89 91 01 00 00    	jns    c0028709 <__muldf3+0x2d1>
c0028578:	85 c0                	test   eax,eax
c002857a:	0f 85 89 01 00 00    	jne    c0028709 <__muldf3+0x2d1>
c0028580:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028583:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028589:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002858c:	e9 7e 01 00 00       	jmp    c002870f <__muldf3+0x2d7>
c0028591:	85 c0                	test   eax,eax
c0028593:	75 0c                	jne    c00285a1 <__muldf3+0x169>
c0028595:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028599:	0f 89 6a 01 00 00    	jns    c0028709 <__muldf3+0x2d1>
c002859f:	eb df                	jmp    c0028580 <__muldf3+0x148>
c00285a1:	01 f6                	add    esi,esi
c00285a3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285a6:	c1 ea 1f             	shr    edx,0x1f
c00285a9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00285ac:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00285af:	8d 43 ff             	lea    eax,[ebx-0x1]
c00285b2:	09 d6                	or     esi,edx
c00285b4:	78 04                	js     c00285ba <__muldf3+0x182>
c00285b6:	89 c3                	mov    ebx,eax
c00285b8:	eb e7                	jmp    c00285a1 <__muldf3+0x169>
c00285ba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00285c0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285c6:	89 c8                	mov    eax,ecx
c00285c8:	f7 e6                	mul    esi
c00285ca:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00285cd:	89 c7                	mov    edi,eax
c00285cf:	89 c8                	mov    eax,ecx
c00285d1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285d4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00285d7:	89 c1                	mov    ecx,eax
c00285d9:	89 f0                	mov    eax,esi
c00285db:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00285de:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00285e1:	89 c6                	mov    esi,eax
c00285e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285e6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285e9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00285ec:	31 c0                	xor    eax,eax
c00285ee:	01 f1                	add    ecx,esi
c00285f0:	0f 92 c0             	setb   al
c00285f3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00285f6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00285f9:	83 d6 00             	adc    esi,0x0
c00285fc:	01 c7                	add    edi,eax
c00285fe:	83 d6 00             	adc    esi,0x0
c0028601:	01 ca                	add    edx,ecx
c0028603:	0f 92 c1             	setb   cl
c0028606:	0f b6 c9             	movzx  ecx,cl
c0028609:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002860c:	83 d6 00             	adc    esi,0x0
c002860f:	01 cf                	add    edi,ecx
c0028611:	83 d6 00             	adc    esi,0x0
c0028614:	31 c9                	xor    ecx,ecx
c0028616:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028619:	0f 95 c1             	setne  cl
c002861c:	09 cf                	or     edi,ecx
c002861e:	85 f6                	test   esi,esi
c0028620:	78 0c                	js     c002862e <__muldf3+0x1f6>
c0028622:	01 f6                	add    esi,esi
c0028624:	89 f8                	mov    eax,edi
c0028626:	c1 e8 1f             	shr    eax,0x1f
c0028629:	09 c6                	or     esi,eax
c002862b:	01 ff                	add    edi,edi
c002862d:	4b                   	dec    ebx
c002862e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028634:	0f 8f 85 00 00 00    	jg     c00286bf <__muldf3+0x287>
c002863a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028640:	85 db                	test   ebx,ebx
c0028642:	0f 8f 84 00 00 00    	jg     c00286cc <__muldf3+0x294>
c0028648:	83 fb cc             	cmp    ebx,0xffffffcc
c002864b:	7c 79                	jl     c00286c6 <__muldf3+0x28e>
c002864d:	ba 01 00 00 00       	mov    edx,0x1
c0028652:	29 da                	sub    edx,ebx
c0028654:	81 ce 00 00 00 80    	or     esi,0x80000000
c002865a:	83 fa 1f             	cmp    edx,0x1f
c002865d:	7e 30                	jle    c002868f <__muldf3+0x257>
c002865f:	83 fa 20             	cmp    edx,0x20
c0028662:	75 0b                	jne    c002866f <__muldf3+0x237>
c0028664:	31 c0                	xor    eax,eax
c0028666:	85 ff                	test   edi,edi
c0028668:	0f 95 c0             	setne  al
c002866b:	89 c7                	mov    edi,eax
c002866d:	eb 1a                	jmp    c0028689 <__muldf3+0x251>
c002866f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028672:	89 f0                	mov    eax,esi
c0028674:	d3 e0                	shl    eax,cl
c0028676:	09 f8                	or     eax,edi
c0028678:	0f 95 c0             	setne  al
c002867b:	0f b6 c0             	movzx  eax,al
c002867e:	89 c7                	mov    edi,eax
c0028680:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028685:	29 d9                	sub    ecx,ebx
c0028687:	d3 ee                	shr    esi,cl
c0028689:	09 f7                	or     edi,esi
c002868b:	31 db                	xor    ebx,ebx
c002868d:	eb 3b                	jmp    c00286ca <__muldf3+0x292>
c002868f:	83 c3 1f             	add    ebx,0x1f
c0028692:	89 f0                	mov    eax,esi
c0028694:	88 d9                	mov    cl,bl
c0028696:	d3 e0                	shl    eax,cl
c0028698:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002869b:	89 f8                	mov    eax,edi
c002869d:	88 d1                	mov    cl,dl
c002869f:	d3 e8                	shr    eax,cl
c00286a1:	89 c1                	mov    ecx,eax
c00286a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00286a6:	09 c8                	or     eax,ecx
c00286a8:	88 d9                	mov    cl,bl
c00286aa:	d3 e7                	shl    edi,cl
c00286ac:	31 db                	xor    ebx,ebx
c00286ae:	85 ff                	test   edi,edi
c00286b0:	0f 95 c3             	setne  bl
c00286b3:	89 df                	mov    edi,ebx
c00286b5:	09 c7                	or     edi,eax
c00286b7:	88 d1                	mov    cl,dl
c00286b9:	d3 ee                	shr    esi,cl
c00286bb:	31 db                	xor    ebx,ebx
c00286bd:	eb 0d                	jmp    c00286cc <__muldf3+0x294>
c00286bf:	bb ff 07 00 00       	mov    ebx,0x7ff
c00286c4:	eb 02                	jmp    c00286c8 <__muldf3+0x290>
c00286c6:	31 db                	xor    ebx,ebx
c00286c8:	31 ff                	xor    edi,edi
c00286ca:	31 f6                	xor    esi,esi
c00286cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286cf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00286d2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00286d7:	09 c3                	or     ebx,eax
c00286d9:	c1 e3 14             	shl    ebx,0x14
c00286dc:	89 f0                	mov    eax,esi
c00286de:	c1 e8 0b             	shr    eax,0xb
c00286e1:	09 c3                	or     ebx,eax
c00286e3:	89 f8                	mov    eax,edi
c00286e5:	c1 e8 0b             	shr    eax,0xb
c00286e8:	c1 e6 15             	shl    esi,0x15
c00286eb:	09 c6                	or     esi,eax
c00286ed:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00286f3:	0f 95 c1             	setne  cl
c00286f6:	09 c8                	or     eax,ecx
c00286f8:	83 e0 01             	and    eax,0x1
c00286fb:	c1 ef 0a             	shr    edi,0xa
c00286fe:	21 c7                	and    edi,eax
c0028700:	01 f7                	add    edi,esi
c0028702:	83 d3 00             	adc    ebx,0x0
c0028705:	89 da                	mov    edx,ebx
c0028707:	eb 03                	jmp    c002870c <__muldf3+0x2d4>
c0028709:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002870c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002870f:	89 f8                	mov    eax,edi
c0028711:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028714:	83 c4 24             	add    esp,0x24
c0028717:	5b                   	pop    ebx
c0028718:	5e                   	pop    esi
c0028719:	5f                   	pop    edi
c002871a:	5d                   	pop    ebp
c002871b:	c3                   	ret    

c002871c <__divdf3>:
c002871c:	55                   	push   ebp
c002871d:	89 e5                	mov    ebp,esp
c002871f:	57                   	push   edi
c0028720:	56                   	push   esi
c0028721:	53                   	push   ebx
c0028722:	83 ec 2c             	sub    esp,0x2c
c0028725:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028728:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002872b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002872e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028731:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028734:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028737:	89 ce                	mov    esi,ecx
c0028739:	89 c8                	mov    eax,ecx
c002873b:	c1 f8 14             	sar    eax,0x14
c002873e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028741:	89 f8                	mov    eax,edi
c0028743:	89 fb                	mov    ebx,edi
c0028745:	c1 e3 0b             	shl    ebx,0xb
c0028748:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002874b:	c1 e6 0b             	shl    esi,0xb
c002874e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028754:	c1 e8 15             	shr    eax,0x15
c0028757:	09 c6                	or     esi,eax
c0028759:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002875c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002875f:	89 c2                	mov    edx,eax
c0028761:	c1 fa 14             	sar    edx,0x14
c0028764:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028767:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002876a:	89 de                	mov    esi,ebx
c002876c:	c1 e6 0b             	shl    esi,0xb
c002876f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028772:	c1 e0 0b             	shl    eax,0xb
c0028775:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002877a:	c1 eb 15             	shr    ebx,0x15
c002877d:	09 d8                	or     eax,ebx
c002877f:	89 c2                	mov    edx,eax
c0028781:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028784:	25 ff 07 00 00       	and    eax,0x7ff
c0028789:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002878c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002878f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028795:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028798:	29 d8                	sub    eax,ebx
c002879a:	05 ff 03 00 00       	add    eax,0x3ff
c002879f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00287a2:	46                   	inc    esi
c00287a3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00287a9:	0f 85 a5 00 00 00    	jne    c0028854 <__divdf3+0x138>
c00287af:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00287b2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00287b5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00287b9:	74 2a                	je     c00287e5 <__divdf3+0xc9>
c00287bb:	85 f6                	test   esi,esi
c00287bd:	0f 85 cc 02 00 00    	jne    c0028a8f <__divdf3+0x373>
c00287c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287c6:	40                   	inc    eax
c00287c7:	a9 fe 07 00 00       	test   eax,0x7fe
c00287cc:	75 26                	jne    c00287f4 <__divdf3+0xd8>
c00287ce:	85 db                	test   ebx,ebx
c00287d0:	74 22                	je     c00287f4 <__divdf3+0xd8>
c00287d2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287d5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287db:	09 d0                	or     eax,edx
c00287dd:	0f 85 ac 02 00 00    	jne    c0028a8f <__divdf3+0x373>
c00287e3:	eb 63                	jmp    c0028848 <__divdf3+0x12c>
c00287e5:	85 f6                	test   esi,esi
c00287e7:	75 22                	jne    c002880b <__divdf3+0xef>
c00287e9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287ec:	40                   	inc    eax
c00287ed:	a9 fe 07 00 00       	test   eax,0x7fe
c00287f2:	74 36                	je     c002882a <__divdf3+0x10e>
c00287f4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00287f8:	0f 89 91 02 00 00    	jns    c0028a8f <__divdf3+0x373>
c00287fe:	89 f8                	mov    eax,edi
c0028800:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028806:	e9 80 02 00 00       	jmp    c0028a8b <__divdf3+0x36f>
c002880b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002880e:	01 f6                	add    esi,esi
c0028810:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028813:	c1 ef 1f             	shr    edi,0x1f
c0028816:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028819:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002881c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002881f:	09 f7                	or     edi,esi
c0028821:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028824:	78 2e                	js     c0028854 <__divdf3+0x138>
c0028826:	89 c8                	mov    eax,ecx
c0028828:	eb e1                	jmp    c002880b <__divdf3+0xef>
c002882a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002882d:	09 d0                	or     eax,edx
c002882f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028833:	74 0f                	je     c0028844 <__divdf3+0x128>
c0028835:	85 c0                	test   eax,eax
c0028837:	74 bb                	je     c00287f4 <__divdf3+0xd8>
c0028839:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002883c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002883f:	e9 4b 02 00 00       	jmp    c0028a8f <__divdf3+0x373>
c0028844:	85 c0                	test   eax,eax
c0028846:	75 ac                	jne    c00287f4 <__divdf3+0xd8>
c0028848:	31 ff                	xor    edi,edi
c002884a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002884f:	e9 3b 02 00 00       	jmp    c0028a8f <__divdf3+0x373>
c0028854:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028857:	8d 4f 01             	lea    ecx,[edi+0x1]
c002885a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028860:	75 6b                	jne    c00288cd <__divdf3+0x1b1>
c0028862:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028865:	09 d6                	or     esi,edx
c0028867:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002886b:	74 28                	je     c0028895 <__divdf3+0x179>
c002886d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028870:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028873:	85 f6                	test   esi,esi
c0028875:	0f 85 14 02 00 00    	jne    c0028a8f <__divdf3+0x373>
c002887b:	31 ff                	xor    edi,edi
c002887d:	31 c9                	xor    ecx,ecx
c002887f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028882:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028885:	0f 89 04 02 00 00    	jns    c0028a8f <__divdf3+0x373>
c002888b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028890:	e9 fa 01 00 00       	jmp    c0028a8f <__divdf3+0x373>
c0028895:	85 f6                	test   esi,esi
c0028897:	75 1b                	jne    c00288b4 <__divdf3+0x198>
c0028899:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002889c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002889f:	25 00 00 00 80       	and    eax,0x80000000
c00288a4:	31 c9                	xor    ecx,ecx
c00288a6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00288ab:	89 cf                	mov    edi,ecx
c00288ad:	89 c1                	mov    ecx,eax
c00288af:	e9 db 01 00 00       	jmp    c0028a8f <__divdf3+0x373>
c00288b4:	01 d2                	add    edx,edx
c00288b6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288b9:	c1 eb 1f             	shr    ebx,0x1f
c00288bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00288bf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00288c2:	8d 48 01             	lea    ecx,[eax+0x1]
c00288c5:	09 da                	or     edx,ebx
c00288c7:	78 04                	js     c00288cd <__divdf3+0x1b1>
c00288c9:	89 c8                	mov    eax,ecx
c00288cb:	eb e7                	jmp    c00288b4 <__divdf3+0x198>
c00288cd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00288d0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00288d6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00288dc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00288df:	39 d6                	cmp    esi,edx
c00288e1:	77 0d                	ja     c00288f0 <__divdf3+0x1d4>
c00288e3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00288e6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00288e9:	72 1b                	jb     c0028906 <__divdf3+0x1ea>
c00288eb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00288ee:	75 16                	jne    c0028906 <__divdf3+0x1ea>
c00288f0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288f3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288f6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00288f9:	83 de 00             	sbb    esi,0x0
c00288fc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00288ff:	ba 01 00 00 00       	mov    edx,0x1
c0028904:	eb 02                	jmp    c0028908 <__divdf3+0x1ec>
c0028906:	31 d2                	xor    edx,edx
c0028908:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002890f:	31 ff                	xor    edi,edi
c0028911:	01 ff                	add    edi,edi
c0028913:	89 d1                	mov    ecx,edx
c0028915:	c1 e9 1f             	shr    ecx,0x1f
c0028918:	09 cf                	or     edi,ecx
c002891a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002891d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028920:	89 da                	mov    edx,ebx
c0028922:	89 f3                	mov    ebx,esi
c0028924:	8d 34 36             	lea    esi,[esi+esi*1]
c0028927:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002892a:	c1 e9 1f             	shr    ecx,0x1f
c002892d:	09 ce                	or     esi,ecx
c002892f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028932:	01 c9                	add    ecx,ecx
c0028934:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028937:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002893a:	85 db                	test   ebx,ebx
c002893c:	78 29                	js     c0028967 <__divdf3+0x24b>
c002893e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028941:	72 07                	jb     c002894a <__divdf3+0x22e>
c0028943:	75 3c                	jne    c0028981 <__divdf3+0x265>
c0028945:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028948:	77 37                	ja     c0028981 <__divdf3+0x265>
c002894a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002894d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028950:	31 d2                	xor    edx,edx
c0028952:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028955:	0f 97 c2             	seta   dl
c0028958:	29 d6                	sub    esi,edx
c002895a:	89 d9                	mov    ecx,ebx
c002895c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002895f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028962:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028965:	eb 17                	jmp    c002897e <__divdf3+0x262>
c0028967:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002896a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002896d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028970:	0f 97 c1             	seta   cl
c0028973:	0f b6 c9             	movzx  ecx,cl
c0028976:	29 ce                	sub    esi,ecx
c0028978:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002897b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002897e:	83 ca 01             	or     edx,0x1
c0028981:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028984:	75 8b                	jne    c0028911 <__divdf3+0x1f5>
c0028986:	c1 e7 09             	shl    edi,0x9
c0028989:	89 d1                	mov    ecx,edx
c002898b:	c1 e9 17             	shr    ecx,0x17
c002898e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028991:	09 f3                	or     ebx,esi
c0028993:	0f 95 c3             	setne  bl
c0028996:	0f b6 db             	movzx  ebx,bl
c0028999:	c1 e2 09             	shl    edx,0x9
c002899c:	09 d3                	or     ebx,edx
c002899e:	89 ca                	mov    edx,ecx
c00289a0:	09 fa                	or     edx,edi
c00289a2:	78 0c                	js     c00289b0 <__divdf3+0x294>
c00289a4:	01 d2                	add    edx,edx
c00289a6:	89 d9                	mov    ecx,ebx
c00289a8:	c1 e9 1f             	shr    ecx,0x1f
c00289ab:	09 ca                	or     edx,ecx
c00289ad:	01 db                	add    ebx,ebx
c00289af:	48                   	dec    eax
c00289b0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00289b5:	0f 8f 83 00 00 00    	jg     c0028a3e <__divdf3+0x322>
c00289bb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00289c1:	85 c0                	test   eax,eax
c00289c3:	0f 8f 82 00 00 00    	jg     c0028a4b <__divdf3+0x32f>
c00289c9:	83 f8 cc             	cmp    eax,0xffffffcc
c00289cc:	7c 77                	jl     c0028a45 <__divdf3+0x329>
c00289ce:	be 01 00 00 00       	mov    esi,0x1
c00289d3:	29 c6                	sub    esi,eax
c00289d5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00289db:	83 fe 1f             	cmp    esi,0x1f
c00289de:	7e 2f                	jle    c0028a0f <__divdf3+0x2f3>
c00289e0:	83 fe 20             	cmp    esi,0x20
c00289e3:	75 0a                	jne    c00289ef <__divdf3+0x2d3>
c00289e5:	85 db                	test   ebx,ebx
c00289e7:	0f 95 c3             	setne  bl
c00289ea:	0f b6 db             	movzx  ebx,bl
c00289ed:	eb 1a                	jmp    c0028a09 <__divdf3+0x2ed>
c00289ef:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00289f2:	89 d7                	mov    edi,edx
c00289f4:	d3 e7                	shl    edi,cl
c00289f6:	89 f9                	mov    ecx,edi
c00289f8:	09 d9                	or     ecx,ebx
c00289fa:	0f 95 c3             	setne  bl
c00289fd:	0f b6 db             	movzx  ebx,bl
c0028a00:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028a05:	29 c1                	sub    ecx,eax
c0028a07:	d3 ea                	shr    edx,cl
c0028a09:	09 d3                	or     ebx,edx
c0028a0b:	31 c0                	xor    eax,eax
c0028a0d:	eb 3a                	jmp    c0028a49 <__divdf3+0x32d>
c0028a0f:	83 c0 1f             	add    eax,0x1f
c0028a12:	89 d7                	mov    edi,edx
c0028a14:	88 c1                	mov    cl,al
c0028a16:	d3 e7                	shl    edi,cl
c0028a18:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028a1b:	89 df                	mov    edi,ebx
c0028a1d:	89 f1                	mov    ecx,esi
c0028a1f:	d3 ef                	shr    edi,cl
c0028a21:	89 f9                	mov    ecx,edi
c0028a23:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a26:	09 cf                	or     edi,ecx
c0028a28:	88 c1                	mov    cl,al
c0028a2a:	d3 e3                	shl    ebx,cl
c0028a2c:	85 db                	test   ebx,ebx
c0028a2e:	0f 95 c3             	setne  bl
c0028a31:	0f b6 db             	movzx  ebx,bl
c0028a34:	09 fb                	or     ebx,edi
c0028a36:	89 f1                	mov    ecx,esi
c0028a38:	d3 ea                	shr    edx,cl
c0028a3a:	31 c0                	xor    eax,eax
c0028a3c:	eb 0d                	jmp    c0028a4b <__divdf3+0x32f>
c0028a3e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028a43:	eb 02                	jmp    c0028a47 <__divdf3+0x32b>
c0028a45:	31 c0                	xor    eax,eax
c0028a47:	31 db                	xor    ebx,ebx
c0028a49:	31 d2                	xor    edx,edx
c0028a4b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028a4e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028a51:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028a57:	09 c8                	or     eax,ecx
c0028a59:	c1 e0 14             	shl    eax,0x14
c0028a5c:	89 d1                	mov    ecx,edx
c0028a5e:	c1 e9 0b             	shr    ecx,0xb
c0028a61:	09 c8                	or     eax,ecx
c0028a63:	89 c6                	mov    esi,eax
c0028a65:	89 d9                	mov    ecx,ebx
c0028a67:	c1 e9 0b             	shr    ecx,0xb
c0028a6a:	c1 e2 15             	shl    edx,0x15
c0028a6d:	09 ca                	or     edx,ecx
c0028a6f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a75:	0f 95 c0             	setne  al
c0028a78:	09 c1                	or     ecx,eax
c0028a7a:	83 e1 01             	and    ecx,0x1
c0028a7d:	c1 eb 0a             	shr    ebx,0xa
c0028a80:	21 cb                	and    ebx,ecx
c0028a82:	01 d3                	add    ebx,edx
c0028a84:	89 d8                	mov    eax,ebx
c0028a86:	83 d6 00             	adc    esi,0x0
c0028a89:	89 f2                	mov    edx,esi
c0028a8b:	89 c7                	mov    edi,eax
c0028a8d:	89 d1                	mov    ecx,edx
c0028a8f:	89 f8                	mov    eax,edi
c0028a91:	89 ca                	mov    edx,ecx
c0028a93:	83 c4 2c             	add    esp,0x2c
c0028a96:	5b                   	pop    ebx
c0028a97:	5e                   	pop    esi
c0028a98:	5f                   	pop    edi
c0028a99:	5d                   	pop    ebp
c0028a9a:	c3                   	ret    

c0028a9b <__floatsidf>:
c0028a9b:	55                   	push   ebp
c0028a9c:	89 e5                	mov    ebp,esp
c0028a9e:	56                   	push   esi
c0028a9f:	53                   	push   ebx
c0028aa0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028aa3:	85 db                	test   ebx,ebx
c0028aa5:	7e 15                	jle    c0028abc <__floatsidf+0x21>
c0028aa7:	0f bd cb             	bsr    ecx,ebx
c0028aaa:	83 f1 1f             	xor    ecx,0x1f
c0028aad:	d3 e3                	shl    ebx,cl
c0028aaf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ab5:	b8 1e 04 00 00       	mov    eax,0x41e
c0028aba:	eb 21                	jmp    c0028add <__floatsidf+0x42>
c0028abc:	b8 00 00 00 00       	mov    eax,0x0
c0028ac1:	ba 00 00 00 00       	mov    edx,0x0
c0028ac6:	74 2a                	je     c0028af2 <__floatsidf+0x57>
c0028ac8:	f7 db                	neg    ebx
c0028aca:	0f bd cb             	bsr    ecx,ebx
c0028acd:	83 f1 1f             	xor    ecx,0x1f
c0028ad0:	d3 e3                	shl    ebx,cl
c0028ad2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ad8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028add:	29 c8                	sub    eax,ecx
c0028adf:	c1 e0 14             	shl    eax,0x14
c0028ae2:	89 c1                	mov    ecx,eax
c0028ae4:	89 de                	mov    esi,ebx
c0028ae6:	c1 ee 0b             	shr    esi,0xb
c0028ae9:	09 f1                	or     ecx,esi
c0028aeb:	89 ca                	mov    edx,ecx
c0028aed:	c1 e3 15             	shl    ebx,0x15
c0028af0:	89 d8                	mov    eax,ebx
c0028af2:	5b                   	pop    ebx
c0028af3:	5e                   	pop    esi
c0028af4:	5d                   	pop    ebp
c0028af5:	c3                   	ret    

c0028af6 <__floatunsidf>:
c0028af6:	55                   	push   ebp
c0028af7:	89 e5                	mov    ebp,esp
c0028af9:	56                   	push   esi
c0028afa:	53                   	push   ebx
c0028afb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028afe:	85 db                	test   ebx,ebx
c0028b00:	74 2a                	je     c0028b2c <__floatunsidf+0x36>
c0028b02:	0f bd cb             	bsr    ecx,ebx
c0028b05:	83 f1 1f             	xor    ecx,0x1f
c0028b08:	d3 e3                	shl    ebx,cl
c0028b0a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b10:	b8 1e 04 00 00       	mov    eax,0x41e
c0028b15:	29 c8                	sub    eax,ecx
c0028b17:	c1 e0 14             	shl    eax,0x14
c0028b1a:	89 c1                	mov    ecx,eax
c0028b1c:	89 de                	mov    esi,ebx
c0028b1e:	c1 ee 0b             	shr    esi,0xb
c0028b21:	09 f1                	or     ecx,esi
c0028b23:	89 ca                	mov    edx,ecx
c0028b25:	c1 e3 15             	shl    ebx,0x15
c0028b28:	89 d8                	mov    eax,ebx
c0028b2a:	eb 04                	jmp    c0028b30 <__floatunsidf+0x3a>
c0028b2c:	31 c0                	xor    eax,eax
c0028b2e:	31 d2                	xor    edx,edx
c0028b30:	5b                   	pop    ebx
c0028b31:	5e                   	pop    esi
c0028b32:	5d                   	pop    ebp
c0028b33:	c3                   	ret    

c0028b34 <__fixdfsi>:
c0028b34:	55                   	push   ebp
c0028b35:	89 e5                	mov    ebp,esp
c0028b37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b3a:	89 d1                	mov    ecx,edx
c0028b3c:	c1 e1 0b             	shl    ecx,0xb
c0028b3f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028b48:	c1 e8 15             	shr    eax,0x15
c0028b4b:	09 c1                	or     ecx,eax
c0028b4d:	c1 fa 14             	sar    edx,0x14
c0028b50:	78 1f                	js     c0028b71 <__fixdfsi+0x3d>
c0028b52:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028b58:	31 c0                	xor    eax,eax
c0028b5a:	83 fa 1e             	cmp    edx,0x1e
c0028b5d:	77 40                	ja     c0028b9f <__fixdfsi+0x6b>
c0028b5f:	89 c8                	mov    eax,ecx
c0028b61:	0d 00 00 00 80       	or     eax,0x80000000
c0028b66:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b6b:	29 d1                	sub    ecx,edx
c0028b6d:	d3 e8                	shr    eax,cl
c0028b6f:	eb 2e                	jmp    c0028b9f <__fixdfsi+0x6b>
c0028b71:	31 c0                	xor    eax,eax
c0028b73:	81 c2 01 04 00 00    	add    edx,0x401
c0028b79:	78 24                	js     c0028b9f <__fixdfsi+0x6b>
c0028b7b:	83 fa 1e             	cmp    edx,0x1e
c0028b7e:	7e 09                	jle    c0028b89 <__fixdfsi+0x55>
c0028b80:	83 fa 1f             	cmp    edx,0x1f
c0028b83:	75 18                	jne    c0028b9d <__fixdfsi+0x69>
c0028b85:	85 c9                	test   ecx,ecx
c0028b87:	75 14                	jne    c0028b9d <__fixdfsi+0x69>
c0028b89:	89 c8                	mov    eax,ecx
c0028b8b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b90:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b95:	29 d1                	sub    ecx,edx
c0028b97:	d3 e8                	shr    eax,cl
c0028b99:	f7 d8                	neg    eax
c0028b9b:	eb 02                	jmp    c0028b9f <__fixdfsi+0x6b>
c0028b9d:	31 c0                	xor    eax,eax
c0028b9f:	5d                   	pop    ebp
c0028ba0:	c3                   	ret    

c0028ba1 <__fixunsdfsi>:
c0028ba1:	55                   	push   ebp
c0028ba2:	89 e5                	mov    ebp,esp
c0028ba4:	53                   	push   ebx
c0028ba5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028ba8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028bab:	89 d3                	mov    ebx,edx
c0028bad:	c1 fb 14             	sar    ebx,0x14
c0028bb0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028bb6:	31 c0                	xor    eax,eax
c0028bb8:	83 fb 1f             	cmp    ebx,0x1f
c0028bbb:	77 1d                	ja     c0028bda <__fixunsdfsi+0x39>
c0028bbd:	89 d0                	mov    eax,edx
c0028bbf:	c1 e0 0b             	shl    eax,0xb
c0028bc2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028bc7:	c1 e9 15             	shr    ecx,0x15
c0028bca:	09 c8                	or     eax,ecx
c0028bcc:	0d 00 00 00 80       	or     eax,0x80000000
c0028bd1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028bd6:	29 d9                	sub    ecx,ebx
c0028bd8:	d3 e8                	shr    eax,cl
c0028bda:	5b                   	pop    ebx
c0028bdb:	5d                   	pop    ebp
c0028bdc:	c3                   	ret    

c0028bdd <__cmpdf2>:
c0028bdd:	55                   	push   ebp
c0028bde:	89 e5                	mov    ebp,esp
c0028be0:	57                   	push   edi
c0028be1:	56                   	push   esi
c0028be2:	53                   	push   ebx
c0028be3:	83 ec 0c             	sub    esp,0xc
c0028be6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028be9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028bec:	89 ca                	mov    edx,ecx
c0028bee:	c1 ea 14             	shr    edx,0x14
c0028bf1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028bf7:	89 cb                	mov    ebx,ecx
c0028bf9:	c1 fb 1f             	sar    ebx,0x1f
c0028bfc:	31 da                	xor    edx,ebx
c0028bfe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c01:	89 df                	mov    edi,ebx
c0028c03:	c1 e7 0b             	shl    edi,0xb
c0028c06:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028c09:	c1 e1 0b             	shl    ecx,0xb
c0028c0c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c12:	c1 eb 15             	shr    ebx,0x15
c0028c15:	09 d9                	or     ecx,ebx
c0028c17:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028c1a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028c1d:	89 ce                	mov    esi,ecx
c0028c1f:	c1 ee 14             	shr    esi,0x14
c0028c22:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028c28:	89 cb                	mov    ebx,ecx
c0028c2a:	c1 fb 1f             	sar    ebx,0x1f
c0028c2d:	31 de                	xor    esi,ebx
c0028c2f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028c32:	89 df                	mov    edi,ebx
c0028c34:	c1 e7 0b             	shl    edi,0xb
c0028c37:	c1 e1 0b             	shl    ecx,0xb
c0028c3a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c40:	c1 eb 15             	shr    ebx,0x15
c0028c43:	09 d9                	or     ecx,ebx
c0028c45:	89 d3                	mov    ebx,edx
c0028c47:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c4d:	43                   	inc    ebx
c0028c4e:	83 fb 01             	cmp    ebx,0x1
c0028c51:	77 08                	ja     c0028c5b <__cmpdf2+0x7e>
c0028c53:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028c56:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028c59:	75 68                	jne    c0028cc3 <__cmpdf2+0xe6>
c0028c5b:	89 f3                	mov    ebx,esi
c0028c5d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c63:	43                   	inc    ebx
c0028c64:	83 fb 01             	cmp    ebx,0x1
c0028c67:	77 06                	ja     c0028c6f <__cmpdf2+0x92>
c0028c69:	89 fb                	mov    ebx,edi
c0028c6b:	09 cb                	or     ebx,ecx
c0028c6d:	75 54                	jne    c0028cc3 <__cmpdf2+0xe6>
c0028c6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c72:	09 f8                	or     eax,edi
c0028c74:	09 c8                	or     eax,ecx
c0028c76:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c79:	75 12                	jne    c0028c8d <__cmpdf2+0xb0>
c0028c7b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c7e:	83 f8 01             	cmp    eax,0x1
c0028c81:	77 0a                	ja     c0028c8d <__cmpdf2+0xb0>
c0028c83:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c86:	31 c0                	xor    eax,eax
c0028c88:	83 fb 01             	cmp    ebx,0x1
c0028c8b:	76 36                	jbe    c0028cc3 <__cmpdf2+0xe6>
c0028c8d:	b8 01 00 00 00       	mov    eax,0x1
c0028c92:	39 f2                	cmp    edx,esi
c0028c94:	7f 2d                	jg     c0028cc3 <__cmpdf2+0xe6>
c0028c96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c9b:	7c 26                	jl     c0028cc3 <__cmpdf2+0xe6>
c0028c9d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028ca0:	77 07                	ja     c0028ca9 <__cmpdf2+0xcc>
c0028ca2:	72 16                	jb     c0028cba <__cmpdf2+0xdd>
c0028ca4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028ca7:	76 0a                	jbe    c0028cb3 <__cmpdf2+0xd6>
c0028ca9:	89 d0                	mov    eax,edx
c0028cab:	c1 f8 1f             	sar    eax,0x1f
c0028cae:	83 c8 01             	or     eax,0x1
c0028cb1:	eb 10                	jmp    c0028cc3 <__cmpdf2+0xe6>
c0028cb3:	b8 00 00 00 00       	mov    eax,0x0
c0028cb8:	73 09                	jae    c0028cc3 <__cmpdf2+0xe6>
c0028cba:	89 d0                	mov    eax,edx
c0028cbc:	c1 f8 1f             	sar    eax,0x1f
c0028cbf:	83 e0 02             	and    eax,0x2
c0028cc2:	48                   	dec    eax
c0028cc3:	83 c4 0c             	add    esp,0xc
c0028cc6:	5b                   	pop    ebx
c0028cc7:	5e                   	pop    esi
c0028cc8:	5f                   	pop    edi
c0028cc9:	5d                   	pop    ebp
c0028cca:	c3                   	ret    

c0028ccb <__eqdf2>:
c0028ccb:	55                   	push   ebp
c0028ccc:	89 e5                	mov    ebp,esp
c0028cce:	50                   	push   eax
c0028ccf:	6a 01                	push   0x1
c0028cd1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028cd4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028cd7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028cda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028cdd:	e8 fb fe ff ff       	call   c0028bdd <__cmpdf2>
c0028ce2:	83 c4 18             	add    esp,0x18
c0028ce5:	c9                   	leave  
c0028ce6:	c3                   	ret    

c0028ce7 <__nedf2>:
c0028ce7:	eb e2                	jmp    c0028ccb <__eqdf2>

c0028ce9 <__gtdf2>:
c0028ce9:	55                   	push   ebp
c0028cea:	89 e5                	mov    ebp,esp
c0028cec:	50                   	push   eax
c0028ced:	6a ff                	push   0xffffffff
c0028cef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028cf2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028cf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028cf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028cfb:	e8 dd fe ff ff       	call   c0028bdd <__cmpdf2>
c0028d00:	83 c4 18             	add    esp,0x18
c0028d03:	c9                   	leave  
c0028d04:	c3                   	ret    

c0028d05 <__gedf2>:
c0028d05:	eb e2                	jmp    c0028ce9 <__gtdf2>

c0028d07 <__ltdf2>:
c0028d07:	eb c2                	jmp    c0028ccb <__eqdf2>

c0028d09 <__ledf2>:
c0028d09:	eb c0                	jmp    c0028ccb <__eqdf2>

c0028d0b <__truncdfsf2>:
c0028d0b:	55                   	push   ebp
c0028d0c:	89 e5                	mov    ebp,esp
c0028d0e:	57                   	push   edi
c0028d0f:	56                   	push   esi
c0028d10:	53                   	push   ebx
c0028d11:	83 ec 0c             	sub    esp,0xc
c0028d14:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d17:	89 d1                	mov    ecx,edx
c0028d19:	c1 f9 14             	sar    ecx,0x14
c0028d1c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d1f:	89 df                	mov    edi,ebx
c0028d21:	c1 e7 0b             	shl    edi,0xb
c0028d24:	89 d0                	mov    eax,edx
c0028d26:	c1 e0 0b             	shl    eax,0xb
c0028d29:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028d2e:	c1 eb 15             	shr    ebx,0x15
c0028d31:	09 d8                	or     eax,ebx
c0028d33:	89 cb                	mov    ebx,ecx
c0028d35:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028d3b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028d41:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028d47:	0f 86 9e 00 00 00    	jbe    c0028deb <__truncdfsf2+0xe0>
c0028d4d:	85 db                	test   ebx,ebx
c0028d4f:	75 0a                	jne    c0028d5b <__truncdfsf2+0x50>
c0028d51:	c1 fa 17             	sar    edx,0x17
c0028d54:	30 d2                	xor    dl,dl
c0028d56:	e9 84 00 00 00       	jmp    c0028ddf <__truncdfsf2+0xd4>
c0028d5b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d61:	83 fe 83             	cmp    esi,0xffffff83
c0028d64:	7d 4b                	jge    c0028db1 <__truncdfsf2+0xa6>
c0028d66:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d6b:	29 f1                	sub    ecx,esi
c0028d6d:	83 f9 1f             	cmp    ecx,0x1f
c0028d70:	7f 6b                	jg     c0028ddd <__truncdfsf2+0xd2>
c0028d72:	0d 00 00 00 80       	or     eax,0x80000000
c0028d77:	89 c3                	mov    ebx,eax
c0028d79:	d3 eb                	shr    ebx,cl
c0028d7b:	be 01 00 00 00       	mov    esi,0x1
c0028d80:	d3 e6                	shl    esi,cl
c0028d82:	4e                   	dec    esi
c0028d83:	21 f0                	and    eax,esi
c0028d85:	09 f8                	or     eax,edi
c0028d87:	0f 95 c0             	setne  al
c0028d8a:	0f b6 c0             	movzx  eax,al
c0028d8d:	09 c3                	or     ebx,eax
c0028d8f:	89 d9                	mov    ecx,ebx
c0028d91:	c1 e9 08             	shr    ecx,0x8
c0028d94:	f6 c3 7f             	test   bl,0x7f
c0028d97:	0f 95 c0             	setne  al
c0028d9a:	09 c8                	or     eax,ecx
c0028d9c:	83 e0 01             	and    eax,0x1
c0028d9f:	c1 eb 07             	shr    ebx,0x7
c0028da2:	21 c3                	and    ebx,eax
c0028da4:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028daa:	09 d1                	or     ecx,edx
c0028dac:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028daf:	eb 76                	jmp    c0028e27 <__truncdfsf2+0x11c>
c0028db1:	83 c6 80             	add    esi,0xffffff80
c0028db4:	7e 1d                	jle    c0028dd3 <__truncdfsf2+0xc8>
c0028db6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028dbc:	75 0b                	jne    c0028dc9 <__truncdfsf2+0xbe>
c0028dbe:	09 f8                	or     eax,edi
c0028dc0:	74 09                	je     c0028dcb <__truncdfsf2+0xc0>
c0028dc2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028dc7:	eb 02                	jmp    c0028dcb <__truncdfsf2+0xc0>
c0028dc9:	31 c0                	xor    eax,eax
c0028dcb:	c1 fa 17             	sar    edx,0x17
c0028dce:	80 ca ff             	or     dl,0xff
c0028dd1:	eb 0e                	jmp    c0028de1 <__truncdfsf2+0xd6>
c0028dd3:	c1 fa 1f             	sar    edx,0x1f
c0028dd6:	c1 e2 08             	shl    edx,0x8
c0028dd9:	09 ca                	or     edx,ecx
c0028ddb:	eb 04                	jmp    c0028de1 <__truncdfsf2+0xd6>
c0028ddd:	31 d2                	xor    edx,edx
c0028ddf:	31 c0                	xor    eax,eax
c0028de1:	c1 e2 17             	shl    edx,0x17
c0028de4:	c1 e8 08             	shr    eax,0x8
c0028de7:	09 d0                	or     eax,edx
c0028de9:	eb 3c                	jmp    c0028e27 <__truncdfsf2+0x11c>
c0028deb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028df1:	89 ca                	mov    edx,ecx
c0028df3:	c1 fa 0b             	sar    edx,0xb
c0028df6:	c1 e2 08             	shl    edx,0x8
c0028df9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028dfc:	31 db                	xor    ebx,ebx
c0028dfe:	85 ff                	test   edi,edi
c0028e00:	0f 95 c3             	setne  bl
c0028e03:	09 d8                	or     eax,ebx
c0028e05:	89 c3                	mov    ebx,eax
c0028e07:	c1 eb 08             	shr    ebx,0x8
c0028e0a:	a8 7f                	test   al,0x7f
c0028e0c:	0f 95 c2             	setne  dl
c0028e0f:	89 d6                	mov    esi,edx
c0028e11:	09 de                	or     esi,ebx
c0028e13:	83 e6 01             	and    esi,0x1
c0028e16:	c1 e8 07             	shr    eax,0x7
c0028e19:	21 f0                	and    eax,esi
c0028e1b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028e1e:	09 ca                	or     edx,ecx
c0028e20:	c1 e2 17             	shl    edx,0x17
c0028e23:	09 da                	or     edx,ebx
c0028e25:	01 d0                	add    eax,edx
c0028e27:	83 c4 0c             	add    esp,0xc
c0028e2a:	5b                   	pop    ebx
c0028e2b:	5e                   	pop    esi
c0028e2c:	5f                   	pop    edi
c0028e2d:	5d                   	pop    ebp
c0028e2e:	c3                   	ret    

c0028e2f <__extendsfdf2>:
c0028e2f:	55                   	push   ebp
c0028e30:	89 e5                	mov    ebp,esp
c0028e32:	57                   	push   edi
c0028e33:	56                   	push   esi
c0028e34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028e37:	89 d1                	mov    ecx,edx
c0028e39:	c1 f9 17             	sar    ecx,0x17
c0028e3c:	c1 e2 08             	shl    edx,0x8
c0028e3f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028e45:	89 c8                	mov    eax,ecx
c0028e47:	80 e4 f8             	and    ah,0xf8
c0028e4a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028e4d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028e53:	75 27                	jne    c0028e7c <__extendsfdf2+0x4d>
c0028e55:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028e5b:	75 18                	jne    c0028e75 <__extendsfdf2+0x46>
c0028e5d:	85 d2                	test   edx,edx
c0028e5f:	74 20                	je     c0028e81 <__extendsfdf2+0x52>
c0028e61:	41                   	inc    ecx
c0028e62:	01 d2                	add    edx,edx
c0028e64:	79 fb                	jns    c0028e61 <__extendsfdf2+0x32>
c0028e66:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e6c:	29 c8                	sub    eax,ecx
c0028e6e:	05 81 03 00 00       	add    eax,0x381
c0028e73:	eb 0c                	jmp    c0028e81 <__extendsfdf2+0x52>
c0028e75:	05 00 07 00 00       	add    eax,0x700
c0028e7a:	eb 05                	jmp    c0028e81 <__extendsfdf2+0x52>
c0028e7c:	05 80 03 00 00       	add    eax,0x380
c0028e81:	c1 e0 14             	shl    eax,0x14
c0028e84:	89 c1                	mov    ecx,eax
c0028e86:	89 d0                	mov    eax,edx
c0028e88:	c1 e8 0b             	shr    eax,0xb
c0028e8b:	09 c1                	or     ecx,eax
c0028e8d:	c1 e2 15             	shl    edx,0x15
c0028e90:	89 d0                	mov    eax,edx
c0028e92:	89 ca                	mov    edx,ecx
c0028e94:	5e                   	pop    esi
c0028e95:	5f                   	pop    edi
c0028e96:	5d                   	pop    ebp
c0028e97:	c3                   	ret    
c0028e98:	66 90                	xchg   ax,ax
c0028e9a:	66 90                	xchg   ax,ax
c0028e9c:	66 90                	xchg   ax,ax
c0028e9e:	66 90                	xchg   ax,ax

c0028ea0 <fabs>:
c0028ea0:	83 ec 0c             	sub    esp,0xc
c0028ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea7:	89 04 24             	mov    DWORD PTR [esp],eax
c0028eaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028eae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028eb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028eb7:	dd 04 24             	fld    QWORD PTR [esp]
c0028eba:	83 c4 0c             	add    esp,0xc
c0028ebd:	c3                   	ret    
c0028ebe:	66 90                	xchg   ax,ax

c0028ec0 <lrint>:
c0028ec0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028ec4:	83 ec 04             	sub    esp,0x4
c0028ec7:	db 1c 24             	fistp  DWORD PTR [esp]
c0028eca:	58                   	pop    eax
c0028ecb:	c3                   	ret    

c0028ecc <lrintf>:
c0028ecc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028ed0:	83 ec 04             	sub    esp,0x4
c0028ed3:	db 1c 24             	fistp  DWORD PTR [esp]
c0028ed6:	58                   	pop    eax
c0028ed7:	c3                   	ret    

Disassembly of section .init:

c0028ed8 <_init>:
c0028ed8:	55                   	push   ebp
c0028ed9:	89 e5                	mov    ebp,esp
c0028edb:	e8 38 72 fd ff       	call   c0000118 <frame_dummy>
c0028ee0:	e8 5b e0 ff ff       	call   c0026f40 <__do_global_ctors_aux>
c0028ee5:	5d                   	pop    ebp
c0028ee6:	c3                   	ret    

Disassembly of section .fini:

c0028ee7 <_fini>:
c0028ee7:	55                   	push   ebp
c0028ee8:	89 e5                	mov    ebp,esp
c0028eea:	e8 b9 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028eef:	5d                   	pop    ebp
c0028ef0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028ef2 <Computer::~Computer()>:
c0028ef2:	83 ec 0c             	sub    esp,0xc
c0028ef5:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c0028efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efe:	89 10                	mov    DWORD PTR [eax],edx
c0028f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	50                   	push   eax
c0028f08:	e8 71 b2 fe ff       	call   c001417e <Device::~Device()>
c0028f0d:	83 c4 10             	add    esp,0x10
c0028f10:	90                   	nop
c0028f11:	83 c4 0c             	add    esp,0xc
c0028f14:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028f16 <Computer::~Computer()>:
c0028f16:	83 ec 0c             	sub    esp,0xc
c0028f19:	83 ec 0c             	sub    esp,0xc
c0028f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f20:	e8 cd ff ff ff       	call   c0028ef2 <Computer::~Computer()>
c0028f25:	83 c4 10             	add    esp,0x10
c0028f28:	83 ec 08             	sub    esp,0x8
c0028f2b:	68 ec 01 00 00       	push   0x1ec
c0028f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f34:	e8 5e 9e fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	83 c4 0c             	add    esp,0xc
c0028f3f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028f40 <idleCommon()>:
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	fa                   	cli    
c0028f44:	ff 05 08 24 03 c0    	inc    DWORD PTR ds:0xc0032408
c0028f4a:	e8 9b 55 ff ff       	call   c001e4ea <schedule()>
c0028f4f:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c0028f54:	48                   	dec    eax
c0028f55:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c0028f5a:	75 01                	jne    c0028f5d <idleCommon()+0x1d>
c0028f5c:	fb                   	sti    
c0028f5d:	83 c4 0c             	add    esp,0xc
c0028f60:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f62 <LinkedList<UnixFile>::~LinkedList()>:
c0028f62:	90                   	nop
c0028f63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f64 <LinkedList<UnixFile>::LinkedList()>:
c0028f64:	83 ec 0c             	sub    esp,0xc
c0028f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f80:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fa7:	83 ec 0c             	sub    esp,0xc
c0028faa:	68 e6 ad 02 c0       	push   0xc002ade6
c0028faf:	e8 c3 9e fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c0028fb4:	83 c4 10             	add    esp,0x10
c0028fb7:	90                   	nop
c0028fb8:	83 c4 0c             	add    esp,0xc
c0028fbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028fbc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028fbc:	83 ec 0c             	sub    esp,0xc
c0028fbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028fc4:	75 10                	jne    c0028fd6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028fc6:	83 ec 0c             	sub    esp,0xc
c0028fc9:	68 00 ae 02 c0       	push   0xc002ae00
c0028fce:	e8 92 18 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0028fd3:	83 c4 10             	add    esp,0x10
c0028fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fdc:	85 c0                	test   eax,eax
c0028fde:	74 34                	je     c0029014 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fe7:	85 c0                	test   eax,eax
c0028fe9:	74 29                	je     c0029014 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ff2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ff6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029001:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002900b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029012:	eb 65                	jmp    c0029079 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029018:	8b 00                	mov    eax,DWORD PTR [eax]
c002901a:	85 c0                	test   eax,eax
c002901c:	75 4b                	jne    c0029069 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029025:	85 c0                	test   eax,eax
c0029027:	75 40                	jne    c0029069 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029031:	89 10                	mov    DWORD PTR [eax],edx
c0029033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029037:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002903b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002903e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029045:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002904c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029050:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029053:	85 c0                	test   eax,eax
c0029055:	74 22                	je     c0029079 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029057:	83 ec 0c             	sub    esp,0xc
c002905a:	68 22 ae 02 c0       	push   0xc002ae22
c002905f:	e8 01 18 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029064:	83 c4 10             	add    esp,0x10
c0029067:	eb 10                	jmp    c0029079 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029069:	83 ec 0c             	sub    esp,0xc
c002906c:	68 2c ae 02 c0       	push   0xc002ae2c
c0029071:	e8 ef 17 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029076:	83 c4 10             	add    esp,0x10
c0029079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029080:	8d 50 01             	lea    edx,[eax+0x1]
c0029083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029087:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002908a:	90                   	nop
c002908b:	83 c4 0c             	add    esp,0xc
c002908e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029090 <LinkedList<UnixFile>::getFirstElement()>:
c0029090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029094:	8b 00                	mov    eax,DWORD PTR [eax]
c0029096:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029098 <LinkedList<UnixFile>::removeFirst()>:
c0029098:	83 ec 0c             	sub    esp,0xc
c002909b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909f:	8b 00                	mov    eax,DWORD PTR [eax]
c00290a1:	85 c0                	test   eax,eax
c00290a3:	75 12                	jne    c00290b7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00290a5:	83 ec 0c             	sub    esp,0xc
c00290a8:	68 38 ae 02 c0       	push   0xc002ae38
c00290ad:	e8 b3 17 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c00290b2:	83 c4 10             	add    esp,0x10
c00290b5:	eb 7e                	jmp    c0029135 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00290b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290c1:	85 c0                	test   eax,eax
c00290c3:	74 10                	je     c00290d5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00290c5:	83 ec 0c             	sub    esp,0xc
c00290c8:	68 83 ae 02 c0       	push   0xc002ae83
c00290cd:	e8 93 17 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c00290d2:	83 c4 10             	add    esp,0x10
c00290d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290de:	85 c0                	test   eax,eax
c00290e0:	75 33                	jne    c0029115 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00290e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290fe:	83 f8 01             	cmp    eax,0x1
c0029101:	74 21                	je     c0029124 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029103:	83 ec 0c             	sub    esp,0xc
c0029106:	68 5c ae 02 c0       	push   0xc002ae5c
c002910b:	e8 55 17 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029110:	83 c4 10             	add    esp,0x10
c0029113:	eb 0f                	jmp    c0029124 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029119:	8b 00                	mov    eax,DWORD PTR [eax]
c002911b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002911e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029122:	89 10                	mov    DWORD PTR [eax],edx
c0029124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029128:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002912b:	8d 50 ff             	lea    edx,[eax-0x1]
c002912e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029132:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029135:	83 c4 0c             	add    esp,0xc
c0029138:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002913a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002913a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002913e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029141:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029142 <DriverlessDevice::~DriverlessDevice()>:
c0029142:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c0029147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002914b:	89 10                	mov    DWORD PTR [eax],edx
c002914d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029151:	50                   	push   eax
c0029152:	e8 27 b0 fe ff       	call   c001417e <Device::~Device()>
c0029157:	83 c4 04             	add    esp,0x4
c002915a:	90                   	nop
c002915b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002915c <DriverlessDevice::~DriverlessDevice()>:
c002915c:	83 ec 0c             	sub    esp,0xc
c002915f:	83 ec 0c             	sub    esp,0xc
c0029162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029166:	e8 d7 ff ff ff       	call   c0029142 <DriverlessDevice::~DriverlessDevice()>
c002916b:	83 c4 10             	add    esp,0x10
c002916e:	83 ec 08             	sub    esp,0x8
c0029171:	68 58 01 00 00       	push   0x158
c0029176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002917a:	e8 18 9c fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c002917f:	83 c4 10             	add    esp,0x10
c0029182:	83 c4 0c             	add    esp,0xc
c0029185:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029186 <LinkedList<Device>::addElement(Device*)>:
c0029186:	83 ec 0c             	sub    esp,0xc
c0029189:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002918e:	75 10                	jne    c00291a0 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029190:	83 ec 0c             	sub    esp,0xc
c0029193:	68 00 ae 02 c0       	push   0xc002ae00
c0029198:	e8 c8 16 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c002919d:	83 c4 10             	add    esp,0x10
c00291a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00291a6:	85 c0                	test   eax,eax
c00291a8:	74 3a                	je     c00291e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00291aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291b1:	85 c0                	test   eax,eax
c00291b3:	74 2f                	je     c00291e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00291b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291c0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00291c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291d8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291e2:	eb 68                	jmp    c002924c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00291ea:	85 c0                	test   eax,eax
c00291ec:	75 4e                	jne    c002923c <LinkedList<Device>::addElement(Device*)+0xb6>
c00291ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291f5:	85 c0                	test   eax,eax
c00291f7:	75 43                	jne    c002923c <LinkedList<Device>::addElement(Device*)+0xb6>
c00291f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029201:	89 10                	mov    DWORD PTR [eax],edx
c0029203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029207:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002920b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002920e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029215:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002921f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029223:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029226:	85 c0                	test   eax,eax
c0029228:	74 22                	je     c002924c <LinkedList<Device>::addElement(Device*)+0xc6>
c002922a:	83 ec 0c             	sub    esp,0xc
c002922d:	68 22 ae 02 c0       	push   0xc002ae22
c0029232:	e8 2e 16 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029237:	83 c4 10             	add    esp,0x10
c002923a:	eb 10                	jmp    c002924c <LinkedList<Device>::addElement(Device*)+0xc6>
c002923c:	83 ec 0c             	sub    esp,0xc
c002923f:	68 2c ae 02 c0       	push   0xc002ae2c
c0029244:	e8 1c 16 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029249:	83 c4 10             	add    esp,0x10
c002924c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029250:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029253:	8d 50 01             	lea    edx,[eax+0x1]
c0029256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002925d:	90                   	nop
c002925e:	83 c4 0c             	add    esp,0xc
c0029261:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029262 <LinkedList<Device>::LinkedList()>:
c0029262:	83 ec 0c             	sub    esp,0xc
c0029265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029269:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002926f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029273:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002927a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029289:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002928f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029293:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002929a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00292a5:	83 ec 0c             	sub    esp,0xc
c00292a8:	68 e6 ad 02 c0       	push   0xc002ade6
c00292ad:	e8 c5 9b fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c00292b2:	83 c4 10             	add    esp,0x10
c00292b5:	90                   	nop
c00292b6:	83 c4 0c             	add    esp,0xc
c00292b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00292ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00292ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292be:	8b 00                	mov    eax,DWORD PTR [eax]
c00292c0:	85 c0                	test   eax,eax
c00292c2:	75 0e                	jne    c00292d2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00292c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292cb:	85 c0                	test   eax,eax
c00292cd:	75 03                	jne    c00292d2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00292cf:	b0 01                	mov    al,0x1
c00292d1:	c3                   	ret    
c00292d2:	b0 00                	mov    al,0x0
c00292d4:	90                   	nop
c00292d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00292d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00292d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292da:	8b 00                	mov    eax,DWORD PTR [eax]
c00292dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00292de <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00292de:	83 ec 0c             	sub    esp,0xc
c00292e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00292e7:	85 c0                	test   eax,eax
c00292e9:	75 15                	jne    c0029300 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00292eb:	83 ec 0c             	sub    esp,0xc
c00292ee:	68 38 ae 02 c0       	push   0xc002ae38
c00292f3:	e8 6d 15 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c00292f8:	83 c4 10             	add    esp,0x10
c00292fb:	e9 88 00 00 00       	jmp    c0029388 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029304:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029307:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002930a:	85 c0                	test   eax,eax
c002930c:	0f 95 c0             	setne  al
c002930f:	84 c0                	test   al,al
c0029311:	74 10                	je     c0029323 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029313:	83 ec 0c             	sub    esp,0xc
c0029316:	68 83 ae 02 c0       	push   0xc002ae83
c002931b:	e8 45 15 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029320:	83 c4 10             	add    esp,0x10
c0029323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029327:	8b 00                	mov    eax,DWORD PTR [eax]
c0029329:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002932c:	85 c0                	test   eax,eax
c002932e:	0f 94 c0             	sete   al
c0029331:	84 c0                	test   al,al
c0029333:	74 33                	je     c0029368 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029339:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002933f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029343:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002934a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029351:	83 f8 01             	cmp    eax,0x1
c0029354:	74 21                	je     c0029377 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029356:	83 ec 0c             	sub    esp,0xc
c0029359:	68 5c ae 02 c0       	push   0xc002ae5c
c002935e:	e8 02 15 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029363:	83 c4 10             	add    esp,0x10
c0029366:	eb 0f                	jmp    c0029377 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936c:	8b 00                	mov    eax,DWORD PTR [eax]
c002936e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029375:	89 10                	mov    DWORD PTR [eax],edx
c0029377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002937e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029385:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029388:	83 c4 0c             	add    esp,0xc
c002938b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002938c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002938c:	83 ec 0c             	sub    esp,0xc
c002938f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029394:	75 10                	jne    c00293a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029396:	83 ec 0c             	sub    esp,0xc
c0029399:	68 00 ae 02 c0       	push   0xc002ae00
c002939e:	e8 c2 14 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c00293a3:	83 c4 10             	add    esp,0x10
c00293a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00293ac:	85 c0                	test   eax,eax
c00293ae:	74 34                	je     c00293e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00293b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293b7:	85 c0                	test   eax,eax
c00293b9:	74 29                	je     c00293e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00293bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293c6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00293c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293db:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293e2:	eb 65                	jmp    c0029449 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293ea:	85 c0                	test   eax,eax
c00293ec:	75 4b                	jne    c0029439 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293f5:	85 c0                	test   eax,eax
c00293f7:	75 40                	jne    c0029439 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029401:	89 10                	mov    DWORD PTR [eax],edx
c0029403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029407:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002940b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002940e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029412:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029415:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002941c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029420:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029423:	85 c0                	test   eax,eax
c0029425:	74 22                	je     c0029449 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029427:	83 ec 0c             	sub    esp,0xc
c002942a:	68 22 ae 02 c0       	push   0xc002ae22
c002942f:	e8 31 14 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029434:	83 c4 10             	add    esp,0x10
c0029437:	eb 10                	jmp    c0029449 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029439:	83 ec 0c             	sub    esp,0xc
c002943c:	68 2c ae 02 c0       	push   0xc002ae2c
c0029441:	e8 1f 14 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029446:	83 c4 10             	add    esp,0x10
c0029449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029450:	8d 50 01             	lea    edx,[eax+0x1]
c0029453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029457:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002945a:	90                   	nop
c002945b:	83 c4 0c             	add    esp,0xc
c002945e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029460 <ACPI::~ACPI()>:
c0029460:	83 ec 0c             	sub    esp,0xc
c0029463:	ba 30 c0 02 c0       	mov    edx,0xc002c030
c0029468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946c:	89 10                	mov    DWORD PTR [eax],edx
c002946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029472:	83 ec 0c             	sub    esp,0xc
c0029475:	50                   	push   eax
c0029476:	e8 03 ad fe ff       	call   c001417e <Device::~Device()>
c002947b:	83 c4 10             	add    esp,0x10
c002947e:	90                   	nop
c002947f:	83 c4 0c             	add    esp,0xc
c0029482:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029484 <ACPI::~ACPI()>:
c0029484:	83 ec 0c             	sub    esp,0xc
c0029487:	83 ec 0c             	sub    esp,0xc
c002948a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002948e:	e8 cd ff ff ff       	call   c0029460 <ACPI::~ACPI()>
c0029493:	83 c4 10             	add    esp,0x10
c0029496:	83 ec 08             	sub    esp,0x8
c0029499:	68 68 12 00 00       	push   0x1268
c002949e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294a2:	e8 f0 98 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00294a7:	83 c4 10             	add    esp,0x10
c00294aa:	83 c4 0c             	add    esp,0xc
c00294ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00294ae <LinkedList<Device>::~LinkedList()>:
c00294ae:	90                   	nop
c00294af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00294b0 <LinkedList<Device>::isEmpty()>:
c00294b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00294b6:	85 c0                	test   eax,eax
c00294b8:	75 0e                	jne    c00294c8 <LinkedList<Device>::isEmpty()+0x18>
c00294ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294c1:	85 c0                	test   eax,eax
c00294c3:	75 03                	jne    c00294c8 <LinkedList<Device>::isEmpty()+0x18>
c00294c5:	b0 01                	mov    al,0x1
c00294c7:	c3                   	ret    
c00294c8:	b0 00                	mov    al,0x0
c00294ca:	90                   	nop
c00294cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00294cc <LinkedList<Device>::getFirstElement()>:
c00294cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00294d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00294d4 <LinkedList<Device>::removeFirst()>:
c00294d4:	83 ec 0c             	sub    esp,0xc
c00294d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294db:	8b 00                	mov    eax,DWORD PTR [eax]
c00294dd:	85 c0                	test   eax,eax
c00294df:	75 15                	jne    c00294f6 <LinkedList<Device>::removeFirst()+0x22>
c00294e1:	83 ec 0c             	sub    esp,0xc
c00294e4:	68 38 ae 02 c0       	push   0xc002ae38
c00294e9:	e8 77 13 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c00294ee:	83 c4 10             	add    esp,0x10
c00294f1:	e9 87 00 00 00       	jmp    c002957d <LinkedList<Device>::removeFirst()+0xa9>
c00294f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294fd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029503:	85 c0                	test   eax,eax
c0029505:	74 10                	je     c0029517 <LinkedList<Device>::removeFirst()+0x43>
c0029507:	83 ec 0c             	sub    esp,0xc
c002950a:	68 83 ae 02 c0       	push   0xc002ae83
c002950f:	e8 51 13 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029514:	83 c4 10             	add    esp,0x10
c0029517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951b:	8b 00                	mov    eax,DWORD PTR [eax]
c002951d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029523:	85 c0                	test   eax,eax
c0029525:	75 33                	jne    c002955a <LinkedList<Device>::removeFirst()+0x86>
c0029527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029535:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002953c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029540:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029543:	83 f8 01             	cmp    eax,0x1
c0029546:	74 24                	je     c002956c <LinkedList<Device>::removeFirst()+0x98>
c0029548:	83 ec 0c             	sub    esp,0xc
c002954b:	68 5c ae 02 c0       	push   0xc002ae5c
c0029550:	e8 10 13 ff ff       	call   c001a865 <Krnl::panic(char const*)>
c0029555:	83 c4 10             	add    esp,0x10
c0029558:	eb 12                	jmp    c002956c <LinkedList<Device>::removeFirst()+0x98>
c002955a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029560:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002956a:	89 10                	mov    DWORD PTR [eax],edx
c002956c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029570:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029573:	8d 50 ff             	lea    edx,[eax-0x1]
c0029576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002957d:	83 c4 0c             	add    esp,0xc
c0029580:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029582 <CPU::~CPU()>:
c0029582:	83 ec 0c             	sub    esp,0xc
c0029585:	ba 20 c4 02 c0       	mov    edx,0xc002c420
c002958a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958e:	89 10                	mov    DWORD PTR [eax],edx
c0029590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029594:	83 ec 0c             	sub    esp,0xc
c0029597:	50                   	push   eax
c0029598:	e8 e1 ab fe ff       	call   c001417e <Device::~Device()>
c002959d:	83 c4 10             	add    esp,0x10
c00295a0:	90                   	nop
c00295a1:	83 c4 0c             	add    esp,0xc
c00295a4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00295a6 <CPU::~CPU()>:
c00295a6:	83 ec 0c             	sub    esp,0xc
c00295a9:	83 ec 0c             	sub    esp,0xc
c00295ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295b0:	e8 cd ff ff ff       	call   c0029582 <CPU::~CPU()>
c00295b5:	83 c4 10             	add    esp,0x10
c00295b8:	83 ec 08             	sub    esp,0x8
c00295bb:	68 98 11 00 00       	push   0x1198
c00295c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295c4:	e8 ce 97 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00295c9:	83 c4 10             	add    esp,0x10
c00295cc:	83 c4 0c             	add    esp,0xc
c00295cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00295d0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00295d0:	90                   	nop
c00295d1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00295d2 <ThreadControlBlock::ThreadControlBlock()>:
c00295d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00295dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00295e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295ec:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00295f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295f7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00295fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029602:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029609:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002960d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029615:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029619:	90                   	nop
c002961a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002961c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002961c:	83 ec 0c             	sub    esp,0xc
c002961f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029623:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029638:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002963f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029643:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029658:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002965f:	83 ec 0c             	sub    esp,0xc
c0029662:	68 e6 ad 02 c0       	push   0xc002ade6
c0029667:	e8 0b 98 fe ff       	call   c0012e77 <Dbg::kprintf(char const*, ...)>
c002966c:	83 c4 10             	add    esp,0x10
c002966f:	90                   	nop
c0029670:	83 c4 0c             	add    esp,0xc
c0029673:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029674:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029678:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002967b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002967c <Vm::_FPUState::_FPUState()>:
c002967c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029680:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029687:	90                   	nop
c0029688:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002968a <PCI::~PCI()>:
c002968a:	83 ec 0c             	sub    esp,0xc
c002968d:	ba 24 d5 02 c0       	mov    edx,0xc002d524
c0029692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029696:	89 10                	mov    DWORD PTR [eax],edx
c0029698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002969c:	83 ec 0c             	sub    esp,0xc
c002969f:	50                   	push   eax
c00296a0:	e8 a9 a4 fe ff       	call   c0013b4e <Bus::~Bus()>
c00296a5:	83 c4 10             	add    esp,0x10
c00296a8:	90                   	nop
c00296a9:	83 c4 0c             	add    esp,0xc
c00296ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00296ae <PCI::~PCI()>:
c00296ae:	83 ec 0c             	sub    esp,0xc
c00296b1:	83 ec 0c             	sub    esp,0xc
c00296b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296b8:	e8 cd ff ff ff       	call   c002968a <PCI::~PCI()>
c00296bd:	83 c4 10             	add    esp,0x10
c00296c0:	83 ec 08             	sub    esp,0x8
c00296c3:	68 58 01 00 00       	push   0x158
c00296c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296cc:	e8 c6 96 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00296d1:	83 c4 10             	add    esp,0x10
c00296d4:	83 c4 0c             	add    esp,0xc
c00296d7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00296d8 <IDE::~IDE()>:
c00296d8:	83 ec 0c             	sub    esp,0xc
c00296db:	ba 88 d7 02 c0       	mov    edx,0xc002d788
c00296e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e4:	89 10                	mov    DWORD PTR [eax],edx
c00296e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ea:	83 ec 0c             	sub    esp,0xc
c00296ed:	50                   	push   eax
c00296ee:	e8 89 af fe ff       	call   c001467c <HardDiskController::~HardDiskController()>
c00296f3:	83 c4 10             	add    esp,0x10
c00296f6:	90                   	nop
c00296f7:	83 c4 0c             	add    esp,0xc
c00296fa:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00296fc <IDE::~IDE()>:
c00296fc:	83 ec 0c             	sub    esp,0xc
c00296ff:	83 ec 0c             	sub    esp,0xc
c0029702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029706:	e8 cd ff ff ff       	call   c00296d8 <IDE::~IDE()>
c002970b:	83 c4 10             	add    esp,0x10
c002970e:	83 ec 08             	sub    esp,0x8
c0029711:	68 70 02 00 00       	push   0x270
c0029716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002971a:	e8 78 96 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c002971f:	83 c4 10             	add    esp,0x10
c0029722:	83 c4 0c             	add    esp,0xc
c0029725:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029726 <SATABus::~SATABus()>:
c0029726:	83 ec 0c             	sub    esp,0xc
c0029729:	ba 68 d8 02 c0       	mov    edx,0xc002d868
c002972e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029732:	89 10                	mov    DWORD PTR [eax],edx
c0029734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029738:	83 ec 0c             	sub    esp,0xc
c002973b:	50                   	push   eax
c002973c:	e8 3b af fe ff       	call   c001467c <HardDiskController::~HardDiskController()>
c0029741:	83 c4 10             	add    esp,0x10
c0029744:	90                   	nop
c0029745:	83 c4 0c             	add    esp,0xc
c0029748:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002974a <SATABus::~SATABus()>:
c002974a:	83 ec 0c             	sub    esp,0xc
c002974d:	83 ec 0c             	sub    esp,0xc
c0029750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029754:	e8 cd ff ff ff       	call   c0029726 <SATABus::~SATABus()>
c0029759:	83 c4 10             	add    esp,0x10
c002975c:	83 ec 08             	sub    esp,0x8
c002975f:	68 64 01 00 00       	push   0x164
c0029764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029768:	e8 2a 96 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c002976d:	83 c4 10             	add    esp,0x10
c0029770:	83 c4 0c             	add    esp,0xc
c0029773:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029774 <ATA::~ATA()>:
c0029774:	83 ec 0c             	sub    esp,0xc
c0029777:	ba b4 d8 02 c0       	mov    edx,0xc002d8b4
c002977c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029780:	89 10                	mov    DWORD PTR [eax],edx
c0029782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029786:	83 ec 0c             	sub    esp,0xc
c0029789:	50                   	push   eax
c002978a:	e8 df af fe ff       	call   c001476e <PhysicalDisk::~PhysicalDisk()>
c002978f:	83 c4 10             	add    esp,0x10
c0029792:	90                   	nop
c0029793:	83 c4 0c             	add    esp,0xc
c0029796:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029798 <ATA::~ATA()>:
c0029798:	83 ec 0c             	sub    esp,0xc
c002979b:	83 ec 0c             	sub    esp,0xc
c002979e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297a2:	e8 cd ff ff ff       	call   c0029774 <ATA::~ATA()>
c00297a7:	83 c4 10             	add    esp,0x10
c00297aa:	83 ec 08             	sub    esp,0x8
c00297ad:	68 7c 01 00 00       	push   0x17c
c00297b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297b6:	e8 dc 95 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00297bb:	83 c4 10             	add    esp,0x10
c00297be:	83 c4 0c             	add    esp,0xc
c00297c1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00297c2 <ATAPI::~ATAPI()>:
c00297c2:	83 ec 0c             	sub    esp,0xc
c00297c5:	ba ec d8 02 c0       	mov    edx,0xc002d8ec
c00297ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ce:	89 10                	mov    DWORD PTR [eax],edx
c00297d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d4:	83 ec 0c             	sub    esp,0xc
c00297d7:	50                   	push   eax
c00297d8:	e8 91 af fe ff       	call   c001476e <PhysicalDisk::~PhysicalDisk()>
c00297dd:	83 c4 10             	add    esp,0x10
c00297e0:	90                   	nop
c00297e1:	83 c4 0c             	add    esp,0xc
c00297e4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00297e6 <ATAPI::~ATAPI()>:
c00297e6:	83 ec 0c             	sub    esp,0xc
c00297e9:	83 ec 0c             	sub    esp,0xc
c00297ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297f0:	e8 cd ff ff ff       	call   c00297c2 <ATAPI::~ATAPI()>
c00297f5:	83 c4 10             	add    esp,0x10
c00297f8:	83 ec 08             	sub    esp,0x8
c00297fb:	68 80 01 00 00       	push   0x180
c0029800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029804:	e8 8e 95 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0029809:	83 c4 10             	add    esp,0x10
c002980c:	83 c4 0c             	add    esp,0xc
c002980f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029810 <SATA::~SATA()>:
c0029810:	83 ec 0c             	sub    esp,0xc
c0029813:	ba a0 d9 02 c0       	mov    edx,0xc002d9a0
c0029818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002981c:	89 10                	mov    DWORD PTR [eax],edx
c002981e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029822:	83 ec 0c             	sub    esp,0xc
c0029825:	50                   	push   eax
c0029826:	e8 43 af fe ff       	call   c001476e <PhysicalDisk::~PhysicalDisk()>
c002982b:	83 c4 10             	add    esp,0x10
c002982e:	90                   	nop
c002982f:	83 c4 0c             	add    esp,0xc
c0029832:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029834 <SATA::~SATA()>:
c0029834:	83 ec 0c             	sub    esp,0xc
c0029837:	83 ec 0c             	sub    esp,0xc
c002983a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002983e:	e8 cd ff ff ff       	call   c0029810 <SATA::~SATA()>
c0029843:	83 c4 10             	add    esp,0x10
c0029846:	83 ec 08             	sub    esp,0x8
c0029849:	68 7c 01 00 00       	push   0x17c
c002984e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029852:	e8 40 95 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0029857:	83 c4 10             	add    esp,0x10
c002985a:	83 c4 0c             	add    esp,0xc
c002985d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002985e <SATAPI::~SATAPI()>:
c002985e:	83 ec 0c             	sub    esp,0xc
c0029861:	ba 7c da 02 c0       	mov    edx,0xc002da7c
c0029866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002986a:	89 10                	mov    DWORD PTR [eax],edx
c002986c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029870:	83 ec 0c             	sub    esp,0xc
c0029873:	50                   	push   eax
c0029874:	e8 f5 ae fe ff       	call   c001476e <PhysicalDisk::~PhysicalDisk()>
c0029879:	83 c4 10             	add    esp,0x10
c002987c:	90                   	nop
c002987d:	83 c4 0c             	add    esp,0xc
c0029880:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029882 <SATAPI::~SATAPI()>:
c0029882:	83 ec 0c             	sub    esp,0xc
c0029885:	83 ec 0c             	sub    esp,0xc
c0029888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002988c:	e8 cd ff ff ff       	call   c002985e <SATAPI::~SATAPI()>
c0029891:	83 c4 10             	add    esp,0x10
c0029894:	83 ec 08             	sub    esp,0x8
c0029897:	68 80 01 00 00       	push   0x180
c002989c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298a0:	e8 f2 94 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00298a5:	83 c4 10             	add    esp,0x10
c00298a8:	83 c4 0c             	add    esp,0xc
c00298ab:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00298ac <AVX::~AVX()>:
c00298ac:	83 ec 0c             	sub    esp,0xc
c00298af:	ba bc da 02 c0       	mov    edx,0xc002dabc
c00298b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298b8:	89 10                	mov    DWORD PTR [eax],edx
c00298ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298be:	83 ec 0c             	sub    esp,0xc
c00298c1:	50                   	push   eax
c00298c2:	e8 2b af fe ff       	call   c00147f2 <FPU::~FPU()>
c00298c7:	83 c4 10             	add    esp,0x10
c00298ca:	90                   	nop
c00298cb:	83 c4 0c             	add    esp,0xc
c00298ce:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00298d0 <AVX::~AVX()>:
c00298d0:	83 ec 0c             	sub    esp,0xc
c00298d3:	83 ec 0c             	sub    esp,0xc
c00298d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298da:	e8 cd ff ff ff       	call   c00298ac <AVX::~AVX()>
c00298df:	83 c4 10             	add    esp,0x10
c00298e2:	83 ec 08             	sub    esp,0x8
c00298e5:	68 58 01 00 00       	push   0x158
c00298ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ee:	e8 a4 94 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00298f3:	83 c4 10             	add    esp,0x10
c00298f6:	83 c4 0c             	add    esp,0xc
c00298f9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00298fa <MMX::~MMX()>:
c00298fa:	83 ec 0c             	sub    esp,0xc
c00298fd:	ba fc da 02 c0       	mov    edx,0xc002dafc
c0029902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029906:	89 10                	mov    DWORD PTR [eax],edx
c0029908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002990c:	83 ec 0c             	sub    esp,0xc
c002990f:	50                   	push   eax
c0029910:	e8 dd ae fe ff       	call   c00147f2 <FPU::~FPU()>
c0029915:	83 c4 10             	add    esp,0x10
c0029918:	90                   	nop
c0029919:	83 c4 0c             	add    esp,0xc
c002991c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002991e <MMX::~MMX()>:
c002991e:	83 ec 0c             	sub    esp,0xc
c0029921:	83 ec 0c             	sub    esp,0xc
c0029924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029928:	e8 cd ff ff ff       	call   c00298fa <MMX::~MMX()>
c002992d:	83 c4 10             	add    esp,0x10
c0029930:	83 ec 08             	sub    esp,0x8
c0029933:	68 58 01 00 00       	push   0x158
c0029938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002993c:	e8 56 94 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0029941:	83 c4 10             	add    esp,0x10
c0029944:	83 c4 0c             	add    esp,0xc
c0029947:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029948 <SSE::~SSE()>:
c0029948:	83 ec 0c             	sub    esp,0xc
c002994b:	ba 3c db 02 c0       	mov    edx,0xc002db3c
c0029950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029954:	89 10                	mov    DWORD PTR [eax],edx
c0029956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002995a:	83 ec 0c             	sub    esp,0xc
c002995d:	50                   	push   eax
c002995e:	e8 8f ae fe ff       	call   c00147f2 <FPU::~FPU()>
c0029963:	83 c4 10             	add    esp,0x10
c0029966:	90                   	nop
c0029967:	83 c4 0c             	add    esp,0xc
c002996a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002996c <SSE::~SSE()>:
c002996c:	83 ec 0c             	sub    esp,0xc
c002996f:	83 ec 0c             	sub    esp,0xc
c0029972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029976:	e8 cd ff ff ff       	call   c0029948 <SSE::~SSE()>
c002997b:	83 c4 10             	add    esp,0x10
c002997e:	83 ec 08             	sub    esp,0x8
c0029981:	68 58 01 00 00       	push   0x158
c0029986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002998a:	e8 08 94 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c002998f:	83 c4 10             	add    esp,0x10
c0029992:	83 c4 0c             	add    esp,0xc
c0029995:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029996 <x87::~x87()>:
c0029996:	83 ec 0c             	sub    esp,0xc
c0029999:	ba 7c db 02 c0       	mov    edx,0xc002db7c
c002999e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a2:	89 10                	mov    DWORD PTR [eax],edx
c00299a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a8:	83 ec 0c             	sub    esp,0xc
c00299ab:	50                   	push   eax
c00299ac:	e8 41 ae fe ff       	call   c00147f2 <FPU::~FPU()>
c00299b1:	83 c4 10             	add    esp,0x10
c00299b4:	90                   	nop
c00299b5:	83 c4 0c             	add    esp,0xc
c00299b8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00299ba <x87::~x87()>:
c00299ba:	83 ec 0c             	sub    esp,0xc
c00299bd:	83 ec 0c             	sub    esp,0xc
c00299c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299c4:	e8 cd ff ff ff       	call   c0029996 <x87::~x87()>
c00299c9:	83 c4 10             	add    esp,0x10
c00299cc:	83 ec 08             	sub    esp,0x8
c00299cf:	68 58 01 00 00       	push   0x158
c00299d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d8:	e8 ba 93 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c00299dd:	83 c4 10             	add    esp,0x10
c00299e0:	83 c4 0c             	add    esp,0xc
c00299e3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00299e4 <IOAPIC::~IOAPIC()>:
c00299e4:	83 ec 0c             	sub    esp,0xc
c00299e7:	ba d4 dc 02 c0       	mov    edx,0xc002dcd4
c00299ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f0:	89 10                	mov    DWORD PTR [eax],edx
c00299f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f6:	83 ec 0c             	sub    esp,0xc
c00299f9:	50                   	push   eax
c00299fa:	e8 7f a7 fe ff       	call   c001417e <Device::~Device()>
c00299ff:	83 c4 10             	add    esp,0x10
c0029a02:	90                   	nop
c0029a03:	83 c4 0c             	add    esp,0xc
c0029a06:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029a08 <IOAPIC::~IOAPIC()>:
c0029a08:	83 ec 0c             	sub    esp,0xc
c0029a0b:	83 ec 0c             	sub    esp,0xc
c0029a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a12:	e8 cd ff ff ff       	call   c00299e4 <IOAPIC::~IOAPIC()>
c0029a17:	83 c4 10             	add    esp,0x10
c0029a1a:	83 ec 08             	sub    esp,0x8
c0029a1d:	68 68 01 00 00       	push   0x168
c0029a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a26:	e8 6c 93 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0029a2b:	83 c4 10             	add    esp,0x10
c0029a2e:	83 c4 0c             	add    esp,0xc
c0029a31:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029a32 <APIC::~APIC()>:
c0029a32:	83 ec 0c             	sub    esp,0xc
c0029a35:	ba 8c dc 02 c0       	mov    edx,0xc002dc8c
c0029a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a3e:	89 10                	mov    DWORD PTR [eax],edx
c0029a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a44:	83 ec 0c             	sub    esp,0xc
c0029a47:	50                   	push   eax
c0029a48:	e8 6f b2 fe ff       	call   c0014cbc <InterruptController::~InterruptController()>
c0029a4d:	83 c4 10             	add    esp,0x10
c0029a50:	90                   	nop
c0029a51:	83 c4 0c             	add    esp,0xc
c0029a54:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029a56 <APIC::~APIC()>:
c0029a56:	83 ec 0c             	sub    esp,0xc
c0029a59:	83 ec 0c             	sub    esp,0xc
c0029a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a60:	e8 cd ff ff ff       	call   c0029a32 <APIC::~APIC()>
c0029a65:	83 c4 10             	add    esp,0x10
c0029a68:	83 ec 08             	sub    esp,0x8
c0029a6b:	68 58 21 00 00       	push   0x2158
c0029a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a74:	e8 1e 93 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0029a79:	83 c4 10             	add    esp,0x10
c0029a7c:	83 c4 0c             	add    esp,0xc
c0029a7f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a80 <PIC::~PIC()>:
c0029a80:	83 ec 0c             	sub    esp,0xc
c0029a83:	ba 24 dd 02 c0       	mov    edx,0xc002dd24
c0029a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a8c:	89 10                	mov    DWORD PTR [eax],edx
c0029a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a92:	83 ec 0c             	sub    esp,0xc
c0029a95:	50                   	push   eax
c0029a96:	e8 21 b2 fe ff       	call   c0014cbc <InterruptController::~InterruptController()>
c0029a9b:	83 c4 10             	add    esp,0x10
c0029a9e:	90                   	nop
c0029a9f:	83 c4 0c             	add    esp,0xc
c0029aa2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029aa4 <PIC::~PIC()>:
c0029aa4:	83 ec 0c             	sub    esp,0xc
c0029aa7:	83 ec 0c             	sub    esp,0xc
c0029aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aae:	e8 cd ff ff ff       	call   c0029a80 <PIC::~PIC()>
c0029ab3:	83 c4 10             	add    esp,0x10
c0029ab6:	83 ec 08             	sub    esp,0x8
c0029ab9:	68 58 21 00 00       	push   0x2158
c0029abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ac2:	e8 d0 92 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0029ac7:	83 c4 10             	add    esp,0x10
c0029aca:	83 c4 0c             	add    esp,0xc
c0029acd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029ace <APICTimer::~APICTimer()>:
c0029ace:	83 ec 0c             	sub    esp,0xc
c0029ad1:	ba 78 dd 02 c0       	mov    edx,0xc002dd78
c0029ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ada:	89 10                	mov    DWORD PTR [eax],edx
c0029adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae0:	83 ec 0c             	sub    esp,0xc
c0029ae3:	50                   	push   eax
c0029ae4:	e8 89 d2 fe ff       	call   c0016d72 <Timer::~Timer()>
c0029ae9:	83 c4 10             	add    esp,0x10
c0029aec:	90                   	nop
c0029aed:	83 c4 0c             	add    esp,0xc
c0029af0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029af2 <APICTimer::~APICTimer()>:
c0029af2:	83 ec 0c             	sub    esp,0xc
c0029af5:	83 ec 0c             	sub    esp,0xc
c0029af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029afc:	e8 cd ff ff ff       	call   c0029ace <APICTimer::~APICTimer()>
c0029b01:	83 c4 10             	add    esp,0x10
c0029b04:	83 ec 08             	sub    esp,0x8
c0029b07:	68 60 01 00 00       	push   0x160
c0029b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b10:	e8 82 92 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0029b15:	83 c4 10             	add    esp,0x10
c0029b18:	83 c4 0c             	add    esp,0xc
c0029b1b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029b1c <PIT::~PIT()>:
c0029b1c:	83 ec 0c             	sub    esp,0xc
c0029b1f:	ba c8 dd 02 c0       	mov    edx,0xc002ddc8
c0029b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b28:	89 10                	mov    DWORD PTR [eax],edx
c0029b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b2e:	83 ec 0c             	sub    esp,0xc
c0029b31:	50                   	push   eax
c0029b32:	e8 3b d2 fe ff       	call   c0016d72 <Timer::~Timer()>
c0029b37:	83 c4 10             	add    esp,0x10
c0029b3a:	90                   	nop
c0029b3b:	83 c4 0c             	add    esp,0xc
c0029b3e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029b40 <PIT::~PIT()>:
c0029b40:	83 ec 0c             	sub    esp,0xc
c0029b43:	83 ec 0c             	sub    esp,0xc
c0029b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b4a:	e8 cd ff ff ff       	call   c0029b1c <PIT::~PIT()>
c0029b4f:	83 c4 10             	add    esp,0x10
c0029b52:	83 ec 08             	sub    esp,0x8
c0029b55:	68 5c 01 00 00       	push   0x15c
c0029b5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b5e:	e8 34 92 fe ff       	call   c0012d97 <operator delete(void*, unsigned long)>
c0029b63:	83 c4 10             	add    esp,0x10
c0029b66:	83 c4 0c             	add    esp,0xc
c0029b69:	c3                   	ret    
